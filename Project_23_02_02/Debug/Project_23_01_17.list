
Project_23_01_17.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c0c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08004ddc  08004ddc  00014ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004eb0  08004eb0  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  08004eb0  08004eb0  00014eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004eb8  08004eb8  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004eb8  08004eb8  00014eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ebc  08004ebc  00014ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08004ec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  200000b0  08004f70  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08004f70  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a86f  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c97  00000000  00000000  0002a94f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  0002c5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c0  00000000  00000000  0002ce60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021ca4  00000000  00000000  0002d620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b158  00000000  00000000  0004f2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9d09  00000000  00000000  0005a41c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00124125  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028f4  00000000  00000000  00124178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004dc4 	.word	0x08004dc4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b4 	.word	0x200000b4
 800020c:	08004dc4 	.word	0x08004dc4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init(); //
 80005ba:	f000 fc65 	bl	8000e88 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f84b 	bl	8000658 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 f905 	bl	80007d0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005c6:	f000 f8e3 	bl	8000790 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005ca:	f000 f8b7 	bl	800073c <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  /* Initiate Continuous reception */
  StartReception();
 80005ce:	f000 f983 	bl	80008d8 <StartReception>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	4b13      	ldr	r3, [pc, #76]	; (8000624 <main+0x70>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a12      	ldr	r2, [pc, #72]	; (8000624 <main+0x70>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <main+0x70>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <main+0x74>)
 80005f0:	2220      	movs	r2, #32
 80005f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <main+0x74>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <main+0x74>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <main+0x74>)
 8000602:	2202      	movs	r2, #2
 8000604:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000606:	4908      	ldr	r1, [pc, #32]	; (8000628 <main+0x74>)
 8000608:	4808      	ldr	r0, [pc, #32]	; (800062c <main+0x78>)
 800060a:	f001 f9e7 	bl	80019dc <HAL_GPIO_Init>

  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800060e:	2120      	movs	r1, #32
 8000610:	4806      	ldr	r0, [pc, #24]	; (800062c <main+0x78>)
 8000612:	f001 fb90 	bl	8001d36 <HAL_GPIO_TogglePin>

	/* Insert a 100ms delay */
	HAL_Delay(ledDelay);
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <main+0x7c>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4618      	mov	r0, r3
 800061c:	f000 fca6 	bl	8000f6c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000620:	e7f5      	b.n	800060e <main+0x5a>
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800
 8000628:	200001bc 	.word	0x200001bc
 800062c:	40020000 	.word	0x40020000
 8000630:	20000170 	.word	0x20000170

08000634 <__io_putchar>:
  }
  /* USER CODE END 3 */
}

PUTCHAR_PROTOTYPE
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800063c:	1d39      	adds	r1, r7, #4
 800063e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000642:	2201      	movs	r2, #1
 8000644:	4803      	ldr	r0, [pc, #12]	; (8000654 <__io_putchar+0x20>)
 8000646:	f002 fa16 	bl	8002a76 <HAL_UART_Transmit>

    return ch;
 800064a:	687b      	ldr	r3, [r7, #4]
}
 800064c:	4618      	mov	r0, r3
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	200000cc 	.word	0x200000cc

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	; 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	2234      	movs	r2, #52	; 0x34
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f003 fc16 	bl	8003e98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage*/
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b2c      	ldr	r3, [pc, #176]	; (8000734 <SystemClock_Config+0xdc>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	4a2b      	ldr	r2, [pc, #172]	; (8000734 <SystemClock_Config+0xdc>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	; 0x40
 800068c:	4b29      	ldr	r3, [pc, #164]	; (8000734 <SystemClock_Config+0xdc>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	2300      	movs	r3, #0
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	4b26      	ldr	r3, [pc, #152]	; (8000738 <SystemClock_Config+0xe0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a25      	ldr	r2, [pc, #148]	; (8000738 <SystemClock_Config+0xe0>)
 80006a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b23      	ldr	r3, [pc, #140]	; (8000738 <SystemClock_Config+0xe0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.*/
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b4:	2302      	movs	r3, #2
 80006b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2310      	movs	r3, #16
 80006be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006c8:	2310      	movs	r3, #16
 80006ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80006cc:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80006d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006d6:	2307      	movs	r3, #7
 80006d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 80006da:	2306      	movs	r3, #6
 80006dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 fedc 	bl	80024a0 <HAL_RCC_OscConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ee:	f000 f9ff 	bl	8000af0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006f2:	f001 fb3b 	bl	8001d6c <HAL_PWREx_EnableOverDrive>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80006fc:	f000 f9f8 	bl	8000af0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000704:	2302      	movs	r3, #2
 8000706:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800070c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000710:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000716:	f107 0308 	add.w	r3, r7, #8
 800071a:	2105      	movs	r1, #5
 800071c:	4618      	mov	r0, r3
 800071e:	f001 fb75 	bl	8001e0c <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000728:	f000 f9e2 	bl	8000af0 <Error_Handler>
  }
}
 800072c:	bf00      	nop
 800072e:	3750      	adds	r7, #80	; 0x50
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000

0800073c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000742:	4a12      	ldr	r2, [pc, #72]	; (800078c <MX_USART2_UART_Init+0x50>)
 8000744:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000748:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800074c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000774:	f002 f932 	bl	80029dc <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800077e:	f000 f9b7 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200000cc 	.word	0x200000cc
 800078c:	40004400 	.word	0x40004400

08000790 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_DMA_Init+0x3c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a0b      	ldr	r2, [pc, #44]	; (80007cc <MX_DMA_Init+0x3c>)
 80007a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_DMA_Init+0x3c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2100      	movs	r1, #0
 80007b6:	2010      	movs	r0, #16
 80007b8:	f000 fcd7 	bl	800116a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80007bc:	2010      	movs	r0, #16
 80007be:	f000 fcf0 	bl	80011a2 <HAL_NVIC_EnableIRQ>

}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	4b2d      	ldr	r3, [pc, #180]	; (80008a0 <MX_GPIO_Init+0xd0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a2c      	ldr	r2, [pc, #176]	; (80008a0 <MX_GPIO_Init+0xd0>)
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b2a      	ldr	r3, [pc, #168]	; (80008a0 <MX_GPIO_Init+0xd0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0304 	and.w	r3, r3, #4
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <MX_GPIO_Init+0xd0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a25      	ldr	r2, [pc, #148]	; (80008a0 <MX_GPIO_Init+0xd0>)
 800080c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b23      	ldr	r3, [pc, #140]	; (80008a0 <MX_GPIO_Init+0xd0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <MX_GPIO_Init+0xd0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a1e      	ldr	r2, [pc, #120]	; (80008a0 <MX_GPIO_Init+0xd0>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <MX_GPIO_Init+0xd0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <MX_GPIO_Init+0xd0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a17      	ldr	r2, [pc, #92]	; (80008a0 <MX_GPIO_Init+0xd0>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <MX_GPIO_Init+0xd0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2120      	movs	r1, #32
 800085a:	4812      	ldr	r0, [pc, #72]	; (80008a4 <MX_GPIO_Init+0xd4>)
 800085c:	f001 fa52 	bl	8001d04 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : B1_Pin */
	  GPIO_InitStruct.Pin = B1_Pin;
 8000860:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000864:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000866:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800086a:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4619      	mov	r1, r3
 8000876:	480c      	ldr	r0, [pc, #48]	; (80008a8 <MX_GPIO_Init+0xd8>)
 8000878:	f001 f8b0 	bl	80019dc <HAL_GPIO_Init>

	  /*Configure GPIO pin : LD2_Pin */
	  GPIO_InitStruct.Pin = LD2_Pin;
 800087c:	2320      	movs	r3, #32
 800087e:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000880:	2301      	movs	r3, #1
 8000882:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	4619      	mov	r1, r3
 8000892:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_GPIO_Init+0xd4>)
 8000894:	f001 f8a2 	bl	80019dc <HAL_GPIO_Init>

}
 8000898:	bf00      	nop
 800089a:	3728      	adds	r7, #40	; 0x28
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020000 	.word	0x40020000
 80008a8:	40020800 	.word	0x40020800

080008ac <PrintInfo>:
  * @param  String String to be sent to user display
  * @param  Size   Size of string
  * @retval None
  */
void PrintInfo(UART_HandleTypeDef *huart, uint8_t *String, uint16_t Size)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	4613      	mov	r3, r2
 80008b8:	80fb      	strh	r3, [r7, #6]
  if (HAL_OK != HAL_UART_Transmit(huart, String, Size, 100))
 80008ba:	88fa      	ldrh	r2, [r7, #6]
 80008bc:	2364      	movs	r3, #100	; 0x64
 80008be:	68b9      	ldr	r1, [r7, #8]
 80008c0:	68f8      	ldr	r0, [r7, #12]
 80008c2:	f002 f8d8 	bl	8002a76 <HAL_UART_Transmit>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <PrintInfo+0x24>
  {
    Error_Handler();
 80008cc:	f000 f910 	bl	8000af0 <Error_Handler>
  }
}
 80008d0:	bf00      	nop
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <StartReception>:
/**
  * @brief  This function prints user info on PC com port and initiates RX transfer
  * @retval None
  */
void StartReception(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* Initializes Buffer swap mechanism (used in User callback) :
     - 2 physical buffers aRXBufferA and aRXBufferB (RX_BUFFER_SIZE length)
  */
  pBufferReadyForReception = aRXBufferA;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <StartReception+0x38>)
 80008de:	4a0d      	ldr	r2, [pc, #52]	; (8000914 <StartReception+0x3c>)
 80008e0:	601a      	str	r2, [r3, #0]
  pBufferReadyForUser      = aRXBufferB;
 80008e2:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <StartReception+0x40>)
 80008e4:	4a0d      	ldr	r2, [pc, #52]	; (800091c <StartReception+0x44>)
 80008e6:	601a      	str	r2, [r3, #0]
  uwNbReceivedChars        = 0;
 80008e8:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <StartReception+0x48>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]

  /* Print user info on PC com port */
  PrintInfo(&huart2, aTextInfoStart, COUNTOF(aTextInfoStart));
 80008ee:	2240      	movs	r2, #64	; 0x40
 80008f0:	490c      	ldr	r1, [pc, #48]	; (8000924 <StartReception+0x4c>)
 80008f2:	480d      	ldr	r0, [pc, #52]	; (8000928 <StartReception+0x50>)
 80008f4:	f7ff ffda 	bl	80008ac <PrintInfo>
     following events :
     - DMA RX Half Transfer event (HT)
     - DMA RX Transfer Complete event (TC)
     - IDLE event on UART Rx line (indicating a pause is UART reception flow)
  */
  if (HAL_OK != HAL_UARTEx_ReceiveToIdle_DMA(&huart2, aRXBufferUser, RX_BUFFER_SIZE))
 80008f8:	2214      	movs	r2, #20
 80008fa:	490c      	ldr	r1, [pc, #48]	; (800092c <StartReception+0x54>)
 80008fc:	480a      	ldr	r0, [pc, #40]	; (8000928 <StartReception+0x50>)
 80008fe:	f002 f94c 	bl	8002b9a <HAL_UARTEx_ReceiveToIdle_DMA>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <StartReception+0x34>
  {
    Error_Handler();
 8000908:	f000 f8f2 	bl	8000af0 <Error_Handler>
  }
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	200001b8 	.word	0x200001b8
 8000914:	20000188 	.word	0x20000188
 8000918:	200001b4 	.word	0x200001b4
 800091c:	2000019c 	.word	0x2000019c
 8000920:	200001b0 	.word	0x200001b0
 8000924:	20000000 	.word	0x20000000
 8000928:	200000cc 	.word	0x200000cc
 800092c:	20000174 	.word	0x20000174

08000930 <UserDataTreatment>:
  * @param  huart UART handle.
  * @param  pData Pointer on received data buffer to be processed
  * @retval Size  Nb of received characters available in buffer
  */
void UserDataTreatment(UART_HandleTypeDef *huart, uint8_t* pData, uint16_t Size)
{
 8000930:	b480      	push	{r7}
 8000932:	b087      	sub	sp, #28
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	4613      	mov	r3, r2
 800093c:	80fb      	strh	r3, [r7, #6]
   *
   * pData and Size defines the buffer where received data have been copied, in order to be processed.
   * During this processing of already received data, reception is still ongoing.
   *
   */
  uint8_t* pBuff = pData;
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	617b      	str	r3, [r7, #20]
  uint8_t  i;

  /* Implementation of loopback is on purpose implemented in direct register access,
     in order to be able to echo received characters as fast as they are received.
     Wait for TC flag to be raised at end of transmit is then removed, only TXE is checked */
  for (i = 0; i < Size; i++)
 8000942:	2300      	movs	r3, #0
 8000944:	74fb      	strb	r3, [r7, #19]
 8000946:	e012      	b.n	800096e <UserDataTreatment+0x3e>
  {
    while (!(__HAL_UART_GET_FLAG(huart, UART_FLAG_TXE))) {}
 8000948:	bf00      	nop
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000954:	2b80      	cmp	r3, #128	; 0x80
 8000956:	d1f8      	bne.n	800094a <UserDataTreatment+0x1a>
    huart->Instance->DR = *pBuff;
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	781a      	ldrb	r2, [r3, #0]
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
    pBuff++;
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	3301      	adds	r3, #1
 8000966:	617b      	str	r3, [r7, #20]
  for (i = 0; i < Size; i++)
 8000968:	7cfb      	ldrb	r3, [r7, #19]
 800096a:	3301      	adds	r3, #1
 800096c:	74fb      	strb	r3, [r7, #19]
 800096e:	7cfb      	ldrb	r3, [r7, #19]
 8000970:	b29b      	uxth	r3, r3
 8000972:	88fa      	ldrh	r2, [r7, #6]
 8000974:	429a      	cmp	r2, r3
 8000976:	d8e7      	bhi.n	8000948 <UserDataTreatment+0x18>
  }

}
 8000978:	bf00      	nop
 800097a:	bf00      	nop
 800097c:	371c      	adds	r7, #28
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
	...

08000988 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	460b      	mov	r3, r1
 8000992:	807b      	strh	r3, [r7, #2]
  static uint8_t old_pos = 0;
  uint8_t *ptemp;
  uint8_t i;

  /* Check if number of received data in recpetion buffer has changed */
  if (Size != old_pos)
 8000994:	4b4f      	ldr	r3, [pc, #316]	; (8000ad4 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	b29b      	uxth	r3, r3
 800099a:	887a      	ldrh	r2, [r7, #2]
 800099c:	429a      	cmp	r2, r3
 800099e:	f000 8091 	beq.w	8000ac4 <HAL_UARTEx_RxEventCallback+0x13c>
  {
    /* Check if position of index in reception buffer has simply be increased
       of if end of buffer has been reached */
    if (Size > old_pos)
 80009a2:	4b4c      	ldr	r3, [pc, #304]	; (8000ad4 <HAL_UARTEx_RxEventCallback+0x14c>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	887a      	ldrh	r2, [r7, #2]
 80009aa:	429a      	cmp	r2, r3
 80009ac:	d91e      	bls.n	80009ec <HAL_UARTEx_RxEventCallback+0x64>
    {
      /* Current position is higher than previous one */
      uwNbReceivedChars = Size - old_pos;
 80009ae:	887b      	ldrh	r3, [r7, #2]
 80009b0:	4a48      	ldr	r2, [pc, #288]	; (8000ad4 <HAL_UARTEx_RxEventCallback+0x14c>)
 80009b2:	7812      	ldrb	r2, [r2, #0]
 80009b4:	1a9b      	subs	r3, r3, r2
 80009b6:	461a      	mov	r2, r3
 80009b8:	4b47      	ldr	r3, [pc, #284]	; (8000ad8 <HAL_UARTEx_RxEventCallback+0x150>)
 80009ba:	601a      	str	r2, [r3, #0]
      /* Copy received data in "User" buffer for evacuation */
      for (i = 0; i < uwNbReceivedChars; i++)
 80009bc:	2300      	movs	r3, #0
 80009be:	73fb      	strb	r3, [r7, #15]
 80009c0:	e00e      	b.n	80009e0 <HAL_UARTEx_RxEventCallback+0x58>
      {
        pBufferReadyForUser[i] = aRXBufferUser[old_pos + i];
 80009c2:	4b44      	ldr	r3, [pc, #272]	; (8000ad4 <HAL_UARTEx_RxEventCallback+0x14c>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	461a      	mov	r2, r3
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	441a      	add	r2, r3
 80009cc:	4b43      	ldr	r3, [pc, #268]	; (8000adc <HAL_UARTEx_RxEventCallback+0x154>)
 80009ce:	6819      	ldr	r1, [r3, #0]
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
 80009d2:	440b      	add	r3, r1
 80009d4:	4942      	ldr	r1, [pc, #264]	; (8000ae0 <HAL_UARTEx_RxEventCallback+0x158>)
 80009d6:	5c8a      	ldrb	r2, [r1, r2]
 80009d8:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < uwNbReceivedChars; i++)
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	3301      	adds	r3, #1
 80009de:	73fb      	strb	r3, [r7, #15]
 80009e0:	7bfa      	ldrb	r2, [r7, #15]
 80009e2:	4b3d      	ldr	r3, [pc, #244]	; (8000ad8 <HAL_UARTEx_RxEventCallback+0x150>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d3eb      	bcc.n	80009c2 <HAL_UARTEx_RxEventCallback+0x3a>
 80009ea:	e03c      	b.n	8000a66 <HAL_UARTEx_RxEventCallback+0xde>
    }
    else
    {
      /* Current position is lower than previous one : end of buffer has been reached */
      /* First copy data from current position till end of buffer */
      uwNbReceivedChars = RX_BUFFER_SIZE - old_pos;
 80009ec:	4b39      	ldr	r3, [pc, #228]	; (8000ad4 <HAL_UARTEx_RxEventCallback+0x14c>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	f1c3 0314 	rsb	r3, r3, #20
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b38      	ldr	r3, [pc, #224]	; (8000ad8 <HAL_UARTEx_RxEventCallback+0x150>)
 80009f8:	601a      	str	r2, [r3, #0]
      /* Copy received data in "User" buffer for evacuation */
      for (i = 0; i < uwNbReceivedChars; i++)
 80009fa:	2300      	movs	r3, #0
 80009fc:	73fb      	strb	r3, [r7, #15]
 80009fe:	e00e      	b.n	8000a1e <HAL_UARTEx_RxEventCallback+0x96>
      {
        pBufferReadyForUser[i] = aRXBufferUser[old_pos + i];
 8000a00:	4b34      	ldr	r3, [pc, #208]	; (8000ad4 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	461a      	mov	r2, r3
 8000a06:	7bfb      	ldrb	r3, [r7, #15]
 8000a08:	441a      	add	r2, r3
 8000a0a:	4b34      	ldr	r3, [pc, #208]	; (8000adc <HAL_UARTEx_RxEventCallback+0x154>)
 8000a0c:	6819      	ldr	r1, [r3, #0]
 8000a0e:	7bfb      	ldrb	r3, [r7, #15]
 8000a10:	440b      	add	r3, r1
 8000a12:	4933      	ldr	r1, [pc, #204]	; (8000ae0 <HAL_UARTEx_RxEventCallback+0x158>)
 8000a14:	5c8a      	ldrb	r2, [r1, r2]
 8000a16:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < uwNbReceivedChars; i++)
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	73fb      	strb	r3, [r7, #15]
 8000a1e:	7bfa      	ldrb	r2, [r7, #15]
 8000a20:	4b2d      	ldr	r3, [pc, #180]	; (8000ad8 <HAL_UARTEx_RxEventCallback+0x150>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d3eb      	bcc.n	8000a00 <HAL_UARTEx_RxEventCallback+0x78>
      }
      /* Check and continue with beginning of buffer */
      if (Size > 0)
 8000a28:	887b      	ldrh	r3, [r7, #2]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d01b      	beq.n	8000a66 <HAL_UARTEx_RxEventCallback+0xde>
      {
        for (i = 0; i < Size; i++)
 8000a2e:	2300      	movs	r3, #0
 8000a30:	73fb      	strb	r3, [r7, #15]
 8000a32:	e00d      	b.n	8000a50 <HAL_UARTEx_RxEventCallback+0xc8>
        {
          pBufferReadyForUser[uwNbReceivedChars + i] = aRXBufferUser[i];
 8000a34:	7bfa      	ldrb	r2, [r7, #15]
 8000a36:	4b29      	ldr	r3, [pc, #164]	; (8000adc <HAL_UARTEx_RxEventCallback+0x154>)
 8000a38:	6819      	ldr	r1, [r3, #0]
 8000a3a:	7bf8      	ldrb	r0, [r7, #15]
 8000a3c:	4b26      	ldr	r3, [pc, #152]	; (8000ad8 <HAL_UARTEx_RxEventCallback+0x150>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4403      	add	r3, r0
 8000a42:	440b      	add	r3, r1
 8000a44:	4926      	ldr	r1, [pc, #152]	; (8000ae0 <HAL_UARTEx_RxEventCallback+0x158>)
 8000a46:	5c8a      	ldrb	r2, [r1, r2]
 8000a48:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < Size; i++)
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	73fb      	strb	r3, [r7, #15]
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	887a      	ldrh	r2, [r7, #2]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d8ec      	bhi.n	8000a34 <HAL_UARTEx_RxEventCallback+0xac>
        }
        uwNbReceivedChars += Size;
 8000a5a:	887a      	ldrh	r2, [r7, #2]
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <HAL_UARTEx_RxEventCallback+0x150>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4413      	add	r3, r2
 8000a62:	4a1d      	ldr	r2, [pc, #116]	; (8000ad8 <HAL_UARTEx_RxEventCallback+0x150>)
 8000a64:	6013      	str	r3, [r2, #0]
      }
    }
    /* Process received data that has been extracted from Rx User buffer */
    UserDataTreatment(huart, pBufferReadyForUser, uwNbReceivedChars);
 8000a66:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <HAL_UARTEx_RxEventCallback+0x154>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a1b      	ldr	r2, [pc, #108]	; (8000ad8 <HAL_UARTEx_RxEventCallback+0x150>)
 8000a6c:	6812      	ldr	r2, [r2, #0]
 8000a6e:	b292      	uxth	r2, r2
 8000a70:	4619      	mov	r1, r3
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f7ff ff5c 	bl	8000930 <UserDataTreatment>

    printf("\n\rKamu menekan %s TEKAN\n\r", (char*) pBufferReadyForUser);
 8000a78:	4b18      	ldr	r3, [pc, #96]	; (8000adc <HAL_UARTEx_RxEventCallback+0x154>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4819      	ldr	r0, [pc, #100]	; (8000ae4 <HAL_UARTEx_RxEventCallback+0x15c>)
 8000a80:	f003 fa12 	bl	8003ea8 <iprintf>
	if((char*) pBufferReadyForUser[0] == 'm'){
 8000a84:	4b15      	ldr	r3, [pc, #84]	; (8000adc <HAL_UARTEx_RxEventCallback+0x154>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b6d      	cmp	r3, #109	; 0x6d
 8000a8c:	d104      	bne.n	8000a98 <HAL_UARTEx_RxEventCallback+0x110>
		ledDelay = 1000;
 8000a8e:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <HAL_UARTEx_RxEventCallback+0x160>)
 8000a90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	e00b      	b.n	8000ab0 <HAL_UARTEx_RxEventCallback+0x128>
	}
	else if((char*) pBufferReadyForUser[0] == 'n'){
 8000a98:	4b10      	ldr	r3, [pc, #64]	; (8000adc <HAL_UARTEx_RxEventCallback+0x154>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b6e      	cmp	r3, #110	; 0x6e
 8000aa0:	d103      	bne.n	8000aaa <HAL_UARTEx_RxEventCallback+0x122>
		ledDelay = 100;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <HAL_UARTEx_RxEventCallback+0x160>)
 8000aa4:	2264      	movs	r2, #100	; 0x64
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	e002      	b.n	8000ab0 <HAL_UARTEx_RxEventCallback+0x128>
	}
	//else if((char*) pBufferReadyForUser[0] == 'b'){
		//printf("\n\rB dong");
	//}
	else {
		ledDelay = 0;
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <HAL_UARTEx_RxEventCallback+0x160>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
	}

    /* Swap buffers for next bytes to be processed */
    ptemp = pBufferReadyForUser;
 8000ab0:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <HAL_UARTEx_RxEventCallback+0x154>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	60bb      	str	r3, [r7, #8]
    pBufferReadyForUser = pBufferReadyForReception;
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <HAL_UARTEx_RxEventCallback+0x164>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a08      	ldr	r2, [pc, #32]	; (8000adc <HAL_UARTEx_RxEventCallback+0x154>)
 8000abc:	6013      	str	r3, [r2, #0]
    pBufferReadyForReception = ptemp;
 8000abe:	4a0b      	ldr	r2, [pc, #44]	; (8000aec <HAL_UARTEx_RxEventCallback+0x164>)
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	6013      	str	r3, [r2, #0]

    //PrintInfo(&huart2, pBufferReadyForReception, COUNTOF(pBufferReadyForReception));
  }
  /* Update old_pos as new reference of position in User Rx buffer that
     indicates position to which data have been processed */
  old_pos = Size;
 8000ac4:	887b      	ldrh	r3, [r7, #2]
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	4b02      	ldr	r3, [pc, #8]	; (8000ad4 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000aca:	701a      	strb	r2, [r3, #0]

}
 8000acc:	bf00      	nop
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	200001d0 	.word	0x200001d0
 8000ad8:	200001b0 	.word	0x200001b0
 8000adc:	200001b4 	.word	0x200001b4
 8000ae0:	20000174 	.word	0x20000174
 8000ae4:	08004ddc 	.word	0x08004ddc
 8000ae8:	20000170 	.word	0x20000170
 8000aec:	200001b8 	.word	0x200001b8

08000af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <Error_Handler+0x4>
	...

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	4a0f      	ldr	r2, [pc, #60]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b36:	2007      	movs	r0, #7
 8000b38:	f000 fb0c 	bl	8001154 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40023800 	.word	0x40023800

08000b48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a34      	ldr	r2, [pc, #208]	; (8000c38 <HAL_UART_MspInit+0xf0>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d162      	bne.n	8000c30 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b33      	ldr	r3, [pc, #204]	; (8000c3c <HAL_UART_MspInit+0xf4>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	4a32      	ldr	r2, [pc, #200]	; (8000c3c <HAL_UART_MspInit+0xf4>)
 8000b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b78:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7a:	4b30      	ldr	r3, [pc, #192]	; (8000c3c <HAL_UART_MspInit+0xf4>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b2c      	ldr	r3, [pc, #176]	; (8000c3c <HAL_UART_MspInit+0xf4>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a2b      	ldr	r2, [pc, #172]	; (8000c3c <HAL_UART_MspInit+0xf4>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b29      	ldr	r3, [pc, #164]	; (8000c3c <HAL_UART_MspInit+0xf4>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ba2:	230c      	movs	r3, #12
 8000ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bb2:	2307      	movs	r3, #7
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4820      	ldr	r0, [pc, #128]	; (8000c40 <HAL_UART_MspInit+0xf8>)
 8000bbe:	f000 ff0d 	bl	80019dc <HAL_GPIO_Init>

    /* USART2 DMA Init */
	/* USART2_RX Init */
	hdma_usart2_rx.Instance = DMA1_Stream5;
 8000bc2:	4b20      	ldr	r3, [pc, #128]	; (8000c44 <HAL_UART_MspInit+0xfc>)
 8000bc4:	4a20      	ldr	r2, [pc, #128]	; (8000c48 <HAL_UART_MspInit+0x100>)
 8000bc6:	601a      	str	r2, [r3, #0]
	hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000bc8:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <HAL_UART_MspInit+0xfc>)
 8000bca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bce:	605a      	str	r2, [r3, #4]
	hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <HAL_UART_MspInit+0xfc>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
	hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bd6:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <HAL_UART_MspInit+0xfc>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
	hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bdc:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <HAL_UART_MspInit+0xfc>)
 8000bde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000be2:	611a      	str	r2, [r3, #16]
	hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000be4:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <HAL_UART_MspInit+0xfc>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	615a      	str	r2, [r3, #20]
	hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bea:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <HAL_UART_MspInit+0xfc>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
	hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <HAL_UART_MspInit+0xfc>)
 8000bf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bf6:	61da      	str	r2, [r3, #28]
	hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_UART_MspInit+0xfc>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	621a      	str	r2, [r3, #32]
	hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <HAL_UART_MspInit+0xfc>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000c04:	480f      	ldr	r0, [pc, #60]	; (8000c44 <HAL_UART_MspInit+0xfc>)
 8000c06:	f000 fae7 	bl	80011d8 <HAL_DMA_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <HAL_UART_MspInit+0xcc>
	{
	  Error_Handler();
 8000c10:	f7ff ff6e 	bl	8000af0 <Error_Handler>
	}

	__HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a0b      	ldr	r2, [pc, #44]	; (8000c44 <HAL_UART_MspInit+0xfc>)
 8000c18:	639a      	str	r2, [r3, #56]	; 0x38
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <HAL_UART_MspInit+0xfc>)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6393      	str	r3, [r2, #56]	; 0x38

	/* USART2 interrupt Init */
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2100      	movs	r1, #0
 8000c24:	2026      	movs	r0, #38	; 0x26
 8000c26:	f000 faa0 	bl	800116a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c2a:	2026      	movs	r0, #38	; 0x26
 8000c2c:	f000 fab9 	bl	80011a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c30:	bf00      	nop
 8000c32:	3728      	adds	r7, #40	; 0x28
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40004400 	.word	0x40004400
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020000 	.word	0x40020000
 8000c44:	20000110 	.word	0x20000110
 8000c48:	40026088 	.word	0x40026088

08000c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <NMI_Handler+0x4>

08000c52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <HardFault_Handler+0x4>

08000c58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <MemManage_Handler+0x4>

08000c5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <BusFault_Handler+0x4>

08000c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <UsageFault_Handler+0x4>

08000c6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c98:	f000 f948 	bl	8000f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000ca4:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <DMA1_Stream5_IRQHandler+0x10>)
 8000ca6:	f000 fc2f 	bl	8001508 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000110 	.word	0x20000110

08000cb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cb8:	4802      	ldr	r0, [pc, #8]	; (8000cc4 <USART2_IRQHandler+0x10>)
 8000cba:	f001 ffd3 	bl	8002c64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	200000cc 	.word	0x200000cc

08000cc8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	e00a      	b.n	8000cf0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cda:	f3af 8000 	nop.w
 8000cde:	4601      	mov	r1, r0
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	1c5a      	adds	r2, r3, #1
 8000ce4:	60ba      	str	r2, [r7, #8]
 8000ce6:	b2ca      	uxtb	r2, r1
 8000ce8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	3301      	adds	r3, #1
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	697a      	ldr	r2, [r7, #20]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	dbf0      	blt.n	8000cda <_read+0x12>
  }

  return len;
 8000cf8:	687b      	ldr	r3, [r7, #4]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b086      	sub	sp, #24
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	60f8      	str	r0, [r7, #12]
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	e009      	b.n	8000d28 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	1c5a      	adds	r2, r3, #1
 8000d18:	60ba      	str	r2, [r7, #8]
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fc89 	bl	8000634 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	3301      	adds	r3, #1
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697a      	ldr	r2, [r7, #20]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	dbf1      	blt.n	8000d14 <_write+0x12>
  }
  return len;
 8000d30:	687b      	ldr	r3, [r7, #4]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <_close>:

int _close(int file)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d52:	b480      	push	{r7}
 8000d54:	b083      	sub	sp, #12
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
 8000d5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d62:	605a      	str	r2, [r3, #4]
  return 0;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <_isatty>:

int _isatty(int file)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d7a:	2301      	movs	r3, #1
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
	...

08000da4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dac:	4a14      	ldr	r2, [pc, #80]	; (8000e00 <_sbrk+0x5c>)
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <_sbrk+0x60>)
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db8:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <_sbrk+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d102      	bne.n	8000dc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <_sbrk+0x64>)
 8000dc2:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <_sbrk+0x68>)
 8000dc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <_sbrk+0x64>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d207      	bcs.n	8000de4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd4:	f003 f836 	bl	8003e44 <__errno>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	220c      	movs	r2, #12
 8000ddc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
 8000de2:	e009      	b.n	8000df8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <_sbrk+0x64>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <_sbrk+0x64>)
 8000df4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000df6:	68fb      	ldr	r3, [r7, #12]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20020000 	.word	0x20020000
 8000e04:	00000400 	.word	0x00000400
 8000e08:	200001d4 	.word	0x200001d4
 8000e0c:	200001f0 	.word	0x200001f0

08000e10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <SystemInit+0x20>)
 8000e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1a:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <SystemInit+0x20>)
 8000e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e38:	480d      	ldr	r0, [pc, #52]	; (8000e70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e3a:	490e      	ldr	r1, [pc, #56]	; (8000e74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e3c:	4a0e      	ldr	r2, [pc, #56]	; (8000e78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e50:	4c0b      	ldr	r4, [pc, #44]	; (8000e80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e5e:	f7ff ffd7 	bl	8000e10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e62:	f002 fff5 	bl	8003e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e66:	f7ff fba5 	bl	80005b4 <main>
  bx  lr    
 8000e6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e74:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8000e78:	08004ec0 	.word	0x08004ec0
  ldr r2, =_sbss
 8000e7c:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8000e80:	200001ec 	.word	0x200001ec

08000e84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e84:	e7fe      	b.n	8000e84 <ADC_IRQHandler>
	...

08000e88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <HAL_Init+0x40>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a0d      	ldr	r2, [pc, #52]	; (8000ec8 <HAL_Init+0x40>)
 8000e92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e98:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <HAL_Init+0x40>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <HAL_Init+0x40>)
 8000e9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ea2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <HAL_Init+0x40>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a07      	ldr	r2, [pc, #28]	; (8000ec8 <HAL_Init+0x40>)
 8000eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb0:	2003      	movs	r0, #3
 8000eb2:	f000 f94f 	bl	8001154 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f000 f808 	bl	8000ecc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ebc:	f7ff fe1c 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40023c00 	.word	0x40023c00

08000ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_InitTick+0x54>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_InitTick+0x58>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	4619      	mov	r1, r3
 8000ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 f967 	bl	80011be <HAL_SYSTICK_Config>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00e      	b.n	8000f18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b0f      	cmp	r3, #15
 8000efe:	d80a      	bhi.n	8000f16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f00:	2200      	movs	r2, #0
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f000 f92f 	bl	800116a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f0c:	4a06      	ldr	r2, [pc, #24]	; (8000f28 <HAL_InitTick+0x5c>)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f12:	2300      	movs	r3, #0
 8000f14:	e000      	b.n	8000f18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000040 	.word	0x20000040
 8000f24:	20000048 	.word	0x20000048
 8000f28:	20000044 	.word	0x20000044

08000f2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_IncTick+0x20>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_IncTick+0x24>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <HAL_IncTick+0x24>)
 8000f3e:	6013      	str	r3, [r2, #0]
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	20000048 	.word	0x20000048
 8000f50:	200001d8 	.word	0x200001d8

08000f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return uwTick;
 8000f58:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <HAL_GetTick+0x14>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	200001d8 	.word	0x200001d8

08000f6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f74:	f7ff ffee 	bl	8000f54 <HAL_GetTick>
 8000f78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f84:	d005      	beq.n	8000f92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <HAL_Delay+0x44>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4413      	add	r3, r2
 8000f90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f92:	bf00      	nop
 8000f94:	f7ff ffde 	bl	8000f54 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d8f7      	bhi.n	8000f94 <HAL_Delay+0x28>
  {
  }
}
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000048 	.word	0x20000048

08000fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe6:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	60d3      	str	r3, [r2, #12]
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <__NVIC_GetPriorityGrouping+0x18>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	f003 0307 	and.w	r3, r3, #7
}
 800100a:	4618      	mov	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	2b00      	cmp	r3, #0
 8001028:	db0b      	blt.n	8001042 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	f003 021f 	and.w	r2, r3, #31
 8001030:	4907      	ldr	r1, [pc, #28]	; (8001050 <__NVIC_EnableIRQ+0x38>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	095b      	lsrs	r3, r3, #5
 8001038:	2001      	movs	r0, #1
 800103a:	fa00 f202 	lsl.w	r2, r0, r2
 800103e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000e100 	.word	0xe000e100

08001054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	2b00      	cmp	r3, #0
 8001066:	db0a      	blt.n	800107e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	b2da      	uxtb	r2, r3
 800106c:	490c      	ldr	r1, [pc, #48]	; (80010a0 <__NVIC_SetPriority+0x4c>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	0112      	lsls	r2, r2, #4
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	440b      	add	r3, r1
 8001078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800107c:	e00a      	b.n	8001094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4908      	ldr	r1, [pc, #32]	; (80010a4 <__NVIC_SetPriority+0x50>)
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	f003 030f 	and.w	r3, r3, #15
 800108a:	3b04      	subs	r3, #4
 800108c:	0112      	lsls	r2, r2, #4
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	440b      	add	r3, r1
 8001092:	761a      	strb	r2, [r3, #24]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000e100 	.word	0xe000e100
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b089      	sub	sp, #36	; 0x24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f1c3 0307 	rsb	r3, r3, #7
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	bf28      	it	cs
 80010c6:	2304      	movcs	r3, #4
 80010c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3304      	adds	r3, #4
 80010ce:	2b06      	cmp	r3, #6
 80010d0:	d902      	bls.n	80010d8 <NVIC_EncodePriority+0x30>
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3b03      	subs	r3, #3
 80010d6:	e000      	b.n	80010da <NVIC_EncodePriority+0x32>
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	f04f 32ff 	mov.w	r2, #4294967295
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43da      	mvns	r2, r3
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	401a      	ands	r2, r3
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f0:	f04f 31ff 	mov.w	r1, #4294967295
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa01 f303 	lsl.w	r3, r1, r3
 80010fa:	43d9      	mvns	r1, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	4313      	orrs	r3, r2
         );
}
 8001102:	4618      	mov	r0, r3
 8001104:	3724      	adds	r7, #36	; 0x24
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001120:	d301      	bcc.n	8001126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001122:	2301      	movs	r3, #1
 8001124:	e00f      	b.n	8001146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001126:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <SysTick_Config+0x40>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112e:	210f      	movs	r1, #15
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	f7ff ff8e 	bl	8001054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <SysTick_Config+0x40>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <SysTick_Config+0x40>)
 8001140:	2207      	movs	r2, #7
 8001142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	e000e010 	.word	0xe000e010

08001154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff29 	bl	8000fb4 <__NVIC_SetPriorityGrouping>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800116a:	b580      	push	{r7, lr}
 800116c:	b086      	sub	sp, #24
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	607a      	str	r2, [r7, #4]
 8001176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800117c:	f7ff ff3e 	bl	8000ffc <__NVIC_GetPriorityGrouping>
 8001180:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	6978      	ldr	r0, [r7, #20]
 8001188:	f7ff ff8e 	bl	80010a8 <NVIC_EncodePriority>
 800118c:	4602      	mov	r2, r0
 800118e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff5d 	bl	8001054 <__NVIC_SetPriority>
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff31 	bl	8001018 <__NVIC_EnableIRQ>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ffa2 	bl	8001110 <SysTick_Config>
 80011cc:	4603      	mov	r3, r0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80011e4:	f7ff feb6 	bl	8000f54 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d101      	bne.n	80011f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e099      	b.n	8001328 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2202      	movs	r2, #2
 80011f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 0201 	bic.w	r2, r2, #1
 8001212:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001214:	e00f      	b.n	8001236 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001216:	f7ff fe9d 	bl	8000f54 <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b05      	cmp	r3, #5
 8001222:	d908      	bls.n	8001236 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2220      	movs	r2, #32
 8001228:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2203      	movs	r2, #3
 800122e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e078      	b.n	8001328 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1e8      	bne.n	8001216 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	4b38      	ldr	r3, [pc, #224]	; (8001330 <HAL_DMA_Init+0x158>)
 8001250:	4013      	ands	r3, r2
 8001252:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001262:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800126e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800127a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a1b      	ldr	r3, [r3, #32]
 8001280:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	4313      	orrs	r3, r2
 8001286:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128c:	2b04      	cmp	r3, #4
 800128e:	d107      	bne.n	80012a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001298:	4313      	orrs	r3, r2
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	4313      	orrs	r3, r2
 800129e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	f023 0307 	bic.w	r3, r3, #7
 80012b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012bc:	697a      	ldr	r2, [r7, #20]
 80012be:	4313      	orrs	r3, r2
 80012c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	d117      	bne.n	80012fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ce:	697a      	ldr	r2, [r7, #20]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00e      	beq.n	80012fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 fb01 	bl	80018e4 <DMA_CheckFifoParam>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d008      	beq.n	80012fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2240      	movs	r2, #64	; 0x40
 80012ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2201      	movs	r2, #1
 80012f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80012f6:	2301      	movs	r3, #1
 80012f8:	e016      	b.n	8001328 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 fab8 	bl	8001878 <DMA_CalcBaseAndBitshift>
 8001308:	4603      	mov	r3, r0
 800130a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001310:	223f      	movs	r2, #63	; 0x3f
 8001312:	409a      	lsls	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	f010803f 	.word	0xf010803f

08001334 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
 8001340:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001342:	2300      	movs	r3, #0
 8001344:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001352:	2b01      	cmp	r3, #1
 8001354:	d101      	bne.n	800135a <HAL_DMA_Start_IT+0x26>
 8001356:	2302      	movs	r3, #2
 8001358:	e040      	b.n	80013dc <HAL_DMA_Start_IT+0xa8>
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2201      	movs	r2, #1
 800135e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b01      	cmp	r3, #1
 800136c:	d12f      	bne.n	80013ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2202      	movs	r2, #2
 8001372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2200      	movs	r2, #0
 800137a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	68b9      	ldr	r1, [r7, #8]
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f000 fa4a 	bl	800181c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800138c:	223f      	movs	r2, #63	; 0x3f
 800138e:	409a      	lsls	r2, r3
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f042 0216 	orr.w	r2, r2, #22
 80013a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d007      	beq.n	80013bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f042 0208 	orr.w	r2, r2, #8
 80013ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 0201 	orr.w	r2, r2, #1
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	e005      	b.n	80013da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80013d6:	2302      	movs	r3, #2
 80013d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80013da:	7dfb      	ldrb	r3, [r7, #23]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013f2:	f7ff fdaf 	bl	8000f54 <HAL_GetTick>
 80013f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d008      	beq.n	8001416 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2280      	movs	r2, #128	; 0x80
 8001408:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e052      	b.n	80014bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 0216 	bic.w	r2, r2, #22
 8001424:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	695a      	ldr	r2, [r3, #20]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001434:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	2b00      	cmp	r3, #0
 800143c:	d103      	bne.n	8001446 <HAL_DMA_Abort+0x62>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001442:	2b00      	cmp	r3, #0
 8001444:	d007      	beq.n	8001456 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 0208 	bic.w	r2, r2, #8
 8001454:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 0201 	bic.w	r2, r2, #1
 8001464:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001466:	e013      	b.n	8001490 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001468:	f7ff fd74 	bl	8000f54 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b05      	cmp	r3, #5
 8001474:	d90c      	bls.n	8001490 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2220      	movs	r2, #32
 800147a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2203      	movs	r2, #3
 8001480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e015      	b.n	80014bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1e4      	bne.n	8001468 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a2:	223f      	movs	r2, #63	; 0x3f
 80014a4:	409a      	lsls	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2201      	movs	r2, #1
 80014ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d004      	beq.n	80014e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2280      	movs	r2, #128	; 0x80
 80014dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e00c      	b.n	80014fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2205      	movs	r2, #5
 80014e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 0201 	bic.w	r2, r2, #1
 80014f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001510:	2300      	movs	r3, #0
 8001512:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001514:	4b8e      	ldr	r3, [pc, #568]	; (8001750 <HAL_DMA_IRQHandler+0x248>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a8e      	ldr	r2, [pc, #568]	; (8001754 <HAL_DMA_IRQHandler+0x24c>)
 800151a:	fba2 2303 	umull	r2, r3, r2, r3
 800151e:	0a9b      	lsrs	r3, r3, #10
 8001520:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001526:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001532:	2208      	movs	r2, #8
 8001534:	409a      	lsls	r2, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4013      	ands	r3, r2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d01a      	beq.n	8001574 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b00      	cmp	r3, #0
 800154a:	d013      	beq.n	8001574 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0204 	bic.w	r2, r2, #4
 800155a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001560:	2208      	movs	r2, #8
 8001562:	409a      	lsls	r2, r3
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800156c:	f043 0201 	orr.w	r2, r3, #1
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001578:	2201      	movs	r2, #1
 800157a:	409a      	lsls	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4013      	ands	r3, r2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d012      	beq.n	80015aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00b      	beq.n	80015aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001596:	2201      	movs	r2, #1
 8001598:	409a      	lsls	r2, r3
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a2:	f043 0202 	orr.w	r2, r3, #2
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ae:	2204      	movs	r2, #4
 80015b0:	409a      	lsls	r2, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4013      	ands	r3, r2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d012      	beq.n	80015e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d00b      	beq.n	80015e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015cc:	2204      	movs	r2, #4
 80015ce:	409a      	lsls	r2, r3
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d8:	f043 0204 	orr.w	r2, r3, #4
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e4:	2210      	movs	r2, #16
 80015e6:	409a      	lsls	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4013      	ands	r3, r2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d043      	beq.n	8001678 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d03c      	beq.n	8001678 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001602:	2210      	movs	r2, #16
 8001604:	409a      	lsls	r2, r3
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d018      	beq.n	800164a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d108      	bne.n	8001638 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	2b00      	cmp	r3, #0
 800162c:	d024      	beq.n	8001678 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	4798      	blx	r3
 8001636:	e01f      	b.n	8001678 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800163c:	2b00      	cmp	r3, #0
 800163e:	d01b      	beq.n	8001678 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	4798      	blx	r3
 8001648:	e016      	b.n	8001678 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001654:	2b00      	cmp	r3, #0
 8001656:	d107      	bne.n	8001668 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0208 	bic.w	r2, r2, #8
 8001666:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167c:	2220      	movs	r2, #32
 800167e:	409a      	lsls	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4013      	ands	r3, r2
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 808f 	beq.w	80017a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0310 	and.w	r3, r3, #16
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 8087 	beq.w	80017a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169e:	2220      	movs	r2, #32
 80016a0:	409a      	lsls	r2, r3
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b05      	cmp	r3, #5
 80016b0:	d136      	bne.n	8001720 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f022 0216 	bic.w	r2, r2, #22
 80016c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	695a      	ldr	r2, [r3, #20]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d103      	bne.n	80016e2 <HAL_DMA_IRQHandler+0x1da>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d007      	beq.n	80016f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0208 	bic.w	r2, r2, #8
 80016f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f6:	223f      	movs	r2, #63	; 0x3f
 80016f8:	409a      	lsls	r2, r3
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2201      	movs	r2, #1
 8001702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001712:	2b00      	cmp	r3, #0
 8001714:	d07e      	beq.n	8001814 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	4798      	blx	r3
        }
        return;
 800171e:	e079      	b.n	8001814 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d01d      	beq.n	800176a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d10d      	bne.n	8001758 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001740:	2b00      	cmp	r3, #0
 8001742:	d031      	beq.n	80017a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	4798      	blx	r3
 800174c:	e02c      	b.n	80017a8 <HAL_DMA_IRQHandler+0x2a0>
 800174e:	bf00      	nop
 8001750:	20000040 	.word	0x20000040
 8001754:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800175c:	2b00      	cmp	r3, #0
 800175e:	d023      	beq.n	80017a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	4798      	blx	r3
 8001768:	e01e      	b.n	80017a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001774:	2b00      	cmp	r3, #0
 8001776:	d10f      	bne.n	8001798 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0210 	bic.w	r2, r2, #16
 8001786:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d032      	beq.n	8001816 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d022      	beq.n	8001802 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2205      	movs	r2, #5
 80017c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0201 	bic.w	r2, r2, #1
 80017d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	3301      	adds	r3, #1
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d307      	bcc.n	80017f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f2      	bne.n	80017d4 <HAL_DMA_IRQHandler+0x2cc>
 80017ee:	e000      	b.n	80017f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80017f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001806:	2b00      	cmp	r3, #0
 8001808:	d005      	beq.n	8001816 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	4798      	blx	r3
 8001812:	e000      	b.n	8001816 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001814:	bf00      	nop
    }
  }
}
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
 8001828:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001838:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2b40      	cmp	r3, #64	; 0x40
 8001848:	d108      	bne.n	800185c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800185a:	e007      	b.n	800186c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68ba      	ldr	r2, [r7, #8]
 8001862:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	60da      	str	r2, [r3, #12]
}
 800186c:	bf00      	nop
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	3b10      	subs	r3, #16
 8001888:	4a14      	ldr	r2, [pc, #80]	; (80018dc <DMA_CalcBaseAndBitshift+0x64>)
 800188a:	fba2 2303 	umull	r2, r3, r2, r3
 800188e:	091b      	lsrs	r3, r3, #4
 8001890:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001892:	4a13      	ldr	r2, [pc, #76]	; (80018e0 <DMA_CalcBaseAndBitshift+0x68>)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4413      	add	r3, r2
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d909      	bls.n	80018ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018ae:	f023 0303 	bic.w	r3, r3, #3
 80018b2:	1d1a      	adds	r2, r3, #4
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	659a      	str	r2, [r3, #88]	; 0x58
 80018b8:	e007      	b.n	80018ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018c2:	f023 0303 	bic.w	r3, r3, #3
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	aaaaaaab 	.word	0xaaaaaaab
 80018e0:	08004e10 	.word	0x08004e10

080018e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018ec:	2300      	movs	r3, #0
 80018ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d11f      	bne.n	800193e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	2b03      	cmp	r3, #3
 8001902:	d856      	bhi.n	80019b2 <DMA_CheckFifoParam+0xce>
 8001904:	a201      	add	r2, pc, #4	; (adr r2, 800190c <DMA_CheckFifoParam+0x28>)
 8001906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800190a:	bf00      	nop
 800190c:	0800191d 	.word	0x0800191d
 8001910:	0800192f 	.word	0x0800192f
 8001914:	0800191d 	.word	0x0800191d
 8001918:	080019b3 	.word	0x080019b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001920:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d046      	beq.n	80019b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800192c:	e043      	b.n	80019b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001932:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001936:	d140      	bne.n	80019ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800193c:	e03d      	b.n	80019ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001946:	d121      	bne.n	800198c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	2b03      	cmp	r3, #3
 800194c:	d837      	bhi.n	80019be <DMA_CheckFifoParam+0xda>
 800194e:	a201      	add	r2, pc, #4	; (adr r2, 8001954 <DMA_CheckFifoParam+0x70>)
 8001950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001954:	08001965 	.word	0x08001965
 8001958:	0800196b 	.word	0x0800196b
 800195c:	08001965 	.word	0x08001965
 8001960:	0800197d 	.word	0x0800197d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	73fb      	strb	r3, [r7, #15]
      break;
 8001968:	e030      	b.n	80019cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d025      	beq.n	80019c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800197a:	e022      	b.n	80019c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001980:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001984:	d11f      	bne.n	80019c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800198a:	e01c      	b.n	80019c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d903      	bls.n	800199a <DMA_CheckFifoParam+0xb6>
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	2b03      	cmp	r3, #3
 8001996:	d003      	beq.n	80019a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001998:	e018      	b.n	80019cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	73fb      	strb	r3, [r7, #15]
      break;
 800199e:	e015      	b.n	80019cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00e      	beq.n	80019ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	73fb      	strb	r3, [r7, #15]
      break;
 80019b0:	e00b      	b.n	80019ca <DMA_CheckFifoParam+0xe6>
      break;
 80019b2:	bf00      	nop
 80019b4:	e00a      	b.n	80019cc <DMA_CheckFifoParam+0xe8>
      break;
 80019b6:	bf00      	nop
 80019b8:	e008      	b.n	80019cc <DMA_CheckFifoParam+0xe8>
      break;
 80019ba:	bf00      	nop
 80019bc:	e006      	b.n	80019cc <DMA_CheckFifoParam+0xe8>
      break;
 80019be:	bf00      	nop
 80019c0:	e004      	b.n	80019cc <DMA_CheckFifoParam+0xe8>
      break;
 80019c2:	bf00      	nop
 80019c4:	e002      	b.n	80019cc <DMA_CheckFifoParam+0xe8>
      break;   
 80019c6:	bf00      	nop
 80019c8:	e000      	b.n	80019cc <DMA_CheckFifoParam+0xe8>
      break;
 80019ca:	bf00      	nop
    }
  } 
  
  return status; 
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop

080019dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019dc:	b480      	push	{r7}
 80019de:	b089      	sub	sp, #36	; 0x24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
 80019f6:	e165      	b.n	8001cc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019f8:	2201      	movs	r2, #1
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	f040 8154 	bne.w	8001cbe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d005      	beq.n	8001a2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d130      	bne.n	8001a90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	2203      	movs	r2, #3
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	68da      	ldr	r2, [r3, #12]
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a64:	2201      	movs	r2, #1
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	091b      	lsrs	r3, r3, #4
 8001a7a:	f003 0201 	and.w	r2, r3, #1
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	2b03      	cmp	r3, #3
 8001a9a:	d017      	beq.n	8001acc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d123      	bne.n	8001b20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	08da      	lsrs	r2, r3, #3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3208      	adds	r2, #8
 8001ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	220f      	movs	r2, #15
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	691a      	ldr	r2, [r3, #16]
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	08da      	lsrs	r2, r3, #3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3208      	adds	r2, #8
 8001b1a:	69b9      	ldr	r1, [r7, #24]
 8001b1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 0203 	and.w	r2, r3, #3
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 80ae 	beq.w	8001cbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	4b5d      	ldr	r3, [pc, #372]	; (8001cdc <HAL_GPIO_Init+0x300>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	4a5c      	ldr	r2, [pc, #368]	; (8001cdc <HAL_GPIO_Init+0x300>)
 8001b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b70:	6453      	str	r3, [r2, #68]	; 0x44
 8001b72:	4b5a      	ldr	r3, [pc, #360]	; (8001cdc <HAL_GPIO_Init+0x300>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b7e:	4a58      	ldr	r2, [pc, #352]	; (8001ce0 <HAL_GPIO_Init+0x304>)
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	089b      	lsrs	r3, r3, #2
 8001b84:	3302      	adds	r3, #2
 8001b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	220f      	movs	r2, #15
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a4f      	ldr	r2, [pc, #316]	; (8001ce4 <HAL_GPIO_Init+0x308>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d025      	beq.n	8001bf6 <HAL_GPIO_Init+0x21a>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a4e      	ldr	r2, [pc, #312]	; (8001ce8 <HAL_GPIO_Init+0x30c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d01f      	beq.n	8001bf2 <HAL_GPIO_Init+0x216>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a4d      	ldr	r2, [pc, #308]	; (8001cec <HAL_GPIO_Init+0x310>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d019      	beq.n	8001bee <HAL_GPIO_Init+0x212>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a4c      	ldr	r2, [pc, #304]	; (8001cf0 <HAL_GPIO_Init+0x314>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d013      	beq.n	8001bea <HAL_GPIO_Init+0x20e>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a4b      	ldr	r2, [pc, #300]	; (8001cf4 <HAL_GPIO_Init+0x318>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d00d      	beq.n	8001be6 <HAL_GPIO_Init+0x20a>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a4a      	ldr	r2, [pc, #296]	; (8001cf8 <HAL_GPIO_Init+0x31c>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d007      	beq.n	8001be2 <HAL_GPIO_Init+0x206>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a49      	ldr	r2, [pc, #292]	; (8001cfc <HAL_GPIO_Init+0x320>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d101      	bne.n	8001bde <HAL_GPIO_Init+0x202>
 8001bda:	2306      	movs	r3, #6
 8001bdc:	e00c      	b.n	8001bf8 <HAL_GPIO_Init+0x21c>
 8001bde:	2307      	movs	r3, #7
 8001be0:	e00a      	b.n	8001bf8 <HAL_GPIO_Init+0x21c>
 8001be2:	2305      	movs	r3, #5
 8001be4:	e008      	b.n	8001bf8 <HAL_GPIO_Init+0x21c>
 8001be6:	2304      	movs	r3, #4
 8001be8:	e006      	b.n	8001bf8 <HAL_GPIO_Init+0x21c>
 8001bea:	2303      	movs	r3, #3
 8001bec:	e004      	b.n	8001bf8 <HAL_GPIO_Init+0x21c>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e002      	b.n	8001bf8 <HAL_GPIO_Init+0x21c>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <HAL_GPIO_Init+0x21c>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	69fa      	ldr	r2, [r7, #28]
 8001bfa:	f002 0203 	and.w	r2, r2, #3
 8001bfe:	0092      	lsls	r2, r2, #2
 8001c00:	4093      	lsls	r3, r2
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c08:	4935      	ldr	r1, [pc, #212]	; (8001ce0 <HAL_GPIO_Init+0x304>)
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	089b      	lsrs	r3, r3, #2
 8001c0e:	3302      	adds	r3, #2
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c16:	4b3a      	ldr	r3, [pc, #232]	; (8001d00 <HAL_GPIO_Init+0x324>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4013      	ands	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c3a:	4a31      	ldr	r2, [pc, #196]	; (8001d00 <HAL_GPIO_Init+0x324>)
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c40:	4b2f      	ldr	r3, [pc, #188]	; (8001d00 <HAL_GPIO_Init+0x324>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c64:	4a26      	ldr	r2, [pc, #152]	; (8001d00 <HAL_GPIO_Init+0x324>)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c6a:	4b25      	ldr	r3, [pc, #148]	; (8001d00 <HAL_GPIO_Init+0x324>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c8e:	4a1c      	ldr	r2, [pc, #112]	; (8001d00 <HAL_GPIO_Init+0x324>)
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c94:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <HAL_GPIO_Init+0x324>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cb8:	4a11      	ldr	r2, [pc, #68]	; (8001d00 <HAL_GPIO_Init+0x324>)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	61fb      	str	r3, [r7, #28]
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	2b0f      	cmp	r3, #15
 8001cc8:	f67f ae96 	bls.w	80019f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ccc:	bf00      	nop
 8001cce:	bf00      	nop
 8001cd0:	3724      	adds	r7, #36	; 0x24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40013800 	.word	0x40013800
 8001ce4:	40020000 	.word	0x40020000
 8001ce8:	40020400 	.word	0x40020400
 8001cec:	40020800 	.word	0x40020800
 8001cf0:	40020c00 	.word	0x40020c00
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40021400 	.word	0x40021400
 8001cfc:	40021800 	.word	0x40021800
 8001d00:	40013c00 	.word	0x40013c00

08001d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	807b      	strh	r3, [r7, #2]
 8001d10:	4613      	mov	r3, r2
 8001d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d14:	787b      	ldrb	r3, [r7, #1]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d1a:	887a      	ldrh	r2, [r7, #2]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d20:	e003      	b.n	8001d2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d22:	887b      	ldrh	r3, [r7, #2]
 8001d24:	041a      	lsls	r2, r3, #16
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	619a      	str	r2, [r3, #24]
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b085      	sub	sp, #20
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	460b      	mov	r3, r1
 8001d40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d48:	887a      	ldrh	r2, [r7, #2]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	041a      	lsls	r2, r3, #16
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	43d9      	mvns	r1, r3
 8001d54:	887b      	ldrh	r3, [r7, #2]
 8001d56:	400b      	ands	r3, r1
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	619a      	str	r2, [r3, #24]
}
 8001d5e:	bf00      	nop
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
	...

08001d6c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	603b      	str	r3, [r7, #0]
 8001d7a:	4b20      	ldr	r3, [pc, #128]	; (8001dfc <HAL_PWREx_EnableOverDrive+0x90>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	4a1f      	ldr	r2, [pc, #124]	; (8001dfc <HAL_PWREx_EnableOverDrive+0x90>)
 8001d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d84:	6413      	str	r3, [r2, #64]	; 0x40
 8001d86:	4b1d      	ldr	r3, [pc, #116]	; (8001dfc <HAL_PWREx_EnableOverDrive+0x90>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	603b      	str	r3, [r7, #0]
 8001d90:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d92:	4b1b      	ldr	r3, [pc, #108]	; (8001e00 <HAL_PWREx_EnableOverDrive+0x94>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d98:	f7ff f8dc 	bl	8000f54 <HAL_GetTick>
 8001d9c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d9e:	e009      	b.n	8001db4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001da0:	f7ff f8d8 	bl	8000f54 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dae:	d901      	bls.n	8001db4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e01f      	b.n	8001df4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001db4:	4b13      	ldr	r3, [pc, #76]	; (8001e04 <HAL_PWREx_EnableOverDrive+0x98>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc0:	d1ee      	bne.n	8001da0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001dc2:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dc8:	f7ff f8c4 	bl	8000f54 <HAL_GetTick>
 8001dcc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001dce:	e009      	b.n	8001de4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001dd0:	f7ff f8c0 	bl	8000f54 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dde:	d901      	bls.n	8001de4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e007      	b.n	8001df4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001de4:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <HAL_PWREx_EnableOverDrive+0x98>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001df0:	d1ee      	bne.n	8001dd0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	420e0040 	.word	0x420e0040
 8001e04:	40007000 	.word	0x40007000
 8001e08:	420e0044 	.word	0x420e0044

08001e0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0cc      	b.n	8001fba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e20:	4b68      	ldr	r3, [pc, #416]	; (8001fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 030f 	and.w	r3, r3, #15
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d90c      	bls.n	8001e48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2e:	4b65      	ldr	r3, [pc, #404]	; (8001fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e36:	4b63      	ldr	r3, [pc, #396]	; (8001fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0b8      	b.n	8001fba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d020      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e60:	4b59      	ldr	r3, [pc, #356]	; (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	4a58      	ldr	r2, [pc, #352]	; (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e78:	4b53      	ldr	r3, [pc, #332]	; (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	4a52      	ldr	r2, [pc, #328]	; (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e84:	4b50      	ldr	r3, [pc, #320]	; (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	494d      	ldr	r1, [pc, #308]	; (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d044      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d107      	bne.n	8001eba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eaa:	4b47      	ldr	r3, [pc, #284]	; (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d119      	bne.n	8001eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e07f      	b.n	8001fba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d003      	beq.n	8001eca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	d107      	bne.n	8001eda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eca:	4b3f      	ldr	r3, [pc, #252]	; (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d109      	bne.n	8001eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e06f      	b.n	8001fba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eda:	4b3b      	ldr	r3, [pc, #236]	; (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e067      	b.n	8001fba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eea:	4b37      	ldr	r3, [pc, #220]	; (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f023 0203 	bic.w	r2, r3, #3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	4934      	ldr	r1, [pc, #208]	; (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001efc:	f7ff f82a 	bl	8000f54 <HAL_GetTick>
 8001f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f02:	e00a      	b.n	8001f1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f04:	f7ff f826 	bl	8000f54 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e04f      	b.n	8001fba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1a:	4b2b      	ldr	r3, [pc, #172]	; (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 020c 	and.w	r2, r3, #12
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d1eb      	bne.n	8001f04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f2c:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 030f 	and.w	r3, r3, #15
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d20c      	bcs.n	8001f54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3a:	4b22      	ldr	r3, [pc, #136]	; (8001fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f42:	4b20      	ldr	r3, [pc, #128]	; (8001fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d001      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e032      	b.n	8001fba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d008      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f60:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	4916      	ldr	r1, [pc, #88]	; (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d009      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f7e:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	490e      	ldr	r1, [pc, #56]	; (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f92:	f000 f855 	bl	8002040 <HAL_RCC_GetSysClockFreq>
 8001f96:	4602      	mov	r2, r0
 8001f98:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	091b      	lsrs	r3, r3, #4
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	490a      	ldr	r1, [pc, #40]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001fa4:	5ccb      	ldrb	r3, [r1, r3]
 8001fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8001faa:	4a09      	ldr	r2, [pc, #36]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001fae:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe ff8a 	bl	8000ecc <HAL_InitTick>

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023c00 	.word	0x40023c00
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	08004df8 	.word	0x08004df8
 8001fd0:	20000040 	.word	0x20000040
 8001fd4:	20000044 	.word	0x20000044

08001fd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fdc:	4b03      	ldr	r3, [pc, #12]	; (8001fec <HAL_RCC_GetHCLKFreq+0x14>)
 8001fde:	681b      	ldr	r3, [r3, #0]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000040 	.word	0x20000040

08001ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ff4:	f7ff fff0 	bl	8001fd8 <HAL_RCC_GetHCLKFreq>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	4b05      	ldr	r3, [pc, #20]	; (8002010 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	0a9b      	lsrs	r3, r3, #10
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	4903      	ldr	r1, [pc, #12]	; (8002014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002006:	5ccb      	ldrb	r3, [r1, r3]
 8002008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800200c:	4618      	mov	r0, r3
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40023800 	.word	0x40023800
 8002014:	08004e08 	.word	0x08004e08

08002018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800201c:	f7ff ffdc 	bl	8001fd8 <HAL_RCC_GetHCLKFreq>
 8002020:	4602      	mov	r2, r0
 8002022:	4b05      	ldr	r3, [pc, #20]	; (8002038 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	0b5b      	lsrs	r3, r3, #13
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	4903      	ldr	r1, [pc, #12]	; (800203c <HAL_RCC_GetPCLK2Freq+0x24>)
 800202e:	5ccb      	ldrb	r3, [r1, r3]
 8002030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002034:	4618      	mov	r0, r3
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40023800 	.word	0x40023800
 800203c:	08004e08 	.word	0x08004e08

08002040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002044:	b0ae      	sub	sp, #184	; 0xb8
 8002046:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800204e:	2300      	movs	r3, #0
 8002050:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800205a:	2300      	movs	r3, #0
 800205c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002060:	2300      	movs	r3, #0
 8002062:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002066:	4bcb      	ldr	r3, [pc, #812]	; (8002394 <HAL_RCC_GetSysClockFreq+0x354>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 030c 	and.w	r3, r3, #12
 800206e:	2b0c      	cmp	r3, #12
 8002070:	f200 8206 	bhi.w	8002480 <HAL_RCC_GetSysClockFreq+0x440>
 8002074:	a201      	add	r2, pc, #4	; (adr r2, 800207c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207a:	bf00      	nop
 800207c:	080020b1 	.word	0x080020b1
 8002080:	08002481 	.word	0x08002481
 8002084:	08002481 	.word	0x08002481
 8002088:	08002481 	.word	0x08002481
 800208c:	080020b9 	.word	0x080020b9
 8002090:	08002481 	.word	0x08002481
 8002094:	08002481 	.word	0x08002481
 8002098:	08002481 	.word	0x08002481
 800209c:	080020c1 	.word	0x080020c1
 80020a0:	08002481 	.word	0x08002481
 80020a4:	08002481 	.word	0x08002481
 80020a8:	08002481 	.word	0x08002481
 80020ac:	080022b1 	.word	0x080022b1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020b0:	4bb9      	ldr	r3, [pc, #740]	; (8002398 <HAL_RCC_GetSysClockFreq+0x358>)
 80020b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80020b6:	e1e7      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020b8:	4bb8      	ldr	r3, [pc, #736]	; (800239c <HAL_RCC_GetSysClockFreq+0x35c>)
 80020ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80020be:	e1e3      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020c0:	4bb4      	ldr	r3, [pc, #720]	; (8002394 <HAL_RCC_GetSysClockFreq+0x354>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020cc:	4bb1      	ldr	r3, [pc, #708]	; (8002394 <HAL_RCC_GetSysClockFreq+0x354>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d071      	beq.n	80021bc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020d8:	4bae      	ldr	r3, [pc, #696]	; (8002394 <HAL_RCC_GetSysClockFreq+0x354>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	099b      	lsrs	r3, r3, #6
 80020de:	2200      	movs	r2, #0
 80020e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80020e4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80020e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80020f4:	2300      	movs	r3, #0
 80020f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80020fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80020fe:	4622      	mov	r2, r4
 8002100:	462b      	mov	r3, r5
 8002102:	f04f 0000 	mov.w	r0, #0
 8002106:	f04f 0100 	mov.w	r1, #0
 800210a:	0159      	lsls	r1, r3, #5
 800210c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002110:	0150      	lsls	r0, r2, #5
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	4621      	mov	r1, r4
 8002118:	1a51      	subs	r1, r2, r1
 800211a:	6439      	str	r1, [r7, #64]	; 0x40
 800211c:	4629      	mov	r1, r5
 800211e:	eb63 0301 	sbc.w	r3, r3, r1
 8002122:	647b      	str	r3, [r7, #68]	; 0x44
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	f04f 0300 	mov.w	r3, #0
 800212c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002130:	4649      	mov	r1, r9
 8002132:	018b      	lsls	r3, r1, #6
 8002134:	4641      	mov	r1, r8
 8002136:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800213a:	4641      	mov	r1, r8
 800213c:	018a      	lsls	r2, r1, #6
 800213e:	4641      	mov	r1, r8
 8002140:	1a51      	subs	r1, r2, r1
 8002142:	63b9      	str	r1, [r7, #56]	; 0x38
 8002144:	4649      	mov	r1, r9
 8002146:	eb63 0301 	sbc.w	r3, r3, r1
 800214a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	f04f 0300 	mov.w	r3, #0
 8002154:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002158:	4649      	mov	r1, r9
 800215a:	00cb      	lsls	r3, r1, #3
 800215c:	4641      	mov	r1, r8
 800215e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002162:	4641      	mov	r1, r8
 8002164:	00ca      	lsls	r2, r1, #3
 8002166:	4610      	mov	r0, r2
 8002168:	4619      	mov	r1, r3
 800216a:	4603      	mov	r3, r0
 800216c:	4622      	mov	r2, r4
 800216e:	189b      	adds	r3, r3, r2
 8002170:	633b      	str	r3, [r7, #48]	; 0x30
 8002172:	462b      	mov	r3, r5
 8002174:	460a      	mov	r2, r1
 8002176:	eb42 0303 	adc.w	r3, r2, r3
 800217a:	637b      	str	r3, [r7, #52]	; 0x34
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002188:	4629      	mov	r1, r5
 800218a:	024b      	lsls	r3, r1, #9
 800218c:	4621      	mov	r1, r4
 800218e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002192:	4621      	mov	r1, r4
 8002194:	024a      	lsls	r2, r1, #9
 8002196:	4610      	mov	r0, r2
 8002198:	4619      	mov	r1, r3
 800219a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800219e:	2200      	movs	r2, #0
 80021a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80021a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80021a8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80021ac:	f7fe f880 	bl	80002b0 <__aeabi_uldivmod>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	4613      	mov	r3, r2
 80021b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021ba:	e067      	b.n	800228c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021bc:	4b75      	ldr	r3, [pc, #468]	; (8002394 <HAL_RCC_GetSysClockFreq+0x354>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	099b      	lsrs	r3, r3, #6
 80021c2:	2200      	movs	r2, #0
 80021c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80021c8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80021cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80021d6:	2300      	movs	r3, #0
 80021d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80021da:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80021de:	4622      	mov	r2, r4
 80021e0:	462b      	mov	r3, r5
 80021e2:	f04f 0000 	mov.w	r0, #0
 80021e6:	f04f 0100 	mov.w	r1, #0
 80021ea:	0159      	lsls	r1, r3, #5
 80021ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021f0:	0150      	lsls	r0, r2, #5
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	4621      	mov	r1, r4
 80021f8:	1a51      	subs	r1, r2, r1
 80021fa:	62b9      	str	r1, [r7, #40]	; 0x28
 80021fc:	4629      	mov	r1, r5
 80021fe:	eb63 0301 	sbc.w	r3, r3, r1
 8002202:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	f04f 0300 	mov.w	r3, #0
 800220c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002210:	4649      	mov	r1, r9
 8002212:	018b      	lsls	r3, r1, #6
 8002214:	4641      	mov	r1, r8
 8002216:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800221a:	4641      	mov	r1, r8
 800221c:	018a      	lsls	r2, r1, #6
 800221e:	4641      	mov	r1, r8
 8002220:	ebb2 0a01 	subs.w	sl, r2, r1
 8002224:	4649      	mov	r1, r9
 8002226:	eb63 0b01 	sbc.w	fp, r3, r1
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	f04f 0300 	mov.w	r3, #0
 8002232:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002236:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800223a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800223e:	4692      	mov	sl, r2
 8002240:	469b      	mov	fp, r3
 8002242:	4623      	mov	r3, r4
 8002244:	eb1a 0303 	adds.w	r3, sl, r3
 8002248:	623b      	str	r3, [r7, #32]
 800224a:	462b      	mov	r3, r5
 800224c:	eb4b 0303 	adc.w	r3, fp, r3
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	f04f 0300 	mov.w	r3, #0
 800225a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800225e:	4629      	mov	r1, r5
 8002260:	028b      	lsls	r3, r1, #10
 8002262:	4621      	mov	r1, r4
 8002264:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002268:	4621      	mov	r1, r4
 800226a:	028a      	lsls	r2, r1, #10
 800226c:	4610      	mov	r0, r2
 800226e:	4619      	mov	r1, r3
 8002270:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002274:	2200      	movs	r2, #0
 8002276:	673b      	str	r3, [r7, #112]	; 0x70
 8002278:	677a      	str	r2, [r7, #116]	; 0x74
 800227a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800227e:	f7fe f817 	bl	80002b0 <__aeabi_uldivmod>
 8002282:	4602      	mov	r2, r0
 8002284:	460b      	mov	r3, r1
 8002286:	4613      	mov	r3, r2
 8002288:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800228c:	4b41      	ldr	r3, [pc, #260]	; (8002394 <HAL_RCC_GetSysClockFreq+0x354>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	0c1b      	lsrs	r3, r3, #16
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	3301      	adds	r3, #1
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800229e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80022a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80022ae:	e0eb      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022b0:	4b38      	ldr	r3, [pc, #224]	; (8002394 <HAL_RCC_GetSysClockFreq+0x354>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022bc:	4b35      	ldr	r3, [pc, #212]	; (8002394 <HAL_RCC_GetSysClockFreq+0x354>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d06b      	beq.n	80023a0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022c8:	4b32      	ldr	r3, [pc, #200]	; (8002394 <HAL_RCC_GetSysClockFreq+0x354>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	099b      	lsrs	r3, r3, #6
 80022ce:	2200      	movs	r2, #0
 80022d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80022d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80022d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022da:	663b      	str	r3, [r7, #96]	; 0x60
 80022dc:	2300      	movs	r3, #0
 80022de:	667b      	str	r3, [r7, #100]	; 0x64
 80022e0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80022e4:	4622      	mov	r2, r4
 80022e6:	462b      	mov	r3, r5
 80022e8:	f04f 0000 	mov.w	r0, #0
 80022ec:	f04f 0100 	mov.w	r1, #0
 80022f0:	0159      	lsls	r1, r3, #5
 80022f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022f6:	0150      	lsls	r0, r2, #5
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	4621      	mov	r1, r4
 80022fe:	1a51      	subs	r1, r2, r1
 8002300:	61b9      	str	r1, [r7, #24]
 8002302:	4629      	mov	r1, r5
 8002304:	eb63 0301 	sbc.w	r3, r3, r1
 8002308:	61fb      	str	r3, [r7, #28]
 800230a:	f04f 0200 	mov.w	r2, #0
 800230e:	f04f 0300 	mov.w	r3, #0
 8002312:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002316:	4659      	mov	r1, fp
 8002318:	018b      	lsls	r3, r1, #6
 800231a:	4651      	mov	r1, sl
 800231c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002320:	4651      	mov	r1, sl
 8002322:	018a      	lsls	r2, r1, #6
 8002324:	4651      	mov	r1, sl
 8002326:	ebb2 0801 	subs.w	r8, r2, r1
 800232a:	4659      	mov	r1, fp
 800232c:	eb63 0901 	sbc.w	r9, r3, r1
 8002330:	f04f 0200 	mov.w	r2, #0
 8002334:	f04f 0300 	mov.w	r3, #0
 8002338:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800233c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002340:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002344:	4690      	mov	r8, r2
 8002346:	4699      	mov	r9, r3
 8002348:	4623      	mov	r3, r4
 800234a:	eb18 0303 	adds.w	r3, r8, r3
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	462b      	mov	r3, r5
 8002352:	eb49 0303 	adc.w	r3, r9, r3
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002364:	4629      	mov	r1, r5
 8002366:	024b      	lsls	r3, r1, #9
 8002368:	4621      	mov	r1, r4
 800236a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800236e:	4621      	mov	r1, r4
 8002370:	024a      	lsls	r2, r1, #9
 8002372:	4610      	mov	r0, r2
 8002374:	4619      	mov	r1, r3
 8002376:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800237a:	2200      	movs	r2, #0
 800237c:	65bb      	str	r3, [r7, #88]	; 0x58
 800237e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002380:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002384:	f7fd ff94 	bl	80002b0 <__aeabi_uldivmod>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4613      	mov	r3, r2
 800238e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002392:	e065      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0x420>
 8002394:	40023800 	.word	0x40023800
 8002398:	00f42400 	.word	0x00f42400
 800239c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023a0:	4b3d      	ldr	r3, [pc, #244]	; (8002498 <HAL_RCC_GetSysClockFreq+0x458>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	099b      	lsrs	r3, r3, #6
 80023a6:	2200      	movs	r2, #0
 80023a8:	4618      	mov	r0, r3
 80023aa:	4611      	mov	r1, r2
 80023ac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023b0:	653b      	str	r3, [r7, #80]	; 0x50
 80023b2:	2300      	movs	r3, #0
 80023b4:	657b      	str	r3, [r7, #84]	; 0x54
 80023b6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80023ba:	4642      	mov	r2, r8
 80023bc:	464b      	mov	r3, r9
 80023be:	f04f 0000 	mov.w	r0, #0
 80023c2:	f04f 0100 	mov.w	r1, #0
 80023c6:	0159      	lsls	r1, r3, #5
 80023c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023cc:	0150      	lsls	r0, r2, #5
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	4641      	mov	r1, r8
 80023d4:	1a51      	subs	r1, r2, r1
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	4649      	mov	r1, r9
 80023da:	eb63 0301 	sbc.w	r3, r3, r1
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	f04f 0300 	mov.w	r3, #0
 80023e8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80023ec:	4659      	mov	r1, fp
 80023ee:	018b      	lsls	r3, r1, #6
 80023f0:	4651      	mov	r1, sl
 80023f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023f6:	4651      	mov	r1, sl
 80023f8:	018a      	lsls	r2, r1, #6
 80023fa:	4651      	mov	r1, sl
 80023fc:	1a54      	subs	r4, r2, r1
 80023fe:	4659      	mov	r1, fp
 8002400:	eb63 0501 	sbc.w	r5, r3, r1
 8002404:	f04f 0200 	mov.w	r2, #0
 8002408:	f04f 0300 	mov.w	r3, #0
 800240c:	00eb      	lsls	r3, r5, #3
 800240e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002412:	00e2      	lsls	r2, r4, #3
 8002414:	4614      	mov	r4, r2
 8002416:	461d      	mov	r5, r3
 8002418:	4643      	mov	r3, r8
 800241a:	18e3      	adds	r3, r4, r3
 800241c:	603b      	str	r3, [r7, #0]
 800241e:	464b      	mov	r3, r9
 8002420:	eb45 0303 	adc.w	r3, r5, r3
 8002424:	607b      	str	r3, [r7, #4]
 8002426:	f04f 0200 	mov.w	r2, #0
 800242a:	f04f 0300 	mov.w	r3, #0
 800242e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002432:	4629      	mov	r1, r5
 8002434:	028b      	lsls	r3, r1, #10
 8002436:	4621      	mov	r1, r4
 8002438:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800243c:	4621      	mov	r1, r4
 800243e:	028a      	lsls	r2, r1, #10
 8002440:	4610      	mov	r0, r2
 8002442:	4619      	mov	r1, r3
 8002444:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002448:	2200      	movs	r2, #0
 800244a:	64bb      	str	r3, [r7, #72]	; 0x48
 800244c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800244e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002452:	f7fd ff2d 	bl	80002b0 <__aeabi_uldivmod>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	4613      	mov	r3, r2
 800245c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002460:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <HAL_RCC_GetSysClockFreq+0x458>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	0f1b      	lsrs	r3, r3, #28
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800246e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002472:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002476:	fbb2 f3f3 	udiv	r3, r2, r3
 800247a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800247e:	e003      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002482:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002486:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002488:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800248c:	4618      	mov	r0, r3
 800248e:	37b8      	adds	r7, #184	; 0xb8
 8002490:	46bd      	mov	sp, r7
 8002492:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002496:	bf00      	nop
 8002498:	40023800 	.word	0x40023800
 800249c:	00f42400 	.word	0x00f42400

080024a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e28d      	b.n	80029ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 8083 	beq.w	80025c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024c0:	4b94      	ldr	r3, [pc, #592]	; (8002714 <HAL_RCC_OscConfig+0x274>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 030c 	and.w	r3, r3, #12
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d019      	beq.n	8002500 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024cc:	4b91      	ldr	r3, [pc, #580]	; (8002714 <HAL_RCC_OscConfig+0x274>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	d106      	bne.n	80024e6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024d8:	4b8e      	ldr	r3, [pc, #568]	; (8002714 <HAL_RCC_OscConfig+0x274>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024e4:	d00c      	beq.n	8002500 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024e6:	4b8b      	ldr	r3, [pc, #556]	; (8002714 <HAL_RCC_OscConfig+0x274>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024ee:	2b0c      	cmp	r3, #12
 80024f0:	d112      	bne.n	8002518 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024f2:	4b88      	ldr	r3, [pc, #544]	; (8002714 <HAL_RCC_OscConfig+0x274>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024fe:	d10b      	bne.n	8002518 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002500:	4b84      	ldr	r3, [pc, #528]	; (8002714 <HAL_RCC_OscConfig+0x274>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d05b      	beq.n	80025c4 <HAL_RCC_OscConfig+0x124>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d157      	bne.n	80025c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e25a      	b.n	80029ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002520:	d106      	bne.n	8002530 <HAL_RCC_OscConfig+0x90>
 8002522:	4b7c      	ldr	r3, [pc, #496]	; (8002714 <HAL_RCC_OscConfig+0x274>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a7b      	ldr	r2, [pc, #492]	; (8002714 <HAL_RCC_OscConfig+0x274>)
 8002528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	e01d      	b.n	800256c <HAL_RCC_OscConfig+0xcc>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002538:	d10c      	bne.n	8002554 <HAL_RCC_OscConfig+0xb4>
 800253a:	4b76      	ldr	r3, [pc, #472]	; (8002714 <HAL_RCC_OscConfig+0x274>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a75      	ldr	r2, [pc, #468]	; (8002714 <HAL_RCC_OscConfig+0x274>)
 8002540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	4b73      	ldr	r3, [pc, #460]	; (8002714 <HAL_RCC_OscConfig+0x274>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a72      	ldr	r2, [pc, #456]	; (8002714 <HAL_RCC_OscConfig+0x274>)
 800254c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	e00b      	b.n	800256c <HAL_RCC_OscConfig+0xcc>
 8002554:	4b6f      	ldr	r3, [pc, #444]	; (8002714 <HAL_RCC_OscConfig+0x274>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a6e      	ldr	r2, [pc, #440]	; (8002714 <HAL_RCC_OscConfig+0x274>)
 800255a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	4b6c      	ldr	r3, [pc, #432]	; (8002714 <HAL_RCC_OscConfig+0x274>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a6b      	ldr	r2, [pc, #428]	; (8002714 <HAL_RCC_OscConfig+0x274>)
 8002566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800256a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d013      	beq.n	800259c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002574:	f7fe fcee 	bl	8000f54 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800257c:	f7fe fcea 	bl	8000f54 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b64      	cmp	r3, #100	; 0x64
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e21f      	b.n	80029ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258e:	4b61      	ldr	r3, [pc, #388]	; (8002714 <HAL_RCC_OscConfig+0x274>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0f0      	beq.n	800257c <HAL_RCC_OscConfig+0xdc>
 800259a:	e014      	b.n	80025c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259c:	f7fe fcda 	bl	8000f54 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025a4:	f7fe fcd6 	bl	8000f54 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b64      	cmp	r3, #100	; 0x64
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e20b      	b.n	80029ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b6:	4b57      	ldr	r3, [pc, #348]	; (8002714 <HAL_RCC_OscConfig+0x274>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f0      	bne.n	80025a4 <HAL_RCC_OscConfig+0x104>
 80025c2:	e000      	b.n	80025c6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d06f      	beq.n	80026b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025d2:	4b50      	ldr	r3, [pc, #320]	; (8002714 <HAL_RCC_OscConfig+0x274>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d017      	beq.n	800260e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025de:	4b4d      	ldr	r3, [pc, #308]	; (8002714 <HAL_RCC_OscConfig+0x274>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025e6:	2b08      	cmp	r3, #8
 80025e8:	d105      	bne.n	80025f6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025ea:	4b4a      	ldr	r3, [pc, #296]	; (8002714 <HAL_RCC_OscConfig+0x274>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00b      	beq.n	800260e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025f6:	4b47      	ldr	r3, [pc, #284]	; (8002714 <HAL_RCC_OscConfig+0x274>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025fe:	2b0c      	cmp	r3, #12
 8002600:	d11c      	bne.n	800263c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002602:	4b44      	ldr	r3, [pc, #272]	; (8002714 <HAL_RCC_OscConfig+0x274>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d116      	bne.n	800263c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260e:	4b41      	ldr	r3, [pc, #260]	; (8002714 <HAL_RCC_OscConfig+0x274>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_RCC_OscConfig+0x186>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d001      	beq.n	8002626 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e1d3      	b.n	80029ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002626:	4b3b      	ldr	r3, [pc, #236]	; (8002714 <HAL_RCC_OscConfig+0x274>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	4937      	ldr	r1, [pc, #220]	; (8002714 <HAL_RCC_OscConfig+0x274>)
 8002636:	4313      	orrs	r3, r2
 8002638:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263a:	e03a      	b.n	80026b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d020      	beq.n	8002686 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002644:	4b34      	ldr	r3, [pc, #208]	; (8002718 <HAL_RCC_OscConfig+0x278>)
 8002646:	2201      	movs	r2, #1
 8002648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264a:	f7fe fc83 	bl	8000f54 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002652:	f7fe fc7f 	bl	8000f54 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e1b4      	b.n	80029ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002664:	4b2b      	ldr	r3, [pc, #172]	; (8002714 <HAL_RCC_OscConfig+0x274>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0f0      	beq.n	8002652 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002670:	4b28      	ldr	r3, [pc, #160]	; (8002714 <HAL_RCC_OscConfig+0x274>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	4925      	ldr	r1, [pc, #148]	; (8002714 <HAL_RCC_OscConfig+0x274>)
 8002680:	4313      	orrs	r3, r2
 8002682:	600b      	str	r3, [r1, #0]
 8002684:	e015      	b.n	80026b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002686:	4b24      	ldr	r3, [pc, #144]	; (8002718 <HAL_RCC_OscConfig+0x278>)
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268c:	f7fe fc62 	bl	8000f54 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002694:	f7fe fc5e 	bl	8000f54 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e193      	b.n	80029ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026a6:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <HAL_RCC_OscConfig+0x274>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f0      	bne.n	8002694 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d036      	beq.n	800272c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d016      	beq.n	80026f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026c6:	4b15      	ldr	r3, [pc, #84]	; (800271c <HAL_RCC_OscConfig+0x27c>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026cc:	f7fe fc42 	bl	8000f54 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026d4:	f7fe fc3e 	bl	8000f54 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e173      	b.n	80029ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026e6:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <HAL_RCC_OscConfig+0x274>)
 80026e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0f0      	beq.n	80026d4 <HAL_RCC_OscConfig+0x234>
 80026f2:	e01b      	b.n	800272c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026f4:	4b09      	ldr	r3, [pc, #36]	; (800271c <HAL_RCC_OscConfig+0x27c>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fa:	f7fe fc2b 	bl	8000f54 <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002700:	e00e      	b.n	8002720 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002702:	f7fe fc27 	bl	8000f54 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d907      	bls.n	8002720 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e15c      	b.n	80029ce <HAL_RCC_OscConfig+0x52e>
 8002714:	40023800 	.word	0x40023800
 8002718:	42470000 	.word	0x42470000
 800271c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002720:	4b8a      	ldr	r3, [pc, #552]	; (800294c <HAL_RCC_OscConfig+0x4ac>)
 8002722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1ea      	bne.n	8002702 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 8097 	beq.w	8002868 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273a:	2300      	movs	r3, #0
 800273c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800273e:	4b83      	ldr	r3, [pc, #524]	; (800294c <HAL_RCC_OscConfig+0x4ac>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10f      	bne.n	800276a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	4b7f      	ldr	r3, [pc, #508]	; (800294c <HAL_RCC_OscConfig+0x4ac>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	4a7e      	ldr	r2, [pc, #504]	; (800294c <HAL_RCC_OscConfig+0x4ac>)
 8002754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002758:	6413      	str	r3, [r2, #64]	; 0x40
 800275a:	4b7c      	ldr	r3, [pc, #496]	; (800294c <HAL_RCC_OscConfig+0x4ac>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002766:	2301      	movs	r3, #1
 8002768:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276a:	4b79      	ldr	r3, [pc, #484]	; (8002950 <HAL_RCC_OscConfig+0x4b0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002772:	2b00      	cmp	r3, #0
 8002774:	d118      	bne.n	80027a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002776:	4b76      	ldr	r3, [pc, #472]	; (8002950 <HAL_RCC_OscConfig+0x4b0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a75      	ldr	r2, [pc, #468]	; (8002950 <HAL_RCC_OscConfig+0x4b0>)
 800277c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002782:	f7fe fbe7 	bl	8000f54 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800278a:	f7fe fbe3 	bl	8000f54 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e118      	b.n	80029ce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279c:	4b6c      	ldr	r3, [pc, #432]	; (8002950 <HAL_RCC_OscConfig+0x4b0>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f0      	beq.n	800278a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d106      	bne.n	80027be <HAL_RCC_OscConfig+0x31e>
 80027b0:	4b66      	ldr	r3, [pc, #408]	; (800294c <HAL_RCC_OscConfig+0x4ac>)
 80027b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b4:	4a65      	ldr	r2, [pc, #404]	; (800294c <HAL_RCC_OscConfig+0x4ac>)
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	6713      	str	r3, [r2, #112]	; 0x70
 80027bc:	e01c      	b.n	80027f8 <HAL_RCC_OscConfig+0x358>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2b05      	cmp	r3, #5
 80027c4:	d10c      	bne.n	80027e0 <HAL_RCC_OscConfig+0x340>
 80027c6:	4b61      	ldr	r3, [pc, #388]	; (800294c <HAL_RCC_OscConfig+0x4ac>)
 80027c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ca:	4a60      	ldr	r2, [pc, #384]	; (800294c <HAL_RCC_OscConfig+0x4ac>)
 80027cc:	f043 0304 	orr.w	r3, r3, #4
 80027d0:	6713      	str	r3, [r2, #112]	; 0x70
 80027d2:	4b5e      	ldr	r3, [pc, #376]	; (800294c <HAL_RCC_OscConfig+0x4ac>)
 80027d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d6:	4a5d      	ldr	r2, [pc, #372]	; (800294c <HAL_RCC_OscConfig+0x4ac>)
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	6713      	str	r3, [r2, #112]	; 0x70
 80027de:	e00b      	b.n	80027f8 <HAL_RCC_OscConfig+0x358>
 80027e0:	4b5a      	ldr	r3, [pc, #360]	; (800294c <HAL_RCC_OscConfig+0x4ac>)
 80027e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e4:	4a59      	ldr	r2, [pc, #356]	; (800294c <HAL_RCC_OscConfig+0x4ac>)
 80027e6:	f023 0301 	bic.w	r3, r3, #1
 80027ea:	6713      	str	r3, [r2, #112]	; 0x70
 80027ec:	4b57      	ldr	r3, [pc, #348]	; (800294c <HAL_RCC_OscConfig+0x4ac>)
 80027ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f0:	4a56      	ldr	r2, [pc, #344]	; (800294c <HAL_RCC_OscConfig+0x4ac>)
 80027f2:	f023 0304 	bic.w	r3, r3, #4
 80027f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d015      	beq.n	800282c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002800:	f7fe fba8 	bl	8000f54 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002806:	e00a      	b.n	800281e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002808:	f7fe fba4 	bl	8000f54 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	; 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e0d7      	b.n	80029ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281e:	4b4b      	ldr	r3, [pc, #300]	; (800294c <HAL_RCC_OscConfig+0x4ac>)
 8002820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0ee      	beq.n	8002808 <HAL_RCC_OscConfig+0x368>
 800282a:	e014      	b.n	8002856 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282c:	f7fe fb92 	bl	8000f54 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002832:	e00a      	b.n	800284a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002834:	f7fe fb8e 	bl	8000f54 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002842:	4293      	cmp	r3, r2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e0c1      	b.n	80029ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800284a:	4b40      	ldr	r3, [pc, #256]	; (800294c <HAL_RCC_OscConfig+0x4ac>)
 800284c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1ee      	bne.n	8002834 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002856:	7dfb      	ldrb	r3, [r7, #23]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d105      	bne.n	8002868 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800285c:	4b3b      	ldr	r3, [pc, #236]	; (800294c <HAL_RCC_OscConfig+0x4ac>)
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	4a3a      	ldr	r2, [pc, #232]	; (800294c <HAL_RCC_OscConfig+0x4ac>)
 8002862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002866:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 80ad 	beq.w	80029cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002872:	4b36      	ldr	r3, [pc, #216]	; (800294c <HAL_RCC_OscConfig+0x4ac>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	2b08      	cmp	r3, #8
 800287c:	d060      	beq.n	8002940 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d145      	bne.n	8002912 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002886:	4b33      	ldr	r3, [pc, #204]	; (8002954 <HAL_RCC_OscConfig+0x4b4>)
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288c:	f7fe fb62 	bl	8000f54 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002894:	f7fe fb5e 	bl	8000f54 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e093      	b.n	80029ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a6:	4b29      	ldr	r3, [pc, #164]	; (800294c <HAL_RCC_OscConfig+0x4ac>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69da      	ldr	r2, [r3, #28]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	019b      	lsls	r3, r3, #6
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c8:	085b      	lsrs	r3, r3, #1
 80028ca:	3b01      	subs	r3, #1
 80028cc:	041b      	lsls	r3, r3, #16
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d4:	061b      	lsls	r3, r3, #24
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	071b      	lsls	r3, r3, #28
 80028de:	491b      	ldr	r1, [pc, #108]	; (800294c <HAL_RCC_OscConfig+0x4ac>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028e4:	4b1b      	ldr	r3, [pc, #108]	; (8002954 <HAL_RCC_OscConfig+0x4b4>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ea:	f7fe fb33 	bl	8000f54 <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f2:	f7fe fb2f 	bl	8000f54 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e064      	b.n	80029ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002904:	4b11      	ldr	r3, [pc, #68]	; (800294c <HAL_RCC_OscConfig+0x4ac>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0f0      	beq.n	80028f2 <HAL_RCC_OscConfig+0x452>
 8002910:	e05c      	b.n	80029cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002912:	4b10      	ldr	r3, [pc, #64]	; (8002954 <HAL_RCC_OscConfig+0x4b4>)
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002918:	f7fe fb1c 	bl	8000f54 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002920:	f7fe fb18 	bl	8000f54 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e04d      	b.n	80029ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002932:	4b06      	ldr	r3, [pc, #24]	; (800294c <HAL_RCC_OscConfig+0x4ac>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f0      	bne.n	8002920 <HAL_RCC_OscConfig+0x480>
 800293e:	e045      	b.n	80029cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d107      	bne.n	8002958 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e040      	b.n	80029ce <HAL_RCC_OscConfig+0x52e>
 800294c:	40023800 	.word	0x40023800
 8002950:	40007000 	.word	0x40007000
 8002954:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002958:	4b1f      	ldr	r3, [pc, #124]	; (80029d8 <HAL_RCC_OscConfig+0x538>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d030      	beq.n	80029c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002970:	429a      	cmp	r2, r3
 8002972:	d129      	bne.n	80029c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297e:	429a      	cmp	r2, r3
 8002980:	d122      	bne.n	80029c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002988:	4013      	ands	r3, r2
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800298e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002990:	4293      	cmp	r3, r2
 8002992:	d119      	bne.n	80029c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299e:	085b      	lsrs	r3, r3, #1
 80029a0:	3b01      	subs	r3, #1
 80029a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d10f      	bne.n	80029c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d107      	bne.n	80029c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d001      	beq.n	80029cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e000      	b.n	80029ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40023800 	.word	0x40023800

080029dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e03f      	b.n	8002a6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d106      	bne.n	8002a08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7fe f8a0 	bl	8000b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2224      	movs	r2, #36	; 0x24
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 ff9b 	bl	800395c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	691a      	ldr	r2, [r3, #16]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695a      	ldr	r2, [r3, #20]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2220      	movs	r2, #32
 8002a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b08a      	sub	sp, #40	; 0x28
 8002a7a:	af02      	add	r7, sp, #8
 8002a7c:	60f8      	str	r0, [r7, #12]
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	603b      	str	r3, [r7, #0]
 8002a82:	4613      	mov	r3, r2
 8002a84:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b20      	cmp	r3, #32
 8002a94:	d17c      	bne.n	8002b90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <HAL_UART_Transmit+0x2c>
 8002a9c:	88fb      	ldrh	r3, [r7, #6]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e075      	b.n	8002b92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_UART_Transmit+0x3e>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e06e      	b.n	8002b92 <HAL_UART_Transmit+0x11c>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2221      	movs	r2, #33	; 0x21
 8002ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002aca:	f7fe fa43 	bl	8000f54 <HAL_GetTick>
 8002ace:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	88fa      	ldrh	r2, [r7, #6]
 8002ad4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	88fa      	ldrh	r2, [r7, #6]
 8002ada:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ae4:	d108      	bne.n	8002af8 <HAL_UART_Transmit+0x82>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d104      	bne.n	8002af8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	61bb      	str	r3, [r7, #24]
 8002af6:	e003      	b.n	8002b00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002b08:	e02a      	b.n	8002b60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2200      	movs	r2, #0
 8002b12:	2180      	movs	r1, #128	; 0x80
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 fc53 	bl	80033c0 <UART_WaitOnFlagUntilTimeout>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e036      	b.n	8002b92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10b      	bne.n	8002b42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	3302      	adds	r3, #2
 8002b3e:	61bb      	str	r3, [r7, #24]
 8002b40:	e007      	b.n	8002b52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	781a      	ldrb	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1cf      	bne.n	8002b0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	2200      	movs	r2, #0
 8002b72:	2140      	movs	r1, #64	; 0x40
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 fc23 	bl	80033c0 <UART_WaitOnFlagUntilTimeout>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e006      	b.n	8002b92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	e000      	b.n	8002b92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b90:	2302      	movs	r3, #2
  }
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3720      	adds	r7, #32
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b08c      	sub	sp, #48	; 0x30
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b20      	cmp	r3, #32
 8002bb2:	d152      	bne.n	8002c5a <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d002      	beq.n	8002bc0 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8002bba:	88fb      	ldrh	r3, [r7, #6]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e04b      	b.n	8002c5c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e044      	b.n	8002c5c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8002be0:	88fb      	ldrh	r3, [r7, #6]
 8002be2:	461a      	mov	r2, r3
 8002be4:	68b9      	ldr	r1, [r7, #8]
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 fc58 	bl	800349c <UART_Start_Receive_DMA>
 8002bec:	4603      	mov	r3, r0
 8002bee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002bf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d12c      	bne.n	8002c54 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d125      	bne.n	8002c4e <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c02:	2300      	movs	r3, #0
 8002c04:	613b      	str	r3, [r7, #16]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	613b      	str	r3, [r7, #16]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	330c      	adds	r3, #12
 8002c1e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	e853 3f00 	ldrex	r3, [r3]
 8002c26:	617b      	str	r3, [r7, #20]
   return(result);
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	f043 0310 	orr.w	r3, r3, #16
 8002c2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	330c      	adds	r3, #12
 8002c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c38:	627a      	str	r2, [r7, #36]	; 0x24
 8002c3a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3c:	6a39      	ldr	r1, [r7, #32]
 8002c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c40:	e841 2300 	strex	r3, r2, [r1]
 8002c44:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1e5      	bne.n	8002c18 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8002c4c:	e002      	b.n	8002c54 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8002c54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c58:	e000      	b.n	8002c5c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8002c5a:	2302      	movs	r3, #2
  }
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3730      	adds	r7, #48	; 0x30
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b0ba      	sub	sp, #232	; 0xe8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002ca2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10f      	bne.n	8002cca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cae:	f003 0320 	and.w	r3, r3, #32
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d009      	beq.n	8002cca <HAL_UART_IRQHandler+0x66>
 8002cb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cba:	f003 0320 	and.w	r3, r3, #32
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 fd8f 	bl	80037e6 <UART_Receive_IT>
      return;
 8002cc8:	e256      	b.n	8003178 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002cca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 80de 	beq.w	8002e90 <HAL_UART_IRQHandler+0x22c>
 8002cd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d106      	bne.n	8002cee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ce4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 80d1 	beq.w	8002e90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00b      	beq.n	8002d12 <HAL_UART_IRQHandler+0xae>
 8002cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d005      	beq.n	8002d12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	f043 0201 	orr.w	r2, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d16:	f003 0304 	and.w	r3, r3, #4
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00b      	beq.n	8002d36 <HAL_UART_IRQHandler+0xd2>
 8002d1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d005      	beq.n	8002d36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f043 0202 	orr.w	r2, r3, #2
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00b      	beq.n	8002d5a <HAL_UART_IRQHandler+0xf6>
 8002d42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d005      	beq.n	8002d5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	f043 0204 	orr.w	r2, r3, #4
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d011      	beq.n	8002d8a <HAL_UART_IRQHandler+0x126>
 8002d66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d6a:	f003 0320 	and.w	r3, r3, #32
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d105      	bne.n	8002d7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d005      	beq.n	8002d8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	f043 0208 	orr.w	r2, r3, #8
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 81ed 	beq.w	800316e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d008      	beq.n	8002db2 <HAL_UART_IRQHandler+0x14e>
 8002da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002da4:	f003 0320 	and.w	r3, r3, #32
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d002      	beq.n	8002db2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 fd1a 	bl	80037e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dbc:	2b40      	cmp	r3, #64	; 0x40
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2301      	moveq	r3, #1
 8002dc2:	2300      	movne	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d103      	bne.n	8002dde <HAL_UART_IRQHandler+0x17a>
 8002dd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d04f      	beq.n	8002e7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 fc22 	bl	8003628 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dee:	2b40      	cmp	r3, #64	; 0x40
 8002df0:	d141      	bne.n	8002e76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	3314      	adds	r3, #20
 8002df8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e00:	e853 3f00 	ldrex	r3, [r3]
 8002e04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002e08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	3314      	adds	r3, #20
 8002e1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002e22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e2e:	e841 2300 	strex	r3, r2, [r1]
 8002e32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002e36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1d9      	bne.n	8002df2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d013      	beq.n	8002e6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4a:	4a7d      	ldr	r2, [pc, #500]	; (8003040 <HAL_UART_IRQHandler+0x3dc>)
 8002e4c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe fb36 	bl	80014c4 <HAL_DMA_Abort_IT>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d016      	beq.n	8002e8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e68:	4610      	mov	r0, r2
 8002e6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e6c:	e00e      	b.n	8002e8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f9a4 	bl	80031bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e74:	e00a      	b.n	8002e8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f9a0 	bl	80031bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e7c:	e006      	b.n	8002e8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f99c 	bl	80031bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002e8a:	e170      	b.n	800316e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e8c:	bf00      	nop
    return;
 8002e8e:	e16e      	b.n	800316e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	f040 814a 	bne.w	800312e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e9e:	f003 0310 	and.w	r3, r3, #16
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 8143 	beq.w	800312e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 813c 	beq.w	800312e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60bb      	str	r3, [r7, #8]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	60bb      	str	r3, [r7, #8]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	60bb      	str	r3, [r7, #8]
 8002eca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed6:	2b40      	cmp	r3, #64	; 0x40
 8002ed8:	f040 80b4 	bne.w	8003044 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ee8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 8140 	beq.w	8003172 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ef6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002efa:	429a      	cmp	r2, r3
 8002efc:	f080 8139 	bcs.w	8003172 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f06:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f12:	f000 8088 	beq.w	8003026 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	330c      	adds	r3, #12
 8002f1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f24:	e853 3f00 	ldrex	r3, [r3]
 8002f28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	330c      	adds	r3, #12
 8002f3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002f42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f52:	e841 2300 	strex	r3, r2, [r1]
 8002f56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002f5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1d9      	bne.n	8002f16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	3314      	adds	r3, #20
 8002f68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f6c:	e853 3f00 	ldrex	r3, [r3]
 8002f70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f74:	f023 0301 	bic.w	r3, r3, #1
 8002f78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	3314      	adds	r3, #20
 8002f82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f92:	e841 2300 	strex	r3, r2, [r1]
 8002f96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1e1      	bne.n	8002f62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	3314      	adds	r3, #20
 8002fa4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fa8:	e853 3f00 	ldrex	r3, [r3]
 8002fac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002fae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	3314      	adds	r3, #20
 8002fbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002fc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002fc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002fc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002fca:	e841 2300 	strex	r3, r2, [r1]
 8002fce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002fd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1e3      	bne.n	8002f9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	330c      	adds	r3, #12
 8002fea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fee:	e853 3f00 	ldrex	r3, [r3]
 8002ff2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ff6:	f023 0310 	bic.w	r3, r3, #16
 8002ffa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	330c      	adds	r3, #12
 8003004:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003008:	65ba      	str	r2, [r7, #88]	; 0x58
 800300a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800300e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003010:	e841 2300 	strex	r3, r2, [r1]
 8003014:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1e3      	bne.n	8002fe4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003020:	4618      	mov	r0, r3
 8003022:	f7fe f9df 	bl	80013e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800302e:	b29b      	uxth	r3, r3
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	b29b      	uxth	r3, r3
 8003034:	4619      	mov	r1, r3
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7fd fca6 	bl	8000988 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800303c:	e099      	b.n	8003172 <HAL_UART_IRQHandler+0x50e>
 800303e:	bf00      	nop
 8003040:	080036ef 	.word	0x080036ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800304c:	b29b      	uxth	r3, r3
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003058:	b29b      	uxth	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 808b 	beq.w	8003176 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003060:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 8086 	beq.w	8003176 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	330c      	adds	r3, #12
 8003070:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003074:	e853 3f00 	ldrex	r3, [r3]
 8003078:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800307a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800307c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003080:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	330c      	adds	r3, #12
 800308a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800308e:	647a      	str	r2, [r7, #68]	; 0x44
 8003090:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003092:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003094:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003096:	e841 2300 	strex	r3, r2, [r1]
 800309a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800309c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1e3      	bne.n	800306a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	3314      	adds	r3, #20
 80030a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	e853 3f00 	ldrex	r3, [r3]
 80030b0:	623b      	str	r3, [r7, #32]
   return(result);
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	f023 0301 	bic.w	r3, r3, #1
 80030b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	3314      	adds	r3, #20
 80030c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80030c6:	633a      	str	r2, [r7, #48]	; 0x30
 80030c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ce:	e841 2300 	strex	r3, r2, [r1]
 80030d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80030d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1e3      	bne.n	80030a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2220      	movs	r2, #32
 80030de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	330c      	adds	r3, #12
 80030ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	e853 3f00 	ldrex	r3, [r3]
 80030f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f023 0310 	bic.w	r3, r3, #16
 80030fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	330c      	adds	r3, #12
 8003108:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800310c:	61fa      	str	r2, [r7, #28]
 800310e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003110:	69b9      	ldr	r1, [r7, #24]
 8003112:	69fa      	ldr	r2, [r7, #28]
 8003114:	e841 2300 	strex	r3, r2, [r1]
 8003118:	617b      	str	r3, [r7, #20]
   return(result);
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1e3      	bne.n	80030e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003120:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003124:	4619      	mov	r1, r3
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fd fc2e 	bl	8000988 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800312c:	e023      	b.n	8003176 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800312e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003136:	2b00      	cmp	r3, #0
 8003138:	d009      	beq.n	800314e <HAL_UART_IRQHandler+0x4ea>
 800313a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800313e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 fae5 	bl	8003716 <UART_Transmit_IT>
    return;
 800314c:	e014      	b.n	8003178 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800314e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00e      	beq.n	8003178 <HAL_UART_IRQHandler+0x514>
 800315a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800315e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003162:	2b00      	cmp	r3, #0
 8003164:	d008      	beq.n	8003178 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 fb25 	bl	80037b6 <UART_EndTransmit_IT>
    return;
 800316c:	e004      	b.n	8003178 <HAL_UART_IRQHandler+0x514>
    return;
 800316e:	bf00      	nop
 8003170:	e002      	b.n	8003178 <HAL_UART_IRQHandler+0x514>
      return;
 8003172:	bf00      	nop
 8003174:	e000      	b.n	8003178 <HAL_UART_IRQHandler+0x514>
      return;
 8003176:	bf00      	nop
  }
}
 8003178:	37e8      	adds	r7, #232	; 0xe8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop

08003180 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b09c      	sub	sp, #112	; 0x70
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d172      	bne.n	80032d2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80031ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ee:	2200      	movs	r2, #0
 80031f0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	330c      	adds	r3, #12
 80031f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031fc:	e853 3f00 	ldrex	r3, [r3]
 8003200:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003208:	66bb      	str	r3, [r7, #104]	; 0x68
 800320a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	330c      	adds	r3, #12
 8003210:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003212:	65ba      	str	r2, [r7, #88]	; 0x58
 8003214:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003216:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003218:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800321a:	e841 2300 	strex	r3, r2, [r1]
 800321e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003220:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1e5      	bne.n	80031f2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	3314      	adds	r3, #20
 800322c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800322e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003230:	e853 3f00 	ldrex	r3, [r3]
 8003234:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003238:	f023 0301 	bic.w	r3, r3, #1
 800323c:	667b      	str	r3, [r7, #100]	; 0x64
 800323e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	3314      	adds	r3, #20
 8003244:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003246:	647a      	str	r2, [r7, #68]	; 0x44
 8003248:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800324c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800324e:	e841 2300 	strex	r3, r2, [r1]
 8003252:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1e5      	bne.n	8003226 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800325a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	3314      	adds	r3, #20
 8003260:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	e853 3f00 	ldrex	r3, [r3]
 8003268:	623b      	str	r3, [r7, #32]
   return(result);
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003270:	663b      	str	r3, [r7, #96]	; 0x60
 8003272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	3314      	adds	r3, #20
 8003278:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800327a:	633a      	str	r2, [r7, #48]	; 0x30
 800327c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003282:	e841 2300 	strex	r3, r2, [r1]
 8003286:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1e5      	bne.n	800325a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800328e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003290:	2220      	movs	r2, #32
 8003292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	2b01      	cmp	r3, #1
 800329c:	d119      	bne.n	80032d2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800329e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	330c      	adds	r3, #12
 80032a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	e853 3f00 	ldrex	r3, [r3]
 80032ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f023 0310 	bic.w	r3, r3, #16
 80032b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	330c      	adds	r3, #12
 80032bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80032be:	61fa      	str	r2, [r7, #28]
 80032c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c2:	69b9      	ldr	r1, [r7, #24]
 80032c4:	69fa      	ldr	r2, [r7, #28]
 80032c6:	e841 2300 	strex	r3, r2, [r1]
 80032ca:	617b      	str	r3, [r7, #20]
   return(result);
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1e5      	bne.n	800329e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d106      	bne.n	80032e8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032de:	4619      	mov	r1, r3
 80032e0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80032e2:	f7fd fb51 	bl	8000988 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80032e6:	e002      	b.n	80032ee <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80032e8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80032ea:	f7ff ff53 	bl	8003194 <HAL_UART_RxCpltCallback>
}
 80032ee:	bf00      	nop
 80032f0:	3770      	adds	r7, #112	; 0x70
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b084      	sub	sp, #16
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003302:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003308:	2b01      	cmp	r3, #1
 800330a:	d108      	bne.n	800331e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003310:	085b      	lsrs	r3, r3, #1
 8003312:	b29b      	uxth	r3, r3
 8003314:	4619      	mov	r1, r3
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f7fd fb36 	bl	8000988 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800331c:	e002      	b.n	8003324 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f7ff ff42 	bl	80031a8 <HAL_UART_RxHalfCpltCallback>
}
 8003324:	bf00      	nop
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003334:	2300      	movs	r3, #0
 8003336:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003348:	2b80      	cmp	r3, #128	; 0x80
 800334a:	bf0c      	ite	eq
 800334c:	2301      	moveq	r3, #1
 800334e:	2300      	movne	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b21      	cmp	r3, #33	; 0x21
 800335e:	d108      	bne.n	8003372 <UART_DMAError+0x46>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d005      	beq.n	8003372 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2200      	movs	r2, #0
 800336a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800336c:	68b8      	ldr	r0, [r7, #8]
 800336e:	f000 f933 	bl	80035d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800337c:	2b40      	cmp	r3, #64	; 0x40
 800337e:	bf0c      	ite	eq
 8003380:	2301      	moveq	r3, #1
 8003382:	2300      	movne	r3, #0
 8003384:	b2db      	uxtb	r3, r3
 8003386:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b22      	cmp	r3, #34	; 0x22
 8003392:	d108      	bne.n	80033a6 <UART_DMAError+0x7a>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d005      	beq.n	80033a6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2200      	movs	r2, #0
 800339e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80033a0:	68b8      	ldr	r0, [r7, #8]
 80033a2:	f000 f941 	bl	8003628 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	f043 0210 	orr.w	r2, r3, #16
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033b2:	68b8      	ldr	r0, [r7, #8]
 80033b4:	f7ff ff02 	bl	80031bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033b8:	bf00      	nop
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b090      	sub	sp, #64	; 0x40
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	603b      	str	r3, [r7, #0]
 80033cc:	4613      	mov	r3, r2
 80033ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033d0:	e050      	b.n	8003474 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d8:	d04c      	beq.n	8003474 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d007      	beq.n	80033f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80033e0:	f7fd fdb8 	bl	8000f54 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d241      	bcs.n	8003474 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	330c      	adds	r3, #12
 80033f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fa:	e853 3f00 	ldrex	r3, [r3]
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003406:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	330c      	adds	r3, #12
 800340e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003410:	637a      	str	r2, [r7, #52]	; 0x34
 8003412:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003414:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003416:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003418:	e841 2300 	strex	r3, r2, [r1]
 800341c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800341e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1e5      	bne.n	80033f0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	3314      	adds	r3, #20
 800342a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	e853 3f00 	ldrex	r3, [r3]
 8003432:	613b      	str	r3, [r7, #16]
   return(result);
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	f023 0301 	bic.w	r3, r3, #1
 800343a:	63bb      	str	r3, [r7, #56]	; 0x38
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3314      	adds	r3, #20
 8003442:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003444:	623a      	str	r2, [r7, #32]
 8003446:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003448:	69f9      	ldr	r1, [r7, #28]
 800344a:	6a3a      	ldr	r2, [r7, #32]
 800344c:	e841 2300 	strex	r3, r2, [r1]
 8003450:	61bb      	str	r3, [r7, #24]
   return(result);
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1e5      	bne.n	8003424 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2220      	movs	r2, #32
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e00f      	b.n	8003494 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	4013      	ands	r3, r2
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	429a      	cmp	r2, r3
 8003482:	bf0c      	ite	eq
 8003484:	2301      	moveq	r3, #1
 8003486:	2300      	movne	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	461a      	mov	r2, r3
 800348c:	79fb      	ldrb	r3, [r7, #7]
 800348e:	429a      	cmp	r2, r3
 8003490:	d09f      	beq.n	80033d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3740      	adds	r7, #64	; 0x40
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b098      	sub	sp, #96	; 0x60
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	4613      	mov	r3, r2
 80034a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	88fa      	ldrh	r2, [r7, #6]
 80034b4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2222      	movs	r2, #34	; 0x22
 80034c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c8:	4a40      	ldr	r2, [pc, #256]	; (80035cc <UART_Start_Receive_DMA+0x130>)
 80034ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d0:	4a3f      	ldr	r2, [pc, #252]	; (80035d0 <UART_Start_Receive_DMA+0x134>)
 80034d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d8:	4a3e      	ldr	r2, [pc, #248]	; (80035d4 <UART_Start_Receive_DMA+0x138>)
 80034da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e0:	2200      	movs	r2, #0
 80034e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80034e4:	f107 0308 	add.w	r3, r7, #8
 80034e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	3304      	adds	r3, #4
 80034f4:	4619      	mov	r1, r3
 80034f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	88fb      	ldrh	r3, [r7, #6]
 80034fc:	f7fd ff1a 	bl	8001334 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003500:	2300      	movs	r3, #0
 8003502:	613b      	str	r3, [r7, #16]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	613b      	str	r3, [r7, #16]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d019      	beq.n	800355a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	330c      	adds	r3, #12
 800352c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003530:	e853 3f00 	ldrex	r3, [r3]
 8003534:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800353c:	65bb      	str	r3, [r7, #88]	; 0x58
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	330c      	adds	r3, #12
 8003544:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003546:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003548:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800354c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800354e:	e841 2300 	strex	r3, r2, [r1]
 8003552:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1e5      	bne.n	8003526 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	3314      	adds	r3, #20
 8003560:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003564:	e853 3f00 	ldrex	r3, [r3]
 8003568:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800356a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356c:	f043 0301 	orr.w	r3, r3, #1
 8003570:	657b      	str	r3, [r7, #84]	; 0x54
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	3314      	adds	r3, #20
 8003578:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800357a:	63ba      	str	r2, [r7, #56]	; 0x38
 800357c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003580:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003582:	e841 2300 	strex	r3, r2, [r1]
 8003586:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1e5      	bne.n	800355a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	3314      	adds	r3, #20
 8003594:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	e853 3f00 	ldrex	r3, [r3]
 800359c:	617b      	str	r3, [r7, #20]
   return(result);
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035a4:	653b      	str	r3, [r7, #80]	; 0x50
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	3314      	adds	r3, #20
 80035ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80035ae:	627a      	str	r2, [r7, #36]	; 0x24
 80035b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b2:	6a39      	ldr	r1, [r7, #32]
 80035b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b6:	e841 2300 	strex	r3, r2, [r1]
 80035ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1e5      	bne.n	800358e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3760      	adds	r7, #96	; 0x60
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	080031d1 	.word	0x080031d1
 80035d0:	080032f7 	.word	0x080032f7
 80035d4:	0800332d 	.word	0x0800332d

080035d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80035d8:	b480      	push	{r7}
 80035da:	b089      	sub	sp, #36	; 0x24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	330c      	adds	r3, #12
 80035e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	e853 3f00 	ldrex	r3, [r3]
 80035ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80035f6:	61fb      	str	r3, [r7, #28]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	330c      	adds	r3, #12
 80035fe:	69fa      	ldr	r2, [r7, #28]
 8003600:	61ba      	str	r2, [r7, #24]
 8003602:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003604:	6979      	ldr	r1, [r7, #20]
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	e841 2300 	strex	r3, r2, [r1]
 800360c:	613b      	str	r3, [r7, #16]
   return(result);
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1e5      	bne.n	80035e0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800361c:	bf00      	nop
 800361e:	3724      	adds	r7, #36	; 0x24
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003628:	b480      	push	{r7}
 800362a:	b095      	sub	sp, #84	; 0x54
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	330c      	adds	r3, #12
 8003636:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800363a:	e853 3f00 	ldrex	r3, [r3]
 800363e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003642:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003646:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	330c      	adds	r3, #12
 800364e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003650:	643a      	str	r2, [r7, #64]	; 0x40
 8003652:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003654:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003656:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003658:	e841 2300 	strex	r3, r2, [r1]
 800365c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800365e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1e5      	bne.n	8003630 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3314      	adds	r3, #20
 800366a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	e853 3f00 	ldrex	r3, [r3]
 8003672:	61fb      	str	r3, [r7, #28]
   return(result);
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	f023 0301 	bic.w	r3, r3, #1
 800367a:	64bb      	str	r3, [r7, #72]	; 0x48
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3314      	adds	r3, #20
 8003682:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003684:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003686:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003688:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800368a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800368c:	e841 2300 	strex	r3, r2, [r1]
 8003690:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1e5      	bne.n	8003664 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369c:	2b01      	cmp	r3, #1
 800369e:	d119      	bne.n	80036d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	330c      	adds	r3, #12
 80036a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	e853 3f00 	ldrex	r3, [r3]
 80036ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f023 0310 	bic.w	r3, r3, #16
 80036b6:	647b      	str	r3, [r7, #68]	; 0x44
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	330c      	adds	r3, #12
 80036be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036c0:	61ba      	str	r2, [r7, #24]
 80036c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c4:	6979      	ldr	r1, [r7, #20]
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	e841 2300 	strex	r3, r2, [r1]
 80036cc:	613b      	str	r3, [r7, #16]
   return(result);
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1e5      	bne.n	80036a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80036e2:	bf00      	nop
 80036e4:	3754      	adds	r7, #84	; 0x54
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b084      	sub	sp, #16
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f7ff fd57 	bl	80031bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800370e:	bf00      	nop
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003716:	b480      	push	{r7}
 8003718:	b085      	sub	sp, #20
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b21      	cmp	r3, #33	; 0x21
 8003728:	d13e      	bne.n	80037a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003732:	d114      	bne.n	800375e <UART_Transmit_IT+0x48>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d110      	bne.n	800375e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	461a      	mov	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003750:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	1c9a      	adds	r2, r3, #2
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	621a      	str	r2, [r3, #32]
 800375c:	e008      	b.n	8003770 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	1c59      	adds	r1, r3, #1
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6211      	str	r1, [r2, #32]
 8003768:	781a      	ldrb	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003774:	b29b      	uxth	r3, r3
 8003776:	3b01      	subs	r3, #1
 8003778:	b29b      	uxth	r3, r3
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	4619      	mov	r1, r3
 800377e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10f      	bne.n	80037a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003792:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037a4:	2300      	movs	r3, #0
 80037a6:	e000      	b.n	80037aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80037a8:	2302      	movs	r3, #2
  }
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b082      	sub	sp, #8
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2220      	movs	r2, #32
 80037d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7ff fcd2 	bl	8003180 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b08c      	sub	sp, #48	; 0x30
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b22      	cmp	r3, #34	; 0x22
 80037f8:	f040 80ab 	bne.w	8003952 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003804:	d117      	bne.n	8003836 <UART_Receive_IT+0x50>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d113      	bne.n	8003836 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800380e:	2300      	movs	r3, #0
 8003810:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003816:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	b29b      	uxth	r3, r3
 8003820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003824:	b29a      	uxth	r2, r3
 8003826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003828:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382e:	1c9a      	adds	r2, r3, #2
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	629a      	str	r2, [r3, #40]	; 0x28
 8003834:	e026      	b.n	8003884 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800383c:	2300      	movs	r3, #0
 800383e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003848:	d007      	beq.n	800385a <UART_Receive_IT+0x74>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10a      	bne.n	8003868 <UART_Receive_IT+0x82>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d106      	bne.n	8003868 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	b2da      	uxtb	r2, r3
 8003862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003864:	701a      	strb	r2, [r3, #0]
 8003866:	e008      	b.n	800387a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	b2db      	uxtb	r3, r3
 8003870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003874:	b2da      	uxtb	r2, r3
 8003876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003878:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003888:	b29b      	uxth	r3, r3
 800388a:	3b01      	subs	r3, #1
 800388c:	b29b      	uxth	r3, r3
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	4619      	mov	r1, r3
 8003892:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003894:	2b00      	cmp	r3, #0
 8003896:	d15a      	bne.n	800394e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0220 	bic.w	r2, r2, #32
 80038a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	695a      	ldr	r2, [r3, #20]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0201 	bic.w	r2, r2, #1
 80038c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2220      	movs	r2, #32
 80038cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d135      	bne.n	8003944 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	330c      	adds	r3, #12
 80038e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	e853 3f00 	ldrex	r3, [r3]
 80038ec:	613b      	str	r3, [r7, #16]
   return(result);
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f023 0310 	bic.w	r3, r3, #16
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	330c      	adds	r3, #12
 80038fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038fe:	623a      	str	r2, [r7, #32]
 8003900:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003902:	69f9      	ldr	r1, [r7, #28]
 8003904:	6a3a      	ldr	r2, [r7, #32]
 8003906:	e841 2300 	strex	r3, r2, [r1]
 800390a:	61bb      	str	r3, [r7, #24]
   return(result);
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1e5      	bne.n	80038de <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0310 	and.w	r3, r3, #16
 800391c:	2b10      	cmp	r3, #16
 800391e:	d10a      	bne.n	8003936 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003920:	2300      	movs	r3, #0
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	60fb      	str	r3, [r7, #12]
 8003934:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800393a:	4619      	mov	r1, r3
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7fd f823 	bl	8000988 <HAL_UARTEx_RxEventCallback>
 8003942:	e002      	b.n	800394a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff fc25 	bl	8003194 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800394a:	2300      	movs	r3, #0
 800394c:	e002      	b.n	8003954 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800394e:	2300      	movs	r3, #0
 8003950:	e000      	b.n	8003954 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003952:	2302      	movs	r3, #2
  }
}
 8003954:	4618      	mov	r0, r3
 8003956:	3730      	adds	r7, #48	; 0x30
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800395c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003960:	b0c0      	sub	sp, #256	; 0x100
 8003962:	af00      	add	r7, sp, #0
 8003964:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003978:	68d9      	ldr	r1, [r3, #12]
 800397a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	ea40 0301 	orr.w	r3, r0, r1
 8003984:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	431a      	orrs	r2, r3
 8003994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	431a      	orrs	r2, r3
 800399c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80039a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80039b4:	f021 010c 	bic.w	r1, r1, #12
 80039b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80039c2:	430b      	orrs	r3, r1
 80039c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d6:	6999      	ldr	r1, [r3, #24]
 80039d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	ea40 0301 	orr.w	r3, r0, r1
 80039e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	4b8f      	ldr	r3, [pc, #572]	; (8003c28 <UART_SetConfig+0x2cc>)
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d005      	beq.n	80039fc <UART_SetConfig+0xa0>
 80039f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	4b8d      	ldr	r3, [pc, #564]	; (8003c2c <UART_SetConfig+0x2d0>)
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d104      	bne.n	8003a06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039fc:	f7fe fb0c 	bl	8002018 <HAL_RCC_GetPCLK2Freq>
 8003a00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003a04:	e003      	b.n	8003a0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a06:	f7fe faf3 	bl	8001ff0 <HAL_RCC_GetPCLK1Freq>
 8003a0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a18:	f040 810c 	bne.w	8003c34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a20:	2200      	movs	r2, #0
 8003a22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a2e:	4622      	mov	r2, r4
 8003a30:	462b      	mov	r3, r5
 8003a32:	1891      	adds	r1, r2, r2
 8003a34:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a36:	415b      	adcs	r3, r3
 8003a38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a3e:	4621      	mov	r1, r4
 8003a40:	eb12 0801 	adds.w	r8, r2, r1
 8003a44:	4629      	mov	r1, r5
 8003a46:	eb43 0901 	adc.w	r9, r3, r1
 8003a4a:	f04f 0200 	mov.w	r2, #0
 8003a4e:	f04f 0300 	mov.w	r3, #0
 8003a52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a5e:	4690      	mov	r8, r2
 8003a60:	4699      	mov	r9, r3
 8003a62:	4623      	mov	r3, r4
 8003a64:	eb18 0303 	adds.w	r3, r8, r3
 8003a68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a6c:	462b      	mov	r3, r5
 8003a6e:	eb49 0303 	adc.w	r3, r9, r3
 8003a72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	18db      	adds	r3, r3, r3
 8003a8e:	653b      	str	r3, [r7, #80]	; 0x50
 8003a90:	4613      	mov	r3, r2
 8003a92:	eb42 0303 	adc.w	r3, r2, r3
 8003a96:	657b      	str	r3, [r7, #84]	; 0x54
 8003a98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003aa0:	f7fc fc06 	bl	80002b0 <__aeabi_uldivmod>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4b61      	ldr	r3, [pc, #388]	; (8003c30 <UART_SetConfig+0x2d4>)
 8003aaa:	fba3 2302 	umull	r2, r3, r3, r2
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	011c      	lsls	r4, r3, #4
 8003ab2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003abc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ac0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ac4:	4642      	mov	r2, r8
 8003ac6:	464b      	mov	r3, r9
 8003ac8:	1891      	adds	r1, r2, r2
 8003aca:	64b9      	str	r1, [r7, #72]	; 0x48
 8003acc:	415b      	adcs	r3, r3
 8003ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ad0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ad4:	4641      	mov	r1, r8
 8003ad6:	eb12 0a01 	adds.w	sl, r2, r1
 8003ada:	4649      	mov	r1, r9
 8003adc:	eb43 0b01 	adc.w	fp, r3, r1
 8003ae0:	f04f 0200 	mov.w	r2, #0
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003aec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003af0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003af4:	4692      	mov	sl, r2
 8003af6:	469b      	mov	fp, r3
 8003af8:	4643      	mov	r3, r8
 8003afa:	eb1a 0303 	adds.w	r3, sl, r3
 8003afe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b02:	464b      	mov	r3, r9
 8003b04:	eb4b 0303 	adc.w	r3, fp, r3
 8003b08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b20:	460b      	mov	r3, r1
 8003b22:	18db      	adds	r3, r3, r3
 8003b24:	643b      	str	r3, [r7, #64]	; 0x40
 8003b26:	4613      	mov	r3, r2
 8003b28:	eb42 0303 	adc.w	r3, r2, r3
 8003b2c:	647b      	str	r3, [r7, #68]	; 0x44
 8003b2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b36:	f7fc fbbb 	bl	80002b0 <__aeabi_uldivmod>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	4611      	mov	r1, r2
 8003b40:	4b3b      	ldr	r3, [pc, #236]	; (8003c30 <UART_SetConfig+0x2d4>)
 8003b42:	fba3 2301 	umull	r2, r3, r3, r1
 8003b46:	095b      	lsrs	r3, r3, #5
 8003b48:	2264      	movs	r2, #100	; 0x64
 8003b4a:	fb02 f303 	mul.w	r3, r2, r3
 8003b4e:	1acb      	subs	r3, r1, r3
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b56:	4b36      	ldr	r3, [pc, #216]	; (8003c30 <UART_SetConfig+0x2d4>)
 8003b58:	fba3 2302 	umull	r2, r3, r3, r2
 8003b5c:	095b      	lsrs	r3, r3, #5
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b64:	441c      	add	r4, r3
 8003b66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b78:	4642      	mov	r2, r8
 8003b7a:	464b      	mov	r3, r9
 8003b7c:	1891      	adds	r1, r2, r2
 8003b7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b80:	415b      	adcs	r3, r3
 8003b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b88:	4641      	mov	r1, r8
 8003b8a:	1851      	adds	r1, r2, r1
 8003b8c:	6339      	str	r1, [r7, #48]	; 0x30
 8003b8e:	4649      	mov	r1, r9
 8003b90:	414b      	adcs	r3, r1
 8003b92:	637b      	str	r3, [r7, #52]	; 0x34
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	f04f 0300 	mov.w	r3, #0
 8003b9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ba0:	4659      	mov	r1, fp
 8003ba2:	00cb      	lsls	r3, r1, #3
 8003ba4:	4651      	mov	r1, sl
 8003ba6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003baa:	4651      	mov	r1, sl
 8003bac:	00ca      	lsls	r2, r1, #3
 8003bae:	4610      	mov	r0, r2
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	4642      	mov	r2, r8
 8003bb6:	189b      	adds	r3, r3, r2
 8003bb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003bbc:	464b      	mov	r3, r9
 8003bbe:	460a      	mov	r2, r1
 8003bc0:	eb42 0303 	adc.w	r3, r2, r3
 8003bc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003bd4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003bd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003bdc:	460b      	mov	r3, r1
 8003bde:	18db      	adds	r3, r3, r3
 8003be0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003be2:	4613      	mov	r3, r2
 8003be4:	eb42 0303 	adc.w	r3, r2, r3
 8003be8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003bf2:	f7fc fb5d 	bl	80002b0 <__aeabi_uldivmod>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	4b0d      	ldr	r3, [pc, #52]	; (8003c30 <UART_SetConfig+0x2d4>)
 8003bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8003c00:	095b      	lsrs	r3, r3, #5
 8003c02:	2164      	movs	r1, #100	; 0x64
 8003c04:	fb01 f303 	mul.w	r3, r1, r3
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	3332      	adds	r3, #50	; 0x32
 8003c0e:	4a08      	ldr	r2, [pc, #32]	; (8003c30 <UART_SetConfig+0x2d4>)
 8003c10:	fba2 2303 	umull	r2, r3, r2, r3
 8003c14:	095b      	lsrs	r3, r3, #5
 8003c16:	f003 0207 	and.w	r2, r3, #7
 8003c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4422      	add	r2, r4
 8003c22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c24:	e105      	b.n	8003e32 <UART_SetConfig+0x4d6>
 8003c26:	bf00      	nop
 8003c28:	40011000 	.word	0x40011000
 8003c2c:	40011400 	.word	0x40011400
 8003c30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c46:	4642      	mov	r2, r8
 8003c48:	464b      	mov	r3, r9
 8003c4a:	1891      	adds	r1, r2, r2
 8003c4c:	6239      	str	r1, [r7, #32]
 8003c4e:	415b      	adcs	r3, r3
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
 8003c52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c56:	4641      	mov	r1, r8
 8003c58:	1854      	adds	r4, r2, r1
 8003c5a:	4649      	mov	r1, r9
 8003c5c:	eb43 0501 	adc.w	r5, r3, r1
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	00eb      	lsls	r3, r5, #3
 8003c6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c6e:	00e2      	lsls	r2, r4, #3
 8003c70:	4614      	mov	r4, r2
 8003c72:	461d      	mov	r5, r3
 8003c74:	4643      	mov	r3, r8
 8003c76:	18e3      	adds	r3, r4, r3
 8003c78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c7c:	464b      	mov	r3, r9
 8003c7e:	eb45 0303 	adc.w	r3, r5, r3
 8003c82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c96:	f04f 0200 	mov.w	r2, #0
 8003c9a:	f04f 0300 	mov.w	r3, #0
 8003c9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ca2:	4629      	mov	r1, r5
 8003ca4:	008b      	lsls	r3, r1, #2
 8003ca6:	4621      	mov	r1, r4
 8003ca8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cac:	4621      	mov	r1, r4
 8003cae:	008a      	lsls	r2, r1, #2
 8003cb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003cb4:	f7fc fafc 	bl	80002b0 <__aeabi_uldivmod>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4b60      	ldr	r3, [pc, #384]	; (8003e40 <UART_SetConfig+0x4e4>)
 8003cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8003cc2:	095b      	lsrs	r3, r3, #5
 8003cc4:	011c      	lsls	r4, r3, #4
 8003cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003cd0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003cd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003cd8:	4642      	mov	r2, r8
 8003cda:	464b      	mov	r3, r9
 8003cdc:	1891      	adds	r1, r2, r2
 8003cde:	61b9      	str	r1, [r7, #24]
 8003ce0:	415b      	adcs	r3, r3
 8003ce2:	61fb      	str	r3, [r7, #28]
 8003ce4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ce8:	4641      	mov	r1, r8
 8003cea:	1851      	adds	r1, r2, r1
 8003cec:	6139      	str	r1, [r7, #16]
 8003cee:	4649      	mov	r1, r9
 8003cf0:	414b      	adcs	r3, r1
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d00:	4659      	mov	r1, fp
 8003d02:	00cb      	lsls	r3, r1, #3
 8003d04:	4651      	mov	r1, sl
 8003d06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d0a:	4651      	mov	r1, sl
 8003d0c:	00ca      	lsls	r2, r1, #3
 8003d0e:	4610      	mov	r0, r2
 8003d10:	4619      	mov	r1, r3
 8003d12:	4603      	mov	r3, r0
 8003d14:	4642      	mov	r2, r8
 8003d16:	189b      	adds	r3, r3, r2
 8003d18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d1c:	464b      	mov	r3, r9
 8003d1e:	460a      	mov	r2, r1
 8003d20:	eb42 0303 	adc.w	r3, r2, r3
 8003d24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d32:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d34:	f04f 0200 	mov.w	r2, #0
 8003d38:	f04f 0300 	mov.w	r3, #0
 8003d3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d40:	4649      	mov	r1, r9
 8003d42:	008b      	lsls	r3, r1, #2
 8003d44:	4641      	mov	r1, r8
 8003d46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d4a:	4641      	mov	r1, r8
 8003d4c:	008a      	lsls	r2, r1, #2
 8003d4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d52:	f7fc faad 	bl	80002b0 <__aeabi_uldivmod>
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	4b39      	ldr	r3, [pc, #228]	; (8003e40 <UART_SetConfig+0x4e4>)
 8003d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d60:	095b      	lsrs	r3, r3, #5
 8003d62:	2164      	movs	r1, #100	; 0x64
 8003d64:	fb01 f303 	mul.w	r3, r1, r3
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	3332      	adds	r3, #50	; 0x32
 8003d6e:	4a34      	ldr	r2, [pc, #208]	; (8003e40 <UART_SetConfig+0x4e4>)
 8003d70:	fba2 2303 	umull	r2, r3, r2, r3
 8003d74:	095b      	lsrs	r3, r3, #5
 8003d76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d7a:	441c      	add	r4, r3
 8003d7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d80:	2200      	movs	r2, #0
 8003d82:	673b      	str	r3, [r7, #112]	; 0x70
 8003d84:	677a      	str	r2, [r7, #116]	; 0x74
 8003d86:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d8a:	4642      	mov	r2, r8
 8003d8c:	464b      	mov	r3, r9
 8003d8e:	1891      	adds	r1, r2, r2
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	415b      	adcs	r3, r3
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d9a:	4641      	mov	r1, r8
 8003d9c:	1851      	adds	r1, r2, r1
 8003d9e:	6039      	str	r1, [r7, #0]
 8003da0:	4649      	mov	r1, r9
 8003da2:	414b      	adcs	r3, r1
 8003da4:	607b      	str	r3, [r7, #4]
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003db2:	4659      	mov	r1, fp
 8003db4:	00cb      	lsls	r3, r1, #3
 8003db6:	4651      	mov	r1, sl
 8003db8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dbc:	4651      	mov	r1, sl
 8003dbe:	00ca      	lsls	r2, r1, #3
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	4642      	mov	r2, r8
 8003dc8:	189b      	adds	r3, r3, r2
 8003dca:	66bb      	str	r3, [r7, #104]	; 0x68
 8003dcc:	464b      	mov	r3, r9
 8003dce:	460a      	mov	r2, r1
 8003dd0:	eb42 0303 	adc.w	r3, r2, r3
 8003dd4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	663b      	str	r3, [r7, #96]	; 0x60
 8003de0:	667a      	str	r2, [r7, #100]	; 0x64
 8003de2:	f04f 0200 	mov.w	r2, #0
 8003de6:	f04f 0300 	mov.w	r3, #0
 8003dea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003dee:	4649      	mov	r1, r9
 8003df0:	008b      	lsls	r3, r1, #2
 8003df2:	4641      	mov	r1, r8
 8003df4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003df8:	4641      	mov	r1, r8
 8003dfa:	008a      	lsls	r2, r1, #2
 8003dfc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003e00:	f7fc fa56 	bl	80002b0 <__aeabi_uldivmod>
 8003e04:	4602      	mov	r2, r0
 8003e06:	460b      	mov	r3, r1
 8003e08:	4b0d      	ldr	r3, [pc, #52]	; (8003e40 <UART_SetConfig+0x4e4>)
 8003e0a:	fba3 1302 	umull	r1, r3, r3, r2
 8003e0e:	095b      	lsrs	r3, r3, #5
 8003e10:	2164      	movs	r1, #100	; 0x64
 8003e12:	fb01 f303 	mul.w	r3, r1, r3
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	3332      	adds	r3, #50	; 0x32
 8003e1c:	4a08      	ldr	r2, [pc, #32]	; (8003e40 <UART_SetConfig+0x4e4>)
 8003e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	f003 020f 	and.w	r2, r3, #15
 8003e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4422      	add	r2, r4
 8003e30:	609a      	str	r2, [r3, #8]
}
 8003e32:	bf00      	nop
 8003e34:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e3e:	bf00      	nop
 8003e40:	51eb851f 	.word	0x51eb851f

08003e44 <__errno>:
 8003e44:	4b01      	ldr	r3, [pc, #4]	; (8003e4c <__errno+0x8>)
 8003e46:	6818      	ldr	r0, [r3, #0]
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	2000004c 	.word	0x2000004c

08003e50 <__libc_init_array>:
 8003e50:	b570      	push	{r4, r5, r6, lr}
 8003e52:	4d0d      	ldr	r5, [pc, #52]	; (8003e88 <__libc_init_array+0x38>)
 8003e54:	4c0d      	ldr	r4, [pc, #52]	; (8003e8c <__libc_init_array+0x3c>)
 8003e56:	1b64      	subs	r4, r4, r5
 8003e58:	10a4      	asrs	r4, r4, #2
 8003e5a:	2600      	movs	r6, #0
 8003e5c:	42a6      	cmp	r6, r4
 8003e5e:	d109      	bne.n	8003e74 <__libc_init_array+0x24>
 8003e60:	4d0b      	ldr	r5, [pc, #44]	; (8003e90 <__libc_init_array+0x40>)
 8003e62:	4c0c      	ldr	r4, [pc, #48]	; (8003e94 <__libc_init_array+0x44>)
 8003e64:	f000 ffae 	bl	8004dc4 <_init>
 8003e68:	1b64      	subs	r4, r4, r5
 8003e6a:	10a4      	asrs	r4, r4, #2
 8003e6c:	2600      	movs	r6, #0
 8003e6e:	42a6      	cmp	r6, r4
 8003e70:	d105      	bne.n	8003e7e <__libc_init_array+0x2e>
 8003e72:	bd70      	pop	{r4, r5, r6, pc}
 8003e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e78:	4798      	blx	r3
 8003e7a:	3601      	adds	r6, #1
 8003e7c:	e7ee      	b.n	8003e5c <__libc_init_array+0xc>
 8003e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e82:	4798      	blx	r3
 8003e84:	3601      	adds	r6, #1
 8003e86:	e7f2      	b.n	8003e6e <__libc_init_array+0x1e>
 8003e88:	08004eb8 	.word	0x08004eb8
 8003e8c:	08004eb8 	.word	0x08004eb8
 8003e90:	08004eb8 	.word	0x08004eb8
 8003e94:	08004ebc 	.word	0x08004ebc

08003e98 <memset>:
 8003e98:	4402      	add	r2, r0
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d100      	bne.n	8003ea2 <memset+0xa>
 8003ea0:	4770      	bx	lr
 8003ea2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ea6:	e7f9      	b.n	8003e9c <memset+0x4>

08003ea8 <iprintf>:
 8003ea8:	b40f      	push	{r0, r1, r2, r3}
 8003eaa:	4b0a      	ldr	r3, [pc, #40]	; (8003ed4 <iprintf+0x2c>)
 8003eac:	b513      	push	{r0, r1, r4, lr}
 8003eae:	681c      	ldr	r4, [r3, #0]
 8003eb0:	b124      	cbz	r4, 8003ebc <iprintf+0x14>
 8003eb2:	69a3      	ldr	r3, [r4, #24]
 8003eb4:	b913      	cbnz	r3, 8003ebc <iprintf+0x14>
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	f000 f866 	bl	8003f88 <__sinit>
 8003ebc:	ab05      	add	r3, sp, #20
 8003ebe:	9a04      	ldr	r2, [sp, #16]
 8003ec0:	68a1      	ldr	r1, [r4, #8]
 8003ec2:	9301      	str	r3, [sp, #4]
 8003ec4:	4620      	mov	r0, r4
 8003ec6:	f000 f9bd 	bl	8004244 <_vfiprintf_r>
 8003eca:	b002      	add	sp, #8
 8003ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ed0:	b004      	add	sp, #16
 8003ed2:	4770      	bx	lr
 8003ed4:	2000004c 	.word	0x2000004c

08003ed8 <std>:
 8003ed8:	2300      	movs	r3, #0
 8003eda:	b510      	push	{r4, lr}
 8003edc:	4604      	mov	r4, r0
 8003ede:	e9c0 3300 	strd	r3, r3, [r0]
 8003ee2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ee6:	6083      	str	r3, [r0, #8]
 8003ee8:	8181      	strh	r1, [r0, #12]
 8003eea:	6643      	str	r3, [r0, #100]	; 0x64
 8003eec:	81c2      	strh	r2, [r0, #14]
 8003eee:	6183      	str	r3, [r0, #24]
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	2208      	movs	r2, #8
 8003ef4:	305c      	adds	r0, #92	; 0x5c
 8003ef6:	f7ff ffcf 	bl	8003e98 <memset>
 8003efa:	4b05      	ldr	r3, [pc, #20]	; (8003f10 <std+0x38>)
 8003efc:	6263      	str	r3, [r4, #36]	; 0x24
 8003efe:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <std+0x3c>)
 8003f00:	62a3      	str	r3, [r4, #40]	; 0x28
 8003f02:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <std+0x40>)
 8003f04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003f06:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <std+0x44>)
 8003f08:	6224      	str	r4, [r4, #32]
 8003f0a:	6323      	str	r3, [r4, #48]	; 0x30
 8003f0c:	bd10      	pop	{r4, pc}
 8003f0e:	bf00      	nop
 8003f10:	080047ed 	.word	0x080047ed
 8003f14:	0800480f 	.word	0x0800480f
 8003f18:	08004847 	.word	0x08004847
 8003f1c:	0800486b 	.word	0x0800486b

08003f20 <_cleanup_r>:
 8003f20:	4901      	ldr	r1, [pc, #4]	; (8003f28 <_cleanup_r+0x8>)
 8003f22:	f000 b8af 	b.w	8004084 <_fwalk_reent>
 8003f26:	bf00      	nop
 8003f28:	08004b45 	.word	0x08004b45

08003f2c <__sfmoreglue>:
 8003f2c:	b570      	push	{r4, r5, r6, lr}
 8003f2e:	2268      	movs	r2, #104	; 0x68
 8003f30:	1e4d      	subs	r5, r1, #1
 8003f32:	4355      	muls	r5, r2
 8003f34:	460e      	mov	r6, r1
 8003f36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003f3a:	f000 f8e5 	bl	8004108 <_malloc_r>
 8003f3e:	4604      	mov	r4, r0
 8003f40:	b140      	cbz	r0, 8003f54 <__sfmoreglue+0x28>
 8003f42:	2100      	movs	r1, #0
 8003f44:	e9c0 1600 	strd	r1, r6, [r0]
 8003f48:	300c      	adds	r0, #12
 8003f4a:	60a0      	str	r0, [r4, #8]
 8003f4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003f50:	f7ff ffa2 	bl	8003e98 <memset>
 8003f54:	4620      	mov	r0, r4
 8003f56:	bd70      	pop	{r4, r5, r6, pc}

08003f58 <__sfp_lock_acquire>:
 8003f58:	4801      	ldr	r0, [pc, #4]	; (8003f60 <__sfp_lock_acquire+0x8>)
 8003f5a:	f000 b8b3 	b.w	80040c4 <__retarget_lock_acquire_recursive>
 8003f5e:	bf00      	nop
 8003f60:	200001dd 	.word	0x200001dd

08003f64 <__sfp_lock_release>:
 8003f64:	4801      	ldr	r0, [pc, #4]	; (8003f6c <__sfp_lock_release+0x8>)
 8003f66:	f000 b8ae 	b.w	80040c6 <__retarget_lock_release_recursive>
 8003f6a:	bf00      	nop
 8003f6c:	200001dd 	.word	0x200001dd

08003f70 <__sinit_lock_acquire>:
 8003f70:	4801      	ldr	r0, [pc, #4]	; (8003f78 <__sinit_lock_acquire+0x8>)
 8003f72:	f000 b8a7 	b.w	80040c4 <__retarget_lock_acquire_recursive>
 8003f76:	bf00      	nop
 8003f78:	200001de 	.word	0x200001de

08003f7c <__sinit_lock_release>:
 8003f7c:	4801      	ldr	r0, [pc, #4]	; (8003f84 <__sinit_lock_release+0x8>)
 8003f7e:	f000 b8a2 	b.w	80040c6 <__retarget_lock_release_recursive>
 8003f82:	bf00      	nop
 8003f84:	200001de 	.word	0x200001de

08003f88 <__sinit>:
 8003f88:	b510      	push	{r4, lr}
 8003f8a:	4604      	mov	r4, r0
 8003f8c:	f7ff fff0 	bl	8003f70 <__sinit_lock_acquire>
 8003f90:	69a3      	ldr	r3, [r4, #24]
 8003f92:	b11b      	cbz	r3, 8003f9c <__sinit+0x14>
 8003f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f98:	f7ff bff0 	b.w	8003f7c <__sinit_lock_release>
 8003f9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003fa0:	6523      	str	r3, [r4, #80]	; 0x50
 8003fa2:	4b13      	ldr	r3, [pc, #76]	; (8003ff0 <__sinit+0x68>)
 8003fa4:	4a13      	ldr	r2, [pc, #76]	; (8003ff4 <__sinit+0x6c>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	62a2      	str	r2, [r4, #40]	; 0x28
 8003faa:	42a3      	cmp	r3, r4
 8003fac:	bf04      	itt	eq
 8003fae:	2301      	moveq	r3, #1
 8003fb0:	61a3      	streq	r3, [r4, #24]
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	f000 f820 	bl	8003ff8 <__sfp>
 8003fb8:	6060      	str	r0, [r4, #4]
 8003fba:	4620      	mov	r0, r4
 8003fbc:	f000 f81c 	bl	8003ff8 <__sfp>
 8003fc0:	60a0      	str	r0, [r4, #8]
 8003fc2:	4620      	mov	r0, r4
 8003fc4:	f000 f818 	bl	8003ff8 <__sfp>
 8003fc8:	2200      	movs	r2, #0
 8003fca:	60e0      	str	r0, [r4, #12]
 8003fcc:	2104      	movs	r1, #4
 8003fce:	6860      	ldr	r0, [r4, #4]
 8003fd0:	f7ff ff82 	bl	8003ed8 <std>
 8003fd4:	68a0      	ldr	r0, [r4, #8]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	2109      	movs	r1, #9
 8003fda:	f7ff ff7d 	bl	8003ed8 <std>
 8003fde:	68e0      	ldr	r0, [r4, #12]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	2112      	movs	r1, #18
 8003fe4:	f7ff ff78 	bl	8003ed8 <std>
 8003fe8:	2301      	movs	r3, #1
 8003fea:	61a3      	str	r3, [r4, #24]
 8003fec:	e7d2      	b.n	8003f94 <__sinit+0xc>
 8003fee:	bf00      	nop
 8003ff0:	08004e18 	.word	0x08004e18
 8003ff4:	08003f21 	.word	0x08003f21

08003ff8 <__sfp>:
 8003ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ffa:	4607      	mov	r7, r0
 8003ffc:	f7ff ffac 	bl	8003f58 <__sfp_lock_acquire>
 8004000:	4b1e      	ldr	r3, [pc, #120]	; (800407c <__sfp+0x84>)
 8004002:	681e      	ldr	r6, [r3, #0]
 8004004:	69b3      	ldr	r3, [r6, #24]
 8004006:	b913      	cbnz	r3, 800400e <__sfp+0x16>
 8004008:	4630      	mov	r0, r6
 800400a:	f7ff ffbd 	bl	8003f88 <__sinit>
 800400e:	3648      	adds	r6, #72	; 0x48
 8004010:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004014:	3b01      	subs	r3, #1
 8004016:	d503      	bpl.n	8004020 <__sfp+0x28>
 8004018:	6833      	ldr	r3, [r6, #0]
 800401a:	b30b      	cbz	r3, 8004060 <__sfp+0x68>
 800401c:	6836      	ldr	r6, [r6, #0]
 800401e:	e7f7      	b.n	8004010 <__sfp+0x18>
 8004020:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004024:	b9d5      	cbnz	r5, 800405c <__sfp+0x64>
 8004026:	4b16      	ldr	r3, [pc, #88]	; (8004080 <__sfp+0x88>)
 8004028:	60e3      	str	r3, [r4, #12]
 800402a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800402e:	6665      	str	r5, [r4, #100]	; 0x64
 8004030:	f000 f847 	bl	80040c2 <__retarget_lock_init_recursive>
 8004034:	f7ff ff96 	bl	8003f64 <__sfp_lock_release>
 8004038:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800403c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004040:	6025      	str	r5, [r4, #0]
 8004042:	61a5      	str	r5, [r4, #24]
 8004044:	2208      	movs	r2, #8
 8004046:	4629      	mov	r1, r5
 8004048:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800404c:	f7ff ff24 	bl	8003e98 <memset>
 8004050:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004054:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004058:	4620      	mov	r0, r4
 800405a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800405c:	3468      	adds	r4, #104	; 0x68
 800405e:	e7d9      	b.n	8004014 <__sfp+0x1c>
 8004060:	2104      	movs	r1, #4
 8004062:	4638      	mov	r0, r7
 8004064:	f7ff ff62 	bl	8003f2c <__sfmoreglue>
 8004068:	4604      	mov	r4, r0
 800406a:	6030      	str	r0, [r6, #0]
 800406c:	2800      	cmp	r0, #0
 800406e:	d1d5      	bne.n	800401c <__sfp+0x24>
 8004070:	f7ff ff78 	bl	8003f64 <__sfp_lock_release>
 8004074:	230c      	movs	r3, #12
 8004076:	603b      	str	r3, [r7, #0]
 8004078:	e7ee      	b.n	8004058 <__sfp+0x60>
 800407a:	bf00      	nop
 800407c:	08004e18 	.word	0x08004e18
 8004080:	ffff0001 	.word	0xffff0001

08004084 <_fwalk_reent>:
 8004084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004088:	4606      	mov	r6, r0
 800408a:	4688      	mov	r8, r1
 800408c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004090:	2700      	movs	r7, #0
 8004092:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004096:	f1b9 0901 	subs.w	r9, r9, #1
 800409a:	d505      	bpl.n	80040a8 <_fwalk_reent+0x24>
 800409c:	6824      	ldr	r4, [r4, #0]
 800409e:	2c00      	cmp	r4, #0
 80040a0:	d1f7      	bne.n	8004092 <_fwalk_reent+0xe>
 80040a2:	4638      	mov	r0, r7
 80040a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040a8:	89ab      	ldrh	r3, [r5, #12]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d907      	bls.n	80040be <_fwalk_reent+0x3a>
 80040ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80040b2:	3301      	adds	r3, #1
 80040b4:	d003      	beq.n	80040be <_fwalk_reent+0x3a>
 80040b6:	4629      	mov	r1, r5
 80040b8:	4630      	mov	r0, r6
 80040ba:	47c0      	blx	r8
 80040bc:	4307      	orrs	r7, r0
 80040be:	3568      	adds	r5, #104	; 0x68
 80040c0:	e7e9      	b.n	8004096 <_fwalk_reent+0x12>

080040c2 <__retarget_lock_init_recursive>:
 80040c2:	4770      	bx	lr

080040c4 <__retarget_lock_acquire_recursive>:
 80040c4:	4770      	bx	lr

080040c6 <__retarget_lock_release_recursive>:
 80040c6:	4770      	bx	lr

080040c8 <sbrk_aligned>:
 80040c8:	b570      	push	{r4, r5, r6, lr}
 80040ca:	4e0e      	ldr	r6, [pc, #56]	; (8004104 <sbrk_aligned+0x3c>)
 80040cc:	460c      	mov	r4, r1
 80040ce:	6831      	ldr	r1, [r6, #0]
 80040d0:	4605      	mov	r5, r0
 80040d2:	b911      	cbnz	r1, 80040da <sbrk_aligned+0x12>
 80040d4:	f000 fb7a 	bl	80047cc <_sbrk_r>
 80040d8:	6030      	str	r0, [r6, #0]
 80040da:	4621      	mov	r1, r4
 80040dc:	4628      	mov	r0, r5
 80040de:	f000 fb75 	bl	80047cc <_sbrk_r>
 80040e2:	1c43      	adds	r3, r0, #1
 80040e4:	d00a      	beq.n	80040fc <sbrk_aligned+0x34>
 80040e6:	1cc4      	adds	r4, r0, #3
 80040e8:	f024 0403 	bic.w	r4, r4, #3
 80040ec:	42a0      	cmp	r0, r4
 80040ee:	d007      	beq.n	8004100 <sbrk_aligned+0x38>
 80040f0:	1a21      	subs	r1, r4, r0
 80040f2:	4628      	mov	r0, r5
 80040f4:	f000 fb6a 	bl	80047cc <_sbrk_r>
 80040f8:	3001      	adds	r0, #1
 80040fa:	d101      	bne.n	8004100 <sbrk_aligned+0x38>
 80040fc:	f04f 34ff 	mov.w	r4, #4294967295
 8004100:	4620      	mov	r0, r4
 8004102:	bd70      	pop	{r4, r5, r6, pc}
 8004104:	200001e4 	.word	0x200001e4

08004108 <_malloc_r>:
 8004108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800410c:	1ccd      	adds	r5, r1, #3
 800410e:	f025 0503 	bic.w	r5, r5, #3
 8004112:	3508      	adds	r5, #8
 8004114:	2d0c      	cmp	r5, #12
 8004116:	bf38      	it	cc
 8004118:	250c      	movcc	r5, #12
 800411a:	2d00      	cmp	r5, #0
 800411c:	4607      	mov	r7, r0
 800411e:	db01      	blt.n	8004124 <_malloc_r+0x1c>
 8004120:	42a9      	cmp	r1, r5
 8004122:	d905      	bls.n	8004130 <_malloc_r+0x28>
 8004124:	230c      	movs	r3, #12
 8004126:	603b      	str	r3, [r7, #0]
 8004128:	2600      	movs	r6, #0
 800412a:	4630      	mov	r0, r6
 800412c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004130:	4e2e      	ldr	r6, [pc, #184]	; (80041ec <_malloc_r+0xe4>)
 8004132:	f000 fdbb 	bl	8004cac <__malloc_lock>
 8004136:	6833      	ldr	r3, [r6, #0]
 8004138:	461c      	mov	r4, r3
 800413a:	bb34      	cbnz	r4, 800418a <_malloc_r+0x82>
 800413c:	4629      	mov	r1, r5
 800413e:	4638      	mov	r0, r7
 8004140:	f7ff ffc2 	bl	80040c8 <sbrk_aligned>
 8004144:	1c43      	adds	r3, r0, #1
 8004146:	4604      	mov	r4, r0
 8004148:	d14d      	bne.n	80041e6 <_malloc_r+0xde>
 800414a:	6834      	ldr	r4, [r6, #0]
 800414c:	4626      	mov	r6, r4
 800414e:	2e00      	cmp	r6, #0
 8004150:	d140      	bne.n	80041d4 <_malloc_r+0xcc>
 8004152:	6823      	ldr	r3, [r4, #0]
 8004154:	4631      	mov	r1, r6
 8004156:	4638      	mov	r0, r7
 8004158:	eb04 0803 	add.w	r8, r4, r3
 800415c:	f000 fb36 	bl	80047cc <_sbrk_r>
 8004160:	4580      	cmp	r8, r0
 8004162:	d13a      	bne.n	80041da <_malloc_r+0xd2>
 8004164:	6821      	ldr	r1, [r4, #0]
 8004166:	3503      	adds	r5, #3
 8004168:	1a6d      	subs	r5, r5, r1
 800416a:	f025 0503 	bic.w	r5, r5, #3
 800416e:	3508      	adds	r5, #8
 8004170:	2d0c      	cmp	r5, #12
 8004172:	bf38      	it	cc
 8004174:	250c      	movcc	r5, #12
 8004176:	4629      	mov	r1, r5
 8004178:	4638      	mov	r0, r7
 800417a:	f7ff ffa5 	bl	80040c8 <sbrk_aligned>
 800417e:	3001      	adds	r0, #1
 8004180:	d02b      	beq.n	80041da <_malloc_r+0xd2>
 8004182:	6823      	ldr	r3, [r4, #0]
 8004184:	442b      	add	r3, r5
 8004186:	6023      	str	r3, [r4, #0]
 8004188:	e00e      	b.n	80041a8 <_malloc_r+0xa0>
 800418a:	6822      	ldr	r2, [r4, #0]
 800418c:	1b52      	subs	r2, r2, r5
 800418e:	d41e      	bmi.n	80041ce <_malloc_r+0xc6>
 8004190:	2a0b      	cmp	r2, #11
 8004192:	d916      	bls.n	80041c2 <_malloc_r+0xba>
 8004194:	1961      	adds	r1, r4, r5
 8004196:	42a3      	cmp	r3, r4
 8004198:	6025      	str	r5, [r4, #0]
 800419a:	bf18      	it	ne
 800419c:	6059      	strne	r1, [r3, #4]
 800419e:	6863      	ldr	r3, [r4, #4]
 80041a0:	bf08      	it	eq
 80041a2:	6031      	streq	r1, [r6, #0]
 80041a4:	5162      	str	r2, [r4, r5]
 80041a6:	604b      	str	r3, [r1, #4]
 80041a8:	4638      	mov	r0, r7
 80041aa:	f104 060b 	add.w	r6, r4, #11
 80041ae:	f000 fd83 	bl	8004cb8 <__malloc_unlock>
 80041b2:	f026 0607 	bic.w	r6, r6, #7
 80041b6:	1d23      	adds	r3, r4, #4
 80041b8:	1af2      	subs	r2, r6, r3
 80041ba:	d0b6      	beq.n	800412a <_malloc_r+0x22>
 80041bc:	1b9b      	subs	r3, r3, r6
 80041be:	50a3      	str	r3, [r4, r2]
 80041c0:	e7b3      	b.n	800412a <_malloc_r+0x22>
 80041c2:	6862      	ldr	r2, [r4, #4]
 80041c4:	42a3      	cmp	r3, r4
 80041c6:	bf0c      	ite	eq
 80041c8:	6032      	streq	r2, [r6, #0]
 80041ca:	605a      	strne	r2, [r3, #4]
 80041cc:	e7ec      	b.n	80041a8 <_malloc_r+0xa0>
 80041ce:	4623      	mov	r3, r4
 80041d0:	6864      	ldr	r4, [r4, #4]
 80041d2:	e7b2      	b.n	800413a <_malloc_r+0x32>
 80041d4:	4634      	mov	r4, r6
 80041d6:	6876      	ldr	r6, [r6, #4]
 80041d8:	e7b9      	b.n	800414e <_malloc_r+0x46>
 80041da:	230c      	movs	r3, #12
 80041dc:	603b      	str	r3, [r7, #0]
 80041de:	4638      	mov	r0, r7
 80041e0:	f000 fd6a 	bl	8004cb8 <__malloc_unlock>
 80041e4:	e7a1      	b.n	800412a <_malloc_r+0x22>
 80041e6:	6025      	str	r5, [r4, #0]
 80041e8:	e7de      	b.n	80041a8 <_malloc_r+0xa0>
 80041ea:	bf00      	nop
 80041ec:	200001e0 	.word	0x200001e0

080041f0 <__sfputc_r>:
 80041f0:	6893      	ldr	r3, [r2, #8]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	b410      	push	{r4}
 80041f8:	6093      	str	r3, [r2, #8]
 80041fa:	da08      	bge.n	800420e <__sfputc_r+0x1e>
 80041fc:	6994      	ldr	r4, [r2, #24]
 80041fe:	42a3      	cmp	r3, r4
 8004200:	db01      	blt.n	8004206 <__sfputc_r+0x16>
 8004202:	290a      	cmp	r1, #10
 8004204:	d103      	bne.n	800420e <__sfputc_r+0x1e>
 8004206:	f85d 4b04 	ldr.w	r4, [sp], #4
 800420a:	f000 bb33 	b.w	8004874 <__swbuf_r>
 800420e:	6813      	ldr	r3, [r2, #0]
 8004210:	1c58      	adds	r0, r3, #1
 8004212:	6010      	str	r0, [r2, #0]
 8004214:	7019      	strb	r1, [r3, #0]
 8004216:	4608      	mov	r0, r1
 8004218:	f85d 4b04 	ldr.w	r4, [sp], #4
 800421c:	4770      	bx	lr

0800421e <__sfputs_r>:
 800421e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004220:	4606      	mov	r6, r0
 8004222:	460f      	mov	r7, r1
 8004224:	4614      	mov	r4, r2
 8004226:	18d5      	adds	r5, r2, r3
 8004228:	42ac      	cmp	r4, r5
 800422a:	d101      	bne.n	8004230 <__sfputs_r+0x12>
 800422c:	2000      	movs	r0, #0
 800422e:	e007      	b.n	8004240 <__sfputs_r+0x22>
 8004230:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004234:	463a      	mov	r2, r7
 8004236:	4630      	mov	r0, r6
 8004238:	f7ff ffda 	bl	80041f0 <__sfputc_r>
 800423c:	1c43      	adds	r3, r0, #1
 800423e:	d1f3      	bne.n	8004228 <__sfputs_r+0xa>
 8004240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004244 <_vfiprintf_r>:
 8004244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004248:	460d      	mov	r5, r1
 800424a:	b09d      	sub	sp, #116	; 0x74
 800424c:	4614      	mov	r4, r2
 800424e:	4698      	mov	r8, r3
 8004250:	4606      	mov	r6, r0
 8004252:	b118      	cbz	r0, 800425c <_vfiprintf_r+0x18>
 8004254:	6983      	ldr	r3, [r0, #24]
 8004256:	b90b      	cbnz	r3, 800425c <_vfiprintf_r+0x18>
 8004258:	f7ff fe96 	bl	8003f88 <__sinit>
 800425c:	4b89      	ldr	r3, [pc, #548]	; (8004484 <_vfiprintf_r+0x240>)
 800425e:	429d      	cmp	r5, r3
 8004260:	d11b      	bne.n	800429a <_vfiprintf_r+0x56>
 8004262:	6875      	ldr	r5, [r6, #4]
 8004264:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004266:	07d9      	lsls	r1, r3, #31
 8004268:	d405      	bmi.n	8004276 <_vfiprintf_r+0x32>
 800426a:	89ab      	ldrh	r3, [r5, #12]
 800426c:	059a      	lsls	r2, r3, #22
 800426e:	d402      	bmi.n	8004276 <_vfiprintf_r+0x32>
 8004270:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004272:	f7ff ff27 	bl	80040c4 <__retarget_lock_acquire_recursive>
 8004276:	89ab      	ldrh	r3, [r5, #12]
 8004278:	071b      	lsls	r3, r3, #28
 800427a:	d501      	bpl.n	8004280 <_vfiprintf_r+0x3c>
 800427c:	692b      	ldr	r3, [r5, #16]
 800427e:	b9eb      	cbnz	r3, 80042bc <_vfiprintf_r+0x78>
 8004280:	4629      	mov	r1, r5
 8004282:	4630      	mov	r0, r6
 8004284:	f000 fb5a 	bl	800493c <__swsetup_r>
 8004288:	b1c0      	cbz	r0, 80042bc <_vfiprintf_r+0x78>
 800428a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800428c:	07dc      	lsls	r4, r3, #31
 800428e:	d50e      	bpl.n	80042ae <_vfiprintf_r+0x6a>
 8004290:	f04f 30ff 	mov.w	r0, #4294967295
 8004294:	b01d      	add	sp, #116	; 0x74
 8004296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800429a:	4b7b      	ldr	r3, [pc, #492]	; (8004488 <_vfiprintf_r+0x244>)
 800429c:	429d      	cmp	r5, r3
 800429e:	d101      	bne.n	80042a4 <_vfiprintf_r+0x60>
 80042a0:	68b5      	ldr	r5, [r6, #8]
 80042a2:	e7df      	b.n	8004264 <_vfiprintf_r+0x20>
 80042a4:	4b79      	ldr	r3, [pc, #484]	; (800448c <_vfiprintf_r+0x248>)
 80042a6:	429d      	cmp	r5, r3
 80042a8:	bf08      	it	eq
 80042aa:	68f5      	ldreq	r5, [r6, #12]
 80042ac:	e7da      	b.n	8004264 <_vfiprintf_r+0x20>
 80042ae:	89ab      	ldrh	r3, [r5, #12]
 80042b0:	0598      	lsls	r0, r3, #22
 80042b2:	d4ed      	bmi.n	8004290 <_vfiprintf_r+0x4c>
 80042b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042b6:	f7ff ff06 	bl	80040c6 <__retarget_lock_release_recursive>
 80042ba:	e7e9      	b.n	8004290 <_vfiprintf_r+0x4c>
 80042bc:	2300      	movs	r3, #0
 80042be:	9309      	str	r3, [sp, #36]	; 0x24
 80042c0:	2320      	movs	r3, #32
 80042c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80042ca:	2330      	movs	r3, #48	; 0x30
 80042cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004490 <_vfiprintf_r+0x24c>
 80042d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042d4:	f04f 0901 	mov.w	r9, #1
 80042d8:	4623      	mov	r3, r4
 80042da:	469a      	mov	sl, r3
 80042dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042e0:	b10a      	cbz	r2, 80042e6 <_vfiprintf_r+0xa2>
 80042e2:	2a25      	cmp	r2, #37	; 0x25
 80042e4:	d1f9      	bne.n	80042da <_vfiprintf_r+0x96>
 80042e6:	ebba 0b04 	subs.w	fp, sl, r4
 80042ea:	d00b      	beq.n	8004304 <_vfiprintf_r+0xc0>
 80042ec:	465b      	mov	r3, fp
 80042ee:	4622      	mov	r2, r4
 80042f0:	4629      	mov	r1, r5
 80042f2:	4630      	mov	r0, r6
 80042f4:	f7ff ff93 	bl	800421e <__sfputs_r>
 80042f8:	3001      	adds	r0, #1
 80042fa:	f000 80aa 	beq.w	8004452 <_vfiprintf_r+0x20e>
 80042fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004300:	445a      	add	r2, fp
 8004302:	9209      	str	r2, [sp, #36]	; 0x24
 8004304:	f89a 3000 	ldrb.w	r3, [sl]
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 80a2 	beq.w	8004452 <_vfiprintf_r+0x20e>
 800430e:	2300      	movs	r3, #0
 8004310:	f04f 32ff 	mov.w	r2, #4294967295
 8004314:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004318:	f10a 0a01 	add.w	sl, sl, #1
 800431c:	9304      	str	r3, [sp, #16]
 800431e:	9307      	str	r3, [sp, #28]
 8004320:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004324:	931a      	str	r3, [sp, #104]	; 0x68
 8004326:	4654      	mov	r4, sl
 8004328:	2205      	movs	r2, #5
 800432a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800432e:	4858      	ldr	r0, [pc, #352]	; (8004490 <_vfiprintf_r+0x24c>)
 8004330:	f7fb ff6e 	bl	8000210 <memchr>
 8004334:	9a04      	ldr	r2, [sp, #16]
 8004336:	b9d8      	cbnz	r0, 8004370 <_vfiprintf_r+0x12c>
 8004338:	06d1      	lsls	r1, r2, #27
 800433a:	bf44      	itt	mi
 800433c:	2320      	movmi	r3, #32
 800433e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004342:	0713      	lsls	r3, r2, #28
 8004344:	bf44      	itt	mi
 8004346:	232b      	movmi	r3, #43	; 0x2b
 8004348:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800434c:	f89a 3000 	ldrb.w	r3, [sl]
 8004350:	2b2a      	cmp	r3, #42	; 0x2a
 8004352:	d015      	beq.n	8004380 <_vfiprintf_r+0x13c>
 8004354:	9a07      	ldr	r2, [sp, #28]
 8004356:	4654      	mov	r4, sl
 8004358:	2000      	movs	r0, #0
 800435a:	f04f 0c0a 	mov.w	ip, #10
 800435e:	4621      	mov	r1, r4
 8004360:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004364:	3b30      	subs	r3, #48	; 0x30
 8004366:	2b09      	cmp	r3, #9
 8004368:	d94e      	bls.n	8004408 <_vfiprintf_r+0x1c4>
 800436a:	b1b0      	cbz	r0, 800439a <_vfiprintf_r+0x156>
 800436c:	9207      	str	r2, [sp, #28]
 800436e:	e014      	b.n	800439a <_vfiprintf_r+0x156>
 8004370:	eba0 0308 	sub.w	r3, r0, r8
 8004374:	fa09 f303 	lsl.w	r3, r9, r3
 8004378:	4313      	orrs	r3, r2
 800437a:	9304      	str	r3, [sp, #16]
 800437c:	46a2      	mov	sl, r4
 800437e:	e7d2      	b.n	8004326 <_vfiprintf_r+0xe2>
 8004380:	9b03      	ldr	r3, [sp, #12]
 8004382:	1d19      	adds	r1, r3, #4
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	9103      	str	r1, [sp, #12]
 8004388:	2b00      	cmp	r3, #0
 800438a:	bfbb      	ittet	lt
 800438c:	425b      	neglt	r3, r3
 800438e:	f042 0202 	orrlt.w	r2, r2, #2
 8004392:	9307      	strge	r3, [sp, #28]
 8004394:	9307      	strlt	r3, [sp, #28]
 8004396:	bfb8      	it	lt
 8004398:	9204      	strlt	r2, [sp, #16]
 800439a:	7823      	ldrb	r3, [r4, #0]
 800439c:	2b2e      	cmp	r3, #46	; 0x2e
 800439e:	d10c      	bne.n	80043ba <_vfiprintf_r+0x176>
 80043a0:	7863      	ldrb	r3, [r4, #1]
 80043a2:	2b2a      	cmp	r3, #42	; 0x2a
 80043a4:	d135      	bne.n	8004412 <_vfiprintf_r+0x1ce>
 80043a6:	9b03      	ldr	r3, [sp, #12]
 80043a8:	1d1a      	adds	r2, r3, #4
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	9203      	str	r2, [sp, #12]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	bfb8      	it	lt
 80043b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80043b6:	3402      	adds	r4, #2
 80043b8:	9305      	str	r3, [sp, #20]
 80043ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80044a0 <_vfiprintf_r+0x25c>
 80043be:	7821      	ldrb	r1, [r4, #0]
 80043c0:	2203      	movs	r2, #3
 80043c2:	4650      	mov	r0, sl
 80043c4:	f7fb ff24 	bl	8000210 <memchr>
 80043c8:	b140      	cbz	r0, 80043dc <_vfiprintf_r+0x198>
 80043ca:	2340      	movs	r3, #64	; 0x40
 80043cc:	eba0 000a 	sub.w	r0, r0, sl
 80043d0:	fa03 f000 	lsl.w	r0, r3, r0
 80043d4:	9b04      	ldr	r3, [sp, #16]
 80043d6:	4303      	orrs	r3, r0
 80043d8:	3401      	adds	r4, #1
 80043da:	9304      	str	r3, [sp, #16]
 80043dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043e0:	482c      	ldr	r0, [pc, #176]	; (8004494 <_vfiprintf_r+0x250>)
 80043e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043e6:	2206      	movs	r2, #6
 80043e8:	f7fb ff12 	bl	8000210 <memchr>
 80043ec:	2800      	cmp	r0, #0
 80043ee:	d03f      	beq.n	8004470 <_vfiprintf_r+0x22c>
 80043f0:	4b29      	ldr	r3, [pc, #164]	; (8004498 <_vfiprintf_r+0x254>)
 80043f2:	bb1b      	cbnz	r3, 800443c <_vfiprintf_r+0x1f8>
 80043f4:	9b03      	ldr	r3, [sp, #12]
 80043f6:	3307      	adds	r3, #7
 80043f8:	f023 0307 	bic.w	r3, r3, #7
 80043fc:	3308      	adds	r3, #8
 80043fe:	9303      	str	r3, [sp, #12]
 8004400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004402:	443b      	add	r3, r7
 8004404:	9309      	str	r3, [sp, #36]	; 0x24
 8004406:	e767      	b.n	80042d8 <_vfiprintf_r+0x94>
 8004408:	fb0c 3202 	mla	r2, ip, r2, r3
 800440c:	460c      	mov	r4, r1
 800440e:	2001      	movs	r0, #1
 8004410:	e7a5      	b.n	800435e <_vfiprintf_r+0x11a>
 8004412:	2300      	movs	r3, #0
 8004414:	3401      	adds	r4, #1
 8004416:	9305      	str	r3, [sp, #20]
 8004418:	4619      	mov	r1, r3
 800441a:	f04f 0c0a 	mov.w	ip, #10
 800441e:	4620      	mov	r0, r4
 8004420:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004424:	3a30      	subs	r2, #48	; 0x30
 8004426:	2a09      	cmp	r2, #9
 8004428:	d903      	bls.n	8004432 <_vfiprintf_r+0x1ee>
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0c5      	beq.n	80043ba <_vfiprintf_r+0x176>
 800442e:	9105      	str	r1, [sp, #20]
 8004430:	e7c3      	b.n	80043ba <_vfiprintf_r+0x176>
 8004432:	fb0c 2101 	mla	r1, ip, r1, r2
 8004436:	4604      	mov	r4, r0
 8004438:	2301      	movs	r3, #1
 800443a:	e7f0      	b.n	800441e <_vfiprintf_r+0x1da>
 800443c:	ab03      	add	r3, sp, #12
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	462a      	mov	r2, r5
 8004442:	4b16      	ldr	r3, [pc, #88]	; (800449c <_vfiprintf_r+0x258>)
 8004444:	a904      	add	r1, sp, #16
 8004446:	4630      	mov	r0, r6
 8004448:	f3af 8000 	nop.w
 800444c:	4607      	mov	r7, r0
 800444e:	1c78      	adds	r0, r7, #1
 8004450:	d1d6      	bne.n	8004400 <_vfiprintf_r+0x1bc>
 8004452:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004454:	07d9      	lsls	r1, r3, #31
 8004456:	d405      	bmi.n	8004464 <_vfiprintf_r+0x220>
 8004458:	89ab      	ldrh	r3, [r5, #12]
 800445a:	059a      	lsls	r2, r3, #22
 800445c:	d402      	bmi.n	8004464 <_vfiprintf_r+0x220>
 800445e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004460:	f7ff fe31 	bl	80040c6 <__retarget_lock_release_recursive>
 8004464:	89ab      	ldrh	r3, [r5, #12]
 8004466:	065b      	lsls	r3, r3, #25
 8004468:	f53f af12 	bmi.w	8004290 <_vfiprintf_r+0x4c>
 800446c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800446e:	e711      	b.n	8004294 <_vfiprintf_r+0x50>
 8004470:	ab03      	add	r3, sp, #12
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	462a      	mov	r2, r5
 8004476:	4b09      	ldr	r3, [pc, #36]	; (800449c <_vfiprintf_r+0x258>)
 8004478:	a904      	add	r1, sp, #16
 800447a:	4630      	mov	r0, r6
 800447c:	f000 f880 	bl	8004580 <_printf_i>
 8004480:	e7e4      	b.n	800444c <_vfiprintf_r+0x208>
 8004482:	bf00      	nop
 8004484:	08004e3c 	.word	0x08004e3c
 8004488:	08004e5c 	.word	0x08004e5c
 800448c:	08004e1c 	.word	0x08004e1c
 8004490:	08004e7c 	.word	0x08004e7c
 8004494:	08004e86 	.word	0x08004e86
 8004498:	00000000 	.word	0x00000000
 800449c:	0800421f 	.word	0x0800421f
 80044a0:	08004e82 	.word	0x08004e82

080044a4 <_printf_common>:
 80044a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044a8:	4616      	mov	r6, r2
 80044aa:	4699      	mov	r9, r3
 80044ac:	688a      	ldr	r2, [r1, #8]
 80044ae:	690b      	ldr	r3, [r1, #16]
 80044b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044b4:	4293      	cmp	r3, r2
 80044b6:	bfb8      	it	lt
 80044b8:	4613      	movlt	r3, r2
 80044ba:	6033      	str	r3, [r6, #0]
 80044bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044c0:	4607      	mov	r7, r0
 80044c2:	460c      	mov	r4, r1
 80044c4:	b10a      	cbz	r2, 80044ca <_printf_common+0x26>
 80044c6:	3301      	adds	r3, #1
 80044c8:	6033      	str	r3, [r6, #0]
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	0699      	lsls	r1, r3, #26
 80044ce:	bf42      	ittt	mi
 80044d0:	6833      	ldrmi	r3, [r6, #0]
 80044d2:	3302      	addmi	r3, #2
 80044d4:	6033      	strmi	r3, [r6, #0]
 80044d6:	6825      	ldr	r5, [r4, #0]
 80044d8:	f015 0506 	ands.w	r5, r5, #6
 80044dc:	d106      	bne.n	80044ec <_printf_common+0x48>
 80044de:	f104 0a19 	add.w	sl, r4, #25
 80044e2:	68e3      	ldr	r3, [r4, #12]
 80044e4:	6832      	ldr	r2, [r6, #0]
 80044e6:	1a9b      	subs	r3, r3, r2
 80044e8:	42ab      	cmp	r3, r5
 80044ea:	dc26      	bgt.n	800453a <_printf_common+0x96>
 80044ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044f0:	1e13      	subs	r3, r2, #0
 80044f2:	6822      	ldr	r2, [r4, #0]
 80044f4:	bf18      	it	ne
 80044f6:	2301      	movne	r3, #1
 80044f8:	0692      	lsls	r2, r2, #26
 80044fa:	d42b      	bmi.n	8004554 <_printf_common+0xb0>
 80044fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004500:	4649      	mov	r1, r9
 8004502:	4638      	mov	r0, r7
 8004504:	47c0      	blx	r8
 8004506:	3001      	adds	r0, #1
 8004508:	d01e      	beq.n	8004548 <_printf_common+0xa4>
 800450a:	6823      	ldr	r3, [r4, #0]
 800450c:	68e5      	ldr	r5, [r4, #12]
 800450e:	6832      	ldr	r2, [r6, #0]
 8004510:	f003 0306 	and.w	r3, r3, #6
 8004514:	2b04      	cmp	r3, #4
 8004516:	bf08      	it	eq
 8004518:	1aad      	subeq	r5, r5, r2
 800451a:	68a3      	ldr	r3, [r4, #8]
 800451c:	6922      	ldr	r2, [r4, #16]
 800451e:	bf0c      	ite	eq
 8004520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004524:	2500      	movne	r5, #0
 8004526:	4293      	cmp	r3, r2
 8004528:	bfc4      	itt	gt
 800452a:	1a9b      	subgt	r3, r3, r2
 800452c:	18ed      	addgt	r5, r5, r3
 800452e:	2600      	movs	r6, #0
 8004530:	341a      	adds	r4, #26
 8004532:	42b5      	cmp	r5, r6
 8004534:	d11a      	bne.n	800456c <_printf_common+0xc8>
 8004536:	2000      	movs	r0, #0
 8004538:	e008      	b.n	800454c <_printf_common+0xa8>
 800453a:	2301      	movs	r3, #1
 800453c:	4652      	mov	r2, sl
 800453e:	4649      	mov	r1, r9
 8004540:	4638      	mov	r0, r7
 8004542:	47c0      	blx	r8
 8004544:	3001      	adds	r0, #1
 8004546:	d103      	bne.n	8004550 <_printf_common+0xac>
 8004548:	f04f 30ff 	mov.w	r0, #4294967295
 800454c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004550:	3501      	adds	r5, #1
 8004552:	e7c6      	b.n	80044e2 <_printf_common+0x3e>
 8004554:	18e1      	adds	r1, r4, r3
 8004556:	1c5a      	adds	r2, r3, #1
 8004558:	2030      	movs	r0, #48	; 0x30
 800455a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800455e:	4422      	add	r2, r4
 8004560:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004564:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004568:	3302      	adds	r3, #2
 800456a:	e7c7      	b.n	80044fc <_printf_common+0x58>
 800456c:	2301      	movs	r3, #1
 800456e:	4622      	mov	r2, r4
 8004570:	4649      	mov	r1, r9
 8004572:	4638      	mov	r0, r7
 8004574:	47c0      	blx	r8
 8004576:	3001      	adds	r0, #1
 8004578:	d0e6      	beq.n	8004548 <_printf_common+0xa4>
 800457a:	3601      	adds	r6, #1
 800457c:	e7d9      	b.n	8004532 <_printf_common+0x8e>
	...

08004580 <_printf_i>:
 8004580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004584:	7e0f      	ldrb	r7, [r1, #24]
 8004586:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004588:	2f78      	cmp	r7, #120	; 0x78
 800458a:	4691      	mov	r9, r2
 800458c:	4680      	mov	r8, r0
 800458e:	460c      	mov	r4, r1
 8004590:	469a      	mov	sl, r3
 8004592:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004596:	d807      	bhi.n	80045a8 <_printf_i+0x28>
 8004598:	2f62      	cmp	r7, #98	; 0x62
 800459a:	d80a      	bhi.n	80045b2 <_printf_i+0x32>
 800459c:	2f00      	cmp	r7, #0
 800459e:	f000 80d8 	beq.w	8004752 <_printf_i+0x1d2>
 80045a2:	2f58      	cmp	r7, #88	; 0x58
 80045a4:	f000 80a3 	beq.w	80046ee <_printf_i+0x16e>
 80045a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045b0:	e03a      	b.n	8004628 <_printf_i+0xa8>
 80045b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045b6:	2b15      	cmp	r3, #21
 80045b8:	d8f6      	bhi.n	80045a8 <_printf_i+0x28>
 80045ba:	a101      	add	r1, pc, #4	; (adr r1, 80045c0 <_printf_i+0x40>)
 80045bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045c0:	08004619 	.word	0x08004619
 80045c4:	0800462d 	.word	0x0800462d
 80045c8:	080045a9 	.word	0x080045a9
 80045cc:	080045a9 	.word	0x080045a9
 80045d0:	080045a9 	.word	0x080045a9
 80045d4:	080045a9 	.word	0x080045a9
 80045d8:	0800462d 	.word	0x0800462d
 80045dc:	080045a9 	.word	0x080045a9
 80045e0:	080045a9 	.word	0x080045a9
 80045e4:	080045a9 	.word	0x080045a9
 80045e8:	080045a9 	.word	0x080045a9
 80045ec:	08004739 	.word	0x08004739
 80045f0:	0800465d 	.word	0x0800465d
 80045f4:	0800471b 	.word	0x0800471b
 80045f8:	080045a9 	.word	0x080045a9
 80045fc:	080045a9 	.word	0x080045a9
 8004600:	0800475b 	.word	0x0800475b
 8004604:	080045a9 	.word	0x080045a9
 8004608:	0800465d 	.word	0x0800465d
 800460c:	080045a9 	.word	0x080045a9
 8004610:	080045a9 	.word	0x080045a9
 8004614:	08004723 	.word	0x08004723
 8004618:	682b      	ldr	r3, [r5, #0]
 800461a:	1d1a      	adds	r2, r3, #4
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	602a      	str	r2, [r5, #0]
 8004620:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004624:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004628:	2301      	movs	r3, #1
 800462a:	e0a3      	b.n	8004774 <_printf_i+0x1f4>
 800462c:	6820      	ldr	r0, [r4, #0]
 800462e:	6829      	ldr	r1, [r5, #0]
 8004630:	0606      	lsls	r6, r0, #24
 8004632:	f101 0304 	add.w	r3, r1, #4
 8004636:	d50a      	bpl.n	800464e <_printf_i+0xce>
 8004638:	680e      	ldr	r6, [r1, #0]
 800463a:	602b      	str	r3, [r5, #0]
 800463c:	2e00      	cmp	r6, #0
 800463e:	da03      	bge.n	8004648 <_printf_i+0xc8>
 8004640:	232d      	movs	r3, #45	; 0x2d
 8004642:	4276      	negs	r6, r6
 8004644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004648:	485e      	ldr	r0, [pc, #376]	; (80047c4 <_printf_i+0x244>)
 800464a:	230a      	movs	r3, #10
 800464c:	e019      	b.n	8004682 <_printf_i+0x102>
 800464e:	680e      	ldr	r6, [r1, #0]
 8004650:	602b      	str	r3, [r5, #0]
 8004652:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004656:	bf18      	it	ne
 8004658:	b236      	sxthne	r6, r6
 800465a:	e7ef      	b.n	800463c <_printf_i+0xbc>
 800465c:	682b      	ldr	r3, [r5, #0]
 800465e:	6820      	ldr	r0, [r4, #0]
 8004660:	1d19      	adds	r1, r3, #4
 8004662:	6029      	str	r1, [r5, #0]
 8004664:	0601      	lsls	r1, r0, #24
 8004666:	d501      	bpl.n	800466c <_printf_i+0xec>
 8004668:	681e      	ldr	r6, [r3, #0]
 800466a:	e002      	b.n	8004672 <_printf_i+0xf2>
 800466c:	0646      	lsls	r6, r0, #25
 800466e:	d5fb      	bpl.n	8004668 <_printf_i+0xe8>
 8004670:	881e      	ldrh	r6, [r3, #0]
 8004672:	4854      	ldr	r0, [pc, #336]	; (80047c4 <_printf_i+0x244>)
 8004674:	2f6f      	cmp	r7, #111	; 0x6f
 8004676:	bf0c      	ite	eq
 8004678:	2308      	moveq	r3, #8
 800467a:	230a      	movne	r3, #10
 800467c:	2100      	movs	r1, #0
 800467e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004682:	6865      	ldr	r5, [r4, #4]
 8004684:	60a5      	str	r5, [r4, #8]
 8004686:	2d00      	cmp	r5, #0
 8004688:	bfa2      	ittt	ge
 800468a:	6821      	ldrge	r1, [r4, #0]
 800468c:	f021 0104 	bicge.w	r1, r1, #4
 8004690:	6021      	strge	r1, [r4, #0]
 8004692:	b90e      	cbnz	r6, 8004698 <_printf_i+0x118>
 8004694:	2d00      	cmp	r5, #0
 8004696:	d04d      	beq.n	8004734 <_printf_i+0x1b4>
 8004698:	4615      	mov	r5, r2
 800469a:	fbb6 f1f3 	udiv	r1, r6, r3
 800469e:	fb03 6711 	mls	r7, r3, r1, r6
 80046a2:	5dc7      	ldrb	r7, [r0, r7]
 80046a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80046a8:	4637      	mov	r7, r6
 80046aa:	42bb      	cmp	r3, r7
 80046ac:	460e      	mov	r6, r1
 80046ae:	d9f4      	bls.n	800469a <_printf_i+0x11a>
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d10b      	bne.n	80046cc <_printf_i+0x14c>
 80046b4:	6823      	ldr	r3, [r4, #0]
 80046b6:	07de      	lsls	r6, r3, #31
 80046b8:	d508      	bpl.n	80046cc <_printf_i+0x14c>
 80046ba:	6923      	ldr	r3, [r4, #16]
 80046bc:	6861      	ldr	r1, [r4, #4]
 80046be:	4299      	cmp	r1, r3
 80046c0:	bfde      	ittt	le
 80046c2:	2330      	movle	r3, #48	; 0x30
 80046c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046cc:	1b52      	subs	r2, r2, r5
 80046ce:	6122      	str	r2, [r4, #16]
 80046d0:	f8cd a000 	str.w	sl, [sp]
 80046d4:	464b      	mov	r3, r9
 80046d6:	aa03      	add	r2, sp, #12
 80046d8:	4621      	mov	r1, r4
 80046da:	4640      	mov	r0, r8
 80046dc:	f7ff fee2 	bl	80044a4 <_printf_common>
 80046e0:	3001      	adds	r0, #1
 80046e2:	d14c      	bne.n	800477e <_printf_i+0x1fe>
 80046e4:	f04f 30ff 	mov.w	r0, #4294967295
 80046e8:	b004      	add	sp, #16
 80046ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046ee:	4835      	ldr	r0, [pc, #212]	; (80047c4 <_printf_i+0x244>)
 80046f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80046f4:	6829      	ldr	r1, [r5, #0]
 80046f6:	6823      	ldr	r3, [r4, #0]
 80046f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80046fc:	6029      	str	r1, [r5, #0]
 80046fe:	061d      	lsls	r5, r3, #24
 8004700:	d514      	bpl.n	800472c <_printf_i+0x1ac>
 8004702:	07df      	lsls	r7, r3, #31
 8004704:	bf44      	itt	mi
 8004706:	f043 0320 	orrmi.w	r3, r3, #32
 800470a:	6023      	strmi	r3, [r4, #0]
 800470c:	b91e      	cbnz	r6, 8004716 <_printf_i+0x196>
 800470e:	6823      	ldr	r3, [r4, #0]
 8004710:	f023 0320 	bic.w	r3, r3, #32
 8004714:	6023      	str	r3, [r4, #0]
 8004716:	2310      	movs	r3, #16
 8004718:	e7b0      	b.n	800467c <_printf_i+0xfc>
 800471a:	6823      	ldr	r3, [r4, #0]
 800471c:	f043 0320 	orr.w	r3, r3, #32
 8004720:	6023      	str	r3, [r4, #0]
 8004722:	2378      	movs	r3, #120	; 0x78
 8004724:	4828      	ldr	r0, [pc, #160]	; (80047c8 <_printf_i+0x248>)
 8004726:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800472a:	e7e3      	b.n	80046f4 <_printf_i+0x174>
 800472c:	0659      	lsls	r1, r3, #25
 800472e:	bf48      	it	mi
 8004730:	b2b6      	uxthmi	r6, r6
 8004732:	e7e6      	b.n	8004702 <_printf_i+0x182>
 8004734:	4615      	mov	r5, r2
 8004736:	e7bb      	b.n	80046b0 <_printf_i+0x130>
 8004738:	682b      	ldr	r3, [r5, #0]
 800473a:	6826      	ldr	r6, [r4, #0]
 800473c:	6961      	ldr	r1, [r4, #20]
 800473e:	1d18      	adds	r0, r3, #4
 8004740:	6028      	str	r0, [r5, #0]
 8004742:	0635      	lsls	r5, r6, #24
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	d501      	bpl.n	800474c <_printf_i+0x1cc>
 8004748:	6019      	str	r1, [r3, #0]
 800474a:	e002      	b.n	8004752 <_printf_i+0x1d2>
 800474c:	0670      	lsls	r0, r6, #25
 800474e:	d5fb      	bpl.n	8004748 <_printf_i+0x1c8>
 8004750:	8019      	strh	r1, [r3, #0]
 8004752:	2300      	movs	r3, #0
 8004754:	6123      	str	r3, [r4, #16]
 8004756:	4615      	mov	r5, r2
 8004758:	e7ba      	b.n	80046d0 <_printf_i+0x150>
 800475a:	682b      	ldr	r3, [r5, #0]
 800475c:	1d1a      	adds	r2, r3, #4
 800475e:	602a      	str	r2, [r5, #0]
 8004760:	681d      	ldr	r5, [r3, #0]
 8004762:	6862      	ldr	r2, [r4, #4]
 8004764:	2100      	movs	r1, #0
 8004766:	4628      	mov	r0, r5
 8004768:	f7fb fd52 	bl	8000210 <memchr>
 800476c:	b108      	cbz	r0, 8004772 <_printf_i+0x1f2>
 800476e:	1b40      	subs	r0, r0, r5
 8004770:	6060      	str	r0, [r4, #4]
 8004772:	6863      	ldr	r3, [r4, #4]
 8004774:	6123      	str	r3, [r4, #16]
 8004776:	2300      	movs	r3, #0
 8004778:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800477c:	e7a8      	b.n	80046d0 <_printf_i+0x150>
 800477e:	6923      	ldr	r3, [r4, #16]
 8004780:	462a      	mov	r2, r5
 8004782:	4649      	mov	r1, r9
 8004784:	4640      	mov	r0, r8
 8004786:	47d0      	blx	sl
 8004788:	3001      	adds	r0, #1
 800478a:	d0ab      	beq.n	80046e4 <_printf_i+0x164>
 800478c:	6823      	ldr	r3, [r4, #0]
 800478e:	079b      	lsls	r3, r3, #30
 8004790:	d413      	bmi.n	80047ba <_printf_i+0x23a>
 8004792:	68e0      	ldr	r0, [r4, #12]
 8004794:	9b03      	ldr	r3, [sp, #12]
 8004796:	4298      	cmp	r0, r3
 8004798:	bfb8      	it	lt
 800479a:	4618      	movlt	r0, r3
 800479c:	e7a4      	b.n	80046e8 <_printf_i+0x168>
 800479e:	2301      	movs	r3, #1
 80047a0:	4632      	mov	r2, r6
 80047a2:	4649      	mov	r1, r9
 80047a4:	4640      	mov	r0, r8
 80047a6:	47d0      	blx	sl
 80047a8:	3001      	adds	r0, #1
 80047aa:	d09b      	beq.n	80046e4 <_printf_i+0x164>
 80047ac:	3501      	adds	r5, #1
 80047ae:	68e3      	ldr	r3, [r4, #12]
 80047b0:	9903      	ldr	r1, [sp, #12]
 80047b2:	1a5b      	subs	r3, r3, r1
 80047b4:	42ab      	cmp	r3, r5
 80047b6:	dcf2      	bgt.n	800479e <_printf_i+0x21e>
 80047b8:	e7eb      	b.n	8004792 <_printf_i+0x212>
 80047ba:	2500      	movs	r5, #0
 80047bc:	f104 0619 	add.w	r6, r4, #25
 80047c0:	e7f5      	b.n	80047ae <_printf_i+0x22e>
 80047c2:	bf00      	nop
 80047c4:	08004e8d 	.word	0x08004e8d
 80047c8:	08004e9e 	.word	0x08004e9e

080047cc <_sbrk_r>:
 80047cc:	b538      	push	{r3, r4, r5, lr}
 80047ce:	4d06      	ldr	r5, [pc, #24]	; (80047e8 <_sbrk_r+0x1c>)
 80047d0:	2300      	movs	r3, #0
 80047d2:	4604      	mov	r4, r0
 80047d4:	4608      	mov	r0, r1
 80047d6:	602b      	str	r3, [r5, #0]
 80047d8:	f7fc fae4 	bl	8000da4 <_sbrk>
 80047dc:	1c43      	adds	r3, r0, #1
 80047de:	d102      	bne.n	80047e6 <_sbrk_r+0x1a>
 80047e0:	682b      	ldr	r3, [r5, #0]
 80047e2:	b103      	cbz	r3, 80047e6 <_sbrk_r+0x1a>
 80047e4:	6023      	str	r3, [r4, #0]
 80047e6:	bd38      	pop	{r3, r4, r5, pc}
 80047e8:	200001e8 	.word	0x200001e8

080047ec <__sread>:
 80047ec:	b510      	push	{r4, lr}
 80047ee:	460c      	mov	r4, r1
 80047f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047f4:	f000 fab2 	bl	8004d5c <_read_r>
 80047f8:	2800      	cmp	r0, #0
 80047fa:	bfab      	itete	ge
 80047fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80047fe:	89a3      	ldrhlt	r3, [r4, #12]
 8004800:	181b      	addge	r3, r3, r0
 8004802:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004806:	bfac      	ite	ge
 8004808:	6563      	strge	r3, [r4, #84]	; 0x54
 800480a:	81a3      	strhlt	r3, [r4, #12]
 800480c:	bd10      	pop	{r4, pc}

0800480e <__swrite>:
 800480e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004812:	461f      	mov	r7, r3
 8004814:	898b      	ldrh	r3, [r1, #12]
 8004816:	05db      	lsls	r3, r3, #23
 8004818:	4605      	mov	r5, r0
 800481a:	460c      	mov	r4, r1
 800481c:	4616      	mov	r6, r2
 800481e:	d505      	bpl.n	800482c <__swrite+0x1e>
 8004820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004824:	2302      	movs	r3, #2
 8004826:	2200      	movs	r2, #0
 8004828:	f000 f9c8 	bl	8004bbc <_lseek_r>
 800482c:	89a3      	ldrh	r3, [r4, #12]
 800482e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004832:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004836:	81a3      	strh	r3, [r4, #12]
 8004838:	4632      	mov	r2, r6
 800483a:	463b      	mov	r3, r7
 800483c:	4628      	mov	r0, r5
 800483e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004842:	f000 b869 	b.w	8004918 <_write_r>

08004846 <__sseek>:
 8004846:	b510      	push	{r4, lr}
 8004848:	460c      	mov	r4, r1
 800484a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800484e:	f000 f9b5 	bl	8004bbc <_lseek_r>
 8004852:	1c43      	adds	r3, r0, #1
 8004854:	89a3      	ldrh	r3, [r4, #12]
 8004856:	bf15      	itete	ne
 8004858:	6560      	strne	r0, [r4, #84]	; 0x54
 800485a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800485e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004862:	81a3      	strheq	r3, [r4, #12]
 8004864:	bf18      	it	ne
 8004866:	81a3      	strhne	r3, [r4, #12]
 8004868:	bd10      	pop	{r4, pc}

0800486a <__sclose>:
 800486a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800486e:	f000 b8d3 	b.w	8004a18 <_close_r>
	...

08004874 <__swbuf_r>:
 8004874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004876:	460e      	mov	r6, r1
 8004878:	4614      	mov	r4, r2
 800487a:	4605      	mov	r5, r0
 800487c:	b118      	cbz	r0, 8004886 <__swbuf_r+0x12>
 800487e:	6983      	ldr	r3, [r0, #24]
 8004880:	b90b      	cbnz	r3, 8004886 <__swbuf_r+0x12>
 8004882:	f7ff fb81 	bl	8003f88 <__sinit>
 8004886:	4b21      	ldr	r3, [pc, #132]	; (800490c <__swbuf_r+0x98>)
 8004888:	429c      	cmp	r4, r3
 800488a:	d12b      	bne.n	80048e4 <__swbuf_r+0x70>
 800488c:	686c      	ldr	r4, [r5, #4]
 800488e:	69a3      	ldr	r3, [r4, #24]
 8004890:	60a3      	str	r3, [r4, #8]
 8004892:	89a3      	ldrh	r3, [r4, #12]
 8004894:	071a      	lsls	r2, r3, #28
 8004896:	d52f      	bpl.n	80048f8 <__swbuf_r+0x84>
 8004898:	6923      	ldr	r3, [r4, #16]
 800489a:	b36b      	cbz	r3, 80048f8 <__swbuf_r+0x84>
 800489c:	6923      	ldr	r3, [r4, #16]
 800489e:	6820      	ldr	r0, [r4, #0]
 80048a0:	1ac0      	subs	r0, r0, r3
 80048a2:	6963      	ldr	r3, [r4, #20]
 80048a4:	b2f6      	uxtb	r6, r6
 80048a6:	4283      	cmp	r3, r0
 80048a8:	4637      	mov	r7, r6
 80048aa:	dc04      	bgt.n	80048b6 <__swbuf_r+0x42>
 80048ac:	4621      	mov	r1, r4
 80048ae:	4628      	mov	r0, r5
 80048b0:	f000 f948 	bl	8004b44 <_fflush_r>
 80048b4:	bb30      	cbnz	r0, 8004904 <__swbuf_r+0x90>
 80048b6:	68a3      	ldr	r3, [r4, #8]
 80048b8:	3b01      	subs	r3, #1
 80048ba:	60a3      	str	r3, [r4, #8]
 80048bc:	6823      	ldr	r3, [r4, #0]
 80048be:	1c5a      	adds	r2, r3, #1
 80048c0:	6022      	str	r2, [r4, #0]
 80048c2:	701e      	strb	r6, [r3, #0]
 80048c4:	6963      	ldr	r3, [r4, #20]
 80048c6:	3001      	adds	r0, #1
 80048c8:	4283      	cmp	r3, r0
 80048ca:	d004      	beq.n	80048d6 <__swbuf_r+0x62>
 80048cc:	89a3      	ldrh	r3, [r4, #12]
 80048ce:	07db      	lsls	r3, r3, #31
 80048d0:	d506      	bpl.n	80048e0 <__swbuf_r+0x6c>
 80048d2:	2e0a      	cmp	r6, #10
 80048d4:	d104      	bne.n	80048e0 <__swbuf_r+0x6c>
 80048d6:	4621      	mov	r1, r4
 80048d8:	4628      	mov	r0, r5
 80048da:	f000 f933 	bl	8004b44 <_fflush_r>
 80048de:	b988      	cbnz	r0, 8004904 <__swbuf_r+0x90>
 80048e0:	4638      	mov	r0, r7
 80048e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048e4:	4b0a      	ldr	r3, [pc, #40]	; (8004910 <__swbuf_r+0x9c>)
 80048e6:	429c      	cmp	r4, r3
 80048e8:	d101      	bne.n	80048ee <__swbuf_r+0x7a>
 80048ea:	68ac      	ldr	r4, [r5, #8]
 80048ec:	e7cf      	b.n	800488e <__swbuf_r+0x1a>
 80048ee:	4b09      	ldr	r3, [pc, #36]	; (8004914 <__swbuf_r+0xa0>)
 80048f0:	429c      	cmp	r4, r3
 80048f2:	bf08      	it	eq
 80048f4:	68ec      	ldreq	r4, [r5, #12]
 80048f6:	e7ca      	b.n	800488e <__swbuf_r+0x1a>
 80048f8:	4621      	mov	r1, r4
 80048fa:	4628      	mov	r0, r5
 80048fc:	f000 f81e 	bl	800493c <__swsetup_r>
 8004900:	2800      	cmp	r0, #0
 8004902:	d0cb      	beq.n	800489c <__swbuf_r+0x28>
 8004904:	f04f 37ff 	mov.w	r7, #4294967295
 8004908:	e7ea      	b.n	80048e0 <__swbuf_r+0x6c>
 800490a:	bf00      	nop
 800490c:	08004e3c 	.word	0x08004e3c
 8004910:	08004e5c 	.word	0x08004e5c
 8004914:	08004e1c 	.word	0x08004e1c

08004918 <_write_r>:
 8004918:	b538      	push	{r3, r4, r5, lr}
 800491a:	4d07      	ldr	r5, [pc, #28]	; (8004938 <_write_r+0x20>)
 800491c:	4604      	mov	r4, r0
 800491e:	4608      	mov	r0, r1
 8004920:	4611      	mov	r1, r2
 8004922:	2200      	movs	r2, #0
 8004924:	602a      	str	r2, [r5, #0]
 8004926:	461a      	mov	r2, r3
 8004928:	f7fc f9eb 	bl	8000d02 <_write>
 800492c:	1c43      	adds	r3, r0, #1
 800492e:	d102      	bne.n	8004936 <_write_r+0x1e>
 8004930:	682b      	ldr	r3, [r5, #0]
 8004932:	b103      	cbz	r3, 8004936 <_write_r+0x1e>
 8004934:	6023      	str	r3, [r4, #0]
 8004936:	bd38      	pop	{r3, r4, r5, pc}
 8004938:	200001e8 	.word	0x200001e8

0800493c <__swsetup_r>:
 800493c:	4b32      	ldr	r3, [pc, #200]	; (8004a08 <__swsetup_r+0xcc>)
 800493e:	b570      	push	{r4, r5, r6, lr}
 8004940:	681d      	ldr	r5, [r3, #0]
 8004942:	4606      	mov	r6, r0
 8004944:	460c      	mov	r4, r1
 8004946:	b125      	cbz	r5, 8004952 <__swsetup_r+0x16>
 8004948:	69ab      	ldr	r3, [r5, #24]
 800494a:	b913      	cbnz	r3, 8004952 <__swsetup_r+0x16>
 800494c:	4628      	mov	r0, r5
 800494e:	f7ff fb1b 	bl	8003f88 <__sinit>
 8004952:	4b2e      	ldr	r3, [pc, #184]	; (8004a0c <__swsetup_r+0xd0>)
 8004954:	429c      	cmp	r4, r3
 8004956:	d10f      	bne.n	8004978 <__swsetup_r+0x3c>
 8004958:	686c      	ldr	r4, [r5, #4]
 800495a:	89a3      	ldrh	r3, [r4, #12]
 800495c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004960:	0719      	lsls	r1, r3, #28
 8004962:	d42c      	bmi.n	80049be <__swsetup_r+0x82>
 8004964:	06dd      	lsls	r5, r3, #27
 8004966:	d411      	bmi.n	800498c <__swsetup_r+0x50>
 8004968:	2309      	movs	r3, #9
 800496a:	6033      	str	r3, [r6, #0]
 800496c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004970:	81a3      	strh	r3, [r4, #12]
 8004972:	f04f 30ff 	mov.w	r0, #4294967295
 8004976:	e03e      	b.n	80049f6 <__swsetup_r+0xba>
 8004978:	4b25      	ldr	r3, [pc, #148]	; (8004a10 <__swsetup_r+0xd4>)
 800497a:	429c      	cmp	r4, r3
 800497c:	d101      	bne.n	8004982 <__swsetup_r+0x46>
 800497e:	68ac      	ldr	r4, [r5, #8]
 8004980:	e7eb      	b.n	800495a <__swsetup_r+0x1e>
 8004982:	4b24      	ldr	r3, [pc, #144]	; (8004a14 <__swsetup_r+0xd8>)
 8004984:	429c      	cmp	r4, r3
 8004986:	bf08      	it	eq
 8004988:	68ec      	ldreq	r4, [r5, #12]
 800498a:	e7e6      	b.n	800495a <__swsetup_r+0x1e>
 800498c:	0758      	lsls	r0, r3, #29
 800498e:	d512      	bpl.n	80049b6 <__swsetup_r+0x7a>
 8004990:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004992:	b141      	cbz	r1, 80049a6 <__swsetup_r+0x6a>
 8004994:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004998:	4299      	cmp	r1, r3
 800499a:	d002      	beq.n	80049a2 <__swsetup_r+0x66>
 800499c:	4630      	mov	r0, r6
 800499e:	f000 f991 	bl	8004cc4 <_free_r>
 80049a2:	2300      	movs	r3, #0
 80049a4:	6363      	str	r3, [r4, #52]	; 0x34
 80049a6:	89a3      	ldrh	r3, [r4, #12]
 80049a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80049ac:	81a3      	strh	r3, [r4, #12]
 80049ae:	2300      	movs	r3, #0
 80049b0:	6063      	str	r3, [r4, #4]
 80049b2:	6923      	ldr	r3, [r4, #16]
 80049b4:	6023      	str	r3, [r4, #0]
 80049b6:	89a3      	ldrh	r3, [r4, #12]
 80049b8:	f043 0308 	orr.w	r3, r3, #8
 80049bc:	81a3      	strh	r3, [r4, #12]
 80049be:	6923      	ldr	r3, [r4, #16]
 80049c0:	b94b      	cbnz	r3, 80049d6 <__swsetup_r+0x9a>
 80049c2:	89a3      	ldrh	r3, [r4, #12]
 80049c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80049c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049cc:	d003      	beq.n	80049d6 <__swsetup_r+0x9a>
 80049ce:	4621      	mov	r1, r4
 80049d0:	4630      	mov	r0, r6
 80049d2:	f000 f92b 	bl	8004c2c <__smakebuf_r>
 80049d6:	89a0      	ldrh	r0, [r4, #12]
 80049d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049dc:	f010 0301 	ands.w	r3, r0, #1
 80049e0:	d00a      	beq.n	80049f8 <__swsetup_r+0xbc>
 80049e2:	2300      	movs	r3, #0
 80049e4:	60a3      	str	r3, [r4, #8]
 80049e6:	6963      	ldr	r3, [r4, #20]
 80049e8:	425b      	negs	r3, r3
 80049ea:	61a3      	str	r3, [r4, #24]
 80049ec:	6923      	ldr	r3, [r4, #16]
 80049ee:	b943      	cbnz	r3, 8004a02 <__swsetup_r+0xc6>
 80049f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80049f4:	d1ba      	bne.n	800496c <__swsetup_r+0x30>
 80049f6:	bd70      	pop	{r4, r5, r6, pc}
 80049f8:	0781      	lsls	r1, r0, #30
 80049fa:	bf58      	it	pl
 80049fc:	6963      	ldrpl	r3, [r4, #20]
 80049fe:	60a3      	str	r3, [r4, #8]
 8004a00:	e7f4      	b.n	80049ec <__swsetup_r+0xb0>
 8004a02:	2000      	movs	r0, #0
 8004a04:	e7f7      	b.n	80049f6 <__swsetup_r+0xba>
 8004a06:	bf00      	nop
 8004a08:	2000004c 	.word	0x2000004c
 8004a0c:	08004e3c 	.word	0x08004e3c
 8004a10:	08004e5c 	.word	0x08004e5c
 8004a14:	08004e1c 	.word	0x08004e1c

08004a18 <_close_r>:
 8004a18:	b538      	push	{r3, r4, r5, lr}
 8004a1a:	4d06      	ldr	r5, [pc, #24]	; (8004a34 <_close_r+0x1c>)
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	4604      	mov	r4, r0
 8004a20:	4608      	mov	r0, r1
 8004a22:	602b      	str	r3, [r5, #0]
 8004a24:	f7fc f989 	bl	8000d3a <_close>
 8004a28:	1c43      	adds	r3, r0, #1
 8004a2a:	d102      	bne.n	8004a32 <_close_r+0x1a>
 8004a2c:	682b      	ldr	r3, [r5, #0]
 8004a2e:	b103      	cbz	r3, 8004a32 <_close_r+0x1a>
 8004a30:	6023      	str	r3, [r4, #0]
 8004a32:	bd38      	pop	{r3, r4, r5, pc}
 8004a34:	200001e8 	.word	0x200001e8

08004a38 <__sflush_r>:
 8004a38:	898a      	ldrh	r2, [r1, #12]
 8004a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a3e:	4605      	mov	r5, r0
 8004a40:	0710      	lsls	r0, r2, #28
 8004a42:	460c      	mov	r4, r1
 8004a44:	d458      	bmi.n	8004af8 <__sflush_r+0xc0>
 8004a46:	684b      	ldr	r3, [r1, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	dc05      	bgt.n	8004a58 <__sflush_r+0x20>
 8004a4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	dc02      	bgt.n	8004a58 <__sflush_r+0x20>
 8004a52:	2000      	movs	r0, #0
 8004a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a5a:	2e00      	cmp	r6, #0
 8004a5c:	d0f9      	beq.n	8004a52 <__sflush_r+0x1a>
 8004a5e:	2300      	movs	r3, #0
 8004a60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a64:	682f      	ldr	r7, [r5, #0]
 8004a66:	602b      	str	r3, [r5, #0]
 8004a68:	d032      	beq.n	8004ad0 <__sflush_r+0x98>
 8004a6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a6c:	89a3      	ldrh	r3, [r4, #12]
 8004a6e:	075a      	lsls	r2, r3, #29
 8004a70:	d505      	bpl.n	8004a7e <__sflush_r+0x46>
 8004a72:	6863      	ldr	r3, [r4, #4]
 8004a74:	1ac0      	subs	r0, r0, r3
 8004a76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a78:	b10b      	cbz	r3, 8004a7e <__sflush_r+0x46>
 8004a7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a7c:	1ac0      	subs	r0, r0, r3
 8004a7e:	2300      	movs	r3, #0
 8004a80:	4602      	mov	r2, r0
 8004a82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a84:	6a21      	ldr	r1, [r4, #32]
 8004a86:	4628      	mov	r0, r5
 8004a88:	47b0      	blx	r6
 8004a8a:	1c43      	adds	r3, r0, #1
 8004a8c:	89a3      	ldrh	r3, [r4, #12]
 8004a8e:	d106      	bne.n	8004a9e <__sflush_r+0x66>
 8004a90:	6829      	ldr	r1, [r5, #0]
 8004a92:	291d      	cmp	r1, #29
 8004a94:	d82c      	bhi.n	8004af0 <__sflush_r+0xb8>
 8004a96:	4a2a      	ldr	r2, [pc, #168]	; (8004b40 <__sflush_r+0x108>)
 8004a98:	40ca      	lsrs	r2, r1
 8004a9a:	07d6      	lsls	r6, r2, #31
 8004a9c:	d528      	bpl.n	8004af0 <__sflush_r+0xb8>
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	6062      	str	r2, [r4, #4]
 8004aa2:	04d9      	lsls	r1, r3, #19
 8004aa4:	6922      	ldr	r2, [r4, #16]
 8004aa6:	6022      	str	r2, [r4, #0]
 8004aa8:	d504      	bpl.n	8004ab4 <__sflush_r+0x7c>
 8004aaa:	1c42      	adds	r2, r0, #1
 8004aac:	d101      	bne.n	8004ab2 <__sflush_r+0x7a>
 8004aae:	682b      	ldr	r3, [r5, #0]
 8004ab0:	b903      	cbnz	r3, 8004ab4 <__sflush_r+0x7c>
 8004ab2:	6560      	str	r0, [r4, #84]	; 0x54
 8004ab4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ab6:	602f      	str	r7, [r5, #0]
 8004ab8:	2900      	cmp	r1, #0
 8004aba:	d0ca      	beq.n	8004a52 <__sflush_r+0x1a>
 8004abc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ac0:	4299      	cmp	r1, r3
 8004ac2:	d002      	beq.n	8004aca <__sflush_r+0x92>
 8004ac4:	4628      	mov	r0, r5
 8004ac6:	f000 f8fd 	bl	8004cc4 <_free_r>
 8004aca:	2000      	movs	r0, #0
 8004acc:	6360      	str	r0, [r4, #52]	; 0x34
 8004ace:	e7c1      	b.n	8004a54 <__sflush_r+0x1c>
 8004ad0:	6a21      	ldr	r1, [r4, #32]
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	47b0      	blx	r6
 8004ad8:	1c41      	adds	r1, r0, #1
 8004ada:	d1c7      	bne.n	8004a6c <__sflush_r+0x34>
 8004adc:	682b      	ldr	r3, [r5, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0c4      	beq.n	8004a6c <__sflush_r+0x34>
 8004ae2:	2b1d      	cmp	r3, #29
 8004ae4:	d001      	beq.n	8004aea <__sflush_r+0xb2>
 8004ae6:	2b16      	cmp	r3, #22
 8004ae8:	d101      	bne.n	8004aee <__sflush_r+0xb6>
 8004aea:	602f      	str	r7, [r5, #0]
 8004aec:	e7b1      	b.n	8004a52 <__sflush_r+0x1a>
 8004aee:	89a3      	ldrh	r3, [r4, #12]
 8004af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004af4:	81a3      	strh	r3, [r4, #12]
 8004af6:	e7ad      	b.n	8004a54 <__sflush_r+0x1c>
 8004af8:	690f      	ldr	r7, [r1, #16]
 8004afa:	2f00      	cmp	r7, #0
 8004afc:	d0a9      	beq.n	8004a52 <__sflush_r+0x1a>
 8004afe:	0793      	lsls	r3, r2, #30
 8004b00:	680e      	ldr	r6, [r1, #0]
 8004b02:	bf08      	it	eq
 8004b04:	694b      	ldreq	r3, [r1, #20]
 8004b06:	600f      	str	r7, [r1, #0]
 8004b08:	bf18      	it	ne
 8004b0a:	2300      	movne	r3, #0
 8004b0c:	eba6 0807 	sub.w	r8, r6, r7
 8004b10:	608b      	str	r3, [r1, #8]
 8004b12:	f1b8 0f00 	cmp.w	r8, #0
 8004b16:	dd9c      	ble.n	8004a52 <__sflush_r+0x1a>
 8004b18:	6a21      	ldr	r1, [r4, #32]
 8004b1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b1c:	4643      	mov	r3, r8
 8004b1e:	463a      	mov	r2, r7
 8004b20:	4628      	mov	r0, r5
 8004b22:	47b0      	blx	r6
 8004b24:	2800      	cmp	r0, #0
 8004b26:	dc06      	bgt.n	8004b36 <__sflush_r+0xfe>
 8004b28:	89a3      	ldrh	r3, [r4, #12]
 8004b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b2e:	81a3      	strh	r3, [r4, #12]
 8004b30:	f04f 30ff 	mov.w	r0, #4294967295
 8004b34:	e78e      	b.n	8004a54 <__sflush_r+0x1c>
 8004b36:	4407      	add	r7, r0
 8004b38:	eba8 0800 	sub.w	r8, r8, r0
 8004b3c:	e7e9      	b.n	8004b12 <__sflush_r+0xda>
 8004b3e:	bf00      	nop
 8004b40:	20400001 	.word	0x20400001

08004b44 <_fflush_r>:
 8004b44:	b538      	push	{r3, r4, r5, lr}
 8004b46:	690b      	ldr	r3, [r1, #16]
 8004b48:	4605      	mov	r5, r0
 8004b4a:	460c      	mov	r4, r1
 8004b4c:	b913      	cbnz	r3, 8004b54 <_fflush_r+0x10>
 8004b4e:	2500      	movs	r5, #0
 8004b50:	4628      	mov	r0, r5
 8004b52:	bd38      	pop	{r3, r4, r5, pc}
 8004b54:	b118      	cbz	r0, 8004b5e <_fflush_r+0x1a>
 8004b56:	6983      	ldr	r3, [r0, #24]
 8004b58:	b90b      	cbnz	r3, 8004b5e <_fflush_r+0x1a>
 8004b5a:	f7ff fa15 	bl	8003f88 <__sinit>
 8004b5e:	4b14      	ldr	r3, [pc, #80]	; (8004bb0 <_fflush_r+0x6c>)
 8004b60:	429c      	cmp	r4, r3
 8004b62:	d11b      	bne.n	8004b9c <_fflush_r+0x58>
 8004b64:	686c      	ldr	r4, [r5, #4]
 8004b66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d0ef      	beq.n	8004b4e <_fflush_r+0xa>
 8004b6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b70:	07d0      	lsls	r0, r2, #31
 8004b72:	d404      	bmi.n	8004b7e <_fflush_r+0x3a>
 8004b74:	0599      	lsls	r1, r3, #22
 8004b76:	d402      	bmi.n	8004b7e <_fflush_r+0x3a>
 8004b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b7a:	f7ff faa3 	bl	80040c4 <__retarget_lock_acquire_recursive>
 8004b7e:	4628      	mov	r0, r5
 8004b80:	4621      	mov	r1, r4
 8004b82:	f7ff ff59 	bl	8004a38 <__sflush_r>
 8004b86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b88:	07da      	lsls	r2, r3, #31
 8004b8a:	4605      	mov	r5, r0
 8004b8c:	d4e0      	bmi.n	8004b50 <_fflush_r+0xc>
 8004b8e:	89a3      	ldrh	r3, [r4, #12]
 8004b90:	059b      	lsls	r3, r3, #22
 8004b92:	d4dd      	bmi.n	8004b50 <_fflush_r+0xc>
 8004b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b96:	f7ff fa96 	bl	80040c6 <__retarget_lock_release_recursive>
 8004b9a:	e7d9      	b.n	8004b50 <_fflush_r+0xc>
 8004b9c:	4b05      	ldr	r3, [pc, #20]	; (8004bb4 <_fflush_r+0x70>)
 8004b9e:	429c      	cmp	r4, r3
 8004ba0:	d101      	bne.n	8004ba6 <_fflush_r+0x62>
 8004ba2:	68ac      	ldr	r4, [r5, #8]
 8004ba4:	e7df      	b.n	8004b66 <_fflush_r+0x22>
 8004ba6:	4b04      	ldr	r3, [pc, #16]	; (8004bb8 <_fflush_r+0x74>)
 8004ba8:	429c      	cmp	r4, r3
 8004baa:	bf08      	it	eq
 8004bac:	68ec      	ldreq	r4, [r5, #12]
 8004bae:	e7da      	b.n	8004b66 <_fflush_r+0x22>
 8004bb0:	08004e3c 	.word	0x08004e3c
 8004bb4:	08004e5c 	.word	0x08004e5c
 8004bb8:	08004e1c 	.word	0x08004e1c

08004bbc <_lseek_r>:
 8004bbc:	b538      	push	{r3, r4, r5, lr}
 8004bbe:	4d07      	ldr	r5, [pc, #28]	; (8004bdc <_lseek_r+0x20>)
 8004bc0:	4604      	mov	r4, r0
 8004bc2:	4608      	mov	r0, r1
 8004bc4:	4611      	mov	r1, r2
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	602a      	str	r2, [r5, #0]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	f7fc f8dc 	bl	8000d88 <_lseek>
 8004bd0:	1c43      	adds	r3, r0, #1
 8004bd2:	d102      	bne.n	8004bda <_lseek_r+0x1e>
 8004bd4:	682b      	ldr	r3, [r5, #0]
 8004bd6:	b103      	cbz	r3, 8004bda <_lseek_r+0x1e>
 8004bd8:	6023      	str	r3, [r4, #0]
 8004bda:	bd38      	pop	{r3, r4, r5, pc}
 8004bdc:	200001e8 	.word	0x200001e8

08004be0 <__swhatbuf_r>:
 8004be0:	b570      	push	{r4, r5, r6, lr}
 8004be2:	460e      	mov	r6, r1
 8004be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004be8:	2900      	cmp	r1, #0
 8004bea:	b096      	sub	sp, #88	; 0x58
 8004bec:	4614      	mov	r4, r2
 8004bee:	461d      	mov	r5, r3
 8004bf0:	da08      	bge.n	8004c04 <__swhatbuf_r+0x24>
 8004bf2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	602a      	str	r2, [r5, #0]
 8004bfa:	061a      	lsls	r2, r3, #24
 8004bfc:	d410      	bmi.n	8004c20 <__swhatbuf_r+0x40>
 8004bfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c02:	e00e      	b.n	8004c22 <__swhatbuf_r+0x42>
 8004c04:	466a      	mov	r2, sp
 8004c06:	f000 f8bb 	bl	8004d80 <_fstat_r>
 8004c0a:	2800      	cmp	r0, #0
 8004c0c:	dbf1      	blt.n	8004bf2 <__swhatbuf_r+0x12>
 8004c0e:	9a01      	ldr	r2, [sp, #4]
 8004c10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c18:	425a      	negs	r2, r3
 8004c1a:	415a      	adcs	r2, r3
 8004c1c:	602a      	str	r2, [r5, #0]
 8004c1e:	e7ee      	b.n	8004bfe <__swhatbuf_r+0x1e>
 8004c20:	2340      	movs	r3, #64	; 0x40
 8004c22:	2000      	movs	r0, #0
 8004c24:	6023      	str	r3, [r4, #0]
 8004c26:	b016      	add	sp, #88	; 0x58
 8004c28:	bd70      	pop	{r4, r5, r6, pc}
	...

08004c2c <__smakebuf_r>:
 8004c2c:	898b      	ldrh	r3, [r1, #12]
 8004c2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c30:	079d      	lsls	r5, r3, #30
 8004c32:	4606      	mov	r6, r0
 8004c34:	460c      	mov	r4, r1
 8004c36:	d507      	bpl.n	8004c48 <__smakebuf_r+0x1c>
 8004c38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c3c:	6023      	str	r3, [r4, #0]
 8004c3e:	6123      	str	r3, [r4, #16]
 8004c40:	2301      	movs	r3, #1
 8004c42:	6163      	str	r3, [r4, #20]
 8004c44:	b002      	add	sp, #8
 8004c46:	bd70      	pop	{r4, r5, r6, pc}
 8004c48:	ab01      	add	r3, sp, #4
 8004c4a:	466a      	mov	r2, sp
 8004c4c:	f7ff ffc8 	bl	8004be0 <__swhatbuf_r>
 8004c50:	9900      	ldr	r1, [sp, #0]
 8004c52:	4605      	mov	r5, r0
 8004c54:	4630      	mov	r0, r6
 8004c56:	f7ff fa57 	bl	8004108 <_malloc_r>
 8004c5a:	b948      	cbnz	r0, 8004c70 <__smakebuf_r+0x44>
 8004c5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c60:	059a      	lsls	r2, r3, #22
 8004c62:	d4ef      	bmi.n	8004c44 <__smakebuf_r+0x18>
 8004c64:	f023 0303 	bic.w	r3, r3, #3
 8004c68:	f043 0302 	orr.w	r3, r3, #2
 8004c6c:	81a3      	strh	r3, [r4, #12]
 8004c6e:	e7e3      	b.n	8004c38 <__smakebuf_r+0xc>
 8004c70:	4b0d      	ldr	r3, [pc, #52]	; (8004ca8 <__smakebuf_r+0x7c>)
 8004c72:	62b3      	str	r3, [r6, #40]	; 0x28
 8004c74:	89a3      	ldrh	r3, [r4, #12]
 8004c76:	6020      	str	r0, [r4, #0]
 8004c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c7c:	81a3      	strh	r3, [r4, #12]
 8004c7e:	9b00      	ldr	r3, [sp, #0]
 8004c80:	6163      	str	r3, [r4, #20]
 8004c82:	9b01      	ldr	r3, [sp, #4]
 8004c84:	6120      	str	r0, [r4, #16]
 8004c86:	b15b      	cbz	r3, 8004ca0 <__smakebuf_r+0x74>
 8004c88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c8c:	4630      	mov	r0, r6
 8004c8e:	f000 f889 	bl	8004da4 <_isatty_r>
 8004c92:	b128      	cbz	r0, 8004ca0 <__smakebuf_r+0x74>
 8004c94:	89a3      	ldrh	r3, [r4, #12]
 8004c96:	f023 0303 	bic.w	r3, r3, #3
 8004c9a:	f043 0301 	orr.w	r3, r3, #1
 8004c9e:	81a3      	strh	r3, [r4, #12]
 8004ca0:	89a0      	ldrh	r0, [r4, #12]
 8004ca2:	4305      	orrs	r5, r0
 8004ca4:	81a5      	strh	r5, [r4, #12]
 8004ca6:	e7cd      	b.n	8004c44 <__smakebuf_r+0x18>
 8004ca8:	08003f21 	.word	0x08003f21

08004cac <__malloc_lock>:
 8004cac:	4801      	ldr	r0, [pc, #4]	; (8004cb4 <__malloc_lock+0x8>)
 8004cae:	f7ff ba09 	b.w	80040c4 <__retarget_lock_acquire_recursive>
 8004cb2:	bf00      	nop
 8004cb4:	200001dc 	.word	0x200001dc

08004cb8 <__malloc_unlock>:
 8004cb8:	4801      	ldr	r0, [pc, #4]	; (8004cc0 <__malloc_unlock+0x8>)
 8004cba:	f7ff ba04 	b.w	80040c6 <__retarget_lock_release_recursive>
 8004cbe:	bf00      	nop
 8004cc0:	200001dc 	.word	0x200001dc

08004cc4 <_free_r>:
 8004cc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cc6:	2900      	cmp	r1, #0
 8004cc8:	d044      	beq.n	8004d54 <_free_r+0x90>
 8004cca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cce:	9001      	str	r0, [sp, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f1a1 0404 	sub.w	r4, r1, #4
 8004cd6:	bfb8      	it	lt
 8004cd8:	18e4      	addlt	r4, r4, r3
 8004cda:	f7ff ffe7 	bl	8004cac <__malloc_lock>
 8004cde:	4a1e      	ldr	r2, [pc, #120]	; (8004d58 <_free_r+0x94>)
 8004ce0:	9801      	ldr	r0, [sp, #4]
 8004ce2:	6813      	ldr	r3, [r2, #0]
 8004ce4:	b933      	cbnz	r3, 8004cf4 <_free_r+0x30>
 8004ce6:	6063      	str	r3, [r4, #4]
 8004ce8:	6014      	str	r4, [r2, #0]
 8004cea:	b003      	add	sp, #12
 8004cec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004cf0:	f7ff bfe2 	b.w	8004cb8 <__malloc_unlock>
 8004cf4:	42a3      	cmp	r3, r4
 8004cf6:	d908      	bls.n	8004d0a <_free_r+0x46>
 8004cf8:	6825      	ldr	r5, [r4, #0]
 8004cfa:	1961      	adds	r1, r4, r5
 8004cfc:	428b      	cmp	r3, r1
 8004cfe:	bf01      	itttt	eq
 8004d00:	6819      	ldreq	r1, [r3, #0]
 8004d02:	685b      	ldreq	r3, [r3, #4]
 8004d04:	1949      	addeq	r1, r1, r5
 8004d06:	6021      	streq	r1, [r4, #0]
 8004d08:	e7ed      	b.n	8004ce6 <_free_r+0x22>
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	b10b      	cbz	r3, 8004d14 <_free_r+0x50>
 8004d10:	42a3      	cmp	r3, r4
 8004d12:	d9fa      	bls.n	8004d0a <_free_r+0x46>
 8004d14:	6811      	ldr	r1, [r2, #0]
 8004d16:	1855      	adds	r5, r2, r1
 8004d18:	42a5      	cmp	r5, r4
 8004d1a:	d10b      	bne.n	8004d34 <_free_r+0x70>
 8004d1c:	6824      	ldr	r4, [r4, #0]
 8004d1e:	4421      	add	r1, r4
 8004d20:	1854      	adds	r4, r2, r1
 8004d22:	42a3      	cmp	r3, r4
 8004d24:	6011      	str	r1, [r2, #0]
 8004d26:	d1e0      	bne.n	8004cea <_free_r+0x26>
 8004d28:	681c      	ldr	r4, [r3, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	6053      	str	r3, [r2, #4]
 8004d2e:	4421      	add	r1, r4
 8004d30:	6011      	str	r1, [r2, #0]
 8004d32:	e7da      	b.n	8004cea <_free_r+0x26>
 8004d34:	d902      	bls.n	8004d3c <_free_r+0x78>
 8004d36:	230c      	movs	r3, #12
 8004d38:	6003      	str	r3, [r0, #0]
 8004d3a:	e7d6      	b.n	8004cea <_free_r+0x26>
 8004d3c:	6825      	ldr	r5, [r4, #0]
 8004d3e:	1961      	adds	r1, r4, r5
 8004d40:	428b      	cmp	r3, r1
 8004d42:	bf04      	itt	eq
 8004d44:	6819      	ldreq	r1, [r3, #0]
 8004d46:	685b      	ldreq	r3, [r3, #4]
 8004d48:	6063      	str	r3, [r4, #4]
 8004d4a:	bf04      	itt	eq
 8004d4c:	1949      	addeq	r1, r1, r5
 8004d4e:	6021      	streq	r1, [r4, #0]
 8004d50:	6054      	str	r4, [r2, #4]
 8004d52:	e7ca      	b.n	8004cea <_free_r+0x26>
 8004d54:	b003      	add	sp, #12
 8004d56:	bd30      	pop	{r4, r5, pc}
 8004d58:	200001e0 	.word	0x200001e0

08004d5c <_read_r>:
 8004d5c:	b538      	push	{r3, r4, r5, lr}
 8004d5e:	4d07      	ldr	r5, [pc, #28]	; (8004d7c <_read_r+0x20>)
 8004d60:	4604      	mov	r4, r0
 8004d62:	4608      	mov	r0, r1
 8004d64:	4611      	mov	r1, r2
 8004d66:	2200      	movs	r2, #0
 8004d68:	602a      	str	r2, [r5, #0]
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	f7fb ffac 	bl	8000cc8 <_read>
 8004d70:	1c43      	adds	r3, r0, #1
 8004d72:	d102      	bne.n	8004d7a <_read_r+0x1e>
 8004d74:	682b      	ldr	r3, [r5, #0]
 8004d76:	b103      	cbz	r3, 8004d7a <_read_r+0x1e>
 8004d78:	6023      	str	r3, [r4, #0]
 8004d7a:	bd38      	pop	{r3, r4, r5, pc}
 8004d7c:	200001e8 	.word	0x200001e8

08004d80 <_fstat_r>:
 8004d80:	b538      	push	{r3, r4, r5, lr}
 8004d82:	4d07      	ldr	r5, [pc, #28]	; (8004da0 <_fstat_r+0x20>)
 8004d84:	2300      	movs	r3, #0
 8004d86:	4604      	mov	r4, r0
 8004d88:	4608      	mov	r0, r1
 8004d8a:	4611      	mov	r1, r2
 8004d8c:	602b      	str	r3, [r5, #0]
 8004d8e:	f7fb ffe0 	bl	8000d52 <_fstat>
 8004d92:	1c43      	adds	r3, r0, #1
 8004d94:	d102      	bne.n	8004d9c <_fstat_r+0x1c>
 8004d96:	682b      	ldr	r3, [r5, #0]
 8004d98:	b103      	cbz	r3, 8004d9c <_fstat_r+0x1c>
 8004d9a:	6023      	str	r3, [r4, #0]
 8004d9c:	bd38      	pop	{r3, r4, r5, pc}
 8004d9e:	bf00      	nop
 8004da0:	200001e8 	.word	0x200001e8

08004da4 <_isatty_r>:
 8004da4:	b538      	push	{r3, r4, r5, lr}
 8004da6:	4d06      	ldr	r5, [pc, #24]	; (8004dc0 <_isatty_r+0x1c>)
 8004da8:	2300      	movs	r3, #0
 8004daa:	4604      	mov	r4, r0
 8004dac:	4608      	mov	r0, r1
 8004dae:	602b      	str	r3, [r5, #0]
 8004db0:	f7fb ffdf 	bl	8000d72 <_isatty>
 8004db4:	1c43      	adds	r3, r0, #1
 8004db6:	d102      	bne.n	8004dbe <_isatty_r+0x1a>
 8004db8:	682b      	ldr	r3, [r5, #0]
 8004dba:	b103      	cbz	r3, 8004dbe <_isatty_r+0x1a>
 8004dbc:	6023      	str	r3, [r4, #0]
 8004dbe:	bd38      	pop	{r3, r4, r5, pc}
 8004dc0:	200001e8 	.word	0x200001e8

08004dc4 <_init>:
 8004dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc6:	bf00      	nop
 8004dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dca:	bc08      	pop	{r3}
 8004dcc:	469e      	mov	lr, r3
 8004dce:	4770      	bx	lr

08004dd0 <_fini>:
 8004dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd2:	bf00      	nop
 8004dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dd6:	bc08      	pop	{r3}
 8004dd8:	469e      	mov	lr, r3
 8004dda:	4770      	bx	lr
