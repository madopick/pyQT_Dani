
Project_23_03_06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fbc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  0800918c  0800918c  0001918c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009458  08009458  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009458  08009458  00019458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009460  08009460  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009460  08009460  00019460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009464  08009464  00019464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08009468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000618  200000d4  0800953c  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006ec  0800953c  000206ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6b1  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002169  00000000  00000000  0002e7b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  00030920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b00  00000000  00000000  000314d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022e09  00000000  00000000  00031fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e83  00000000  00000000  00054dd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccd07  00000000  00000000  00065c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00132963  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003830  00000000  00000000  001329b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000d4 	.word	0x200000d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009174 	.word	0x08009174

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000d8 	.word	0x200000d8
 800020c:	08009174 	.word	0x08009174

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <__io_putchar>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

/* @brief  Retargets the C library printf function to the USART. */
PUTCHAR_PROTOTYPE {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80005bc:	1d39      	adds	r1, r7, #4
 80005be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005c2:	2201      	movs	r2, #1
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <__io_putchar+0x20>)
 80005c6:	f006 fb6a 	bl	8006c9e <HAL_UART_Transmit>
  return ch;
 80005ca:	687b      	ldr	r3, [r7, #4]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200000f0 	.word	0x200000f0

080005d8 <main>:

/* bit flag */
uint8_t bitFlag = 0;

int main(void)
{
 80005d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005da:	b08f      	sub	sp, #60	; 0x3c
 80005dc:	af08      	add	r7, sp, #32
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f002 fe5f 	bl	80032a0 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 fb87 	bl	8000cf4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 fc45 	bl	8000e74 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ea:	f000 fc23 	bl	8000e34 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005ee:	f000 fbef 	bl	8000dd0 <MX_USART2_UART_Init>

  /*##-1- Configure the I2C peripheral ######################################*/
  I2cHandle.Instance             = I2Cx;
 80005f2:	4b4c      	ldr	r3, [pc, #304]	; (8000724 <main+0x14c>)
 80005f4:	4a4c      	ldr	r2, [pc, #304]	; (8000728 <main+0x150>)
 80005f6:	601a      	str	r2, [r3, #0]
  I2cHandle.Init.AddressingMode  = I2C_ADDRESSINGMODE_10BIT;
 80005f8:	4b4a      	ldr	r3, [pc, #296]	; (8000724 <main+0x14c>)
 80005fa:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80005fe:	611a      	str	r2, [r3, #16]
  I2cHandle.Init.ClockSpeed      = 400000;
 8000600:	4b48      	ldr	r3, [pc, #288]	; (8000724 <main+0x14c>)
 8000602:	4a4a      	ldr	r2, [pc, #296]	; (800072c <main+0x154>)
 8000604:	605a      	str	r2, [r3, #4]
  I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000606:	4b47      	ldr	r3, [pc, #284]	; (8000724 <main+0x14c>)
 8000608:	2200      	movs	r2, #0
 800060a:	615a      	str	r2, [r3, #20]
  I2cHandle.Init.DutyCycle       = I2C_DUTYCYCLE_16_9;
 800060c:	4b45      	ldr	r3, [pc, #276]	; (8000724 <main+0x14c>)
 800060e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000612:	609a      	str	r2, [r3, #8]
  I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000614:	4b43      	ldr	r3, [pc, #268]	; (8000724 <main+0x14c>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 800061a:	4b42      	ldr	r3, [pc, #264]	; (8000724 <main+0x14c>)
 800061c:	2200      	movs	r2, #0
 800061e:	621a      	str	r2, [r3, #32]
  I2cHandle.Init.OwnAddress1     = I2C_ADDRESS;
 8000620:	4b40      	ldr	r3, [pc, #256]	; (8000724 <main+0x14c>)
 8000622:	f240 320f 	movw	r2, #783	; 0x30f
 8000626:	60da      	str	r2, [r3, #12]
  I2cHandle.Init.OwnAddress2     = 0xFE;
 8000628:	4b3e      	ldr	r3, [pc, #248]	; (8000724 <main+0x14c>)
 800062a:	22fe      	movs	r2, #254	; 0xfe
 800062c:	619a      	str	r2, [r3, #24]

  if(HAL_I2C_Init(&I2cHandle) != HAL_OK){ Error_Handler(); }
 800062e:	483d      	ldr	r0, [pc, #244]	; (8000724 <main+0x14c>)
 8000630:	f003 fdb6 	bl	80041a0 <HAL_I2C_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <main+0x66>
 800063a:	f000 ff45 	bl	80014c8 <Error_Handler>

  serial_init();
 800063e:	f000 ff57 	bl	80014f0 <serial_init>
  #ifdef MASTER_BOARD
  	  printf("Init OK\r\n");
 8000642:	483b      	ldr	r0, [pc, #236]	; (8000730 <main+0x158>)
 8000644:	f007 fe18 	bl	8008278 <puts>
  #endif

  /****************** MAIN **********************/
  while (1) {
	  /*Perintah untuk kirim data ke UART*/
  	  if (bitFlag & BFLAG_UART_RCV) {
 8000648:	4b3a      	ldr	r3, [pc, #232]	; (8000734 <main+0x15c>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	f003 0301 	and.w	r3, r3, #1
 8000650:	2b00      	cmp	r3, #0
 8000652:	d017      	beq.n	8000684 <main+0xac>
  		  uartProcessing (u8arr_uartEvent, u16_lenCnt - 2); // remove \r & \n
 8000654:	4b38      	ldr	r3, [pc, #224]	; (8000738 <main+0x160>)
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	3b02      	subs	r3, #2
 800065a:	b29b      	uxth	r3, r3
 800065c:	4619      	mov	r1, r3
 800065e:	4837      	ldr	r0, [pc, #220]	; (800073c <main+0x164>)
 8000660:	f000 fe88 	bl	8001374 <uartProcessing>
  		  memset(u8arr_uartEvent, 0, UART_BUF_SZ);
 8000664:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000668:	2100      	movs	r1, #0
 800066a:	4834      	ldr	r0, [pc, #208]	; (800073c <main+0x164>)
 800066c:	f007 fd76 	bl	800815c <memset>
  		  u16_lenCnt = 0;
 8000670:	4b31      	ldr	r3, [pc, #196]	; (8000738 <main+0x160>)
 8000672:	2200      	movs	r2, #0
 8000674:	801a      	strh	r2, [r3, #0]

  		  /* Reset bit 0 bitflag */
  		  bitFlag 	&= ~BFLAG_UART_RCV;
 8000676:	4b2f      	ldr	r3, [pc, #188]	; (8000734 <main+0x15c>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	f023 0301 	bic.w	r3, r3, #1
 800067e:	b2da      	uxtb	r2, r3
 8000680:	4b2c      	ldr	r3, [pc, #176]	; (8000734 <main+0x15c>)
 8000682:	701a      	strb	r2, [r3, #0]
  	  }

  	  if (bitFlag & BFLAG_I2C_RSL) {
 8000684:	4b2b      	ldr	r3, [pc, #172]	; (8000734 <main+0x15c>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	f003 0302 	and.w	r3, r3, #2
 800068c:	2b00      	cmp	r3, #0
 800068e:	f000 809b 	beq.w	80007c8 <main+0x1f0>
		#ifdef MASTER_BOARD
  		  /* Master give trigger to Slave*/
  		  for (uint8_t i=4; i<=6; i++){
 8000692:	2304      	movs	r3, #4
 8000694:	75fb      	strb	r3, [r7, #23]
 8000696:	e089      	b.n	80007ac <main+0x1d4>
  			  aTxBuffer[0] = i;
 8000698:	7dfb      	ldrb	r3, [r7, #23]
 800069a:	4a29      	ldr	r2, [pc, #164]	; (8000740 <main+0x168>)
 800069c:	6013      	str	r3, [r2, #0]
  			  do
  			  {
  				  /*##-2- Proses transmission START #####################################*/
  				  if(HAL_I2C_Master_Transmit_IT(&I2cHandle, (uint16_t)I2C_ADDRESS, (uint8_t*)aTxBuffer, TXBUFFERSIZE)!= HAL_OK)
 800069e:	2364      	movs	r3, #100	; 0x64
 80006a0:	4a27      	ldr	r2, [pc, #156]	; (8000740 <main+0x168>)
 80006a2:	f240 310f 	movw	r1, #783	; 0x30f
 80006a6:	481f      	ldr	r0, [pc, #124]	; (8000724 <main+0x14c>)
 80006a8:	f003 febe 	bl	8004428 <HAL_I2C_Master_Transmit_IT>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <main+0xde>
  				  {Error_Handler();}
 80006b2:	f000 ff09 	bl	80014c8 <Error_Handler>

  				  /*##-3- Menunggu transfer data selesai ###################################*/
  				  while (HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY)
 80006b6:	bf00      	nop
 80006b8:	481a      	ldr	r0, [pc, #104]	; (8000724 <main+0x14c>)
 80006ba:	f004 fa67 	bl	8004b8c <HAL_I2C_GetState>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b20      	cmp	r3, #32
 80006c2:	d1f9      	bne.n	80006b8 <main+0xe0>
  				  {}
  				  //printf("Access Slave Success!!\r\n\n");
  			  } while(HAL_I2C_GetError(&I2cHandle) == HAL_I2C_ERROR_AF);
 80006c4:	4817      	ldr	r0, [pc, #92]	; (8000724 <main+0x14c>)
 80006c6:	f004 fa6f 	bl	8004ba8 <HAL_I2C_GetError>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b04      	cmp	r3, #4
 80006ce:	d0e6      	beq.n	800069e <main+0xc6>

  			  /* Master recieve data from Slave*/
  			  /*##-4- I2C periperal siap menerima data ############################*/
  			  do
  			  {
  				  if(HAL_I2C_Master_Receive_IT(&I2cHandle, (uint16_t)I2C_ADDRESS, (uint8_t *)aStartBuffer, RXBUFFERSIZE) != HAL_OK) {Error_Handler();}
 80006d0:	2364      	movs	r3, #100	; 0x64
 80006d2:	4a1c      	ldr	r2, [pc, #112]	; (8000744 <main+0x16c>)
 80006d4:	f240 310f 	movw	r1, #783	; 0x30f
 80006d8:	4812      	ldr	r0, [pc, #72]	; (8000724 <main+0x14c>)
 80006da:	f003 ff4b 	bl	8004574 <HAL_I2C_Master_Receive_IT>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <main+0x110>
 80006e4:	f000 fef0 	bl	80014c8 <Error_Handler>

  				  /* Saat Acknowledge failure (Slave tidak mengakui alamatnya) Master memulai ulang komunikasi */
  			  } while (HAL_I2C_GetError(&I2cHandle) == HAL_I2C_ERROR_AF);
 80006e8:	480e      	ldr	r0, [pc, #56]	; (8000724 <main+0x14c>)
 80006ea:	f004 fa5d 	bl	8004ba8 <HAL_I2C_GetError>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b04      	cmp	r3, #4
 80006f2:	d0ed      	beq.n	80006d0 <main+0xf8>

  			  /*##-5- Menunggu akhir transfer ###################################*/
  			  while (HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY)
 80006f4:	bf00      	nop
 80006f6:	480b      	ldr	r0, [pc, #44]	; (8000724 <main+0x14c>)
 80006f8:	f004 fa48 	bl	8004b8c <HAL_I2C_GetState>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b20      	cmp	r3, #32
 8000700:	d1f9      	bne.n	80006f6 <main+0x11e>
  			  {}
  			  if (aStartBuffer[0]==4){
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <main+0x16c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2b04      	cmp	r3, #4
 8000708:	d103      	bne.n	8000712 <main+0x13a>
  				  printf("R1: ");
 800070a:	480f      	ldr	r0, [pc, #60]	; (8000748 <main+0x170>)
 800070c:	f007 fd2e 	bl	800816c <iprintf>
 8000710:	e025      	b.n	800075e <main+0x186>
  			  }
  			  else if (aStartBuffer[0]==5){
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <main+0x16c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2b05      	cmp	r3, #5
 8000718:	d11a      	bne.n	8000750 <main+0x178>
  				  printf("R2: ");
 800071a:	480c      	ldr	r0, [pc, #48]	; (800074c <main+0x174>)
 800071c:	f007 fd26 	bl	800816c <iprintf>
 8000720:	e01d      	b.n	800075e <main+0x186>
 8000722:	bf00      	nop
 8000724:	20000194 	.word	0x20000194
 8000728:	40005400 	.word	0x40005400
 800072c:	00061a80 	.word	0x00061a80
 8000730:	0800918c 	.word	0x0800918c
 8000734:	200004bc 	.word	0x200004bc
 8000738:	200004ba 	.word	0x200004ba
 800073c:	200003b8 	.word	0x200003b8
 8000740:	20000000 	.word	0x20000000
 8000744:	2000028c 	.word	0x2000028c
 8000748:	08009198 	.word	0x08009198
 800074c:	080091a0 	.word	0x080091a0
  			  }
  			  else if (aStartBuffer[0]==6){
 8000750:	4b8c      	ldr	r3, [pc, #560]	; (8000984 <main+0x3ac>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b06      	cmp	r3, #6
 8000756:	d102      	bne.n	800075e <main+0x186>
  				  printf("R3: ");
 8000758:	488b      	ldr	r0, [pc, #556]	; (8000988 <main+0x3b0>)
 800075a:	f007 fd07 	bl	800816c <iprintf>
  			  }
  			  printf("%ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld;\r\n",
 800075e:	4b89      	ldr	r3, [pc, #548]	; (8000984 <main+0x3ac>)
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	4b87      	ldr	r3, [pc, #540]	; (8000984 <main+0x3ac>)
 8000766:	689a      	ldr	r2, [r3, #8]
 8000768:	60ba      	str	r2, [r7, #8]
 800076a:	4b86      	ldr	r3, [pc, #536]	; (8000984 <main+0x3ac>)
 800076c:	68d8      	ldr	r0, [r3, #12]
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	4b84      	ldr	r3, [pc, #528]	; (8000984 <main+0x3ac>)
 8000772:	691b      	ldr	r3, [r3, #16]
 8000774:	4a83      	ldr	r2, [pc, #524]	; (8000984 <main+0x3ac>)
 8000776:	6952      	ldr	r2, [r2, #20]
 8000778:	4982      	ldr	r1, [pc, #520]	; (8000984 <main+0x3ac>)
 800077a:	6989      	ldr	r1, [r1, #24]
 800077c:	4881      	ldr	r0, [pc, #516]	; (8000984 <main+0x3ac>)
 800077e:	69c0      	ldr	r0, [r0, #28]
 8000780:	4c80      	ldr	r4, [pc, #512]	; (8000984 <main+0x3ac>)
 8000782:	6a24      	ldr	r4, [r4, #32]
 8000784:	4d7f      	ldr	r5, [pc, #508]	; (8000984 <main+0x3ac>)
 8000786:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 8000788:	4e7e      	ldr	r6, [pc, #504]	; (8000984 <main+0x3ac>)
 800078a:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 800078c:	9606      	str	r6, [sp, #24]
 800078e:	9505      	str	r5, [sp, #20]
 8000790:	9404      	str	r4, [sp, #16]
 8000792:	9003      	str	r0, [sp, #12]
 8000794:	9102      	str	r1, [sp, #8]
 8000796:	9201      	str	r2, [sp, #4]
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	68ba      	ldr	r2, [r7, #8]
 800079e:	68f9      	ldr	r1, [r7, #12]
 80007a0:	487a      	ldr	r0, [pc, #488]	; (800098c <main+0x3b4>)
 80007a2:	f007 fce3 	bl	800816c <iprintf>
  		  for (uint8_t i=4; i<=6; i++){
 80007a6:	7dfb      	ldrb	r3, [r7, #23]
 80007a8:	3301      	adds	r3, #1
 80007aa:	75fb      	strb	r3, [r7, #23]
 80007ac:	7dfb      	ldrb	r3, [r7, #23]
 80007ae:	2b06      	cmp	r3, #6
 80007b0:	f67f af72 	bls.w	8000698 <main+0xc0>
  	  				 aStartBuffer[1], aStartBuffer[2], aStartBuffer[3],
					 aStartBuffer[4], aStartBuffer[5], aStartBuffer[6],
					 aStartBuffer[7], aStartBuffer[8], aStartBuffer[9], aStartBuffer[10]);

  		  }
  		  printf("END\r\n");
 80007b4:	4876      	ldr	r0, [pc, #472]	; (8000990 <main+0x3b8>)
 80007b6:	f007 fd5f 	bl	8008278 <puts>

  		  bitFlag &= ~BFLAG_I2C_RSL;
 80007ba:	4b76      	ldr	r3, [pc, #472]	; (8000994 <main+0x3bc>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	f023 0302 	bic.w	r3, r3, #2
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	4b73      	ldr	r3, [pc, #460]	; (8000994 <main+0x3bc>)
 80007c6:	701a      	strb	r2, [r3, #0]
		#endif
  	  }

  	  /* Perintah untuk WRITE atau sending I2C */
  	  if ((bitFlag & BFLAG_I2C_WR1) || (bitFlag & BFLAG_I2C_WR2) || (bitFlag & BFLAG_I2C_WR3)) {
 80007c8:	4b72      	ldr	r3, [pc, #456]	; (8000994 <main+0x3bc>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	f003 0310 	and.w	r3, r3, #16
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d10b      	bne.n	80007ec <main+0x214>
 80007d4:	4b6f      	ldr	r3, [pc, #444]	; (8000994 <main+0x3bc>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	f003 0320 	and.w	r3, r3, #32
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d105      	bne.n	80007ec <main+0x214>
 80007e0:	4b6c      	ldr	r3, [pc, #432]	; (8000994 <main+0x3bc>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d022      	beq.n	8000832 <main+0x25a>
			  //printf("Master I2C Sending code %ld\r\n", aTxBuffer[0]);

			  do
			  {
				  /*##-2- Proses transmission START #####################################*/
				  if(HAL_I2C_Master_Transmit_IT(&I2cHandle, (uint16_t)I2C_ADDRESS, (uint8_t*)aTxBuffer, TXBUFFERSIZE)!= HAL_OK)
 80007ec:	2364      	movs	r3, #100	; 0x64
 80007ee:	4a6a      	ldr	r2, [pc, #424]	; (8000998 <main+0x3c0>)
 80007f0:	f240 310f 	movw	r1, #783	; 0x30f
 80007f4:	4869      	ldr	r0, [pc, #420]	; (800099c <main+0x3c4>)
 80007f6:	f003 fe17 	bl	8004428 <HAL_I2C_Master_Transmit_IT>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <main+0x22c>
				  {Error_Handler();}
 8000800:	f000 fe62 	bl	80014c8 <Error_Handler>

				  /*##-3- Menunggu transfer data selesai ###################################*/
				  while (HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY)
 8000804:	bf00      	nop
 8000806:	4865      	ldr	r0, [pc, #404]	; (800099c <main+0x3c4>)
 8000808:	f004 f9c0 	bl	8004b8c <HAL_I2C_GetState>
 800080c:	4603      	mov	r3, r0
 800080e:	2b20      	cmp	r3, #32
 8000810:	d1f9      	bne.n	8000806 <main+0x22e>
				  {}
				  printf("Sending Success!!\r\n");
 8000812:	4863      	ldr	r0, [pc, #396]	; (80009a0 <main+0x3c8>)
 8000814:	f007 fd30 	bl	8008278 <puts>
			  } while(HAL_I2C_GetError(&I2cHandle) == HAL_I2C_ERROR_AF);
 8000818:	4860      	ldr	r0, [pc, #384]	; (800099c <main+0x3c4>)
 800081a:	f004 f9c5 	bl	8004ba8 <HAL_I2C_GetError>
 800081e:	4603      	mov	r3, r0
 8000820:	2b04      	cmp	r3, #4
 8000822:	d0e3      	beq.n	80007ec <main+0x214>

			  bitFlag |= BFLAG_I2C_RD1;
 8000824:	4b5b      	ldr	r3, [pc, #364]	; (8000994 <main+0x3bc>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	f043 0308 	orr.w	r3, r3, #8
 800082c:	b2da      	uxtb	r2, r3
 800082e:	4b59      	ldr	r3, [pc, #356]	; (8000994 <main+0x3bc>)
 8000830:	701a      	strb	r2, [r3, #0]
			  /* Reset bit 2 bitflag ada di bagian BFLAG_I2C_RD0 */
	  	  #endif
  	 }

  	/* Perintah untuk Compare buffer dan READ dari I2C */
  	 if (bitFlag & BFLAG_I2C_RD1)
 8000832:	4b58      	ldr	r3, [pc, #352]	; (8000994 <main+0x3bc>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	f003 0308 	and.w	r3, r3, #8
 800083a:	2b00      	cmp	r3, #0
 800083c:	f000 8169 	beq.w	8000b12 <main+0x53a>
  		 #ifdef MASTER_BOARD
  		 	 /*##-4- I2C periperal siap menerima data ############################*/
  			 do {
  				 //printf("Master I2C Receiving... \r\n");

  				 if(HAL_I2C_Master_Receive_IT(&I2cHandle, (uint16_t)I2C_ADDRESS, (uint8_t *)aRxBuffer, RXBUFFERSIZE) != HAL_OK) {Error_Handler();}
 8000840:	2364      	movs	r3, #100	; 0x64
 8000842:	4a58      	ldr	r2, [pc, #352]	; (80009a4 <main+0x3cc>)
 8000844:	f240 310f 	movw	r1, #783	; 0x30f
 8000848:	4854      	ldr	r0, [pc, #336]	; (800099c <main+0x3c4>)
 800084a:	f003 fe93 	bl	8004574 <HAL_I2C_Master_Receive_IT>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <main+0x280>
 8000854:	f000 fe38 	bl	80014c8 <Error_Handler>

  				 /* Saat Acknowledge failure (Slave tidak mengakui alamatnya) Master memulai ulang komunikasi */
  			 } while (HAL_I2C_GetError(&I2cHandle) == HAL_I2C_ERROR_AF);
 8000858:	4850      	ldr	r0, [pc, #320]	; (800099c <main+0x3c4>)
 800085a:	f004 f9a5 	bl	8004ba8 <HAL_I2C_GetError>
 800085e:	4603      	mov	r3, r0
 8000860:	2b04      	cmp	r3, #4
 8000862:	d0ed      	beq.n	8000840 <main+0x268>

  			 /*##-5- Menunggu akhir transfer ###################################*/
  			 while (HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY){}
 8000864:	bf00      	nop
 8000866:	484d      	ldr	r0, [pc, #308]	; (800099c <main+0x3c4>)
 8000868:	f004 f990 	bl	8004b8c <HAL_I2C_GetState>
 800086c:	4603      	mov	r3, r0
 800086e:	2b20      	cmp	r3, #32
 8000870:	d1f9      	bne.n	8000866 <main+0x28e>
  			 //printf("Master I2C Receive Success\r\n\n");

  			 /* Jika di write di form 1 maka nilai buffer disimpan di var res1 dan atur BFLAG_I2C_WR1*/
  			 if ((bitFlag & BFLAG_I2C_WR1) && aRxBuffer[0]==1)
 8000872:	4b48      	ldr	r3, [pc, #288]	; (8000994 <main+0x3bc>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	f003 0310 	and.w	r3, r3, #16
 800087a:	2b00      	cmp	r3, #0
 800087c:	d00d      	beq.n	800089a <main+0x2c2>
 800087e:	4b49      	ldr	r3, [pc, #292]	; (80009a4 <main+0x3cc>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d109      	bne.n	800089a <main+0x2c2>
  			 {
  				 printf("Send RES1: \r\n");
 8000886:	4848      	ldr	r0, [pc, #288]	; (80009a8 <main+0x3d0>)
 8000888:	f007 fcf6 	bl	8008278 <puts>

  				 /* Reset bitflag */
  				 bitFlag 	&= ~BFLAG_I2C_WR1;
 800088c:	4b41      	ldr	r3, [pc, #260]	; (8000994 <main+0x3bc>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	f023 0310 	bic.w	r3, r3, #16
 8000894:	b2da      	uxtb	r2, r3
 8000896:	4b3f      	ldr	r3, [pc, #252]	; (8000994 <main+0x3bc>)
 8000898:	701a      	strb	r2, [r3, #0]
  			 }
  			 if ((bitFlag & BFLAG_I2C_WR2) && aRxBuffer[0]==2)
 800089a:	4b3e      	ldr	r3, [pc, #248]	; (8000994 <main+0x3bc>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	f003 0320 	and.w	r3, r3, #32
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d00d      	beq.n	80008c2 <main+0x2ea>
 80008a6:	4b3f      	ldr	r3, [pc, #252]	; (80009a4 <main+0x3cc>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b02      	cmp	r3, #2
 80008ac:	d109      	bne.n	80008c2 <main+0x2ea>
  			 {
  				 printf("Send RES2: \r\n");
 80008ae:	483f      	ldr	r0, [pc, #252]	; (80009ac <main+0x3d4>)
 80008b0:	f007 fce2 	bl	8008278 <puts>

  				 /* Reset bitflag */
  				 bitFlag 	&= ~BFLAG_I2C_WR2;
 80008b4:	4b37      	ldr	r3, [pc, #220]	; (8000994 <main+0x3bc>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	f023 0320 	bic.w	r3, r3, #32
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4b35      	ldr	r3, [pc, #212]	; (8000994 <main+0x3bc>)
 80008c0:	701a      	strb	r2, [r3, #0]
  			 }
  			 if ((bitFlag & BFLAG_I2C_WR3) && aRxBuffer[0]==3)
 80008c2:	4b34      	ldr	r3, [pc, #208]	; (8000994 <main+0x3bc>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d00d      	beq.n	80008ea <main+0x312>
 80008ce:	4b35      	ldr	r3, [pc, #212]	; (80009a4 <main+0x3cc>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2b03      	cmp	r3, #3
 80008d4:	d109      	bne.n	80008ea <main+0x312>
  			 {
  				 printf("Send RES3: \r\n");
 80008d6:	4836      	ldr	r0, [pc, #216]	; (80009b0 <main+0x3d8>)
 80008d8:	f007 fcce 	bl	8008278 <puts>

  				 /* Reset bitflag */
  				 bitFlag 	&= ~BFLAG_I2C_WR3;
 80008dc:	4b2d      	ldr	r3, [pc, #180]	; (8000994 <main+0x3bc>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	4b2b      	ldr	r3, [pc, #172]	; (8000994 <main+0x3bc>)
 80008e8:	701a      	strb	r2, [r3, #0]
  			 }
  			 if ((bitFlag & BFLAG_I2C_WR1) && aRxBuffer[0]==4)
 80008ea:	4b2a      	ldr	r3, [pc, #168]	; (8000994 <main+0x3bc>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	f003 0310 	and.w	r3, r3, #16
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d00e      	beq.n	8000914 <main+0x33c>
 80008f6:	4b2b      	ldr	r3, [pc, #172]	; (80009a4 <main+0x3cc>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	d10a      	bne.n	8000914 <main+0x33c>
  			 {
  				 printf("Read RES1: ");
 80008fe:	482d      	ldr	r0, [pc, #180]	; (80009b4 <main+0x3dc>)
 8000900:	f007 fc34 	bl	800816c <iprintf>

  				 /* Reset bitflag */
  				 bitFlag 	&= ~BFLAG_I2C_WR1;
 8000904:	4b23      	ldr	r3, [pc, #140]	; (8000994 <main+0x3bc>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	f023 0310 	bic.w	r3, r3, #16
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4b21      	ldr	r3, [pc, #132]	; (8000994 <main+0x3bc>)
 8000910:	701a      	strb	r2, [r3, #0]
 8000912:	e0bb      	b.n	8000a8c <main+0x4b4>
  			 }
  			 else if ((bitFlag & BFLAG_I2C_WR2) && aRxBuffer[0]==5)
 8000914:	4b1f      	ldr	r3, [pc, #124]	; (8000994 <main+0x3bc>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	f003 0320 	and.w	r3, r3, #32
 800091c:	2b00      	cmp	r3, #0
 800091e:	d00e      	beq.n	800093e <main+0x366>
 8000920:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <main+0x3cc>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b05      	cmp	r3, #5
 8000926:	d10a      	bne.n	800093e <main+0x366>
			 {
  				 printf("READ RES2: ");
 8000928:	4823      	ldr	r0, [pc, #140]	; (80009b8 <main+0x3e0>)
 800092a:	f007 fc1f 	bl	800816c <iprintf>

  				/* Reset bitflag */
				 bitFlag 	&= ~BFLAG_I2C_WR2;
 800092e:	4b19      	ldr	r3, [pc, #100]	; (8000994 <main+0x3bc>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	f023 0320 	bic.w	r3, r3, #32
 8000936:	b2da      	uxtb	r2, r3
 8000938:	4b16      	ldr	r3, [pc, #88]	; (8000994 <main+0x3bc>)
 800093a:	701a      	strb	r2, [r3, #0]
 800093c:	e0a6      	b.n	8000a8c <main+0x4b4>
			 }
  			 else if ((bitFlag & BFLAG_I2C_WR3) && aRxBuffer[0]==6)
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <main+0x3bc>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000946:	2b00      	cmp	r3, #0
 8000948:	d00e      	beq.n	8000968 <main+0x390>
 800094a:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <main+0x3cc>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2b06      	cmp	r3, #6
 8000950:	d10a      	bne.n	8000968 <main+0x390>
			 {
  				 printf("READ RES3: ");
 8000952:	481a      	ldr	r0, [pc, #104]	; (80009bc <main+0x3e4>)
 8000954:	f007 fc0a 	bl	800816c <iprintf>

  				/* Reset bitflag */
				 bitFlag 	&= ~BFLAG_I2C_WR3;
 8000958:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <main+0x3bc>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <main+0x3bc>)
 8000964:	701a      	strb	r2, [r3, #0]
 8000966:	e091      	b.n	8000a8c <main+0x4b4>
			 }
  			 else if ((bitFlag & BFLAG_I2C_WR1) && aRxBuffer[0]==7)
 8000968:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <main+0x3bc>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	f003 0310 	and.w	r3, r3, #16
 8000970:	2b00      	cmp	r3, #0
 8000972:	d049      	beq.n	8000a08 <main+0x430>
 8000974:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <main+0x3cc>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b07      	cmp	r3, #7
 800097a:	d145      	bne.n	8000a08 <main+0x430>
			 {
  				for (uint8_t i=0; i<10; i++){
 800097c:	2300      	movs	r3, #0
 800097e:	75bb      	strb	r3, [r7, #22]
 8000980:	e027      	b.n	80009d2 <main+0x3fa>
 8000982:	bf00      	nop
 8000984:	2000028c 	.word	0x2000028c
 8000988:	080091a8 	.word	0x080091a8
 800098c:	080091b0 	.word	0x080091b0
 8000990:	080091e4 	.word	0x080091e4
 8000994:	200004bc 	.word	0x200004bc
 8000998:	20000000 	.word	0x20000000
 800099c:	20000194 	.word	0x20000194
 80009a0:	080091ec 	.word	0x080091ec
 80009a4:	20000260 	.word	0x20000260
 80009a8:	08009200 	.word	0x08009200
 80009ac:	08009210 	.word	0x08009210
 80009b0:	08009220 	.word	0x08009220
 80009b4:	08009230 	.word	0x08009230
 80009b8:	0800923c 	.word	0x0800923c
 80009bc:	08009248 	.word	0x08009248
					aTxBuffer[i+1] = 0;
 80009c0:	7dbb      	ldrb	r3, [r7, #22]
 80009c2:	3301      	adds	r3, #1
 80009c4:	4a83      	ldr	r2, [pc, #524]	; (8000bd4 <main+0x5fc>)
 80009c6:	2100      	movs	r1, #0
 80009c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  				for (uint8_t i=0; i<10; i++){
 80009cc:	7dbb      	ldrb	r3, [r7, #22]
 80009ce:	3301      	adds	r3, #1
 80009d0:	75bb      	strb	r3, [r7, #22]
 80009d2:	7dbb      	ldrb	r3, [r7, #22]
 80009d4:	2b09      	cmp	r3, #9
 80009d6:	d9f3      	bls.n	80009c0 <main+0x3e8>
				}
				copyValue(temp, aTxBuffer, 10, 10);
 80009d8:	230a      	movs	r3, #10
 80009da:	220a      	movs	r2, #10
 80009dc:	497d      	ldr	r1, [pc, #500]	; (8000bd4 <main+0x5fc>)
 80009de:	487e      	ldr	r0, [pc, #504]	; (8000bd8 <main+0x600>)
 80009e0:	f000 f95e 	bl	8000ca0 <copyValue>
				aTxBuffer[0]=8;
 80009e4:	4b7b      	ldr	r3, [pc, #492]	; (8000bd4 <main+0x5fc>)
 80009e6:	2208      	movs	r2, #8
 80009e8:	601a      	str	r2, [r3, #0]
				bitFlag |= BFLAG_I2C_WR2;
 80009ea:	4b7c      	ldr	r3, [pc, #496]	; (8000bdc <main+0x604>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	f043 0320 	orr.w	r3, r3, #32
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	4b79      	ldr	r3, [pc, #484]	; (8000bdc <main+0x604>)
 80009f6:	701a      	strb	r2, [r3, #0]
				bitFlag &= ~BFLAG_I2C_WR1;
 80009f8:	4b78      	ldr	r3, [pc, #480]	; (8000bdc <main+0x604>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	f023 0310 	bic.w	r3, r3, #16
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	4b76      	ldr	r3, [pc, #472]	; (8000bdc <main+0x604>)
 8000a04:	701a      	strb	r2, [r3, #0]
			 {
 8000a06:	e041      	b.n	8000a8c <main+0x4b4>
			 }
  			 else if ((bitFlag & BFLAG_I2C_WR2) && aRxBuffer[0]==8)
 8000a08:	4b74      	ldr	r3, [pc, #464]	; (8000bdc <main+0x604>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	f003 0320 	and.w	r3, r3, #32
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d02a      	beq.n	8000a6a <main+0x492>
 8000a14:	4b72      	ldr	r3, [pc, #456]	; (8000be0 <main+0x608>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b08      	cmp	r3, #8
 8000a1a:	d126      	bne.n	8000a6a <main+0x492>
			 {
  				for (uint8_t i=0; i<10; i++){
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	757b      	strb	r3, [r7, #21]
 8000a20:	e008      	b.n	8000a34 <main+0x45c>
					aTxBuffer[i+1] = 0;
 8000a22:	7d7b      	ldrb	r3, [r7, #21]
 8000a24:	3301      	adds	r3, #1
 8000a26:	4a6b      	ldr	r2, [pc, #428]	; (8000bd4 <main+0x5fc>)
 8000a28:	2100      	movs	r1, #0
 8000a2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  				for (uint8_t i=0; i<10; i++){
 8000a2e:	7d7b      	ldrb	r3, [r7, #21]
 8000a30:	3301      	adds	r3, #1
 8000a32:	757b      	strb	r3, [r7, #21]
 8000a34:	7d7b      	ldrb	r3, [r7, #21]
 8000a36:	2b09      	cmp	r3, #9
 8000a38:	d9f3      	bls.n	8000a22 <main+0x44a>
				}
				copyValue(temp, aTxBuffer, 20, 10);
 8000a3a:	230a      	movs	r3, #10
 8000a3c:	2214      	movs	r2, #20
 8000a3e:	4965      	ldr	r1, [pc, #404]	; (8000bd4 <main+0x5fc>)
 8000a40:	4865      	ldr	r0, [pc, #404]	; (8000bd8 <main+0x600>)
 8000a42:	f000 f92d 	bl	8000ca0 <copyValue>
				aTxBuffer[0]=9;
 8000a46:	4b63      	ldr	r3, [pc, #396]	; (8000bd4 <main+0x5fc>)
 8000a48:	2209      	movs	r2, #9
 8000a4a:	601a      	str	r2, [r3, #0]
				bitFlag |= BFLAG_I2C_WR3;
 8000a4c:	4b63      	ldr	r3, [pc, #396]	; (8000bdc <main+0x604>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	4b61      	ldr	r3, [pc, #388]	; (8000bdc <main+0x604>)
 8000a58:	701a      	strb	r2, [r3, #0]
				bitFlag &= ~BFLAG_I2C_WR2;
 8000a5a:	4b60      	ldr	r3, [pc, #384]	; (8000bdc <main+0x604>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	f023 0320 	bic.w	r3, r3, #32
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	4b5d      	ldr	r3, [pc, #372]	; (8000bdc <main+0x604>)
 8000a66:	701a      	strb	r2, [r3, #0]
			 {
 8000a68:	e010      	b.n	8000a8c <main+0x4b4>
			 }
			 else if ((bitFlag & BFLAG_I2C_WR3) && aRxBuffer[0]==9)
 8000a6a:	4b5c      	ldr	r3, [pc, #368]	; (8000bdc <main+0x604>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d00a      	beq.n	8000a8c <main+0x4b4>
 8000a76:	4b5a      	ldr	r3, [pc, #360]	; (8000be0 <main+0x608>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2b09      	cmp	r3, #9
 8000a7c:	d106      	bne.n	8000a8c <main+0x4b4>
			 {
				bitFlag &= ~BFLAG_I2C_WR3;
 8000a7e:	4b57      	ldr	r3, [pc, #348]	; (8000bdc <main+0x604>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	4b54      	ldr	r3, [pc, #336]	; (8000bdc <main+0x604>)
 8000a8a:	701a      	strb	r2, [r3, #0]
			 }

  			 if (aRxBuffer[0]<4)
 8000a8c:	4b54      	ldr	r3, [pc, #336]	; (8000be0 <main+0x608>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b03      	cmp	r3, #3
 8000a92:	dc0f      	bgt.n	8000ab4 <main+0x4dc>
  			 {
  				 /*##-6- Compare the sent and received buffers ##############################*/
				 if(Buffercmp(aTxBuffer,aRxBuffer, 11)){
 8000a94:	220b      	movs	r2, #11
 8000a96:	4952      	ldr	r1, [pc, #328]	; (8000be0 <main+0x608>)
 8000a98:	484e      	ldr	r0, [pc, #312]	; (8000bd4 <main+0x5fc>)
 8000a9a:	f000 f8e1 	bl	8000c60 <Buffercmp>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d003      	beq.n	8000aac <main+0x4d4>
					 printf("Buffer compare Fail!!!\r\n\n");
 8000aa4:	484f      	ldr	r0, [pc, #316]	; (8000be4 <main+0x60c>)
 8000aa6:	f007 fbe7 	bl	8008278 <puts>
 8000aaa:	e02b      	b.n	8000b04 <main+0x52c>
				 }
				 else {
					 printf("Buffer compare Success!!!\r\n\n");
 8000aac:	484e      	ldr	r0, [pc, #312]	; (8000be8 <main+0x610>)
 8000aae:	f007 fbe3 	bl	8008278 <puts>
 8000ab2:	e027      	b.n	8000b04 <main+0x52c>
				 }
  			 }
  			 else if (aRxBuffer[0]>=4){
 8000ab4:	4b4a      	ldr	r3, [pc, #296]	; (8000be0 <main+0x608>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b03      	cmp	r3, #3
 8000aba:	dd23      	ble.n	8000b04 <main+0x52c>
  				 printf("%ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld\r\n\n",
 8000abc:	4b48      	ldr	r3, [pc, #288]	; (8000be0 <main+0x608>)
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	4b47      	ldr	r3, [pc, #284]	; (8000be0 <main+0x608>)
 8000ac4:	689a      	ldr	r2, [r3, #8]
 8000ac6:	60ba      	str	r2, [r7, #8]
 8000ac8:	4b45      	ldr	r3, [pc, #276]	; (8000be0 <main+0x608>)
 8000aca:	68d8      	ldr	r0, [r3, #12]
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	4b44      	ldr	r3, [pc, #272]	; (8000be0 <main+0x608>)
 8000ad0:	691b      	ldr	r3, [r3, #16]
 8000ad2:	4a43      	ldr	r2, [pc, #268]	; (8000be0 <main+0x608>)
 8000ad4:	6952      	ldr	r2, [r2, #20]
 8000ad6:	4942      	ldr	r1, [pc, #264]	; (8000be0 <main+0x608>)
 8000ad8:	6989      	ldr	r1, [r1, #24]
 8000ada:	4841      	ldr	r0, [pc, #260]	; (8000be0 <main+0x608>)
 8000adc:	69c0      	ldr	r0, [r0, #28]
 8000ade:	4c40      	ldr	r4, [pc, #256]	; (8000be0 <main+0x608>)
 8000ae0:	6a24      	ldr	r4, [r4, #32]
 8000ae2:	4d3f      	ldr	r5, [pc, #252]	; (8000be0 <main+0x608>)
 8000ae4:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 8000ae6:	4e3e      	ldr	r6, [pc, #248]	; (8000be0 <main+0x608>)
 8000ae8:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 8000aea:	9606      	str	r6, [sp, #24]
 8000aec:	9505      	str	r5, [sp, #20]
 8000aee:	9404      	str	r4, [sp, #16]
 8000af0:	9003      	str	r0, [sp, #12]
 8000af2:	9102      	str	r1, [sp, #8]
 8000af4:	9201      	str	r2, [sp, #4]
 8000af6:	9300      	str	r3, [sp, #0]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	68ba      	ldr	r2, [r7, #8]
 8000afc:	68f9      	ldr	r1, [r7, #12]
 8000afe:	483b      	ldr	r0, [pc, #236]	; (8000bec <main+0x614>)
 8000b00:	f007 fb34 	bl	800816c <iprintf>
						 aRxBuffer[7], aRxBuffer[8], aRxBuffer[9], aRxBuffer[10]);
  			 }


  			 /* Reset bit 1 bitflag */
			 bitFlag 	&= ~BFLAG_I2C_RD1;
 8000b04:	4b35      	ldr	r3, [pc, #212]	; (8000bdc <main+0x604>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	f023 0308 	bic.w	r3, r3, #8
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4b33      	ldr	r3, [pc, #204]	; (8000bdc <main+0x604>)
 8000b10:	701a      	strb	r2, [r3, #0]
		 #endif
	 }
  	 if (bitFlag & BFLAG_I2C_RD0)
 8000b12:	4b32      	ldr	r3, [pc, #200]	; (8000bdc <main+0x604>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	f003 0304 	and.w	r3, r3, #4
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f43f ad94 	beq.w	8000648 <main+0x70>
  	 {
  	  	 #ifdef MASTER_BOARD

  	  		 printf("Code: %ld\nTX integer: %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld\r\n",
 8000b20:	4b2c      	ldr	r3, [pc, #176]	; (8000bd4 <main+0x5fc>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b2b      	ldr	r3, [pc, #172]	; (8000bd4 <main+0x5fc>)
 8000b28:	685a      	ldr	r2, [r3, #4]
 8000b2a:	60ba      	str	r2, [r7, #8]
 8000b2c:	4b29      	ldr	r3, [pc, #164]	; (8000bd4 <main+0x5fc>)
 8000b2e:	6898      	ldr	r0, [r3, #8]
 8000b30:	6078      	str	r0, [r7, #4]
 8000b32:	4b28      	ldr	r3, [pc, #160]	; (8000bd4 <main+0x5fc>)
 8000b34:	68db      	ldr	r3, [r3, #12]
 8000b36:	4a27      	ldr	r2, [pc, #156]	; (8000bd4 <main+0x5fc>)
 8000b38:	6912      	ldr	r2, [r2, #16]
 8000b3a:	4926      	ldr	r1, [pc, #152]	; (8000bd4 <main+0x5fc>)
 8000b3c:	6949      	ldr	r1, [r1, #20]
 8000b3e:	4825      	ldr	r0, [pc, #148]	; (8000bd4 <main+0x5fc>)
 8000b40:	6980      	ldr	r0, [r0, #24]
 8000b42:	4c24      	ldr	r4, [pc, #144]	; (8000bd4 <main+0x5fc>)
 8000b44:	69e4      	ldr	r4, [r4, #28]
 8000b46:	603c      	str	r4, [r7, #0]
 8000b48:	4d22      	ldr	r5, [pc, #136]	; (8000bd4 <main+0x5fc>)
 8000b4a:	6a2d      	ldr	r5, [r5, #32]
 8000b4c:	4e21      	ldr	r6, [pc, #132]	; (8000bd4 <main+0x5fc>)
 8000b4e:	6a76      	ldr	r6, [r6, #36]	; 0x24
 8000b50:	4c20      	ldr	r4, [pc, #128]	; (8000bd4 <main+0x5fc>)
 8000b52:	6aa4      	ldr	r4, [r4, #40]	; 0x28
 8000b54:	9407      	str	r4, [sp, #28]
 8000b56:	9606      	str	r6, [sp, #24]
 8000b58:	9505      	str	r5, [sp, #20]
 8000b5a:	683c      	ldr	r4, [r7, #0]
 8000b5c:	9404      	str	r4, [sp, #16]
 8000b5e:	9003      	str	r0, [sp, #12]
 8000b60:	9102      	str	r1, [sp, #8]
 8000b62:	9201      	str	r2, [sp, #4]
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	68ba      	ldr	r2, [r7, #8]
 8000b6a:	68f9      	ldr	r1, [r7, #12]
 8000b6c:	4820      	ldr	r0, [pc, #128]	; (8000bf0 <main+0x618>)
 8000b6e:	f007 fafd 	bl	800816c <iprintf>
  	  				 aTxBuffer[0], aTxBuffer[1], aTxBuffer[2], aTxBuffer[3],
					 aTxBuffer[4], aTxBuffer[5], aTxBuffer[6],
					 aTxBuffer[7], aTxBuffer[8], aTxBuffer[9], aTxBuffer[10]);
  	  		 printf("Code: %ld\nRX integer: %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld\r\n\n",
 8000b72:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <main+0x608>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <main+0x608>)
 8000b7a:	685a      	ldr	r2, [r3, #4]
 8000b7c:	60ba      	str	r2, [r7, #8]
 8000b7e:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <main+0x608>)
 8000b80:	6898      	ldr	r0, [r3, #8]
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <main+0x608>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	4a15      	ldr	r2, [pc, #84]	; (8000be0 <main+0x608>)
 8000b8a:	6912      	ldr	r2, [r2, #16]
 8000b8c:	4914      	ldr	r1, [pc, #80]	; (8000be0 <main+0x608>)
 8000b8e:	6949      	ldr	r1, [r1, #20]
 8000b90:	4813      	ldr	r0, [pc, #76]	; (8000be0 <main+0x608>)
 8000b92:	6980      	ldr	r0, [r0, #24]
 8000b94:	4c12      	ldr	r4, [pc, #72]	; (8000be0 <main+0x608>)
 8000b96:	69e4      	ldr	r4, [r4, #28]
 8000b98:	603c      	str	r4, [r7, #0]
 8000b9a:	4d11      	ldr	r5, [pc, #68]	; (8000be0 <main+0x608>)
 8000b9c:	6a2d      	ldr	r5, [r5, #32]
 8000b9e:	4e10      	ldr	r6, [pc, #64]	; (8000be0 <main+0x608>)
 8000ba0:	6a76      	ldr	r6, [r6, #36]	; 0x24
 8000ba2:	4c0f      	ldr	r4, [pc, #60]	; (8000be0 <main+0x608>)
 8000ba4:	6aa4      	ldr	r4, [r4, #40]	; 0x28
 8000ba6:	9407      	str	r4, [sp, #28]
 8000ba8:	9606      	str	r6, [sp, #24]
 8000baa:	9505      	str	r5, [sp, #20]
 8000bac:	683c      	ldr	r4, [r7, #0]
 8000bae:	9404      	str	r4, [sp, #16]
 8000bb0:	9003      	str	r0, [sp, #12]
 8000bb2:	9102      	str	r1, [sp, #8]
 8000bb4:	9201      	str	r2, [sp, #4]
 8000bb6:	9300      	str	r3, [sp, #0]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	68f9      	ldr	r1, [r7, #12]
 8000bbe:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <main+0x61c>)
 8000bc0:	f007 fad4 	bl	800816c <iprintf>
  	  				 aRxBuffer[0], aRxBuffer[1], aRxBuffer[2], aRxBuffer[3],
					 aRxBuffer[4], aRxBuffer[5], aRxBuffer[6],
					 aRxBuffer[7], aRxBuffer[8], aRxBuffer[9], aRxBuffer[10]);

  	  		 /* Reset bit 1 bitflag */
  			 bitFlag 	&= ~BFLAG_I2C_RD0;
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <main+0x604>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	f023 0304 	bic.w	r3, r3, #4
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <main+0x604>)
 8000bd0:	701a      	strb	r2, [r3, #0]
  	  if (bitFlag & BFLAG_UART_RCV) {
 8000bd2:	e539      	b.n	8000648 <main+0x70>
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	200001e8 	.word	0x200001e8
 8000bdc:	200004bc 	.word	0x200004bc
 8000be0:	20000260 	.word	0x20000260
 8000be4:	08009254 	.word	0x08009254
 8000be8:	08009270 	.word	0x08009270
 8000bec:	0800928c 	.word	0x0800928c
 8000bf0:	080092c0 	.word	0x080092c0
 8000bf4:	0800930c 	.word	0x0800930c

08000bf8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  I2cHandle: I2C handle
  * @note	Turn LED2 on: Jika kirim data berhasil
  ***********************************************************************************/
#ifdef MASTER_BOARD
//Untuk MASTER BOARD
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2cHandle){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000c00:	2201      	movs	r2, #1
 8000c02:	2120      	movs	r1, #32
 8000c04:	4803      	ldr	r0, [pc, #12]	; (8000c14 <HAL_I2C_MasterTxCpltCallback+0x1c>)
 8000c06:	f003 fa97 	bl	8004138 <HAL_GPIO_WritePin>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40020000 	.word	0x40020000

08000c18 <HAL_I2C_MasterRxCpltCallback>:
  * @param  I2cHandle: I2C handle
  * @note	Turn LED2 on: Jika menerima data berhasil
  ************************************************************************************/
#ifdef MASTER_BOARD
// MASTER BOARD
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *I2cHandle) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000c20:	2201      	movs	r2, #1
 8000c22:	2120      	movs	r1, #32
 8000c24:	4803      	ldr	r0, [pc, #12]	; (8000c34 <HAL_I2C_MasterRxCpltCallback+0x1c>)
 8000c26:	f003 fa87 	bl	8004138 <HAL_GPIO_WritePin>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40020000 	.word	0x40020000

08000c38 <HAL_I2C_ErrorCallback>:



/* @brief  I2C error callbacks
   @param  I2cHandle: I2C handle */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	printf("\r\nI2C ERROR \r\n\n");
 8000c40:	4805      	ldr	r0, [pc, #20]	; (8000c58 <HAL_I2C_ErrorCallback+0x20>)
 8000c42:	f007 fb19 	bl	8008278 <puts>
	while(1) {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000c46:	2120      	movs	r1, #32
 8000c48:	4804      	ldr	r0, [pc, #16]	; (8000c5c <HAL_I2C_ErrorCallback+0x24>)
 8000c4a:	f003 fa8e 	bl	800416a <HAL_GPIO_TogglePin>
		HAL_Delay(20);
 8000c4e:	2014      	movs	r0, #20
 8000c50:	f002 fb98 	bl	8003384 <HAL_Delay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000c54:	e7f7      	b.n	8000c46 <HAL_I2C_ErrorCallback+0xe>
 8000c56:	bf00      	nop
 8000c58:	08009358 	.word	0x08009358
 8000c5c:	40020000 	.word	0x40020000

08000c60 <Buffercmp>:
  * @param  pBuffer1, pBuffer2: buffers to be compared.
  * @param  BufferLength: buffer's length
  * @retval 0  : pBuffer1 identical to pBuffer2
  *         >0 : pBuffer1 differs from pBuffer2
  */
static uint16_t Buffercmp(uint32_t pBuffer1[], uint32_t pBuffer2[], uint8_t length){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	71fb      	strb	r3, [r7, #7]
	printf("Compare prosess...\r\n");
 8000c6e:	480a      	ldr	r0, [pc, #40]	; (8000c98 <Buffercmp+0x38>)
 8000c70:	f007 fb02 	bl	8008278 <puts>
	for (uint8_t i = 0; i <= length; i++){
 8000c74:	2300      	movs	r3, #0
 8000c76:	75fb      	strb	r3, [r7, #23]
 8000c78:	e002      	b.n	8000c80 <Buffercmp+0x20>
 8000c7a:	7dfb      	ldrb	r3, [r7, #23]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	75fb      	strb	r3, [r7, #23]
 8000c80:	7dfa      	ldrb	r2, [r7, #23]
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d9f8      	bls.n	8000c7a <Buffercmp+0x1a>
		if (pBuffer1[i]!=pBuffer1[i]){
			printf("Buffer different!!!\r\n");
			return i;
		}
	}
	printf("Buffer same!!!\r\n");
 8000c88:	4804      	ldr	r0, [pc, #16]	; (8000c9c <Buffercmp+0x3c>)
 8000c8a:	f007 faf5 	bl	8008278 <puts>
	return 0;
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	08009368 	.word	0x08009368
 8000c9c:	0800937c 	.word	0x0800937c

08000ca0 <copyValue>:
	for (uint8_t i = 0; i <= length; i++){
		pBuffer[i+1] = pRes[i];
	}
}

void copyValue(uint32_t source[], uint32_t target[], uint8_t start, uint8_t length){
 8000ca0:	b480      	push	{r7}
 8000ca2:	b087      	sub	sp, #28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	4611      	mov	r1, r2
 8000cac:	461a      	mov	r2, r3
 8000cae:	460b      	mov	r3, r1
 8000cb0:	71fb      	strb	r3, [r7, #7]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < length; i++){
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	75fb      	strb	r3, [r7, #23]
 8000cba:	e00f      	b.n	8000cdc <copyValue+0x3c>
		target[i+1] = source[i+start];
 8000cbc:	7dfa      	ldrb	r2, [r7, #23]
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	68fa      	ldr	r2, [r7, #12]
 8000cc6:	441a      	add	r2, r3
 8000cc8:	7dfb      	ldrb	r3, [r7, #23]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	68b9      	ldr	r1, [r7, #8]
 8000cd0:	440b      	add	r3, r1
 8000cd2:	6812      	ldr	r2, [r2, #0]
 8000cd4:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < length; i++){
 8000cd6:	7dfb      	ldrb	r3, [r7, #23]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	75fb      	strb	r3, [r7, #23]
 8000cdc:	7dfa      	ldrb	r2, [r7, #23]
 8000cde:	79bb      	ldrb	r3, [r7, #6]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d3eb      	bcc.n	8000cbc <copyValue+0x1c>
	}
}
 8000ce4:	bf00      	nop
 8000ce6:	bf00      	nop
 8000ce8:	371c      	adds	r7, #28
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
	...

08000cf4 <SystemClock_Config>:

/* @brief System Clock Configuration */
void SystemClock_Config(void) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b094      	sub	sp, #80	; 0x50
 8000cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	2234      	movs	r2, #52	; 0x34
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f007 fa2a 	bl	800815c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d08:	f107 0308 	add.w	r3, r7, #8
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d18:	2300      	movs	r3, #0
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	4b2a      	ldr	r3, [pc, #168]	; (8000dc8 <SystemClock_Config+0xd4>)
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d20:	4a29      	ldr	r2, [pc, #164]	; (8000dc8 <SystemClock_Config+0xd4>)
 8000d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d26:	6413      	str	r3, [r2, #64]	; 0x40
 8000d28:	4b27      	ldr	r3, [pc, #156]	; (8000dc8 <SystemClock_Config+0xd4>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d34:	2300      	movs	r3, #0
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	4b24      	ldr	r3, [pc, #144]	; (8000dcc <SystemClock_Config+0xd8>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d40:	4a22      	ldr	r2, [pc, #136]	; (8000dcc <SystemClock_Config+0xd8>)
 8000d42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d46:	6013      	str	r3, [r2, #0]
 8000d48:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <SystemClock_Config+0xd8>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d50:	603b      	str	r3, [r7, #0]
 8000d52:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.*/
  RCC_OscInitStruct.OscillatorType 		= RCC_OSCILLATORTYPE_HSI;
 8000d54:	2302      	movs	r3, #2
 8000d56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState 			= RCC_HSI_ON;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d5c:	2310      	movs	r3, #16
 8000d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState 		= RCC_PLL_ON;
 8000d60:	2302      	movs	r3, #2
 8000d62:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource 		= RCC_PLLSOURCE_HSI;
 8000d64:	2300      	movs	r3, #0
 8000d66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM 			= 16;
 8000d68:	2310      	movs	r3, #16
 8000d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN 			= 336;
 8000d6c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d70:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP 			= RCC_PLLP_DIV4;
 8000d72:	2304      	movs	r3, #4
 8000d74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ 			= 2;
 8000d76:	2302      	movs	r3, #2
 8000d78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR 			= 2;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	4618      	mov	r0, r3
 8000d84:	f005 fca0 	bl	80066c8 <HAL_RCC_OscConfig>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000d8e:	f000 fb9b 	bl	80014c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d92:	230f      	movs	r3, #15
 8000d94:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d96:	2302      	movs	r3, #2
 8000d98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d9e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000da2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK){
 8000da8:	f107 0308 	add.w	r3, r7, #8
 8000dac:	2105      	movs	r1, #5
 8000dae:	4618      	mov	r0, r3
 8000db0:	f005 f940 	bl	8006034 <HAL_RCC_ClockConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <SystemClock_Config+0xca>
    Error_Handler();
 8000dba:	f000 fb85 	bl	80014c8 <Error_Handler>
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	3750      	adds	r7, #80	; 0x50
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40007000 	.word	0x40007000

08000dd0 <MX_USART2_UART_Init>:

/* @brief USART2 Initialization Function*/
static void MX_USART2_UART_Init(void) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  huart2.Instance 			= USART2;
 8000dd4:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <MX_USART2_UART_Init+0x58>)
 8000dd6:	4a15      	ldr	r2, [pc, #84]	; (8000e2c <MX_USART2_UART_Init+0x5c>)
 8000dd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate 		= 115200;
 8000dda:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <MX_USART2_UART_Init+0x58>)
 8000ddc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000de0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength 	= UART_WORDLENGTH_8B;
 8000de2:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <MX_USART2_UART_Init+0x58>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits 		= UART_STOPBITS_1;
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <MX_USART2_UART_Init+0x58>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity 		= UART_PARITY_NONE;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <MX_USART2_UART_Init+0x58>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode 			= UART_MODE_TX_RX;
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MX_USART2_UART_Init+0x58>)
 8000df6:	220c      	movs	r2, #12
 8000df8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl 	= UART_HWCONTROL_NONE;
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <MX_USART2_UART_Init+0x58>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling 	= UART_OVERSAMPLING_16;
 8000e00:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <MX_USART2_UART_Init+0x58>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart2) != HAL_OK){
 8000e06:	4808      	ldr	r0, [pc, #32]	; (8000e28 <MX_USART2_UART_Init+0x58>)
 8000e08:	f005 fefc 	bl	8006c04 <HAL_UART_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_USART2_UART_Init+0x46>
    Error_Handler();
 8000e12:	f000 fb59 	bl	80014c8 <Error_Handler>
  }

  #ifdef RX_EVENT_CB
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, u8arr_eventBuff, UART_BUF_SZ);
 8000e16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e1a:	4905      	ldr	r1, [pc, #20]	; (8000e30 <MX_USART2_UART_Init+0x60>)
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <MX_USART2_UART_Init+0x58>)
 8000e1e:	f006 f800 	bl	8006e22 <HAL_UARTEx_ReceiveToIdle_DMA>
  #else
	serial_init();
  #endif
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200000f0 	.word	0x200000f0
 8000e2c:	40004400 	.word	0x40004400
 8000e30:	200002b8 	.word	0x200002b8

08000e34 <MX_DMA_Init>:


static void MX_DMA_Init(void) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	607b      	str	r3, [r7, #4]
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <MX_DMA_Init+0x3c>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <MX_DMA_Init+0x3c>)
 8000e44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <MX_DMA_Init+0x3c>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2010      	movs	r0, #16
 8000e5c:	f002 fb91 	bl	8003582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000e60:	2010      	movs	r0, #16
 8000e62:	f002 fbaa 	bl	80035ba <HAL_NVIC_EnableIRQ>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40023800 	.word	0x40023800

08000e74 <MX_GPIO_Init>:

/* @brief GPIO Initialization Function*/
static void MX_GPIO_Init(void) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	; 0x28
 8000e78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
 8000e88:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	4b2d      	ldr	r3, [pc, #180]	; (8000f44 <MX_GPIO_Init+0xd0>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a2c      	ldr	r2, [pc, #176]	; (8000f44 <MX_GPIO_Init+0xd0>)
 8000e94:	f043 0304 	orr.w	r3, r3, #4
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b2a      	ldr	r3, [pc, #168]	; (8000f44 <MX_GPIO_Init+0xd0>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0304 	and.w	r3, r3, #4
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <MX_GPIO_Init+0xd0>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a25      	ldr	r2, [pc, #148]	; (8000f44 <MX_GPIO_Init+0xd0>)
 8000eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b23      	ldr	r3, [pc, #140]	; (8000f44 <MX_GPIO_Init+0xd0>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <MX_GPIO_Init+0xd0>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a1e      	ldr	r2, [pc, #120]	; (8000f44 <MX_GPIO_Init+0xd0>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <MX_GPIO_Init+0xd0>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <MX_GPIO_Init+0xd0>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a17      	ldr	r2, [pc, #92]	; (8000f44 <MX_GPIO_Init+0xd0>)
 8000ee8:	f043 0302 	orr.w	r3, r3, #2
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <MX_GPIO_Init+0xd0>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2120      	movs	r1, #32
 8000efe:	4812      	ldr	r0, [pc, #72]	; (8000f48 <MX_GPIO_Init+0xd4>)
 8000f00:	f003 f91a 	bl	8004138 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin 		= B1_Pin;
 8000f04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 8000f0a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4619      	mov	r1, r3
 8000f1a:	480c      	ldr	r0, [pc, #48]	; (8000f4c <MX_GPIO_Init+0xd8>)
 8000f1c:	f002 ff78 	bl	8003e10 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin 		= LD2_Pin;
 8000f20:	2320      	movs	r3, #32
 8000f22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode 		= GPIO_MODE_OUTPUT_PP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed 	= GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	4804      	ldr	r0, [pc, #16]	; (8000f48 <MX_GPIO_Init+0xd4>)
 8000f38:	f002 ff6a 	bl	8003e10 <HAL_GPIO_Init>
}
 8000f3c:	bf00      	nop
 8000f3e:	3728      	adds	r7, #40	; 0x28
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40020000 	.word	0x40020000
 8000f4c:	40020800 	.word	0x40020800

08000f50 <tinysh_dec>:

/*********************************************************************
 * @name	: tinysh_dec
 * @brief	: string to decimal conversion (up to 15 chars).
 *********************************************************************/
long tinysh_dec(char *s) {
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  unsigned long res=0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]
  uint8_t index = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	72fb      	strb	r3, [r7, #11]
  int8_t min	= 1;			//Penanda masukan - atau +
 8000f60:	2301      	movs	r3, #1
 8000f62:	72bb      	strb	r3, [r7, #10]

  while(*s) {
 8000f64:	e031      	b.n	8000fca <tinysh_dec+0x7a>
	  res*=10;					//berfungsi menjadikan result kelipatan pangkat 10 (menjadikan puluhan)
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	60fb      	str	r3, [r7, #12]

	  if((*s == '-')&&(index == 0))			// jika inputan negatif
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b2d      	cmp	r3, #45	; 0x2d
 8000f78:	d105      	bne.n	8000f86 <tinysh_dec+0x36>
 8000f7a:	7afb      	ldrb	r3, [r7, #11]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d102      	bne.n	8000f86 <tinysh_dec+0x36>
		  min = -1;
 8000f80:	23ff      	movs	r3, #255	; 0xff
 8000f82:	72bb      	strb	r3, [r7, #10]
 8000f84:	e018      	b.n	8000fb8 <tinysh_dec+0x68>
	  else if((*s == '0')&&(index == 0))	// jika inputan 0
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b30      	cmp	r3, #48	; 0x30
 8000f8c:	d105      	bne.n	8000f9a <tinysh_dec+0x4a>
 8000f8e:	7afb      	ldrb	r3, [r7, #11]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d102      	bne.n	8000f9a <tinysh_dec+0x4a>
		  res = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	e00e      	b.n	8000fb8 <tinysh_dec+0x68>
	  else if(*s>='0' && *s<='9')			// jika inputan normal
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b2f      	cmp	r3, #47	; 0x2f
 8000fa0:	d919      	bls.n	8000fd6 <tinysh_dec+0x86>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b39      	cmp	r3, #57	; 0x39
 8000fa8:	d815      	bhi.n	8000fd6 <tinysh_dec+0x86>
		  res+=*s-'0';			//bagian ini berfungsi mengurangi ascii inputna dengan ascii 0 sehingga didapat nilai integer sesungguhnya
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	3b30      	subs	r3, #48	; 0x30
 8000fb6:	60fb      	str	r3, [r7, #12]
	  else
		  break;

	  s++;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	607b      	str	r3, [r7, #4]
	  index++;
 8000fbe:	7afb      	ldrb	r3, [r7, #11]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	72fb      	strb	r3, [r7, #11]

	  if(index > 15)
 8000fc4:	7afb      	ldrb	r3, [r7, #11]
 8000fc6:	2b0f      	cmp	r3, #15
 8000fc8:	d804      	bhi.n	8000fd4 <tinysh_dec+0x84>
  while(*s) {
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1c9      	bne.n	8000f66 <tinysh_dec+0x16>
 8000fd2:	e000      	b.n	8000fd6 <tinysh_dec+0x86>
	  {
		 break;
 8000fd4:	bf00      	nop
	  }
  }

  return (res * min);
 8000fd6:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	fb02 f303 	mul.w	r3, r2, r3
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <vShell_cmdParse>:

/********************************************************
 * 	Parsing incoming message						   	*
 ********************************************************/
static void vShell_cmdParse(char *input) {
 8000fec:	b590      	push	{r4, r7, lr}
 8000fee:	b08d      	sub	sp, #52	; 0x34
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	for(uint8_t u8_idx = 0; u8_idx < CFG_HEADER_NUM; u8_idx++) {
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000ffa:	e1ac      	b.n	8001356 <vShell_cmdParse+0x36a>
		if(!memcmp(input,(char*)&str_cfg_header[u8_idx][0], CFG_HEADER_CHARS_LEN)) {
 8000ffc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001000:	4613      	mov	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4413      	add	r3, r2
 8001006:	4aae      	ldr	r2, [pc, #696]	; (80012c0 <vShell_cmdParse+0x2d4>)
 8001008:	4413      	add	r3, r2
 800100a:	2205      	movs	r2, #5
 800100c:	4619      	mov	r1, r3
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f007 f886 	bl	8008120 <memcmp>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	f040 8198 	bne.w	800134c <vShell_cmdParse+0x360>
			char *pChar 		= &input[CFG_HEADER_CHARS_LEN];		//pointer untuk menyimpan header (5 char)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3305      	adds	r3, #5
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
			char *pChar2 		= &input[CFG_HEADER_CHARS_LEN];		//pointer untuk menyimpan header (5 char)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3305      	adds	r3, #5
 8001026:	61fb      	str	r3, [r7, #28]
			uint8_t u8_start 	= 0;			// ini penanda yang akan bergeser tiap indeks (menandai lokasi dari sparating symboll)
 8001028:	2300      	movs	r3, #0
 800102a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			uint8_t u8_stop 	= 0;			// ini penenda start pointer paling awal atau awal baru setelah sparating symboll
 800102e:	2300      	movs	r3, #0
 8001030:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			uint8_t u8_cnt 		= 0;			// menampung ada berapa sih inputan nya
 8001034:	2300      	movs	r3, #0
 8001036:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

			char str_res[20];

			if (u8_idx==1) {
 800103a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800103e:	2b01      	cmp	r3, #1
 8001040:	d107      	bne.n	8001052 <vShell_cmdParse+0x66>
				bitFlag |= BFLAG_I2C_RSL;
 8001042:	4ba0      	ldr	r3, [pc, #640]	; (80012c4 <vShell_cmdParse+0x2d8>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	f043 0302 	orr.w	r3, r3, #2
 800104a:	b2da      	uxtb	r2, r3
 800104c:	4b9d      	ldr	r3, [pc, #628]	; (80012c4 <vShell_cmdParse+0x2d8>)
 800104e:	701a      	strb	r2, [r3, #0]
 8001050:	e17c      	b.n	800134c <vShell_cmdParse+0x360>
			}

			else if (u8_idx == 5){		//{RD0}
 8001052:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001056:	2b05      	cmp	r3, #5
 8001058:	d107      	bne.n	800106a <vShell_cmdParse+0x7e>
				/* READ HEADER */
				bitFlag |= BFLAG_I2C_RD0;
 800105a:	4b9a      	ldr	r3, [pc, #616]	; (80012c4 <vShell_cmdParse+0x2d8>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	f043 0304 	orr.w	r3, r3, #4
 8001062:	b2da      	uxtb	r2, r3
 8001064:	4b97      	ldr	r3, [pc, #604]	; (80012c4 <vShell_cmdParse+0x2d8>)
 8001066:	701a      	strb	r2, [r3, #0]
 8001068:	e170      	b.n	800134c <vShell_cmdParse+0x360>
			}

			/* READ HEADER */
			else if (u8_idx == 6){ 		//{RD1} Read from res1
 800106a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800106e:	2b06      	cmp	r3, #6
 8001070:	d10a      	bne.n	8001088 <vShell_cmdParse+0x9c>
				aTxBuffer[0]=4;
 8001072:	4b95      	ldr	r3, [pc, #596]	; (80012c8 <vShell_cmdParse+0x2dc>)
 8001074:	2204      	movs	r2, #4
 8001076:	601a      	str	r2, [r3, #0]
				bitFlag |= BFLAG_I2C_WR1;
 8001078:	4b92      	ldr	r3, [pc, #584]	; (80012c4 <vShell_cmdParse+0x2d8>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	f043 0310 	orr.w	r3, r3, #16
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4b90      	ldr	r3, [pc, #576]	; (80012c4 <vShell_cmdParse+0x2d8>)
 8001084:	701a      	strb	r2, [r3, #0]
 8001086:	e161      	b.n	800134c <vShell_cmdParse+0x360>
			}
			else if (u8_idx == 7){ 		//{RD2} Read from res2
 8001088:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800108c:	2b07      	cmp	r3, #7
 800108e:	d10a      	bne.n	80010a6 <vShell_cmdParse+0xba>
				aTxBuffer[0]=5;
 8001090:	4b8d      	ldr	r3, [pc, #564]	; (80012c8 <vShell_cmdParse+0x2dc>)
 8001092:	2205      	movs	r2, #5
 8001094:	601a      	str	r2, [r3, #0]
				bitFlag |= BFLAG_I2C_WR2;
 8001096:	4b8b      	ldr	r3, [pc, #556]	; (80012c4 <vShell_cmdParse+0x2d8>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	f043 0320 	orr.w	r3, r3, #32
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	4b88      	ldr	r3, [pc, #544]	; (80012c4 <vShell_cmdParse+0x2d8>)
 80010a2:	701a      	strb	r2, [r3, #0]
 80010a4:	e152      	b.n	800134c <vShell_cmdParse+0x360>
			}
			else if (u8_idx == 8){		//{RD3} Read from res3
 80010a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010aa:	2b08      	cmp	r3, #8
 80010ac:	d10a      	bne.n	80010c4 <vShell_cmdParse+0xd8>
				aTxBuffer[0]=6;
 80010ae:	4b86      	ldr	r3, [pc, #536]	; (80012c8 <vShell_cmdParse+0x2dc>)
 80010b0:	2206      	movs	r2, #6
 80010b2:	601a      	str	r2, [r3, #0]
				bitFlag |= BFLAG_I2C_WR3;
 80010b4:	4b83      	ldr	r3, [pc, #524]	; (80012c4 <vShell_cmdParse+0x2d8>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4b81      	ldr	r3, [pc, #516]	; (80012c4 <vShell_cmdParse+0x2d8>)
 80010c0:	701a      	strb	r2, [r3, #0]
 80010c2:	e143      	b.n	800134c <vShell_cmdParse+0x360>
			}

			else if (u8_idx == 9){		//{WRA: Read all
 80010c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010c8:	2b09      	cmp	r3, #9
 80010ca:	f040 8086 	bne.w	80011da <vShell_cmdParse+0x1ee>
				for (uint8_t i=0; i<30; i++){
 80010ce:	2300      	movs	r3, #0
 80010d0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80010d4:	e00a      	b.n	80010ec <vShell_cmdParse+0x100>
					temp[i] = 0;
 80010d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80010da:	4a7c      	ldr	r2, [pc, #496]	; (80012cc <vShell_cmdParse+0x2e0>)
 80010dc:	2100      	movs	r1, #0
 80010de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (uint8_t i=0; i<30; i++){
 80010e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80010e6:	3301      	adds	r3, #1
 80010e8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80010ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80010f0:	2b1d      	cmp	r3, #29
 80010f2:	d9f0      	bls.n	80010d6 <vShell_cmdParse+0xea>
				}

				while (*pChar) {
 80010f4:	e06c      	b.n	80011d0 <vShell_cmdParse+0x1e4>
					if(*pChar == ';' || *pChar == '}') {
 80010f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b3b      	cmp	r3, #59	; 0x3b
 80010fc:	d003      	beq.n	8001106 <vShell_cmdParse+0x11a>
 80010fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b7d      	cmp	r3, #125	; 0x7d
 8001104:	d15c      	bne.n	80011c0 <vShell_cmdParse+0x1d4>
						memset(&str_res[0], 0, 20);		// default/reset untuk mendeklarasikan array str_res akan bernilai 0 semua sebanyak 10 indeks mulai dari str_res[0]
 8001106:	f107 0308 	add.w	r3, r7, #8
 800110a:	2214      	movs	r2, #20
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f007 f824 	bl	800815c <memset>
						memcpy(&str_res[0], &pChar2[u8_stop], u8_start - u8_stop);	// mengcopy data array dari pChar2[u8_stop] sejumlah (u8_start - u8_stop0 char menuju str_res
 8001114:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001118:	69fa      	ldr	r2, [r7, #28]
 800111a:	18d1      	adds	r1, r2, r3
 800111c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001120:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	461a      	mov	r2, r3
 8001128:	f107 0308 	add.w	r3, r7, #8
 800112c:	4618      	mov	r0, r3
 800112e:	f007 f807 	bl	8008140 <memcpy>

						if(strlen(str_res)>0){
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d00a      	beq.n	8001152 <vShell_cmdParse+0x166>
							temp[u8_cnt] = tinysh_dec(&str_res[0]);
 800113c:	f897 4025 	ldrb.w	r4, [r7, #37]	; 0x25
 8001140:	f107 0308 	add.w	r3, r7, #8
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff03 	bl	8000f50 <tinysh_dec>
 800114a:	4603      	mov	r3, r0
 800114c:	4a5f      	ldr	r2, [pc, #380]	; (80012cc <vShell_cmdParse+0x2e0>)
 800114e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
						}

						if(*pChar == ';') { u8_stop = u8_start + 1; }
 8001152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b3b      	cmp	r3, #59	; 0x3b
 8001158:	d105      	bne.n	8001166 <vShell_cmdParse+0x17a>
 800115a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800115e:	3301      	adds	r3, #1
 8001160:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001164:	e027      	b.n	80011b6 <vShell_cmdParse+0x1ca>
						else if(*pChar == '}') {
 8001166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b7d      	cmp	r3, #125	; 0x7d
 800116c:	d123      	bne.n	80011b6 <vShell_cmdParse+0x1ca>
							for (uint8_t i=0; i<10; i++){
 800116e:	2300      	movs	r3, #0
 8001170:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001174:	e00b      	b.n	800118e <vShell_cmdParse+0x1a2>
								aTxBuffer[i+1] = 0;
 8001176:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800117a:	3301      	adds	r3, #1
 800117c:	4a52      	ldr	r2, [pc, #328]	; (80012c8 <vShell_cmdParse+0x2dc>)
 800117e:	2100      	movs	r1, #0
 8001180:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							for (uint8_t i=0; i<10; i++){
 8001184:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001188:	3301      	adds	r3, #1
 800118a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800118e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001192:	2b09      	cmp	r3, #9
 8001194:	d9ef      	bls.n	8001176 <vShell_cmdParse+0x18a>
							}

							copyValue(temp, aTxBuffer, 0, 10);
 8001196:	230a      	movs	r3, #10
 8001198:	2200      	movs	r2, #0
 800119a:	494b      	ldr	r1, [pc, #300]	; (80012c8 <vShell_cmdParse+0x2dc>)
 800119c:	484b      	ldr	r0, [pc, #300]	; (80012cc <vShell_cmdParse+0x2e0>)
 800119e:	f7ff fd7f 	bl	8000ca0 <copyValue>
							aTxBuffer[0]=7;
 80011a2:	4b49      	ldr	r3, [pc, #292]	; (80012c8 <vShell_cmdParse+0x2dc>)
 80011a4:	2207      	movs	r2, #7
 80011a6:	601a      	str	r2, [r3, #0]
							bitFlag |= BFLAG_I2C_WR1;
 80011a8:	4b46      	ldr	r3, [pc, #280]	; (80012c4 <vShell_cmdParse+0x2d8>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	f043 0310 	orr.w	r3, r3, #16
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4b44      	ldr	r3, [pc, #272]	; (80012c4 <vShell_cmdParse+0x2d8>)
 80011b4:	701a      	strb	r2, [r3, #0]
						}
						u8_cnt++;
 80011b6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80011ba:	3301      	adds	r3, #1
 80011bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					}
					pChar++;
 80011c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c2:	3301      	adds	r3, #1
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
					u8_start++;
 80011c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011ca:	3301      	adds	r3, #1
 80011cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				while (*pChar) {
 80011d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d18e      	bne.n	80010f6 <vShell_cmdParse+0x10a>
				}
				break;
 80011d8:	e0c3      	b.n	8001362 <vShell_cmdParse+0x376>
			}

			else if ((u8_idx > 0) && (u8_idx < 5)) {
 80011da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f000 80b4 	beq.w	800134c <vShell_cmdParse+0x360>
 80011e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011e8:	2b04      	cmp	r3, #4
 80011ea:	f200 80af 	bhi.w	800134c <vShell_cmdParse+0x360>
				/* Reset TX Buffer from index 1 to 10*/
				for (uint8_t i=0; i<10; i++){
 80011ee:	2300      	movs	r3, #0
 80011f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80011f4:	e00b      	b.n	800120e <vShell_cmdParse+0x222>
					aTxBuffer[i+1] = 0;
 80011f6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80011fa:	3301      	adds	r3, #1
 80011fc:	4a32      	ldr	r2, [pc, #200]	; (80012c8 <vShell_cmdParse+0x2dc>)
 80011fe:	2100      	movs	r1, #0
 8001200:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (uint8_t i=0; i<10; i++){
 8001204:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001208:	3301      	adds	r3, #1
 800120a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800120e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001212:	2b09      	cmp	r3, #9
 8001214:	d9ef      	bls.n	80011f6 <vShell_cmdParse+0x20a>
				}

				/* WRITE HEADER */
				while (*pChar) {
 8001216:	e093      	b.n	8001340 <vShell_cmdParse+0x354>
					if(*pChar == ';' || *pChar == '}') {
 8001218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b3b      	cmp	r3, #59	; 0x3b
 800121e:	d004      	beq.n	800122a <vShell_cmdParse+0x23e>
 8001220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b7d      	cmp	r3, #125	; 0x7d
 8001226:	f040 8083 	bne.w	8001330 <vShell_cmdParse+0x344>
						memset(&str_res[0], 0, 20);		// default/reset untuk mendeklarasikan array str_res akan bernilai 0 semua sebanyak 10 indeks mulai dari str_res[0]
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	2214      	movs	r2, #20
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f006 ff92 	bl	800815c <memset>
						memcpy(&str_res[0], &pChar2[u8_stop], u8_start - u8_stop);	// mengcopy data array dari pChar2[u8_stop] sejumlah (u8_start - u8_stop0 char menuju str_res
 8001238:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800123c:	69fa      	ldr	r2, [r7, #28]
 800123e:	18d1      	adds	r1, r2, r3
 8001240:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001244:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	461a      	mov	r2, r3
 800124c:	f107 0308 	add.w	r3, r7, #8
 8001250:	4618      	mov	r0, r3
 8001252:	f006 ff75 	bl	8008140 <memcpy>

						if(strlen(str_res)>0){
 8001256:	f107 0308 	add.w	r3, r7, #8
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d00b      	beq.n	8001278 <vShell_cmdParse+0x28c>
							aTxBuffer[u8_cnt+1] = tinysh_dec(&str_res[0]);
 8001260:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001264:	1c5c      	adds	r4, r3, #1
 8001266:	f107 0308 	add.w	r3, r7, #8
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fe70 	bl	8000f50 <tinysh_dec>
 8001270:	4603      	mov	r3, r0
 8001272:	4a15      	ldr	r2, [pc, #84]	; (80012c8 <vShell_cmdParse+0x2dc>)
 8001274:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
						}

						if(*pChar == ';') { u8_stop = u8_start + 1; }
 8001278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b3b      	cmp	r3, #59	; 0x3b
 800127e:	d105      	bne.n	800128c <vShell_cmdParse+0x2a0>
 8001280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001284:	3301      	adds	r3, #1
 8001286:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800128a:	e04c      	b.n	8001326 <vShell_cmdParse+0x33a>
						else if(*pChar == '}') {
 800128c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b7d      	cmp	r3, #125	; 0x7d
 8001292:	d148      	bne.n	8001326 <vShell_cmdParse+0x33a>
							if (u8_idx == 2){ //Write at form 1
 8001294:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001298:	2b02      	cmp	r3, #2
 800129a:	d119      	bne.n	80012d0 <vShell_cmdParse+0x2e4>
								/*Set first index as a trigger for slave*/
								aTxBuffer[0]=1;
 800129c:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <vShell_cmdParse+0x2dc>)
 800129e:	2201      	movs	r2, #1
 80012a0:	601a      	str	r2, [r3, #0]
								bitFlag |= BFLAG_I2C_WR1;
 80012a2:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <vShell_cmdParse+0x2d8>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	f043 0310 	orr.w	r3, r3, #16
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <vShell_cmdParse+0x2d8>)
 80012ae:	701a      	strb	r2, [r3, #0]
								bitFlag |= BFLAG_I2C_RD0;
 80012b0:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <vShell_cmdParse+0x2d8>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	f043 0304 	orr.w	r3, r3, #4
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4b02      	ldr	r3, [pc, #8]	; (80012c4 <vShell_cmdParse+0x2d8>)
 80012bc:	701a      	strb	r2, [r3, #0]
 80012be:	e032      	b.n	8001326 <vShell_cmdParse+0x33a>
 80012c0:	2000002c 	.word	0x2000002c
 80012c4:	200004bc 	.word	0x200004bc
 80012c8:	20000000 	.word	0x20000000
 80012cc:	200001e8 	.word	0x200001e8
							}
							else if (u8_idx == 3){ //Write at form 2
 80012d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	d111      	bne.n	80012fc <vShell_cmdParse+0x310>
								aTxBuffer[0]=2;
 80012d8:	4b24      	ldr	r3, [pc, #144]	; (800136c <vShell_cmdParse+0x380>)
 80012da:	2202      	movs	r2, #2
 80012dc:	601a      	str	r2, [r3, #0]
								bitFlag |= BFLAG_I2C_WR2;
 80012de:	4b24      	ldr	r3, [pc, #144]	; (8001370 <vShell_cmdParse+0x384>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	f043 0320 	orr.w	r3, r3, #32
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	4b21      	ldr	r3, [pc, #132]	; (8001370 <vShell_cmdParse+0x384>)
 80012ea:	701a      	strb	r2, [r3, #0]
								bitFlag |= BFLAG_I2C_RD0;
 80012ec:	4b20      	ldr	r3, [pc, #128]	; (8001370 <vShell_cmdParse+0x384>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	f043 0304 	orr.w	r3, r3, #4
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <vShell_cmdParse+0x384>)
 80012f8:	701a      	strb	r2, [r3, #0]
 80012fa:	e014      	b.n	8001326 <vShell_cmdParse+0x33a>
							}
							else if (u8_idx == 4){ //Write at form 3
 80012fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001300:	2b04      	cmp	r3, #4
 8001302:	d110      	bne.n	8001326 <vShell_cmdParse+0x33a>
								aTxBuffer[0]=3;
 8001304:	4b19      	ldr	r3, [pc, #100]	; (800136c <vShell_cmdParse+0x380>)
 8001306:	2203      	movs	r2, #3
 8001308:	601a      	str	r2, [r3, #0]
								bitFlag |= BFLAG_I2C_WR3;
 800130a:	4b19      	ldr	r3, [pc, #100]	; (8001370 <vShell_cmdParse+0x384>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001312:	b2da      	uxtb	r2, r3
 8001314:	4b16      	ldr	r3, [pc, #88]	; (8001370 <vShell_cmdParse+0x384>)
 8001316:	701a      	strb	r2, [r3, #0]
								bitFlag |= BFLAG_I2C_RD0;
 8001318:	4b15      	ldr	r3, [pc, #84]	; (8001370 <vShell_cmdParse+0x384>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	f043 0304 	orr.w	r3, r3, #4
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4b13      	ldr	r3, [pc, #76]	; (8001370 <vShell_cmdParse+0x384>)
 8001324:	701a      	strb	r2, [r3, #0]
							}
						}
						u8_cnt++;
 8001326:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800132a:	3301      	adds	r3, #1
 800132c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					}
					pChar++;
 8001330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001332:	3301      	adds	r3, #1
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
					u8_start++;
 8001336:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800133a:	3301      	adds	r3, #1
 800133c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				while (*pChar) {
 8001340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	f47f af67 	bne.w	8001218 <vShell_cmdParse+0x22c>
				}
				break;
 800134a:	e00a      	b.n	8001362 <vShell_cmdParse+0x376>
	for(uint8_t u8_idx = 0; u8_idx < CFG_HEADER_NUM; u8_idx++) {
 800134c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001350:	3301      	adds	r3, #1
 8001352:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001356:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800135a:	2b0a      	cmp	r3, #10
 800135c:	f67f ae4e 	bls.w	8000ffc <vShell_cmdParse+0x10>
			}
		}
	}
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	3734      	adds	r7, #52	; 0x34
 8001366:	46bd      	mov	sp, r7
 8001368:	bd90      	pop	{r4, r7, pc}
 800136a:	bf00      	nop
 800136c:	20000000 	.word	0x20000000
 8001370:	200004bc 	.word	0x200004bc

08001374 <uartProcessing>:

void uartProcessing (uint8_t *u8p_buffer, uint16_t u16_size){
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]
	//Bagian ini akan dipanggil di serial.c, line 57
	//printf("UART jalan\r\n"); // Harusnya bisa langsung jalan kalo di konek lewat UI
	vShell_cmdParse((char*)u8p_buffer);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff fe33 	bl	8000fec <vShell_cmdParse>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <vUAFE_uart_handle>:
/*****************************************************************
 * @name 	vUAFE_uart_handle
 * @brief	handle afe uart data copy
 ****************************************************************/
static void vUAFE_uart_handle(uint16_t Size)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	80fb      	strh	r3, [r7, #6]
	uint16_t u16_numData;

	/* Check if number of received data in reception buffer has changed */
	if (Size != u16_oldPos)
 800139a:	4b36      	ldr	r3, [pc, #216]	; (8001474 <vUAFE_uart_handle+0xe4>)
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	88fa      	ldrh	r2, [r7, #6]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d05f      	beq.n	8001464 <vUAFE_uart_handle+0xd4>
	{
		if (Size > u16_oldPos)
 80013a4:	4b33      	ldr	r3, [pc, #204]	; (8001474 <vUAFE_uart_handle+0xe4>)
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	88fa      	ldrh	r2, [r7, #6]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d91a      	bls.n	80013e4 <vUAFE_uart_handle+0x54>
		{
			/* Current position is higher than previous one */
			u16_numData = Size - u16_oldPos;
 80013ae:	4b31      	ldr	r3, [pc, #196]	; (8001474 <vUAFE_uart_handle+0xe4>)
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	88fa      	ldrh	r2, [r7, #6]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	81fb      	strh	r3, [r7, #14]
			memcpy(&u8arr_uartEvent[u16_lenCnt],&u8arr_eventBuff[u16_oldPos],u16_numData);
 80013b8:	4b2f      	ldr	r3, [pc, #188]	; (8001478 <vUAFE_uart_handle+0xe8>)
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	461a      	mov	r2, r3
 80013be:	4b2f      	ldr	r3, [pc, #188]	; (800147c <vUAFE_uart_handle+0xec>)
 80013c0:	4413      	add	r3, r2
 80013c2:	4a2c      	ldr	r2, [pc, #176]	; (8001474 <vUAFE_uart_handle+0xe4>)
 80013c4:	8812      	ldrh	r2, [r2, #0]
 80013c6:	4611      	mov	r1, r2
 80013c8:	4a2d      	ldr	r2, [pc, #180]	; (8001480 <vUAFE_uart_handle+0xf0>)
 80013ca:	4411      	add	r1, r2
 80013cc:	89fa      	ldrh	r2, [r7, #14]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f006 feb6 	bl	8008140 <memcpy>
			u16_lenCnt += u16_numData;
 80013d4:	4b28      	ldr	r3, [pc, #160]	; (8001478 <vUAFE_uart_handle+0xe8>)
 80013d6:	881a      	ldrh	r2, [r3, #0]
 80013d8:	89fb      	ldrh	r3, [r7, #14]
 80013da:	4413      	add	r3, r2
 80013dc:	b29a      	uxth	r2, r3
 80013de:	4b26      	ldr	r3, [pc, #152]	; (8001478 <vUAFE_uart_handle+0xe8>)
 80013e0:	801a      	strh	r2, [r3, #0]
 80013e2:	e02a      	b.n	800143a <vUAFE_uart_handle+0xaa>
		}
		else
		{
			/* End of buffer has been reached */
			u16_numData = UART_BUF_SZ - u16_oldPos;
 80013e4:	4b23      	ldr	r3, [pc, #140]	; (8001474 <vUAFE_uart_handle+0xe4>)
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80013ec:	81fb      	strh	r3, [r7, #14]

			memcpy (&u8arr_uartEvent[u16_lenCnt], 			// copy data in that remaining space
 80013ee:	4b22      	ldr	r3, [pc, #136]	; (8001478 <vUAFE_uart_handle+0xe8>)
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	461a      	mov	r2, r3
 80013f4:	4b21      	ldr	r3, [pc, #132]	; (800147c <vUAFE_uart_handle+0xec>)
 80013f6:	4413      	add	r3, r2
					&u8arr_eventBuff[u16_oldPos],
 80013f8:	4a1e      	ldr	r2, [pc, #120]	; (8001474 <vUAFE_uart_handle+0xe4>)
 80013fa:	8812      	ldrh	r2, [r2, #0]
 80013fc:	4611      	mov	r1, r2
 80013fe:	4a20      	ldr	r2, [pc, #128]	; (8001480 <vUAFE_uart_handle+0xf0>)
 8001400:	4411      	add	r1, r2
			memcpy (&u8arr_uartEvent[u16_lenCnt], 			// copy data in that remaining space
 8001402:	89fa      	ldrh	r2, [r7, #14]
 8001404:	4618      	mov	r0, r3
 8001406:	f006 fe9b 	bl	8008140 <memcpy>
					u16_numData);

			u16_lenCnt += u16_numData;
 800140a:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <vUAFE_uart_handle+0xe8>)
 800140c:	881a      	ldrh	r2, [r3, #0]
 800140e:	89fb      	ldrh	r3, [r7, #14]
 8001410:	4413      	add	r3, r2
 8001412:	b29a      	uxth	r2, r3
 8001414:	4b18      	ldr	r3, [pc, #96]	; (8001478 <vUAFE_uart_handle+0xe8>)
 8001416:	801a      	strh	r2, [r3, #0]

			memcpy (&u8arr_uartEvent[u16_lenCnt], 			// copy the remaining data
 8001418:	4b17      	ldr	r3, [pc, #92]	; (8001478 <vUAFE_uart_handle+0xe8>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	461a      	mov	r2, r3
 800141e:	4b17      	ldr	r3, [pc, #92]	; (800147c <vUAFE_uart_handle+0xec>)
 8001420:	4413      	add	r3, r2
 8001422:	88fa      	ldrh	r2, [r7, #6]
 8001424:	4916      	ldr	r1, [pc, #88]	; (8001480 <vUAFE_uart_handle+0xf0>)
 8001426:	4618      	mov	r0, r3
 8001428:	f006 fe8a 	bl	8008140 <memcpy>
					&u8arr_eventBuff[0],
					Size);

			u16_lenCnt += Size;
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <vUAFE_uart_handle+0xe8>)
 800142e:	881a      	ldrh	r2, [r3, #0]
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	4413      	add	r3, r2
 8001434:	b29a      	uxth	r2, r3
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <vUAFE_uart_handle+0xe8>)
 8001438:	801a      	strh	r2, [r3, #0]
		}

		/* Check for ready to process */
		if((u8arr_uartEvent[u16_lenCnt - 1] == '\n')&&(u8arr_uartEvent[u16_lenCnt - 2]== '\r'))
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <vUAFE_uart_handle+0xe8>)
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	3b01      	subs	r3, #1
 8001440:	4a0e      	ldr	r2, [pc, #56]	; (800147c <vUAFE_uart_handle+0xec>)
 8001442:	5cd3      	ldrb	r3, [r2, r3]
 8001444:	2b0a      	cmp	r3, #10
 8001446:	d10d      	bne.n	8001464 <vUAFE_uart_handle+0xd4>
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <vUAFE_uart_handle+0xe8>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	3b02      	subs	r3, #2
 800144e:	4a0b      	ldr	r2, [pc, #44]	; (800147c <vUAFE_uart_handle+0xec>)
 8001450:	5cd3      	ldrb	r3, [r2, r3]
 8001452:	2b0d      	cmp	r3, #13
 8001454:	d106      	bne.n	8001464 <vUAFE_uart_handle+0xd4>
		{
			bitFlag |= BFLAG_UART_RCV;
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <vUAFE_uart_handle+0xf4>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	b2da      	uxtb	r2, r3
 8001460:	4b08      	ldr	r3, [pc, #32]	; (8001484 <vUAFE_uart_handle+0xf4>)
 8001462:	701a      	strb	r2, [r3, #0]
		}

	}

	u16_oldPos = Size;
 8001464:	4a03      	ldr	r2, [pc, #12]	; (8001474 <vUAFE_uart_handle+0xe4>)
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	8013      	strh	r3, [r2, #0]
}
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200004b8 	.word	0x200004b8
 8001478:	200004ba 	.word	0x200004ba
 800147c:	200003b8 	.word	0x200003b8
 8001480:	200002b8 	.word	0x200002b8
 8001484:	200004bc 	.word	0x200004bc

08001488 <HAL_UARTEx_RxEventCallback>:
/*****************************************************************
 * @name HAL_UARTEx_RxEventCallback
 * @brief
 ****************************************************************/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	807b      	strh	r3, [r7, #2]
	#ifdef RX_EVENT_CB
		if (huart->Instance == USART2)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a08      	ldr	r2, [pc, #32]	; (80014bc <HAL_UARTEx_RxEventCallback+0x34>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d109      	bne.n	80014b2 <HAL_UARTEx_RxEventCallback+0x2a>
		{
			vUAFE_uart_handle(Size);
 800149e:	887b      	ldrh	r3, [r7, #2]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff75 	bl	8001390 <vUAFE_uart_handle>
			HAL_UARTEx_ReceiveToIdle_DMA(&huart2, u8arr_eventBuff, UART_BUF_SZ);
 80014a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014aa:	4905      	ldr	r1, [pc, #20]	; (80014c0 <HAL_UARTEx_RxEventCallback+0x38>)
 80014ac:	4805      	ldr	r0, [pc, #20]	; (80014c4 <HAL_UARTEx_RxEventCallback+0x3c>)
 80014ae:	f005 fcb8 	bl	8006e22 <HAL_UARTEx_ReceiveToIdle_DMA>
		}
	#endif
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40004400 	.word	0x40004400
 80014c0:	200002b8 	.word	0x200002b8
 80014c4:	200000f0 	.word	0x200000f0

080014c8 <Error_Handler>:


/*******************************************************************
  * @brief  This function is executed in case of error occurrence.
  ******************************************************************/
void Error_Handler(void) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  printf("\r\nerror handler!!!\r\n");
 80014cc:	4806      	ldr	r0, [pc, #24]	; (80014e8 <Error_Handler+0x20>)
 80014ce:	f006 fed3 	bl	8008278 <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d2:	b672      	cpsid	i
}
 80014d4:	bf00      	nop
  __disable_irq();

  while (1) {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80014d6:	2120      	movs	r1, #32
 80014d8:	4804      	ldr	r0, [pc, #16]	; (80014ec <Error_Handler+0x24>)
 80014da:	f002 fe46 	bl	800416a <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 80014de:	2032      	movs	r0, #50	; 0x32
 80014e0:	f001 ff50 	bl	8003384 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80014e4:	e7f7      	b.n	80014d6 <Error_Handler+0xe>
 80014e6:	bf00      	nop
 80014e8:	0800938c 	.word	0x0800938c
 80014ec:	40020000 	.word	0x40020000

080014f0 <serial_init>:
static uint8_t u8arr_uart[UART_BUF_SZ];
static uint8_t u8idx;

/* Public functions definitions */
void serial_init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* initialize serial */
  stdin_init(&hstdin, &huart2, u8arr_buffer, UART_BUF_SZ);
 80014f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014f8:	4a06      	ldr	r2, [pc, #24]	; (8001514 <serial_init+0x24>)
 80014fa:	4907      	ldr	r1, [pc, #28]	; (8001518 <serial_init+0x28>)
 80014fc:	4807      	ldr	r0, [pc, #28]	; (800151c <serial_init+0x2c>)
 80014fe:	f000 f865 	bl	80015cc <stdin_init>
  stdin_set_callback(&hstdin, stdin_callback);
 8001502:	4907      	ldr	r1, [pc, #28]	; (8001520 <serial_init+0x30>)
 8001504:	4805      	ldr	r0, [pc, #20]	; (800151c <serial_init+0x2c>)
 8001506:	f000 f878 	bl	80015fa <stdin_set_callback>
  stdin_start(&hstdin);
 800150a:	4804      	ldr	r0, [pc, #16]	; (800151c <serial_init+0x2c>)
 800150c:	f000 f896 	bl	800163c <stdin_start>
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200004d0 	.word	0x200004d0
 8001518:	200000f0 	.word	0x200000f0
 800151c:	200004c0 	.word	0x200004c0
 8001520:	0800154d 	.word	0x0800154d

08001524 <serial_handlerUART>:

void serial_handlerUART(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  stdin_irq_uart(&hstdin);
 8001528:	4802      	ldr	r0, [pc, #8]	; (8001534 <serial_handlerUART+0x10>)
 800152a:	f001 fbf5 	bl	8002d18 <stdin_irq_uart>
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	200004c0 	.word	0x200004c0

08001538 <serial_handlerDMA>:

void serial_handlerDMA(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  stdin_irq_dma(&hstdin);
 800153c:	4802      	ldr	r0, [pc, #8]	; (8001548 <serial_handlerDMA+0x10>)
 800153e:	f000 f8b3 	bl	80016a8 <stdin_irq_dma>
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200004c0 	.word	0x200004c0

0800154c <stdin_callback>:

/* Private function definitions */
static void stdin_callback(uint8_t *u8p_buffer, uint16_t u16_size)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	807b      	strh	r3, [r7, #2]
	//printf("UART RX Handler\r\n\n");

	memcpy(&u8arr_uart[u8idx], u8p_buffer, u16_size);
 8001558:	4b1a      	ldr	r3, [pc, #104]	; (80015c4 <stdin_callback+0x78>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <stdin_callback+0x7c>)
 8001560:	4413      	add	r3, r2
 8001562:	887a      	ldrh	r2, [r7, #2]
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	4618      	mov	r0, r3
 8001568:	f006 fdea 	bl	8008140 <memcpy>
	u8idx += u16_size;
 800156c:	887b      	ldrh	r3, [r7, #2]
 800156e:	b2da      	uxtb	r2, r3
 8001570:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <stdin_callback+0x78>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	4413      	add	r3, r2
 8001576:	b2da      	uxtb	r2, r3
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <stdin_callback+0x78>)
 800157a:	701a      	strb	r2, [r3, #0]

	if((u8p_buffer[u16_size - 1] == '\n')&&(u8p_buffer[u16_size - 2]== '\r'))
 800157c:	887b      	ldrh	r3, [r7, #2]
 800157e:	3b01      	subs	r3, #1
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	4413      	add	r3, r2
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b0a      	cmp	r3, #10
 8001588:	d118      	bne.n	80015bc <stdin_callback+0x70>
 800158a:	887b      	ldrh	r3, [r7, #2]
 800158c:	3b02      	subs	r3, #2
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b0d      	cmp	r3, #13
 8001596:	d111      	bne.n	80015bc <stdin_callback+0x70>
	{
		uartProcessing (u8arr_uart, u8idx - 2);
 8001598:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <stdin_callback+0x78>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	b29b      	uxth	r3, r3
 800159e:	3b02      	subs	r3, #2
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	4619      	mov	r1, r3
 80015a4:	4808      	ldr	r0, [pc, #32]	; (80015c8 <stdin_callback+0x7c>)
 80015a6:	f7ff fee5 	bl	8001374 <uartProcessing>
		memset(u8arr_uart, 0, UART_BUF_SZ);
 80015aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ae:	2100      	movs	r1, #0
 80015b0:	4805      	ldr	r0, [pc, #20]	; (80015c8 <stdin_callback+0x7c>)
 80015b2:	f006 fdd3 	bl	800815c <memset>
		u8idx = 0;
 80015b6:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <stdin_callback+0x78>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
	}
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	200006d0 	.word	0x200006d0
 80015c8:	200005d0 	.word	0x200005d0

080015cc <stdin_init>:
static void fill_buffer(stdin_t *in, uint16_t pos, uint16_t size);

/* Public function implementations
 * --------------------------------------------*/
void stdin_init(stdin_t *in, UART_HandleTypeDef *uart, uint8_t *buffer, uint16_t size)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
 80015d8:	807b      	strh	r3, [r7, #2]
  in->huart = uart;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	68ba      	ldr	r2, [r7, #8]
 80015de:	601a      	str	r2, [r3, #0]
  in->buffer = buffer;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	609a      	str	r2, [r3, #8]
  in->size = size;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	887a      	ldrh	r2, [r7, #2]
 80015ea:	819a      	strh	r2, [r3, #12]

  stdin_flush(in);
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f000 f812 	bl	8001616 <stdin_flush>
}
 80015f2:	bf00      	nop
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <stdin_set_callback>:

void stdin_set_callback(stdin_t *in, stdin_callback_t cb)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	6039      	str	r1, [r7, #0]
  in->callback = cb;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	605a      	str	r2, [r3, #4]
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <stdin_flush>:

void stdin_flush(stdin_t *in)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  memset(in->buffer, 0, in->size);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6898      	ldr	r0, [r3, #8]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	899b      	ldrh	r3, [r3, #12]
 8001626:	461a      	mov	r2, r3
 8001628:	2100      	movs	r1, #0
 800162a:	f006 fd97 	bl	800815c <memset>
  in->pos = 0;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	81da      	strh	r2, [r3, #14]
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <stdin_start>:

HAL_StatusTypeDef stdin_start(stdin_t *in)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Enable interrupts */
  __HAL_UART_ENABLE_IT(in->huart, UART_IT_IDLE);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68da      	ldr	r2, [r3, #12]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f042 0210 	orr.w	r2, r2, #16
 8001656:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(HDMA(in), DMA_IT_TC);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f042 0210 	orr.w	r2, r2, #16
 800166e:	601a      	str	r2, [r3, #0]
  __HAL_DMA_ENABLE_IT(HDMA(in), DMA_IT_HT);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f042 0208 	orr.w	r2, r2, #8
 8001686:	601a      	str	r2, [r3, #0]

  /* Start receiving UART in DMA mode */
  status = HAL_UART_Receive_DMA(in->huart, in->buffer, in->size);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6818      	ldr	r0, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6899      	ldr	r1, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	899b      	ldrh	r3, [r3, #12]
 8001694:	461a      	mov	r2, r3
 8001696:	f005 fb94 	bl	8006dc2 <HAL_UART_Receive_DMA>
 800169a:	4603      	mov	r3, r0
 800169c:	73fb      	strb	r3, [r7, #15]
  return (status);
 800169e:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <stdin_irq_dma>:
  status = HAL_UART_DMAStop(in->huart);
  return (status);
}

void stdin_irq_dma(stdin_t *in)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Handle HT interrupt */
  if (__HAL_DMA_GET_IT_SOURCE(HDMA(in), DMA_IT_HT))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 823c 	beq.w	8001b3c <stdin_irq_dma+0x494>
  {
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_HT_FLAG_INDEX(HDMA(in)));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b7f      	ldr	r3, [pc, #508]	; (80018cc <stdin_irq_dma+0x224>)
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d978      	bls.n	80017c6 <stdin_irq_dma+0x11e>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a7c      	ldr	r2, [pc, #496]	; (80018d0 <stdin_irq_dma+0x228>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d06d      	beq.n	80017be <stdin_irq_dma+0x116>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a7a      	ldr	r2, [pc, #488]	; (80018d4 <stdin_irq_dma+0x22c>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d064      	beq.n	80017ba <stdin_irq_dma+0x112>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a77      	ldr	r2, [pc, #476]	; (80018d8 <stdin_irq_dma+0x230>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d05b      	beq.n	80017b6 <stdin_irq_dma+0x10e>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a75      	ldr	r2, [pc, #468]	; (80018dc <stdin_irq_dma+0x234>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d052      	beq.n	80017b2 <stdin_irq_dma+0x10a>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a72      	ldr	r2, [pc, #456]	; (80018e0 <stdin_irq_dma+0x238>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d048      	beq.n	80017ac <stdin_irq_dma+0x104>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a70      	ldr	r2, [pc, #448]	; (80018e4 <stdin_irq_dma+0x23c>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d03e      	beq.n	80017a6 <stdin_irq_dma+0xfe>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a6d      	ldr	r2, [pc, #436]	; (80018e8 <stdin_irq_dma+0x240>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d034      	beq.n	80017a0 <stdin_irq_dma+0xf8>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a6b      	ldr	r2, [pc, #428]	; (80018ec <stdin_irq_dma+0x244>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d02a      	beq.n	800179a <stdin_irq_dma+0xf2>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a68      	ldr	r2, [pc, #416]	; (80018f0 <stdin_irq_dma+0x248>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d020      	beq.n	8001794 <stdin_irq_dma+0xec>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a66      	ldr	r2, [pc, #408]	; (80018f4 <stdin_irq_dma+0x24c>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d016      	beq.n	800178e <stdin_irq_dma+0xe6>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a63      	ldr	r2, [pc, #396]	; (80018f8 <stdin_irq_dma+0x250>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d00c      	beq.n	8001788 <stdin_irq_dma+0xe0>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a61      	ldr	r2, [pc, #388]	; (80018fc <stdin_irq_dma+0x254>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d102      	bne.n	8001782 <stdin_irq_dma+0xda>
 800177c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001780:	e01e      	b.n	80017c0 <stdin_irq_dma+0x118>
 8001782:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001786:	e01b      	b.n	80017c0 <stdin_irq_dma+0x118>
 8001788:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800178c:	e018      	b.n	80017c0 <stdin_irq_dma+0x118>
 800178e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001792:	e015      	b.n	80017c0 <stdin_irq_dma+0x118>
 8001794:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001798:	e012      	b.n	80017c0 <stdin_irq_dma+0x118>
 800179a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800179e:	e00f      	b.n	80017c0 <stdin_irq_dma+0x118>
 80017a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017a4:	e00c      	b.n	80017c0 <stdin_irq_dma+0x118>
 80017a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017aa:	e009      	b.n	80017c0 <stdin_irq_dma+0x118>
 80017ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017b0:	e006      	b.n	80017c0 <stdin_irq_dma+0x118>
 80017b2:	2310      	movs	r3, #16
 80017b4:	e004      	b.n	80017c0 <stdin_irq_dma+0x118>
 80017b6:	2310      	movs	r3, #16
 80017b8:	e002      	b.n	80017c0 <stdin_irq_dma+0x118>
 80017ba:	2310      	movs	r3, #16
 80017bc:	e000      	b.n	80017c0 <stdin_irq_dma+0x118>
 80017be:	2310      	movs	r3, #16
 80017c0:	4a4f      	ldr	r2, [pc, #316]	; (8001900 <stdin_irq_dma+0x258>)
 80017c2:	60d3      	str	r3, [r2, #12]
 80017c4:	e199      	b.n	8001afa <stdin_irq_dma+0x452>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	461a      	mov	r2, r3
 80017d0:	4b4c      	ldr	r3, [pc, #304]	; (8001904 <stdin_irq_dma+0x25c>)
 80017d2:	429a      	cmp	r2, r3
 80017d4:	f240 8098 	bls.w	8001908 <stdin_irq_dma+0x260>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a3b      	ldr	r2, [pc, #236]	; (80018d0 <stdin_irq_dma+0x228>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d06d      	beq.n	80018c2 <stdin_irq_dma+0x21a>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a39      	ldr	r2, [pc, #228]	; (80018d4 <stdin_irq_dma+0x22c>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d064      	beq.n	80018be <stdin_irq_dma+0x216>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a36      	ldr	r2, [pc, #216]	; (80018d8 <stdin_irq_dma+0x230>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d05b      	beq.n	80018ba <stdin_irq_dma+0x212>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a34      	ldr	r2, [pc, #208]	; (80018dc <stdin_irq_dma+0x234>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d052      	beq.n	80018b6 <stdin_irq_dma+0x20e>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a31      	ldr	r2, [pc, #196]	; (80018e0 <stdin_irq_dma+0x238>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d048      	beq.n	80018b0 <stdin_irq_dma+0x208>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a2f      	ldr	r2, [pc, #188]	; (80018e4 <stdin_irq_dma+0x23c>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d03e      	beq.n	80018aa <stdin_irq_dma+0x202>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a2c      	ldr	r2, [pc, #176]	; (80018e8 <stdin_irq_dma+0x240>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d034      	beq.n	80018a4 <stdin_irq_dma+0x1fc>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a2a      	ldr	r2, [pc, #168]	; (80018ec <stdin_irq_dma+0x244>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d02a      	beq.n	800189e <stdin_irq_dma+0x1f6>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a27      	ldr	r2, [pc, #156]	; (80018f0 <stdin_irq_dma+0x248>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d020      	beq.n	8001898 <stdin_irq_dma+0x1f0>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a25      	ldr	r2, [pc, #148]	; (80018f4 <stdin_irq_dma+0x24c>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d016      	beq.n	8001892 <stdin_irq_dma+0x1ea>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a22      	ldr	r2, [pc, #136]	; (80018f8 <stdin_irq_dma+0x250>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d00c      	beq.n	800188c <stdin_irq_dma+0x1e4>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a20      	ldr	r2, [pc, #128]	; (80018fc <stdin_irq_dma+0x254>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d102      	bne.n	8001886 <stdin_irq_dma+0x1de>
 8001880:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001884:	e01e      	b.n	80018c4 <stdin_irq_dma+0x21c>
 8001886:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800188a:	e01b      	b.n	80018c4 <stdin_irq_dma+0x21c>
 800188c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001890:	e018      	b.n	80018c4 <stdin_irq_dma+0x21c>
 8001892:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001896:	e015      	b.n	80018c4 <stdin_irq_dma+0x21c>
 8001898:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800189c:	e012      	b.n	80018c4 <stdin_irq_dma+0x21c>
 800189e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018a2:	e00f      	b.n	80018c4 <stdin_irq_dma+0x21c>
 80018a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018a8:	e00c      	b.n	80018c4 <stdin_irq_dma+0x21c>
 80018aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018ae:	e009      	b.n	80018c4 <stdin_irq_dma+0x21c>
 80018b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018b4:	e006      	b.n	80018c4 <stdin_irq_dma+0x21c>
 80018b6:	2310      	movs	r3, #16
 80018b8:	e004      	b.n	80018c4 <stdin_irq_dma+0x21c>
 80018ba:	2310      	movs	r3, #16
 80018bc:	e002      	b.n	80018c4 <stdin_irq_dma+0x21c>
 80018be:	2310      	movs	r3, #16
 80018c0:	e000      	b.n	80018c4 <stdin_irq_dma+0x21c>
 80018c2:	2310      	movs	r3, #16
 80018c4:	4a0e      	ldr	r2, [pc, #56]	; (8001900 <stdin_irq_dma+0x258>)
 80018c6:	6093      	str	r3, [r2, #8]
 80018c8:	e117      	b.n	8001afa <stdin_irq_dma+0x452>
 80018ca:	bf00      	nop
 80018cc:	40026458 	.word	0x40026458
 80018d0:	40026010 	.word	0x40026010
 80018d4:	40026410 	.word	0x40026410
 80018d8:	40026070 	.word	0x40026070
 80018dc:	40026470 	.word	0x40026470
 80018e0:	40026028 	.word	0x40026028
 80018e4:	40026428 	.word	0x40026428
 80018e8:	40026088 	.word	0x40026088
 80018ec:	40026488 	.word	0x40026488
 80018f0:	40026040 	.word	0x40026040
 80018f4:	40026440 	.word	0x40026440
 80018f8:	400260a0 	.word	0x400260a0
 80018fc:	400264a0 	.word	0x400264a0
 8001900:	40026400 	.word	0x40026400
 8001904:	400260b8 	.word	0x400260b8
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	4b7c      	ldr	r3, [pc, #496]	; (8001b04 <stdin_irq_dma+0x45c>)
 8001914:	429a      	cmp	r2, r3
 8001916:	d978      	bls.n	8001a0a <stdin_irq_dma+0x362>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a79      	ldr	r2, [pc, #484]	; (8001b08 <stdin_irq_dma+0x460>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d06d      	beq.n	8001a02 <stdin_irq_dma+0x35a>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a77      	ldr	r2, [pc, #476]	; (8001b0c <stdin_irq_dma+0x464>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d064      	beq.n	80019fe <stdin_irq_dma+0x356>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a74      	ldr	r2, [pc, #464]	; (8001b10 <stdin_irq_dma+0x468>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d05b      	beq.n	80019fa <stdin_irq_dma+0x352>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a72      	ldr	r2, [pc, #456]	; (8001b14 <stdin_irq_dma+0x46c>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d052      	beq.n	80019f6 <stdin_irq_dma+0x34e>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a6f      	ldr	r2, [pc, #444]	; (8001b18 <stdin_irq_dma+0x470>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d048      	beq.n	80019f0 <stdin_irq_dma+0x348>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a6d      	ldr	r2, [pc, #436]	; (8001b1c <stdin_irq_dma+0x474>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d03e      	beq.n	80019ea <stdin_irq_dma+0x342>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a6a      	ldr	r2, [pc, #424]	; (8001b20 <stdin_irq_dma+0x478>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d034      	beq.n	80019e4 <stdin_irq_dma+0x33c>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a68      	ldr	r2, [pc, #416]	; (8001b24 <stdin_irq_dma+0x47c>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d02a      	beq.n	80019de <stdin_irq_dma+0x336>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a65      	ldr	r2, [pc, #404]	; (8001b28 <stdin_irq_dma+0x480>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d020      	beq.n	80019d8 <stdin_irq_dma+0x330>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a63      	ldr	r2, [pc, #396]	; (8001b2c <stdin_irq_dma+0x484>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d016      	beq.n	80019d2 <stdin_irq_dma+0x32a>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a60      	ldr	r2, [pc, #384]	; (8001b30 <stdin_irq_dma+0x488>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d00c      	beq.n	80019cc <stdin_irq_dma+0x324>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a5e      	ldr	r2, [pc, #376]	; (8001b34 <stdin_irq_dma+0x48c>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d102      	bne.n	80019c6 <stdin_irq_dma+0x31e>
 80019c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019c4:	e01e      	b.n	8001a04 <stdin_irq_dma+0x35c>
 80019c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80019ca:	e01b      	b.n	8001a04 <stdin_irq_dma+0x35c>
 80019cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019d0:	e018      	b.n	8001a04 <stdin_irq_dma+0x35c>
 80019d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019d6:	e015      	b.n	8001a04 <stdin_irq_dma+0x35c>
 80019d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019dc:	e012      	b.n	8001a04 <stdin_irq_dma+0x35c>
 80019de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019e2:	e00f      	b.n	8001a04 <stdin_irq_dma+0x35c>
 80019e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019e8:	e00c      	b.n	8001a04 <stdin_irq_dma+0x35c>
 80019ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ee:	e009      	b.n	8001a04 <stdin_irq_dma+0x35c>
 80019f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019f4:	e006      	b.n	8001a04 <stdin_irq_dma+0x35c>
 80019f6:	2310      	movs	r3, #16
 80019f8:	e004      	b.n	8001a04 <stdin_irq_dma+0x35c>
 80019fa:	2310      	movs	r3, #16
 80019fc:	e002      	b.n	8001a04 <stdin_irq_dma+0x35c>
 80019fe:	2310      	movs	r3, #16
 8001a00:	e000      	b.n	8001a04 <stdin_irq_dma+0x35c>
 8001a02:	2310      	movs	r3, #16
 8001a04:	4a4c      	ldr	r2, [pc, #304]	; (8001b38 <stdin_irq_dma+0x490>)
 8001a06:	60d3      	str	r3, [r2, #12]
 8001a08:	e077      	b.n	8001afa <stdin_irq_dma+0x452>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a3d      	ldr	r2, [pc, #244]	; (8001b08 <stdin_irq_dma+0x460>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d06d      	beq.n	8001af4 <stdin_irq_dma+0x44c>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a3a      	ldr	r2, [pc, #232]	; (8001b0c <stdin_irq_dma+0x464>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d064      	beq.n	8001af0 <stdin_irq_dma+0x448>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a38      	ldr	r2, [pc, #224]	; (8001b10 <stdin_irq_dma+0x468>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d05b      	beq.n	8001aec <stdin_irq_dma+0x444>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a35      	ldr	r2, [pc, #212]	; (8001b14 <stdin_irq_dma+0x46c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d052      	beq.n	8001ae8 <stdin_irq_dma+0x440>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a33      	ldr	r2, [pc, #204]	; (8001b18 <stdin_irq_dma+0x470>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d048      	beq.n	8001ae2 <stdin_irq_dma+0x43a>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a30      	ldr	r2, [pc, #192]	; (8001b1c <stdin_irq_dma+0x474>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d03e      	beq.n	8001adc <stdin_irq_dma+0x434>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a2e      	ldr	r2, [pc, #184]	; (8001b20 <stdin_irq_dma+0x478>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d034      	beq.n	8001ad6 <stdin_irq_dma+0x42e>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a2b      	ldr	r2, [pc, #172]	; (8001b24 <stdin_irq_dma+0x47c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d02a      	beq.n	8001ad0 <stdin_irq_dma+0x428>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a29      	ldr	r2, [pc, #164]	; (8001b28 <stdin_irq_dma+0x480>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d020      	beq.n	8001aca <stdin_irq_dma+0x422>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a26      	ldr	r2, [pc, #152]	; (8001b2c <stdin_irq_dma+0x484>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d016      	beq.n	8001ac4 <stdin_irq_dma+0x41c>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a24      	ldr	r2, [pc, #144]	; (8001b30 <stdin_irq_dma+0x488>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d00c      	beq.n	8001abe <stdin_irq_dma+0x416>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a21      	ldr	r2, [pc, #132]	; (8001b34 <stdin_irq_dma+0x48c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d102      	bne.n	8001ab8 <stdin_irq_dma+0x410>
 8001ab2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ab6:	e01e      	b.n	8001af6 <stdin_irq_dma+0x44e>
 8001ab8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001abc:	e01b      	b.n	8001af6 <stdin_irq_dma+0x44e>
 8001abe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ac2:	e018      	b.n	8001af6 <stdin_irq_dma+0x44e>
 8001ac4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ac8:	e015      	b.n	8001af6 <stdin_irq_dma+0x44e>
 8001aca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ace:	e012      	b.n	8001af6 <stdin_irq_dma+0x44e>
 8001ad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ad4:	e00f      	b.n	8001af6 <stdin_irq_dma+0x44e>
 8001ad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ada:	e00c      	b.n	8001af6 <stdin_irq_dma+0x44e>
 8001adc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ae0:	e009      	b.n	8001af6 <stdin_irq_dma+0x44e>
 8001ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ae6:	e006      	b.n	8001af6 <stdin_irq_dma+0x44e>
 8001ae8:	2310      	movs	r3, #16
 8001aea:	e004      	b.n	8001af6 <stdin_irq_dma+0x44e>
 8001aec:	2310      	movs	r3, #16
 8001aee:	e002      	b.n	8001af6 <stdin_irq_dma+0x44e>
 8001af0:	2310      	movs	r3, #16
 8001af2:	e000      	b.n	8001af6 <stdin_irq_dma+0x44e>
 8001af4:	2310      	movs	r3, #16
 8001af6:	4a10      	ldr	r2, [pc, #64]	; (8001b38 <stdin_irq_dma+0x490>)
 8001af8:	6093      	str	r3, [r2, #8]
    check_buffer(in);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f001 f92c 	bl	8002d58 <check_buffer>
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_FE_FLAG_INDEX(HDMA(in)));
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_DME_FLAG_INDEX(HDMA(in)));

    HAL_UART_Receive_DMA(in->huart, in->buffer, in->size);
  }
}
 8001b00:	f001 b8ea 	b.w	8002cd8 <stdin_irq_dma+0x1630>
 8001b04:	40026058 	.word	0x40026058
 8001b08:	40026010 	.word	0x40026010
 8001b0c:	40026410 	.word	0x40026410
 8001b10:	40026070 	.word	0x40026070
 8001b14:	40026470 	.word	0x40026470
 8001b18:	40026028 	.word	0x40026028
 8001b1c:	40026428 	.word	0x40026428
 8001b20:	40026088 	.word	0x40026088
 8001b24:	40026488 	.word	0x40026488
 8001b28:	40026040 	.word	0x40026040
 8001b2c:	40026440 	.word	0x40026440
 8001b30:	400260a0 	.word	0x400260a0
 8001b34:	400264a0 	.word	0x400264a0
 8001b38:	40026000 	.word	0x40026000
  else if (__HAL_DMA_GET_IT_SOURCE(HDMA(in), DMA_IT_TC))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0310 	and.w	r3, r3, #16
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 823c 	beq.w	8001fc8 <stdin_irq_dma+0x920>
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_TC_FLAG_INDEX(HDMA(in)));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b7f      	ldr	r3, [pc, #508]	; (8001d58 <stdin_irq_dma+0x6b0>)
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d978      	bls.n	8001c52 <stdin_irq_dma+0x5aa>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a7c      	ldr	r2, [pc, #496]	; (8001d5c <stdin_irq_dma+0x6b4>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d06d      	beq.n	8001c4a <stdin_irq_dma+0x5a2>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a7a      	ldr	r2, [pc, #488]	; (8001d60 <stdin_irq_dma+0x6b8>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d064      	beq.n	8001c46 <stdin_irq_dma+0x59e>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a77      	ldr	r2, [pc, #476]	; (8001d64 <stdin_irq_dma+0x6bc>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d05b      	beq.n	8001c42 <stdin_irq_dma+0x59a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a75      	ldr	r2, [pc, #468]	; (8001d68 <stdin_irq_dma+0x6c0>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d052      	beq.n	8001c3e <stdin_irq_dma+0x596>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a72      	ldr	r2, [pc, #456]	; (8001d6c <stdin_irq_dma+0x6c4>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d048      	beq.n	8001c38 <stdin_irq_dma+0x590>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a70      	ldr	r2, [pc, #448]	; (8001d70 <stdin_irq_dma+0x6c8>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d03e      	beq.n	8001c32 <stdin_irq_dma+0x58a>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a6d      	ldr	r2, [pc, #436]	; (8001d74 <stdin_irq_dma+0x6cc>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d034      	beq.n	8001c2c <stdin_irq_dma+0x584>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a6b      	ldr	r2, [pc, #428]	; (8001d78 <stdin_irq_dma+0x6d0>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d02a      	beq.n	8001c26 <stdin_irq_dma+0x57e>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a68      	ldr	r2, [pc, #416]	; (8001d7c <stdin_irq_dma+0x6d4>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d020      	beq.n	8001c20 <stdin_irq_dma+0x578>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a66      	ldr	r2, [pc, #408]	; (8001d80 <stdin_irq_dma+0x6d8>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d016      	beq.n	8001c1a <stdin_irq_dma+0x572>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a63      	ldr	r2, [pc, #396]	; (8001d84 <stdin_irq_dma+0x6dc>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d00c      	beq.n	8001c14 <stdin_irq_dma+0x56c>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a61      	ldr	r2, [pc, #388]	; (8001d88 <stdin_irq_dma+0x6e0>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d102      	bne.n	8001c0e <stdin_irq_dma+0x566>
 8001c08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c0c:	e01e      	b.n	8001c4c <stdin_irq_dma+0x5a4>
 8001c0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001c12:	e01b      	b.n	8001c4c <stdin_irq_dma+0x5a4>
 8001c14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c18:	e018      	b.n	8001c4c <stdin_irq_dma+0x5a4>
 8001c1a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c1e:	e015      	b.n	8001c4c <stdin_irq_dma+0x5a4>
 8001c20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c24:	e012      	b.n	8001c4c <stdin_irq_dma+0x5a4>
 8001c26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c2a:	e00f      	b.n	8001c4c <stdin_irq_dma+0x5a4>
 8001c2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c30:	e00c      	b.n	8001c4c <stdin_irq_dma+0x5a4>
 8001c32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c36:	e009      	b.n	8001c4c <stdin_irq_dma+0x5a4>
 8001c38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c3c:	e006      	b.n	8001c4c <stdin_irq_dma+0x5a4>
 8001c3e:	2320      	movs	r3, #32
 8001c40:	e004      	b.n	8001c4c <stdin_irq_dma+0x5a4>
 8001c42:	2320      	movs	r3, #32
 8001c44:	e002      	b.n	8001c4c <stdin_irq_dma+0x5a4>
 8001c46:	2320      	movs	r3, #32
 8001c48:	e000      	b.n	8001c4c <stdin_irq_dma+0x5a4>
 8001c4a:	2320      	movs	r3, #32
 8001c4c:	4a4f      	ldr	r2, [pc, #316]	; (8001d8c <stdin_irq_dma+0x6e4>)
 8001c4e:	60d3      	str	r3, [r2, #12]
 8001c50:	e199      	b.n	8001f86 <stdin_irq_dma+0x8de>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	4b4c      	ldr	r3, [pc, #304]	; (8001d90 <stdin_irq_dma+0x6e8>)
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	f240 8098 	bls.w	8001d94 <stdin_irq_dma+0x6ec>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a3b      	ldr	r2, [pc, #236]	; (8001d5c <stdin_irq_dma+0x6b4>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d06d      	beq.n	8001d4e <stdin_irq_dma+0x6a6>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a39      	ldr	r2, [pc, #228]	; (8001d60 <stdin_irq_dma+0x6b8>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d064      	beq.n	8001d4a <stdin_irq_dma+0x6a2>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a36      	ldr	r2, [pc, #216]	; (8001d64 <stdin_irq_dma+0x6bc>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d05b      	beq.n	8001d46 <stdin_irq_dma+0x69e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a34      	ldr	r2, [pc, #208]	; (8001d68 <stdin_irq_dma+0x6c0>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d052      	beq.n	8001d42 <stdin_irq_dma+0x69a>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a31      	ldr	r2, [pc, #196]	; (8001d6c <stdin_irq_dma+0x6c4>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d048      	beq.n	8001d3c <stdin_irq_dma+0x694>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a2f      	ldr	r2, [pc, #188]	; (8001d70 <stdin_irq_dma+0x6c8>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d03e      	beq.n	8001d36 <stdin_irq_dma+0x68e>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a2c      	ldr	r2, [pc, #176]	; (8001d74 <stdin_irq_dma+0x6cc>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d034      	beq.n	8001d30 <stdin_irq_dma+0x688>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a2a      	ldr	r2, [pc, #168]	; (8001d78 <stdin_irq_dma+0x6d0>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d02a      	beq.n	8001d2a <stdin_irq_dma+0x682>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a27      	ldr	r2, [pc, #156]	; (8001d7c <stdin_irq_dma+0x6d4>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d020      	beq.n	8001d24 <stdin_irq_dma+0x67c>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a25      	ldr	r2, [pc, #148]	; (8001d80 <stdin_irq_dma+0x6d8>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d016      	beq.n	8001d1e <stdin_irq_dma+0x676>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a22      	ldr	r2, [pc, #136]	; (8001d84 <stdin_irq_dma+0x6dc>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d00c      	beq.n	8001d18 <stdin_irq_dma+0x670>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a20      	ldr	r2, [pc, #128]	; (8001d88 <stdin_irq_dma+0x6e0>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d102      	bne.n	8001d12 <stdin_irq_dma+0x66a>
 8001d0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d10:	e01e      	b.n	8001d50 <stdin_irq_dma+0x6a8>
 8001d12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001d16:	e01b      	b.n	8001d50 <stdin_irq_dma+0x6a8>
 8001d18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d1c:	e018      	b.n	8001d50 <stdin_irq_dma+0x6a8>
 8001d1e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d22:	e015      	b.n	8001d50 <stdin_irq_dma+0x6a8>
 8001d24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d28:	e012      	b.n	8001d50 <stdin_irq_dma+0x6a8>
 8001d2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d2e:	e00f      	b.n	8001d50 <stdin_irq_dma+0x6a8>
 8001d30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d34:	e00c      	b.n	8001d50 <stdin_irq_dma+0x6a8>
 8001d36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d3a:	e009      	b.n	8001d50 <stdin_irq_dma+0x6a8>
 8001d3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d40:	e006      	b.n	8001d50 <stdin_irq_dma+0x6a8>
 8001d42:	2320      	movs	r3, #32
 8001d44:	e004      	b.n	8001d50 <stdin_irq_dma+0x6a8>
 8001d46:	2320      	movs	r3, #32
 8001d48:	e002      	b.n	8001d50 <stdin_irq_dma+0x6a8>
 8001d4a:	2320      	movs	r3, #32
 8001d4c:	e000      	b.n	8001d50 <stdin_irq_dma+0x6a8>
 8001d4e:	2320      	movs	r3, #32
 8001d50:	4a0e      	ldr	r2, [pc, #56]	; (8001d8c <stdin_irq_dma+0x6e4>)
 8001d52:	6093      	str	r3, [r2, #8]
 8001d54:	e117      	b.n	8001f86 <stdin_irq_dma+0x8de>
 8001d56:	bf00      	nop
 8001d58:	40026458 	.word	0x40026458
 8001d5c:	40026010 	.word	0x40026010
 8001d60:	40026410 	.word	0x40026410
 8001d64:	40026070 	.word	0x40026070
 8001d68:	40026470 	.word	0x40026470
 8001d6c:	40026028 	.word	0x40026028
 8001d70:	40026428 	.word	0x40026428
 8001d74:	40026088 	.word	0x40026088
 8001d78:	40026488 	.word	0x40026488
 8001d7c:	40026040 	.word	0x40026040
 8001d80:	40026440 	.word	0x40026440
 8001d84:	400260a0 	.word	0x400260a0
 8001d88:	400264a0 	.word	0x400264a0
 8001d8c:	40026400 	.word	0x40026400
 8001d90:	400260b8 	.word	0x400260b8
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4b7c      	ldr	r3, [pc, #496]	; (8001f90 <stdin_irq_dma+0x8e8>)
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d978      	bls.n	8001e96 <stdin_irq_dma+0x7ee>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a79      	ldr	r2, [pc, #484]	; (8001f94 <stdin_irq_dma+0x8ec>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d06d      	beq.n	8001e8e <stdin_irq_dma+0x7e6>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a77      	ldr	r2, [pc, #476]	; (8001f98 <stdin_irq_dma+0x8f0>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d064      	beq.n	8001e8a <stdin_irq_dma+0x7e2>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a74      	ldr	r2, [pc, #464]	; (8001f9c <stdin_irq_dma+0x8f4>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d05b      	beq.n	8001e86 <stdin_irq_dma+0x7de>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a72      	ldr	r2, [pc, #456]	; (8001fa0 <stdin_irq_dma+0x8f8>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d052      	beq.n	8001e82 <stdin_irq_dma+0x7da>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a6f      	ldr	r2, [pc, #444]	; (8001fa4 <stdin_irq_dma+0x8fc>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d048      	beq.n	8001e7c <stdin_irq_dma+0x7d4>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a6d      	ldr	r2, [pc, #436]	; (8001fa8 <stdin_irq_dma+0x900>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d03e      	beq.n	8001e76 <stdin_irq_dma+0x7ce>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a6a      	ldr	r2, [pc, #424]	; (8001fac <stdin_irq_dma+0x904>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d034      	beq.n	8001e70 <stdin_irq_dma+0x7c8>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a68      	ldr	r2, [pc, #416]	; (8001fb0 <stdin_irq_dma+0x908>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d02a      	beq.n	8001e6a <stdin_irq_dma+0x7c2>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a65      	ldr	r2, [pc, #404]	; (8001fb4 <stdin_irq_dma+0x90c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d020      	beq.n	8001e64 <stdin_irq_dma+0x7bc>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a63      	ldr	r2, [pc, #396]	; (8001fb8 <stdin_irq_dma+0x910>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d016      	beq.n	8001e5e <stdin_irq_dma+0x7b6>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a60      	ldr	r2, [pc, #384]	; (8001fbc <stdin_irq_dma+0x914>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d00c      	beq.n	8001e58 <stdin_irq_dma+0x7b0>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a5e      	ldr	r2, [pc, #376]	; (8001fc0 <stdin_irq_dma+0x918>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d102      	bne.n	8001e52 <stdin_irq_dma+0x7aa>
 8001e4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e50:	e01e      	b.n	8001e90 <stdin_irq_dma+0x7e8>
 8001e52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001e56:	e01b      	b.n	8001e90 <stdin_irq_dma+0x7e8>
 8001e58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e5c:	e018      	b.n	8001e90 <stdin_irq_dma+0x7e8>
 8001e5e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e62:	e015      	b.n	8001e90 <stdin_irq_dma+0x7e8>
 8001e64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e68:	e012      	b.n	8001e90 <stdin_irq_dma+0x7e8>
 8001e6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e6e:	e00f      	b.n	8001e90 <stdin_irq_dma+0x7e8>
 8001e70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e74:	e00c      	b.n	8001e90 <stdin_irq_dma+0x7e8>
 8001e76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e7a:	e009      	b.n	8001e90 <stdin_irq_dma+0x7e8>
 8001e7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e80:	e006      	b.n	8001e90 <stdin_irq_dma+0x7e8>
 8001e82:	2320      	movs	r3, #32
 8001e84:	e004      	b.n	8001e90 <stdin_irq_dma+0x7e8>
 8001e86:	2320      	movs	r3, #32
 8001e88:	e002      	b.n	8001e90 <stdin_irq_dma+0x7e8>
 8001e8a:	2320      	movs	r3, #32
 8001e8c:	e000      	b.n	8001e90 <stdin_irq_dma+0x7e8>
 8001e8e:	2320      	movs	r3, #32
 8001e90:	4a4c      	ldr	r2, [pc, #304]	; (8001fc4 <stdin_irq_dma+0x91c>)
 8001e92:	60d3      	str	r3, [r2, #12]
 8001e94:	e077      	b.n	8001f86 <stdin_irq_dma+0x8de>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a3d      	ldr	r2, [pc, #244]	; (8001f94 <stdin_irq_dma+0x8ec>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d06d      	beq.n	8001f80 <stdin_irq_dma+0x8d8>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a3a      	ldr	r2, [pc, #232]	; (8001f98 <stdin_irq_dma+0x8f0>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d064      	beq.n	8001f7c <stdin_irq_dma+0x8d4>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a38      	ldr	r2, [pc, #224]	; (8001f9c <stdin_irq_dma+0x8f4>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d05b      	beq.n	8001f78 <stdin_irq_dma+0x8d0>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a35      	ldr	r2, [pc, #212]	; (8001fa0 <stdin_irq_dma+0x8f8>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d052      	beq.n	8001f74 <stdin_irq_dma+0x8cc>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a33      	ldr	r2, [pc, #204]	; (8001fa4 <stdin_irq_dma+0x8fc>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d048      	beq.n	8001f6e <stdin_irq_dma+0x8c6>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a30      	ldr	r2, [pc, #192]	; (8001fa8 <stdin_irq_dma+0x900>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d03e      	beq.n	8001f68 <stdin_irq_dma+0x8c0>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a2e      	ldr	r2, [pc, #184]	; (8001fac <stdin_irq_dma+0x904>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d034      	beq.n	8001f62 <stdin_irq_dma+0x8ba>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a2b      	ldr	r2, [pc, #172]	; (8001fb0 <stdin_irq_dma+0x908>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d02a      	beq.n	8001f5c <stdin_irq_dma+0x8b4>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a29      	ldr	r2, [pc, #164]	; (8001fb4 <stdin_irq_dma+0x90c>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d020      	beq.n	8001f56 <stdin_irq_dma+0x8ae>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a26      	ldr	r2, [pc, #152]	; (8001fb8 <stdin_irq_dma+0x910>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d016      	beq.n	8001f50 <stdin_irq_dma+0x8a8>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a24      	ldr	r2, [pc, #144]	; (8001fbc <stdin_irq_dma+0x914>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d00c      	beq.n	8001f4a <stdin_irq_dma+0x8a2>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a21      	ldr	r2, [pc, #132]	; (8001fc0 <stdin_irq_dma+0x918>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d102      	bne.n	8001f44 <stdin_irq_dma+0x89c>
 8001f3e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f42:	e01e      	b.n	8001f82 <stdin_irq_dma+0x8da>
 8001f44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001f48:	e01b      	b.n	8001f82 <stdin_irq_dma+0x8da>
 8001f4a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f4e:	e018      	b.n	8001f82 <stdin_irq_dma+0x8da>
 8001f50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f54:	e015      	b.n	8001f82 <stdin_irq_dma+0x8da>
 8001f56:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f5a:	e012      	b.n	8001f82 <stdin_irq_dma+0x8da>
 8001f5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f60:	e00f      	b.n	8001f82 <stdin_irq_dma+0x8da>
 8001f62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f66:	e00c      	b.n	8001f82 <stdin_irq_dma+0x8da>
 8001f68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f6c:	e009      	b.n	8001f82 <stdin_irq_dma+0x8da>
 8001f6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f72:	e006      	b.n	8001f82 <stdin_irq_dma+0x8da>
 8001f74:	2320      	movs	r3, #32
 8001f76:	e004      	b.n	8001f82 <stdin_irq_dma+0x8da>
 8001f78:	2320      	movs	r3, #32
 8001f7a:	e002      	b.n	8001f82 <stdin_irq_dma+0x8da>
 8001f7c:	2320      	movs	r3, #32
 8001f7e:	e000      	b.n	8001f82 <stdin_irq_dma+0x8da>
 8001f80:	2320      	movs	r3, #32
 8001f82:	4a10      	ldr	r2, [pc, #64]	; (8001fc4 <stdin_irq_dma+0x91c>)
 8001f84:	6093      	str	r3, [r2, #8]
    check_buffer(in);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 fee6 	bl	8002d58 <check_buffer>
}
 8001f8c:	f000 bea4 	b.w	8002cd8 <stdin_irq_dma+0x1630>
 8001f90:	40026058 	.word	0x40026058
 8001f94:	40026010 	.word	0x40026010
 8001f98:	40026410 	.word	0x40026410
 8001f9c:	40026070 	.word	0x40026070
 8001fa0:	40026470 	.word	0x40026470
 8001fa4:	40026028 	.word	0x40026028
 8001fa8:	40026428 	.word	0x40026428
 8001fac:	40026088 	.word	0x40026088
 8001fb0:	40026488 	.word	0x40026488
 8001fb4:	40026040 	.word	0x40026040
 8001fb8:	40026440 	.word	0x40026440
 8001fbc:	400260a0 	.word	0x400260a0
 8001fc0:	400264a0 	.word	0x400264a0
 8001fc4:	40026000 	.word	0x40026000
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_TE_FLAG_INDEX(HDMA(in)));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4b7f      	ldr	r3, [pc, #508]	; (80021d0 <stdin_irq_dma+0xb28>)
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d978      	bls.n	80020ca <stdin_irq_dma+0xa22>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a7c      	ldr	r2, [pc, #496]	; (80021d4 <stdin_irq_dma+0xb2c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d06d      	beq.n	80020c2 <stdin_irq_dma+0xa1a>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a7a      	ldr	r2, [pc, #488]	; (80021d8 <stdin_irq_dma+0xb30>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d064      	beq.n	80020be <stdin_irq_dma+0xa16>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a77      	ldr	r2, [pc, #476]	; (80021dc <stdin_irq_dma+0xb34>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d05b      	beq.n	80020ba <stdin_irq_dma+0xa12>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a75      	ldr	r2, [pc, #468]	; (80021e0 <stdin_irq_dma+0xb38>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d052      	beq.n	80020b6 <stdin_irq_dma+0xa0e>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a72      	ldr	r2, [pc, #456]	; (80021e4 <stdin_irq_dma+0xb3c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d048      	beq.n	80020b0 <stdin_irq_dma+0xa08>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a70      	ldr	r2, [pc, #448]	; (80021e8 <stdin_irq_dma+0xb40>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d03e      	beq.n	80020aa <stdin_irq_dma+0xa02>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a6d      	ldr	r2, [pc, #436]	; (80021ec <stdin_irq_dma+0xb44>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d034      	beq.n	80020a4 <stdin_irq_dma+0x9fc>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a6b      	ldr	r2, [pc, #428]	; (80021f0 <stdin_irq_dma+0xb48>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d02a      	beq.n	800209e <stdin_irq_dma+0x9f6>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a68      	ldr	r2, [pc, #416]	; (80021f4 <stdin_irq_dma+0xb4c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d020      	beq.n	8002098 <stdin_irq_dma+0x9f0>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a66      	ldr	r2, [pc, #408]	; (80021f8 <stdin_irq_dma+0xb50>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d016      	beq.n	8002092 <stdin_irq_dma+0x9ea>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a63      	ldr	r2, [pc, #396]	; (80021fc <stdin_irq_dma+0xb54>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d00c      	beq.n	800208c <stdin_irq_dma+0x9e4>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a61      	ldr	r2, [pc, #388]	; (8002200 <stdin_irq_dma+0xb58>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d102      	bne.n	8002086 <stdin_irq_dma+0x9de>
 8002080:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002084:	e01e      	b.n	80020c4 <stdin_irq_dma+0xa1c>
 8002086:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800208a:	e01b      	b.n	80020c4 <stdin_irq_dma+0xa1c>
 800208c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002090:	e018      	b.n	80020c4 <stdin_irq_dma+0xa1c>
 8002092:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002096:	e015      	b.n	80020c4 <stdin_irq_dma+0xa1c>
 8002098:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800209c:	e012      	b.n	80020c4 <stdin_irq_dma+0xa1c>
 800209e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020a2:	e00f      	b.n	80020c4 <stdin_irq_dma+0xa1c>
 80020a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020a8:	e00c      	b.n	80020c4 <stdin_irq_dma+0xa1c>
 80020aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020ae:	e009      	b.n	80020c4 <stdin_irq_dma+0xa1c>
 80020b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020b4:	e006      	b.n	80020c4 <stdin_irq_dma+0xa1c>
 80020b6:	2308      	movs	r3, #8
 80020b8:	e004      	b.n	80020c4 <stdin_irq_dma+0xa1c>
 80020ba:	2308      	movs	r3, #8
 80020bc:	e002      	b.n	80020c4 <stdin_irq_dma+0xa1c>
 80020be:	2308      	movs	r3, #8
 80020c0:	e000      	b.n	80020c4 <stdin_irq_dma+0xa1c>
 80020c2:	2308      	movs	r3, #8
 80020c4:	4a4f      	ldr	r2, [pc, #316]	; (8002204 <stdin_irq_dma+0xb5c>)
 80020c6:	60d3      	str	r3, [r2, #12]
 80020c8:	e1b7      	b.n	800243a <stdin_irq_dma+0xd92>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	461a      	mov	r2, r3
 80020d4:	4b4c      	ldr	r3, [pc, #304]	; (8002208 <stdin_irq_dma+0xb60>)
 80020d6:	429a      	cmp	r2, r3
 80020d8:	f240 8098 	bls.w	800220c <stdin_irq_dma+0xb64>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a3b      	ldr	r2, [pc, #236]	; (80021d4 <stdin_irq_dma+0xb2c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d06d      	beq.n	80021c6 <stdin_irq_dma+0xb1e>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a39      	ldr	r2, [pc, #228]	; (80021d8 <stdin_irq_dma+0xb30>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d064      	beq.n	80021c2 <stdin_irq_dma+0xb1a>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a36      	ldr	r2, [pc, #216]	; (80021dc <stdin_irq_dma+0xb34>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d05b      	beq.n	80021be <stdin_irq_dma+0xb16>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a34      	ldr	r2, [pc, #208]	; (80021e0 <stdin_irq_dma+0xb38>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d052      	beq.n	80021ba <stdin_irq_dma+0xb12>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a31      	ldr	r2, [pc, #196]	; (80021e4 <stdin_irq_dma+0xb3c>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d048      	beq.n	80021b4 <stdin_irq_dma+0xb0c>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a2f      	ldr	r2, [pc, #188]	; (80021e8 <stdin_irq_dma+0xb40>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d03e      	beq.n	80021ae <stdin_irq_dma+0xb06>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a2c      	ldr	r2, [pc, #176]	; (80021ec <stdin_irq_dma+0xb44>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d034      	beq.n	80021a8 <stdin_irq_dma+0xb00>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a2a      	ldr	r2, [pc, #168]	; (80021f0 <stdin_irq_dma+0xb48>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d02a      	beq.n	80021a2 <stdin_irq_dma+0xafa>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a27      	ldr	r2, [pc, #156]	; (80021f4 <stdin_irq_dma+0xb4c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d020      	beq.n	800219c <stdin_irq_dma+0xaf4>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a25      	ldr	r2, [pc, #148]	; (80021f8 <stdin_irq_dma+0xb50>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d016      	beq.n	8002196 <stdin_irq_dma+0xaee>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a22      	ldr	r2, [pc, #136]	; (80021fc <stdin_irq_dma+0xb54>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00c      	beq.n	8002190 <stdin_irq_dma+0xae8>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a20      	ldr	r2, [pc, #128]	; (8002200 <stdin_irq_dma+0xb58>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d102      	bne.n	800218a <stdin_irq_dma+0xae2>
 8002184:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002188:	e01e      	b.n	80021c8 <stdin_irq_dma+0xb20>
 800218a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800218e:	e01b      	b.n	80021c8 <stdin_irq_dma+0xb20>
 8002190:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002194:	e018      	b.n	80021c8 <stdin_irq_dma+0xb20>
 8002196:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800219a:	e015      	b.n	80021c8 <stdin_irq_dma+0xb20>
 800219c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80021a0:	e012      	b.n	80021c8 <stdin_irq_dma+0xb20>
 80021a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021a6:	e00f      	b.n	80021c8 <stdin_irq_dma+0xb20>
 80021a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ac:	e00c      	b.n	80021c8 <stdin_irq_dma+0xb20>
 80021ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021b2:	e009      	b.n	80021c8 <stdin_irq_dma+0xb20>
 80021b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021b8:	e006      	b.n	80021c8 <stdin_irq_dma+0xb20>
 80021ba:	2308      	movs	r3, #8
 80021bc:	e004      	b.n	80021c8 <stdin_irq_dma+0xb20>
 80021be:	2308      	movs	r3, #8
 80021c0:	e002      	b.n	80021c8 <stdin_irq_dma+0xb20>
 80021c2:	2308      	movs	r3, #8
 80021c4:	e000      	b.n	80021c8 <stdin_irq_dma+0xb20>
 80021c6:	2308      	movs	r3, #8
 80021c8:	4a0e      	ldr	r2, [pc, #56]	; (8002204 <stdin_irq_dma+0xb5c>)
 80021ca:	6093      	str	r3, [r2, #8]
 80021cc:	e135      	b.n	800243a <stdin_irq_dma+0xd92>
 80021ce:	bf00      	nop
 80021d0:	40026458 	.word	0x40026458
 80021d4:	40026010 	.word	0x40026010
 80021d8:	40026410 	.word	0x40026410
 80021dc:	40026070 	.word	0x40026070
 80021e0:	40026470 	.word	0x40026470
 80021e4:	40026028 	.word	0x40026028
 80021e8:	40026428 	.word	0x40026428
 80021ec:	40026088 	.word	0x40026088
 80021f0:	40026488 	.word	0x40026488
 80021f4:	40026040 	.word	0x40026040
 80021f8:	40026440 	.word	0x40026440
 80021fc:	400260a0 	.word	0x400260a0
 8002200:	400264a0 	.word	0x400264a0
 8002204:	40026400 	.word	0x40026400
 8002208:	400260b8 	.word	0x400260b8
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	461a      	mov	r2, r3
 8002216:	4b79      	ldr	r3, [pc, #484]	; (80023fc <stdin_irq_dma+0xd54>)
 8002218:	429a      	cmp	r2, r3
 800221a:	d978      	bls.n	800230e <stdin_irq_dma+0xc66>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a76      	ldr	r2, [pc, #472]	; (8002400 <stdin_irq_dma+0xd58>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d06d      	beq.n	8002306 <stdin_irq_dma+0xc5e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a74      	ldr	r2, [pc, #464]	; (8002404 <stdin_irq_dma+0xd5c>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d064      	beq.n	8002302 <stdin_irq_dma+0xc5a>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a71      	ldr	r2, [pc, #452]	; (8002408 <stdin_irq_dma+0xd60>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d05b      	beq.n	80022fe <stdin_irq_dma+0xc56>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a6f      	ldr	r2, [pc, #444]	; (800240c <stdin_irq_dma+0xd64>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d052      	beq.n	80022fa <stdin_irq_dma+0xc52>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a6c      	ldr	r2, [pc, #432]	; (8002410 <stdin_irq_dma+0xd68>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d048      	beq.n	80022f4 <stdin_irq_dma+0xc4c>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a6a      	ldr	r2, [pc, #424]	; (8002414 <stdin_irq_dma+0xd6c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d03e      	beq.n	80022ee <stdin_irq_dma+0xc46>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a67      	ldr	r2, [pc, #412]	; (8002418 <stdin_irq_dma+0xd70>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d034      	beq.n	80022e8 <stdin_irq_dma+0xc40>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a65      	ldr	r2, [pc, #404]	; (800241c <stdin_irq_dma+0xd74>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d02a      	beq.n	80022e2 <stdin_irq_dma+0xc3a>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a62      	ldr	r2, [pc, #392]	; (8002420 <stdin_irq_dma+0xd78>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d020      	beq.n	80022dc <stdin_irq_dma+0xc34>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a60      	ldr	r2, [pc, #384]	; (8002424 <stdin_irq_dma+0xd7c>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d016      	beq.n	80022d6 <stdin_irq_dma+0xc2e>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a5d      	ldr	r2, [pc, #372]	; (8002428 <stdin_irq_dma+0xd80>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d00c      	beq.n	80022d0 <stdin_irq_dma+0xc28>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a5b      	ldr	r2, [pc, #364]	; (800242c <stdin_irq_dma+0xd84>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d102      	bne.n	80022ca <stdin_irq_dma+0xc22>
 80022c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80022c8:	e01e      	b.n	8002308 <stdin_irq_dma+0xc60>
 80022ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ce:	e01b      	b.n	8002308 <stdin_irq_dma+0xc60>
 80022d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80022d4:	e018      	b.n	8002308 <stdin_irq_dma+0xc60>
 80022d6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80022da:	e015      	b.n	8002308 <stdin_irq_dma+0xc60>
 80022dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80022e0:	e012      	b.n	8002308 <stdin_irq_dma+0xc60>
 80022e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022e6:	e00f      	b.n	8002308 <stdin_irq_dma+0xc60>
 80022e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022ec:	e00c      	b.n	8002308 <stdin_irq_dma+0xc60>
 80022ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022f2:	e009      	b.n	8002308 <stdin_irq_dma+0xc60>
 80022f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022f8:	e006      	b.n	8002308 <stdin_irq_dma+0xc60>
 80022fa:	2308      	movs	r3, #8
 80022fc:	e004      	b.n	8002308 <stdin_irq_dma+0xc60>
 80022fe:	2308      	movs	r3, #8
 8002300:	e002      	b.n	8002308 <stdin_irq_dma+0xc60>
 8002302:	2308      	movs	r3, #8
 8002304:	e000      	b.n	8002308 <stdin_irq_dma+0xc60>
 8002306:	2308      	movs	r3, #8
 8002308:	4a49      	ldr	r2, [pc, #292]	; (8002430 <stdin_irq_dma+0xd88>)
 800230a:	60d3      	str	r3, [r2, #12]
 800230c:	e095      	b.n	800243a <stdin_irq_dma+0xd92>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a3a      	ldr	r2, [pc, #232]	; (8002400 <stdin_irq_dma+0xd58>)
 8002318:	4293      	cmp	r3, r2
 800231a:	f000 808b 	beq.w	8002434 <stdin_irq_dma+0xd8c>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a37      	ldr	r2, [pc, #220]	; (8002404 <stdin_irq_dma+0xd5c>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d064      	beq.n	80023f6 <stdin_irq_dma+0xd4e>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a34      	ldr	r2, [pc, #208]	; (8002408 <stdin_irq_dma+0xd60>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d05b      	beq.n	80023f2 <stdin_irq_dma+0xd4a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a32      	ldr	r2, [pc, #200]	; (800240c <stdin_irq_dma+0xd64>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d052      	beq.n	80023ee <stdin_irq_dma+0xd46>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a2f      	ldr	r2, [pc, #188]	; (8002410 <stdin_irq_dma+0xd68>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d048      	beq.n	80023e8 <stdin_irq_dma+0xd40>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a2d      	ldr	r2, [pc, #180]	; (8002414 <stdin_irq_dma+0xd6c>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d03e      	beq.n	80023e2 <stdin_irq_dma+0xd3a>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a2a      	ldr	r2, [pc, #168]	; (8002418 <stdin_irq_dma+0xd70>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d034      	beq.n	80023dc <stdin_irq_dma+0xd34>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a28      	ldr	r2, [pc, #160]	; (800241c <stdin_irq_dma+0xd74>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d02a      	beq.n	80023d6 <stdin_irq_dma+0xd2e>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a25      	ldr	r2, [pc, #148]	; (8002420 <stdin_irq_dma+0xd78>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d020      	beq.n	80023d0 <stdin_irq_dma+0xd28>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a23      	ldr	r2, [pc, #140]	; (8002424 <stdin_irq_dma+0xd7c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d016      	beq.n	80023ca <stdin_irq_dma+0xd22>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a20      	ldr	r2, [pc, #128]	; (8002428 <stdin_irq_dma+0xd80>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d00c      	beq.n	80023c4 <stdin_irq_dma+0xd1c>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a1e      	ldr	r2, [pc, #120]	; (800242c <stdin_irq_dma+0xd84>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d102      	bne.n	80023be <stdin_irq_dma+0xd16>
 80023b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80023bc:	e03b      	b.n	8002436 <stdin_irq_dma+0xd8e>
 80023be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023c2:	e038      	b.n	8002436 <stdin_irq_dma+0xd8e>
 80023c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80023c8:	e035      	b.n	8002436 <stdin_irq_dma+0xd8e>
 80023ca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80023ce:	e032      	b.n	8002436 <stdin_irq_dma+0xd8e>
 80023d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80023d4:	e02f      	b.n	8002436 <stdin_irq_dma+0xd8e>
 80023d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023da:	e02c      	b.n	8002436 <stdin_irq_dma+0xd8e>
 80023dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023e0:	e029      	b.n	8002436 <stdin_irq_dma+0xd8e>
 80023e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023e6:	e026      	b.n	8002436 <stdin_irq_dma+0xd8e>
 80023e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023ec:	e023      	b.n	8002436 <stdin_irq_dma+0xd8e>
 80023ee:	2308      	movs	r3, #8
 80023f0:	e021      	b.n	8002436 <stdin_irq_dma+0xd8e>
 80023f2:	2308      	movs	r3, #8
 80023f4:	e01f      	b.n	8002436 <stdin_irq_dma+0xd8e>
 80023f6:	2308      	movs	r3, #8
 80023f8:	e01d      	b.n	8002436 <stdin_irq_dma+0xd8e>
 80023fa:	bf00      	nop
 80023fc:	40026058 	.word	0x40026058
 8002400:	40026010 	.word	0x40026010
 8002404:	40026410 	.word	0x40026410
 8002408:	40026070 	.word	0x40026070
 800240c:	40026470 	.word	0x40026470
 8002410:	40026028 	.word	0x40026028
 8002414:	40026428 	.word	0x40026428
 8002418:	40026088 	.word	0x40026088
 800241c:	40026488 	.word	0x40026488
 8002420:	40026040 	.word	0x40026040
 8002424:	40026440 	.word	0x40026440
 8002428:	400260a0 	.word	0x400260a0
 800242c:	400264a0 	.word	0x400264a0
 8002430:	40026000 	.word	0x40026000
 8002434:	2308      	movs	r3, #8
 8002436:	4a7e      	ldr	r2, [pc, #504]	; (8002630 <stdin_irq_dma+0xf88>)
 8002438:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_FE_FLAG_INDEX(HDMA(in)));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	461a      	mov	r2, r3
 8002444:	4b7b      	ldr	r3, [pc, #492]	; (8002634 <stdin_irq_dma+0xf8c>)
 8002446:	429a      	cmp	r2, r3
 8002448:	d974      	bls.n	8002534 <stdin_irq_dma+0xe8c>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a79      	ldr	r2, [pc, #484]	; (8002638 <stdin_irq_dma+0xf90>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d069      	beq.n	800252c <stdin_irq_dma+0xe84>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a76      	ldr	r2, [pc, #472]	; (800263c <stdin_irq_dma+0xf94>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d060      	beq.n	8002528 <stdin_irq_dma+0xe80>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a74      	ldr	r2, [pc, #464]	; (8002640 <stdin_irq_dma+0xf98>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d057      	beq.n	8002524 <stdin_irq_dma+0xe7c>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a71      	ldr	r2, [pc, #452]	; (8002644 <stdin_irq_dma+0xf9c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d04e      	beq.n	8002520 <stdin_irq_dma+0xe78>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a6f      	ldr	r2, [pc, #444]	; (8002648 <stdin_irq_dma+0xfa0>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d045      	beq.n	800251c <stdin_irq_dma+0xe74>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a6c      	ldr	r2, [pc, #432]	; (800264c <stdin_irq_dma+0xfa4>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d03c      	beq.n	8002518 <stdin_irq_dma+0xe70>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a6a      	ldr	r2, [pc, #424]	; (8002650 <stdin_irq_dma+0xfa8>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d033      	beq.n	8002514 <stdin_irq_dma+0xe6c>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a67      	ldr	r2, [pc, #412]	; (8002654 <stdin_irq_dma+0xfac>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d02a      	beq.n	8002510 <stdin_irq_dma+0xe68>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a65      	ldr	r2, [pc, #404]	; (8002658 <stdin_irq_dma+0xfb0>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d020      	beq.n	800250a <stdin_irq_dma+0xe62>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a62      	ldr	r2, [pc, #392]	; (800265c <stdin_irq_dma+0xfb4>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d016      	beq.n	8002504 <stdin_irq_dma+0xe5c>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a60      	ldr	r2, [pc, #384]	; (8002660 <stdin_irq_dma+0xfb8>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d00c      	beq.n	80024fe <stdin_irq_dma+0xe56>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a5d      	ldr	r2, [pc, #372]	; (8002664 <stdin_irq_dma+0xfbc>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d102      	bne.n	80024f8 <stdin_irq_dma+0xe50>
 80024f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024f6:	e01a      	b.n	800252e <stdin_irq_dma+0xe86>
 80024f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024fc:	e017      	b.n	800252e <stdin_irq_dma+0xe86>
 80024fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002502:	e014      	b.n	800252e <stdin_irq_dma+0xe86>
 8002504:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002508:	e011      	b.n	800252e <stdin_irq_dma+0xe86>
 800250a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800250e:	e00e      	b.n	800252e <stdin_irq_dma+0xe86>
 8002510:	2340      	movs	r3, #64	; 0x40
 8002512:	e00c      	b.n	800252e <stdin_irq_dma+0xe86>
 8002514:	2340      	movs	r3, #64	; 0x40
 8002516:	e00a      	b.n	800252e <stdin_irq_dma+0xe86>
 8002518:	2340      	movs	r3, #64	; 0x40
 800251a:	e008      	b.n	800252e <stdin_irq_dma+0xe86>
 800251c:	2340      	movs	r3, #64	; 0x40
 800251e:	e006      	b.n	800252e <stdin_irq_dma+0xe86>
 8002520:	2301      	movs	r3, #1
 8002522:	e004      	b.n	800252e <stdin_irq_dma+0xe86>
 8002524:	2301      	movs	r3, #1
 8002526:	e002      	b.n	800252e <stdin_irq_dma+0xe86>
 8002528:	2301      	movs	r3, #1
 800252a:	e000      	b.n	800252e <stdin_irq_dma+0xe86>
 800252c:	2301      	movs	r3, #1
 800252e:	4a4e      	ldr	r2, [pc, #312]	; (8002668 <stdin_irq_dma+0xfc0>)
 8002530:	60d3      	str	r3, [r2, #12]
 8002532:	e1ac      	b.n	800288e <stdin_irq_dma+0x11e6>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	461a      	mov	r2, r3
 800253e:	4b4b      	ldr	r3, [pc, #300]	; (800266c <stdin_irq_dma+0xfc4>)
 8002540:	429a      	cmp	r2, r3
 8002542:	f240 8095 	bls.w	8002670 <stdin_irq_dma+0xfc8>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a3a      	ldr	r2, [pc, #232]	; (8002638 <stdin_irq_dma+0xf90>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d069      	beq.n	8002628 <stdin_irq_dma+0xf80>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a37      	ldr	r2, [pc, #220]	; (800263c <stdin_irq_dma+0xf94>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d060      	beq.n	8002624 <stdin_irq_dma+0xf7c>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a35      	ldr	r2, [pc, #212]	; (8002640 <stdin_irq_dma+0xf98>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d057      	beq.n	8002620 <stdin_irq_dma+0xf78>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a32      	ldr	r2, [pc, #200]	; (8002644 <stdin_irq_dma+0xf9c>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d04e      	beq.n	800261c <stdin_irq_dma+0xf74>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a30      	ldr	r2, [pc, #192]	; (8002648 <stdin_irq_dma+0xfa0>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d045      	beq.n	8002618 <stdin_irq_dma+0xf70>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a2d      	ldr	r2, [pc, #180]	; (800264c <stdin_irq_dma+0xfa4>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d03c      	beq.n	8002614 <stdin_irq_dma+0xf6c>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a2b      	ldr	r2, [pc, #172]	; (8002650 <stdin_irq_dma+0xfa8>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d033      	beq.n	8002610 <stdin_irq_dma+0xf68>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a28      	ldr	r2, [pc, #160]	; (8002654 <stdin_irq_dma+0xfac>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d02a      	beq.n	800260c <stdin_irq_dma+0xf64>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a26      	ldr	r2, [pc, #152]	; (8002658 <stdin_irq_dma+0xfb0>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d020      	beq.n	8002606 <stdin_irq_dma+0xf5e>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a23      	ldr	r2, [pc, #140]	; (800265c <stdin_irq_dma+0xfb4>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d016      	beq.n	8002600 <stdin_irq_dma+0xf58>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a21      	ldr	r2, [pc, #132]	; (8002660 <stdin_irq_dma+0xfb8>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d00c      	beq.n	80025fa <stdin_irq_dma+0xf52>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a1e      	ldr	r2, [pc, #120]	; (8002664 <stdin_irq_dma+0xfbc>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d102      	bne.n	80025f4 <stdin_irq_dma+0xf4c>
 80025ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025f2:	e01a      	b.n	800262a <stdin_irq_dma+0xf82>
 80025f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025f8:	e017      	b.n	800262a <stdin_irq_dma+0xf82>
 80025fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025fe:	e014      	b.n	800262a <stdin_irq_dma+0xf82>
 8002600:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002604:	e011      	b.n	800262a <stdin_irq_dma+0xf82>
 8002606:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800260a:	e00e      	b.n	800262a <stdin_irq_dma+0xf82>
 800260c:	2340      	movs	r3, #64	; 0x40
 800260e:	e00c      	b.n	800262a <stdin_irq_dma+0xf82>
 8002610:	2340      	movs	r3, #64	; 0x40
 8002612:	e00a      	b.n	800262a <stdin_irq_dma+0xf82>
 8002614:	2340      	movs	r3, #64	; 0x40
 8002616:	e008      	b.n	800262a <stdin_irq_dma+0xf82>
 8002618:	2340      	movs	r3, #64	; 0x40
 800261a:	e006      	b.n	800262a <stdin_irq_dma+0xf82>
 800261c:	2301      	movs	r3, #1
 800261e:	e004      	b.n	800262a <stdin_irq_dma+0xf82>
 8002620:	2301      	movs	r3, #1
 8002622:	e002      	b.n	800262a <stdin_irq_dma+0xf82>
 8002624:	2301      	movs	r3, #1
 8002626:	e000      	b.n	800262a <stdin_irq_dma+0xf82>
 8002628:	2301      	movs	r3, #1
 800262a:	4a0f      	ldr	r2, [pc, #60]	; (8002668 <stdin_irq_dma+0xfc0>)
 800262c:	6093      	str	r3, [r2, #8]
 800262e:	e12e      	b.n	800288e <stdin_irq_dma+0x11e6>
 8002630:	40026000 	.word	0x40026000
 8002634:	40026458 	.word	0x40026458
 8002638:	40026010 	.word	0x40026010
 800263c:	40026410 	.word	0x40026410
 8002640:	40026070 	.word	0x40026070
 8002644:	40026470 	.word	0x40026470
 8002648:	40026028 	.word	0x40026028
 800264c:	40026428 	.word	0x40026428
 8002650:	40026088 	.word	0x40026088
 8002654:	40026488 	.word	0x40026488
 8002658:	40026040 	.word	0x40026040
 800265c:	40026440 	.word	0x40026440
 8002660:	400260a0 	.word	0x400260a0
 8002664:	400264a0 	.word	0x400264a0
 8002668:	40026400 	.word	0x40026400
 800266c:	400260b8 	.word	0x400260b8
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	461a      	mov	r2, r3
 800267a:	4b75      	ldr	r3, [pc, #468]	; (8002850 <stdin_irq_dma+0x11a8>)
 800267c:	429a      	cmp	r2, r3
 800267e:	d974      	bls.n	800276a <stdin_irq_dma+0x10c2>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a72      	ldr	r2, [pc, #456]	; (8002854 <stdin_irq_dma+0x11ac>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d069      	beq.n	8002762 <stdin_irq_dma+0x10ba>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a70      	ldr	r2, [pc, #448]	; (8002858 <stdin_irq_dma+0x11b0>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d060      	beq.n	800275e <stdin_irq_dma+0x10b6>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a6d      	ldr	r2, [pc, #436]	; (800285c <stdin_irq_dma+0x11b4>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d057      	beq.n	800275a <stdin_irq_dma+0x10b2>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a6b      	ldr	r2, [pc, #428]	; (8002860 <stdin_irq_dma+0x11b8>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d04e      	beq.n	8002756 <stdin_irq_dma+0x10ae>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a68      	ldr	r2, [pc, #416]	; (8002864 <stdin_irq_dma+0x11bc>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d045      	beq.n	8002752 <stdin_irq_dma+0x10aa>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a66      	ldr	r2, [pc, #408]	; (8002868 <stdin_irq_dma+0x11c0>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d03c      	beq.n	800274e <stdin_irq_dma+0x10a6>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a63      	ldr	r2, [pc, #396]	; (800286c <stdin_irq_dma+0x11c4>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d033      	beq.n	800274a <stdin_irq_dma+0x10a2>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a61      	ldr	r2, [pc, #388]	; (8002870 <stdin_irq_dma+0x11c8>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d02a      	beq.n	8002746 <stdin_irq_dma+0x109e>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a5e      	ldr	r2, [pc, #376]	; (8002874 <stdin_irq_dma+0x11cc>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d020      	beq.n	8002740 <stdin_irq_dma+0x1098>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a5c      	ldr	r2, [pc, #368]	; (8002878 <stdin_irq_dma+0x11d0>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d016      	beq.n	800273a <stdin_irq_dma+0x1092>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a59      	ldr	r2, [pc, #356]	; (800287c <stdin_irq_dma+0x11d4>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d00c      	beq.n	8002734 <stdin_irq_dma+0x108c>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a57      	ldr	r2, [pc, #348]	; (8002880 <stdin_irq_dma+0x11d8>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d102      	bne.n	800272e <stdin_irq_dma+0x1086>
 8002728:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800272c:	e01a      	b.n	8002764 <stdin_irq_dma+0x10bc>
 800272e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002732:	e017      	b.n	8002764 <stdin_irq_dma+0x10bc>
 8002734:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002738:	e014      	b.n	8002764 <stdin_irq_dma+0x10bc>
 800273a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800273e:	e011      	b.n	8002764 <stdin_irq_dma+0x10bc>
 8002740:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002744:	e00e      	b.n	8002764 <stdin_irq_dma+0x10bc>
 8002746:	2340      	movs	r3, #64	; 0x40
 8002748:	e00c      	b.n	8002764 <stdin_irq_dma+0x10bc>
 800274a:	2340      	movs	r3, #64	; 0x40
 800274c:	e00a      	b.n	8002764 <stdin_irq_dma+0x10bc>
 800274e:	2340      	movs	r3, #64	; 0x40
 8002750:	e008      	b.n	8002764 <stdin_irq_dma+0x10bc>
 8002752:	2340      	movs	r3, #64	; 0x40
 8002754:	e006      	b.n	8002764 <stdin_irq_dma+0x10bc>
 8002756:	2301      	movs	r3, #1
 8002758:	e004      	b.n	8002764 <stdin_irq_dma+0x10bc>
 800275a:	2301      	movs	r3, #1
 800275c:	e002      	b.n	8002764 <stdin_irq_dma+0x10bc>
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <stdin_irq_dma+0x10bc>
 8002762:	2301      	movs	r3, #1
 8002764:	4a47      	ldr	r2, [pc, #284]	; (8002884 <stdin_irq_dma+0x11dc>)
 8002766:	60d3      	str	r3, [r2, #12]
 8002768:	e091      	b.n	800288e <stdin_irq_dma+0x11e6>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a38      	ldr	r2, [pc, #224]	; (8002854 <stdin_irq_dma+0x11ac>)
 8002774:	4293      	cmp	r3, r2
 8002776:	f000 8087 	beq.w	8002888 <stdin_irq_dma+0x11e0>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a35      	ldr	r2, [pc, #212]	; (8002858 <stdin_irq_dma+0x11b0>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d060      	beq.n	800284a <stdin_irq_dma+0x11a2>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a32      	ldr	r2, [pc, #200]	; (800285c <stdin_irq_dma+0x11b4>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d057      	beq.n	8002846 <stdin_irq_dma+0x119e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a30      	ldr	r2, [pc, #192]	; (8002860 <stdin_irq_dma+0x11b8>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d04e      	beq.n	8002842 <stdin_irq_dma+0x119a>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a2d      	ldr	r2, [pc, #180]	; (8002864 <stdin_irq_dma+0x11bc>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d045      	beq.n	800283e <stdin_irq_dma+0x1196>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a2b      	ldr	r2, [pc, #172]	; (8002868 <stdin_irq_dma+0x11c0>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d03c      	beq.n	800283a <stdin_irq_dma+0x1192>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a28      	ldr	r2, [pc, #160]	; (800286c <stdin_irq_dma+0x11c4>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d033      	beq.n	8002836 <stdin_irq_dma+0x118e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a26      	ldr	r2, [pc, #152]	; (8002870 <stdin_irq_dma+0x11c8>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d02a      	beq.n	8002832 <stdin_irq_dma+0x118a>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a23      	ldr	r2, [pc, #140]	; (8002874 <stdin_irq_dma+0x11cc>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d020      	beq.n	800282c <stdin_irq_dma+0x1184>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a21      	ldr	r2, [pc, #132]	; (8002878 <stdin_irq_dma+0x11d0>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d016      	beq.n	8002826 <stdin_irq_dma+0x117e>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a1e      	ldr	r2, [pc, #120]	; (800287c <stdin_irq_dma+0x11d4>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d00c      	beq.n	8002820 <stdin_irq_dma+0x1178>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a1c      	ldr	r2, [pc, #112]	; (8002880 <stdin_irq_dma+0x11d8>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d102      	bne.n	800281a <stdin_irq_dma+0x1172>
 8002814:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002818:	e037      	b.n	800288a <stdin_irq_dma+0x11e2>
 800281a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800281e:	e034      	b.n	800288a <stdin_irq_dma+0x11e2>
 8002820:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002824:	e031      	b.n	800288a <stdin_irq_dma+0x11e2>
 8002826:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800282a:	e02e      	b.n	800288a <stdin_irq_dma+0x11e2>
 800282c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002830:	e02b      	b.n	800288a <stdin_irq_dma+0x11e2>
 8002832:	2340      	movs	r3, #64	; 0x40
 8002834:	e029      	b.n	800288a <stdin_irq_dma+0x11e2>
 8002836:	2340      	movs	r3, #64	; 0x40
 8002838:	e027      	b.n	800288a <stdin_irq_dma+0x11e2>
 800283a:	2340      	movs	r3, #64	; 0x40
 800283c:	e025      	b.n	800288a <stdin_irq_dma+0x11e2>
 800283e:	2340      	movs	r3, #64	; 0x40
 8002840:	e023      	b.n	800288a <stdin_irq_dma+0x11e2>
 8002842:	2301      	movs	r3, #1
 8002844:	e021      	b.n	800288a <stdin_irq_dma+0x11e2>
 8002846:	2301      	movs	r3, #1
 8002848:	e01f      	b.n	800288a <stdin_irq_dma+0x11e2>
 800284a:	2301      	movs	r3, #1
 800284c:	e01d      	b.n	800288a <stdin_irq_dma+0x11e2>
 800284e:	bf00      	nop
 8002850:	40026058 	.word	0x40026058
 8002854:	40026010 	.word	0x40026010
 8002858:	40026410 	.word	0x40026410
 800285c:	40026070 	.word	0x40026070
 8002860:	40026470 	.word	0x40026470
 8002864:	40026028 	.word	0x40026028
 8002868:	40026428 	.word	0x40026428
 800286c:	40026088 	.word	0x40026088
 8002870:	40026488 	.word	0x40026488
 8002874:	40026040 	.word	0x40026040
 8002878:	40026440 	.word	0x40026440
 800287c:	400260a0 	.word	0x400260a0
 8002880:	400264a0 	.word	0x400264a0
 8002884:	40026000 	.word	0x40026000
 8002888:	2301      	movs	r3, #1
 800288a:	4a82      	ldr	r2, [pc, #520]	; (8002a94 <stdin_irq_dma+0x13ec>)
 800288c:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_DME_FLAG_INDEX(HDMA(in)));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	461a      	mov	r2, r3
 8002898:	4b7f      	ldr	r3, [pc, #508]	; (8002a98 <stdin_irq_dma+0x13f0>)
 800289a:	429a      	cmp	r2, r3
 800289c:	d978      	bls.n	8002990 <stdin_irq_dma+0x12e8>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a7d      	ldr	r2, [pc, #500]	; (8002a9c <stdin_irq_dma+0x13f4>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d06d      	beq.n	8002988 <stdin_irq_dma+0x12e0>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a7a      	ldr	r2, [pc, #488]	; (8002aa0 <stdin_irq_dma+0x13f8>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d064      	beq.n	8002984 <stdin_irq_dma+0x12dc>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a78      	ldr	r2, [pc, #480]	; (8002aa4 <stdin_irq_dma+0x13fc>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d05b      	beq.n	8002980 <stdin_irq_dma+0x12d8>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a75      	ldr	r2, [pc, #468]	; (8002aa8 <stdin_irq_dma+0x1400>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d052      	beq.n	800297c <stdin_irq_dma+0x12d4>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a73      	ldr	r2, [pc, #460]	; (8002aac <stdin_irq_dma+0x1404>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d048      	beq.n	8002976 <stdin_irq_dma+0x12ce>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a70      	ldr	r2, [pc, #448]	; (8002ab0 <stdin_irq_dma+0x1408>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d03e      	beq.n	8002970 <stdin_irq_dma+0x12c8>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a6e      	ldr	r2, [pc, #440]	; (8002ab4 <stdin_irq_dma+0x140c>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d034      	beq.n	800296a <stdin_irq_dma+0x12c2>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a6b      	ldr	r2, [pc, #428]	; (8002ab8 <stdin_irq_dma+0x1410>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d02a      	beq.n	8002964 <stdin_irq_dma+0x12bc>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a69      	ldr	r2, [pc, #420]	; (8002abc <stdin_irq_dma+0x1414>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d020      	beq.n	800295e <stdin_irq_dma+0x12b6>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a66      	ldr	r2, [pc, #408]	; (8002ac0 <stdin_irq_dma+0x1418>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d016      	beq.n	8002958 <stdin_irq_dma+0x12b0>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a64      	ldr	r2, [pc, #400]	; (8002ac4 <stdin_irq_dma+0x141c>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d00c      	beq.n	8002952 <stdin_irq_dma+0x12aa>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a61      	ldr	r2, [pc, #388]	; (8002ac8 <stdin_irq_dma+0x1420>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d102      	bne.n	800294c <stdin_irq_dma+0x12a4>
 8002946:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800294a:	e01e      	b.n	800298a <stdin_irq_dma+0x12e2>
 800294c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002950:	e01b      	b.n	800298a <stdin_irq_dma+0x12e2>
 8002952:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002956:	e018      	b.n	800298a <stdin_irq_dma+0x12e2>
 8002958:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800295c:	e015      	b.n	800298a <stdin_irq_dma+0x12e2>
 800295e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002962:	e012      	b.n	800298a <stdin_irq_dma+0x12e2>
 8002964:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002968:	e00f      	b.n	800298a <stdin_irq_dma+0x12e2>
 800296a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800296e:	e00c      	b.n	800298a <stdin_irq_dma+0x12e2>
 8002970:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002974:	e009      	b.n	800298a <stdin_irq_dma+0x12e2>
 8002976:	f44f 7380 	mov.w	r3, #256	; 0x100
 800297a:	e006      	b.n	800298a <stdin_irq_dma+0x12e2>
 800297c:	2304      	movs	r3, #4
 800297e:	e004      	b.n	800298a <stdin_irq_dma+0x12e2>
 8002980:	2304      	movs	r3, #4
 8002982:	e002      	b.n	800298a <stdin_irq_dma+0x12e2>
 8002984:	2304      	movs	r3, #4
 8002986:	e000      	b.n	800298a <stdin_irq_dma+0x12e2>
 8002988:	2304      	movs	r3, #4
 800298a:	4a50      	ldr	r2, [pc, #320]	; (8002acc <stdin_irq_dma+0x1424>)
 800298c:	60d3      	str	r3, [r2, #12]
 800298e:	e19a      	b.n	8002cc6 <stdin_irq_dma+0x161e>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	4b4d      	ldr	r3, [pc, #308]	; (8002ad0 <stdin_irq_dma+0x1428>)
 800299c:	429a      	cmp	r2, r3
 800299e:	f240 8099 	bls.w	8002ad4 <stdin_irq_dma+0x142c>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a3c      	ldr	r2, [pc, #240]	; (8002a9c <stdin_irq_dma+0x13f4>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d06d      	beq.n	8002a8c <stdin_irq_dma+0x13e4>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a39      	ldr	r2, [pc, #228]	; (8002aa0 <stdin_irq_dma+0x13f8>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d064      	beq.n	8002a88 <stdin_irq_dma+0x13e0>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a37      	ldr	r2, [pc, #220]	; (8002aa4 <stdin_irq_dma+0x13fc>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d05b      	beq.n	8002a84 <stdin_irq_dma+0x13dc>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a34      	ldr	r2, [pc, #208]	; (8002aa8 <stdin_irq_dma+0x1400>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d052      	beq.n	8002a80 <stdin_irq_dma+0x13d8>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a32      	ldr	r2, [pc, #200]	; (8002aac <stdin_irq_dma+0x1404>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d048      	beq.n	8002a7a <stdin_irq_dma+0x13d2>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a2f      	ldr	r2, [pc, #188]	; (8002ab0 <stdin_irq_dma+0x1408>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d03e      	beq.n	8002a74 <stdin_irq_dma+0x13cc>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a2d      	ldr	r2, [pc, #180]	; (8002ab4 <stdin_irq_dma+0x140c>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d034      	beq.n	8002a6e <stdin_irq_dma+0x13c6>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a2a      	ldr	r2, [pc, #168]	; (8002ab8 <stdin_irq_dma+0x1410>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d02a      	beq.n	8002a68 <stdin_irq_dma+0x13c0>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a28      	ldr	r2, [pc, #160]	; (8002abc <stdin_irq_dma+0x1414>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d020      	beq.n	8002a62 <stdin_irq_dma+0x13ba>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a25      	ldr	r2, [pc, #148]	; (8002ac0 <stdin_irq_dma+0x1418>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d016      	beq.n	8002a5c <stdin_irq_dma+0x13b4>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a23      	ldr	r2, [pc, #140]	; (8002ac4 <stdin_irq_dma+0x141c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d00c      	beq.n	8002a56 <stdin_irq_dma+0x13ae>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a20      	ldr	r2, [pc, #128]	; (8002ac8 <stdin_irq_dma+0x1420>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d102      	bne.n	8002a50 <stdin_irq_dma+0x13a8>
 8002a4a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a4e:	e01e      	b.n	8002a8e <stdin_irq_dma+0x13e6>
 8002a50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a54:	e01b      	b.n	8002a8e <stdin_irq_dma+0x13e6>
 8002a56:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a5a:	e018      	b.n	8002a8e <stdin_irq_dma+0x13e6>
 8002a5c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a60:	e015      	b.n	8002a8e <stdin_irq_dma+0x13e6>
 8002a62:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a66:	e012      	b.n	8002a8e <stdin_irq_dma+0x13e6>
 8002a68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a6c:	e00f      	b.n	8002a8e <stdin_irq_dma+0x13e6>
 8002a6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a72:	e00c      	b.n	8002a8e <stdin_irq_dma+0x13e6>
 8002a74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a78:	e009      	b.n	8002a8e <stdin_irq_dma+0x13e6>
 8002a7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a7e:	e006      	b.n	8002a8e <stdin_irq_dma+0x13e6>
 8002a80:	2304      	movs	r3, #4
 8002a82:	e004      	b.n	8002a8e <stdin_irq_dma+0x13e6>
 8002a84:	2304      	movs	r3, #4
 8002a86:	e002      	b.n	8002a8e <stdin_irq_dma+0x13e6>
 8002a88:	2304      	movs	r3, #4
 8002a8a:	e000      	b.n	8002a8e <stdin_irq_dma+0x13e6>
 8002a8c:	2304      	movs	r3, #4
 8002a8e:	4a0f      	ldr	r2, [pc, #60]	; (8002acc <stdin_irq_dma+0x1424>)
 8002a90:	6093      	str	r3, [r2, #8]
 8002a92:	e118      	b.n	8002cc6 <stdin_irq_dma+0x161e>
 8002a94:	40026000 	.word	0x40026000
 8002a98:	40026458 	.word	0x40026458
 8002a9c:	40026010 	.word	0x40026010
 8002aa0:	40026410 	.word	0x40026410
 8002aa4:	40026070 	.word	0x40026070
 8002aa8:	40026470 	.word	0x40026470
 8002aac:	40026028 	.word	0x40026028
 8002ab0:	40026428 	.word	0x40026428
 8002ab4:	40026088 	.word	0x40026088
 8002ab8:	40026488 	.word	0x40026488
 8002abc:	40026040 	.word	0x40026040
 8002ac0:	40026440 	.word	0x40026440
 8002ac4:	400260a0 	.word	0x400260a0
 8002ac8:	400264a0 	.word	0x400264a0
 8002acc:	40026400 	.word	0x40026400
 8002ad0:	400260b8 	.word	0x400260b8
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	461a      	mov	r2, r3
 8002ade:	4b80      	ldr	r3, [pc, #512]	; (8002ce0 <stdin_irq_dma+0x1638>)
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d978      	bls.n	8002bd6 <stdin_irq_dma+0x152e>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a7d      	ldr	r2, [pc, #500]	; (8002ce4 <stdin_irq_dma+0x163c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d06d      	beq.n	8002bce <stdin_irq_dma+0x1526>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a7b      	ldr	r2, [pc, #492]	; (8002ce8 <stdin_irq_dma+0x1640>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d064      	beq.n	8002bca <stdin_irq_dma+0x1522>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a78      	ldr	r2, [pc, #480]	; (8002cec <stdin_irq_dma+0x1644>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d05b      	beq.n	8002bc6 <stdin_irq_dma+0x151e>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a76      	ldr	r2, [pc, #472]	; (8002cf0 <stdin_irq_dma+0x1648>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d052      	beq.n	8002bc2 <stdin_irq_dma+0x151a>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a73      	ldr	r2, [pc, #460]	; (8002cf4 <stdin_irq_dma+0x164c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d048      	beq.n	8002bbc <stdin_irq_dma+0x1514>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a71      	ldr	r2, [pc, #452]	; (8002cf8 <stdin_irq_dma+0x1650>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d03e      	beq.n	8002bb6 <stdin_irq_dma+0x150e>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a6e      	ldr	r2, [pc, #440]	; (8002cfc <stdin_irq_dma+0x1654>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d034      	beq.n	8002bb0 <stdin_irq_dma+0x1508>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a6c      	ldr	r2, [pc, #432]	; (8002d00 <stdin_irq_dma+0x1658>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d02a      	beq.n	8002baa <stdin_irq_dma+0x1502>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a69      	ldr	r2, [pc, #420]	; (8002d04 <stdin_irq_dma+0x165c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d020      	beq.n	8002ba4 <stdin_irq_dma+0x14fc>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a67      	ldr	r2, [pc, #412]	; (8002d08 <stdin_irq_dma+0x1660>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d016      	beq.n	8002b9e <stdin_irq_dma+0x14f6>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a64      	ldr	r2, [pc, #400]	; (8002d0c <stdin_irq_dma+0x1664>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d00c      	beq.n	8002b98 <stdin_irq_dma+0x14f0>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a62      	ldr	r2, [pc, #392]	; (8002d10 <stdin_irq_dma+0x1668>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d102      	bne.n	8002b92 <stdin_irq_dma+0x14ea>
 8002b8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b90:	e01e      	b.n	8002bd0 <stdin_irq_dma+0x1528>
 8002b92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b96:	e01b      	b.n	8002bd0 <stdin_irq_dma+0x1528>
 8002b98:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b9c:	e018      	b.n	8002bd0 <stdin_irq_dma+0x1528>
 8002b9e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ba2:	e015      	b.n	8002bd0 <stdin_irq_dma+0x1528>
 8002ba4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ba8:	e012      	b.n	8002bd0 <stdin_irq_dma+0x1528>
 8002baa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bae:	e00f      	b.n	8002bd0 <stdin_irq_dma+0x1528>
 8002bb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bb4:	e00c      	b.n	8002bd0 <stdin_irq_dma+0x1528>
 8002bb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bba:	e009      	b.n	8002bd0 <stdin_irq_dma+0x1528>
 8002bbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bc0:	e006      	b.n	8002bd0 <stdin_irq_dma+0x1528>
 8002bc2:	2304      	movs	r3, #4
 8002bc4:	e004      	b.n	8002bd0 <stdin_irq_dma+0x1528>
 8002bc6:	2304      	movs	r3, #4
 8002bc8:	e002      	b.n	8002bd0 <stdin_irq_dma+0x1528>
 8002bca:	2304      	movs	r3, #4
 8002bcc:	e000      	b.n	8002bd0 <stdin_irq_dma+0x1528>
 8002bce:	2304      	movs	r3, #4
 8002bd0:	4a50      	ldr	r2, [pc, #320]	; (8002d14 <stdin_irq_dma+0x166c>)
 8002bd2:	60d3      	str	r3, [r2, #12]
 8002bd4:	e077      	b.n	8002cc6 <stdin_irq_dma+0x161e>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a41      	ldr	r2, [pc, #260]	; (8002ce4 <stdin_irq_dma+0x163c>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d06d      	beq.n	8002cc0 <stdin_irq_dma+0x1618>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a3e      	ldr	r2, [pc, #248]	; (8002ce8 <stdin_irq_dma+0x1640>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d064      	beq.n	8002cbc <stdin_irq_dma+0x1614>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a3c      	ldr	r2, [pc, #240]	; (8002cec <stdin_irq_dma+0x1644>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d05b      	beq.n	8002cb8 <stdin_irq_dma+0x1610>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a39      	ldr	r2, [pc, #228]	; (8002cf0 <stdin_irq_dma+0x1648>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d052      	beq.n	8002cb4 <stdin_irq_dma+0x160c>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a37      	ldr	r2, [pc, #220]	; (8002cf4 <stdin_irq_dma+0x164c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d048      	beq.n	8002cae <stdin_irq_dma+0x1606>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a34      	ldr	r2, [pc, #208]	; (8002cf8 <stdin_irq_dma+0x1650>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d03e      	beq.n	8002ca8 <stdin_irq_dma+0x1600>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a32      	ldr	r2, [pc, #200]	; (8002cfc <stdin_irq_dma+0x1654>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d034      	beq.n	8002ca2 <stdin_irq_dma+0x15fa>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a2f      	ldr	r2, [pc, #188]	; (8002d00 <stdin_irq_dma+0x1658>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d02a      	beq.n	8002c9c <stdin_irq_dma+0x15f4>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a2d      	ldr	r2, [pc, #180]	; (8002d04 <stdin_irq_dma+0x165c>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d020      	beq.n	8002c96 <stdin_irq_dma+0x15ee>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a2a      	ldr	r2, [pc, #168]	; (8002d08 <stdin_irq_dma+0x1660>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d016      	beq.n	8002c90 <stdin_irq_dma+0x15e8>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a28      	ldr	r2, [pc, #160]	; (8002d0c <stdin_irq_dma+0x1664>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d00c      	beq.n	8002c8a <stdin_irq_dma+0x15e2>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a25      	ldr	r2, [pc, #148]	; (8002d10 <stdin_irq_dma+0x1668>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d102      	bne.n	8002c84 <stdin_irq_dma+0x15dc>
 8002c7e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c82:	e01e      	b.n	8002cc2 <stdin_irq_dma+0x161a>
 8002c84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c88:	e01b      	b.n	8002cc2 <stdin_irq_dma+0x161a>
 8002c8a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c8e:	e018      	b.n	8002cc2 <stdin_irq_dma+0x161a>
 8002c90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c94:	e015      	b.n	8002cc2 <stdin_irq_dma+0x161a>
 8002c96:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c9a:	e012      	b.n	8002cc2 <stdin_irq_dma+0x161a>
 8002c9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ca0:	e00f      	b.n	8002cc2 <stdin_irq_dma+0x161a>
 8002ca2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ca6:	e00c      	b.n	8002cc2 <stdin_irq_dma+0x161a>
 8002ca8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cac:	e009      	b.n	8002cc2 <stdin_irq_dma+0x161a>
 8002cae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cb2:	e006      	b.n	8002cc2 <stdin_irq_dma+0x161a>
 8002cb4:	2304      	movs	r3, #4
 8002cb6:	e004      	b.n	8002cc2 <stdin_irq_dma+0x161a>
 8002cb8:	2304      	movs	r3, #4
 8002cba:	e002      	b.n	8002cc2 <stdin_irq_dma+0x161a>
 8002cbc:	2304      	movs	r3, #4
 8002cbe:	e000      	b.n	8002cc2 <stdin_irq_dma+0x161a>
 8002cc0:	2304      	movs	r3, #4
 8002cc2:	4a14      	ldr	r2, [pc, #80]	; (8002d14 <stdin_irq_dma+0x166c>)
 8002cc4:	6093      	str	r3, [r2, #8]
    HAL_UART_Receive_DMA(in->huart, in->buffer, in->size);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6818      	ldr	r0, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6899      	ldr	r1, [r3, #8]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	899b      	ldrh	r3, [r3, #12]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	f004 f875 	bl	8006dc2 <HAL_UART_Receive_DMA>
}
 8002cd8:	bf00      	nop
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40026058 	.word	0x40026058
 8002ce4:	40026010 	.word	0x40026010
 8002ce8:	40026410 	.word	0x40026410
 8002cec:	40026070 	.word	0x40026070
 8002cf0:	40026470 	.word	0x40026470
 8002cf4:	40026028 	.word	0x40026028
 8002cf8:	40026428 	.word	0x40026428
 8002cfc:	40026088 	.word	0x40026088
 8002d00:	40026488 	.word	0x40026488
 8002d04:	40026040 	.word	0x40026040
 8002d08:	40026440 	.word	0x40026440
 8002d0c:	400260a0 	.word	0x400260a0
 8002d10:	400264a0 	.word	0x400264a0
 8002d14:	40026000 	.word	0x40026000

08002d18 <stdin_irq_uart>:

void stdin_irq_uart(stdin_t *in)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  if (__HAL_UART_GET_FLAG(in->huart, UART_FLAG_IDLE))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0310 	and.w	r3, r3, #16
 8002d2c:	2b10      	cmp	r3, #16
 8002d2e:	d10f      	bne.n	8002d50 <stdin_irq_uart+0x38>
  {
    __HAL_UART_CLEAR_IDLEFLAG(in->huart);
 8002d30:	2300      	movs	r3, #0
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]
    check_buffer(in);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f804 	bl	8002d58 <check_buffer>
  }
}
 8002d50:	bf00      	nop
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <check_buffer>:

/* Private function implementations
 * --------------------------------------------*/
static void check_buffer(stdin_t *in)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint16_t pos;
  uint16_t new;

  /* Calculate current position in buffer */
  new = __HAL_DMA_GET_COUNTER(HDMA(in));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	81fb      	strh	r3, [r7, #14]
  pos = in->size - new;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	899a      	ldrh	r2, [r3, #12]
 8002d70:	89fb      	ldrh	r3, [r7, #14]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	81bb      	strh	r3, [r7, #12]

  /* Check change in received data */
  if (pos != in->pos)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	89db      	ldrh	r3, [r3, #14]
 8002d7a:	89ba      	ldrh	r2, [r7, #12]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d025      	beq.n	8002dcc <check_buffer+0x74>
  {
    if (pos > in->pos)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	89db      	ldrh	r3, [r3, #14]
 8002d84:	89ba      	ldrh	r2, [r7, #12]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d90b      	bls.n	8002da2 <check_buffer+0x4a>
      /* Current position is over previous one */
      /* We are in "linear" mode */
      /* Process data directly by subtracting "pointers" */
      fill_buffer(in, in->pos, pos - in->pos);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	89d9      	ldrh	r1, [r3, #14]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	89db      	ldrh	r3, [r3, #14]
 8002d92:	89ba      	ldrh	r2, [r7, #12]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	461a      	mov	r2, r3
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f824 	bl	8002de8 <fill_buffer>
 8002da0:	e014      	b.n	8002dcc <check_buffer+0x74>
    else
    {
      /* We are in "overflow" mode */
      /* First process data to the end of buffer */
      fill_buffer(in, in->pos, in->size - in->pos);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	89d9      	ldrh	r1, [r3, #14]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	899a      	ldrh	r2, [r3, #12]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	89db      	ldrh	r3, [r3, #14]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	461a      	mov	r2, r3
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f817 	bl	8002de8 <fill_buffer>
      /* Check and continue with beginning of buffer */
      if (pos > 0)
 8002dba:	89bb      	ldrh	r3, [r7, #12]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d005      	beq.n	8002dcc <check_buffer+0x74>
        fill_buffer(in, 0, pos);
 8002dc0:	89bb      	ldrh	r3, [r7, #12]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f80e 	bl	8002de8 <fill_buffer>
    }
  }

  /* Check and manually update if we reached end of buffer */
  in->pos = (pos == in->size) ? 0 : pos;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	899b      	ldrh	r3, [r3, #12]
 8002dd0:	89ba      	ldrh	r2, [r7, #12]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d001      	beq.n	8002dda <check_buffer+0x82>
 8002dd6:	89ba      	ldrh	r2, [r7, #12]
 8002dd8:	e000      	b.n	8002ddc <check_buffer+0x84>
 8002dda:	2200      	movs	r2, #0
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	81da      	strh	r2, [r3, #14]
}
 8002de0:	bf00      	nop
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <fill_buffer>:

static void fill_buffer(stdin_t *in, uint16_t pos, uint16_t size)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	807b      	strh	r3, [r7, #2]
 8002df4:	4613      	mov	r3, r2
 8002df6:	803b      	strh	r3, [r7, #0]
  if (NULL == in->callback)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d009      	beq.n	8002e14 <fill_buffer+0x2c>
    return;

  in->callback(&in->buffer[pos], size);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6891      	ldr	r1, [r2, #8]
 8002e08:	887a      	ldrh	r2, [r7, #2]
 8002e0a:	440a      	add	r2, r1
 8002e0c:	8839      	ldrh	r1, [r7, #0]
 8002e0e:	4610      	mov	r0, r2
 8002e10:	4798      	blx	r3
 8002e12:	e000      	b.n	8002e16 <fill_buffer+0x2e>
    return;
 8002e14:	bf00      	nop
}
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_MspInit>:

extern DMA_HandleTypeDef hdma_usart2_rx;


void HAL_MspInit(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	607b      	str	r3, [r7, #4]
 8002e26:	4b10      	ldr	r3, [pc, #64]	; (8002e68 <HAL_MspInit+0x4c>)
 8002e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2a:	4a0f      	ldr	r2, [pc, #60]	; (8002e68 <HAL_MspInit+0x4c>)
 8002e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e30:	6453      	str	r3, [r2, #68]	; 0x44
 8002e32:	4b0d      	ldr	r3, [pc, #52]	; (8002e68 <HAL_MspInit+0x4c>)
 8002e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e3a:	607b      	str	r3, [r7, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	603b      	str	r3, [r7, #0]
 8002e42:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <HAL_MspInit+0x4c>)
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	4a08      	ldr	r2, [pc, #32]	; (8002e68 <HAL_MspInit+0x4c>)
 8002e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e4e:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <HAL_MspInit+0x4c>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002e5a:	2007      	movs	r0, #7
 8002e5c:	f000 fb86 	bl	800356c <HAL_NVIC_SetPriorityGrouping>
}
 8002e60:	bf00      	nop
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40023800 	.word	0x40023800

08002e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08a      	sub	sp, #40	; 0x28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e74:	f107 0314 	add.w	r3, r7, #20
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	60da      	str	r2, [r3, #12]
 8002e82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a34      	ldr	r2, [pc, #208]	; (8002f5c <HAL_UART_MspInit+0xf0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d162      	bne.n	8002f54 <HAL_UART_MspInit+0xe8>
  {
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	613b      	str	r3, [r7, #16]
 8002e92:	4b33      	ldr	r3, [pc, #204]	; (8002f60 <HAL_UART_MspInit+0xf4>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	4a32      	ldr	r2, [pc, #200]	; (8002f60 <HAL_UART_MspInit+0xf4>)
 8002e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e9e:	4b30      	ldr	r3, [pc, #192]	; (8002f60 <HAL_UART_MspInit+0xf4>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea6:	613b      	str	r3, [r7, #16]
 8002ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	4b2c      	ldr	r3, [pc, #176]	; (8002f60 <HAL_UART_MspInit+0xf4>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	4a2b      	ldr	r2, [pc, #172]	; (8002f60 <HAL_UART_MspInit+0xf4>)
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eba:	4b29      	ldr	r3, [pc, #164]	; (8002f60 <HAL_UART_MspInit+0xf4>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin 		= USART_TX_Pin|USART_RX_Pin;
 8002ec6:	230c      	movs	r3, #12
 8002ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate 	= GPIO_AF7_USART2;
 8002ed6:	2307      	movs	r3, #7
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eda:	f107 0314 	add.w	r3, r7, #20
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4820      	ldr	r0, [pc, #128]	; (8002f64 <HAL_UART_MspInit+0xf8>)
 8002ee2:	f000 ff95 	bl	8003e10 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance 				= DMA1_Stream5;
 8002ee6:	4b20      	ldr	r3, [pc, #128]	; (8002f68 <HAL_UART_MspInit+0xfc>)
 8002ee8:	4a20      	ldr	r2, [pc, #128]	; (8002f6c <HAL_UART_MspInit+0x100>)
 8002eea:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel 			= DMA_CHANNEL_4;
 8002eec:	4b1e      	ldr	r3, [pc, #120]	; (8002f68 <HAL_UART_MspInit+0xfc>)
 8002eee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ef2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction 			= DMA_PERIPH_TO_MEMORY;
 8002ef4:	4b1c      	ldr	r3, [pc, #112]	; (8002f68 <HAL_UART_MspInit+0xfc>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8002efa:	4b1b      	ldr	r3, [pc, #108]	; (8002f68 <HAL_UART_MspInit+0xfc>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8002f00:	4b19      	ldr	r3, [pc, #100]	; (8002f68 <HAL_UART_MspInit+0xfc>)
 8002f02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f06:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f08:	4b17      	ldr	r3, [pc, #92]	; (8002f68 <HAL_UART_MspInit+0xfc>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8002f0e:	4b16      	ldr	r3, [pc, #88]	; (8002f68 <HAL_UART_MspInit+0xfc>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode 				= DMA_CIRCULAR;
 8002f14:	4b14      	ldr	r3, [pc, #80]	; (8002f68 <HAL_UART_MspInit+0xfc>)
 8002f16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f1a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority 			= DMA_PRIORITY_LOW;
 8002f1c:	4b12      	ldr	r3, [pc, #72]	; (8002f68 <HAL_UART_MspInit+0xfc>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 8002f22:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <HAL_UART_MspInit+0xfc>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002f28:	480f      	ldr	r0, [pc, #60]	; (8002f68 <HAL_UART_MspInit+0xfc>)
 8002f2a:	f000 fb61 	bl	80035f0 <HAL_DMA_Init>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002f34:	f7fe fac8 	bl	80014c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a0b      	ldr	r2, [pc, #44]	; (8002f68 <HAL_UART_MspInit+0xfc>)
 8002f3c:	639a      	str	r2, [r3, #56]	; 0x38
 8002f3e:	4a0a      	ldr	r2, [pc, #40]	; (8002f68 <HAL_UART_MspInit+0xfc>)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002f44:	2200      	movs	r2, #0
 8002f46:	2100      	movs	r1, #0
 8002f48:	2026      	movs	r0, #38	; 0x26
 8002f4a:	f000 fb1a 	bl	8003582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f4e:	2026      	movs	r0, #38	; 0x26
 8002f50:	f000 fb33 	bl	80035ba <HAL_NVIC_EnableIRQ>
  }

}
 8002f54:	bf00      	nop
 8002f56:	3728      	adds	r7, #40	; 0x28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40004400 	.word	0x40004400
 8002f60:	40023800 	.word	0x40023800
 8002f64:	40020000 	.word	0x40020000
 8002f68:	20000134 	.word	0x20000134
 8002f6c:	40026088 	.word	0x40026088

08002f70 <HAL_I2C_MspInit>:
  *           - NVIC configuration for DMA interrupt request enable
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08a      	sub	sp, #40	; 0x28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /*##-1- Enable GPIO Clocks #################################################*/
  /* Enable GPIO TX/RX clock */
  I2Cx_SCL_GPIO_CLK_ENABLE();
 8002f78:	2300      	movs	r3, #0
 8002f7a:	613b      	str	r3, [r7, #16]
 8002f7c:	4b2b      	ldr	r3, [pc, #172]	; (800302c <HAL_I2C_MspInit+0xbc>)
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f80:	4a2a      	ldr	r2, [pc, #168]	; (800302c <HAL_I2C_MspInit+0xbc>)
 8002f82:	f043 0302 	orr.w	r3, r3, #2
 8002f86:	6313      	str	r3, [r2, #48]	; 0x30
 8002f88:	4b28      	ldr	r3, [pc, #160]	; (800302c <HAL_I2C_MspInit+0xbc>)
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	693b      	ldr	r3, [r7, #16]
  I2Cx_SDA_GPIO_CLK_ENABLE();
 8002f94:	2300      	movs	r3, #0
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	4b24      	ldr	r3, [pc, #144]	; (800302c <HAL_I2C_MspInit+0xbc>)
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9c:	4a23      	ldr	r2, [pc, #140]	; (800302c <HAL_I2C_MspInit+0xbc>)
 8002f9e:	f043 0302 	orr.w	r3, r3, #2
 8002fa2:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa4:	4b21      	ldr	r3, [pc, #132]	; (800302c <HAL_I2C_MspInit+0xbc>)
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* I2C TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
 8002fb0:	2340      	movs	r3, #64	; 0x40
 8002fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8002fb4:	2312      	movs	r3, #18
 8002fb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
 8002fc0:	2304      	movs	r3, #4
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002fc4:	f107 0314 	add.w	r3, r7, #20
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4819      	ldr	r0, [pc, #100]	; (8003030 <HAL_I2C_MspInit+0xc0>)
 8002fcc:	f000 ff20 	bl	8003e10 <HAL_GPIO_Init>

  /* I2C RX GPIO pin configuration  */
  GPIO_InitStruct.Pin 		= I2Cx_SDA_PIN;
 8002fd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = I2Cx_SDA_AF;
 8002fd6:	2304      	movs	r3, #4
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002fda:	f107 0314 	add.w	r3, r7, #20
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4813      	ldr	r0, [pc, #76]	; (8003030 <HAL_I2C_MspInit+0xc0>)
 8002fe2:	f000 ff15 	bl	8003e10 <HAL_GPIO_Init>

  /*##-3- Enable I2C peripheral Clock ########################################*/
  /* Enable I2C1 clock */
  I2Cx_CLK_ENABLE();
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60bb      	str	r3, [r7, #8]
 8002fea:	4b10      	ldr	r3, [pc, #64]	; (800302c <HAL_I2C_MspInit+0xbc>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	4a0f      	ldr	r2, [pc, #60]	; (800302c <HAL_I2C_MspInit+0xbc>)
 8002ff0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff6:	4b0d      	ldr	r3, [pc, #52]	; (800302c <HAL_I2C_MspInit+0xbc>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ffe:	60bb      	str	r3, [r7, #8]
 8003000:	68bb      	ldr	r3, [r7, #8]

  /*##-4- Configure the NVIC for I2C #########################################*/
  /* NVIC for I2C1 */
  HAL_NVIC_SetPriority(I2Cx_ER_IRQn, 1, 0);
 8003002:	2200      	movs	r2, #0
 8003004:	2101      	movs	r1, #1
 8003006:	2020      	movs	r0, #32
 8003008:	f000 fabb 	bl	8003582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2Cx_ER_IRQn);
 800300c:	2020      	movs	r0, #32
 800300e:	f000 fad4 	bl	80035ba <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(I2Cx_EV_IRQn, 2, 0);
 8003012:	2200      	movs	r2, #0
 8003014:	2102      	movs	r1, #2
 8003016:	201f      	movs	r0, #31
 8003018:	f000 fab3 	bl	8003582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2Cx_EV_IRQn);
 800301c:	201f      	movs	r0, #31
 800301e:	f000 facc 	bl	80035ba <HAL_NVIC_EnableIRQ>
}
 8003022:	bf00      	nop
 8003024:	3728      	adds	r7, #40	; 0x28
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40023800 	.word	0x40023800
 8003030:	40020400 	.word	0x40020400

08003034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  while (1)
 8003038:	e7fe      	b.n	8003038 <NMI_Handler+0x4>

0800303a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800303a:	b480      	push	{r7}
 800303c:	af00      	add	r7, sp, #0
  while (1)
 800303e:	e7fe      	b.n	800303e <HardFault_Handler+0x4>

08003040 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  while (1)
 8003044:	e7fe      	b.n	8003044 <MemManage_Handler+0x4>

08003046 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003046:	b480      	push	{r7}
 8003048:	af00      	add	r7, sp, #0
  while (1)
 800304a:	e7fe      	b.n	800304a <BusFault_Handler+0x4>

0800304c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  while (1)
 8003050:	e7fe      	b.n	8003050 <UsageFault_Handler+0x4>

08003052 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003052:	b480      	push	{r7}
 8003054:	af00      	add	r7, sp, #0

}
 8003056:	bf00      	nop
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0

}
 8003064:	bf00      	nop
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr

0800306e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800306e:	b480      	push	{r7}
 8003070:	af00      	add	r7, sp, #0

}
 8003072:	bf00      	nop
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8003080:	f000 f960 	bl	8003344 <HAL_IncTick>
}
 8003084:	bf00      	nop
 8003086:	bd80      	pop	{r7, pc}

08003088 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800308c:	4803      	ldr	r0, [pc, #12]	; (800309c <DMA1_Stream5_IRQHandler+0x14>)
 800308e:	f000 fc47 	bl	8003920 <HAL_DMA_IRQHandler>
  serial_handlerDMA();
 8003092:	f7fe fa51 	bl	8001538 <serial_handlerDMA>
}
 8003096:	bf00      	nop
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	20000134 	.word	0x20000134

080030a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 80030a4:	4803      	ldr	r0, [pc, #12]	; (80030b4 <USART2_IRQHandler+0x14>)
 80030a6:	f003 ff21 	bl	8006eec <HAL_UART_IRQHandler>
	serial_handlerUART();
 80030aa:	f7fe fa3b 	bl	8001524 <serial_handlerUART>
}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	200000f0 	.word	0x200000f0

080030b8 <I2C1_EV_IRQHandler>:
  * @param  None
  * @retval None
  * @Note   This function is redefined in "main.h" and related to I2C data transmission
  */
void I2Cx_EV_IRQHandler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(& I2cHandle);
 80030bc:	4802      	ldr	r0, [pc, #8]	; (80030c8 <I2C1_EV_IRQHandler+0x10>)
 80030be:	f001 fb07 	bl	80046d0 <HAL_I2C_EV_IRQHandler>
}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000194 	.word	0x20000194

080030cc <I2C1_ER_IRQHandler>:
  * @param  None
  * @retval None
  * @Note   This function is redefined in "main.h" and related to I2C error
  */
void I2Cx_ER_IRQHandler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(& I2cHandle);
 80030d0:	4802      	ldr	r0, [pc, #8]	; (80030dc <I2C1_ER_IRQHandler+0x10>)
 80030d2:	f001 fc6a 	bl	80049aa <HAL_I2C_ER_IRQHandler>
}
 80030d6:	bf00      	nop
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	20000194 	.word	0x20000194

080030e0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]
 80030f0:	e00a      	b.n	8003108 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80030f2:	f3af 8000 	nop.w
 80030f6:	4601      	mov	r1, r0
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	1c5a      	adds	r2, r3, #1
 80030fc:	60ba      	str	r2, [r7, #8]
 80030fe:	b2ca      	uxtb	r2, r1
 8003100:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	3301      	adds	r3, #1
 8003106:	617b      	str	r3, [r7, #20]
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	429a      	cmp	r2, r3
 800310e:	dbf0      	blt.n	80030f2 <_read+0x12>
	}

return len;
 8003110:	687b      	ldr	r3, [r7, #4]
}
 8003112:	4618      	mov	r0, r3
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b086      	sub	sp, #24
 800311e:	af00      	add	r7, sp, #0
 8003120:	60f8      	str	r0, [r7, #12]
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003126:	2300      	movs	r3, #0
 8003128:	617b      	str	r3, [r7, #20]
 800312a:	e009      	b.n	8003140 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	1c5a      	adds	r2, r3, #1
 8003130:	60ba      	str	r2, [r7, #8]
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f7fd fa3d 	bl	80005b4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	3301      	adds	r3, #1
 800313e:	617b      	str	r3, [r7, #20]
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	429a      	cmp	r2, r3
 8003146:	dbf1      	blt.n	800312c <_write+0x12>
	}
	return len;
 8003148:	687b      	ldr	r3, [r7, #4]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <_close>:

int _close(int file)
{
 8003152:	b480      	push	{r7}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
	return -1;
 800315a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800315e:	4618      	mov	r0, r3
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
 8003172:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800317a:	605a      	str	r2, [r3, #4]
	return 0;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <_isatty>:

int _isatty(int file)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
	return 1;
 8003192:	2301      	movs	r3, #1
}
 8003194:	4618      	mov	r0, r3
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
	return 0;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
	...

080031bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031c4:	4a14      	ldr	r2, [pc, #80]	; (8003218 <_sbrk+0x5c>)
 80031c6:	4b15      	ldr	r3, [pc, #84]	; (800321c <_sbrk+0x60>)
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031d0:	4b13      	ldr	r3, [pc, #76]	; (8003220 <_sbrk+0x64>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d102      	bne.n	80031de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031d8:	4b11      	ldr	r3, [pc, #68]	; (8003220 <_sbrk+0x64>)
 80031da:	4a12      	ldr	r2, [pc, #72]	; (8003224 <_sbrk+0x68>)
 80031dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031de:	4b10      	ldr	r3, [pc, #64]	; (8003220 <_sbrk+0x64>)
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4413      	add	r3, r2
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d207      	bcs.n	80031fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031ec:	f004 ff6e 	bl	80080cc <__errno>
 80031f0:	4603      	mov	r3, r0
 80031f2:	220c      	movs	r2, #12
 80031f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031f6:	f04f 33ff 	mov.w	r3, #4294967295
 80031fa:	e009      	b.n	8003210 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031fc:	4b08      	ldr	r3, [pc, #32]	; (8003220 <_sbrk+0x64>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003202:	4b07      	ldr	r3, [pc, #28]	; (8003220 <_sbrk+0x64>)
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4413      	add	r3, r2
 800320a:	4a05      	ldr	r2, [pc, #20]	; (8003220 <_sbrk+0x64>)
 800320c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800320e:	68fb      	ldr	r3, [r7, #12]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	20020000 	.word	0x20020000
 800321c:	00000400 	.word	0x00000400
 8003220:	200006d4 	.word	0x200006d4
 8003224:	200006f0 	.word	0x200006f0

08003228 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800322c:	4b06      	ldr	r3, [pc, #24]	; (8003248 <SystemInit+0x20>)
 800322e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003232:	4a05      	ldr	r2, [pc, #20]	; (8003248 <SystemInit+0x20>)
 8003234:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003238:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800323c:	bf00      	nop
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	e000ed00 	.word	0xe000ed00

0800324c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800324c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003284 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003250:	480d      	ldr	r0, [pc, #52]	; (8003288 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003252:	490e      	ldr	r1, [pc, #56]	; (800328c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003254:	4a0e      	ldr	r2, [pc, #56]	; (8003290 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003258:	e002      	b.n	8003260 <LoopCopyDataInit>

0800325a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800325a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800325c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800325e:	3304      	adds	r3, #4

08003260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003264:	d3f9      	bcc.n	800325a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003266:	4a0b      	ldr	r2, [pc, #44]	; (8003294 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003268:	4c0b      	ldr	r4, [pc, #44]	; (8003298 <LoopFillZerobss+0x26>)
  movs r3, #0
 800326a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800326c:	e001      	b.n	8003272 <LoopFillZerobss>

0800326e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800326e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003270:	3204      	adds	r2, #4

08003272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003274:	d3fb      	bcc.n	800326e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003276:	f7ff ffd7 	bl	8003228 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800327a:	f004 ff2d 	bl	80080d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800327e:	f7fd f9ab 	bl	80005d8 <main>
  bx  lr    
 8003282:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003284:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800328c:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8003290:	08009468 	.word	0x08009468
  ldr r2, =_sbss
 8003294:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8003298:	200006ec 	.word	0x200006ec

0800329c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800329c:	e7fe      	b.n	800329c <ADC_IRQHandler>
	...

080032a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032a4:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <HAL_Init+0x40>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a0d      	ldr	r2, [pc, #52]	; (80032e0 <HAL_Init+0x40>)
 80032aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032b0:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <HAL_Init+0x40>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a0a      	ldr	r2, [pc, #40]	; (80032e0 <HAL_Init+0x40>)
 80032b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032bc:	4b08      	ldr	r3, [pc, #32]	; (80032e0 <HAL_Init+0x40>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a07      	ldr	r2, [pc, #28]	; (80032e0 <HAL_Init+0x40>)
 80032c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032c8:	2003      	movs	r0, #3
 80032ca:	f000 f94f 	bl	800356c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032ce:	2000      	movs	r0, #0
 80032d0:	f000 f808 	bl	80032e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032d4:	f7ff fda2 	bl	8002e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40023c00 	.word	0x40023c00

080032e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032ec:	4b12      	ldr	r3, [pc, #72]	; (8003338 <HAL_InitTick+0x54>)
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	4b12      	ldr	r3, [pc, #72]	; (800333c <HAL_InitTick+0x58>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	4619      	mov	r1, r3
 80032f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80032fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003302:	4618      	mov	r0, r3
 8003304:	f000 f967 	bl	80035d6 <HAL_SYSTICK_Config>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e00e      	b.n	8003330 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b0f      	cmp	r3, #15
 8003316:	d80a      	bhi.n	800332e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003318:	2200      	movs	r2, #0
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	f04f 30ff 	mov.w	r0, #4294967295
 8003320:	f000 f92f 	bl	8003582 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003324:	4a06      	ldr	r2, [pc, #24]	; (8003340 <HAL_InitTick+0x5c>)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800332a:	2300      	movs	r3, #0
 800332c:	e000      	b.n	8003330 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
}
 8003330:	4618      	mov	r0, r3
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	20000064 	.word	0x20000064
 800333c:	2000006c 	.word	0x2000006c
 8003340:	20000068 	.word	0x20000068

08003344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003348:	4b06      	ldr	r3, [pc, #24]	; (8003364 <HAL_IncTick+0x20>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	461a      	mov	r2, r3
 800334e:	4b06      	ldr	r3, [pc, #24]	; (8003368 <HAL_IncTick+0x24>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4413      	add	r3, r2
 8003354:	4a04      	ldr	r2, [pc, #16]	; (8003368 <HAL_IncTick+0x24>)
 8003356:	6013      	str	r3, [r2, #0]
}
 8003358:	bf00      	nop
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	2000006c 	.word	0x2000006c
 8003368:	200006d8 	.word	0x200006d8

0800336c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  return uwTick;
 8003370:	4b03      	ldr	r3, [pc, #12]	; (8003380 <HAL_GetTick+0x14>)
 8003372:	681b      	ldr	r3, [r3, #0]
}
 8003374:	4618      	mov	r0, r3
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	200006d8 	.word	0x200006d8

08003384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800338c:	f7ff ffee 	bl	800336c <HAL_GetTick>
 8003390:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339c:	d005      	beq.n	80033aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800339e:	4b0a      	ldr	r3, [pc, #40]	; (80033c8 <HAL_Delay+0x44>)
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	461a      	mov	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4413      	add	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033aa:	bf00      	nop
 80033ac:	f7ff ffde 	bl	800336c <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d8f7      	bhi.n	80033ac <HAL_Delay+0x28>
  {
  }
}
 80033bc:	bf00      	nop
 80033be:	bf00      	nop
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	2000006c 	.word	0x2000006c

080033cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033dc:	4b0c      	ldr	r3, [pc, #48]	; (8003410 <__NVIC_SetPriorityGrouping+0x44>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033e8:	4013      	ands	r3, r2
 80033ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033fe:	4a04      	ldr	r2, [pc, #16]	; (8003410 <__NVIC_SetPriorityGrouping+0x44>)
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	60d3      	str	r3, [r2, #12]
}
 8003404:	bf00      	nop
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	e000ed00 	.word	0xe000ed00

08003414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003418:	4b04      	ldr	r3, [pc, #16]	; (800342c <__NVIC_GetPriorityGrouping+0x18>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	0a1b      	lsrs	r3, r3, #8
 800341e:	f003 0307 	and.w	r3, r3, #7
}
 8003422:	4618      	mov	r0, r3
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	e000ed00 	.word	0xe000ed00

08003430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	4603      	mov	r3, r0
 8003438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800343a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343e:	2b00      	cmp	r3, #0
 8003440:	db0b      	blt.n	800345a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003442:	79fb      	ldrb	r3, [r7, #7]
 8003444:	f003 021f 	and.w	r2, r3, #31
 8003448:	4907      	ldr	r1, [pc, #28]	; (8003468 <__NVIC_EnableIRQ+0x38>)
 800344a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344e:	095b      	lsrs	r3, r3, #5
 8003450:	2001      	movs	r0, #1
 8003452:	fa00 f202 	lsl.w	r2, r0, r2
 8003456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	e000e100 	.word	0xe000e100

0800346c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	4603      	mov	r3, r0
 8003474:	6039      	str	r1, [r7, #0]
 8003476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347c:	2b00      	cmp	r3, #0
 800347e:	db0a      	blt.n	8003496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	b2da      	uxtb	r2, r3
 8003484:	490c      	ldr	r1, [pc, #48]	; (80034b8 <__NVIC_SetPriority+0x4c>)
 8003486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348a:	0112      	lsls	r2, r2, #4
 800348c:	b2d2      	uxtb	r2, r2
 800348e:	440b      	add	r3, r1
 8003490:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003494:	e00a      	b.n	80034ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	b2da      	uxtb	r2, r3
 800349a:	4908      	ldr	r1, [pc, #32]	; (80034bc <__NVIC_SetPriority+0x50>)
 800349c:	79fb      	ldrb	r3, [r7, #7]
 800349e:	f003 030f 	and.w	r3, r3, #15
 80034a2:	3b04      	subs	r3, #4
 80034a4:	0112      	lsls	r2, r2, #4
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	440b      	add	r3, r1
 80034aa:	761a      	strb	r2, [r3, #24]
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	e000e100 	.word	0xe000e100
 80034bc:	e000ed00 	.word	0xe000ed00

080034c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b089      	sub	sp, #36	; 0x24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	f1c3 0307 	rsb	r3, r3, #7
 80034da:	2b04      	cmp	r3, #4
 80034dc:	bf28      	it	cs
 80034de:	2304      	movcs	r3, #4
 80034e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	3304      	adds	r3, #4
 80034e6:	2b06      	cmp	r3, #6
 80034e8:	d902      	bls.n	80034f0 <NVIC_EncodePriority+0x30>
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	3b03      	subs	r3, #3
 80034ee:	e000      	b.n	80034f2 <NVIC_EncodePriority+0x32>
 80034f0:	2300      	movs	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f4:	f04f 32ff 	mov.w	r2, #4294967295
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	fa02 f303 	lsl.w	r3, r2, r3
 80034fe:	43da      	mvns	r2, r3
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	401a      	ands	r2, r3
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003508:	f04f 31ff 	mov.w	r1, #4294967295
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	fa01 f303 	lsl.w	r3, r1, r3
 8003512:	43d9      	mvns	r1, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003518:	4313      	orrs	r3, r2
         );
}
 800351a:	4618      	mov	r0, r3
 800351c:	3724      	adds	r7, #36	; 0x24
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
	...

08003528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3b01      	subs	r3, #1
 8003534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003538:	d301      	bcc.n	800353e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800353a:	2301      	movs	r3, #1
 800353c:	e00f      	b.n	800355e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800353e:	4a0a      	ldr	r2, [pc, #40]	; (8003568 <SysTick_Config+0x40>)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3b01      	subs	r3, #1
 8003544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003546:	210f      	movs	r1, #15
 8003548:	f04f 30ff 	mov.w	r0, #4294967295
 800354c:	f7ff ff8e 	bl	800346c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003550:	4b05      	ldr	r3, [pc, #20]	; (8003568 <SysTick_Config+0x40>)
 8003552:	2200      	movs	r2, #0
 8003554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003556:	4b04      	ldr	r3, [pc, #16]	; (8003568 <SysTick_Config+0x40>)
 8003558:	2207      	movs	r2, #7
 800355a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	e000e010 	.word	0xe000e010

0800356c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7ff ff29 	bl	80033cc <__NVIC_SetPriorityGrouping>
}
 800357a:	bf00      	nop
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003582:	b580      	push	{r7, lr}
 8003584:	b086      	sub	sp, #24
 8003586:	af00      	add	r7, sp, #0
 8003588:	4603      	mov	r3, r0
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	607a      	str	r2, [r7, #4]
 800358e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003594:	f7ff ff3e 	bl	8003414 <__NVIC_GetPriorityGrouping>
 8003598:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	68b9      	ldr	r1, [r7, #8]
 800359e:	6978      	ldr	r0, [r7, #20]
 80035a0:	f7ff ff8e 	bl	80034c0 <NVIC_EncodePriority>
 80035a4:	4602      	mov	r2, r0
 80035a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035aa:	4611      	mov	r1, r2
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff ff5d 	bl	800346c <__NVIC_SetPriority>
}
 80035b2:	bf00      	nop
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b082      	sub	sp, #8
 80035be:	af00      	add	r7, sp, #0
 80035c0:	4603      	mov	r3, r0
 80035c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff ff31 	bl	8003430 <__NVIC_EnableIRQ>
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7ff ffa2 	bl	8003528 <SysTick_Config>
 80035e4:	4603      	mov	r3, r0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
	...

080035f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035fc:	f7ff feb6 	bl	800336c <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e099      	b.n	8003740 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2202      	movs	r2, #2
 8003610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0201 	bic.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800362c:	e00f      	b.n	800364e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800362e:	f7ff fe9d 	bl	800336c <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b05      	cmp	r3, #5
 800363a:	d908      	bls.n	800364e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2220      	movs	r2, #32
 8003640:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2203      	movs	r2, #3
 8003646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e078      	b.n	8003740 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1e8      	bne.n	800362e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	4b38      	ldr	r3, [pc, #224]	; (8003748 <HAL_DMA_Init+0x158>)
 8003668:	4013      	ands	r3, r2
 800366a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800367a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003686:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003692:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	4313      	orrs	r3, r2
 800369e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d107      	bne.n	80036b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b0:	4313      	orrs	r3, r2
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f023 0307 	bic.w	r3, r3, #7
 80036ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d117      	bne.n	8003712 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00e      	beq.n	8003712 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 fb0f 	bl	8003d18 <DMA_CheckFifoParam>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d008      	beq.n	8003712 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2240      	movs	r2, #64	; 0x40
 8003704:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800370e:	2301      	movs	r3, #1
 8003710:	e016      	b.n	8003740 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 fac6 	bl	8003cac <DMA_CalcBaseAndBitshift>
 8003720:	4603      	mov	r3, r0
 8003722:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003728:	223f      	movs	r2, #63	; 0x3f
 800372a:	409a      	lsls	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	f010803f 	.word	0xf010803f

0800374c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
 8003758:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003762:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800376a:	2b01      	cmp	r3, #1
 800376c:	d101      	bne.n	8003772 <HAL_DMA_Start_IT+0x26>
 800376e:	2302      	movs	r3, #2
 8003770:	e040      	b.n	80037f4 <HAL_DMA_Start_IT+0xa8>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b01      	cmp	r3, #1
 8003784:	d12f      	bne.n	80037e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2202      	movs	r2, #2
 800378a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	68b9      	ldr	r1, [r7, #8]
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 fa58 	bl	8003c50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a4:	223f      	movs	r2, #63	; 0x3f
 80037a6:	409a      	lsls	r2, r3
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0216 	orr.w	r2, r2, #22
 80037ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d007      	beq.n	80037d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0208 	orr.w	r2, r2, #8
 80037d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 0201 	orr.w	r2, r2, #1
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	e005      	b.n	80037f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80037ee:	2302      	movs	r3, #2
 80037f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80037f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003808:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800380a:	f7ff fdaf 	bl	800336c <HAL_GetTick>
 800380e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d008      	beq.n	800382e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2280      	movs	r2, #128	; 0x80
 8003820:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e052      	b.n	80038d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0216 	bic.w	r2, r2, #22
 800383c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695a      	ldr	r2, [r3, #20]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800384c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	2b00      	cmp	r3, #0
 8003854:	d103      	bne.n	800385e <HAL_DMA_Abort+0x62>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800385a:	2b00      	cmp	r3, #0
 800385c:	d007      	beq.n	800386e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0208 	bic.w	r2, r2, #8
 800386c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0201 	bic.w	r2, r2, #1
 800387c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800387e:	e013      	b.n	80038a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003880:	f7ff fd74 	bl	800336c <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b05      	cmp	r3, #5
 800388c:	d90c      	bls.n	80038a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2220      	movs	r2, #32
 8003892:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2203      	movs	r2, #3
 8003898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e015      	b.n	80038d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1e4      	bne.n	8003880 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ba:	223f      	movs	r2, #63	; 0x3f
 80038bc:	409a      	lsls	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d004      	beq.n	80038fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2280      	movs	r2, #128	; 0x80
 80038f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e00c      	b.n	8003914 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2205      	movs	r2, #5
 80038fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0201 	bic.w	r2, r2, #1
 8003910:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800392c:	4b8e      	ldr	r3, [pc, #568]	; (8003b68 <HAL_DMA_IRQHandler+0x248>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a8e      	ldr	r2, [pc, #568]	; (8003b6c <HAL_DMA_IRQHandler+0x24c>)
 8003932:	fba2 2303 	umull	r2, r3, r2, r3
 8003936:	0a9b      	lsrs	r3, r3, #10
 8003938:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394a:	2208      	movs	r2, #8
 800394c:	409a      	lsls	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	4013      	ands	r3, r2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d01a      	beq.n	800398c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	d013      	beq.n	800398c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0204 	bic.w	r2, r2, #4
 8003972:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003978:	2208      	movs	r2, #8
 800397a:	409a      	lsls	r2, r3
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003984:	f043 0201 	orr.w	r2, r3, #1
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003990:	2201      	movs	r2, #1
 8003992:	409a      	lsls	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	4013      	ands	r3, r2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d012      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00b      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ae:	2201      	movs	r2, #1
 80039b0:	409a      	lsls	r2, r3
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ba:	f043 0202 	orr.w	r2, r3, #2
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c6:	2204      	movs	r2, #4
 80039c8:	409a      	lsls	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4013      	ands	r3, r2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d012      	beq.n	80039f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00b      	beq.n	80039f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e4:	2204      	movs	r2, #4
 80039e6:	409a      	lsls	r2, r3
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f0:	f043 0204 	orr.w	r2, r3, #4
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039fc:	2210      	movs	r2, #16
 80039fe:	409a      	lsls	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4013      	ands	r3, r2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d043      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d03c      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1a:	2210      	movs	r2, #16
 8003a1c:	409a      	lsls	r2, r3
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d018      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d108      	bne.n	8003a50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d024      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	4798      	blx	r3
 8003a4e:	e01f      	b.n	8003a90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d01b      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	4798      	blx	r3
 8003a60:	e016      	b.n	8003a90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d107      	bne.n	8003a80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 0208 	bic.w	r2, r2, #8
 8003a7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a94:	2220      	movs	r2, #32
 8003a96:	409a      	lsls	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 808f 	beq.w	8003bc0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0310 	and.w	r3, r3, #16
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 8087 	beq.w	8003bc0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	409a      	lsls	r2, r3
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b05      	cmp	r3, #5
 8003ac8:	d136      	bne.n	8003b38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0216 	bic.w	r2, r2, #22
 8003ad8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695a      	ldr	r2, [r3, #20]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ae8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d103      	bne.n	8003afa <HAL_DMA_IRQHandler+0x1da>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d007      	beq.n	8003b0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0208 	bic.w	r2, r2, #8
 8003b08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0e:	223f      	movs	r2, #63	; 0x3f
 8003b10:	409a      	lsls	r2, r3
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d07e      	beq.n	8003c2c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	4798      	blx	r3
        }
        return;
 8003b36:	e079      	b.n	8003c2c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d01d      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10d      	bne.n	8003b70 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d031      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	4798      	blx	r3
 8003b64:	e02c      	b.n	8003bc0 <HAL_DMA_IRQHandler+0x2a0>
 8003b66:	bf00      	nop
 8003b68:	20000064 	.word	0x20000064
 8003b6c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d023      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	4798      	blx	r3
 8003b80:	e01e      	b.n	8003bc0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10f      	bne.n	8003bb0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0210 	bic.w	r2, r2, #16
 8003b9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d032      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d022      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2205      	movs	r2, #5
 8003bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0201 	bic.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d307      	bcc.n	8003c08 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1f2      	bne.n	8003bec <HAL_DMA_IRQHandler+0x2cc>
 8003c06:	e000      	b.n	8003c0a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c08:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d005      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	4798      	blx	r3
 8003c2a:	e000      	b.n	8003c2e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c2c:	bf00      	nop
    }
  }
}
 8003c2e:	3718      	adds	r7, #24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c42:	b2db      	uxtb	r3, r3
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
 8003c5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2b40      	cmp	r3, #64	; 0x40
 8003c7c:	d108      	bne.n	8003c90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c8e:	e007      	b.n	8003ca0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	60da      	str	r2, [r3, #12]
}
 8003ca0:	bf00      	nop
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	3b10      	subs	r3, #16
 8003cbc:	4a14      	ldr	r2, [pc, #80]	; (8003d10 <DMA_CalcBaseAndBitshift+0x64>)
 8003cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc2:	091b      	lsrs	r3, r3, #4
 8003cc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003cc6:	4a13      	ldr	r2, [pc, #76]	; (8003d14 <DMA_CalcBaseAndBitshift+0x68>)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4413      	add	r3, r2
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	d909      	bls.n	8003cee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ce2:	f023 0303 	bic.w	r3, r3, #3
 8003ce6:	1d1a      	adds	r2, r3, #4
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	659a      	str	r2, [r3, #88]	; 0x58
 8003cec:	e007      	b.n	8003cfe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cf6:	f023 0303 	bic.w	r3, r3, #3
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	aaaaaaab 	.word	0xaaaaaaab
 8003d14:	080093b8 	.word	0x080093b8

08003d18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d11f      	bne.n	8003d72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2b03      	cmp	r3, #3
 8003d36:	d856      	bhi.n	8003de6 <DMA_CheckFifoParam+0xce>
 8003d38:	a201      	add	r2, pc, #4	; (adr r2, 8003d40 <DMA_CheckFifoParam+0x28>)
 8003d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3e:	bf00      	nop
 8003d40:	08003d51 	.word	0x08003d51
 8003d44:	08003d63 	.word	0x08003d63
 8003d48:	08003d51 	.word	0x08003d51
 8003d4c:	08003de7 	.word	0x08003de7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d046      	beq.n	8003dea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d60:	e043      	b.n	8003dea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d6a:	d140      	bne.n	8003dee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d70:	e03d      	b.n	8003dee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d7a:	d121      	bne.n	8003dc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	2b03      	cmp	r3, #3
 8003d80:	d837      	bhi.n	8003df2 <DMA_CheckFifoParam+0xda>
 8003d82:	a201      	add	r2, pc, #4	; (adr r2, 8003d88 <DMA_CheckFifoParam+0x70>)
 8003d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d88:	08003d99 	.word	0x08003d99
 8003d8c:	08003d9f 	.word	0x08003d9f
 8003d90:	08003d99 	.word	0x08003d99
 8003d94:	08003db1 	.word	0x08003db1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d9c:	e030      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d025      	beq.n	8003df6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dae:	e022      	b.n	8003df6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003db8:	d11f      	bne.n	8003dfa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003dbe:	e01c      	b.n	8003dfa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d903      	bls.n	8003dce <DMA_CheckFifoParam+0xb6>
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	2b03      	cmp	r3, #3
 8003dca:	d003      	beq.n	8003dd4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003dcc:	e018      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	73fb      	strb	r3, [r7, #15]
      break;
 8003dd2:	e015      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00e      	beq.n	8003dfe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	73fb      	strb	r3, [r7, #15]
      break;
 8003de4:	e00b      	b.n	8003dfe <DMA_CheckFifoParam+0xe6>
      break;
 8003de6:	bf00      	nop
 8003de8:	e00a      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>
      break;
 8003dea:	bf00      	nop
 8003dec:	e008      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>
      break;
 8003dee:	bf00      	nop
 8003df0:	e006      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>
      break;
 8003df2:	bf00      	nop
 8003df4:	e004      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>
      break;
 8003df6:	bf00      	nop
 8003df8:	e002      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>
      break;   
 8003dfa:	bf00      	nop
 8003dfc:	e000      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>
      break;
 8003dfe:	bf00      	nop
    }
  } 
  
  return status; 
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop

08003e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b089      	sub	sp, #36	; 0x24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e26:	2300      	movs	r3, #0
 8003e28:	61fb      	str	r3, [r7, #28]
 8003e2a:	e165      	b.n	80040f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	f040 8154 	bne.w	80040f2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d005      	beq.n	8003e62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d130      	bne.n	8003ec4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	2203      	movs	r2, #3
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	43db      	mvns	r3, r3
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	4013      	ands	r3, r2
 8003e78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e98:	2201      	movs	r2, #1
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea0:	43db      	mvns	r3, r3
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	091b      	lsrs	r3, r3, #4
 8003eae:	f003 0201 	and.w	r2, r3, #1
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f003 0303 	and.w	r3, r3, #3
 8003ecc:	2b03      	cmp	r3, #3
 8003ece:	d017      	beq.n	8003f00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	2203      	movs	r2, #3
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f003 0303 	and.w	r3, r3, #3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d123      	bne.n	8003f54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	08da      	lsrs	r2, r3, #3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3208      	adds	r2, #8
 8003f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	220f      	movs	r2, #15
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	691a      	ldr	r2, [r3, #16]
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	08da      	lsrs	r2, r3, #3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	3208      	adds	r2, #8
 8003f4e:	69b9      	ldr	r1, [r7, #24]
 8003f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	2203      	movs	r2, #3
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	43db      	mvns	r3, r3
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f003 0203 	and.w	r2, r3, #3
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 80ae 	beq.w	80040f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f96:	2300      	movs	r3, #0
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	4b5d      	ldr	r3, [pc, #372]	; (8004110 <HAL_GPIO_Init+0x300>)
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9e:	4a5c      	ldr	r2, [pc, #368]	; (8004110 <HAL_GPIO_Init+0x300>)
 8003fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8003fa6:	4b5a      	ldr	r3, [pc, #360]	; (8004110 <HAL_GPIO_Init+0x300>)
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fb2:	4a58      	ldr	r2, [pc, #352]	; (8004114 <HAL_GPIO_Init+0x304>)
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	089b      	lsrs	r3, r3, #2
 8003fb8:	3302      	adds	r3, #2
 8003fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	f003 0303 	and.w	r3, r3, #3
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	220f      	movs	r2, #15
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a4f      	ldr	r2, [pc, #316]	; (8004118 <HAL_GPIO_Init+0x308>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d025      	beq.n	800402a <HAL_GPIO_Init+0x21a>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a4e      	ldr	r2, [pc, #312]	; (800411c <HAL_GPIO_Init+0x30c>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d01f      	beq.n	8004026 <HAL_GPIO_Init+0x216>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a4d      	ldr	r2, [pc, #308]	; (8004120 <HAL_GPIO_Init+0x310>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d019      	beq.n	8004022 <HAL_GPIO_Init+0x212>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a4c      	ldr	r2, [pc, #304]	; (8004124 <HAL_GPIO_Init+0x314>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d013      	beq.n	800401e <HAL_GPIO_Init+0x20e>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a4b      	ldr	r2, [pc, #300]	; (8004128 <HAL_GPIO_Init+0x318>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d00d      	beq.n	800401a <HAL_GPIO_Init+0x20a>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a4a      	ldr	r2, [pc, #296]	; (800412c <HAL_GPIO_Init+0x31c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d007      	beq.n	8004016 <HAL_GPIO_Init+0x206>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a49      	ldr	r2, [pc, #292]	; (8004130 <HAL_GPIO_Init+0x320>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d101      	bne.n	8004012 <HAL_GPIO_Init+0x202>
 800400e:	2306      	movs	r3, #6
 8004010:	e00c      	b.n	800402c <HAL_GPIO_Init+0x21c>
 8004012:	2307      	movs	r3, #7
 8004014:	e00a      	b.n	800402c <HAL_GPIO_Init+0x21c>
 8004016:	2305      	movs	r3, #5
 8004018:	e008      	b.n	800402c <HAL_GPIO_Init+0x21c>
 800401a:	2304      	movs	r3, #4
 800401c:	e006      	b.n	800402c <HAL_GPIO_Init+0x21c>
 800401e:	2303      	movs	r3, #3
 8004020:	e004      	b.n	800402c <HAL_GPIO_Init+0x21c>
 8004022:	2302      	movs	r3, #2
 8004024:	e002      	b.n	800402c <HAL_GPIO_Init+0x21c>
 8004026:	2301      	movs	r3, #1
 8004028:	e000      	b.n	800402c <HAL_GPIO_Init+0x21c>
 800402a:	2300      	movs	r3, #0
 800402c:	69fa      	ldr	r2, [r7, #28]
 800402e:	f002 0203 	and.w	r2, r2, #3
 8004032:	0092      	lsls	r2, r2, #2
 8004034:	4093      	lsls	r3, r2
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	4313      	orrs	r3, r2
 800403a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800403c:	4935      	ldr	r1, [pc, #212]	; (8004114 <HAL_GPIO_Init+0x304>)
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	089b      	lsrs	r3, r3, #2
 8004042:	3302      	adds	r3, #2
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800404a:	4b3a      	ldr	r3, [pc, #232]	; (8004134 <HAL_GPIO_Init+0x324>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	43db      	mvns	r3, r3
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	4013      	ands	r3, r2
 8004058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	4313      	orrs	r3, r2
 800406c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800406e:	4a31      	ldr	r2, [pc, #196]	; (8004134 <HAL_GPIO_Init+0x324>)
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004074:	4b2f      	ldr	r3, [pc, #188]	; (8004134 <HAL_GPIO_Init+0x324>)
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	43db      	mvns	r3, r3
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	4013      	ands	r3, r2
 8004082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d003      	beq.n	8004098 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	4313      	orrs	r3, r2
 8004096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004098:	4a26      	ldr	r2, [pc, #152]	; (8004134 <HAL_GPIO_Init+0x324>)
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800409e:	4b25      	ldr	r3, [pc, #148]	; (8004134 <HAL_GPIO_Init+0x324>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	43db      	mvns	r3, r3
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	4013      	ands	r3, r2
 80040ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	4313      	orrs	r3, r2
 80040c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040c2:	4a1c      	ldr	r2, [pc, #112]	; (8004134 <HAL_GPIO_Init+0x324>)
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040c8:	4b1a      	ldr	r3, [pc, #104]	; (8004134 <HAL_GPIO_Init+0x324>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	43db      	mvns	r3, r3
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	4013      	ands	r3, r2
 80040d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d003      	beq.n	80040ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040ec:	4a11      	ldr	r2, [pc, #68]	; (8004134 <HAL_GPIO_Init+0x324>)
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	3301      	adds	r3, #1
 80040f6:	61fb      	str	r3, [r7, #28]
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	2b0f      	cmp	r3, #15
 80040fc:	f67f ae96 	bls.w	8003e2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004100:	bf00      	nop
 8004102:	bf00      	nop
 8004104:	3724      	adds	r7, #36	; 0x24
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	40023800 	.word	0x40023800
 8004114:	40013800 	.word	0x40013800
 8004118:	40020000 	.word	0x40020000
 800411c:	40020400 	.word	0x40020400
 8004120:	40020800 	.word	0x40020800
 8004124:	40020c00 	.word	0x40020c00
 8004128:	40021000 	.word	0x40021000
 800412c:	40021400 	.word	0x40021400
 8004130:	40021800 	.word	0x40021800
 8004134:	40013c00 	.word	0x40013c00

08004138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	460b      	mov	r3, r1
 8004142:	807b      	strh	r3, [r7, #2]
 8004144:	4613      	mov	r3, r2
 8004146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004148:	787b      	ldrb	r3, [r7, #1]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800414e:	887a      	ldrh	r2, [r7, #2]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004154:	e003      	b.n	800415e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004156:	887b      	ldrh	r3, [r7, #2]
 8004158:	041a      	lsls	r2, r3, #16
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	619a      	str	r2, [r3, #24]
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800416a:	b480      	push	{r7}
 800416c:	b085      	sub	sp, #20
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
 8004172:	460b      	mov	r3, r1
 8004174:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800417c:	887a      	ldrh	r2, [r7, #2]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	4013      	ands	r3, r2
 8004182:	041a      	lsls	r2, r3, #16
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	43d9      	mvns	r1, r3
 8004188:	887b      	ldrh	r3, [r7, #2]
 800418a:	400b      	ands	r3, r1
 800418c:	431a      	orrs	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	619a      	str	r2, [r3, #24]
}
 8004192:	bf00      	nop
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
	...

080041a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e12b      	b.n	800440a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d106      	bne.n	80041cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fe fed2 	bl	8002f70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2224      	movs	r2, #36	; 0x24
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0201 	bic.w	r2, r2, #1
 80041e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004202:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004204:	f002 f808 	bl	8006218 <HAL_RCC_GetPCLK1Freq>
 8004208:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	4a81      	ldr	r2, [pc, #516]	; (8004414 <HAL_I2C_Init+0x274>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d807      	bhi.n	8004224 <HAL_I2C_Init+0x84>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4a80      	ldr	r2, [pc, #512]	; (8004418 <HAL_I2C_Init+0x278>)
 8004218:	4293      	cmp	r3, r2
 800421a:	bf94      	ite	ls
 800421c:	2301      	movls	r3, #1
 800421e:	2300      	movhi	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	e006      	b.n	8004232 <HAL_I2C_Init+0x92>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4a7d      	ldr	r2, [pc, #500]	; (800441c <HAL_I2C_Init+0x27c>)
 8004228:	4293      	cmp	r3, r2
 800422a:	bf94      	ite	ls
 800422c:	2301      	movls	r3, #1
 800422e:	2300      	movhi	r3, #0
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e0e7      	b.n	800440a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4a78      	ldr	r2, [pc, #480]	; (8004420 <HAL_I2C_Init+0x280>)
 800423e:	fba2 2303 	umull	r2, r3, r2, r3
 8004242:	0c9b      	lsrs	r3, r3, #18
 8004244:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	430a      	orrs	r2, r1
 8004258:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	4a6a      	ldr	r2, [pc, #424]	; (8004414 <HAL_I2C_Init+0x274>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d802      	bhi.n	8004274 <HAL_I2C_Init+0xd4>
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	3301      	adds	r3, #1
 8004272:	e009      	b.n	8004288 <HAL_I2C_Init+0xe8>
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800427a:	fb02 f303 	mul.w	r3, r2, r3
 800427e:	4a69      	ldr	r2, [pc, #420]	; (8004424 <HAL_I2C_Init+0x284>)
 8004280:	fba2 2303 	umull	r2, r3, r2, r3
 8004284:	099b      	lsrs	r3, r3, #6
 8004286:	3301      	adds	r3, #1
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6812      	ldr	r2, [r2, #0]
 800428c:	430b      	orrs	r3, r1
 800428e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800429a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	495c      	ldr	r1, [pc, #368]	; (8004414 <HAL_I2C_Init+0x274>)
 80042a4:	428b      	cmp	r3, r1
 80042a6:	d819      	bhi.n	80042dc <HAL_I2C_Init+0x13c>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	1e59      	subs	r1, r3, #1
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80042b6:	1c59      	adds	r1, r3, #1
 80042b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80042bc:	400b      	ands	r3, r1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00a      	beq.n	80042d8 <HAL_I2C_Init+0x138>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	1e59      	subs	r1, r3, #1
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80042d0:	3301      	adds	r3, #1
 80042d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042d6:	e051      	b.n	800437c <HAL_I2C_Init+0x1dc>
 80042d8:	2304      	movs	r3, #4
 80042da:	e04f      	b.n	800437c <HAL_I2C_Init+0x1dc>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d111      	bne.n	8004308 <HAL_I2C_Init+0x168>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	1e58      	subs	r0, r3, #1
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6859      	ldr	r1, [r3, #4]
 80042ec:	460b      	mov	r3, r1
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	440b      	add	r3, r1
 80042f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80042f6:	3301      	adds	r3, #1
 80042f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	bf0c      	ite	eq
 8004300:	2301      	moveq	r3, #1
 8004302:	2300      	movne	r3, #0
 8004304:	b2db      	uxtb	r3, r3
 8004306:	e012      	b.n	800432e <HAL_I2C_Init+0x18e>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	1e58      	subs	r0, r3, #1
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6859      	ldr	r1, [r3, #4]
 8004310:	460b      	mov	r3, r1
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	440b      	add	r3, r1
 8004316:	0099      	lsls	r1, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	fbb0 f3f3 	udiv	r3, r0, r3
 800431e:	3301      	adds	r3, #1
 8004320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004324:	2b00      	cmp	r3, #0
 8004326:	bf0c      	ite	eq
 8004328:	2301      	moveq	r3, #1
 800432a:	2300      	movne	r3, #0
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <HAL_I2C_Init+0x196>
 8004332:	2301      	movs	r3, #1
 8004334:	e022      	b.n	800437c <HAL_I2C_Init+0x1dc>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10e      	bne.n	800435c <HAL_I2C_Init+0x1bc>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	1e58      	subs	r0, r3, #1
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6859      	ldr	r1, [r3, #4]
 8004346:	460b      	mov	r3, r1
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	440b      	add	r3, r1
 800434c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004350:	3301      	adds	r3, #1
 8004352:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800435a:	e00f      	b.n	800437c <HAL_I2C_Init+0x1dc>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	1e58      	subs	r0, r3, #1
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6859      	ldr	r1, [r3, #4]
 8004364:	460b      	mov	r3, r1
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	440b      	add	r3, r1
 800436a:	0099      	lsls	r1, r3, #2
 800436c:	440b      	add	r3, r1
 800436e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004372:	3301      	adds	r3, #1
 8004374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004378:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800437c:	6879      	ldr	r1, [r7, #4]
 800437e:	6809      	ldr	r1, [r1, #0]
 8004380:	4313      	orrs	r3, r2
 8004382:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69da      	ldr	r2, [r3, #28]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	431a      	orrs	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80043aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	6911      	ldr	r1, [r2, #16]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	68d2      	ldr	r2, [r2, #12]
 80043b6:	4311      	orrs	r1, r2
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6812      	ldr	r2, [r2, #0]
 80043bc:	430b      	orrs	r3, r1
 80043be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	695a      	ldr	r2, [r3, #20]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	430a      	orrs	r2, r1
 80043da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0201 	orr.w	r2, r2, #1
 80043ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2220      	movs	r2, #32
 80043f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	000186a0 	.word	0x000186a0
 8004418:	001e847f 	.word	0x001e847f
 800441c:	003d08ff 	.word	0x003d08ff
 8004420:	431bde83 	.word	0x431bde83
 8004424:	10624dd3 	.word	0x10624dd3

08004428 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004428:	b480      	push	{r7}
 800442a:	b087      	sub	sp, #28
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	607a      	str	r2, [r7, #4]
 8004432:	461a      	mov	r2, r3
 8004434:	460b      	mov	r3, r1
 8004436:	817b      	strh	r3, [r7, #10]
 8004438:	4613      	mov	r3, r2
 800443a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800443c:	2300      	movs	r3, #0
 800443e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b20      	cmp	r3, #32
 800444a:	f040 8085 	bne.w	8004558 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800444e:	4b46      	ldr	r3, [pc, #280]	; (8004568 <HAL_I2C_Master_Transmit_IT+0x140>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	08db      	lsrs	r3, r3, #3
 8004454:	4a45      	ldr	r2, [pc, #276]	; (800456c <HAL_I2C_Master_Transmit_IT+0x144>)
 8004456:	fba2 2303 	umull	r2, r3, r2, r3
 800445a:	0a1a      	lsrs	r2, r3, #8
 800445c:	4613      	mov	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	009a      	lsls	r2, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	3b01      	subs	r3, #1
 800446c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d116      	bne.n	80044a2 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2220      	movs	r2, #32
 800447e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	f043 0220 	orr.w	r2, r3, #32
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e05b      	b.n	800455a <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d0db      	beq.n	8004468 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d101      	bne.n	80044be <HAL_I2C_Master_Transmit_IT+0x96>
 80044ba:	2302      	movs	r3, #2
 80044bc:	e04d      	b.n	800455a <HAL_I2C_Master_Transmit_IT+0x132>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d007      	beq.n	80044e4 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0201 	orr.w	r2, r2, #1
 80044e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2221      	movs	r2, #33	; 0x21
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2210      	movs	r2, #16
 8004500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	893a      	ldrh	r2, [r7, #8]
 8004514:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800451a:	b29a      	uxth	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4a13      	ldr	r2, [pc, #76]	; (8004570 <HAL_I2C_Master_Transmit_IT+0x148>)
 8004524:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004526:	897a      	ldrh	r2, [r7, #10]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800453a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004552:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004554:	2300      	movs	r3, #0
 8004556:	e000      	b.n	800455a <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8004558:	2302      	movs	r3, #2
  }
}
 800455a:	4618      	mov	r0, r3
 800455c:	371c      	adds	r7, #28
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	20000064 	.word	0x20000064
 800456c:	14f8b589 	.word	0x14f8b589
 8004570:	ffff0000 	.word	0xffff0000

08004574 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	607a      	str	r2, [r7, #4]
 800457e:	461a      	mov	r2, r3
 8004580:	460b      	mov	r3, r1
 8004582:	817b      	strh	r3, [r7, #10]
 8004584:	4613      	mov	r3, r2
 8004586:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b20      	cmp	r3, #32
 8004596:	f040 808d 	bne.w	80046b4 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800459a:	4b4a      	ldr	r3, [pc, #296]	; (80046c4 <HAL_I2C_Master_Receive_IT+0x150>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	08db      	lsrs	r3, r3, #3
 80045a0:	4a49      	ldr	r2, [pc, #292]	; (80046c8 <HAL_I2C_Master_Receive_IT+0x154>)
 80045a2:	fba2 2303 	umull	r2, r3, r2, r3
 80045a6:	0a1a      	lsrs	r2, r3, #8
 80045a8:	4613      	mov	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4413      	add	r3, r2
 80045ae:	009a      	lsls	r2, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d116      	bne.n	80045ee <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2220      	movs	r2, #32
 80045ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	f043 0220 	orr.w	r2, r3, #32
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e063      	b.n	80046b6 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d0db      	beq.n	80045b4 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004602:	2b01      	cmp	r3, #1
 8004604:	d101      	bne.n	800460a <HAL_I2C_Master_Receive_IT+0x96>
 8004606:	2302      	movs	r3, #2
 8004608:	e055      	b.n	80046b6 <HAL_I2C_Master_Receive_IT+0x142>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b01      	cmp	r3, #1
 800461e:	d007      	beq.n	8004630 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0201 	orr.w	r2, r2, #1
 800462e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800463e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2222      	movs	r2, #34	; 0x22
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2210      	movs	r2, #16
 800464c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	893a      	ldrh	r2, [r7, #8]
 8004660:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004666:	b29a      	uxth	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4a17      	ldr	r2, [pc, #92]	; (80046cc <HAL_I2C_Master_Receive_IT+0x158>)
 8004670:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004672:	897a      	ldrh	r2, [r7, #10]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004686:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004696:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80046ae:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80046b0:	2300      	movs	r3, #0
 80046b2:	e000      	b.n	80046b6 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 80046b4:	2302      	movs	r3, #2
  }
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	20000064 	.word	0x20000064
 80046c8:	14f8b589 	.word	0x14f8b589
 80046cc:	ffff0000 	.word	0xffff0000

080046d0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b088      	sub	sp, #32
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046f0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80046fa:	7bfb      	ldrb	r3, [r7, #15]
 80046fc:	2b10      	cmp	r3, #16
 80046fe:	d003      	beq.n	8004708 <HAL_I2C_EV_IRQHandler+0x38>
 8004700:	7bfb      	ldrb	r3, [r7, #15]
 8004702:	2b40      	cmp	r3, #64	; 0x40
 8004704:	f040 80bd 	bne.w	8004882 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10d      	bne.n	800473e <HAL_I2C_EV_IRQHandler+0x6e>
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004728:	d003      	beq.n	8004732 <HAL_I2C_EV_IRQHandler+0x62>
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004730:	d101      	bne.n	8004736 <HAL_I2C_EV_IRQHandler+0x66>
 8004732:	2301      	movs	r3, #1
 8004734:	e000      	b.n	8004738 <HAL_I2C_EV_IRQHandler+0x68>
 8004736:	2300      	movs	r3, #0
 8004738:	2b01      	cmp	r3, #1
 800473a:	f000 812e 	beq.w	800499a <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00c      	beq.n	8004762 <HAL_I2C_EV_IRQHandler+0x92>
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	0a5b      	lsrs	r3, r3, #9
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b00      	cmp	r3, #0
 8004752:	d006      	beq.n	8004762 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f001 fc51 	bl	8005ffc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fd5e 	bl	800521c <I2C_Master_SB>
 8004760:	e08e      	b.n	8004880 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	08db      	lsrs	r3, r3, #3
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d009      	beq.n	8004782 <HAL_I2C_EV_IRQHandler+0xb2>
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	0a5b      	lsrs	r3, r3, #9
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 fdd4 	bl	8005328 <I2C_Master_ADD10>
 8004780:	e07e      	b.n	8004880 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	085b      	lsrs	r3, r3, #1
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d009      	beq.n	80047a2 <HAL_I2C_EV_IRQHandler+0xd2>
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	0a5b      	lsrs	r3, r3, #9
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 fdee 	bl	800537c <I2C_Master_ADDR>
 80047a0:	e06e      	b.n	8004880 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	089b      	lsrs	r3, r3, #2
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d037      	beq.n	800481e <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047bc:	f000 80ef 	beq.w	800499e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	09db      	lsrs	r3, r3, #7
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00f      	beq.n	80047ec <HAL_I2C_EV_IRQHandler+0x11c>
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	0a9b      	lsrs	r3, r3, #10
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d009      	beq.n	80047ec <HAL_I2C_EV_IRQHandler+0x11c>
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	089b      	lsrs	r3, r3, #2
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d103      	bne.n	80047ec <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f9eb 	bl	8004bc0 <I2C_MasterTransmit_TXE>
 80047ea:	e049      	b.n	8004880 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	089b      	lsrs	r3, r3, #2
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 80d2 	beq.w	800499e <HAL_I2C_EV_IRQHandler+0x2ce>
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	0a5b      	lsrs	r3, r3, #9
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 80cb 	beq.w	800499e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8004808:	7bfb      	ldrb	r3, [r7, #15]
 800480a:	2b10      	cmp	r3, #16
 800480c:	d103      	bne.n	8004816 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fa72 	bl	8004cf8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004814:	e0c3      	b.n	800499e <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 fad6 	bl	8004dc8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800481c:	e0bf      	b.n	800499e <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004828:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800482c:	f000 80b7 	beq.w	800499e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	099b      	lsrs	r3, r3, #6
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00f      	beq.n	800485c <HAL_I2C_EV_IRQHandler+0x18c>
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	0a9b      	lsrs	r3, r3, #10
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	d009      	beq.n	800485c <HAL_I2C_EV_IRQHandler+0x18c>
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	089b      	lsrs	r3, r3, #2
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b00      	cmp	r3, #0
 8004852:	d103      	bne.n	800485c <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 fb46 	bl	8004ee6 <I2C_MasterReceive_RXNE>
 800485a:	e011      	b.n	8004880 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	089b      	lsrs	r3, r3, #2
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 809a 	beq.w	800499e <HAL_I2C_EV_IRQHandler+0x2ce>
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	0a5b      	lsrs	r3, r3, #9
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 8093 	beq.w	800499e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 fbe5 	bl	8005048 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800487e:	e08e      	b.n	800499e <HAL_I2C_EV_IRQHandler+0x2ce>
 8004880:	e08d      	b.n	800499e <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	2b00      	cmp	r3, #0
 8004888:	d004      	beq.n	8004894 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	61fb      	str	r3, [r7, #28]
 8004892:	e007      	b.n	80048a4 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	085b      	lsrs	r3, r3, #1
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d012      	beq.n	80048d6 <HAL_I2C_EV_IRQHandler+0x206>
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	0a5b      	lsrs	r3, r3, #9
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00c      	beq.n	80048d6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d003      	beq.n	80048cc <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80048cc:	69b9      	ldr	r1, [r7, #24]
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 ffa3 	bl	800581a <I2C_Slave_ADDR>
 80048d4:	e066      	b.n	80049a4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	091b      	lsrs	r3, r3, #4
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d009      	beq.n	80048f6 <HAL_I2C_EV_IRQHandler+0x226>
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	0a5b      	lsrs	r3, r3, #9
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 ffd8 	bl	80058a4 <I2C_Slave_STOPF>
 80048f4:	e056      	b.n	80049a4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80048f6:	7bbb      	ldrb	r3, [r7, #14]
 80048f8:	2b21      	cmp	r3, #33	; 0x21
 80048fa:	d002      	beq.n	8004902 <HAL_I2C_EV_IRQHandler+0x232>
 80048fc:	7bbb      	ldrb	r3, [r7, #14]
 80048fe:	2b29      	cmp	r3, #41	; 0x29
 8004900:	d125      	bne.n	800494e <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	09db      	lsrs	r3, r3, #7
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00f      	beq.n	800492e <HAL_I2C_EV_IRQHandler+0x25e>
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	0a9b      	lsrs	r3, r3, #10
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d009      	beq.n	800492e <HAL_I2C_EV_IRQHandler+0x25e>
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	089b      	lsrs	r3, r3, #2
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d103      	bne.n	800492e <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 feb9 	bl	800569e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800492c:	e039      	b.n	80049a2 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	089b      	lsrs	r3, r3, #2
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d033      	beq.n	80049a2 <HAL_I2C_EV_IRQHandler+0x2d2>
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	0a5b      	lsrs	r3, r3, #9
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	d02d      	beq.n	80049a2 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 fee6 	bl	8005718 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800494c:	e029      	b.n	80049a2 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	099b      	lsrs	r3, r3, #6
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00f      	beq.n	800497a <HAL_I2C_EV_IRQHandler+0x2aa>
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	0a9b      	lsrs	r3, r3, #10
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d009      	beq.n	800497a <HAL_I2C_EV_IRQHandler+0x2aa>
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	089b      	lsrs	r3, r3, #2
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	d103      	bne.n	800497a <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fef1 	bl	800575a <I2C_SlaveReceive_RXNE>
 8004978:	e014      	b.n	80049a4 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	089b      	lsrs	r3, r3, #2
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00e      	beq.n	80049a4 <HAL_I2C_EV_IRQHandler+0x2d4>
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	0a5b      	lsrs	r3, r3, #9
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d008      	beq.n	80049a4 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 ff1f 	bl	80057d6 <I2C_SlaveReceive_BTF>
 8004998:	e004      	b.n	80049a4 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800499a:	bf00      	nop
 800499c:	e002      	b.n	80049a4 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800499e:	bf00      	nop
 80049a0:	e000      	b.n	80049a4 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049a2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80049a4:	3720      	adds	r7, #32
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b08a      	sub	sp, #40	; 0x28
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80049c2:	2300      	movs	r3, #0
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049cc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	0a1b      	lsrs	r3, r3, #8
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00e      	beq.n	80049f8 <HAL_I2C_ER_IRQHandler+0x4e>
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	0a1b      	lsrs	r3, r3, #8
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d008      	beq.n	80049f8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	f043 0301 	orr.w	r3, r3, #1
 80049ec:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049f6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80049f8:	6a3b      	ldr	r3, [r7, #32]
 80049fa:	0a5b      	lsrs	r3, r3, #9
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00e      	beq.n	8004a22 <HAL_I2C_ER_IRQHandler+0x78>
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	0a1b      	lsrs	r3, r3, #8
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d008      	beq.n	8004a22 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	f043 0302 	orr.w	r3, r3, #2
 8004a16:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004a20:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a22:	6a3b      	ldr	r3, [r7, #32]
 8004a24:	0a9b      	lsrs	r3, r3, #10
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d03f      	beq.n	8004aae <HAL_I2C_ER_IRQHandler+0x104>
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	0a1b      	lsrs	r3, r3, #8
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d039      	beq.n	8004aae <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004a3a:	7efb      	ldrb	r3, [r7, #27]
 8004a3c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a4c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a52:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004a54:	7ebb      	ldrb	r3, [r7, #26]
 8004a56:	2b20      	cmp	r3, #32
 8004a58:	d112      	bne.n	8004a80 <HAL_I2C_ER_IRQHandler+0xd6>
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10f      	bne.n	8004a80 <HAL_I2C_ER_IRQHandler+0xd6>
 8004a60:	7cfb      	ldrb	r3, [r7, #19]
 8004a62:	2b21      	cmp	r3, #33	; 0x21
 8004a64:	d008      	beq.n	8004a78 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004a66:	7cfb      	ldrb	r3, [r7, #19]
 8004a68:	2b29      	cmp	r3, #41	; 0x29
 8004a6a:	d005      	beq.n	8004a78 <HAL_I2C_ER_IRQHandler+0xce>
 8004a6c:	7cfb      	ldrb	r3, [r7, #19]
 8004a6e:	2b28      	cmp	r3, #40	; 0x28
 8004a70:	d106      	bne.n	8004a80 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2b21      	cmp	r3, #33	; 0x21
 8004a76:	d103      	bne.n	8004a80 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f001 f843 	bl	8005b04 <I2C_Slave_AF>
 8004a7e:	e016      	b.n	8004aae <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a88:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	f043 0304 	orr.w	r3, r3, #4
 8004a90:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004a92:	7efb      	ldrb	r3, [r7, #27]
 8004a94:	2b10      	cmp	r3, #16
 8004a96:	d002      	beq.n	8004a9e <HAL_I2C_ER_IRQHandler+0xf4>
 8004a98:	7efb      	ldrb	r3, [r7, #27]
 8004a9a:	2b40      	cmp	r3, #64	; 0x40
 8004a9c:	d107      	bne.n	8004aae <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aac:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	0adb      	lsrs	r3, r3, #11
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00e      	beq.n	8004ad8 <HAL_I2C_ER_IRQHandler+0x12e>
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	0a1b      	lsrs	r3, r3, #8
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d008      	beq.n	8004ad8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	f043 0308 	orr.w	r3, r3, #8
 8004acc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004ad6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d008      	beq.n	8004af0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f001 f87a 	bl	8005be4 <I2C_ITError>
  }
}
 8004af0:	bf00      	nop
 8004af2:	3728      	adds	r7, #40	; 0x28
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	460b      	mov	r3, r1
 8004b2a:	70fb      	strb	r3, [r7, #3]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b9a:	b2db      	uxtb	r3, r3
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bd6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bdc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d150      	bne.n	8004c88 <I2C_MasterTransmit_TXE+0xc8>
 8004be6:	7bfb      	ldrb	r3, [r7, #15]
 8004be8:	2b21      	cmp	r3, #33	; 0x21
 8004bea:	d14d      	bne.n	8004c88 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	2b08      	cmp	r3, #8
 8004bf0:	d01d      	beq.n	8004c2e <I2C_MasterTransmit_TXE+0x6e>
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2b20      	cmp	r3, #32
 8004bf6:	d01a      	beq.n	8004c2e <I2C_MasterTransmit_TXE+0x6e>
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bfe:	d016      	beq.n	8004c2e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c0e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2211      	movs	r2, #17
 8004c14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2220      	movs	r2, #32
 8004c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7fb ffe6 	bl	8000bf8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c2c:	e060      	b.n	8004cf0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c3c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c4c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2220      	movs	r2, #32
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b40      	cmp	r3, #64	; 0x40
 8004c66:	d107      	bne.n	8004c78 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f7ff ff6d 	bl	8004b50 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c76:	e03b      	b.n	8004cf0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f7fb ffb9 	bl	8000bf8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c86:	e033      	b.n	8004cf0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
 8004c8a:	2b21      	cmp	r3, #33	; 0x21
 8004c8c:	d005      	beq.n	8004c9a <I2C_MasterTransmit_TXE+0xda>
 8004c8e:	7bbb      	ldrb	r3, [r7, #14]
 8004c90:	2b40      	cmp	r3, #64	; 0x40
 8004c92:	d12d      	bne.n	8004cf0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
 8004c96:	2b22      	cmp	r3, #34	; 0x22
 8004c98:	d12a      	bne.n	8004cf0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d108      	bne.n	8004cb6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cb2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004cb4:	e01c      	b.n	8004cf0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b40      	cmp	r3, #64	; 0x40
 8004cc0:	d103      	bne.n	8004cca <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f880 	bl	8004dc8 <I2C_MemoryTransmit_TXE_BTF>
}
 8004cc8:	e012      	b.n	8004cf0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	781a      	ldrb	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004cee:	e7ff      	b.n	8004cf0 <I2C_MasterTransmit_TXE+0x130>
 8004cf0:	bf00      	nop
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d04:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b21      	cmp	r3, #33	; 0x21
 8004d10:	d156      	bne.n	8004dc0 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d012      	beq.n	8004d42 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	781a      	ldrb	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004d40:	e03e      	b.n	8004dc0 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2b08      	cmp	r3, #8
 8004d46:	d01d      	beq.n	8004d84 <I2C_MasterTransmit_BTF+0x8c>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2b20      	cmp	r3, #32
 8004d4c:	d01a      	beq.n	8004d84 <I2C_MasterTransmit_BTF+0x8c>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d54:	d016      	beq.n	8004d84 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d64:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2211      	movs	r2, #17
 8004d6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2220      	movs	r2, #32
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f7fb ff3b 	bl	8000bf8 <HAL_I2C_MasterTxCpltCallback>
}
 8004d82:	e01d      	b.n	8004dc0 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d92:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004da2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2220      	movs	r2, #32
 8004dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7fb ff1c 	bl	8000bf8 <HAL_I2C_MasterTxCpltCallback>
}
 8004dc0:	bf00      	nop
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d11d      	bne.n	8004e1c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d10b      	bne.n	8004e00 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df8:	1c9a      	adds	r2, r3, #2
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004dfe:	e06e      	b.n	8004ede <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	121b      	asrs	r3, r3, #8
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e14:	1c5a      	adds	r2, r3, #1
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e1a:	e060      	b.n	8004ede <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d10b      	bne.n	8004e3c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e28:	b2da      	uxtb	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e34:	1c5a      	adds	r2, r3, #1
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e3a:	e050      	b.n	8004ede <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d14c      	bne.n	8004ede <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004e44:	7bfb      	ldrb	r3, [r7, #15]
 8004e46:	2b22      	cmp	r3, #34	; 0x22
 8004e48:	d108      	bne.n	8004e5c <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e58:	601a      	str	r2, [r3, #0]
}
 8004e5a:	e040      	b.n	8004ede <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d015      	beq.n	8004e92 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8004e66:	7bfb      	ldrb	r3, [r7, #15]
 8004e68:	2b21      	cmp	r3, #33	; 0x21
 8004e6a:	d112      	bne.n	8004e92 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e70:	781a      	ldrb	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	1c5a      	adds	r2, r3, #1
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004e90:	e025      	b.n	8004ede <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d120      	bne.n	8004ede <I2C_MemoryTransmit_TXE_BTF+0x116>
 8004e9c:	7bfb      	ldrb	r3, [r7, #15]
 8004e9e:	2b21      	cmp	r3, #33	; 0x21
 8004ea0:	d11d      	bne.n	8004ede <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004eb0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ec0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7ff fe39 	bl	8004b50 <HAL_I2C_MemTxCpltCallback>
}
 8004ede:	bf00      	nop
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b084      	sub	sp, #16
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b22      	cmp	r3, #34	; 0x22
 8004ef8:	f040 80a2 	bne.w	8005040 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2b03      	cmp	r3, #3
 8004f08:	d921      	bls.n	8004f4e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	691a      	ldr	r2, [r3, #16]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	b2d2      	uxtb	r2, r2
 8004f16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	1c5a      	adds	r2, r3, #1
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	2b03      	cmp	r3, #3
 8004f38:	f040 8082 	bne.w	8005040 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f4a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004f4c:	e078      	b.n	8005040 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d074      	beq.n	8005040 <I2C_MasterReceive_RXNE+0x15a>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d002      	beq.n	8004f62 <I2C_MasterReceive_RXNE+0x7c>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d16e      	bne.n	8005040 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f001 f818 	bl	8005f98 <I2C_WaitOnSTOPRequestThroughIT>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d142      	bne.n	8004ff4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f7c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f8c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	691a      	ldr	r2, [r3, #16]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	b2d2      	uxtb	r2, r2
 8004f9a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	3b01      	subs	r3, #1
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b40      	cmp	r3, #64	; 0x40
 8004fc6:	d10a      	bne.n	8004fde <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7ff fdc4 	bl	8004b64 <HAL_I2C_MemRxCpltCallback>
}
 8004fdc:	e030      	b.n	8005040 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2212      	movs	r2, #18
 8004fea:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f7fb fe13 	bl	8000c18 <HAL_I2C_MasterRxCpltCallback>
}
 8004ff2:	e025      	b.n	8005040 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005002:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	691a      	ldr	r2, [r3, #16]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	b2d2      	uxtb	r2, r2
 8005010:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	1c5a      	adds	r2, r3, #1
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005020:	b29b      	uxth	r3, r3
 8005022:	3b01      	subs	r3, #1
 8005024:	b29a      	uxth	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2220      	movs	r2, #32
 800502e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7fb fdfc 	bl	8000c38 <HAL_I2C_ErrorCallback>
}
 8005040:	bf00      	nop
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005054:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505a:	b29b      	uxth	r3, r3
 800505c:	2b04      	cmp	r3, #4
 800505e:	d11b      	bne.n	8005098 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800506e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	691a      	ldr	r2, [r3, #16]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	b2d2      	uxtb	r2, r2
 800507c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005082:	1c5a      	adds	r2, r3, #1
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508c:	b29b      	uxth	r3, r3
 800508e:	3b01      	subs	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005096:	e0bd      	b.n	8005214 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509c:	b29b      	uxth	r3, r3
 800509e:	2b03      	cmp	r3, #3
 80050a0:	d129      	bne.n	80050f6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2b04      	cmp	r3, #4
 80050b6:	d00a      	beq.n	80050ce <I2C_MasterReceive_BTF+0x86>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d007      	beq.n	80050ce <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050cc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	691a      	ldr	r2, [r3, #16]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	b2d2      	uxtb	r2, r2
 80050da:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	1c5a      	adds	r2, r3, #1
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80050f4:	e08e      	b.n	8005214 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d176      	bne.n	80051ee <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d002      	beq.n	800510c <I2C_MasterReceive_BTF+0xc4>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2b10      	cmp	r3, #16
 800510a:	d108      	bne.n	800511e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	e019      	b.n	8005152 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2b04      	cmp	r3, #4
 8005122:	d002      	beq.n	800512a <I2C_MasterReceive_BTF+0xe2>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2b02      	cmp	r3, #2
 8005128:	d108      	bne.n	800513c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	e00a      	b.n	8005152 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2b10      	cmp	r3, #16
 8005140:	d007      	beq.n	8005152 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005150:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	691a      	ldr	r2, [r3, #16]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	b2d2      	uxtb	r2, r2
 800515e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	1c5a      	adds	r2, r3, #1
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800516e:	b29b      	uxth	r3, r3
 8005170:	3b01      	subs	r3, #1
 8005172:	b29a      	uxth	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	691a      	ldr	r2, [r3, #16]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	b2d2      	uxtb	r2, r2
 8005184:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518a:	1c5a      	adds	r2, r3, #1
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005194:	b29b      	uxth	r3, r3
 8005196:	3b01      	subs	r3, #1
 8005198:	b29a      	uxth	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80051ac:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2220      	movs	r2, #32
 80051b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b40      	cmp	r3, #64	; 0x40
 80051c0:	d10a      	bne.n	80051d8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f7ff fcc7 	bl	8004b64 <HAL_I2C_MemRxCpltCallback>
}
 80051d6:	e01d      	b.n	8005214 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2212      	movs	r2, #18
 80051e4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7fb fd16 	bl	8000c18 <HAL_I2C_MasterRxCpltCallback>
}
 80051ec:	e012      	b.n	8005214 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	691a      	ldr	r2, [r3, #16]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	b2d2      	uxtb	r2, r2
 80051fa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	1c5a      	adds	r2, r3, #1
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520a:	b29b      	uxth	r3, r3
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005214:	bf00      	nop
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b40      	cmp	r3, #64	; 0x40
 800522e:	d117      	bne.n	8005260 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005234:	2b00      	cmp	r3, #0
 8005236:	d109      	bne.n	800524c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800523c:	b2db      	uxtb	r3, r3
 800523e:	461a      	mov	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005248:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800524a:	e067      	b.n	800531c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005250:	b2db      	uxtb	r3, r3
 8005252:	f043 0301 	orr.w	r3, r3, #1
 8005256:	b2da      	uxtb	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	611a      	str	r2, [r3, #16]
}
 800525e:	e05d      	b.n	800531c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005268:	d133      	bne.n	80052d2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b21      	cmp	r3, #33	; 0x21
 8005274:	d109      	bne.n	800528a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527a:	b2db      	uxtb	r3, r3
 800527c:	461a      	mov	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005286:	611a      	str	r2, [r3, #16]
 8005288:	e008      	b.n	800529c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528e:	b2db      	uxtb	r3, r3
 8005290:	f043 0301 	orr.w	r3, r3, #1
 8005294:	b2da      	uxtb	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d004      	beq.n	80052ae <I2C_Master_SB+0x92>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d108      	bne.n	80052c0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d032      	beq.n	800531c <I2C_Master_SB+0x100>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d02d      	beq.n	800531c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052ce:	605a      	str	r2, [r3, #4]
}
 80052d0:	e024      	b.n	800531c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10e      	bne.n	80052f8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052de:	b29b      	uxth	r3, r3
 80052e0:	11db      	asrs	r3, r3, #7
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	f003 0306 	and.w	r3, r3, #6
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	f063 030f 	orn	r3, r3, #15
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	611a      	str	r2, [r3, #16]
}
 80052f6:	e011      	b.n	800531c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d10d      	bne.n	800531c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005304:	b29b      	uxth	r3, r3
 8005306:	11db      	asrs	r3, r3, #7
 8005308:	b2db      	uxtb	r3, r3
 800530a:	f003 0306 	and.w	r3, r3, #6
 800530e:	b2db      	uxtb	r3, r3
 8005310:	f063 030e 	orn	r3, r3, #14
 8005314:	b2da      	uxtb	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	611a      	str	r2, [r3, #16]
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005334:	b2da      	uxtb	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005340:	2b00      	cmp	r3, #0
 8005342:	d004      	beq.n	800534e <I2C_Master_ADD10+0x26>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534a:	2b00      	cmp	r3, #0
 800534c:	d108      	bne.n	8005360 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00c      	beq.n	8005370 <I2C_Master_ADD10+0x48>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800535c:	2b00      	cmp	r3, #0
 800535e:	d007      	beq.n	8005370 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800536e:	605a      	str	r2, [r3, #4]
  }
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800537c:	b480      	push	{r7}
 800537e:	b091      	sub	sp, #68	; 0x44
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800538a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005392:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005398:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b22      	cmp	r3, #34	; 0x22
 80053a4:	f040 8169 	bne.w	800567a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d10f      	bne.n	80053d0 <I2C_Master_ADDR+0x54>
 80053b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80053b4:	2b40      	cmp	r3, #64	; 0x40
 80053b6:	d10b      	bne.n	80053d0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053b8:	2300      	movs	r3, #0
 80053ba:	633b      	str	r3, [r7, #48]	; 0x30
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	633b      	str	r3, [r7, #48]	; 0x30
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	633b      	str	r3, [r7, #48]	; 0x30
 80053cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ce:	e160      	b.n	8005692 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d11d      	bne.n	8005414 <I2C_Master_ADDR+0x98>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80053e0:	d118      	bne.n	8005414 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053e2:	2300      	movs	r3, #0
 80053e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005406:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800540c:	1c5a      	adds	r2, r3, #1
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	651a      	str	r2, [r3, #80]	; 0x50
 8005412:	e13e      	b.n	8005692 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005418:	b29b      	uxth	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d113      	bne.n	8005446 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800541e:	2300      	movs	r3, #0
 8005420:	62bb      	str	r3, [r7, #40]	; 0x28
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	62bb      	str	r3, [r7, #40]	; 0x28
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	62bb      	str	r3, [r7, #40]	; 0x28
 8005432:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	e115      	b.n	8005672 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800544a:	b29b      	uxth	r3, r3
 800544c:	2b01      	cmp	r3, #1
 800544e:	f040 808a 	bne.w	8005566 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005454:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005458:	d137      	bne.n	80054ca <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005468:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005474:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005478:	d113      	bne.n	80054a2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005488:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800548a:	2300      	movs	r3, #0
 800548c:	627b      	str	r3, [r7, #36]	; 0x24
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	627b      	str	r3, [r7, #36]	; 0x24
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	627b      	str	r3, [r7, #36]	; 0x24
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	e0e7      	b.n	8005672 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054a2:	2300      	movs	r3, #0
 80054a4:	623b      	str	r3, [r7, #32]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	623b      	str	r3, [r7, #32]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	623b      	str	r3, [r7, #32]
 80054b6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	e0d3      	b.n	8005672 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80054ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	d02e      	beq.n	800552e <I2C_Master_ADDR+0x1b2>
 80054d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d2:	2b20      	cmp	r3, #32
 80054d4:	d02b      	beq.n	800552e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80054d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d8:	2b12      	cmp	r3, #18
 80054da:	d102      	bne.n	80054e2 <I2C_Master_ADDR+0x166>
 80054dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d125      	bne.n	800552e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80054e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e4:	2b04      	cmp	r3, #4
 80054e6:	d00e      	beq.n	8005506 <I2C_Master_ADDR+0x18a>
 80054e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d00b      	beq.n	8005506 <I2C_Master_ADDR+0x18a>
 80054ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f0:	2b10      	cmp	r3, #16
 80054f2:	d008      	beq.n	8005506 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	e007      	b.n	8005516 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005514:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005516:	2300      	movs	r3, #0
 8005518:	61fb      	str	r3, [r7, #28]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	61fb      	str	r3, [r7, #28]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	61fb      	str	r3, [r7, #28]
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	e0a1      	b.n	8005672 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800553c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800553e:	2300      	movs	r3, #0
 8005540:	61bb      	str	r3, [r7, #24]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	61bb      	str	r3, [r7, #24]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	61bb      	str	r3, [r7, #24]
 8005552:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	e085      	b.n	8005672 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800556a:	b29b      	uxth	r3, r3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d14d      	bne.n	800560c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005572:	2b04      	cmp	r3, #4
 8005574:	d016      	beq.n	80055a4 <I2C_Master_ADDR+0x228>
 8005576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005578:	2b02      	cmp	r3, #2
 800557a:	d013      	beq.n	80055a4 <I2C_Master_ADDR+0x228>
 800557c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557e:	2b10      	cmp	r3, #16
 8005580:	d010      	beq.n	80055a4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005590:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055a0:	601a      	str	r2, [r3, #0]
 80055a2:	e007      	b.n	80055b4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055b2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055c2:	d117      	bne.n	80055f4 <I2C_Master_ADDR+0x278>
 80055c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055ca:	d00b      	beq.n	80055e4 <I2C_Master_ADDR+0x268>
 80055cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d008      	beq.n	80055e4 <I2C_Master_ADDR+0x268>
 80055d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d4:	2b08      	cmp	r3, #8
 80055d6:	d005      	beq.n	80055e4 <I2C_Master_ADDR+0x268>
 80055d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055da:	2b10      	cmp	r3, #16
 80055dc:	d002      	beq.n	80055e4 <I2C_Master_ADDR+0x268>
 80055de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e0:	2b20      	cmp	r3, #32
 80055e2:	d107      	bne.n	80055f4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685a      	ldr	r2, [r3, #4]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055f2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055f4:	2300      	movs	r3, #0
 80055f6:	617b      	str	r3, [r7, #20]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	617b      	str	r3, [r7, #20]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	617b      	str	r3, [r7, #20]
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	e032      	b.n	8005672 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800561a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005626:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800562a:	d117      	bne.n	800565c <I2C_Master_ADDR+0x2e0>
 800562c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005632:	d00b      	beq.n	800564c <I2C_Master_ADDR+0x2d0>
 8005634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005636:	2b01      	cmp	r3, #1
 8005638:	d008      	beq.n	800564c <I2C_Master_ADDR+0x2d0>
 800563a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563c:	2b08      	cmp	r3, #8
 800563e:	d005      	beq.n	800564c <I2C_Master_ADDR+0x2d0>
 8005640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005642:	2b10      	cmp	r3, #16
 8005644:	d002      	beq.n	800564c <I2C_Master_ADDR+0x2d0>
 8005646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005648:	2b20      	cmp	r3, #32
 800564a:	d107      	bne.n	800565c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800565a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800565c:	2300      	movs	r3, #0
 800565e:	613b      	str	r3, [r7, #16]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	613b      	str	r3, [r7, #16]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	613b      	str	r3, [r7, #16]
 8005670:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005678:	e00b      	b.n	8005692 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800567a:	2300      	movs	r3, #0
 800567c:	60fb      	str	r3, [r7, #12]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	60fb      	str	r3, [r7, #12]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	60fb      	str	r3, [r7, #12]
 800568e:	68fb      	ldr	r3, [r7, #12]
}
 8005690:	e7ff      	b.n	8005692 <I2C_Master_ADDR+0x316>
 8005692:	bf00      	nop
 8005694:	3744      	adds	r7, #68	; 0x44
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b084      	sub	sp, #16
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ac:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d02b      	beq.n	8005710 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056bc:	781a      	ldrb	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c8:	1c5a      	adds	r2, r3, #1
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	3b01      	subs	r3, #1
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d114      	bne.n	8005710 <I2C_SlaveTransmit_TXE+0x72>
 80056e6:	7bfb      	ldrb	r3, [r7, #15]
 80056e8:	2b29      	cmp	r3, #41	; 0x29
 80056ea:	d111      	bne.n	8005710 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056fa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2221      	movs	r2, #33	; 0x21
 8005700:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2228      	movs	r2, #40	; 0x28
 8005706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7ff f9f4 	bl	8004af8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005710:	bf00      	nop
 8005712:	3710      	adds	r7, #16
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005724:	b29b      	uxth	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d011      	beq.n	800574e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572e:	781a      	ldrb	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	1c5a      	adds	r2, r3, #1
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005744:	b29b      	uxth	r3, r3
 8005746:	3b01      	subs	r3, #1
 8005748:	b29a      	uxth	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800574e:	bf00      	nop
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b084      	sub	sp, #16
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005768:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800576e:	b29b      	uxth	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d02c      	beq.n	80057ce <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	691a      	ldr	r2, [r3, #16]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	b2d2      	uxtb	r2, r2
 8005780:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005790:	b29b      	uxth	r3, r3
 8005792:	3b01      	subs	r3, #1
 8005794:	b29a      	uxth	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800579e:	b29b      	uxth	r3, r3
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d114      	bne.n	80057ce <I2C_SlaveReceive_RXNE+0x74>
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
 80057a6:	2b2a      	cmp	r3, #42	; 0x2a
 80057a8:	d111      	bne.n	80057ce <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057b8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2222      	movs	r2, #34	; 0x22
 80057be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2228      	movs	r2, #40	; 0x28
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f7ff f99f 	bl	8004b0c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80057ce:	bf00      	nop
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b083      	sub	sp, #12
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d012      	beq.n	800580e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	691a      	ldr	r2, [r3, #16]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f2:	b2d2      	uxtb	r2, r2
 80057f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	1c5a      	adds	r2, r3, #1
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005804:	b29b      	uxth	r3, r3
 8005806:	3b01      	subs	r3, #1
 8005808:	b29a      	uxth	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800580e:	bf00      	nop
 8005810:	370c      	adds	r7, #12
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b084      	sub	sp, #16
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
 8005822:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005824:	2300      	movs	r3, #0
 8005826:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800582e:	b2db      	uxtb	r3, r3
 8005830:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005834:	2b28      	cmp	r3, #40	; 0x28
 8005836:	d127      	bne.n	8005888 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005846:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	089b      	lsrs	r3, r3, #2
 800584c:	f003 0301 	and.w	r3, r3, #1
 8005850:	2b00      	cmp	r3, #0
 8005852:	d101      	bne.n	8005858 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005854:	2301      	movs	r3, #1
 8005856:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	09db      	lsrs	r3, r3, #7
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	2b00      	cmp	r3, #0
 8005862:	d103      	bne.n	800586c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	81bb      	strh	r3, [r7, #12]
 800586a:	e002      	b.n	8005872 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800587a:	89ba      	ldrh	r2, [r7, #12]
 800587c:	7bfb      	ldrb	r3, [r7, #15]
 800587e:	4619      	mov	r1, r3
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f7ff f94d 	bl	8004b20 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005886:	e008      	b.n	800589a <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f06f 0202 	mvn.w	r2, #2
 8005890:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800589a:	bf00      	nop
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
	...

080058a4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058b2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685a      	ldr	r2, [r3, #4]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058c2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80058c4:	2300      	movs	r3, #0
 80058c6:	60bb      	str	r3, [r7, #8]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	60bb      	str	r3, [r7, #8]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0201 	orr.w	r2, r2, #1
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058f0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005900:	d172      	bne.n	80059e8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005902:	7bfb      	ldrb	r3, [r7, #15]
 8005904:	2b22      	cmp	r3, #34	; 0x22
 8005906:	d002      	beq.n	800590e <I2C_Slave_STOPF+0x6a>
 8005908:	7bfb      	ldrb	r3, [r7, #15]
 800590a:	2b2a      	cmp	r3, #42	; 0x2a
 800590c:	d135      	bne.n	800597a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	b29a      	uxth	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005920:	b29b      	uxth	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d005      	beq.n	8005932 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592a:	f043 0204 	orr.w	r2, r3, #4
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	685a      	ldr	r2, [r3, #4]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005940:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005946:	4618      	mov	r0, r3
 8005948:	f7fe f974 	bl	8003c34 <HAL_DMA_GetState>
 800594c:	4603      	mov	r3, r0
 800594e:	2b01      	cmp	r3, #1
 8005950:	d049      	beq.n	80059e6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005956:	4a69      	ldr	r2, [pc, #420]	; (8005afc <I2C_Slave_STOPF+0x258>)
 8005958:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595e:	4618      	mov	r0, r3
 8005960:	f7fd ffbc 	bl	80038dc <HAL_DMA_Abort_IT>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d03d      	beq.n	80059e6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005974:	4610      	mov	r0, r2
 8005976:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005978:	e035      	b.n	80059e6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	b29a      	uxth	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800598c:	b29b      	uxth	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d005      	beq.n	800599e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005996:	f043 0204 	orr.w	r2, r3, #4
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	685a      	ldr	r2, [r3, #4]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059ac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7fe f93e 	bl	8003c34 <HAL_DMA_GetState>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d014      	beq.n	80059e8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c2:	4a4e      	ldr	r2, [pc, #312]	; (8005afc <I2C_Slave_STOPF+0x258>)
 80059c4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fd ff86 	bl	80038dc <HAL_DMA_Abort_IT>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d008      	beq.n	80059e8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80059e0:	4610      	mov	r0, r2
 80059e2:	4798      	blx	r3
 80059e4:	e000      	b.n	80059e8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059e6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d03e      	beq.n	8005a70 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	695b      	ldr	r3, [r3, #20]
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b04      	cmp	r3, #4
 80059fe:	d112      	bne.n	8005a26 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	691a      	ldr	r2, [r3, #16]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	b2d2      	uxtb	r2, r2
 8005a0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a12:	1c5a      	adds	r2, r3, #1
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a30:	2b40      	cmp	r3, #64	; 0x40
 8005a32:	d112      	bne.n	8005a5a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	691a      	ldr	r2, [r3, #16]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3e:	b2d2      	uxtb	r2, r2
 8005a40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a46:	1c5a      	adds	r2, r3, #1
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	3b01      	subs	r3, #1
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d005      	beq.n	8005a70 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a68:	f043 0204 	orr.w	r2, r3, #4
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d003      	beq.n	8005a80 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f8b3 	bl	8005be4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005a7e:	e039      	b.n	8005af4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005a80:	7bfb      	ldrb	r3, [r7, #15]
 8005a82:	2b2a      	cmp	r3, #42	; 0x2a
 8005a84:	d109      	bne.n	8005a9a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2228      	movs	r2, #40	; 0x28
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f7ff f839 	bl	8004b0c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b28      	cmp	r3, #40	; 0x28
 8005aa4:	d111      	bne.n	8005aca <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a15      	ldr	r2, [pc, #84]	; (8005b00 <I2C_Slave_STOPF+0x25c>)
 8005aaa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7ff f83a 	bl	8004b3c <HAL_I2C_ListenCpltCallback>
}
 8005ac8:	e014      	b.n	8005af4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ace:	2b22      	cmp	r3, #34	; 0x22
 8005ad0:	d002      	beq.n	8005ad8 <I2C_Slave_STOPF+0x234>
 8005ad2:	7bfb      	ldrb	r3, [r7, #15]
 8005ad4:	2b22      	cmp	r3, #34	; 0x22
 8005ad6:	d10d      	bne.n	8005af4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2220      	movs	r2, #32
 8005ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7ff f80c 	bl	8004b0c <HAL_I2C_SlaveRxCpltCallback>
}
 8005af4:	bf00      	nop
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	08005e49 	.word	0x08005e49
 8005b00:	ffff0000 	.word	0xffff0000

08005b04 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b12:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b18:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	2b08      	cmp	r3, #8
 8005b1e:	d002      	beq.n	8005b26 <I2C_Slave_AF+0x22>
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2b20      	cmp	r3, #32
 8005b24:	d129      	bne.n	8005b7a <I2C_Slave_AF+0x76>
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
 8005b28:	2b28      	cmp	r3, #40	; 0x28
 8005b2a:	d126      	bne.n	8005b7a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a2c      	ldr	r2, [pc, #176]	; (8005be0 <I2C_Slave_AF+0xdc>)
 8005b30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b40:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b4a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b5a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7fe ffe2 	bl	8004b3c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005b78:	e02e      	b.n	8005bd8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005b7a:	7bfb      	ldrb	r3, [r7, #15]
 8005b7c:	2b21      	cmp	r3, #33	; 0x21
 8005b7e:	d126      	bne.n	8005bce <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a17      	ldr	r2, [pc, #92]	; (8005be0 <I2C_Slave_AF+0xdc>)
 8005b84:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2221      	movs	r2, #33	; 0x21
 8005b8a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	685a      	ldr	r2, [r3, #4]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005baa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bb4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bc4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f7fe ff96 	bl	8004af8 <HAL_I2C_SlaveTxCpltCallback>
}
 8005bcc:	e004      	b.n	8005bd8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bd6:	615a      	str	r2, [r3, #20]
}
 8005bd8:	bf00      	nop
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	ffff0000 	.word	0xffff0000

08005be4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bfa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005bfc:	7bbb      	ldrb	r3, [r7, #14]
 8005bfe:	2b10      	cmp	r3, #16
 8005c00:	d002      	beq.n	8005c08 <I2C_ITError+0x24>
 8005c02:	7bbb      	ldrb	r3, [r7, #14]
 8005c04:	2b40      	cmp	r3, #64	; 0x40
 8005c06:	d10a      	bne.n	8005c1e <I2C_ITError+0x3a>
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
 8005c0a:	2b22      	cmp	r3, #34	; 0x22
 8005c0c:	d107      	bne.n	8005c1e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c1c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c1e:	7bfb      	ldrb	r3, [r7, #15]
 8005c20:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c24:	2b28      	cmp	r3, #40	; 0x28
 8005c26:	d107      	bne.n	8005c38 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2228      	movs	r2, #40	; 0x28
 8005c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005c36:	e015      	b.n	8005c64 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c46:	d00a      	beq.n	8005c5e <I2C_ITError+0x7a>
 8005c48:	7bfb      	ldrb	r3, [r7, #15]
 8005c4a:	2b60      	cmp	r3, #96	; 0x60
 8005c4c:	d007      	beq.n	8005c5e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2220      	movs	r2, #32
 8005c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c72:	d162      	bne.n	8005d3a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c82:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d020      	beq.n	8005cd4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c96:	4a6a      	ldr	r2, [pc, #424]	; (8005e40 <I2C_ITError+0x25c>)
 8005c98:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fd fe1c 	bl	80038dc <HAL_DMA_Abort_IT>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 8089 	beq.w	8005dbe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f022 0201 	bic.w	r2, r2, #1
 8005cba:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005cce:	4610      	mov	r0, r2
 8005cd0:	4798      	blx	r3
 8005cd2:	e074      	b.n	8005dbe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd8:	4a59      	ldr	r2, [pc, #356]	; (8005e40 <I2C_ITError+0x25c>)
 8005cda:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7fd fdfb 	bl	80038dc <HAL_DMA_Abort_IT>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d068      	beq.n	8005dbe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf6:	2b40      	cmp	r3, #64	; 0x40
 8005cf8:	d10b      	bne.n	8005d12 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	691a      	ldr	r2, [r3, #16]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d04:	b2d2      	uxtb	r2, r2
 8005d06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	1c5a      	adds	r2, r3, #1
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f022 0201 	bic.w	r2, r2, #1
 8005d20:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2220      	movs	r2, #32
 8005d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d34:	4610      	mov	r0, r2
 8005d36:	4798      	blx	r3
 8005d38:	e041      	b.n	8005dbe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b60      	cmp	r3, #96	; 0x60
 8005d44:	d125      	bne.n	8005d92 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2220      	movs	r2, #32
 8005d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5e:	2b40      	cmp	r3, #64	; 0x40
 8005d60:	d10b      	bne.n	8005d7a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	691a      	ldr	r2, [r3, #16]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6c:	b2d2      	uxtb	r2, r2
 8005d6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d74:	1c5a      	adds	r2, r3, #1
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 0201 	bic.w	r2, r2, #1
 8005d88:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f7fe fef4 	bl	8004b78 <HAL_I2C_AbortCpltCallback>
 8005d90:	e015      	b.n	8005dbe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9c:	2b40      	cmp	r3, #64	; 0x40
 8005d9e:	d10b      	bne.n	8005db8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	691a      	ldr	r2, [r3, #16]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005daa:	b2d2      	uxtb	r2, r2
 8005dac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db2:	1c5a      	adds	r2, r3, #1
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f7fa ff3d 	bl	8000c38 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10e      	bne.n	8005dec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d109      	bne.n	8005dec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d104      	bne.n	8005dec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d007      	beq.n	8005dfc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005dfa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e02:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e08:	f003 0304 	and.w	r3, r3, #4
 8005e0c:	2b04      	cmp	r3, #4
 8005e0e:	d113      	bne.n	8005e38 <I2C_ITError+0x254>
 8005e10:	7bfb      	ldrb	r3, [r7, #15]
 8005e12:	2b28      	cmp	r3, #40	; 0x28
 8005e14:	d110      	bne.n	8005e38 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a0a      	ldr	r2, [pc, #40]	; (8005e44 <I2C_ITError+0x260>)
 8005e1a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2220      	movs	r2, #32
 8005e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f7fe fe82 	bl	8004b3c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e38:	bf00      	nop
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	08005e49 	.word	0x08005e49
 8005e44:	ffff0000 	.word	0xffff0000

08005e48 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e50:	2300      	movs	r3, #0
 8005e52:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e58:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e60:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e62:	4b4b      	ldr	r3, [pc, #300]	; (8005f90 <I2C_DMAAbort+0x148>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	08db      	lsrs	r3, r3, #3
 8005e68:	4a4a      	ldr	r2, [pc, #296]	; (8005f94 <I2C_DMAAbort+0x14c>)
 8005e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6e:	0a1a      	lsrs	r2, r3, #8
 8005e70:	4613      	mov	r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4413      	add	r3, r2
 8005e76:	00da      	lsls	r2, r3, #3
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d106      	bne.n	8005e90 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e86:	f043 0220 	orr.w	r2, r3, #32
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005e8e:	e00a      	b.n	8005ea6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	3b01      	subs	r3, #1
 8005e94:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ea4:	d0ea      	beq.n	8005e7c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ed4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d003      	beq.n	8005eec <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee8:	2200      	movs	r2, #0
 8005eea:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d003      	beq.n	8005efc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef8:	2200      	movs	r2, #0
 8005efa:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 0201 	bic.w	r2, r2, #1
 8005f0a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b60      	cmp	r3, #96	; 0x60
 8005f16:	d10e      	bne.n	8005f36 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005f2e:	6978      	ldr	r0, [r7, #20]
 8005f30:	f7fe fe22 	bl	8004b78 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f34:	e027      	b.n	8005f86 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f36:	7cfb      	ldrb	r3, [r7, #19]
 8005f38:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f3c:	2b28      	cmp	r3, #40	; 0x28
 8005f3e:	d117      	bne.n	8005f70 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f042 0201 	orr.w	r2, r2, #1
 8005f4e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f5e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	2200      	movs	r2, #0
 8005f64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	2228      	movs	r2, #40	; 0x28
 8005f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005f6e:	e007      	b.n	8005f80 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	2220      	movs	r2, #32
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005f80:	6978      	ldr	r0, [r7, #20]
 8005f82:	f7fa fe59 	bl	8000c38 <HAL_I2C_ErrorCallback>
}
 8005f86:	bf00      	nop
 8005f88:	3718      	adds	r7, #24
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	20000064 	.word	0x20000064
 8005f94:	14f8b589 	.word	0x14f8b589

08005f98 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005fa4:	4b13      	ldr	r3, [pc, #76]	; (8005ff4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	08db      	lsrs	r3, r3, #3
 8005faa:	4a13      	ldr	r2, [pc, #76]	; (8005ff8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005fac:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb0:	0a1a      	lsrs	r2, r3, #8
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4413      	add	r3, r2
 8005fb8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d107      	bne.n	8005fd6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fca:	f043 0220 	orr.w	r2, r3, #32
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e008      	b.n	8005fe8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fe4:	d0e9      	beq.n	8005fba <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3714      	adds	r7, #20
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr
 8005ff4:	20000064 	.word	0x20000064
 8005ff8:	14f8b589 	.word	0x14f8b589

08005ffc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006008:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800600c:	d103      	bne.n	8006016 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2201      	movs	r2, #1
 8006012:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006014:	e007      	b.n	8006026 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800601e:	d102      	bne.n	8006026 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2208      	movs	r2, #8
 8006024:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006026:	bf00      	nop
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
	...

08006034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d101      	bne.n	8006048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e0cc      	b.n	80061e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006048:	4b68      	ldr	r3, [pc, #416]	; (80061ec <HAL_RCC_ClockConfig+0x1b8>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 030f 	and.w	r3, r3, #15
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	429a      	cmp	r2, r3
 8006054:	d90c      	bls.n	8006070 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006056:	4b65      	ldr	r3, [pc, #404]	; (80061ec <HAL_RCC_ClockConfig+0x1b8>)
 8006058:	683a      	ldr	r2, [r7, #0]
 800605a:	b2d2      	uxtb	r2, r2
 800605c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800605e:	4b63      	ldr	r3, [pc, #396]	; (80061ec <HAL_RCC_ClockConfig+0x1b8>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 030f 	and.w	r3, r3, #15
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	429a      	cmp	r2, r3
 800606a:	d001      	beq.n	8006070 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e0b8      	b.n	80061e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d020      	beq.n	80060be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0304 	and.w	r3, r3, #4
 8006084:	2b00      	cmp	r3, #0
 8006086:	d005      	beq.n	8006094 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006088:	4b59      	ldr	r3, [pc, #356]	; (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	4a58      	ldr	r2, [pc, #352]	; (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 800608e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006092:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0308 	and.w	r3, r3, #8
 800609c:	2b00      	cmp	r3, #0
 800609e:	d005      	beq.n	80060ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060a0:	4b53      	ldr	r3, [pc, #332]	; (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	4a52      	ldr	r2, [pc, #328]	; (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 80060a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80060aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060ac:	4b50      	ldr	r3, [pc, #320]	; (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	494d      	ldr	r1, [pc, #308]	; (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d044      	beq.n	8006154 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d107      	bne.n	80060e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060d2:	4b47      	ldr	r3, [pc, #284]	; (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d119      	bne.n	8006112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e07f      	b.n	80061e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d003      	beq.n	80060f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060ee:	2b03      	cmp	r3, #3
 80060f0:	d107      	bne.n	8006102 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060f2:	4b3f      	ldr	r3, [pc, #252]	; (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d109      	bne.n	8006112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e06f      	b.n	80061e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006102:	4b3b      	ldr	r3, [pc, #236]	; (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0302 	and.w	r3, r3, #2
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e067      	b.n	80061e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006112:	4b37      	ldr	r3, [pc, #220]	; (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f023 0203 	bic.w	r2, r3, #3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	4934      	ldr	r1, [pc, #208]	; (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006120:	4313      	orrs	r3, r2
 8006122:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006124:	f7fd f922 	bl	800336c <HAL_GetTick>
 8006128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800612a:	e00a      	b.n	8006142 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800612c:	f7fd f91e 	bl	800336c <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	f241 3288 	movw	r2, #5000	; 0x1388
 800613a:	4293      	cmp	r3, r2
 800613c:	d901      	bls.n	8006142 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e04f      	b.n	80061e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006142:	4b2b      	ldr	r3, [pc, #172]	; (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f003 020c 	and.w	r2, r3, #12
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	429a      	cmp	r2, r3
 8006152:	d1eb      	bne.n	800612c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006154:	4b25      	ldr	r3, [pc, #148]	; (80061ec <HAL_RCC_ClockConfig+0x1b8>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 030f 	and.w	r3, r3, #15
 800615c:	683a      	ldr	r2, [r7, #0]
 800615e:	429a      	cmp	r2, r3
 8006160:	d20c      	bcs.n	800617c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006162:	4b22      	ldr	r3, [pc, #136]	; (80061ec <HAL_RCC_ClockConfig+0x1b8>)
 8006164:	683a      	ldr	r2, [r7, #0]
 8006166:	b2d2      	uxtb	r2, r2
 8006168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800616a:	4b20      	ldr	r3, [pc, #128]	; (80061ec <HAL_RCC_ClockConfig+0x1b8>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 030f 	and.w	r3, r3, #15
 8006172:	683a      	ldr	r2, [r7, #0]
 8006174:	429a      	cmp	r2, r3
 8006176:	d001      	beq.n	800617c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e032      	b.n	80061e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0304 	and.w	r3, r3, #4
 8006184:	2b00      	cmp	r3, #0
 8006186:	d008      	beq.n	800619a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006188:	4b19      	ldr	r3, [pc, #100]	; (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	4916      	ldr	r1, [pc, #88]	; (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006196:	4313      	orrs	r3, r2
 8006198:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0308 	and.w	r3, r3, #8
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d009      	beq.n	80061ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061a6:	4b12      	ldr	r3, [pc, #72]	; (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	00db      	lsls	r3, r3, #3
 80061b4:	490e      	ldr	r1, [pc, #56]	; (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80061ba:	f000 f855 	bl	8006268 <HAL_RCC_GetSysClockFreq>
 80061be:	4602      	mov	r2, r0
 80061c0:	4b0b      	ldr	r3, [pc, #44]	; (80061f0 <HAL_RCC_ClockConfig+0x1bc>)
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	091b      	lsrs	r3, r3, #4
 80061c6:	f003 030f 	and.w	r3, r3, #15
 80061ca:	490a      	ldr	r1, [pc, #40]	; (80061f4 <HAL_RCC_ClockConfig+0x1c0>)
 80061cc:	5ccb      	ldrb	r3, [r1, r3]
 80061ce:	fa22 f303 	lsr.w	r3, r2, r3
 80061d2:	4a09      	ldr	r2, [pc, #36]	; (80061f8 <HAL_RCC_ClockConfig+0x1c4>)
 80061d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80061d6:	4b09      	ldr	r3, [pc, #36]	; (80061fc <HAL_RCC_ClockConfig+0x1c8>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4618      	mov	r0, r3
 80061dc:	f7fd f882 	bl	80032e4 <HAL_InitTick>

  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	40023c00 	.word	0x40023c00
 80061f0:	40023800 	.word	0x40023800
 80061f4:	080093a0 	.word	0x080093a0
 80061f8:	20000064 	.word	0x20000064
 80061fc:	20000068 	.word	0x20000068

08006200 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006200:	b480      	push	{r7}
 8006202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006204:	4b03      	ldr	r3, [pc, #12]	; (8006214 <HAL_RCC_GetHCLKFreq+0x14>)
 8006206:	681b      	ldr	r3, [r3, #0]
}
 8006208:	4618      	mov	r0, r3
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	20000064 	.word	0x20000064

08006218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800621c:	f7ff fff0 	bl	8006200 <HAL_RCC_GetHCLKFreq>
 8006220:	4602      	mov	r2, r0
 8006222:	4b05      	ldr	r3, [pc, #20]	; (8006238 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	0a9b      	lsrs	r3, r3, #10
 8006228:	f003 0307 	and.w	r3, r3, #7
 800622c:	4903      	ldr	r1, [pc, #12]	; (800623c <HAL_RCC_GetPCLK1Freq+0x24>)
 800622e:	5ccb      	ldrb	r3, [r1, r3]
 8006230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006234:	4618      	mov	r0, r3
 8006236:	bd80      	pop	{r7, pc}
 8006238:	40023800 	.word	0x40023800
 800623c:	080093b0 	.word	0x080093b0

08006240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006244:	f7ff ffdc 	bl	8006200 <HAL_RCC_GetHCLKFreq>
 8006248:	4602      	mov	r2, r0
 800624a:	4b05      	ldr	r3, [pc, #20]	; (8006260 <HAL_RCC_GetPCLK2Freq+0x20>)
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	0b5b      	lsrs	r3, r3, #13
 8006250:	f003 0307 	and.w	r3, r3, #7
 8006254:	4903      	ldr	r1, [pc, #12]	; (8006264 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006256:	5ccb      	ldrb	r3, [r1, r3]
 8006258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800625c:	4618      	mov	r0, r3
 800625e:	bd80      	pop	{r7, pc}
 8006260:	40023800 	.word	0x40023800
 8006264:	080093b0 	.word	0x080093b0

08006268 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800626c:	b0ae      	sub	sp, #184	; 0xb8
 800626e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006270:	2300      	movs	r3, #0
 8006272:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8006276:	2300      	movs	r3, #0
 8006278:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800627c:	2300      	movs	r3, #0
 800627e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8006282:	2300      	movs	r3, #0
 8006284:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8006288:	2300      	movs	r3, #0
 800628a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800628e:	4bcb      	ldr	r3, [pc, #812]	; (80065bc <HAL_RCC_GetSysClockFreq+0x354>)
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f003 030c 	and.w	r3, r3, #12
 8006296:	2b0c      	cmp	r3, #12
 8006298:	f200 8206 	bhi.w	80066a8 <HAL_RCC_GetSysClockFreq+0x440>
 800629c:	a201      	add	r2, pc, #4	; (adr r2, 80062a4 <HAL_RCC_GetSysClockFreq+0x3c>)
 800629e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a2:	bf00      	nop
 80062a4:	080062d9 	.word	0x080062d9
 80062a8:	080066a9 	.word	0x080066a9
 80062ac:	080066a9 	.word	0x080066a9
 80062b0:	080066a9 	.word	0x080066a9
 80062b4:	080062e1 	.word	0x080062e1
 80062b8:	080066a9 	.word	0x080066a9
 80062bc:	080066a9 	.word	0x080066a9
 80062c0:	080066a9 	.word	0x080066a9
 80062c4:	080062e9 	.word	0x080062e9
 80062c8:	080066a9 	.word	0x080066a9
 80062cc:	080066a9 	.word	0x080066a9
 80062d0:	080066a9 	.word	0x080066a9
 80062d4:	080064d9 	.word	0x080064d9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062d8:	4bb9      	ldr	r3, [pc, #740]	; (80065c0 <HAL_RCC_GetSysClockFreq+0x358>)
 80062da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80062de:	e1e7      	b.n	80066b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062e0:	4bb8      	ldr	r3, [pc, #736]	; (80065c4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80062e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80062e6:	e1e3      	b.n	80066b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062e8:	4bb4      	ldr	r3, [pc, #720]	; (80065bc <HAL_RCC_GetSysClockFreq+0x354>)
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80062f4:	4bb1      	ldr	r3, [pc, #708]	; (80065bc <HAL_RCC_GetSysClockFreq+0x354>)
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d071      	beq.n	80063e4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006300:	4bae      	ldr	r3, [pc, #696]	; (80065bc <HAL_RCC_GetSysClockFreq+0x354>)
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	099b      	lsrs	r3, r3, #6
 8006306:	2200      	movs	r2, #0
 8006308:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800630c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006310:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006318:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800631c:	2300      	movs	r3, #0
 800631e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006322:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006326:	4622      	mov	r2, r4
 8006328:	462b      	mov	r3, r5
 800632a:	f04f 0000 	mov.w	r0, #0
 800632e:	f04f 0100 	mov.w	r1, #0
 8006332:	0159      	lsls	r1, r3, #5
 8006334:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006338:	0150      	lsls	r0, r2, #5
 800633a:	4602      	mov	r2, r0
 800633c:	460b      	mov	r3, r1
 800633e:	4621      	mov	r1, r4
 8006340:	1a51      	subs	r1, r2, r1
 8006342:	6439      	str	r1, [r7, #64]	; 0x40
 8006344:	4629      	mov	r1, r5
 8006346:	eb63 0301 	sbc.w	r3, r3, r1
 800634a:	647b      	str	r3, [r7, #68]	; 0x44
 800634c:	f04f 0200 	mov.w	r2, #0
 8006350:	f04f 0300 	mov.w	r3, #0
 8006354:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006358:	4649      	mov	r1, r9
 800635a:	018b      	lsls	r3, r1, #6
 800635c:	4641      	mov	r1, r8
 800635e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006362:	4641      	mov	r1, r8
 8006364:	018a      	lsls	r2, r1, #6
 8006366:	4641      	mov	r1, r8
 8006368:	1a51      	subs	r1, r2, r1
 800636a:	63b9      	str	r1, [r7, #56]	; 0x38
 800636c:	4649      	mov	r1, r9
 800636e:	eb63 0301 	sbc.w	r3, r3, r1
 8006372:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006374:	f04f 0200 	mov.w	r2, #0
 8006378:	f04f 0300 	mov.w	r3, #0
 800637c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8006380:	4649      	mov	r1, r9
 8006382:	00cb      	lsls	r3, r1, #3
 8006384:	4641      	mov	r1, r8
 8006386:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800638a:	4641      	mov	r1, r8
 800638c:	00ca      	lsls	r2, r1, #3
 800638e:	4610      	mov	r0, r2
 8006390:	4619      	mov	r1, r3
 8006392:	4603      	mov	r3, r0
 8006394:	4622      	mov	r2, r4
 8006396:	189b      	adds	r3, r3, r2
 8006398:	633b      	str	r3, [r7, #48]	; 0x30
 800639a:	462b      	mov	r3, r5
 800639c:	460a      	mov	r2, r1
 800639e:	eb42 0303 	adc.w	r3, r2, r3
 80063a2:	637b      	str	r3, [r7, #52]	; 0x34
 80063a4:	f04f 0200 	mov.w	r2, #0
 80063a8:	f04f 0300 	mov.w	r3, #0
 80063ac:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80063b0:	4629      	mov	r1, r5
 80063b2:	024b      	lsls	r3, r1, #9
 80063b4:	4621      	mov	r1, r4
 80063b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80063ba:	4621      	mov	r1, r4
 80063bc:	024a      	lsls	r2, r1, #9
 80063be:	4610      	mov	r0, r2
 80063c0:	4619      	mov	r1, r3
 80063c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063c6:	2200      	movs	r2, #0
 80063c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80063cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80063d0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80063d4:	f7f9 ff6c 	bl	80002b0 <__aeabi_uldivmod>
 80063d8:	4602      	mov	r2, r0
 80063da:	460b      	mov	r3, r1
 80063dc:	4613      	mov	r3, r2
 80063de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063e2:	e067      	b.n	80064b4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063e4:	4b75      	ldr	r3, [pc, #468]	; (80065bc <HAL_RCC_GetSysClockFreq+0x354>)
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	099b      	lsrs	r3, r3, #6
 80063ea:	2200      	movs	r2, #0
 80063ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063f0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80063f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80063fe:	2300      	movs	r3, #0
 8006400:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006402:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8006406:	4622      	mov	r2, r4
 8006408:	462b      	mov	r3, r5
 800640a:	f04f 0000 	mov.w	r0, #0
 800640e:	f04f 0100 	mov.w	r1, #0
 8006412:	0159      	lsls	r1, r3, #5
 8006414:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006418:	0150      	lsls	r0, r2, #5
 800641a:	4602      	mov	r2, r0
 800641c:	460b      	mov	r3, r1
 800641e:	4621      	mov	r1, r4
 8006420:	1a51      	subs	r1, r2, r1
 8006422:	62b9      	str	r1, [r7, #40]	; 0x28
 8006424:	4629      	mov	r1, r5
 8006426:	eb63 0301 	sbc.w	r3, r3, r1
 800642a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800642c:	f04f 0200 	mov.w	r2, #0
 8006430:	f04f 0300 	mov.w	r3, #0
 8006434:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006438:	4649      	mov	r1, r9
 800643a:	018b      	lsls	r3, r1, #6
 800643c:	4641      	mov	r1, r8
 800643e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006442:	4641      	mov	r1, r8
 8006444:	018a      	lsls	r2, r1, #6
 8006446:	4641      	mov	r1, r8
 8006448:	ebb2 0a01 	subs.w	sl, r2, r1
 800644c:	4649      	mov	r1, r9
 800644e:	eb63 0b01 	sbc.w	fp, r3, r1
 8006452:	f04f 0200 	mov.w	r2, #0
 8006456:	f04f 0300 	mov.w	r3, #0
 800645a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800645e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006462:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006466:	4692      	mov	sl, r2
 8006468:	469b      	mov	fp, r3
 800646a:	4623      	mov	r3, r4
 800646c:	eb1a 0303 	adds.w	r3, sl, r3
 8006470:	623b      	str	r3, [r7, #32]
 8006472:	462b      	mov	r3, r5
 8006474:	eb4b 0303 	adc.w	r3, fp, r3
 8006478:	627b      	str	r3, [r7, #36]	; 0x24
 800647a:	f04f 0200 	mov.w	r2, #0
 800647e:	f04f 0300 	mov.w	r3, #0
 8006482:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006486:	4629      	mov	r1, r5
 8006488:	028b      	lsls	r3, r1, #10
 800648a:	4621      	mov	r1, r4
 800648c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006490:	4621      	mov	r1, r4
 8006492:	028a      	lsls	r2, r1, #10
 8006494:	4610      	mov	r0, r2
 8006496:	4619      	mov	r1, r3
 8006498:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800649c:	2200      	movs	r2, #0
 800649e:	673b      	str	r3, [r7, #112]	; 0x70
 80064a0:	677a      	str	r2, [r7, #116]	; 0x74
 80064a2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80064a6:	f7f9 ff03 	bl	80002b0 <__aeabi_uldivmod>
 80064aa:	4602      	mov	r2, r0
 80064ac:	460b      	mov	r3, r1
 80064ae:	4613      	mov	r3, r2
 80064b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80064b4:	4b41      	ldr	r3, [pc, #260]	; (80065bc <HAL_RCC_GetSysClockFreq+0x354>)
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	0c1b      	lsrs	r3, r3, #16
 80064ba:	f003 0303 	and.w	r3, r3, #3
 80064be:	3301      	adds	r3, #1
 80064c0:	005b      	lsls	r3, r3, #1
 80064c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80064c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80064ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80064ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80064d6:	e0eb      	b.n	80066b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064d8:	4b38      	ldr	r3, [pc, #224]	; (80065bc <HAL_RCC_GetSysClockFreq+0x354>)
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064e4:	4b35      	ldr	r3, [pc, #212]	; (80065bc <HAL_RCC_GetSysClockFreq+0x354>)
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d06b      	beq.n	80065c8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064f0:	4b32      	ldr	r3, [pc, #200]	; (80065bc <HAL_RCC_GetSysClockFreq+0x354>)
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	099b      	lsrs	r3, r3, #6
 80064f6:	2200      	movs	r2, #0
 80064f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80064fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80064fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006502:	663b      	str	r3, [r7, #96]	; 0x60
 8006504:	2300      	movs	r3, #0
 8006506:	667b      	str	r3, [r7, #100]	; 0x64
 8006508:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800650c:	4622      	mov	r2, r4
 800650e:	462b      	mov	r3, r5
 8006510:	f04f 0000 	mov.w	r0, #0
 8006514:	f04f 0100 	mov.w	r1, #0
 8006518:	0159      	lsls	r1, r3, #5
 800651a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800651e:	0150      	lsls	r0, r2, #5
 8006520:	4602      	mov	r2, r0
 8006522:	460b      	mov	r3, r1
 8006524:	4621      	mov	r1, r4
 8006526:	1a51      	subs	r1, r2, r1
 8006528:	61b9      	str	r1, [r7, #24]
 800652a:	4629      	mov	r1, r5
 800652c:	eb63 0301 	sbc.w	r3, r3, r1
 8006530:	61fb      	str	r3, [r7, #28]
 8006532:	f04f 0200 	mov.w	r2, #0
 8006536:	f04f 0300 	mov.w	r3, #0
 800653a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800653e:	4659      	mov	r1, fp
 8006540:	018b      	lsls	r3, r1, #6
 8006542:	4651      	mov	r1, sl
 8006544:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006548:	4651      	mov	r1, sl
 800654a:	018a      	lsls	r2, r1, #6
 800654c:	4651      	mov	r1, sl
 800654e:	ebb2 0801 	subs.w	r8, r2, r1
 8006552:	4659      	mov	r1, fp
 8006554:	eb63 0901 	sbc.w	r9, r3, r1
 8006558:	f04f 0200 	mov.w	r2, #0
 800655c:	f04f 0300 	mov.w	r3, #0
 8006560:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006564:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006568:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800656c:	4690      	mov	r8, r2
 800656e:	4699      	mov	r9, r3
 8006570:	4623      	mov	r3, r4
 8006572:	eb18 0303 	adds.w	r3, r8, r3
 8006576:	613b      	str	r3, [r7, #16]
 8006578:	462b      	mov	r3, r5
 800657a:	eb49 0303 	adc.w	r3, r9, r3
 800657e:	617b      	str	r3, [r7, #20]
 8006580:	f04f 0200 	mov.w	r2, #0
 8006584:	f04f 0300 	mov.w	r3, #0
 8006588:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800658c:	4629      	mov	r1, r5
 800658e:	024b      	lsls	r3, r1, #9
 8006590:	4621      	mov	r1, r4
 8006592:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006596:	4621      	mov	r1, r4
 8006598:	024a      	lsls	r2, r1, #9
 800659a:	4610      	mov	r0, r2
 800659c:	4619      	mov	r1, r3
 800659e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065a2:	2200      	movs	r2, #0
 80065a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80065a6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80065a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80065ac:	f7f9 fe80 	bl	80002b0 <__aeabi_uldivmod>
 80065b0:	4602      	mov	r2, r0
 80065b2:	460b      	mov	r3, r1
 80065b4:	4613      	mov	r3, r2
 80065b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065ba:	e065      	b.n	8006688 <HAL_RCC_GetSysClockFreq+0x420>
 80065bc:	40023800 	.word	0x40023800
 80065c0:	00f42400 	.word	0x00f42400
 80065c4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065c8:	4b3d      	ldr	r3, [pc, #244]	; (80066c0 <HAL_RCC_GetSysClockFreq+0x458>)
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	099b      	lsrs	r3, r3, #6
 80065ce:	2200      	movs	r2, #0
 80065d0:	4618      	mov	r0, r3
 80065d2:	4611      	mov	r1, r2
 80065d4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80065d8:	653b      	str	r3, [r7, #80]	; 0x50
 80065da:	2300      	movs	r3, #0
 80065dc:	657b      	str	r3, [r7, #84]	; 0x54
 80065de:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80065e2:	4642      	mov	r2, r8
 80065e4:	464b      	mov	r3, r9
 80065e6:	f04f 0000 	mov.w	r0, #0
 80065ea:	f04f 0100 	mov.w	r1, #0
 80065ee:	0159      	lsls	r1, r3, #5
 80065f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065f4:	0150      	lsls	r0, r2, #5
 80065f6:	4602      	mov	r2, r0
 80065f8:	460b      	mov	r3, r1
 80065fa:	4641      	mov	r1, r8
 80065fc:	1a51      	subs	r1, r2, r1
 80065fe:	60b9      	str	r1, [r7, #8]
 8006600:	4649      	mov	r1, r9
 8006602:	eb63 0301 	sbc.w	r3, r3, r1
 8006606:	60fb      	str	r3, [r7, #12]
 8006608:	f04f 0200 	mov.w	r2, #0
 800660c:	f04f 0300 	mov.w	r3, #0
 8006610:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006614:	4659      	mov	r1, fp
 8006616:	018b      	lsls	r3, r1, #6
 8006618:	4651      	mov	r1, sl
 800661a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800661e:	4651      	mov	r1, sl
 8006620:	018a      	lsls	r2, r1, #6
 8006622:	4651      	mov	r1, sl
 8006624:	1a54      	subs	r4, r2, r1
 8006626:	4659      	mov	r1, fp
 8006628:	eb63 0501 	sbc.w	r5, r3, r1
 800662c:	f04f 0200 	mov.w	r2, #0
 8006630:	f04f 0300 	mov.w	r3, #0
 8006634:	00eb      	lsls	r3, r5, #3
 8006636:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800663a:	00e2      	lsls	r2, r4, #3
 800663c:	4614      	mov	r4, r2
 800663e:	461d      	mov	r5, r3
 8006640:	4643      	mov	r3, r8
 8006642:	18e3      	adds	r3, r4, r3
 8006644:	603b      	str	r3, [r7, #0]
 8006646:	464b      	mov	r3, r9
 8006648:	eb45 0303 	adc.w	r3, r5, r3
 800664c:	607b      	str	r3, [r7, #4]
 800664e:	f04f 0200 	mov.w	r2, #0
 8006652:	f04f 0300 	mov.w	r3, #0
 8006656:	e9d7 4500 	ldrd	r4, r5, [r7]
 800665a:	4629      	mov	r1, r5
 800665c:	028b      	lsls	r3, r1, #10
 800665e:	4621      	mov	r1, r4
 8006660:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006664:	4621      	mov	r1, r4
 8006666:	028a      	lsls	r2, r1, #10
 8006668:	4610      	mov	r0, r2
 800666a:	4619      	mov	r1, r3
 800666c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006670:	2200      	movs	r2, #0
 8006672:	64bb      	str	r3, [r7, #72]	; 0x48
 8006674:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006676:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800667a:	f7f9 fe19 	bl	80002b0 <__aeabi_uldivmod>
 800667e:	4602      	mov	r2, r0
 8006680:	460b      	mov	r3, r1
 8006682:	4613      	mov	r3, r2
 8006684:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006688:	4b0d      	ldr	r3, [pc, #52]	; (80066c0 <HAL_RCC_GetSysClockFreq+0x458>)
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	0f1b      	lsrs	r3, r3, #28
 800668e:	f003 0307 	and.w	r3, r3, #7
 8006692:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8006696:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800669a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800669e:	fbb2 f3f3 	udiv	r3, r2, r3
 80066a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80066a6:	e003      	b.n	80066b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80066a8:	4b06      	ldr	r3, [pc, #24]	; (80066c4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80066aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80066ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	37b8      	adds	r7, #184	; 0xb8
 80066b8:	46bd      	mov	sp, r7
 80066ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066be:	bf00      	nop
 80066c0:	40023800 	.word	0x40023800
 80066c4:	00f42400 	.word	0x00f42400

080066c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d101      	bne.n	80066da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e28d      	b.n	8006bf6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f000 8083 	beq.w	80067ee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80066e8:	4b94      	ldr	r3, [pc, #592]	; (800693c <HAL_RCC_OscConfig+0x274>)
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f003 030c 	and.w	r3, r3, #12
 80066f0:	2b04      	cmp	r3, #4
 80066f2:	d019      	beq.n	8006728 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80066f4:	4b91      	ldr	r3, [pc, #580]	; (800693c <HAL_RCC_OscConfig+0x274>)
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80066fc:	2b08      	cmp	r3, #8
 80066fe:	d106      	bne.n	800670e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006700:	4b8e      	ldr	r3, [pc, #568]	; (800693c <HAL_RCC_OscConfig+0x274>)
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006708:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800670c:	d00c      	beq.n	8006728 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800670e:	4b8b      	ldr	r3, [pc, #556]	; (800693c <HAL_RCC_OscConfig+0x274>)
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006716:	2b0c      	cmp	r3, #12
 8006718:	d112      	bne.n	8006740 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800671a:	4b88      	ldr	r3, [pc, #544]	; (800693c <HAL_RCC_OscConfig+0x274>)
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006722:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006726:	d10b      	bne.n	8006740 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006728:	4b84      	ldr	r3, [pc, #528]	; (800693c <HAL_RCC_OscConfig+0x274>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d05b      	beq.n	80067ec <HAL_RCC_OscConfig+0x124>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d157      	bne.n	80067ec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e25a      	b.n	8006bf6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006748:	d106      	bne.n	8006758 <HAL_RCC_OscConfig+0x90>
 800674a:	4b7c      	ldr	r3, [pc, #496]	; (800693c <HAL_RCC_OscConfig+0x274>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a7b      	ldr	r2, [pc, #492]	; (800693c <HAL_RCC_OscConfig+0x274>)
 8006750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006754:	6013      	str	r3, [r2, #0]
 8006756:	e01d      	b.n	8006794 <HAL_RCC_OscConfig+0xcc>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006760:	d10c      	bne.n	800677c <HAL_RCC_OscConfig+0xb4>
 8006762:	4b76      	ldr	r3, [pc, #472]	; (800693c <HAL_RCC_OscConfig+0x274>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a75      	ldr	r2, [pc, #468]	; (800693c <HAL_RCC_OscConfig+0x274>)
 8006768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800676c:	6013      	str	r3, [r2, #0]
 800676e:	4b73      	ldr	r3, [pc, #460]	; (800693c <HAL_RCC_OscConfig+0x274>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a72      	ldr	r2, [pc, #456]	; (800693c <HAL_RCC_OscConfig+0x274>)
 8006774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006778:	6013      	str	r3, [r2, #0]
 800677a:	e00b      	b.n	8006794 <HAL_RCC_OscConfig+0xcc>
 800677c:	4b6f      	ldr	r3, [pc, #444]	; (800693c <HAL_RCC_OscConfig+0x274>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a6e      	ldr	r2, [pc, #440]	; (800693c <HAL_RCC_OscConfig+0x274>)
 8006782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006786:	6013      	str	r3, [r2, #0]
 8006788:	4b6c      	ldr	r3, [pc, #432]	; (800693c <HAL_RCC_OscConfig+0x274>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a6b      	ldr	r2, [pc, #428]	; (800693c <HAL_RCC_OscConfig+0x274>)
 800678e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006792:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d013      	beq.n	80067c4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800679c:	f7fc fde6 	bl	800336c <HAL_GetTick>
 80067a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067a2:	e008      	b.n	80067b6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067a4:	f7fc fde2 	bl	800336c <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	2b64      	cmp	r3, #100	; 0x64
 80067b0:	d901      	bls.n	80067b6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e21f      	b.n	8006bf6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067b6:	4b61      	ldr	r3, [pc, #388]	; (800693c <HAL_RCC_OscConfig+0x274>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d0f0      	beq.n	80067a4 <HAL_RCC_OscConfig+0xdc>
 80067c2:	e014      	b.n	80067ee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c4:	f7fc fdd2 	bl	800336c <HAL_GetTick>
 80067c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067ca:	e008      	b.n	80067de <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067cc:	f7fc fdce 	bl	800336c <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	2b64      	cmp	r3, #100	; 0x64
 80067d8:	d901      	bls.n	80067de <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e20b      	b.n	8006bf6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067de:	4b57      	ldr	r3, [pc, #348]	; (800693c <HAL_RCC_OscConfig+0x274>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1f0      	bne.n	80067cc <HAL_RCC_OscConfig+0x104>
 80067ea:	e000      	b.n	80067ee <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0302 	and.w	r3, r3, #2
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d06f      	beq.n	80068da <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80067fa:	4b50      	ldr	r3, [pc, #320]	; (800693c <HAL_RCC_OscConfig+0x274>)
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f003 030c 	and.w	r3, r3, #12
 8006802:	2b00      	cmp	r3, #0
 8006804:	d017      	beq.n	8006836 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006806:	4b4d      	ldr	r3, [pc, #308]	; (800693c <HAL_RCC_OscConfig+0x274>)
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800680e:	2b08      	cmp	r3, #8
 8006810:	d105      	bne.n	800681e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006812:	4b4a      	ldr	r3, [pc, #296]	; (800693c <HAL_RCC_OscConfig+0x274>)
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00b      	beq.n	8006836 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800681e:	4b47      	ldr	r3, [pc, #284]	; (800693c <HAL_RCC_OscConfig+0x274>)
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006826:	2b0c      	cmp	r3, #12
 8006828:	d11c      	bne.n	8006864 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800682a:	4b44      	ldr	r3, [pc, #272]	; (800693c <HAL_RCC_OscConfig+0x274>)
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d116      	bne.n	8006864 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006836:	4b41      	ldr	r3, [pc, #260]	; (800693c <HAL_RCC_OscConfig+0x274>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 0302 	and.w	r3, r3, #2
 800683e:	2b00      	cmp	r3, #0
 8006840:	d005      	beq.n	800684e <HAL_RCC_OscConfig+0x186>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d001      	beq.n	800684e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e1d3      	b.n	8006bf6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800684e:	4b3b      	ldr	r3, [pc, #236]	; (800693c <HAL_RCC_OscConfig+0x274>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	00db      	lsls	r3, r3, #3
 800685c:	4937      	ldr	r1, [pc, #220]	; (800693c <HAL_RCC_OscConfig+0x274>)
 800685e:	4313      	orrs	r3, r2
 8006860:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006862:	e03a      	b.n	80068da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d020      	beq.n	80068ae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800686c:	4b34      	ldr	r3, [pc, #208]	; (8006940 <HAL_RCC_OscConfig+0x278>)
 800686e:	2201      	movs	r2, #1
 8006870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006872:	f7fc fd7b 	bl	800336c <HAL_GetTick>
 8006876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006878:	e008      	b.n	800688c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800687a:	f7fc fd77 	bl	800336c <HAL_GetTick>
 800687e:	4602      	mov	r2, r0
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	2b02      	cmp	r3, #2
 8006886:	d901      	bls.n	800688c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006888:	2303      	movs	r3, #3
 800688a:	e1b4      	b.n	8006bf6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800688c:	4b2b      	ldr	r3, [pc, #172]	; (800693c <HAL_RCC_OscConfig+0x274>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0302 	and.w	r3, r3, #2
 8006894:	2b00      	cmp	r3, #0
 8006896:	d0f0      	beq.n	800687a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006898:	4b28      	ldr	r3, [pc, #160]	; (800693c <HAL_RCC_OscConfig+0x274>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	00db      	lsls	r3, r3, #3
 80068a6:	4925      	ldr	r1, [pc, #148]	; (800693c <HAL_RCC_OscConfig+0x274>)
 80068a8:	4313      	orrs	r3, r2
 80068aa:	600b      	str	r3, [r1, #0]
 80068ac:	e015      	b.n	80068da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068ae:	4b24      	ldr	r3, [pc, #144]	; (8006940 <HAL_RCC_OscConfig+0x278>)
 80068b0:	2200      	movs	r2, #0
 80068b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068b4:	f7fc fd5a 	bl	800336c <HAL_GetTick>
 80068b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068ba:	e008      	b.n	80068ce <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068bc:	f7fc fd56 	bl	800336c <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d901      	bls.n	80068ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e193      	b.n	8006bf6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068ce:	4b1b      	ldr	r3, [pc, #108]	; (800693c <HAL_RCC_OscConfig+0x274>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 0302 	and.w	r3, r3, #2
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1f0      	bne.n	80068bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0308 	and.w	r3, r3, #8
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d036      	beq.n	8006954 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d016      	beq.n	800691c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068ee:	4b15      	ldr	r3, [pc, #84]	; (8006944 <HAL_RCC_OscConfig+0x27c>)
 80068f0:	2201      	movs	r2, #1
 80068f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068f4:	f7fc fd3a 	bl	800336c <HAL_GetTick>
 80068f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068fa:	e008      	b.n	800690e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068fc:	f7fc fd36 	bl	800336c <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	2b02      	cmp	r3, #2
 8006908:	d901      	bls.n	800690e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e173      	b.n	8006bf6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800690e:	4b0b      	ldr	r3, [pc, #44]	; (800693c <HAL_RCC_OscConfig+0x274>)
 8006910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b00      	cmp	r3, #0
 8006918:	d0f0      	beq.n	80068fc <HAL_RCC_OscConfig+0x234>
 800691a:	e01b      	b.n	8006954 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800691c:	4b09      	ldr	r3, [pc, #36]	; (8006944 <HAL_RCC_OscConfig+0x27c>)
 800691e:	2200      	movs	r2, #0
 8006920:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006922:	f7fc fd23 	bl	800336c <HAL_GetTick>
 8006926:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006928:	e00e      	b.n	8006948 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800692a:	f7fc fd1f 	bl	800336c <HAL_GetTick>
 800692e:	4602      	mov	r2, r0
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	2b02      	cmp	r3, #2
 8006936:	d907      	bls.n	8006948 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e15c      	b.n	8006bf6 <HAL_RCC_OscConfig+0x52e>
 800693c:	40023800 	.word	0x40023800
 8006940:	42470000 	.word	0x42470000
 8006944:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006948:	4b8a      	ldr	r3, [pc, #552]	; (8006b74 <HAL_RCC_OscConfig+0x4ac>)
 800694a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800694c:	f003 0302 	and.w	r3, r3, #2
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1ea      	bne.n	800692a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0304 	and.w	r3, r3, #4
 800695c:	2b00      	cmp	r3, #0
 800695e:	f000 8097 	beq.w	8006a90 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006962:	2300      	movs	r3, #0
 8006964:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006966:	4b83      	ldr	r3, [pc, #524]	; (8006b74 <HAL_RCC_OscConfig+0x4ac>)
 8006968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10f      	bne.n	8006992 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006972:	2300      	movs	r3, #0
 8006974:	60bb      	str	r3, [r7, #8]
 8006976:	4b7f      	ldr	r3, [pc, #508]	; (8006b74 <HAL_RCC_OscConfig+0x4ac>)
 8006978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697a:	4a7e      	ldr	r2, [pc, #504]	; (8006b74 <HAL_RCC_OscConfig+0x4ac>)
 800697c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006980:	6413      	str	r3, [r2, #64]	; 0x40
 8006982:	4b7c      	ldr	r3, [pc, #496]	; (8006b74 <HAL_RCC_OscConfig+0x4ac>)
 8006984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800698a:	60bb      	str	r3, [r7, #8]
 800698c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800698e:	2301      	movs	r3, #1
 8006990:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006992:	4b79      	ldr	r3, [pc, #484]	; (8006b78 <HAL_RCC_OscConfig+0x4b0>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800699a:	2b00      	cmp	r3, #0
 800699c:	d118      	bne.n	80069d0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800699e:	4b76      	ldr	r3, [pc, #472]	; (8006b78 <HAL_RCC_OscConfig+0x4b0>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a75      	ldr	r2, [pc, #468]	; (8006b78 <HAL_RCC_OscConfig+0x4b0>)
 80069a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069aa:	f7fc fcdf 	bl	800336c <HAL_GetTick>
 80069ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069b0:	e008      	b.n	80069c4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069b2:	f7fc fcdb 	bl	800336c <HAL_GetTick>
 80069b6:	4602      	mov	r2, r0
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d901      	bls.n	80069c4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e118      	b.n	8006bf6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069c4:	4b6c      	ldr	r3, [pc, #432]	; (8006b78 <HAL_RCC_OscConfig+0x4b0>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d0f0      	beq.n	80069b2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d106      	bne.n	80069e6 <HAL_RCC_OscConfig+0x31e>
 80069d8:	4b66      	ldr	r3, [pc, #408]	; (8006b74 <HAL_RCC_OscConfig+0x4ac>)
 80069da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069dc:	4a65      	ldr	r2, [pc, #404]	; (8006b74 <HAL_RCC_OscConfig+0x4ac>)
 80069de:	f043 0301 	orr.w	r3, r3, #1
 80069e2:	6713      	str	r3, [r2, #112]	; 0x70
 80069e4:	e01c      	b.n	8006a20 <HAL_RCC_OscConfig+0x358>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	2b05      	cmp	r3, #5
 80069ec:	d10c      	bne.n	8006a08 <HAL_RCC_OscConfig+0x340>
 80069ee:	4b61      	ldr	r3, [pc, #388]	; (8006b74 <HAL_RCC_OscConfig+0x4ac>)
 80069f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f2:	4a60      	ldr	r2, [pc, #384]	; (8006b74 <HAL_RCC_OscConfig+0x4ac>)
 80069f4:	f043 0304 	orr.w	r3, r3, #4
 80069f8:	6713      	str	r3, [r2, #112]	; 0x70
 80069fa:	4b5e      	ldr	r3, [pc, #376]	; (8006b74 <HAL_RCC_OscConfig+0x4ac>)
 80069fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069fe:	4a5d      	ldr	r2, [pc, #372]	; (8006b74 <HAL_RCC_OscConfig+0x4ac>)
 8006a00:	f043 0301 	orr.w	r3, r3, #1
 8006a04:	6713      	str	r3, [r2, #112]	; 0x70
 8006a06:	e00b      	b.n	8006a20 <HAL_RCC_OscConfig+0x358>
 8006a08:	4b5a      	ldr	r3, [pc, #360]	; (8006b74 <HAL_RCC_OscConfig+0x4ac>)
 8006a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a0c:	4a59      	ldr	r2, [pc, #356]	; (8006b74 <HAL_RCC_OscConfig+0x4ac>)
 8006a0e:	f023 0301 	bic.w	r3, r3, #1
 8006a12:	6713      	str	r3, [r2, #112]	; 0x70
 8006a14:	4b57      	ldr	r3, [pc, #348]	; (8006b74 <HAL_RCC_OscConfig+0x4ac>)
 8006a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a18:	4a56      	ldr	r2, [pc, #344]	; (8006b74 <HAL_RCC_OscConfig+0x4ac>)
 8006a1a:	f023 0304 	bic.w	r3, r3, #4
 8006a1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d015      	beq.n	8006a54 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a28:	f7fc fca0 	bl	800336c <HAL_GetTick>
 8006a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a2e:	e00a      	b.n	8006a46 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a30:	f7fc fc9c 	bl	800336c <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d901      	bls.n	8006a46 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e0d7      	b.n	8006bf6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a46:	4b4b      	ldr	r3, [pc, #300]	; (8006b74 <HAL_RCC_OscConfig+0x4ac>)
 8006a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a4a:	f003 0302 	and.w	r3, r3, #2
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d0ee      	beq.n	8006a30 <HAL_RCC_OscConfig+0x368>
 8006a52:	e014      	b.n	8006a7e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a54:	f7fc fc8a 	bl	800336c <HAL_GetTick>
 8006a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a5a:	e00a      	b.n	8006a72 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a5c:	f7fc fc86 	bl	800336c <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d901      	bls.n	8006a72 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e0c1      	b.n	8006bf6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a72:	4b40      	ldr	r3, [pc, #256]	; (8006b74 <HAL_RCC_OscConfig+0x4ac>)
 8006a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a76:	f003 0302 	and.w	r3, r3, #2
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d1ee      	bne.n	8006a5c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a7e:	7dfb      	ldrb	r3, [r7, #23]
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d105      	bne.n	8006a90 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a84:	4b3b      	ldr	r3, [pc, #236]	; (8006b74 <HAL_RCC_OscConfig+0x4ac>)
 8006a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a88:	4a3a      	ldr	r2, [pc, #232]	; (8006b74 <HAL_RCC_OscConfig+0x4ac>)
 8006a8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 80ad 	beq.w	8006bf4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a9a:	4b36      	ldr	r3, [pc, #216]	; (8006b74 <HAL_RCC_OscConfig+0x4ac>)
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	f003 030c 	and.w	r3, r3, #12
 8006aa2:	2b08      	cmp	r3, #8
 8006aa4:	d060      	beq.n	8006b68 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d145      	bne.n	8006b3a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aae:	4b33      	ldr	r3, [pc, #204]	; (8006b7c <HAL_RCC_OscConfig+0x4b4>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab4:	f7fc fc5a 	bl	800336c <HAL_GetTick>
 8006ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aba:	e008      	b.n	8006ace <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006abc:	f7fc fc56 	bl	800336c <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d901      	bls.n	8006ace <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e093      	b.n	8006bf6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ace:	4b29      	ldr	r3, [pc, #164]	; (8006b74 <HAL_RCC_OscConfig+0x4ac>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1f0      	bne.n	8006abc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	69da      	ldr	r2, [r3, #28]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	431a      	orrs	r2, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae8:	019b      	lsls	r3, r3, #6
 8006aea:	431a      	orrs	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af0:	085b      	lsrs	r3, r3, #1
 8006af2:	3b01      	subs	r3, #1
 8006af4:	041b      	lsls	r3, r3, #16
 8006af6:	431a      	orrs	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afc:	061b      	lsls	r3, r3, #24
 8006afe:	431a      	orrs	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b04:	071b      	lsls	r3, r3, #28
 8006b06:	491b      	ldr	r1, [pc, #108]	; (8006b74 <HAL_RCC_OscConfig+0x4ac>)
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b0c:	4b1b      	ldr	r3, [pc, #108]	; (8006b7c <HAL_RCC_OscConfig+0x4b4>)
 8006b0e:	2201      	movs	r2, #1
 8006b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b12:	f7fc fc2b 	bl	800336c <HAL_GetTick>
 8006b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b18:	e008      	b.n	8006b2c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b1a:	f7fc fc27 	bl	800336c <HAL_GetTick>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d901      	bls.n	8006b2c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e064      	b.n	8006bf6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b2c:	4b11      	ldr	r3, [pc, #68]	; (8006b74 <HAL_RCC_OscConfig+0x4ac>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d0f0      	beq.n	8006b1a <HAL_RCC_OscConfig+0x452>
 8006b38:	e05c      	b.n	8006bf4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b3a:	4b10      	ldr	r3, [pc, #64]	; (8006b7c <HAL_RCC_OscConfig+0x4b4>)
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b40:	f7fc fc14 	bl	800336c <HAL_GetTick>
 8006b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b46:	e008      	b.n	8006b5a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b48:	f7fc fc10 	bl	800336c <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d901      	bls.n	8006b5a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e04d      	b.n	8006bf6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b5a:	4b06      	ldr	r3, [pc, #24]	; (8006b74 <HAL_RCC_OscConfig+0x4ac>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1f0      	bne.n	8006b48 <HAL_RCC_OscConfig+0x480>
 8006b66:	e045      	b.n	8006bf4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d107      	bne.n	8006b80 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e040      	b.n	8006bf6 <HAL_RCC_OscConfig+0x52e>
 8006b74:	40023800 	.word	0x40023800
 8006b78:	40007000 	.word	0x40007000
 8006b7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b80:	4b1f      	ldr	r3, [pc, #124]	; (8006c00 <HAL_RCC_OscConfig+0x538>)
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d030      	beq.n	8006bf0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d129      	bne.n	8006bf0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d122      	bne.n	8006bf0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006bb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d119      	bne.n	8006bf0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc6:	085b      	lsrs	r3, r3, #1
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d10f      	bne.n	8006bf0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d107      	bne.n	8006bf0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d001      	beq.n	8006bf4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e000      	b.n	8006bf6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3718      	adds	r7, #24
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	40023800 	.word	0x40023800

08006c04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d101      	bne.n	8006c16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e03f      	b.n	8006c96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d106      	bne.n	8006c30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f7fc f91e 	bl	8002e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2224      	movs	r2, #36	; 0x24
 8006c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68da      	ldr	r2, [r3, #12]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 ffcb 	bl	8007be4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	691a      	ldr	r2, [r3, #16]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	695a      	ldr	r2, [r3, #20]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68da      	ldr	r2, [r3, #12]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2220      	movs	r2, #32
 8006c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3708      	adds	r7, #8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b08a      	sub	sp, #40	; 0x28
 8006ca2:	af02      	add	r7, sp, #8
 8006ca4:	60f8      	str	r0, [r7, #12]
 8006ca6:	60b9      	str	r1, [r7, #8]
 8006ca8:	603b      	str	r3, [r7, #0]
 8006caa:	4613      	mov	r3, r2
 8006cac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b20      	cmp	r3, #32
 8006cbc:	d17c      	bne.n	8006db8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d002      	beq.n	8006cca <HAL_UART_Transmit+0x2c>
 8006cc4:	88fb      	ldrh	r3, [r7, #6]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d101      	bne.n	8006cce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e075      	b.n	8006dba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d101      	bne.n	8006cdc <HAL_UART_Transmit+0x3e>
 8006cd8:	2302      	movs	r3, #2
 8006cda:	e06e      	b.n	8006dba <HAL_UART_Transmit+0x11c>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2221      	movs	r2, #33	; 0x21
 8006cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cf2:	f7fc fb3b 	bl	800336c <HAL_GetTick>
 8006cf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	88fa      	ldrh	r2, [r7, #6]
 8006cfc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	88fa      	ldrh	r2, [r7, #6]
 8006d02:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d0c:	d108      	bne.n	8006d20 <HAL_UART_Transmit+0x82>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d104      	bne.n	8006d20 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006d16:	2300      	movs	r3, #0
 8006d18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	61bb      	str	r3, [r7, #24]
 8006d1e:	e003      	b.n	8006d28 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d24:	2300      	movs	r3, #0
 8006d26:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006d30:	e02a      	b.n	8006d88 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	2180      	movs	r1, #128	; 0x80
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f000 fc83 	bl	8007648 <UART_WaitOnFlagUntilTimeout>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d001      	beq.n	8006d4c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e036      	b.n	8006dba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10b      	bne.n	8006d6a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	881b      	ldrh	r3, [r3, #0]
 8006d56:	461a      	mov	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	3302      	adds	r3, #2
 8006d66:	61bb      	str	r3, [r7, #24]
 8006d68:	e007      	b.n	8006d7a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	781a      	ldrb	r2, [r3, #0]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	3301      	adds	r3, #1
 8006d78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	3b01      	subs	r3, #1
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1cf      	bne.n	8006d32 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	2140      	movs	r1, #64	; 0x40
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f000 fc53 	bl	8007648 <UART_WaitOnFlagUntilTimeout>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006da8:	2303      	movs	r3, #3
 8006daa:	e006      	b.n	8006dba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2220      	movs	r2, #32
 8006db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006db4:	2300      	movs	r3, #0
 8006db6:	e000      	b.n	8006dba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006db8:	2302      	movs	r3, #2
  }
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3720      	adds	r7, #32
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b084      	sub	sp, #16
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	60f8      	str	r0, [r7, #12]
 8006dca:	60b9      	str	r1, [r7, #8]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	2b20      	cmp	r3, #32
 8006dda:	d11d      	bne.n	8006e18 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d002      	beq.n	8006de8 <HAL_UART_Receive_DMA+0x26>
 8006de2:	88fb      	ldrh	r3, [r7, #6]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d101      	bne.n	8006dec <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e016      	b.n	8006e1a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d101      	bne.n	8006dfa <HAL_UART_Receive_DMA+0x38>
 8006df6:	2302      	movs	r3, #2
 8006df8:	e00f      	b.n	8006e1a <HAL_UART_Receive_DMA+0x58>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006e08:	88fb      	ldrh	r3, [r7, #6]
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	68b9      	ldr	r1, [r7, #8]
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f000 fc88 	bl	8007724 <UART_Start_Receive_DMA>
 8006e14:	4603      	mov	r3, r0
 8006e16:	e000      	b.n	8006e1a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006e18:	2302      	movs	r3, #2
  }
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b08c      	sub	sp, #48	; 0x30
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	60f8      	str	r0, [r7, #12]
 8006e2a:	60b9      	str	r1, [r7, #8]
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	2b20      	cmp	r3, #32
 8006e3a:	d152      	bne.n	8006ee2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d002      	beq.n	8006e48 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006e42:	88fb      	ldrh	r3, [r7, #6]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d101      	bne.n	8006e4c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e04b      	b.n	8006ee4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d101      	bne.n	8006e5a <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8006e56:	2302      	movs	r3, #2
 8006e58:	e044      	b.n	8006ee4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2201      	movs	r2, #1
 8006e66:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006e68:	88fb      	ldrh	r3, [r7, #6]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	68b9      	ldr	r1, [r7, #8]
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f000 fc58 	bl	8007724 <UART_Start_Receive_DMA>
 8006e74:	4603      	mov	r3, r0
 8006e76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006e7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d12c      	bne.n	8006edc <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d125      	bne.n	8006ed6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	613b      	str	r3, [r7, #16]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	613b      	str	r3, [r7, #16]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	613b      	str	r3, [r7, #16]
 8006e9e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	330c      	adds	r3, #12
 8006ea6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	e853 3f00 	ldrex	r3, [r3]
 8006eae:	617b      	str	r3, [r7, #20]
   return(result);
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	f043 0310 	orr.w	r3, r3, #16
 8006eb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	330c      	adds	r3, #12
 8006ebe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ec0:	627a      	str	r2, [r7, #36]	; 0x24
 8006ec2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec4:	6a39      	ldr	r1, [r7, #32]
 8006ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ec8:	e841 2300 	strex	r3, r2, [r1]
 8006ecc:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1e5      	bne.n	8006ea0 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8006ed4:	e002      	b.n	8006edc <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006edc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ee0:	e000      	b.n	8006ee4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8006ee2:	2302      	movs	r3, #2
  }
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3730      	adds	r7, #48	; 0x30
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b0ba      	sub	sp, #232	; 0xe8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006f12:	2300      	movs	r3, #0
 8006f14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f22:	f003 030f 	and.w	r3, r3, #15
 8006f26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006f2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d10f      	bne.n	8006f52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f36:	f003 0320 	and.w	r3, r3, #32
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d009      	beq.n	8006f52 <HAL_UART_IRQHandler+0x66>
 8006f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f42:	f003 0320 	and.w	r3, r3, #32
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d003      	beq.n	8006f52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fd8f 	bl	8007a6e <UART_Receive_IT>
      return;
 8006f50:	e256      	b.n	8007400 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006f52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f000 80de 	beq.w	8007118 <HAL_UART_IRQHandler+0x22c>
 8006f5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f60:	f003 0301 	and.w	r3, r3, #1
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d106      	bne.n	8006f76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f6c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	f000 80d1 	beq.w	8007118 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f7a:	f003 0301 	and.w	r3, r3, #1
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00b      	beq.n	8006f9a <HAL_UART_IRQHandler+0xae>
 8006f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d005      	beq.n	8006f9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f92:	f043 0201 	orr.w	r2, r3, #1
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f9e:	f003 0304 	and.w	r3, r3, #4
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00b      	beq.n	8006fbe <HAL_UART_IRQHandler+0xd2>
 8006fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d005      	beq.n	8006fbe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb6:	f043 0202 	orr.w	r2, r3, #2
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fc2:	f003 0302 	and.w	r3, r3, #2
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00b      	beq.n	8006fe2 <HAL_UART_IRQHandler+0xf6>
 8006fca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d005      	beq.n	8006fe2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fda:	f043 0204 	orr.w	r2, r3, #4
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fe6:	f003 0308 	and.w	r3, r3, #8
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d011      	beq.n	8007012 <HAL_UART_IRQHandler+0x126>
 8006fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ff2:	f003 0320 	and.w	r3, r3, #32
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d105      	bne.n	8007006 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ffa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	2b00      	cmp	r3, #0
 8007004:	d005      	beq.n	8007012 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700a:	f043 0208 	orr.w	r2, r3, #8
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007016:	2b00      	cmp	r3, #0
 8007018:	f000 81ed 	beq.w	80073f6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800701c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007020:	f003 0320 	and.w	r3, r3, #32
 8007024:	2b00      	cmp	r3, #0
 8007026:	d008      	beq.n	800703a <HAL_UART_IRQHandler+0x14e>
 8007028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800702c:	f003 0320 	and.w	r3, r3, #32
 8007030:	2b00      	cmp	r3, #0
 8007032:	d002      	beq.n	800703a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fd1a 	bl	8007a6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	695b      	ldr	r3, [r3, #20]
 8007040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007044:	2b40      	cmp	r3, #64	; 0x40
 8007046:	bf0c      	ite	eq
 8007048:	2301      	moveq	r3, #1
 800704a:	2300      	movne	r3, #0
 800704c:	b2db      	uxtb	r3, r3
 800704e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007056:	f003 0308 	and.w	r3, r3, #8
 800705a:	2b00      	cmp	r3, #0
 800705c:	d103      	bne.n	8007066 <HAL_UART_IRQHandler+0x17a>
 800705e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007062:	2b00      	cmp	r3, #0
 8007064:	d04f      	beq.n	8007106 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 fc22 	bl	80078b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007076:	2b40      	cmp	r3, #64	; 0x40
 8007078:	d141      	bne.n	80070fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	3314      	adds	r3, #20
 8007080:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007084:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007088:	e853 3f00 	ldrex	r3, [r3]
 800708c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007090:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007094:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007098:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	3314      	adds	r3, #20
 80070a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80070a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80070aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80070b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80070b6:	e841 2300 	strex	r3, r2, [r1]
 80070ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80070be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1d9      	bne.n	800707a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d013      	beq.n	80070f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d2:	4a7d      	ldr	r2, [pc, #500]	; (80072c8 <HAL_UART_IRQHandler+0x3dc>)
 80070d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070da:	4618      	mov	r0, r3
 80070dc:	f7fc fbfe 	bl	80038dc <HAL_DMA_Abort_IT>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d016      	beq.n	8007114 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80070f0:	4610      	mov	r0, r2
 80070f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070f4:	e00e      	b.n	8007114 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f9a4 	bl	8007444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070fc:	e00a      	b.n	8007114 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f9a0 	bl	8007444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007104:	e006      	b.n	8007114 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f99c 	bl	8007444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007112:	e170      	b.n	80073f6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007114:	bf00      	nop
    return;
 8007116:	e16e      	b.n	80073f6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800711c:	2b01      	cmp	r3, #1
 800711e:	f040 814a 	bne.w	80073b6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007126:	f003 0310 	and.w	r3, r3, #16
 800712a:	2b00      	cmp	r3, #0
 800712c:	f000 8143 	beq.w	80073b6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007134:	f003 0310 	and.w	r3, r3, #16
 8007138:	2b00      	cmp	r3, #0
 800713a:	f000 813c 	beq.w	80073b6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800713e:	2300      	movs	r3, #0
 8007140:	60bb      	str	r3, [r7, #8]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	60bb      	str	r3, [r7, #8]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	60bb      	str	r3, [r7, #8]
 8007152:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	695b      	ldr	r3, [r3, #20]
 800715a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800715e:	2b40      	cmp	r3, #64	; 0x40
 8007160:	f040 80b4 	bne.w	80072cc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007170:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007174:	2b00      	cmp	r3, #0
 8007176:	f000 8140 	beq.w	80073fa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800717e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007182:	429a      	cmp	r2, r3
 8007184:	f080 8139 	bcs.w	80073fa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800718e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007194:	69db      	ldr	r3, [r3, #28]
 8007196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800719a:	f000 8088 	beq.w	80072ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	330c      	adds	r3, #12
 80071a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80071ac:	e853 3f00 	ldrex	r3, [r3]
 80071b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80071b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	330c      	adds	r3, #12
 80071c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80071ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80071ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80071d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80071da:	e841 2300 	strex	r3, r2, [r1]
 80071de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80071e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1d9      	bne.n	800719e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	3314      	adds	r3, #20
 80071f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071f4:	e853 3f00 	ldrex	r3, [r3]
 80071f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80071fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071fc:	f023 0301 	bic.w	r3, r3, #1
 8007200:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	3314      	adds	r3, #20
 800720a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800720e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007212:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007214:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007216:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800721a:	e841 2300 	strex	r3, r2, [r1]
 800721e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007220:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1e1      	bne.n	80071ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	3314      	adds	r3, #20
 800722c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007230:	e853 3f00 	ldrex	r3, [r3]
 8007234:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007236:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007238:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800723c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	3314      	adds	r3, #20
 8007246:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800724a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800724c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007250:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007252:	e841 2300 	strex	r3, r2, [r1]
 8007256:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007258:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800725a:	2b00      	cmp	r3, #0
 800725c:	d1e3      	bne.n	8007226 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2220      	movs	r2, #32
 8007262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	330c      	adds	r3, #12
 8007272:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007276:	e853 3f00 	ldrex	r3, [r3]
 800727a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800727c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800727e:	f023 0310 	bic.w	r3, r3, #16
 8007282:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	330c      	adds	r3, #12
 800728c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007290:	65ba      	str	r2, [r7, #88]	; 0x58
 8007292:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007294:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007296:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007298:	e841 2300 	strex	r3, r2, [r1]
 800729c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800729e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d1e3      	bne.n	800726c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7fc faa7 	bl	80037fc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	4619      	mov	r1, r3
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f7fa f8e2 	bl	8001488 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80072c4:	e099      	b.n	80073fa <HAL_UART_IRQHandler+0x50e>
 80072c6:	bf00      	nop
 80072c8:	08007977 	.word	0x08007977
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	f000 808b 	beq.w	80073fe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80072e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f000 8086 	beq.w	80073fe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	330c      	adds	r3, #12
 80072f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fc:	e853 3f00 	ldrex	r3, [r3]
 8007300:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007304:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007308:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	330c      	adds	r3, #12
 8007312:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007316:	647a      	str	r2, [r7, #68]	; 0x44
 8007318:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800731c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800731e:	e841 2300 	strex	r3, r2, [r1]
 8007322:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1e3      	bne.n	80072f2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	3314      	adds	r3, #20
 8007330:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007334:	e853 3f00 	ldrex	r3, [r3]
 8007338:	623b      	str	r3, [r7, #32]
   return(result);
 800733a:	6a3b      	ldr	r3, [r7, #32]
 800733c:	f023 0301 	bic.w	r3, r3, #1
 8007340:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	3314      	adds	r3, #20
 800734a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800734e:	633a      	str	r2, [r7, #48]	; 0x30
 8007350:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007352:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007356:	e841 2300 	strex	r3, r2, [r1]
 800735a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800735c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1e3      	bne.n	800732a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2220      	movs	r2, #32
 8007366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	330c      	adds	r3, #12
 8007376:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	e853 3f00 	ldrex	r3, [r3]
 800737e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f023 0310 	bic.w	r3, r3, #16
 8007386:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	330c      	adds	r3, #12
 8007390:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007394:	61fa      	str	r2, [r7, #28]
 8007396:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007398:	69b9      	ldr	r1, [r7, #24]
 800739a:	69fa      	ldr	r2, [r7, #28]
 800739c:	e841 2300 	strex	r3, r2, [r1]
 80073a0:	617b      	str	r3, [r7, #20]
   return(result);
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1e3      	bne.n	8007370 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80073a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80073ac:	4619      	mov	r1, r3
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f7fa f86a 	bl	8001488 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80073b4:	e023      	b.n	80073fe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80073b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d009      	beq.n	80073d6 <HAL_UART_IRQHandler+0x4ea>
 80073c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d003      	beq.n	80073d6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fae5 	bl	800799e <UART_Transmit_IT>
    return;
 80073d4:	e014      	b.n	8007400 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80073d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00e      	beq.n	8007400 <HAL_UART_IRQHandler+0x514>
 80073e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d008      	beq.n	8007400 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fb25 	bl	8007a3e <UART_EndTransmit_IT>
    return;
 80073f4:	e004      	b.n	8007400 <HAL_UART_IRQHandler+0x514>
    return;
 80073f6:	bf00      	nop
 80073f8:	e002      	b.n	8007400 <HAL_UART_IRQHandler+0x514>
      return;
 80073fa:	bf00      	nop
 80073fc:	e000      	b.n	8007400 <HAL_UART_IRQHandler+0x514>
      return;
 80073fe:	bf00      	nop
  }
}
 8007400:	37e8      	adds	r7, #232	; 0xe8
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop

08007408 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b09c      	sub	sp, #112	; 0x70
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007464:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007470:	2b00      	cmp	r3, #0
 8007472:	d172      	bne.n	800755a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007476:	2200      	movs	r2, #0
 8007478:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800747a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	330c      	adds	r3, #12
 8007480:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007484:	e853 3f00 	ldrex	r3, [r3]
 8007488:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800748a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800748c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007490:	66bb      	str	r3, [r7, #104]	; 0x68
 8007492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	330c      	adds	r3, #12
 8007498:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800749a:	65ba      	str	r2, [r7, #88]	; 0x58
 800749c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80074a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074a2:	e841 2300 	strex	r3, r2, [r1]
 80074a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80074a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1e5      	bne.n	800747a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	3314      	adds	r3, #20
 80074b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b8:	e853 3f00 	ldrex	r3, [r3]
 80074bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c0:	f023 0301 	bic.w	r3, r3, #1
 80074c4:	667b      	str	r3, [r7, #100]	; 0x64
 80074c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	3314      	adds	r3, #20
 80074cc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80074ce:	647a      	str	r2, [r7, #68]	; 0x44
 80074d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074d6:	e841 2300 	strex	r3, r2, [r1]
 80074da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1e5      	bne.n	80074ae <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	3314      	adds	r3, #20
 80074e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ec:	e853 3f00 	ldrex	r3, [r3]
 80074f0:	623b      	str	r3, [r7, #32]
   return(result);
 80074f2:	6a3b      	ldr	r3, [r7, #32]
 80074f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074f8:	663b      	str	r3, [r7, #96]	; 0x60
 80074fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	3314      	adds	r3, #20
 8007500:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007502:	633a      	str	r2, [r7, #48]	; 0x30
 8007504:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007506:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800750a:	e841 2300 	strex	r3, r2, [r1]
 800750e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1e5      	bne.n	80074e2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007518:	2220      	movs	r2, #32
 800751a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800751e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007522:	2b01      	cmp	r3, #1
 8007524:	d119      	bne.n	800755a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	330c      	adds	r3, #12
 800752c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	e853 3f00 	ldrex	r3, [r3]
 8007534:	60fb      	str	r3, [r7, #12]
   return(result);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f023 0310 	bic.w	r3, r3, #16
 800753c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800753e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	330c      	adds	r3, #12
 8007544:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007546:	61fa      	str	r2, [r7, #28]
 8007548:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754a:	69b9      	ldr	r1, [r7, #24]
 800754c:	69fa      	ldr	r2, [r7, #28]
 800754e:	e841 2300 	strex	r3, r2, [r1]
 8007552:	617b      	str	r3, [r7, #20]
   return(result);
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1e5      	bne.n	8007526 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800755a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800755c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755e:	2b01      	cmp	r3, #1
 8007560:	d106      	bne.n	8007570 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007564:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007566:	4619      	mov	r1, r3
 8007568:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800756a:	f7f9 ff8d 	bl	8001488 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800756e:	e002      	b.n	8007576 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007570:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007572:	f7ff ff53 	bl	800741c <HAL_UART_RxCpltCallback>
}
 8007576:	bf00      	nop
 8007578:	3770      	adds	r7, #112	; 0x70
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b084      	sub	sp, #16
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007590:	2b01      	cmp	r3, #1
 8007592:	d108      	bne.n	80075a6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007598:	085b      	lsrs	r3, r3, #1
 800759a:	b29b      	uxth	r3, r3
 800759c:	4619      	mov	r1, r3
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f7f9 ff72 	bl	8001488 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80075a4:	e002      	b.n	80075ac <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f7ff ff42 	bl	8007430 <HAL_UART_RxHalfCpltCallback>
}
 80075ac:	bf00      	nop
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80075bc:	2300      	movs	r3, #0
 80075be:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	695b      	ldr	r3, [r3, #20]
 80075cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075d0:	2b80      	cmp	r3, #128	; 0x80
 80075d2:	bf0c      	ite	eq
 80075d4:	2301      	moveq	r3, #1
 80075d6:	2300      	movne	r3, #0
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	2b21      	cmp	r3, #33	; 0x21
 80075e6:	d108      	bne.n	80075fa <UART_DMAError+0x46>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d005      	beq.n	80075fa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	2200      	movs	r2, #0
 80075f2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80075f4:	68b8      	ldr	r0, [r7, #8]
 80075f6:	f000 f933 	bl	8007860 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	695b      	ldr	r3, [r3, #20]
 8007600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007604:	2b40      	cmp	r3, #64	; 0x40
 8007606:	bf0c      	ite	eq
 8007608:	2301      	moveq	r3, #1
 800760a:	2300      	movne	r3, #0
 800760c:	b2db      	uxtb	r3, r3
 800760e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007616:	b2db      	uxtb	r3, r3
 8007618:	2b22      	cmp	r3, #34	; 0x22
 800761a:	d108      	bne.n	800762e <UART_DMAError+0x7a>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d005      	beq.n	800762e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	2200      	movs	r2, #0
 8007626:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007628:	68b8      	ldr	r0, [r7, #8]
 800762a:	f000 f941 	bl	80078b0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007632:	f043 0210 	orr.w	r2, r3, #16
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800763a:	68b8      	ldr	r0, [r7, #8]
 800763c:	f7ff ff02 	bl	8007444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007640:	bf00      	nop
 8007642:	3710      	adds	r7, #16
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b090      	sub	sp, #64	; 0x40
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	603b      	str	r3, [r7, #0]
 8007654:	4613      	mov	r3, r2
 8007656:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007658:	e050      	b.n	80076fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800765a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800765c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007660:	d04c      	beq.n	80076fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007664:	2b00      	cmp	r3, #0
 8007666:	d007      	beq.n	8007678 <UART_WaitOnFlagUntilTimeout+0x30>
 8007668:	f7fb fe80 	bl	800336c <HAL_GetTick>
 800766c:	4602      	mov	r2, r0
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007674:	429a      	cmp	r2, r3
 8007676:	d241      	bcs.n	80076fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	330c      	adds	r3, #12
 800767e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007682:	e853 3f00 	ldrex	r3, [r3]
 8007686:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800768e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	330c      	adds	r3, #12
 8007696:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007698:	637a      	str	r2, [r7, #52]	; 0x34
 800769a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800769e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076a0:	e841 2300 	strex	r3, r2, [r1]
 80076a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80076a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1e5      	bne.n	8007678 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	3314      	adds	r3, #20
 80076b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	e853 3f00 	ldrex	r3, [r3]
 80076ba:	613b      	str	r3, [r7, #16]
   return(result);
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	f023 0301 	bic.w	r3, r3, #1
 80076c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	3314      	adds	r3, #20
 80076ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076cc:	623a      	str	r2, [r7, #32]
 80076ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d0:	69f9      	ldr	r1, [r7, #28]
 80076d2:	6a3a      	ldr	r2, [r7, #32]
 80076d4:	e841 2300 	strex	r3, r2, [r1]
 80076d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1e5      	bne.n	80076ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2220      	movs	r2, #32
 80076e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2220      	movs	r2, #32
 80076ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80076f8:	2303      	movs	r3, #3
 80076fa:	e00f      	b.n	800771c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	4013      	ands	r3, r2
 8007706:	68ba      	ldr	r2, [r7, #8]
 8007708:	429a      	cmp	r2, r3
 800770a:	bf0c      	ite	eq
 800770c:	2301      	moveq	r3, #1
 800770e:	2300      	movne	r3, #0
 8007710:	b2db      	uxtb	r3, r3
 8007712:	461a      	mov	r2, r3
 8007714:	79fb      	ldrb	r3, [r7, #7]
 8007716:	429a      	cmp	r2, r3
 8007718:	d09f      	beq.n	800765a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3740      	adds	r7, #64	; 0x40
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b098      	sub	sp, #96	; 0x60
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	4613      	mov	r3, r2
 8007730:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	88fa      	ldrh	r2, [r7, #6]
 800773c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2222      	movs	r2, #34	; 0x22
 8007748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007750:	4a40      	ldr	r2, [pc, #256]	; (8007854 <UART_Start_Receive_DMA+0x130>)
 8007752:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007758:	4a3f      	ldr	r2, [pc, #252]	; (8007858 <UART_Start_Receive_DMA+0x134>)
 800775a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007760:	4a3e      	ldr	r2, [pc, #248]	; (800785c <UART_Start_Receive_DMA+0x138>)
 8007762:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007768:	2200      	movs	r2, #0
 800776a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800776c:	f107 0308 	add.w	r3, r7, #8
 8007770:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	3304      	adds	r3, #4
 800777c:	4619      	mov	r1, r3
 800777e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	88fb      	ldrh	r3, [r7, #6]
 8007784:	f7fb ffe2 	bl	800374c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007788:	2300      	movs	r3, #0
 800778a:	613b      	str	r3, [r7, #16]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	613b      	str	r3, [r7, #16]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	613b      	str	r3, [r7, #16]
 800779c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d019      	beq.n	80077e2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	330c      	adds	r3, #12
 80077b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077b8:	e853 3f00 	ldrex	r3, [r3]
 80077bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	330c      	adds	r3, #12
 80077cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077ce:	64fa      	str	r2, [r7, #76]	; 0x4c
 80077d0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80077d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077d6:	e841 2300 	strex	r3, r2, [r1]
 80077da:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80077dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1e5      	bne.n	80077ae <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	3314      	adds	r3, #20
 80077e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ec:	e853 3f00 	ldrex	r3, [r3]
 80077f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f4:	f043 0301 	orr.w	r3, r3, #1
 80077f8:	657b      	str	r3, [r7, #84]	; 0x54
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	3314      	adds	r3, #20
 8007800:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007802:	63ba      	str	r2, [r7, #56]	; 0x38
 8007804:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007806:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007808:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800780a:	e841 2300 	strex	r3, r2, [r1]
 800780e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1e5      	bne.n	80077e2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	3314      	adds	r3, #20
 800781c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	e853 3f00 	ldrex	r3, [r3]
 8007824:	617b      	str	r3, [r7, #20]
   return(result);
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800782c:	653b      	str	r3, [r7, #80]	; 0x50
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	3314      	adds	r3, #20
 8007834:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007836:	627a      	str	r2, [r7, #36]	; 0x24
 8007838:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783a:	6a39      	ldr	r1, [r7, #32]
 800783c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800783e:	e841 2300 	strex	r3, r2, [r1]
 8007842:	61fb      	str	r3, [r7, #28]
   return(result);
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1e5      	bne.n	8007816 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3760      	adds	r7, #96	; 0x60
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	08007459 	.word	0x08007459
 8007858:	0800757f 	.word	0x0800757f
 800785c:	080075b5 	.word	0x080075b5

08007860 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007860:	b480      	push	{r7}
 8007862:	b089      	sub	sp, #36	; 0x24
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	330c      	adds	r3, #12
 800786e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	e853 3f00 	ldrex	r3, [r3]
 8007876:	60bb      	str	r3, [r7, #8]
   return(result);
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800787e:	61fb      	str	r3, [r7, #28]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	330c      	adds	r3, #12
 8007886:	69fa      	ldr	r2, [r7, #28]
 8007888:	61ba      	str	r2, [r7, #24]
 800788a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788c:	6979      	ldr	r1, [r7, #20]
 800788e:	69ba      	ldr	r2, [r7, #24]
 8007890:	e841 2300 	strex	r3, r2, [r1]
 8007894:	613b      	str	r3, [r7, #16]
   return(result);
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d1e5      	bne.n	8007868 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2220      	movs	r2, #32
 80078a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80078a4:	bf00      	nop
 80078a6:	3724      	adds	r7, #36	; 0x24
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b095      	sub	sp, #84	; 0x54
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	330c      	adds	r3, #12
 80078be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c2:	e853 3f00 	ldrex	r3, [r3]
 80078c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80078c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	330c      	adds	r3, #12
 80078d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80078d8:	643a      	str	r2, [r7, #64]	; 0x40
 80078da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80078de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078e0:	e841 2300 	strex	r3, r2, [r1]
 80078e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1e5      	bne.n	80078b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3314      	adds	r3, #20
 80078f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f4:	6a3b      	ldr	r3, [r7, #32]
 80078f6:	e853 3f00 	ldrex	r3, [r3]
 80078fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	f023 0301 	bic.w	r3, r3, #1
 8007902:	64bb      	str	r3, [r7, #72]	; 0x48
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	3314      	adds	r3, #20
 800790a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800790c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800790e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007910:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007914:	e841 2300 	strex	r3, r2, [r1]
 8007918:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800791a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1e5      	bne.n	80078ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007924:	2b01      	cmp	r3, #1
 8007926:	d119      	bne.n	800795c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	330c      	adds	r3, #12
 800792e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	e853 3f00 	ldrex	r3, [r3]
 8007936:	60bb      	str	r3, [r7, #8]
   return(result);
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	f023 0310 	bic.w	r3, r3, #16
 800793e:	647b      	str	r3, [r7, #68]	; 0x44
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	330c      	adds	r3, #12
 8007946:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007948:	61ba      	str	r2, [r7, #24]
 800794a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794c:	6979      	ldr	r1, [r7, #20]
 800794e:	69ba      	ldr	r2, [r7, #24]
 8007950:	e841 2300 	strex	r3, r2, [r1]
 8007954:	613b      	str	r3, [r7, #16]
   return(result);
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d1e5      	bne.n	8007928 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2220      	movs	r2, #32
 8007960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	631a      	str	r2, [r3, #48]	; 0x30
}
 800796a:	bf00      	nop
 800796c:	3754      	adds	r7, #84	; 0x54
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr

08007976 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b084      	sub	sp, #16
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007982:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2200      	movs	r2, #0
 8007988:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2200      	movs	r2, #0
 800798e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f7ff fd57 	bl	8007444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007996:	bf00      	nop
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800799e:	b480      	push	{r7}
 80079a0:	b085      	sub	sp, #20
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	2b21      	cmp	r3, #33	; 0x21
 80079b0:	d13e      	bne.n	8007a30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079ba:	d114      	bne.n	80079e6 <UART_Transmit_IT+0x48>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d110      	bne.n	80079e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6a1b      	ldr	r3, [r3, #32]
 80079c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	881b      	ldrh	r3, [r3, #0]
 80079ce:	461a      	mov	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a1b      	ldr	r3, [r3, #32]
 80079de:	1c9a      	adds	r2, r3, #2
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	621a      	str	r2, [r3, #32]
 80079e4:	e008      	b.n	80079f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a1b      	ldr	r3, [r3, #32]
 80079ea:	1c59      	adds	r1, r3, #1
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	6211      	str	r1, [r2, #32]
 80079f0:	781a      	ldrb	r2, [r3, #0]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	3b01      	subs	r3, #1
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	4619      	mov	r1, r3
 8007a06:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d10f      	bne.n	8007a2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68da      	ldr	r2, [r3, #12]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68da      	ldr	r2, [r3, #12]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	e000      	b.n	8007a32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007a30:	2302      	movs	r3, #2
  }
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3714      	adds	r7, #20
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr

08007a3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b082      	sub	sp, #8
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68da      	ldr	r2, [r3, #12]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2220      	movs	r2, #32
 8007a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f7ff fcd2 	bl	8007408 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b08c      	sub	sp, #48	; 0x30
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b22      	cmp	r3, #34	; 0x22
 8007a80:	f040 80ab 	bne.w	8007bda <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a8c:	d117      	bne.n	8007abe <UART_Receive_IT+0x50>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d113      	bne.n	8007abe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007a96:	2300      	movs	r3, #0
 8007a98:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab6:	1c9a      	adds	r2, r3, #2
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	629a      	str	r2, [r3, #40]	; 0x28
 8007abc:	e026      	b.n	8007b0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ad0:	d007      	beq.n	8007ae2 <UART_Receive_IT+0x74>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10a      	bne.n	8007af0 <UART_Receive_IT+0x82>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d106      	bne.n	8007af0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	b2da      	uxtb	r2, r3
 8007aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aec:	701a      	strb	r2, [r3, #0]
 8007aee:	e008      	b.n	8007b02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007afc:	b2da      	uxtb	r2, r3
 8007afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b06:	1c5a      	adds	r2, r3, #1
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	3b01      	subs	r3, #1
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	4619      	mov	r1, r3
 8007b1a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d15a      	bne.n	8007bd6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68da      	ldr	r2, [r3, #12]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f022 0220 	bic.w	r2, r2, #32
 8007b2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68da      	ldr	r2, [r3, #12]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	695a      	ldr	r2, [r3, #20]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f022 0201 	bic.w	r2, r2, #1
 8007b4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2220      	movs	r2, #32
 8007b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d135      	bne.n	8007bcc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	330c      	adds	r3, #12
 8007b6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	e853 3f00 	ldrex	r3, [r3]
 8007b74:	613b      	str	r3, [r7, #16]
   return(result);
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	f023 0310 	bic.w	r3, r3, #16
 8007b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	330c      	adds	r3, #12
 8007b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b86:	623a      	str	r2, [r7, #32]
 8007b88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8a:	69f9      	ldr	r1, [r7, #28]
 8007b8c:	6a3a      	ldr	r2, [r7, #32]
 8007b8e:	e841 2300 	strex	r3, r2, [r1]
 8007b92:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1e5      	bne.n	8007b66 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 0310 	and.w	r3, r3, #16
 8007ba4:	2b10      	cmp	r3, #16
 8007ba6:	d10a      	bne.n	8007bbe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ba8:	2300      	movs	r3, #0
 8007baa:	60fb      	str	r3, [r7, #12]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	60fb      	str	r3, [r7, #12]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	60fb      	str	r3, [r7, #12]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f7f9 fc5f 	bl	8001488 <HAL_UARTEx_RxEventCallback>
 8007bca:	e002      	b.n	8007bd2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f7ff fc25 	bl	800741c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	e002      	b.n	8007bdc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	e000      	b.n	8007bdc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007bda:	2302      	movs	r3, #2
  }
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3730      	adds	r7, #48	; 0x30
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007be8:	b0c0      	sub	sp, #256	; 0x100
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c00:	68d9      	ldr	r1, [r3, #12]
 8007c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	ea40 0301 	orr.w	r3, r0, r1
 8007c0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c12:	689a      	ldr	r2, [r3, #8]
 8007c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	431a      	orrs	r2, r3
 8007c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c20:	695b      	ldr	r3, [r3, #20]
 8007c22:	431a      	orrs	r2, r3
 8007c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c28:	69db      	ldr	r3, [r3, #28]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007c3c:	f021 010c 	bic.w	r1, r1, #12
 8007c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007c4a:	430b      	orrs	r3, r1
 8007c4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	695b      	ldr	r3, [r3, #20]
 8007c56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c5e:	6999      	ldr	r1, [r3, #24]
 8007c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	ea40 0301 	orr.w	r3, r0, r1
 8007c6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	4b8f      	ldr	r3, [pc, #572]	; (8007eb0 <UART_SetConfig+0x2cc>)
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d005      	beq.n	8007c84 <UART_SetConfig+0xa0>
 8007c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	4b8d      	ldr	r3, [pc, #564]	; (8007eb4 <UART_SetConfig+0x2d0>)
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d104      	bne.n	8007c8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c84:	f7fe fadc 	bl	8006240 <HAL_RCC_GetPCLK2Freq>
 8007c88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007c8c:	e003      	b.n	8007c96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c8e:	f7fe fac3 	bl	8006218 <HAL_RCC_GetPCLK1Freq>
 8007c92:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c9a:	69db      	ldr	r3, [r3, #28]
 8007c9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ca0:	f040 810c 	bne.w	8007ebc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ca4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007cae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007cb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007cb6:	4622      	mov	r2, r4
 8007cb8:	462b      	mov	r3, r5
 8007cba:	1891      	adds	r1, r2, r2
 8007cbc:	65b9      	str	r1, [r7, #88]	; 0x58
 8007cbe:	415b      	adcs	r3, r3
 8007cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007cc6:	4621      	mov	r1, r4
 8007cc8:	eb12 0801 	adds.w	r8, r2, r1
 8007ccc:	4629      	mov	r1, r5
 8007cce:	eb43 0901 	adc.w	r9, r3, r1
 8007cd2:	f04f 0200 	mov.w	r2, #0
 8007cd6:	f04f 0300 	mov.w	r3, #0
 8007cda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007cde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007ce2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007ce6:	4690      	mov	r8, r2
 8007ce8:	4699      	mov	r9, r3
 8007cea:	4623      	mov	r3, r4
 8007cec:	eb18 0303 	adds.w	r3, r8, r3
 8007cf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007cf4:	462b      	mov	r3, r5
 8007cf6:	eb49 0303 	adc.w	r3, r9, r3
 8007cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007d0a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007d0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007d12:	460b      	mov	r3, r1
 8007d14:	18db      	adds	r3, r3, r3
 8007d16:	653b      	str	r3, [r7, #80]	; 0x50
 8007d18:	4613      	mov	r3, r2
 8007d1a:	eb42 0303 	adc.w	r3, r2, r3
 8007d1e:	657b      	str	r3, [r7, #84]	; 0x54
 8007d20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007d24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007d28:	f7f8 fac2 	bl	80002b0 <__aeabi_uldivmod>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	460b      	mov	r3, r1
 8007d30:	4b61      	ldr	r3, [pc, #388]	; (8007eb8 <UART_SetConfig+0x2d4>)
 8007d32:	fba3 2302 	umull	r2, r3, r3, r2
 8007d36:	095b      	lsrs	r3, r3, #5
 8007d38:	011c      	lsls	r4, r3, #4
 8007d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d44:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007d48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007d4c:	4642      	mov	r2, r8
 8007d4e:	464b      	mov	r3, r9
 8007d50:	1891      	adds	r1, r2, r2
 8007d52:	64b9      	str	r1, [r7, #72]	; 0x48
 8007d54:	415b      	adcs	r3, r3
 8007d56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007d5c:	4641      	mov	r1, r8
 8007d5e:	eb12 0a01 	adds.w	sl, r2, r1
 8007d62:	4649      	mov	r1, r9
 8007d64:	eb43 0b01 	adc.w	fp, r3, r1
 8007d68:	f04f 0200 	mov.w	r2, #0
 8007d6c:	f04f 0300 	mov.w	r3, #0
 8007d70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007d74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007d78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d7c:	4692      	mov	sl, r2
 8007d7e:	469b      	mov	fp, r3
 8007d80:	4643      	mov	r3, r8
 8007d82:	eb1a 0303 	adds.w	r3, sl, r3
 8007d86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d8a:	464b      	mov	r3, r9
 8007d8c:	eb4b 0303 	adc.w	r3, fp, r3
 8007d90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007da0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007da4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007da8:	460b      	mov	r3, r1
 8007daa:	18db      	adds	r3, r3, r3
 8007dac:	643b      	str	r3, [r7, #64]	; 0x40
 8007dae:	4613      	mov	r3, r2
 8007db0:	eb42 0303 	adc.w	r3, r2, r3
 8007db4:	647b      	str	r3, [r7, #68]	; 0x44
 8007db6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007dba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007dbe:	f7f8 fa77 	bl	80002b0 <__aeabi_uldivmod>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	4611      	mov	r1, r2
 8007dc8:	4b3b      	ldr	r3, [pc, #236]	; (8007eb8 <UART_SetConfig+0x2d4>)
 8007dca:	fba3 2301 	umull	r2, r3, r3, r1
 8007dce:	095b      	lsrs	r3, r3, #5
 8007dd0:	2264      	movs	r2, #100	; 0x64
 8007dd2:	fb02 f303 	mul.w	r3, r2, r3
 8007dd6:	1acb      	subs	r3, r1, r3
 8007dd8:	00db      	lsls	r3, r3, #3
 8007dda:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007dde:	4b36      	ldr	r3, [pc, #216]	; (8007eb8 <UART_SetConfig+0x2d4>)
 8007de0:	fba3 2302 	umull	r2, r3, r3, r2
 8007de4:	095b      	lsrs	r3, r3, #5
 8007de6:	005b      	lsls	r3, r3, #1
 8007de8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007dec:	441c      	add	r4, r3
 8007dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007df2:	2200      	movs	r2, #0
 8007df4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007df8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007dfc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007e00:	4642      	mov	r2, r8
 8007e02:	464b      	mov	r3, r9
 8007e04:	1891      	adds	r1, r2, r2
 8007e06:	63b9      	str	r1, [r7, #56]	; 0x38
 8007e08:	415b      	adcs	r3, r3
 8007e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007e10:	4641      	mov	r1, r8
 8007e12:	1851      	adds	r1, r2, r1
 8007e14:	6339      	str	r1, [r7, #48]	; 0x30
 8007e16:	4649      	mov	r1, r9
 8007e18:	414b      	adcs	r3, r1
 8007e1a:	637b      	str	r3, [r7, #52]	; 0x34
 8007e1c:	f04f 0200 	mov.w	r2, #0
 8007e20:	f04f 0300 	mov.w	r3, #0
 8007e24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007e28:	4659      	mov	r1, fp
 8007e2a:	00cb      	lsls	r3, r1, #3
 8007e2c:	4651      	mov	r1, sl
 8007e2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e32:	4651      	mov	r1, sl
 8007e34:	00ca      	lsls	r2, r1, #3
 8007e36:	4610      	mov	r0, r2
 8007e38:	4619      	mov	r1, r3
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	4642      	mov	r2, r8
 8007e3e:	189b      	adds	r3, r3, r2
 8007e40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e44:	464b      	mov	r3, r9
 8007e46:	460a      	mov	r2, r1
 8007e48:	eb42 0303 	adc.w	r3, r2, r3
 8007e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007e5c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007e60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007e64:	460b      	mov	r3, r1
 8007e66:	18db      	adds	r3, r3, r3
 8007e68:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	eb42 0303 	adc.w	r3, r2, r3
 8007e70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007e7a:	f7f8 fa19 	bl	80002b0 <__aeabi_uldivmod>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	460b      	mov	r3, r1
 8007e82:	4b0d      	ldr	r3, [pc, #52]	; (8007eb8 <UART_SetConfig+0x2d4>)
 8007e84:	fba3 1302 	umull	r1, r3, r3, r2
 8007e88:	095b      	lsrs	r3, r3, #5
 8007e8a:	2164      	movs	r1, #100	; 0x64
 8007e8c:	fb01 f303 	mul.w	r3, r1, r3
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	00db      	lsls	r3, r3, #3
 8007e94:	3332      	adds	r3, #50	; 0x32
 8007e96:	4a08      	ldr	r2, [pc, #32]	; (8007eb8 <UART_SetConfig+0x2d4>)
 8007e98:	fba2 2303 	umull	r2, r3, r2, r3
 8007e9c:	095b      	lsrs	r3, r3, #5
 8007e9e:	f003 0207 	and.w	r2, r3, #7
 8007ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4422      	add	r2, r4
 8007eaa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007eac:	e105      	b.n	80080ba <UART_SetConfig+0x4d6>
 8007eae:	bf00      	nop
 8007eb0:	40011000 	.word	0x40011000
 8007eb4:	40011400 	.word	0x40011400
 8007eb8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ebc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007ec6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007eca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007ece:	4642      	mov	r2, r8
 8007ed0:	464b      	mov	r3, r9
 8007ed2:	1891      	adds	r1, r2, r2
 8007ed4:	6239      	str	r1, [r7, #32]
 8007ed6:	415b      	adcs	r3, r3
 8007ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8007eda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ede:	4641      	mov	r1, r8
 8007ee0:	1854      	adds	r4, r2, r1
 8007ee2:	4649      	mov	r1, r9
 8007ee4:	eb43 0501 	adc.w	r5, r3, r1
 8007ee8:	f04f 0200 	mov.w	r2, #0
 8007eec:	f04f 0300 	mov.w	r3, #0
 8007ef0:	00eb      	lsls	r3, r5, #3
 8007ef2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ef6:	00e2      	lsls	r2, r4, #3
 8007ef8:	4614      	mov	r4, r2
 8007efa:	461d      	mov	r5, r3
 8007efc:	4643      	mov	r3, r8
 8007efe:	18e3      	adds	r3, r4, r3
 8007f00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007f04:	464b      	mov	r3, r9
 8007f06:	eb45 0303 	adc.w	r3, r5, r3
 8007f0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007f1e:	f04f 0200 	mov.w	r2, #0
 8007f22:	f04f 0300 	mov.w	r3, #0
 8007f26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007f2a:	4629      	mov	r1, r5
 8007f2c:	008b      	lsls	r3, r1, #2
 8007f2e:	4621      	mov	r1, r4
 8007f30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f34:	4621      	mov	r1, r4
 8007f36:	008a      	lsls	r2, r1, #2
 8007f38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007f3c:	f7f8 f9b8 	bl	80002b0 <__aeabi_uldivmod>
 8007f40:	4602      	mov	r2, r0
 8007f42:	460b      	mov	r3, r1
 8007f44:	4b60      	ldr	r3, [pc, #384]	; (80080c8 <UART_SetConfig+0x4e4>)
 8007f46:	fba3 2302 	umull	r2, r3, r3, r2
 8007f4a:	095b      	lsrs	r3, r3, #5
 8007f4c:	011c      	lsls	r4, r3, #4
 8007f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f52:	2200      	movs	r2, #0
 8007f54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007f58:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007f5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007f60:	4642      	mov	r2, r8
 8007f62:	464b      	mov	r3, r9
 8007f64:	1891      	adds	r1, r2, r2
 8007f66:	61b9      	str	r1, [r7, #24]
 8007f68:	415b      	adcs	r3, r3
 8007f6a:	61fb      	str	r3, [r7, #28]
 8007f6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f70:	4641      	mov	r1, r8
 8007f72:	1851      	adds	r1, r2, r1
 8007f74:	6139      	str	r1, [r7, #16]
 8007f76:	4649      	mov	r1, r9
 8007f78:	414b      	adcs	r3, r1
 8007f7a:	617b      	str	r3, [r7, #20]
 8007f7c:	f04f 0200 	mov.w	r2, #0
 8007f80:	f04f 0300 	mov.w	r3, #0
 8007f84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f88:	4659      	mov	r1, fp
 8007f8a:	00cb      	lsls	r3, r1, #3
 8007f8c:	4651      	mov	r1, sl
 8007f8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f92:	4651      	mov	r1, sl
 8007f94:	00ca      	lsls	r2, r1, #3
 8007f96:	4610      	mov	r0, r2
 8007f98:	4619      	mov	r1, r3
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	4642      	mov	r2, r8
 8007f9e:	189b      	adds	r3, r3, r2
 8007fa0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007fa4:	464b      	mov	r3, r9
 8007fa6:	460a      	mov	r2, r1
 8007fa8:	eb42 0303 	adc.w	r3, r2, r3
 8007fac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	67bb      	str	r3, [r7, #120]	; 0x78
 8007fba:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007fbc:	f04f 0200 	mov.w	r2, #0
 8007fc0:	f04f 0300 	mov.w	r3, #0
 8007fc4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007fc8:	4649      	mov	r1, r9
 8007fca:	008b      	lsls	r3, r1, #2
 8007fcc:	4641      	mov	r1, r8
 8007fce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007fd2:	4641      	mov	r1, r8
 8007fd4:	008a      	lsls	r2, r1, #2
 8007fd6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007fda:	f7f8 f969 	bl	80002b0 <__aeabi_uldivmod>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	4b39      	ldr	r3, [pc, #228]	; (80080c8 <UART_SetConfig+0x4e4>)
 8007fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8007fe8:	095b      	lsrs	r3, r3, #5
 8007fea:	2164      	movs	r1, #100	; 0x64
 8007fec:	fb01 f303 	mul.w	r3, r1, r3
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	011b      	lsls	r3, r3, #4
 8007ff4:	3332      	adds	r3, #50	; 0x32
 8007ff6:	4a34      	ldr	r2, [pc, #208]	; (80080c8 <UART_SetConfig+0x4e4>)
 8007ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8007ffc:	095b      	lsrs	r3, r3, #5
 8007ffe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008002:	441c      	add	r4, r3
 8008004:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008008:	2200      	movs	r2, #0
 800800a:	673b      	str	r3, [r7, #112]	; 0x70
 800800c:	677a      	str	r2, [r7, #116]	; 0x74
 800800e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008012:	4642      	mov	r2, r8
 8008014:	464b      	mov	r3, r9
 8008016:	1891      	adds	r1, r2, r2
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	415b      	adcs	r3, r3
 800801c:	60fb      	str	r3, [r7, #12]
 800801e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008022:	4641      	mov	r1, r8
 8008024:	1851      	adds	r1, r2, r1
 8008026:	6039      	str	r1, [r7, #0]
 8008028:	4649      	mov	r1, r9
 800802a:	414b      	adcs	r3, r1
 800802c:	607b      	str	r3, [r7, #4]
 800802e:	f04f 0200 	mov.w	r2, #0
 8008032:	f04f 0300 	mov.w	r3, #0
 8008036:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800803a:	4659      	mov	r1, fp
 800803c:	00cb      	lsls	r3, r1, #3
 800803e:	4651      	mov	r1, sl
 8008040:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008044:	4651      	mov	r1, sl
 8008046:	00ca      	lsls	r2, r1, #3
 8008048:	4610      	mov	r0, r2
 800804a:	4619      	mov	r1, r3
 800804c:	4603      	mov	r3, r0
 800804e:	4642      	mov	r2, r8
 8008050:	189b      	adds	r3, r3, r2
 8008052:	66bb      	str	r3, [r7, #104]	; 0x68
 8008054:	464b      	mov	r3, r9
 8008056:	460a      	mov	r2, r1
 8008058:	eb42 0303 	adc.w	r3, r2, r3
 800805c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800805e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	663b      	str	r3, [r7, #96]	; 0x60
 8008068:	667a      	str	r2, [r7, #100]	; 0x64
 800806a:	f04f 0200 	mov.w	r2, #0
 800806e:	f04f 0300 	mov.w	r3, #0
 8008072:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008076:	4649      	mov	r1, r9
 8008078:	008b      	lsls	r3, r1, #2
 800807a:	4641      	mov	r1, r8
 800807c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008080:	4641      	mov	r1, r8
 8008082:	008a      	lsls	r2, r1, #2
 8008084:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008088:	f7f8 f912 	bl	80002b0 <__aeabi_uldivmod>
 800808c:	4602      	mov	r2, r0
 800808e:	460b      	mov	r3, r1
 8008090:	4b0d      	ldr	r3, [pc, #52]	; (80080c8 <UART_SetConfig+0x4e4>)
 8008092:	fba3 1302 	umull	r1, r3, r3, r2
 8008096:	095b      	lsrs	r3, r3, #5
 8008098:	2164      	movs	r1, #100	; 0x64
 800809a:	fb01 f303 	mul.w	r3, r1, r3
 800809e:	1ad3      	subs	r3, r2, r3
 80080a0:	011b      	lsls	r3, r3, #4
 80080a2:	3332      	adds	r3, #50	; 0x32
 80080a4:	4a08      	ldr	r2, [pc, #32]	; (80080c8 <UART_SetConfig+0x4e4>)
 80080a6:	fba2 2303 	umull	r2, r3, r2, r3
 80080aa:	095b      	lsrs	r3, r3, #5
 80080ac:	f003 020f 	and.w	r2, r3, #15
 80080b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4422      	add	r2, r4
 80080b8:	609a      	str	r2, [r3, #8]
}
 80080ba:	bf00      	nop
 80080bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80080c0:	46bd      	mov	sp, r7
 80080c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080c6:	bf00      	nop
 80080c8:	51eb851f 	.word	0x51eb851f

080080cc <__errno>:
 80080cc:	4b01      	ldr	r3, [pc, #4]	; (80080d4 <__errno+0x8>)
 80080ce:	6818      	ldr	r0, [r3, #0]
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	20000070 	.word	0x20000070

080080d8 <__libc_init_array>:
 80080d8:	b570      	push	{r4, r5, r6, lr}
 80080da:	4d0d      	ldr	r5, [pc, #52]	; (8008110 <__libc_init_array+0x38>)
 80080dc:	4c0d      	ldr	r4, [pc, #52]	; (8008114 <__libc_init_array+0x3c>)
 80080de:	1b64      	subs	r4, r4, r5
 80080e0:	10a4      	asrs	r4, r4, #2
 80080e2:	2600      	movs	r6, #0
 80080e4:	42a6      	cmp	r6, r4
 80080e6:	d109      	bne.n	80080fc <__libc_init_array+0x24>
 80080e8:	4d0b      	ldr	r5, [pc, #44]	; (8008118 <__libc_init_array+0x40>)
 80080ea:	4c0c      	ldr	r4, [pc, #48]	; (800811c <__libc_init_array+0x44>)
 80080ec:	f001 f842 	bl	8009174 <_init>
 80080f0:	1b64      	subs	r4, r4, r5
 80080f2:	10a4      	asrs	r4, r4, #2
 80080f4:	2600      	movs	r6, #0
 80080f6:	42a6      	cmp	r6, r4
 80080f8:	d105      	bne.n	8008106 <__libc_init_array+0x2e>
 80080fa:	bd70      	pop	{r4, r5, r6, pc}
 80080fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008100:	4798      	blx	r3
 8008102:	3601      	adds	r6, #1
 8008104:	e7ee      	b.n	80080e4 <__libc_init_array+0xc>
 8008106:	f855 3b04 	ldr.w	r3, [r5], #4
 800810a:	4798      	blx	r3
 800810c:	3601      	adds	r6, #1
 800810e:	e7f2      	b.n	80080f6 <__libc_init_array+0x1e>
 8008110:	08009460 	.word	0x08009460
 8008114:	08009460 	.word	0x08009460
 8008118:	08009460 	.word	0x08009460
 800811c:	08009464 	.word	0x08009464

08008120 <memcmp>:
 8008120:	b510      	push	{r4, lr}
 8008122:	3901      	subs	r1, #1
 8008124:	4402      	add	r2, r0
 8008126:	4290      	cmp	r0, r2
 8008128:	d101      	bne.n	800812e <memcmp+0xe>
 800812a:	2000      	movs	r0, #0
 800812c:	e005      	b.n	800813a <memcmp+0x1a>
 800812e:	7803      	ldrb	r3, [r0, #0]
 8008130:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008134:	42a3      	cmp	r3, r4
 8008136:	d001      	beq.n	800813c <memcmp+0x1c>
 8008138:	1b18      	subs	r0, r3, r4
 800813a:	bd10      	pop	{r4, pc}
 800813c:	3001      	adds	r0, #1
 800813e:	e7f2      	b.n	8008126 <memcmp+0x6>

08008140 <memcpy>:
 8008140:	440a      	add	r2, r1
 8008142:	4291      	cmp	r1, r2
 8008144:	f100 33ff 	add.w	r3, r0, #4294967295
 8008148:	d100      	bne.n	800814c <memcpy+0xc>
 800814a:	4770      	bx	lr
 800814c:	b510      	push	{r4, lr}
 800814e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008152:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008156:	4291      	cmp	r1, r2
 8008158:	d1f9      	bne.n	800814e <memcpy+0xe>
 800815a:	bd10      	pop	{r4, pc}

0800815c <memset>:
 800815c:	4402      	add	r2, r0
 800815e:	4603      	mov	r3, r0
 8008160:	4293      	cmp	r3, r2
 8008162:	d100      	bne.n	8008166 <memset+0xa>
 8008164:	4770      	bx	lr
 8008166:	f803 1b01 	strb.w	r1, [r3], #1
 800816a:	e7f9      	b.n	8008160 <memset+0x4>

0800816c <iprintf>:
 800816c:	b40f      	push	{r0, r1, r2, r3}
 800816e:	4b0a      	ldr	r3, [pc, #40]	; (8008198 <iprintf+0x2c>)
 8008170:	b513      	push	{r0, r1, r4, lr}
 8008172:	681c      	ldr	r4, [r3, #0]
 8008174:	b124      	cbz	r4, 8008180 <iprintf+0x14>
 8008176:	69a3      	ldr	r3, [r4, #24]
 8008178:	b913      	cbnz	r3, 8008180 <iprintf+0x14>
 800817a:	4620      	mov	r0, r4
 800817c:	f000 fa5e 	bl	800863c <__sinit>
 8008180:	ab05      	add	r3, sp, #20
 8008182:	9a04      	ldr	r2, [sp, #16]
 8008184:	68a1      	ldr	r1, [r4, #8]
 8008186:	9301      	str	r3, [sp, #4]
 8008188:	4620      	mov	r0, r4
 800818a:	f000 fc67 	bl	8008a5c <_vfiprintf_r>
 800818e:	b002      	add	sp, #8
 8008190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008194:	b004      	add	sp, #16
 8008196:	4770      	bx	lr
 8008198:	20000070 	.word	0x20000070

0800819c <_puts_r>:
 800819c:	b570      	push	{r4, r5, r6, lr}
 800819e:	460e      	mov	r6, r1
 80081a0:	4605      	mov	r5, r0
 80081a2:	b118      	cbz	r0, 80081ac <_puts_r+0x10>
 80081a4:	6983      	ldr	r3, [r0, #24]
 80081a6:	b90b      	cbnz	r3, 80081ac <_puts_r+0x10>
 80081a8:	f000 fa48 	bl	800863c <__sinit>
 80081ac:	69ab      	ldr	r3, [r5, #24]
 80081ae:	68ac      	ldr	r4, [r5, #8]
 80081b0:	b913      	cbnz	r3, 80081b8 <_puts_r+0x1c>
 80081b2:	4628      	mov	r0, r5
 80081b4:	f000 fa42 	bl	800863c <__sinit>
 80081b8:	4b2c      	ldr	r3, [pc, #176]	; (800826c <_puts_r+0xd0>)
 80081ba:	429c      	cmp	r4, r3
 80081bc:	d120      	bne.n	8008200 <_puts_r+0x64>
 80081be:	686c      	ldr	r4, [r5, #4]
 80081c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081c2:	07db      	lsls	r3, r3, #31
 80081c4:	d405      	bmi.n	80081d2 <_puts_r+0x36>
 80081c6:	89a3      	ldrh	r3, [r4, #12]
 80081c8:	0598      	lsls	r0, r3, #22
 80081ca:	d402      	bmi.n	80081d2 <_puts_r+0x36>
 80081cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081ce:	f000 fad3 	bl	8008778 <__retarget_lock_acquire_recursive>
 80081d2:	89a3      	ldrh	r3, [r4, #12]
 80081d4:	0719      	lsls	r1, r3, #28
 80081d6:	d51d      	bpl.n	8008214 <_puts_r+0x78>
 80081d8:	6923      	ldr	r3, [r4, #16]
 80081da:	b1db      	cbz	r3, 8008214 <_puts_r+0x78>
 80081dc:	3e01      	subs	r6, #1
 80081de:	68a3      	ldr	r3, [r4, #8]
 80081e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80081e4:	3b01      	subs	r3, #1
 80081e6:	60a3      	str	r3, [r4, #8]
 80081e8:	bb39      	cbnz	r1, 800823a <_puts_r+0x9e>
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	da38      	bge.n	8008260 <_puts_r+0xc4>
 80081ee:	4622      	mov	r2, r4
 80081f0:	210a      	movs	r1, #10
 80081f2:	4628      	mov	r0, r5
 80081f4:	f000 f848 	bl	8008288 <__swbuf_r>
 80081f8:	3001      	adds	r0, #1
 80081fa:	d011      	beq.n	8008220 <_puts_r+0x84>
 80081fc:	250a      	movs	r5, #10
 80081fe:	e011      	b.n	8008224 <_puts_r+0x88>
 8008200:	4b1b      	ldr	r3, [pc, #108]	; (8008270 <_puts_r+0xd4>)
 8008202:	429c      	cmp	r4, r3
 8008204:	d101      	bne.n	800820a <_puts_r+0x6e>
 8008206:	68ac      	ldr	r4, [r5, #8]
 8008208:	e7da      	b.n	80081c0 <_puts_r+0x24>
 800820a:	4b1a      	ldr	r3, [pc, #104]	; (8008274 <_puts_r+0xd8>)
 800820c:	429c      	cmp	r4, r3
 800820e:	bf08      	it	eq
 8008210:	68ec      	ldreq	r4, [r5, #12]
 8008212:	e7d5      	b.n	80081c0 <_puts_r+0x24>
 8008214:	4621      	mov	r1, r4
 8008216:	4628      	mov	r0, r5
 8008218:	f000 f888 	bl	800832c <__swsetup_r>
 800821c:	2800      	cmp	r0, #0
 800821e:	d0dd      	beq.n	80081dc <_puts_r+0x40>
 8008220:	f04f 35ff 	mov.w	r5, #4294967295
 8008224:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008226:	07da      	lsls	r2, r3, #31
 8008228:	d405      	bmi.n	8008236 <_puts_r+0x9a>
 800822a:	89a3      	ldrh	r3, [r4, #12]
 800822c:	059b      	lsls	r3, r3, #22
 800822e:	d402      	bmi.n	8008236 <_puts_r+0x9a>
 8008230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008232:	f000 faa2 	bl	800877a <__retarget_lock_release_recursive>
 8008236:	4628      	mov	r0, r5
 8008238:	bd70      	pop	{r4, r5, r6, pc}
 800823a:	2b00      	cmp	r3, #0
 800823c:	da04      	bge.n	8008248 <_puts_r+0xac>
 800823e:	69a2      	ldr	r2, [r4, #24]
 8008240:	429a      	cmp	r2, r3
 8008242:	dc06      	bgt.n	8008252 <_puts_r+0xb6>
 8008244:	290a      	cmp	r1, #10
 8008246:	d004      	beq.n	8008252 <_puts_r+0xb6>
 8008248:	6823      	ldr	r3, [r4, #0]
 800824a:	1c5a      	adds	r2, r3, #1
 800824c:	6022      	str	r2, [r4, #0]
 800824e:	7019      	strb	r1, [r3, #0]
 8008250:	e7c5      	b.n	80081de <_puts_r+0x42>
 8008252:	4622      	mov	r2, r4
 8008254:	4628      	mov	r0, r5
 8008256:	f000 f817 	bl	8008288 <__swbuf_r>
 800825a:	3001      	adds	r0, #1
 800825c:	d1bf      	bne.n	80081de <_puts_r+0x42>
 800825e:	e7df      	b.n	8008220 <_puts_r+0x84>
 8008260:	6823      	ldr	r3, [r4, #0]
 8008262:	250a      	movs	r5, #10
 8008264:	1c5a      	adds	r2, r3, #1
 8008266:	6022      	str	r2, [r4, #0]
 8008268:	701d      	strb	r5, [r3, #0]
 800826a:	e7db      	b.n	8008224 <_puts_r+0x88>
 800826c:	080093e4 	.word	0x080093e4
 8008270:	08009404 	.word	0x08009404
 8008274:	080093c4 	.word	0x080093c4

08008278 <puts>:
 8008278:	4b02      	ldr	r3, [pc, #8]	; (8008284 <puts+0xc>)
 800827a:	4601      	mov	r1, r0
 800827c:	6818      	ldr	r0, [r3, #0]
 800827e:	f7ff bf8d 	b.w	800819c <_puts_r>
 8008282:	bf00      	nop
 8008284:	20000070 	.word	0x20000070

08008288 <__swbuf_r>:
 8008288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800828a:	460e      	mov	r6, r1
 800828c:	4614      	mov	r4, r2
 800828e:	4605      	mov	r5, r0
 8008290:	b118      	cbz	r0, 800829a <__swbuf_r+0x12>
 8008292:	6983      	ldr	r3, [r0, #24]
 8008294:	b90b      	cbnz	r3, 800829a <__swbuf_r+0x12>
 8008296:	f000 f9d1 	bl	800863c <__sinit>
 800829a:	4b21      	ldr	r3, [pc, #132]	; (8008320 <__swbuf_r+0x98>)
 800829c:	429c      	cmp	r4, r3
 800829e:	d12b      	bne.n	80082f8 <__swbuf_r+0x70>
 80082a0:	686c      	ldr	r4, [r5, #4]
 80082a2:	69a3      	ldr	r3, [r4, #24]
 80082a4:	60a3      	str	r3, [r4, #8]
 80082a6:	89a3      	ldrh	r3, [r4, #12]
 80082a8:	071a      	lsls	r2, r3, #28
 80082aa:	d52f      	bpl.n	800830c <__swbuf_r+0x84>
 80082ac:	6923      	ldr	r3, [r4, #16]
 80082ae:	b36b      	cbz	r3, 800830c <__swbuf_r+0x84>
 80082b0:	6923      	ldr	r3, [r4, #16]
 80082b2:	6820      	ldr	r0, [r4, #0]
 80082b4:	1ac0      	subs	r0, r0, r3
 80082b6:	6963      	ldr	r3, [r4, #20]
 80082b8:	b2f6      	uxtb	r6, r6
 80082ba:	4283      	cmp	r3, r0
 80082bc:	4637      	mov	r7, r6
 80082be:	dc04      	bgt.n	80082ca <__swbuf_r+0x42>
 80082c0:	4621      	mov	r1, r4
 80082c2:	4628      	mov	r0, r5
 80082c4:	f000 f926 	bl	8008514 <_fflush_r>
 80082c8:	bb30      	cbnz	r0, 8008318 <__swbuf_r+0x90>
 80082ca:	68a3      	ldr	r3, [r4, #8]
 80082cc:	3b01      	subs	r3, #1
 80082ce:	60a3      	str	r3, [r4, #8]
 80082d0:	6823      	ldr	r3, [r4, #0]
 80082d2:	1c5a      	adds	r2, r3, #1
 80082d4:	6022      	str	r2, [r4, #0]
 80082d6:	701e      	strb	r6, [r3, #0]
 80082d8:	6963      	ldr	r3, [r4, #20]
 80082da:	3001      	adds	r0, #1
 80082dc:	4283      	cmp	r3, r0
 80082de:	d004      	beq.n	80082ea <__swbuf_r+0x62>
 80082e0:	89a3      	ldrh	r3, [r4, #12]
 80082e2:	07db      	lsls	r3, r3, #31
 80082e4:	d506      	bpl.n	80082f4 <__swbuf_r+0x6c>
 80082e6:	2e0a      	cmp	r6, #10
 80082e8:	d104      	bne.n	80082f4 <__swbuf_r+0x6c>
 80082ea:	4621      	mov	r1, r4
 80082ec:	4628      	mov	r0, r5
 80082ee:	f000 f911 	bl	8008514 <_fflush_r>
 80082f2:	b988      	cbnz	r0, 8008318 <__swbuf_r+0x90>
 80082f4:	4638      	mov	r0, r7
 80082f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082f8:	4b0a      	ldr	r3, [pc, #40]	; (8008324 <__swbuf_r+0x9c>)
 80082fa:	429c      	cmp	r4, r3
 80082fc:	d101      	bne.n	8008302 <__swbuf_r+0x7a>
 80082fe:	68ac      	ldr	r4, [r5, #8]
 8008300:	e7cf      	b.n	80082a2 <__swbuf_r+0x1a>
 8008302:	4b09      	ldr	r3, [pc, #36]	; (8008328 <__swbuf_r+0xa0>)
 8008304:	429c      	cmp	r4, r3
 8008306:	bf08      	it	eq
 8008308:	68ec      	ldreq	r4, [r5, #12]
 800830a:	e7ca      	b.n	80082a2 <__swbuf_r+0x1a>
 800830c:	4621      	mov	r1, r4
 800830e:	4628      	mov	r0, r5
 8008310:	f000 f80c 	bl	800832c <__swsetup_r>
 8008314:	2800      	cmp	r0, #0
 8008316:	d0cb      	beq.n	80082b0 <__swbuf_r+0x28>
 8008318:	f04f 37ff 	mov.w	r7, #4294967295
 800831c:	e7ea      	b.n	80082f4 <__swbuf_r+0x6c>
 800831e:	bf00      	nop
 8008320:	080093e4 	.word	0x080093e4
 8008324:	08009404 	.word	0x08009404
 8008328:	080093c4 	.word	0x080093c4

0800832c <__swsetup_r>:
 800832c:	4b32      	ldr	r3, [pc, #200]	; (80083f8 <__swsetup_r+0xcc>)
 800832e:	b570      	push	{r4, r5, r6, lr}
 8008330:	681d      	ldr	r5, [r3, #0]
 8008332:	4606      	mov	r6, r0
 8008334:	460c      	mov	r4, r1
 8008336:	b125      	cbz	r5, 8008342 <__swsetup_r+0x16>
 8008338:	69ab      	ldr	r3, [r5, #24]
 800833a:	b913      	cbnz	r3, 8008342 <__swsetup_r+0x16>
 800833c:	4628      	mov	r0, r5
 800833e:	f000 f97d 	bl	800863c <__sinit>
 8008342:	4b2e      	ldr	r3, [pc, #184]	; (80083fc <__swsetup_r+0xd0>)
 8008344:	429c      	cmp	r4, r3
 8008346:	d10f      	bne.n	8008368 <__swsetup_r+0x3c>
 8008348:	686c      	ldr	r4, [r5, #4]
 800834a:	89a3      	ldrh	r3, [r4, #12]
 800834c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008350:	0719      	lsls	r1, r3, #28
 8008352:	d42c      	bmi.n	80083ae <__swsetup_r+0x82>
 8008354:	06dd      	lsls	r5, r3, #27
 8008356:	d411      	bmi.n	800837c <__swsetup_r+0x50>
 8008358:	2309      	movs	r3, #9
 800835a:	6033      	str	r3, [r6, #0]
 800835c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008360:	81a3      	strh	r3, [r4, #12]
 8008362:	f04f 30ff 	mov.w	r0, #4294967295
 8008366:	e03e      	b.n	80083e6 <__swsetup_r+0xba>
 8008368:	4b25      	ldr	r3, [pc, #148]	; (8008400 <__swsetup_r+0xd4>)
 800836a:	429c      	cmp	r4, r3
 800836c:	d101      	bne.n	8008372 <__swsetup_r+0x46>
 800836e:	68ac      	ldr	r4, [r5, #8]
 8008370:	e7eb      	b.n	800834a <__swsetup_r+0x1e>
 8008372:	4b24      	ldr	r3, [pc, #144]	; (8008404 <__swsetup_r+0xd8>)
 8008374:	429c      	cmp	r4, r3
 8008376:	bf08      	it	eq
 8008378:	68ec      	ldreq	r4, [r5, #12]
 800837a:	e7e6      	b.n	800834a <__swsetup_r+0x1e>
 800837c:	0758      	lsls	r0, r3, #29
 800837e:	d512      	bpl.n	80083a6 <__swsetup_r+0x7a>
 8008380:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008382:	b141      	cbz	r1, 8008396 <__swsetup_r+0x6a>
 8008384:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008388:	4299      	cmp	r1, r3
 800838a:	d002      	beq.n	8008392 <__swsetup_r+0x66>
 800838c:	4630      	mov	r0, r6
 800838e:	f000 fa5b 	bl	8008848 <_free_r>
 8008392:	2300      	movs	r3, #0
 8008394:	6363      	str	r3, [r4, #52]	; 0x34
 8008396:	89a3      	ldrh	r3, [r4, #12]
 8008398:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800839c:	81a3      	strh	r3, [r4, #12]
 800839e:	2300      	movs	r3, #0
 80083a0:	6063      	str	r3, [r4, #4]
 80083a2:	6923      	ldr	r3, [r4, #16]
 80083a4:	6023      	str	r3, [r4, #0]
 80083a6:	89a3      	ldrh	r3, [r4, #12]
 80083a8:	f043 0308 	orr.w	r3, r3, #8
 80083ac:	81a3      	strh	r3, [r4, #12]
 80083ae:	6923      	ldr	r3, [r4, #16]
 80083b0:	b94b      	cbnz	r3, 80083c6 <__swsetup_r+0x9a>
 80083b2:	89a3      	ldrh	r3, [r4, #12]
 80083b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80083b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083bc:	d003      	beq.n	80083c6 <__swsetup_r+0x9a>
 80083be:	4621      	mov	r1, r4
 80083c0:	4630      	mov	r0, r6
 80083c2:	f000 fa01 	bl	80087c8 <__smakebuf_r>
 80083c6:	89a0      	ldrh	r0, [r4, #12]
 80083c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083cc:	f010 0301 	ands.w	r3, r0, #1
 80083d0:	d00a      	beq.n	80083e8 <__swsetup_r+0xbc>
 80083d2:	2300      	movs	r3, #0
 80083d4:	60a3      	str	r3, [r4, #8]
 80083d6:	6963      	ldr	r3, [r4, #20]
 80083d8:	425b      	negs	r3, r3
 80083da:	61a3      	str	r3, [r4, #24]
 80083dc:	6923      	ldr	r3, [r4, #16]
 80083de:	b943      	cbnz	r3, 80083f2 <__swsetup_r+0xc6>
 80083e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80083e4:	d1ba      	bne.n	800835c <__swsetup_r+0x30>
 80083e6:	bd70      	pop	{r4, r5, r6, pc}
 80083e8:	0781      	lsls	r1, r0, #30
 80083ea:	bf58      	it	pl
 80083ec:	6963      	ldrpl	r3, [r4, #20]
 80083ee:	60a3      	str	r3, [r4, #8]
 80083f0:	e7f4      	b.n	80083dc <__swsetup_r+0xb0>
 80083f2:	2000      	movs	r0, #0
 80083f4:	e7f7      	b.n	80083e6 <__swsetup_r+0xba>
 80083f6:	bf00      	nop
 80083f8:	20000070 	.word	0x20000070
 80083fc:	080093e4 	.word	0x080093e4
 8008400:	08009404 	.word	0x08009404
 8008404:	080093c4 	.word	0x080093c4

08008408 <__sflush_r>:
 8008408:	898a      	ldrh	r2, [r1, #12]
 800840a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800840e:	4605      	mov	r5, r0
 8008410:	0710      	lsls	r0, r2, #28
 8008412:	460c      	mov	r4, r1
 8008414:	d458      	bmi.n	80084c8 <__sflush_r+0xc0>
 8008416:	684b      	ldr	r3, [r1, #4]
 8008418:	2b00      	cmp	r3, #0
 800841a:	dc05      	bgt.n	8008428 <__sflush_r+0x20>
 800841c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800841e:	2b00      	cmp	r3, #0
 8008420:	dc02      	bgt.n	8008428 <__sflush_r+0x20>
 8008422:	2000      	movs	r0, #0
 8008424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008428:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800842a:	2e00      	cmp	r6, #0
 800842c:	d0f9      	beq.n	8008422 <__sflush_r+0x1a>
 800842e:	2300      	movs	r3, #0
 8008430:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008434:	682f      	ldr	r7, [r5, #0]
 8008436:	602b      	str	r3, [r5, #0]
 8008438:	d032      	beq.n	80084a0 <__sflush_r+0x98>
 800843a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800843c:	89a3      	ldrh	r3, [r4, #12]
 800843e:	075a      	lsls	r2, r3, #29
 8008440:	d505      	bpl.n	800844e <__sflush_r+0x46>
 8008442:	6863      	ldr	r3, [r4, #4]
 8008444:	1ac0      	subs	r0, r0, r3
 8008446:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008448:	b10b      	cbz	r3, 800844e <__sflush_r+0x46>
 800844a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800844c:	1ac0      	subs	r0, r0, r3
 800844e:	2300      	movs	r3, #0
 8008450:	4602      	mov	r2, r0
 8008452:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008454:	6a21      	ldr	r1, [r4, #32]
 8008456:	4628      	mov	r0, r5
 8008458:	47b0      	blx	r6
 800845a:	1c43      	adds	r3, r0, #1
 800845c:	89a3      	ldrh	r3, [r4, #12]
 800845e:	d106      	bne.n	800846e <__sflush_r+0x66>
 8008460:	6829      	ldr	r1, [r5, #0]
 8008462:	291d      	cmp	r1, #29
 8008464:	d82c      	bhi.n	80084c0 <__sflush_r+0xb8>
 8008466:	4a2a      	ldr	r2, [pc, #168]	; (8008510 <__sflush_r+0x108>)
 8008468:	40ca      	lsrs	r2, r1
 800846a:	07d6      	lsls	r6, r2, #31
 800846c:	d528      	bpl.n	80084c0 <__sflush_r+0xb8>
 800846e:	2200      	movs	r2, #0
 8008470:	6062      	str	r2, [r4, #4]
 8008472:	04d9      	lsls	r1, r3, #19
 8008474:	6922      	ldr	r2, [r4, #16]
 8008476:	6022      	str	r2, [r4, #0]
 8008478:	d504      	bpl.n	8008484 <__sflush_r+0x7c>
 800847a:	1c42      	adds	r2, r0, #1
 800847c:	d101      	bne.n	8008482 <__sflush_r+0x7a>
 800847e:	682b      	ldr	r3, [r5, #0]
 8008480:	b903      	cbnz	r3, 8008484 <__sflush_r+0x7c>
 8008482:	6560      	str	r0, [r4, #84]	; 0x54
 8008484:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008486:	602f      	str	r7, [r5, #0]
 8008488:	2900      	cmp	r1, #0
 800848a:	d0ca      	beq.n	8008422 <__sflush_r+0x1a>
 800848c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008490:	4299      	cmp	r1, r3
 8008492:	d002      	beq.n	800849a <__sflush_r+0x92>
 8008494:	4628      	mov	r0, r5
 8008496:	f000 f9d7 	bl	8008848 <_free_r>
 800849a:	2000      	movs	r0, #0
 800849c:	6360      	str	r0, [r4, #52]	; 0x34
 800849e:	e7c1      	b.n	8008424 <__sflush_r+0x1c>
 80084a0:	6a21      	ldr	r1, [r4, #32]
 80084a2:	2301      	movs	r3, #1
 80084a4:	4628      	mov	r0, r5
 80084a6:	47b0      	blx	r6
 80084a8:	1c41      	adds	r1, r0, #1
 80084aa:	d1c7      	bne.n	800843c <__sflush_r+0x34>
 80084ac:	682b      	ldr	r3, [r5, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d0c4      	beq.n	800843c <__sflush_r+0x34>
 80084b2:	2b1d      	cmp	r3, #29
 80084b4:	d001      	beq.n	80084ba <__sflush_r+0xb2>
 80084b6:	2b16      	cmp	r3, #22
 80084b8:	d101      	bne.n	80084be <__sflush_r+0xb6>
 80084ba:	602f      	str	r7, [r5, #0]
 80084bc:	e7b1      	b.n	8008422 <__sflush_r+0x1a>
 80084be:	89a3      	ldrh	r3, [r4, #12]
 80084c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084c4:	81a3      	strh	r3, [r4, #12]
 80084c6:	e7ad      	b.n	8008424 <__sflush_r+0x1c>
 80084c8:	690f      	ldr	r7, [r1, #16]
 80084ca:	2f00      	cmp	r7, #0
 80084cc:	d0a9      	beq.n	8008422 <__sflush_r+0x1a>
 80084ce:	0793      	lsls	r3, r2, #30
 80084d0:	680e      	ldr	r6, [r1, #0]
 80084d2:	bf08      	it	eq
 80084d4:	694b      	ldreq	r3, [r1, #20]
 80084d6:	600f      	str	r7, [r1, #0]
 80084d8:	bf18      	it	ne
 80084da:	2300      	movne	r3, #0
 80084dc:	eba6 0807 	sub.w	r8, r6, r7
 80084e0:	608b      	str	r3, [r1, #8]
 80084e2:	f1b8 0f00 	cmp.w	r8, #0
 80084e6:	dd9c      	ble.n	8008422 <__sflush_r+0x1a>
 80084e8:	6a21      	ldr	r1, [r4, #32]
 80084ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80084ec:	4643      	mov	r3, r8
 80084ee:	463a      	mov	r2, r7
 80084f0:	4628      	mov	r0, r5
 80084f2:	47b0      	blx	r6
 80084f4:	2800      	cmp	r0, #0
 80084f6:	dc06      	bgt.n	8008506 <__sflush_r+0xfe>
 80084f8:	89a3      	ldrh	r3, [r4, #12]
 80084fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084fe:	81a3      	strh	r3, [r4, #12]
 8008500:	f04f 30ff 	mov.w	r0, #4294967295
 8008504:	e78e      	b.n	8008424 <__sflush_r+0x1c>
 8008506:	4407      	add	r7, r0
 8008508:	eba8 0800 	sub.w	r8, r8, r0
 800850c:	e7e9      	b.n	80084e2 <__sflush_r+0xda>
 800850e:	bf00      	nop
 8008510:	20400001 	.word	0x20400001

08008514 <_fflush_r>:
 8008514:	b538      	push	{r3, r4, r5, lr}
 8008516:	690b      	ldr	r3, [r1, #16]
 8008518:	4605      	mov	r5, r0
 800851a:	460c      	mov	r4, r1
 800851c:	b913      	cbnz	r3, 8008524 <_fflush_r+0x10>
 800851e:	2500      	movs	r5, #0
 8008520:	4628      	mov	r0, r5
 8008522:	bd38      	pop	{r3, r4, r5, pc}
 8008524:	b118      	cbz	r0, 800852e <_fflush_r+0x1a>
 8008526:	6983      	ldr	r3, [r0, #24]
 8008528:	b90b      	cbnz	r3, 800852e <_fflush_r+0x1a>
 800852a:	f000 f887 	bl	800863c <__sinit>
 800852e:	4b14      	ldr	r3, [pc, #80]	; (8008580 <_fflush_r+0x6c>)
 8008530:	429c      	cmp	r4, r3
 8008532:	d11b      	bne.n	800856c <_fflush_r+0x58>
 8008534:	686c      	ldr	r4, [r5, #4]
 8008536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d0ef      	beq.n	800851e <_fflush_r+0xa>
 800853e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008540:	07d0      	lsls	r0, r2, #31
 8008542:	d404      	bmi.n	800854e <_fflush_r+0x3a>
 8008544:	0599      	lsls	r1, r3, #22
 8008546:	d402      	bmi.n	800854e <_fflush_r+0x3a>
 8008548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800854a:	f000 f915 	bl	8008778 <__retarget_lock_acquire_recursive>
 800854e:	4628      	mov	r0, r5
 8008550:	4621      	mov	r1, r4
 8008552:	f7ff ff59 	bl	8008408 <__sflush_r>
 8008556:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008558:	07da      	lsls	r2, r3, #31
 800855a:	4605      	mov	r5, r0
 800855c:	d4e0      	bmi.n	8008520 <_fflush_r+0xc>
 800855e:	89a3      	ldrh	r3, [r4, #12]
 8008560:	059b      	lsls	r3, r3, #22
 8008562:	d4dd      	bmi.n	8008520 <_fflush_r+0xc>
 8008564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008566:	f000 f908 	bl	800877a <__retarget_lock_release_recursive>
 800856a:	e7d9      	b.n	8008520 <_fflush_r+0xc>
 800856c:	4b05      	ldr	r3, [pc, #20]	; (8008584 <_fflush_r+0x70>)
 800856e:	429c      	cmp	r4, r3
 8008570:	d101      	bne.n	8008576 <_fflush_r+0x62>
 8008572:	68ac      	ldr	r4, [r5, #8]
 8008574:	e7df      	b.n	8008536 <_fflush_r+0x22>
 8008576:	4b04      	ldr	r3, [pc, #16]	; (8008588 <_fflush_r+0x74>)
 8008578:	429c      	cmp	r4, r3
 800857a:	bf08      	it	eq
 800857c:	68ec      	ldreq	r4, [r5, #12]
 800857e:	e7da      	b.n	8008536 <_fflush_r+0x22>
 8008580:	080093e4 	.word	0x080093e4
 8008584:	08009404 	.word	0x08009404
 8008588:	080093c4 	.word	0x080093c4

0800858c <std>:
 800858c:	2300      	movs	r3, #0
 800858e:	b510      	push	{r4, lr}
 8008590:	4604      	mov	r4, r0
 8008592:	e9c0 3300 	strd	r3, r3, [r0]
 8008596:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800859a:	6083      	str	r3, [r0, #8]
 800859c:	8181      	strh	r1, [r0, #12]
 800859e:	6643      	str	r3, [r0, #100]	; 0x64
 80085a0:	81c2      	strh	r2, [r0, #14]
 80085a2:	6183      	str	r3, [r0, #24]
 80085a4:	4619      	mov	r1, r3
 80085a6:	2208      	movs	r2, #8
 80085a8:	305c      	adds	r0, #92	; 0x5c
 80085aa:	f7ff fdd7 	bl	800815c <memset>
 80085ae:	4b05      	ldr	r3, [pc, #20]	; (80085c4 <std+0x38>)
 80085b0:	6263      	str	r3, [r4, #36]	; 0x24
 80085b2:	4b05      	ldr	r3, [pc, #20]	; (80085c8 <std+0x3c>)
 80085b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80085b6:	4b05      	ldr	r3, [pc, #20]	; (80085cc <std+0x40>)
 80085b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80085ba:	4b05      	ldr	r3, [pc, #20]	; (80085d0 <std+0x44>)
 80085bc:	6224      	str	r4, [r4, #32]
 80085be:	6323      	str	r3, [r4, #48]	; 0x30
 80085c0:	bd10      	pop	{r4, pc}
 80085c2:	bf00      	nop
 80085c4:	08009005 	.word	0x08009005
 80085c8:	08009027 	.word	0x08009027
 80085cc:	0800905f 	.word	0x0800905f
 80085d0:	08009083 	.word	0x08009083

080085d4 <_cleanup_r>:
 80085d4:	4901      	ldr	r1, [pc, #4]	; (80085dc <_cleanup_r+0x8>)
 80085d6:	f000 b8af 	b.w	8008738 <_fwalk_reent>
 80085da:	bf00      	nop
 80085dc:	08008515 	.word	0x08008515

080085e0 <__sfmoreglue>:
 80085e0:	b570      	push	{r4, r5, r6, lr}
 80085e2:	2268      	movs	r2, #104	; 0x68
 80085e4:	1e4d      	subs	r5, r1, #1
 80085e6:	4355      	muls	r5, r2
 80085e8:	460e      	mov	r6, r1
 80085ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80085ee:	f000 f997 	bl	8008920 <_malloc_r>
 80085f2:	4604      	mov	r4, r0
 80085f4:	b140      	cbz	r0, 8008608 <__sfmoreglue+0x28>
 80085f6:	2100      	movs	r1, #0
 80085f8:	e9c0 1600 	strd	r1, r6, [r0]
 80085fc:	300c      	adds	r0, #12
 80085fe:	60a0      	str	r0, [r4, #8]
 8008600:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008604:	f7ff fdaa 	bl	800815c <memset>
 8008608:	4620      	mov	r0, r4
 800860a:	bd70      	pop	{r4, r5, r6, pc}

0800860c <__sfp_lock_acquire>:
 800860c:	4801      	ldr	r0, [pc, #4]	; (8008614 <__sfp_lock_acquire+0x8>)
 800860e:	f000 b8b3 	b.w	8008778 <__retarget_lock_acquire_recursive>
 8008612:	bf00      	nop
 8008614:	200006dd 	.word	0x200006dd

08008618 <__sfp_lock_release>:
 8008618:	4801      	ldr	r0, [pc, #4]	; (8008620 <__sfp_lock_release+0x8>)
 800861a:	f000 b8ae 	b.w	800877a <__retarget_lock_release_recursive>
 800861e:	bf00      	nop
 8008620:	200006dd 	.word	0x200006dd

08008624 <__sinit_lock_acquire>:
 8008624:	4801      	ldr	r0, [pc, #4]	; (800862c <__sinit_lock_acquire+0x8>)
 8008626:	f000 b8a7 	b.w	8008778 <__retarget_lock_acquire_recursive>
 800862a:	bf00      	nop
 800862c:	200006de 	.word	0x200006de

08008630 <__sinit_lock_release>:
 8008630:	4801      	ldr	r0, [pc, #4]	; (8008638 <__sinit_lock_release+0x8>)
 8008632:	f000 b8a2 	b.w	800877a <__retarget_lock_release_recursive>
 8008636:	bf00      	nop
 8008638:	200006de 	.word	0x200006de

0800863c <__sinit>:
 800863c:	b510      	push	{r4, lr}
 800863e:	4604      	mov	r4, r0
 8008640:	f7ff fff0 	bl	8008624 <__sinit_lock_acquire>
 8008644:	69a3      	ldr	r3, [r4, #24]
 8008646:	b11b      	cbz	r3, 8008650 <__sinit+0x14>
 8008648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800864c:	f7ff bff0 	b.w	8008630 <__sinit_lock_release>
 8008650:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008654:	6523      	str	r3, [r4, #80]	; 0x50
 8008656:	4b13      	ldr	r3, [pc, #76]	; (80086a4 <__sinit+0x68>)
 8008658:	4a13      	ldr	r2, [pc, #76]	; (80086a8 <__sinit+0x6c>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	62a2      	str	r2, [r4, #40]	; 0x28
 800865e:	42a3      	cmp	r3, r4
 8008660:	bf04      	itt	eq
 8008662:	2301      	moveq	r3, #1
 8008664:	61a3      	streq	r3, [r4, #24]
 8008666:	4620      	mov	r0, r4
 8008668:	f000 f820 	bl	80086ac <__sfp>
 800866c:	6060      	str	r0, [r4, #4]
 800866e:	4620      	mov	r0, r4
 8008670:	f000 f81c 	bl	80086ac <__sfp>
 8008674:	60a0      	str	r0, [r4, #8]
 8008676:	4620      	mov	r0, r4
 8008678:	f000 f818 	bl	80086ac <__sfp>
 800867c:	2200      	movs	r2, #0
 800867e:	60e0      	str	r0, [r4, #12]
 8008680:	2104      	movs	r1, #4
 8008682:	6860      	ldr	r0, [r4, #4]
 8008684:	f7ff ff82 	bl	800858c <std>
 8008688:	68a0      	ldr	r0, [r4, #8]
 800868a:	2201      	movs	r2, #1
 800868c:	2109      	movs	r1, #9
 800868e:	f7ff ff7d 	bl	800858c <std>
 8008692:	68e0      	ldr	r0, [r4, #12]
 8008694:	2202      	movs	r2, #2
 8008696:	2112      	movs	r1, #18
 8008698:	f7ff ff78 	bl	800858c <std>
 800869c:	2301      	movs	r3, #1
 800869e:	61a3      	str	r3, [r4, #24]
 80086a0:	e7d2      	b.n	8008648 <__sinit+0xc>
 80086a2:	bf00      	nop
 80086a4:	080093c0 	.word	0x080093c0
 80086a8:	080085d5 	.word	0x080085d5

080086ac <__sfp>:
 80086ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ae:	4607      	mov	r7, r0
 80086b0:	f7ff ffac 	bl	800860c <__sfp_lock_acquire>
 80086b4:	4b1e      	ldr	r3, [pc, #120]	; (8008730 <__sfp+0x84>)
 80086b6:	681e      	ldr	r6, [r3, #0]
 80086b8:	69b3      	ldr	r3, [r6, #24]
 80086ba:	b913      	cbnz	r3, 80086c2 <__sfp+0x16>
 80086bc:	4630      	mov	r0, r6
 80086be:	f7ff ffbd 	bl	800863c <__sinit>
 80086c2:	3648      	adds	r6, #72	; 0x48
 80086c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80086c8:	3b01      	subs	r3, #1
 80086ca:	d503      	bpl.n	80086d4 <__sfp+0x28>
 80086cc:	6833      	ldr	r3, [r6, #0]
 80086ce:	b30b      	cbz	r3, 8008714 <__sfp+0x68>
 80086d0:	6836      	ldr	r6, [r6, #0]
 80086d2:	e7f7      	b.n	80086c4 <__sfp+0x18>
 80086d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80086d8:	b9d5      	cbnz	r5, 8008710 <__sfp+0x64>
 80086da:	4b16      	ldr	r3, [pc, #88]	; (8008734 <__sfp+0x88>)
 80086dc:	60e3      	str	r3, [r4, #12]
 80086de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80086e2:	6665      	str	r5, [r4, #100]	; 0x64
 80086e4:	f000 f847 	bl	8008776 <__retarget_lock_init_recursive>
 80086e8:	f7ff ff96 	bl	8008618 <__sfp_lock_release>
 80086ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80086f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80086f4:	6025      	str	r5, [r4, #0]
 80086f6:	61a5      	str	r5, [r4, #24]
 80086f8:	2208      	movs	r2, #8
 80086fa:	4629      	mov	r1, r5
 80086fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008700:	f7ff fd2c 	bl	800815c <memset>
 8008704:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008708:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800870c:	4620      	mov	r0, r4
 800870e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008710:	3468      	adds	r4, #104	; 0x68
 8008712:	e7d9      	b.n	80086c8 <__sfp+0x1c>
 8008714:	2104      	movs	r1, #4
 8008716:	4638      	mov	r0, r7
 8008718:	f7ff ff62 	bl	80085e0 <__sfmoreglue>
 800871c:	4604      	mov	r4, r0
 800871e:	6030      	str	r0, [r6, #0]
 8008720:	2800      	cmp	r0, #0
 8008722:	d1d5      	bne.n	80086d0 <__sfp+0x24>
 8008724:	f7ff ff78 	bl	8008618 <__sfp_lock_release>
 8008728:	230c      	movs	r3, #12
 800872a:	603b      	str	r3, [r7, #0]
 800872c:	e7ee      	b.n	800870c <__sfp+0x60>
 800872e:	bf00      	nop
 8008730:	080093c0 	.word	0x080093c0
 8008734:	ffff0001 	.word	0xffff0001

08008738 <_fwalk_reent>:
 8008738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800873c:	4606      	mov	r6, r0
 800873e:	4688      	mov	r8, r1
 8008740:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008744:	2700      	movs	r7, #0
 8008746:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800874a:	f1b9 0901 	subs.w	r9, r9, #1
 800874e:	d505      	bpl.n	800875c <_fwalk_reent+0x24>
 8008750:	6824      	ldr	r4, [r4, #0]
 8008752:	2c00      	cmp	r4, #0
 8008754:	d1f7      	bne.n	8008746 <_fwalk_reent+0xe>
 8008756:	4638      	mov	r0, r7
 8008758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800875c:	89ab      	ldrh	r3, [r5, #12]
 800875e:	2b01      	cmp	r3, #1
 8008760:	d907      	bls.n	8008772 <_fwalk_reent+0x3a>
 8008762:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008766:	3301      	adds	r3, #1
 8008768:	d003      	beq.n	8008772 <_fwalk_reent+0x3a>
 800876a:	4629      	mov	r1, r5
 800876c:	4630      	mov	r0, r6
 800876e:	47c0      	blx	r8
 8008770:	4307      	orrs	r7, r0
 8008772:	3568      	adds	r5, #104	; 0x68
 8008774:	e7e9      	b.n	800874a <_fwalk_reent+0x12>

08008776 <__retarget_lock_init_recursive>:
 8008776:	4770      	bx	lr

08008778 <__retarget_lock_acquire_recursive>:
 8008778:	4770      	bx	lr

0800877a <__retarget_lock_release_recursive>:
 800877a:	4770      	bx	lr

0800877c <__swhatbuf_r>:
 800877c:	b570      	push	{r4, r5, r6, lr}
 800877e:	460e      	mov	r6, r1
 8008780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008784:	2900      	cmp	r1, #0
 8008786:	b096      	sub	sp, #88	; 0x58
 8008788:	4614      	mov	r4, r2
 800878a:	461d      	mov	r5, r3
 800878c:	da08      	bge.n	80087a0 <__swhatbuf_r+0x24>
 800878e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008792:	2200      	movs	r2, #0
 8008794:	602a      	str	r2, [r5, #0]
 8008796:	061a      	lsls	r2, r3, #24
 8008798:	d410      	bmi.n	80087bc <__swhatbuf_r+0x40>
 800879a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800879e:	e00e      	b.n	80087be <__swhatbuf_r+0x42>
 80087a0:	466a      	mov	r2, sp
 80087a2:	f000 fc95 	bl	80090d0 <_fstat_r>
 80087a6:	2800      	cmp	r0, #0
 80087a8:	dbf1      	blt.n	800878e <__swhatbuf_r+0x12>
 80087aa:	9a01      	ldr	r2, [sp, #4]
 80087ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80087b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80087b4:	425a      	negs	r2, r3
 80087b6:	415a      	adcs	r2, r3
 80087b8:	602a      	str	r2, [r5, #0]
 80087ba:	e7ee      	b.n	800879a <__swhatbuf_r+0x1e>
 80087bc:	2340      	movs	r3, #64	; 0x40
 80087be:	2000      	movs	r0, #0
 80087c0:	6023      	str	r3, [r4, #0]
 80087c2:	b016      	add	sp, #88	; 0x58
 80087c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080087c8 <__smakebuf_r>:
 80087c8:	898b      	ldrh	r3, [r1, #12]
 80087ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80087cc:	079d      	lsls	r5, r3, #30
 80087ce:	4606      	mov	r6, r0
 80087d0:	460c      	mov	r4, r1
 80087d2:	d507      	bpl.n	80087e4 <__smakebuf_r+0x1c>
 80087d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80087d8:	6023      	str	r3, [r4, #0]
 80087da:	6123      	str	r3, [r4, #16]
 80087dc:	2301      	movs	r3, #1
 80087de:	6163      	str	r3, [r4, #20]
 80087e0:	b002      	add	sp, #8
 80087e2:	bd70      	pop	{r4, r5, r6, pc}
 80087e4:	ab01      	add	r3, sp, #4
 80087e6:	466a      	mov	r2, sp
 80087e8:	f7ff ffc8 	bl	800877c <__swhatbuf_r>
 80087ec:	9900      	ldr	r1, [sp, #0]
 80087ee:	4605      	mov	r5, r0
 80087f0:	4630      	mov	r0, r6
 80087f2:	f000 f895 	bl	8008920 <_malloc_r>
 80087f6:	b948      	cbnz	r0, 800880c <__smakebuf_r+0x44>
 80087f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087fc:	059a      	lsls	r2, r3, #22
 80087fe:	d4ef      	bmi.n	80087e0 <__smakebuf_r+0x18>
 8008800:	f023 0303 	bic.w	r3, r3, #3
 8008804:	f043 0302 	orr.w	r3, r3, #2
 8008808:	81a3      	strh	r3, [r4, #12]
 800880a:	e7e3      	b.n	80087d4 <__smakebuf_r+0xc>
 800880c:	4b0d      	ldr	r3, [pc, #52]	; (8008844 <__smakebuf_r+0x7c>)
 800880e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008810:	89a3      	ldrh	r3, [r4, #12]
 8008812:	6020      	str	r0, [r4, #0]
 8008814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008818:	81a3      	strh	r3, [r4, #12]
 800881a:	9b00      	ldr	r3, [sp, #0]
 800881c:	6163      	str	r3, [r4, #20]
 800881e:	9b01      	ldr	r3, [sp, #4]
 8008820:	6120      	str	r0, [r4, #16]
 8008822:	b15b      	cbz	r3, 800883c <__smakebuf_r+0x74>
 8008824:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008828:	4630      	mov	r0, r6
 800882a:	f000 fc63 	bl	80090f4 <_isatty_r>
 800882e:	b128      	cbz	r0, 800883c <__smakebuf_r+0x74>
 8008830:	89a3      	ldrh	r3, [r4, #12]
 8008832:	f023 0303 	bic.w	r3, r3, #3
 8008836:	f043 0301 	orr.w	r3, r3, #1
 800883a:	81a3      	strh	r3, [r4, #12]
 800883c:	89a0      	ldrh	r0, [r4, #12]
 800883e:	4305      	orrs	r5, r0
 8008840:	81a5      	strh	r5, [r4, #12]
 8008842:	e7cd      	b.n	80087e0 <__smakebuf_r+0x18>
 8008844:	080085d5 	.word	0x080085d5

08008848 <_free_r>:
 8008848:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800884a:	2900      	cmp	r1, #0
 800884c:	d044      	beq.n	80088d8 <_free_r+0x90>
 800884e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008852:	9001      	str	r0, [sp, #4]
 8008854:	2b00      	cmp	r3, #0
 8008856:	f1a1 0404 	sub.w	r4, r1, #4
 800885a:	bfb8      	it	lt
 800885c:	18e4      	addlt	r4, r4, r3
 800885e:	f000 fc6b 	bl	8009138 <__malloc_lock>
 8008862:	4a1e      	ldr	r2, [pc, #120]	; (80088dc <_free_r+0x94>)
 8008864:	9801      	ldr	r0, [sp, #4]
 8008866:	6813      	ldr	r3, [r2, #0]
 8008868:	b933      	cbnz	r3, 8008878 <_free_r+0x30>
 800886a:	6063      	str	r3, [r4, #4]
 800886c:	6014      	str	r4, [r2, #0]
 800886e:	b003      	add	sp, #12
 8008870:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008874:	f000 bc66 	b.w	8009144 <__malloc_unlock>
 8008878:	42a3      	cmp	r3, r4
 800887a:	d908      	bls.n	800888e <_free_r+0x46>
 800887c:	6825      	ldr	r5, [r4, #0]
 800887e:	1961      	adds	r1, r4, r5
 8008880:	428b      	cmp	r3, r1
 8008882:	bf01      	itttt	eq
 8008884:	6819      	ldreq	r1, [r3, #0]
 8008886:	685b      	ldreq	r3, [r3, #4]
 8008888:	1949      	addeq	r1, r1, r5
 800888a:	6021      	streq	r1, [r4, #0]
 800888c:	e7ed      	b.n	800886a <_free_r+0x22>
 800888e:	461a      	mov	r2, r3
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	b10b      	cbz	r3, 8008898 <_free_r+0x50>
 8008894:	42a3      	cmp	r3, r4
 8008896:	d9fa      	bls.n	800888e <_free_r+0x46>
 8008898:	6811      	ldr	r1, [r2, #0]
 800889a:	1855      	adds	r5, r2, r1
 800889c:	42a5      	cmp	r5, r4
 800889e:	d10b      	bne.n	80088b8 <_free_r+0x70>
 80088a0:	6824      	ldr	r4, [r4, #0]
 80088a2:	4421      	add	r1, r4
 80088a4:	1854      	adds	r4, r2, r1
 80088a6:	42a3      	cmp	r3, r4
 80088a8:	6011      	str	r1, [r2, #0]
 80088aa:	d1e0      	bne.n	800886e <_free_r+0x26>
 80088ac:	681c      	ldr	r4, [r3, #0]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	6053      	str	r3, [r2, #4]
 80088b2:	4421      	add	r1, r4
 80088b4:	6011      	str	r1, [r2, #0]
 80088b6:	e7da      	b.n	800886e <_free_r+0x26>
 80088b8:	d902      	bls.n	80088c0 <_free_r+0x78>
 80088ba:	230c      	movs	r3, #12
 80088bc:	6003      	str	r3, [r0, #0]
 80088be:	e7d6      	b.n	800886e <_free_r+0x26>
 80088c0:	6825      	ldr	r5, [r4, #0]
 80088c2:	1961      	adds	r1, r4, r5
 80088c4:	428b      	cmp	r3, r1
 80088c6:	bf04      	itt	eq
 80088c8:	6819      	ldreq	r1, [r3, #0]
 80088ca:	685b      	ldreq	r3, [r3, #4]
 80088cc:	6063      	str	r3, [r4, #4]
 80088ce:	bf04      	itt	eq
 80088d0:	1949      	addeq	r1, r1, r5
 80088d2:	6021      	streq	r1, [r4, #0]
 80088d4:	6054      	str	r4, [r2, #4]
 80088d6:	e7ca      	b.n	800886e <_free_r+0x26>
 80088d8:	b003      	add	sp, #12
 80088da:	bd30      	pop	{r4, r5, pc}
 80088dc:	200006e0 	.word	0x200006e0

080088e0 <sbrk_aligned>:
 80088e0:	b570      	push	{r4, r5, r6, lr}
 80088e2:	4e0e      	ldr	r6, [pc, #56]	; (800891c <sbrk_aligned+0x3c>)
 80088e4:	460c      	mov	r4, r1
 80088e6:	6831      	ldr	r1, [r6, #0]
 80088e8:	4605      	mov	r5, r0
 80088ea:	b911      	cbnz	r1, 80088f2 <sbrk_aligned+0x12>
 80088ec:	f000 fb7a 	bl	8008fe4 <_sbrk_r>
 80088f0:	6030      	str	r0, [r6, #0]
 80088f2:	4621      	mov	r1, r4
 80088f4:	4628      	mov	r0, r5
 80088f6:	f000 fb75 	bl	8008fe4 <_sbrk_r>
 80088fa:	1c43      	adds	r3, r0, #1
 80088fc:	d00a      	beq.n	8008914 <sbrk_aligned+0x34>
 80088fe:	1cc4      	adds	r4, r0, #3
 8008900:	f024 0403 	bic.w	r4, r4, #3
 8008904:	42a0      	cmp	r0, r4
 8008906:	d007      	beq.n	8008918 <sbrk_aligned+0x38>
 8008908:	1a21      	subs	r1, r4, r0
 800890a:	4628      	mov	r0, r5
 800890c:	f000 fb6a 	bl	8008fe4 <_sbrk_r>
 8008910:	3001      	adds	r0, #1
 8008912:	d101      	bne.n	8008918 <sbrk_aligned+0x38>
 8008914:	f04f 34ff 	mov.w	r4, #4294967295
 8008918:	4620      	mov	r0, r4
 800891a:	bd70      	pop	{r4, r5, r6, pc}
 800891c:	200006e4 	.word	0x200006e4

08008920 <_malloc_r>:
 8008920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008924:	1ccd      	adds	r5, r1, #3
 8008926:	f025 0503 	bic.w	r5, r5, #3
 800892a:	3508      	adds	r5, #8
 800892c:	2d0c      	cmp	r5, #12
 800892e:	bf38      	it	cc
 8008930:	250c      	movcc	r5, #12
 8008932:	2d00      	cmp	r5, #0
 8008934:	4607      	mov	r7, r0
 8008936:	db01      	blt.n	800893c <_malloc_r+0x1c>
 8008938:	42a9      	cmp	r1, r5
 800893a:	d905      	bls.n	8008948 <_malloc_r+0x28>
 800893c:	230c      	movs	r3, #12
 800893e:	603b      	str	r3, [r7, #0]
 8008940:	2600      	movs	r6, #0
 8008942:	4630      	mov	r0, r6
 8008944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008948:	4e2e      	ldr	r6, [pc, #184]	; (8008a04 <_malloc_r+0xe4>)
 800894a:	f000 fbf5 	bl	8009138 <__malloc_lock>
 800894e:	6833      	ldr	r3, [r6, #0]
 8008950:	461c      	mov	r4, r3
 8008952:	bb34      	cbnz	r4, 80089a2 <_malloc_r+0x82>
 8008954:	4629      	mov	r1, r5
 8008956:	4638      	mov	r0, r7
 8008958:	f7ff ffc2 	bl	80088e0 <sbrk_aligned>
 800895c:	1c43      	adds	r3, r0, #1
 800895e:	4604      	mov	r4, r0
 8008960:	d14d      	bne.n	80089fe <_malloc_r+0xde>
 8008962:	6834      	ldr	r4, [r6, #0]
 8008964:	4626      	mov	r6, r4
 8008966:	2e00      	cmp	r6, #0
 8008968:	d140      	bne.n	80089ec <_malloc_r+0xcc>
 800896a:	6823      	ldr	r3, [r4, #0]
 800896c:	4631      	mov	r1, r6
 800896e:	4638      	mov	r0, r7
 8008970:	eb04 0803 	add.w	r8, r4, r3
 8008974:	f000 fb36 	bl	8008fe4 <_sbrk_r>
 8008978:	4580      	cmp	r8, r0
 800897a:	d13a      	bne.n	80089f2 <_malloc_r+0xd2>
 800897c:	6821      	ldr	r1, [r4, #0]
 800897e:	3503      	adds	r5, #3
 8008980:	1a6d      	subs	r5, r5, r1
 8008982:	f025 0503 	bic.w	r5, r5, #3
 8008986:	3508      	adds	r5, #8
 8008988:	2d0c      	cmp	r5, #12
 800898a:	bf38      	it	cc
 800898c:	250c      	movcc	r5, #12
 800898e:	4629      	mov	r1, r5
 8008990:	4638      	mov	r0, r7
 8008992:	f7ff ffa5 	bl	80088e0 <sbrk_aligned>
 8008996:	3001      	adds	r0, #1
 8008998:	d02b      	beq.n	80089f2 <_malloc_r+0xd2>
 800899a:	6823      	ldr	r3, [r4, #0]
 800899c:	442b      	add	r3, r5
 800899e:	6023      	str	r3, [r4, #0]
 80089a0:	e00e      	b.n	80089c0 <_malloc_r+0xa0>
 80089a2:	6822      	ldr	r2, [r4, #0]
 80089a4:	1b52      	subs	r2, r2, r5
 80089a6:	d41e      	bmi.n	80089e6 <_malloc_r+0xc6>
 80089a8:	2a0b      	cmp	r2, #11
 80089aa:	d916      	bls.n	80089da <_malloc_r+0xba>
 80089ac:	1961      	adds	r1, r4, r5
 80089ae:	42a3      	cmp	r3, r4
 80089b0:	6025      	str	r5, [r4, #0]
 80089b2:	bf18      	it	ne
 80089b4:	6059      	strne	r1, [r3, #4]
 80089b6:	6863      	ldr	r3, [r4, #4]
 80089b8:	bf08      	it	eq
 80089ba:	6031      	streq	r1, [r6, #0]
 80089bc:	5162      	str	r2, [r4, r5]
 80089be:	604b      	str	r3, [r1, #4]
 80089c0:	4638      	mov	r0, r7
 80089c2:	f104 060b 	add.w	r6, r4, #11
 80089c6:	f000 fbbd 	bl	8009144 <__malloc_unlock>
 80089ca:	f026 0607 	bic.w	r6, r6, #7
 80089ce:	1d23      	adds	r3, r4, #4
 80089d0:	1af2      	subs	r2, r6, r3
 80089d2:	d0b6      	beq.n	8008942 <_malloc_r+0x22>
 80089d4:	1b9b      	subs	r3, r3, r6
 80089d6:	50a3      	str	r3, [r4, r2]
 80089d8:	e7b3      	b.n	8008942 <_malloc_r+0x22>
 80089da:	6862      	ldr	r2, [r4, #4]
 80089dc:	42a3      	cmp	r3, r4
 80089de:	bf0c      	ite	eq
 80089e0:	6032      	streq	r2, [r6, #0]
 80089e2:	605a      	strne	r2, [r3, #4]
 80089e4:	e7ec      	b.n	80089c0 <_malloc_r+0xa0>
 80089e6:	4623      	mov	r3, r4
 80089e8:	6864      	ldr	r4, [r4, #4]
 80089ea:	e7b2      	b.n	8008952 <_malloc_r+0x32>
 80089ec:	4634      	mov	r4, r6
 80089ee:	6876      	ldr	r6, [r6, #4]
 80089f0:	e7b9      	b.n	8008966 <_malloc_r+0x46>
 80089f2:	230c      	movs	r3, #12
 80089f4:	603b      	str	r3, [r7, #0]
 80089f6:	4638      	mov	r0, r7
 80089f8:	f000 fba4 	bl	8009144 <__malloc_unlock>
 80089fc:	e7a1      	b.n	8008942 <_malloc_r+0x22>
 80089fe:	6025      	str	r5, [r4, #0]
 8008a00:	e7de      	b.n	80089c0 <_malloc_r+0xa0>
 8008a02:	bf00      	nop
 8008a04:	200006e0 	.word	0x200006e0

08008a08 <__sfputc_r>:
 8008a08:	6893      	ldr	r3, [r2, #8]
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	b410      	push	{r4}
 8008a10:	6093      	str	r3, [r2, #8]
 8008a12:	da08      	bge.n	8008a26 <__sfputc_r+0x1e>
 8008a14:	6994      	ldr	r4, [r2, #24]
 8008a16:	42a3      	cmp	r3, r4
 8008a18:	db01      	blt.n	8008a1e <__sfputc_r+0x16>
 8008a1a:	290a      	cmp	r1, #10
 8008a1c:	d103      	bne.n	8008a26 <__sfputc_r+0x1e>
 8008a1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a22:	f7ff bc31 	b.w	8008288 <__swbuf_r>
 8008a26:	6813      	ldr	r3, [r2, #0]
 8008a28:	1c58      	adds	r0, r3, #1
 8008a2a:	6010      	str	r0, [r2, #0]
 8008a2c:	7019      	strb	r1, [r3, #0]
 8008a2e:	4608      	mov	r0, r1
 8008a30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a34:	4770      	bx	lr

08008a36 <__sfputs_r>:
 8008a36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a38:	4606      	mov	r6, r0
 8008a3a:	460f      	mov	r7, r1
 8008a3c:	4614      	mov	r4, r2
 8008a3e:	18d5      	adds	r5, r2, r3
 8008a40:	42ac      	cmp	r4, r5
 8008a42:	d101      	bne.n	8008a48 <__sfputs_r+0x12>
 8008a44:	2000      	movs	r0, #0
 8008a46:	e007      	b.n	8008a58 <__sfputs_r+0x22>
 8008a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a4c:	463a      	mov	r2, r7
 8008a4e:	4630      	mov	r0, r6
 8008a50:	f7ff ffda 	bl	8008a08 <__sfputc_r>
 8008a54:	1c43      	adds	r3, r0, #1
 8008a56:	d1f3      	bne.n	8008a40 <__sfputs_r+0xa>
 8008a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a5c <_vfiprintf_r>:
 8008a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a60:	460d      	mov	r5, r1
 8008a62:	b09d      	sub	sp, #116	; 0x74
 8008a64:	4614      	mov	r4, r2
 8008a66:	4698      	mov	r8, r3
 8008a68:	4606      	mov	r6, r0
 8008a6a:	b118      	cbz	r0, 8008a74 <_vfiprintf_r+0x18>
 8008a6c:	6983      	ldr	r3, [r0, #24]
 8008a6e:	b90b      	cbnz	r3, 8008a74 <_vfiprintf_r+0x18>
 8008a70:	f7ff fde4 	bl	800863c <__sinit>
 8008a74:	4b89      	ldr	r3, [pc, #548]	; (8008c9c <_vfiprintf_r+0x240>)
 8008a76:	429d      	cmp	r5, r3
 8008a78:	d11b      	bne.n	8008ab2 <_vfiprintf_r+0x56>
 8008a7a:	6875      	ldr	r5, [r6, #4]
 8008a7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a7e:	07d9      	lsls	r1, r3, #31
 8008a80:	d405      	bmi.n	8008a8e <_vfiprintf_r+0x32>
 8008a82:	89ab      	ldrh	r3, [r5, #12]
 8008a84:	059a      	lsls	r2, r3, #22
 8008a86:	d402      	bmi.n	8008a8e <_vfiprintf_r+0x32>
 8008a88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a8a:	f7ff fe75 	bl	8008778 <__retarget_lock_acquire_recursive>
 8008a8e:	89ab      	ldrh	r3, [r5, #12]
 8008a90:	071b      	lsls	r3, r3, #28
 8008a92:	d501      	bpl.n	8008a98 <_vfiprintf_r+0x3c>
 8008a94:	692b      	ldr	r3, [r5, #16]
 8008a96:	b9eb      	cbnz	r3, 8008ad4 <_vfiprintf_r+0x78>
 8008a98:	4629      	mov	r1, r5
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	f7ff fc46 	bl	800832c <__swsetup_r>
 8008aa0:	b1c0      	cbz	r0, 8008ad4 <_vfiprintf_r+0x78>
 8008aa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008aa4:	07dc      	lsls	r4, r3, #31
 8008aa6:	d50e      	bpl.n	8008ac6 <_vfiprintf_r+0x6a>
 8008aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8008aac:	b01d      	add	sp, #116	; 0x74
 8008aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ab2:	4b7b      	ldr	r3, [pc, #492]	; (8008ca0 <_vfiprintf_r+0x244>)
 8008ab4:	429d      	cmp	r5, r3
 8008ab6:	d101      	bne.n	8008abc <_vfiprintf_r+0x60>
 8008ab8:	68b5      	ldr	r5, [r6, #8]
 8008aba:	e7df      	b.n	8008a7c <_vfiprintf_r+0x20>
 8008abc:	4b79      	ldr	r3, [pc, #484]	; (8008ca4 <_vfiprintf_r+0x248>)
 8008abe:	429d      	cmp	r5, r3
 8008ac0:	bf08      	it	eq
 8008ac2:	68f5      	ldreq	r5, [r6, #12]
 8008ac4:	e7da      	b.n	8008a7c <_vfiprintf_r+0x20>
 8008ac6:	89ab      	ldrh	r3, [r5, #12]
 8008ac8:	0598      	lsls	r0, r3, #22
 8008aca:	d4ed      	bmi.n	8008aa8 <_vfiprintf_r+0x4c>
 8008acc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ace:	f7ff fe54 	bl	800877a <__retarget_lock_release_recursive>
 8008ad2:	e7e9      	b.n	8008aa8 <_vfiprintf_r+0x4c>
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ad8:	2320      	movs	r3, #32
 8008ada:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ade:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ae2:	2330      	movs	r3, #48	; 0x30
 8008ae4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008ca8 <_vfiprintf_r+0x24c>
 8008ae8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008aec:	f04f 0901 	mov.w	r9, #1
 8008af0:	4623      	mov	r3, r4
 8008af2:	469a      	mov	sl, r3
 8008af4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008af8:	b10a      	cbz	r2, 8008afe <_vfiprintf_r+0xa2>
 8008afa:	2a25      	cmp	r2, #37	; 0x25
 8008afc:	d1f9      	bne.n	8008af2 <_vfiprintf_r+0x96>
 8008afe:	ebba 0b04 	subs.w	fp, sl, r4
 8008b02:	d00b      	beq.n	8008b1c <_vfiprintf_r+0xc0>
 8008b04:	465b      	mov	r3, fp
 8008b06:	4622      	mov	r2, r4
 8008b08:	4629      	mov	r1, r5
 8008b0a:	4630      	mov	r0, r6
 8008b0c:	f7ff ff93 	bl	8008a36 <__sfputs_r>
 8008b10:	3001      	adds	r0, #1
 8008b12:	f000 80aa 	beq.w	8008c6a <_vfiprintf_r+0x20e>
 8008b16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b18:	445a      	add	r2, fp
 8008b1a:	9209      	str	r2, [sp, #36]	; 0x24
 8008b1c:	f89a 3000 	ldrb.w	r3, [sl]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f000 80a2 	beq.w	8008c6a <_vfiprintf_r+0x20e>
 8008b26:	2300      	movs	r3, #0
 8008b28:	f04f 32ff 	mov.w	r2, #4294967295
 8008b2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b30:	f10a 0a01 	add.w	sl, sl, #1
 8008b34:	9304      	str	r3, [sp, #16]
 8008b36:	9307      	str	r3, [sp, #28]
 8008b38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b3c:	931a      	str	r3, [sp, #104]	; 0x68
 8008b3e:	4654      	mov	r4, sl
 8008b40:	2205      	movs	r2, #5
 8008b42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b46:	4858      	ldr	r0, [pc, #352]	; (8008ca8 <_vfiprintf_r+0x24c>)
 8008b48:	f7f7 fb62 	bl	8000210 <memchr>
 8008b4c:	9a04      	ldr	r2, [sp, #16]
 8008b4e:	b9d8      	cbnz	r0, 8008b88 <_vfiprintf_r+0x12c>
 8008b50:	06d1      	lsls	r1, r2, #27
 8008b52:	bf44      	itt	mi
 8008b54:	2320      	movmi	r3, #32
 8008b56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b5a:	0713      	lsls	r3, r2, #28
 8008b5c:	bf44      	itt	mi
 8008b5e:	232b      	movmi	r3, #43	; 0x2b
 8008b60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b64:	f89a 3000 	ldrb.w	r3, [sl]
 8008b68:	2b2a      	cmp	r3, #42	; 0x2a
 8008b6a:	d015      	beq.n	8008b98 <_vfiprintf_r+0x13c>
 8008b6c:	9a07      	ldr	r2, [sp, #28]
 8008b6e:	4654      	mov	r4, sl
 8008b70:	2000      	movs	r0, #0
 8008b72:	f04f 0c0a 	mov.w	ip, #10
 8008b76:	4621      	mov	r1, r4
 8008b78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b7c:	3b30      	subs	r3, #48	; 0x30
 8008b7e:	2b09      	cmp	r3, #9
 8008b80:	d94e      	bls.n	8008c20 <_vfiprintf_r+0x1c4>
 8008b82:	b1b0      	cbz	r0, 8008bb2 <_vfiprintf_r+0x156>
 8008b84:	9207      	str	r2, [sp, #28]
 8008b86:	e014      	b.n	8008bb2 <_vfiprintf_r+0x156>
 8008b88:	eba0 0308 	sub.w	r3, r0, r8
 8008b8c:	fa09 f303 	lsl.w	r3, r9, r3
 8008b90:	4313      	orrs	r3, r2
 8008b92:	9304      	str	r3, [sp, #16]
 8008b94:	46a2      	mov	sl, r4
 8008b96:	e7d2      	b.n	8008b3e <_vfiprintf_r+0xe2>
 8008b98:	9b03      	ldr	r3, [sp, #12]
 8008b9a:	1d19      	adds	r1, r3, #4
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	9103      	str	r1, [sp, #12]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	bfbb      	ittet	lt
 8008ba4:	425b      	neglt	r3, r3
 8008ba6:	f042 0202 	orrlt.w	r2, r2, #2
 8008baa:	9307      	strge	r3, [sp, #28]
 8008bac:	9307      	strlt	r3, [sp, #28]
 8008bae:	bfb8      	it	lt
 8008bb0:	9204      	strlt	r2, [sp, #16]
 8008bb2:	7823      	ldrb	r3, [r4, #0]
 8008bb4:	2b2e      	cmp	r3, #46	; 0x2e
 8008bb6:	d10c      	bne.n	8008bd2 <_vfiprintf_r+0x176>
 8008bb8:	7863      	ldrb	r3, [r4, #1]
 8008bba:	2b2a      	cmp	r3, #42	; 0x2a
 8008bbc:	d135      	bne.n	8008c2a <_vfiprintf_r+0x1ce>
 8008bbe:	9b03      	ldr	r3, [sp, #12]
 8008bc0:	1d1a      	adds	r2, r3, #4
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	9203      	str	r2, [sp, #12]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	bfb8      	it	lt
 8008bca:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bce:	3402      	adds	r4, #2
 8008bd0:	9305      	str	r3, [sp, #20]
 8008bd2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008cb8 <_vfiprintf_r+0x25c>
 8008bd6:	7821      	ldrb	r1, [r4, #0]
 8008bd8:	2203      	movs	r2, #3
 8008bda:	4650      	mov	r0, sl
 8008bdc:	f7f7 fb18 	bl	8000210 <memchr>
 8008be0:	b140      	cbz	r0, 8008bf4 <_vfiprintf_r+0x198>
 8008be2:	2340      	movs	r3, #64	; 0x40
 8008be4:	eba0 000a 	sub.w	r0, r0, sl
 8008be8:	fa03 f000 	lsl.w	r0, r3, r0
 8008bec:	9b04      	ldr	r3, [sp, #16]
 8008bee:	4303      	orrs	r3, r0
 8008bf0:	3401      	adds	r4, #1
 8008bf2:	9304      	str	r3, [sp, #16]
 8008bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bf8:	482c      	ldr	r0, [pc, #176]	; (8008cac <_vfiprintf_r+0x250>)
 8008bfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bfe:	2206      	movs	r2, #6
 8008c00:	f7f7 fb06 	bl	8000210 <memchr>
 8008c04:	2800      	cmp	r0, #0
 8008c06:	d03f      	beq.n	8008c88 <_vfiprintf_r+0x22c>
 8008c08:	4b29      	ldr	r3, [pc, #164]	; (8008cb0 <_vfiprintf_r+0x254>)
 8008c0a:	bb1b      	cbnz	r3, 8008c54 <_vfiprintf_r+0x1f8>
 8008c0c:	9b03      	ldr	r3, [sp, #12]
 8008c0e:	3307      	adds	r3, #7
 8008c10:	f023 0307 	bic.w	r3, r3, #7
 8008c14:	3308      	adds	r3, #8
 8008c16:	9303      	str	r3, [sp, #12]
 8008c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c1a:	443b      	add	r3, r7
 8008c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8008c1e:	e767      	b.n	8008af0 <_vfiprintf_r+0x94>
 8008c20:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c24:	460c      	mov	r4, r1
 8008c26:	2001      	movs	r0, #1
 8008c28:	e7a5      	b.n	8008b76 <_vfiprintf_r+0x11a>
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	3401      	adds	r4, #1
 8008c2e:	9305      	str	r3, [sp, #20]
 8008c30:	4619      	mov	r1, r3
 8008c32:	f04f 0c0a 	mov.w	ip, #10
 8008c36:	4620      	mov	r0, r4
 8008c38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c3c:	3a30      	subs	r2, #48	; 0x30
 8008c3e:	2a09      	cmp	r2, #9
 8008c40:	d903      	bls.n	8008c4a <_vfiprintf_r+0x1ee>
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d0c5      	beq.n	8008bd2 <_vfiprintf_r+0x176>
 8008c46:	9105      	str	r1, [sp, #20]
 8008c48:	e7c3      	b.n	8008bd2 <_vfiprintf_r+0x176>
 8008c4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c4e:	4604      	mov	r4, r0
 8008c50:	2301      	movs	r3, #1
 8008c52:	e7f0      	b.n	8008c36 <_vfiprintf_r+0x1da>
 8008c54:	ab03      	add	r3, sp, #12
 8008c56:	9300      	str	r3, [sp, #0]
 8008c58:	462a      	mov	r2, r5
 8008c5a:	4b16      	ldr	r3, [pc, #88]	; (8008cb4 <_vfiprintf_r+0x258>)
 8008c5c:	a904      	add	r1, sp, #16
 8008c5e:	4630      	mov	r0, r6
 8008c60:	f3af 8000 	nop.w
 8008c64:	4607      	mov	r7, r0
 8008c66:	1c78      	adds	r0, r7, #1
 8008c68:	d1d6      	bne.n	8008c18 <_vfiprintf_r+0x1bc>
 8008c6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c6c:	07d9      	lsls	r1, r3, #31
 8008c6e:	d405      	bmi.n	8008c7c <_vfiprintf_r+0x220>
 8008c70:	89ab      	ldrh	r3, [r5, #12]
 8008c72:	059a      	lsls	r2, r3, #22
 8008c74:	d402      	bmi.n	8008c7c <_vfiprintf_r+0x220>
 8008c76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c78:	f7ff fd7f 	bl	800877a <__retarget_lock_release_recursive>
 8008c7c:	89ab      	ldrh	r3, [r5, #12]
 8008c7e:	065b      	lsls	r3, r3, #25
 8008c80:	f53f af12 	bmi.w	8008aa8 <_vfiprintf_r+0x4c>
 8008c84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c86:	e711      	b.n	8008aac <_vfiprintf_r+0x50>
 8008c88:	ab03      	add	r3, sp, #12
 8008c8a:	9300      	str	r3, [sp, #0]
 8008c8c:	462a      	mov	r2, r5
 8008c8e:	4b09      	ldr	r3, [pc, #36]	; (8008cb4 <_vfiprintf_r+0x258>)
 8008c90:	a904      	add	r1, sp, #16
 8008c92:	4630      	mov	r0, r6
 8008c94:	f000 f880 	bl	8008d98 <_printf_i>
 8008c98:	e7e4      	b.n	8008c64 <_vfiprintf_r+0x208>
 8008c9a:	bf00      	nop
 8008c9c:	080093e4 	.word	0x080093e4
 8008ca0:	08009404 	.word	0x08009404
 8008ca4:	080093c4 	.word	0x080093c4
 8008ca8:	08009424 	.word	0x08009424
 8008cac:	0800942e 	.word	0x0800942e
 8008cb0:	00000000 	.word	0x00000000
 8008cb4:	08008a37 	.word	0x08008a37
 8008cb8:	0800942a 	.word	0x0800942a

08008cbc <_printf_common>:
 8008cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cc0:	4616      	mov	r6, r2
 8008cc2:	4699      	mov	r9, r3
 8008cc4:	688a      	ldr	r2, [r1, #8]
 8008cc6:	690b      	ldr	r3, [r1, #16]
 8008cc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	bfb8      	it	lt
 8008cd0:	4613      	movlt	r3, r2
 8008cd2:	6033      	str	r3, [r6, #0]
 8008cd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008cd8:	4607      	mov	r7, r0
 8008cda:	460c      	mov	r4, r1
 8008cdc:	b10a      	cbz	r2, 8008ce2 <_printf_common+0x26>
 8008cde:	3301      	adds	r3, #1
 8008ce0:	6033      	str	r3, [r6, #0]
 8008ce2:	6823      	ldr	r3, [r4, #0]
 8008ce4:	0699      	lsls	r1, r3, #26
 8008ce6:	bf42      	ittt	mi
 8008ce8:	6833      	ldrmi	r3, [r6, #0]
 8008cea:	3302      	addmi	r3, #2
 8008cec:	6033      	strmi	r3, [r6, #0]
 8008cee:	6825      	ldr	r5, [r4, #0]
 8008cf0:	f015 0506 	ands.w	r5, r5, #6
 8008cf4:	d106      	bne.n	8008d04 <_printf_common+0x48>
 8008cf6:	f104 0a19 	add.w	sl, r4, #25
 8008cfa:	68e3      	ldr	r3, [r4, #12]
 8008cfc:	6832      	ldr	r2, [r6, #0]
 8008cfe:	1a9b      	subs	r3, r3, r2
 8008d00:	42ab      	cmp	r3, r5
 8008d02:	dc26      	bgt.n	8008d52 <_printf_common+0x96>
 8008d04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d08:	1e13      	subs	r3, r2, #0
 8008d0a:	6822      	ldr	r2, [r4, #0]
 8008d0c:	bf18      	it	ne
 8008d0e:	2301      	movne	r3, #1
 8008d10:	0692      	lsls	r2, r2, #26
 8008d12:	d42b      	bmi.n	8008d6c <_printf_common+0xb0>
 8008d14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d18:	4649      	mov	r1, r9
 8008d1a:	4638      	mov	r0, r7
 8008d1c:	47c0      	blx	r8
 8008d1e:	3001      	adds	r0, #1
 8008d20:	d01e      	beq.n	8008d60 <_printf_common+0xa4>
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	68e5      	ldr	r5, [r4, #12]
 8008d26:	6832      	ldr	r2, [r6, #0]
 8008d28:	f003 0306 	and.w	r3, r3, #6
 8008d2c:	2b04      	cmp	r3, #4
 8008d2e:	bf08      	it	eq
 8008d30:	1aad      	subeq	r5, r5, r2
 8008d32:	68a3      	ldr	r3, [r4, #8]
 8008d34:	6922      	ldr	r2, [r4, #16]
 8008d36:	bf0c      	ite	eq
 8008d38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d3c:	2500      	movne	r5, #0
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	bfc4      	itt	gt
 8008d42:	1a9b      	subgt	r3, r3, r2
 8008d44:	18ed      	addgt	r5, r5, r3
 8008d46:	2600      	movs	r6, #0
 8008d48:	341a      	adds	r4, #26
 8008d4a:	42b5      	cmp	r5, r6
 8008d4c:	d11a      	bne.n	8008d84 <_printf_common+0xc8>
 8008d4e:	2000      	movs	r0, #0
 8008d50:	e008      	b.n	8008d64 <_printf_common+0xa8>
 8008d52:	2301      	movs	r3, #1
 8008d54:	4652      	mov	r2, sl
 8008d56:	4649      	mov	r1, r9
 8008d58:	4638      	mov	r0, r7
 8008d5a:	47c0      	blx	r8
 8008d5c:	3001      	adds	r0, #1
 8008d5e:	d103      	bne.n	8008d68 <_printf_common+0xac>
 8008d60:	f04f 30ff 	mov.w	r0, #4294967295
 8008d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d68:	3501      	adds	r5, #1
 8008d6a:	e7c6      	b.n	8008cfa <_printf_common+0x3e>
 8008d6c:	18e1      	adds	r1, r4, r3
 8008d6e:	1c5a      	adds	r2, r3, #1
 8008d70:	2030      	movs	r0, #48	; 0x30
 8008d72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d76:	4422      	add	r2, r4
 8008d78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d80:	3302      	adds	r3, #2
 8008d82:	e7c7      	b.n	8008d14 <_printf_common+0x58>
 8008d84:	2301      	movs	r3, #1
 8008d86:	4622      	mov	r2, r4
 8008d88:	4649      	mov	r1, r9
 8008d8a:	4638      	mov	r0, r7
 8008d8c:	47c0      	blx	r8
 8008d8e:	3001      	adds	r0, #1
 8008d90:	d0e6      	beq.n	8008d60 <_printf_common+0xa4>
 8008d92:	3601      	adds	r6, #1
 8008d94:	e7d9      	b.n	8008d4a <_printf_common+0x8e>
	...

08008d98 <_printf_i>:
 8008d98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d9c:	7e0f      	ldrb	r7, [r1, #24]
 8008d9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008da0:	2f78      	cmp	r7, #120	; 0x78
 8008da2:	4691      	mov	r9, r2
 8008da4:	4680      	mov	r8, r0
 8008da6:	460c      	mov	r4, r1
 8008da8:	469a      	mov	sl, r3
 8008daa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008dae:	d807      	bhi.n	8008dc0 <_printf_i+0x28>
 8008db0:	2f62      	cmp	r7, #98	; 0x62
 8008db2:	d80a      	bhi.n	8008dca <_printf_i+0x32>
 8008db4:	2f00      	cmp	r7, #0
 8008db6:	f000 80d8 	beq.w	8008f6a <_printf_i+0x1d2>
 8008dba:	2f58      	cmp	r7, #88	; 0x58
 8008dbc:	f000 80a3 	beq.w	8008f06 <_printf_i+0x16e>
 8008dc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008dc8:	e03a      	b.n	8008e40 <_printf_i+0xa8>
 8008dca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008dce:	2b15      	cmp	r3, #21
 8008dd0:	d8f6      	bhi.n	8008dc0 <_printf_i+0x28>
 8008dd2:	a101      	add	r1, pc, #4	; (adr r1, 8008dd8 <_printf_i+0x40>)
 8008dd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008dd8:	08008e31 	.word	0x08008e31
 8008ddc:	08008e45 	.word	0x08008e45
 8008de0:	08008dc1 	.word	0x08008dc1
 8008de4:	08008dc1 	.word	0x08008dc1
 8008de8:	08008dc1 	.word	0x08008dc1
 8008dec:	08008dc1 	.word	0x08008dc1
 8008df0:	08008e45 	.word	0x08008e45
 8008df4:	08008dc1 	.word	0x08008dc1
 8008df8:	08008dc1 	.word	0x08008dc1
 8008dfc:	08008dc1 	.word	0x08008dc1
 8008e00:	08008dc1 	.word	0x08008dc1
 8008e04:	08008f51 	.word	0x08008f51
 8008e08:	08008e75 	.word	0x08008e75
 8008e0c:	08008f33 	.word	0x08008f33
 8008e10:	08008dc1 	.word	0x08008dc1
 8008e14:	08008dc1 	.word	0x08008dc1
 8008e18:	08008f73 	.word	0x08008f73
 8008e1c:	08008dc1 	.word	0x08008dc1
 8008e20:	08008e75 	.word	0x08008e75
 8008e24:	08008dc1 	.word	0x08008dc1
 8008e28:	08008dc1 	.word	0x08008dc1
 8008e2c:	08008f3b 	.word	0x08008f3b
 8008e30:	682b      	ldr	r3, [r5, #0]
 8008e32:	1d1a      	adds	r2, r3, #4
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	602a      	str	r2, [r5, #0]
 8008e38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e40:	2301      	movs	r3, #1
 8008e42:	e0a3      	b.n	8008f8c <_printf_i+0x1f4>
 8008e44:	6820      	ldr	r0, [r4, #0]
 8008e46:	6829      	ldr	r1, [r5, #0]
 8008e48:	0606      	lsls	r6, r0, #24
 8008e4a:	f101 0304 	add.w	r3, r1, #4
 8008e4e:	d50a      	bpl.n	8008e66 <_printf_i+0xce>
 8008e50:	680e      	ldr	r6, [r1, #0]
 8008e52:	602b      	str	r3, [r5, #0]
 8008e54:	2e00      	cmp	r6, #0
 8008e56:	da03      	bge.n	8008e60 <_printf_i+0xc8>
 8008e58:	232d      	movs	r3, #45	; 0x2d
 8008e5a:	4276      	negs	r6, r6
 8008e5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e60:	485e      	ldr	r0, [pc, #376]	; (8008fdc <_printf_i+0x244>)
 8008e62:	230a      	movs	r3, #10
 8008e64:	e019      	b.n	8008e9a <_printf_i+0x102>
 8008e66:	680e      	ldr	r6, [r1, #0]
 8008e68:	602b      	str	r3, [r5, #0]
 8008e6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008e6e:	bf18      	it	ne
 8008e70:	b236      	sxthne	r6, r6
 8008e72:	e7ef      	b.n	8008e54 <_printf_i+0xbc>
 8008e74:	682b      	ldr	r3, [r5, #0]
 8008e76:	6820      	ldr	r0, [r4, #0]
 8008e78:	1d19      	adds	r1, r3, #4
 8008e7a:	6029      	str	r1, [r5, #0]
 8008e7c:	0601      	lsls	r1, r0, #24
 8008e7e:	d501      	bpl.n	8008e84 <_printf_i+0xec>
 8008e80:	681e      	ldr	r6, [r3, #0]
 8008e82:	e002      	b.n	8008e8a <_printf_i+0xf2>
 8008e84:	0646      	lsls	r6, r0, #25
 8008e86:	d5fb      	bpl.n	8008e80 <_printf_i+0xe8>
 8008e88:	881e      	ldrh	r6, [r3, #0]
 8008e8a:	4854      	ldr	r0, [pc, #336]	; (8008fdc <_printf_i+0x244>)
 8008e8c:	2f6f      	cmp	r7, #111	; 0x6f
 8008e8e:	bf0c      	ite	eq
 8008e90:	2308      	moveq	r3, #8
 8008e92:	230a      	movne	r3, #10
 8008e94:	2100      	movs	r1, #0
 8008e96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e9a:	6865      	ldr	r5, [r4, #4]
 8008e9c:	60a5      	str	r5, [r4, #8]
 8008e9e:	2d00      	cmp	r5, #0
 8008ea0:	bfa2      	ittt	ge
 8008ea2:	6821      	ldrge	r1, [r4, #0]
 8008ea4:	f021 0104 	bicge.w	r1, r1, #4
 8008ea8:	6021      	strge	r1, [r4, #0]
 8008eaa:	b90e      	cbnz	r6, 8008eb0 <_printf_i+0x118>
 8008eac:	2d00      	cmp	r5, #0
 8008eae:	d04d      	beq.n	8008f4c <_printf_i+0x1b4>
 8008eb0:	4615      	mov	r5, r2
 8008eb2:	fbb6 f1f3 	udiv	r1, r6, r3
 8008eb6:	fb03 6711 	mls	r7, r3, r1, r6
 8008eba:	5dc7      	ldrb	r7, [r0, r7]
 8008ebc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ec0:	4637      	mov	r7, r6
 8008ec2:	42bb      	cmp	r3, r7
 8008ec4:	460e      	mov	r6, r1
 8008ec6:	d9f4      	bls.n	8008eb2 <_printf_i+0x11a>
 8008ec8:	2b08      	cmp	r3, #8
 8008eca:	d10b      	bne.n	8008ee4 <_printf_i+0x14c>
 8008ecc:	6823      	ldr	r3, [r4, #0]
 8008ece:	07de      	lsls	r6, r3, #31
 8008ed0:	d508      	bpl.n	8008ee4 <_printf_i+0x14c>
 8008ed2:	6923      	ldr	r3, [r4, #16]
 8008ed4:	6861      	ldr	r1, [r4, #4]
 8008ed6:	4299      	cmp	r1, r3
 8008ed8:	bfde      	ittt	le
 8008eda:	2330      	movle	r3, #48	; 0x30
 8008edc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ee0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ee4:	1b52      	subs	r2, r2, r5
 8008ee6:	6122      	str	r2, [r4, #16]
 8008ee8:	f8cd a000 	str.w	sl, [sp]
 8008eec:	464b      	mov	r3, r9
 8008eee:	aa03      	add	r2, sp, #12
 8008ef0:	4621      	mov	r1, r4
 8008ef2:	4640      	mov	r0, r8
 8008ef4:	f7ff fee2 	bl	8008cbc <_printf_common>
 8008ef8:	3001      	adds	r0, #1
 8008efa:	d14c      	bne.n	8008f96 <_printf_i+0x1fe>
 8008efc:	f04f 30ff 	mov.w	r0, #4294967295
 8008f00:	b004      	add	sp, #16
 8008f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f06:	4835      	ldr	r0, [pc, #212]	; (8008fdc <_printf_i+0x244>)
 8008f08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008f0c:	6829      	ldr	r1, [r5, #0]
 8008f0e:	6823      	ldr	r3, [r4, #0]
 8008f10:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f14:	6029      	str	r1, [r5, #0]
 8008f16:	061d      	lsls	r5, r3, #24
 8008f18:	d514      	bpl.n	8008f44 <_printf_i+0x1ac>
 8008f1a:	07df      	lsls	r7, r3, #31
 8008f1c:	bf44      	itt	mi
 8008f1e:	f043 0320 	orrmi.w	r3, r3, #32
 8008f22:	6023      	strmi	r3, [r4, #0]
 8008f24:	b91e      	cbnz	r6, 8008f2e <_printf_i+0x196>
 8008f26:	6823      	ldr	r3, [r4, #0]
 8008f28:	f023 0320 	bic.w	r3, r3, #32
 8008f2c:	6023      	str	r3, [r4, #0]
 8008f2e:	2310      	movs	r3, #16
 8008f30:	e7b0      	b.n	8008e94 <_printf_i+0xfc>
 8008f32:	6823      	ldr	r3, [r4, #0]
 8008f34:	f043 0320 	orr.w	r3, r3, #32
 8008f38:	6023      	str	r3, [r4, #0]
 8008f3a:	2378      	movs	r3, #120	; 0x78
 8008f3c:	4828      	ldr	r0, [pc, #160]	; (8008fe0 <_printf_i+0x248>)
 8008f3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f42:	e7e3      	b.n	8008f0c <_printf_i+0x174>
 8008f44:	0659      	lsls	r1, r3, #25
 8008f46:	bf48      	it	mi
 8008f48:	b2b6      	uxthmi	r6, r6
 8008f4a:	e7e6      	b.n	8008f1a <_printf_i+0x182>
 8008f4c:	4615      	mov	r5, r2
 8008f4e:	e7bb      	b.n	8008ec8 <_printf_i+0x130>
 8008f50:	682b      	ldr	r3, [r5, #0]
 8008f52:	6826      	ldr	r6, [r4, #0]
 8008f54:	6961      	ldr	r1, [r4, #20]
 8008f56:	1d18      	adds	r0, r3, #4
 8008f58:	6028      	str	r0, [r5, #0]
 8008f5a:	0635      	lsls	r5, r6, #24
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	d501      	bpl.n	8008f64 <_printf_i+0x1cc>
 8008f60:	6019      	str	r1, [r3, #0]
 8008f62:	e002      	b.n	8008f6a <_printf_i+0x1d2>
 8008f64:	0670      	lsls	r0, r6, #25
 8008f66:	d5fb      	bpl.n	8008f60 <_printf_i+0x1c8>
 8008f68:	8019      	strh	r1, [r3, #0]
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	6123      	str	r3, [r4, #16]
 8008f6e:	4615      	mov	r5, r2
 8008f70:	e7ba      	b.n	8008ee8 <_printf_i+0x150>
 8008f72:	682b      	ldr	r3, [r5, #0]
 8008f74:	1d1a      	adds	r2, r3, #4
 8008f76:	602a      	str	r2, [r5, #0]
 8008f78:	681d      	ldr	r5, [r3, #0]
 8008f7a:	6862      	ldr	r2, [r4, #4]
 8008f7c:	2100      	movs	r1, #0
 8008f7e:	4628      	mov	r0, r5
 8008f80:	f7f7 f946 	bl	8000210 <memchr>
 8008f84:	b108      	cbz	r0, 8008f8a <_printf_i+0x1f2>
 8008f86:	1b40      	subs	r0, r0, r5
 8008f88:	6060      	str	r0, [r4, #4]
 8008f8a:	6863      	ldr	r3, [r4, #4]
 8008f8c:	6123      	str	r3, [r4, #16]
 8008f8e:	2300      	movs	r3, #0
 8008f90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f94:	e7a8      	b.n	8008ee8 <_printf_i+0x150>
 8008f96:	6923      	ldr	r3, [r4, #16]
 8008f98:	462a      	mov	r2, r5
 8008f9a:	4649      	mov	r1, r9
 8008f9c:	4640      	mov	r0, r8
 8008f9e:	47d0      	blx	sl
 8008fa0:	3001      	adds	r0, #1
 8008fa2:	d0ab      	beq.n	8008efc <_printf_i+0x164>
 8008fa4:	6823      	ldr	r3, [r4, #0]
 8008fa6:	079b      	lsls	r3, r3, #30
 8008fa8:	d413      	bmi.n	8008fd2 <_printf_i+0x23a>
 8008faa:	68e0      	ldr	r0, [r4, #12]
 8008fac:	9b03      	ldr	r3, [sp, #12]
 8008fae:	4298      	cmp	r0, r3
 8008fb0:	bfb8      	it	lt
 8008fb2:	4618      	movlt	r0, r3
 8008fb4:	e7a4      	b.n	8008f00 <_printf_i+0x168>
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	4632      	mov	r2, r6
 8008fba:	4649      	mov	r1, r9
 8008fbc:	4640      	mov	r0, r8
 8008fbe:	47d0      	blx	sl
 8008fc0:	3001      	adds	r0, #1
 8008fc2:	d09b      	beq.n	8008efc <_printf_i+0x164>
 8008fc4:	3501      	adds	r5, #1
 8008fc6:	68e3      	ldr	r3, [r4, #12]
 8008fc8:	9903      	ldr	r1, [sp, #12]
 8008fca:	1a5b      	subs	r3, r3, r1
 8008fcc:	42ab      	cmp	r3, r5
 8008fce:	dcf2      	bgt.n	8008fb6 <_printf_i+0x21e>
 8008fd0:	e7eb      	b.n	8008faa <_printf_i+0x212>
 8008fd2:	2500      	movs	r5, #0
 8008fd4:	f104 0619 	add.w	r6, r4, #25
 8008fd8:	e7f5      	b.n	8008fc6 <_printf_i+0x22e>
 8008fda:	bf00      	nop
 8008fdc:	08009435 	.word	0x08009435
 8008fe0:	08009446 	.word	0x08009446

08008fe4 <_sbrk_r>:
 8008fe4:	b538      	push	{r3, r4, r5, lr}
 8008fe6:	4d06      	ldr	r5, [pc, #24]	; (8009000 <_sbrk_r+0x1c>)
 8008fe8:	2300      	movs	r3, #0
 8008fea:	4604      	mov	r4, r0
 8008fec:	4608      	mov	r0, r1
 8008fee:	602b      	str	r3, [r5, #0]
 8008ff0:	f7fa f8e4 	bl	80031bc <_sbrk>
 8008ff4:	1c43      	adds	r3, r0, #1
 8008ff6:	d102      	bne.n	8008ffe <_sbrk_r+0x1a>
 8008ff8:	682b      	ldr	r3, [r5, #0]
 8008ffa:	b103      	cbz	r3, 8008ffe <_sbrk_r+0x1a>
 8008ffc:	6023      	str	r3, [r4, #0]
 8008ffe:	bd38      	pop	{r3, r4, r5, pc}
 8009000:	200006e8 	.word	0x200006e8

08009004 <__sread>:
 8009004:	b510      	push	{r4, lr}
 8009006:	460c      	mov	r4, r1
 8009008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800900c:	f000 f8a0 	bl	8009150 <_read_r>
 8009010:	2800      	cmp	r0, #0
 8009012:	bfab      	itete	ge
 8009014:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009016:	89a3      	ldrhlt	r3, [r4, #12]
 8009018:	181b      	addge	r3, r3, r0
 800901a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800901e:	bfac      	ite	ge
 8009020:	6563      	strge	r3, [r4, #84]	; 0x54
 8009022:	81a3      	strhlt	r3, [r4, #12]
 8009024:	bd10      	pop	{r4, pc}

08009026 <__swrite>:
 8009026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800902a:	461f      	mov	r7, r3
 800902c:	898b      	ldrh	r3, [r1, #12]
 800902e:	05db      	lsls	r3, r3, #23
 8009030:	4605      	mov	r5, r0
 8009032:	460c      	mov	r4, r1
 8009034:	4616      	mov	r6, r2
 8009036:	d505      	bpl.n	8009044 <__swrite+0x1e>
 8009038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800903c:	2302      	movs	r3, #2
 800903e:	2200      	movs	r2, #0
 8009040:	f000 f868 	bl	8009114 <_lseek_r>
 8009044:	89a3      	ldrh	r3, [r4, #12]
 8009046:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800904a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800904e:	81a3      	strh	r3, [r4, #12]
 8009050:	4632      	mov	r2, r6
 8009052:	463b      	mov	r3, r7
 8009054:	4628      	mov	r0, r5
 8009056:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800905a:	f000 b817 	b.w	800908c <_write_r>

0800905e <__sseek>:
 800905e:	b510      	push	{r4, lr}
 8009060:	460c      	mov	r4, r1
 8009062:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009066:	f000 f855 	bl	8009114 <_lseek_r>
 800906a:	1c43      	adds	r3, r0, #1
 800906c:	89a3      	ldrh	r3, [r4, #12]
 800906e:	bf15      	itete	ne
 8009070:	6560      	strne	r0, [r4, #84]	; 0x54
 8009072:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009076:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800907a:	81a3      	strheq	r3, [r4, #12]
 800907c:	bf18      	it	ne
 800907e:	81a3      	strhne	r3, [r4, #12]
 8009080:	bd10      	pop	{r4, pc}

08009082 <__sclose>:
 8009082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009086:	f000 b813 	b.w	80090b0 <_close_r>
	...

0800908c <_write_r>:
 800908c:	b538      	push	{r3, r4, r5, lr}
 800908e:	4d07      	ldr	r5, [pc, #28]	; (80090ac <_write_r+0x20>)
 8009090:	4604      	mov	r4, r0
 8009092:	4608      	mov	r0, r1
 8009094:	4611      	mov	r1, r2
 8009096:	2200      	movs	r2, #0
 8009098:	602a      	str	r2, [r5, #0]
 800909a:	461a      	mov	r2, r3
 800909c:	f7fa f83d 	bl	800311a <_write>
 80090a0:	1c43      	adds	r3, r0, #1
 80090a2:	d102      	bne.n	80090aa <_write_r+0x1e>
 80090a4:	682b      	ldr	r3, [r5, #0]
 80090a6:	b103      	cbz	r3, 80090aa <_write_r+0x1e>
 80090a8:	6023      	str	r3, [r4, #0]
 80090aa:	bd38      	pop	{r3, r4, r5, pc}
 80090ac:	200006e8 	.word	0x200006e8

080090b0 <_close_r>:
 80090b0:	b538      	push	{r3, r4, r5, lr}
 80090b2:	4d06      	ldr	r5, [pc, #24]	; (80090cc <_close_r+0x1c>)
 80090b4:	2300      	movs	r3, #0
 80090b6:	4604      	mov	r4, r0
 80090b8:	4608      	mov	r0, r1
 80090ba:	602b      	str	r3, [r5, #0]
 80090bc:	f7fa f849 	bl	8003152 <_close>
 80090c0:	1c43      	adds	r3, r0, #1
 80090c2:	d102      	bne.n	80090ca <_close_r+0x1a>
 80090c4:	682b      	ldr	r3, [r5, #0]
 80090c6:	b103      	cbz	r3, 80090ca <_close_r+0x1a>
 80090c8:	6023      	str	r3, [r4, #0]
 80090ca:	bd38      	pop	{r3, r4, r5, pc}
 80090cc:	200006e8 	.word	0x200006e8

080090d0 <_fstat_r>:
 80090d0:	b538      	push	{r3, r4, r5, lr}
 80090d2:	4d07      	ldr	r5, [pc, #28]	; (80090f0 <_fstat_r+0x20>)
 80090d4:	2300      	movs	r3, #0
 80090d6:	4604      	mov	r4, r0
 80090d8:	4608      	mov	r0, r1
 80090da:	4611      	mov	r1, r2
 80090dc:	602b      	str	r3, [r5, #0]
 80090de:	f7fa f844 	bl	800316a <_fstat>
 80090e2:	1c43      	adds	r3, r0, #1
 80090e4:	d102      	bne.n	80090ec <_fstat_r+0x1c>
 80090e6:	682b      	ldr	r3, [r5, #0]
 80090e8:	b103      	cbz	r3, 80090ec <_fstat_r+0x1c>
 80090ea:	6023      	str	r3, [r4, #0]
 80090ec:	bd38      	pop	{r3, r4, r5, pc}
 80090ee:	bf00      	nop
 80090f0:	200006e8 	.word	0x200006e8

080090f4 <_isatty_r>:
 80090f4:	b538      	push	{r3, r4, r5, lr}
 80090f6:	4d06      	ldr	r5, [pc, #24]	; (8009110 <_isatty_r+0x1c>)
 80090f8:	2300      	movs	r3, #0
 80090fa:	4604      	mov	r4, r0
 80090fc:	4608      	mov	r0, r1
 80090fe:	602b      	str	r3, [r5, #0]
 8009100:	f7fa f843 	bl	800318a <_isatty>
 8009104:	1c43      	adds	r3, r0, #1
 8009106:	d102      	bne.n	800910e <_isatty_r+0x1a>
 8009108:	682b      	ldr	r3, [r5, #0]
 800910a:	b103      	cbz	r3, 800910e <_isatty_r+0x1a>
 800910c:	6023      	str	r3, [r4, #0]
 800910e:	bd38      	pop	{r3, r4, r5, pc}
 8009110:	200006e8 	.word	0x200006e8

08009114 <_lseek_r>:
 8009114:	b538      	push	{r3, r4, r5, lr}
 8009116:	4d07      	ldr	r5, [pc, #28]	; (8009134 <_lseek_r+0x20>)
 8009118:	4604      	mov	r4, r0
 800911a:	4608      	mov	r0, r1
 800911c:	4611      	mov	r1, r2
 800911e:	2200      	movs	r2, #0
 8009120:	602a      	str	r2, [r5, #0]
 8009122:	461a      	mov	r2, r3
 8009124:	f7fa f83c 	bl	80031a0 <_lseek>
 8009128:	1c43      	adds	r3, r0, #1
 800912a:	d102      	bne.n	8009132 <_lseek_r+0x1e>
 800912c:	682b      	ldr	r3, [r5, #0]
 800912e:	b103      	cbz	r3, 8009132 <_lseek_r+0x1e>
 8009130:	6023      	str	r3, [r4, #0]
 8009132:	bd38      	pop	{r3, r4, r5, pc}
 8009134:	200006e8 	.word	0x200006e8

08009138 <__malloc_lock>:
 8009138:	4801      	ldr	r0, [pc, #4]	; (8009140 <__malloc_lock+0x8>)
 800913a:	f7ff bb1d 	b.w	8008778 <__retarget_lock_acquire_recursive>
 800913e:	bf00      	nop
 8009140:	200006dc 	.word	0x200006dc

08009144 <__malloc_unlock>:
 8009144:	4801      	ldr	r0, [pc, #4]	; (800914c <__malloc_unlock+0x8>)
 8009146:	f7ff bb18 	b.w	800877a <__retarget_lock_release_recursive>
 800914a:	bf00      	nop
 800914c:	200006dc 	.word	0x200006dc

08009150 <_read_r>:
 8009150:	b538      	push	{r3, r4, r5, lr}
 8009152:	4d07      	ldr	r5, [pc, #28]	; (8009170 <_read_r+0x20>)
 8009154:	4604      	mov	r4, r0
 8009156:	4608      	mov	r0, r1
 8009158:	4611      	mov	r1, r2
 800915a:	2200      	movs	r2, #0
 800915c:	602a      	str	r2, [r5, #0]
 800915e:	461a      	mov	r2, r3
 8009160:	f7f9 ffbe 	bl	80030e0 <_read>
 8009164:	1c43      	adds	r3, r0, #1
 8009166:	d102      	bne.n	800916e <_read_r+0x1e>
 8009168:	682b      	ldr	r3, [r5, #0]
 800916a:	b103      	cbz	r3, 800916e <_read_r+0x1e>
 800916c:	6023      	str	r3, [r4, #0]
 800916e:	bd38      	pop	{r3, r4, r5, pc}
 8009170:	200006e8 	.word	0x200006e8

08009174 <_init>:
 8009174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009176:	bf00      	nop
 8009178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800917a:	bc08      	pop	{r3}
 800917c:	469e      	mov	lr, r3
 800917e:	4770      	bx	lr

08009180 <_fini>:
 8009180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009182:	bf00      	nop
 8009184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009186:	bc08      	pop	{r3}
 8009188:	469e      	mov	lr, r3
 800918a:	4770      	bx	lr
