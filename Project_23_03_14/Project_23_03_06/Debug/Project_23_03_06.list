
Project_23_03_06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083f4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080085b8  080085b8  000185b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800869c  0800869c  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  0800869c  0800869c  0001869c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086a4  080086a4  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086a4  080086a4  000186a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086a8  080086a8  000186a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  080086ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ec  2000014c  080087f8  0002014c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000738  080087f8  00020738  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e585  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000215a  00000000  00000000  0002e701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  00030860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af0  00000000  00000000  00031400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022e00  00000000  00000000  00031ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010cbb  00000000  00000000  00054cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccd10  00000000  00000000  000659ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001326bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000365c  00000000  00000000  0013270c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000014c 	.word	0x2000014c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080085a0 	.word	0x080085a0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000150 	.word	0x20000150
 8000200:	080085a0 	.word	0x080085a0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <__io_putchar>:

static uint16_t u16_oldPos = 0;
static uint16_t u16_lenCnt = 0;

/* @brief  Retargets the C library printf function to the USART. */
PUTCHAR_PROTOTYPE {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000510:	1d39      	adds	r1, r7, #4
 8000512:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000516:	2201      	movs	r2, #1
 8000518:	4803      	ldr	r0, [pc, #12]	; (8000528 <__io_putchar+0x20>)
 800051a:	f006 f8dc 	bl	80066d6 <HAL_UART_Transmit>
  return ch;
 800051e:	687b      	ldr	r3, [r7, #4]
}
 8000520:	4618      	mov	r0, r3
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000168 	.word	0x20000168

0800052c <main>:

int32_t temp[30];


int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af02      	add	r7, sp, #8
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000532:	f002 fc51 	bl	8002dd8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000536:	f000 f96b 	bl	8000810 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053a:	f000 fa29 	bl	8000990 <MX_GPIO_Init>
  MX_DMA_Init();
 800053e:	f000 fa07 	bl	8000950 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000542:	f000 f9d3 	bl	80008ec <MX_USART2_UART_Init>

  /*##-1- Configure the I2C peripheral ######################################*/
  I2cHandle.Instance             = I2Cx;
 8000546:	4b8d      	ldr	r3, [pc, #564]	; (800077c <main+0x250>)
 8000548:	4a8d      	ldr	r2, [pc, #564]	; (8000780 <main+0x254>)
 800054a:	601a      	str	r2, [r3, #0]
  I2cHandle.Init.AddressingMode  = I2C_ADDRESSINGMODE_10BIT;
 800054c:	4b8b      	ldr	r3, [pc, #556]	; (800077c <main+0x250>)
 800054e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000552:	611a      	str	r2, [r3, #16]
  I2cHandle.Init.ClockSpeed      = 400000;
 8000554:	4b89      	ldr	r3, [pc, #548]	; (800077c <main+0x250>)
 8000556:	4a8b      	ldr	r2, [pc, #556]	; (8000784 <main+0x258>)
 8000558:	605a      	str	r2, [r3, #4]
  I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800055a:	4b88      	ldr	r3, [pc, #544]	; (800077c <main+0x250>)
 800055c:	2200      	movs	r2, #0
 800055e:	615a      	str	r2, [r3, #20]
  I2cHandle.Init.DutyCycle       = I2C_DUTYCYCLE_16_9;
 8000560:	4b86      	ldr	r3, [pc, #536]	; (800077c <main+0x250>)
 8000562:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000566:	609a      	str	r2, [r3, #8]
  I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000568:	4b84      	ldr	r3, [pc, #528]	; (800077c <main+0x250>)
 800056a:	2200      	movs	r2, #0
 800056c:	61da      	str	r2, [r3, #28]
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 800056e:	4b83      	ldr	r3, [pc, #524]	; (800077c <main+0x250>)
 8000570:	2200      	movs	r2, #0
 8000572:	621a      	str	r2, [r3, #32]
  I2cHandle.Init.OwnAddress1     = I2C_ADDRESS;
 8000574:	4b81      	ldr	r3, [pc, #516]	; (800077c <main+0x250>)
 8000576:	f240 320f 	movw	r2, #783	; 0x30f
 800057a:	60da      	str	r2, [r3, #12]
  I2cHandle.Init.OwnAddress2     = 0xFE;
 800057c:	4b7f      	ldr	r3, [pc, #508]	; (800077c <main+0x250>)
 800057e:	22fe      	movs	r2, #254	; 0xfe
 8000580:	619a      	str	r2, [r3, #24]

  if(HAL_I2C_Init(&I2cHandle) != HAL_OK){ Error_Handler(); }
 8000582:	487e      	ldr	r0, [pc, #504]	; (800077c <main+0x250>)
 8000584:	f003 fba8 	bl	8003cd8 <HAL_I2C_Init>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <main+0x66>
 800058e:	f000 fd37 	bl	8001000 <Error_Handler>

  serial_init();
 8000592:	f000 fd49 	bl	8001028 <serial_init>

  /****************** MAIN **********************/
  while (1)
  {
	  /*Perintah untuk kirim data ke UART*/
  	  if (bitFlag & BFLAG_UART_RCV) {
 8000596:	4b7c      	ldr	r3, [pc, #496]	; (8000788 <main+0x25c>)
 8000598:	881b      	ldrh	r3, [r3, #0]
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d017      	beq.n	80005d2 <main+0xa6>
  		  uartProcessing (u8arr_uartEvent, u16_lenCnt - 2); // remove \r & \n
 80005a2:	4b7a      	ldr	r3, [pc, #488]	; (800078c <main+0x260>)
 80005a4:	881b      	ldrh	r3, [r3, #0]
 80005a6:	3b02      	subs	r3, #2
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	4619      	mov	r1, r3
 80005ac:	4878      	ldr	r0, [pc, #480]	; (8000790 <main+0x264>)
 80005ae:	f000 fc7d 	bl	8000eac <uartProcessing>
  		  memset(u8arr_uartEvent, 0, UART_BUF_SZ);
 80005b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005b6:	2100      	movs	r1, #0
 80005b8:	4875      	ldr	r0, [pc, #468]	; (8000790 <main+0x264>)
 80005ba:	f007 faeb 	bl	8007b94 <memset>
  		  u16_lenCnt = 0;
 80005be:	4b73      	ldr	r3, [pc, #460]	; (800078c <main+0x260>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	801a      	strh	r2, [r3, #0]

  		  bitFlag 	&= ~BFLAG_UART_RCV;
 80005c4:	4b70      	ldr	r3, [pc, #448]	; (8000788 <main+0x25c>)
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	f023 0301 	bic.w	r3, r3, #1
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	4b6e      	ldr	r3, [pc, #440]	; (8000788 <main+0x25c>)
 80005d0:	801a      	strh	r2, [r3, #0]
			 bitFlag 	&= ~BFLAG_I2C_RDB;
		 #endif
	 }

  	  /* Command to WRITE or sending I2C */
  	  if ((bitFlag & BFLAG_I2C_WRS) || (bitFlag & BFLAG_I2C_WRA)) {
 80005d2:	4b6d      	ldr	r3, [pc, #436]	; (8000788 <main+0x25c>)
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	f003 0320 	and.w	r3, r3, #32
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d1db      	bne.n	8000596 <main+0x6a>
 80005de:	4b6a      	ldr	r3, [pc, #424]	; (8000788 <main+0x25c>)
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	f003 0310 	and.w	r3, r3, #16
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d1d5      	bne.n	8000596 <main+0x6a>
  	 }

  	 else
  	 {
		#ifndef MASTER_BOARD			// Slave Only
  		 	 if(HAL_I2C_Slave_Receive_IT(&I2cHandle, (uint8_t *)aRxBuffer, RXBUFFERSIZE) != HAL_OK)
 80005ea:	2264      	movs	r2, #100	; 0x64
 80005ec:	4969      	ldr	r1, [pc, #420]	; (8000794 <main+0x268>)
 80005ee:	4863      	ldr	r0, [pc, #396]	; (800077c <main+0x250>)
 80005f0:	f003 fd26 	bl	8004040 <HAL_I2C_Slave_Receive_IT>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <main+0xd2>
  		 	 {Error_Handler();}
 80005fa:	f000 fd01 	bl	8001000 <Error_Handler>

  		 	 /*##-3- Wait for the end of the transfer ###################################*/
  		 	 while (HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY)
 80005fe:	bf00      	nop
 8000600:	485e      	ldr	r0, [pc, #376]	; (800077c <main+0x250>)
 8000602:	f003 ffeb 	bl	80045dc <HAL_I2C_GetState>
 8000606:	4603      	mov	r3, r0
 8000608:	2b20      	cmp	r3, #32
 800060a:	d1f9      	bne.n	8000600 <main+0xd4>
  		 	 {}

  		 	 if((aRxBuffer[0]==1)||(aRxBuffer[0]==7))		// WR1
 800060c:	4b61      	ldr	r3, [pc, #388]	; (8000794 <main+0x268>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d003      	beq.n	800061c <main+0xf0>
 8000614:	4b5f      	ldr	r3, [pc, #380]	; (8000794 <main+0x268>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b07      	cmp	r3, #7
 800061a:	d11f      	bne.n	800065c <main+0x130>
  		 	 {
  		 		 copyValue(res1, aRxBuffer, 0, 1, 10);
 800061c:	230a      	movs	r3, #10
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	2301      	movs	r3, #1
 8000622:	2200      	movs	r2, #0
 8000624:	495b      	ldr	r1, [pc, #364]	; (8000794 <main+0x268>)
 8000626:	485c      	ldr	r0, [pc, #368]	; (8000798 <main+0x26c>)
 8000628:	f000 fa6e 	bl	8000b08 <copyValue>
				 copyValue(aTxBuffer, res1, 1, 0, 10);
 800062c:	230a      	movs	r3, #10
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2300      	movs	r3, #0
 8000632:	2201      	movs	r2, #1
 8000634:	4958      	ldr	r1, [pc, #352]	; (8000798 <main+0x26c>)
 8000636:	4859      	ldr	r0, [pc, #356]	; (800079c <main+0x270>)
 8000638:	f000 fa66 	bl	8000b08 <copyValue>
				 if(aRxBuffer[0]==1){aTxBuffer[0] = 1;}
 800063c:	4b55      	ldr	r3, [pc, #340]	; (8000794 <main+0x268>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d102      	bne.n	800064a <main+0x11e>
 8000644:	4b55      	ldr	r3, [pc, #340]	; (800079c <main+0x270>)
 8000646:	2201      	movs	r2, #1
 8000648:	601a      	str	r2, [r3, #0]
				 if(aRxBuffer[0]==7){aTxBuffer[0] = 7;}
 800064a:	4b52      	ldr	r3, [pc, #328]	; (8000794 <main+0x268>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b07      	cmp	r3, #7
 8000650:	f040 8081 	bne.w	8000756 <main+0x22a>
 8000654:	4b51      	ldr	r3, [pc, #324]	; (800079c <main+0x270>)
 8000656:	2207      	movs	r2, #7
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	e07c      	b.n	8000756 <main+0x22a>
  		 	 }
  		 	 else if((aRxBuffer[0]==2)||(aRxBuffer[0]==8))	// WR2
 800065c:	4b4d      	ldr	r3, [pc, #308]	; (8000794 <main+0x268>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b02      	cmp	r3, #2
 8000662:	d003      	beq.n	800066c <main+0x140>
 8000664:	4b4b      	ldr	r3, [pc, #300]	; (8000794 <main+0x268>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b08      	cmp	r3, #8
 800066a:	d11e      	bne.n	80006aa <main+0x17e>
			 {
  		 		 copyValue(res2, aRxBuffer, 0, 1, 10);
 800066c:	230a      	movs	r3, #10
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	2301      	movs	r3, #1
 8000672:	2200      	movs	r2, #0
 8000674:	4947      	ldr	r1, [pc, #284]	; (8000794 <main+0x268>)
 8000676:	484a      	ldr	r0, [pc, #296]	; (80007a0 <main+0x274>)
 8000678:	f000 fa46 	bl	8000b08 <copyValue>
				 copyValue(aTxBuffer, res2, 1, 0, 10);
 800067c:	230a      	movs	r3, #10
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	2300      	movs	r3, #0
 8000682:	2201      	movs	r2, #1
 8000684:	4946      	ldr	r1, [pc, #280]	; (80007a0 <main+0x274>)
 8000686:	4845      	ldr	r0, [pc, #276]	; (800079c <main+0x270>)
 8000688:	f000 fa3e 	bl	8000b08 <copyValue>
				 if(aRxBuffer[0]==2){aTxBuffer[0] = 2;}
 800068c:	4b41      	ldr	r3, [pc, #260]	; (8000794 <main+0x268>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b02      	cmp	r3, #2
 8000692:	d102      	bne.n	800069a <main+0x16e>
 8000694:	4b41      	ldr	r3, [pc, #260]	; (800079c <main+0x270>)
 8000696:	2202      	movs	r2, #2
 8000698:	601a      	str	r2, [r3, #0]
				 if(aRxBuffer[0]==8){aTxBuffer[0] = 8;}
 800069a:	4b3e      	ldr	r3, [pc, #248]	; (8000794 <main+0x268>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b08      	cmp	r3, #8
 80006a0:	d159      	bne.n	8000756 <main+0x22a>
 80006a2:	4b3e      	ldr	r3, [pc, #248]	; (800079c <main+0x270>)
 80006a4:	2208      	movs	r2, #8
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	e055      	b.n	8000756 <main+0x22a>
			 }
  		 	 else if((aRxBuffer[0]==3)||(aRxBuffer[0]==9))	// WR3
 80006aa:	4b3a      	ldr	r3, [pc, #232]	; (8000794 <main+0x268>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	d003      	beq.n	80006ba <main+0x18e>
 80006b2:	4b38      	ldr	r3, [pc, #224]	; (8000794 <main+0x268>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2b09      	cmp	r3, #9
 80006b8:	d11e      	bne.n	80006f8 <main+0x1cc>
			 {
  		 		 copyValue(res3, aRxBuffer, 0, 1, 10);
 80006ba:	230a      	movs	r3, #10
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	2301      	movs	r3, #1
 80006c0:	2200      	movs	r2, #0
 80006c2:	4934      	ldr	r1, [pc, #208]	; (8000794 <main+0x268>)
 80006c4:	4837      	ldr	r0, [pc, #220]	; (80007a4 <main+0x278>)
 80006c6:	f000 fa1f 	bl	8000b08 <copyValue>
				 copyValue(aTxBuffer, res3, 1, 0, 10);
 80006ca:	230a      	movs	r3, #10
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	2300      	movs	r3, #0
 80006d0:	2201      	movs	r2, #1
 80006d2:	4934      	ldr	r1, [pc, #208]	; (80007a4 <main+0x278>)
 80006d4:	4831      	ldr	r0, [pc, #196]	; (800079c <main+0x270>)
 80006d6:	f000 fa17 	bl	8000b08 <copyValue>
				 if(aRxBuffer[0]==3){aTxBuffer[0] = 3;}
 80006da:	4b2e      	ldr	r3, [pc, #184]	; (8000794 <main+0x268>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2b03      	cmp	r3, #3
 80006e0:	d102      	bne.n	80006e8 <main+0x1bc>
 80006e2:	4b2e      	ldr	r3, [pc, #184]	; (800079c <main+0x270>)
 80006e4:	2203      	movs	r2, #3
 80006e6:	601a      	str	r2, [r3, #0]
				 if(aRxBuffer[0]==9){aTxBuffer[0] = 9;}
 80006e8:	4b2a      	ldr	r3, [pc, #168]	; (8000794 <main+0x268>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b09      	cmp	r3, #9
 80006ee:	d132      	bne.n	8000756 <main+0x22a>
 80006f0:	4b2a      	ldr	r3, [pc, #168]	; (800079c <main+0x270>)
 80006f2:	2209      	movs	r2, #9
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	e02e      	b.n	8000756 <main+0x22a>
			 }
  		 	 else if(aRxBuffer[0]==4)			// RD1
 80006f8:	4b26      	ldr	r3, [pc, #152]	; (8000794 <main+0x268>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b04      	cmp	r3, #4
 80006fe:	d10b      	bne.n	8000718 <main+0x1ec>
			 {
  		 		 copyValue(aTxBuffer, res1, 1, 0, 10);
 8000700:	230a      	movs	r3, #10
 8000702:	9300      	str	r3, [sp, #0]
 8000704:	2300      	movs	r3, #0
 8000706:	2201      	movs	r2, #1
 8000708:	4923      	ldr	r1, [pc, #140]	; (8000798 <main+0x26c>)
 800070a:	4824      	ldr	r0, [pc, #144]	; (800079c <main+0x270>)
 800070c:	f000 f9fc 	bl	8000b08 <copyValue>
  		 		 aTxBuffer[0] = 4;
 8000710:	4b22      	ldr	r3, [pc, #136]	; (800079c <main+0x270>)
 8000712:	2204      	movs	r2, #4
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	e01e      	b.n	8000756 <main+0x22a>
			 }
  		 	 else if(aRxBuffer[0]==5)			// RD2
 8000718:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <main+0x268>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b05      	cmp	r3, #5
 800071e:	d10b      	bne.n	8000738 <main+0x20c>
			 {
  		 		 copyValue(aTxBuffer, res2, 1, 0, 10);
 8000720:	230a      	movs	r3, #10
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	2300      	movs	r3, #0
 8000726:	2201      	movs	r2, #1
 8000728:	491d      	ldr	r1, [pc, #116]	; (80007a0 <main+0x274>)
 800072a:	481c      	ldr	r0, [pc, #112]	; (800079c <main+0x270>)
 800072c:	f000 f9ec 	bl	8000b08 <copyValue>
  		 		 aTxBuffer[0] = 5;
 8000730:	4b1a      	ldr	r3, [pc, #104]	; (800079c <main+0x270>)
 8000732:	2205      	movs	r2, #5
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	e00e      	b.n	8000756 <main+0x22a>
			 }
  		 	 else if(aRxBuffer[0]==6)			// RD3
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <main+0x268>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2b06      	cmp	r3, #6
 800073e:	d10a      	bne.n	8000756 <main+0x22a>
			 {
  		 		 copyValue(aTxBuffer, res3, 1, 0, 10);
 8000740:	230a      	movs	r3, #10
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	2300      	movs	r3, #0
 8000746:	2201      	movs	r2, #1
 8000748:	4916      	ldr	r1, [pc, #88]	; (80007a4 <main+0x278>)
 800074a:	4814      	ldr	r0, [pc, #80]	; (800079c <main+0x270>)
 800074c:	f000 f9dc 	bl	8000b08 <copyValue>
  		 		 aTxBuffer[0] = 6;
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <main+0x270>)
 8000752:	2206      	movs	r2, #6
 8000754:	601a      	str	r2, [r3, #0]
			 }

  		 	 /*##-4- Kirim data ke Master #####################################*/
  		 	 if(HAL_I2C_Slave_Transmit_IT(&I2cHandle, (uint8_t*)aTxBuffer, TXBUFFERSIZE)!= HAL_OK)
 8000756:	2264      	movs	r2, #100	; 0x64
 8000758:	4910      	ldr	r1, [pc, #64]	; (800079c <main+0x270>)
 800075a:	4808      	ldr	r0, [pc, #32]	; (800077c <main+0x250>)
 800075c:	f003 fc00 	bl	8003f60 <HAL_I2C_Slave_Transmit_IT>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <main+0x23e>
  		 	 {Error_Handler();}
 8000766:	f000 fc4b 	bl	8001000 <Error_Handler>

  		 	 /*##-5- Menunggu akhir transfer ###################################*/
  		 	 while (HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY)
 800076a:	bf00      	nop
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <main+0x250>)
 800076e:	f003 ff35 	bl	80045dc <HAL_I2C_GetState>
 8000772:	4603      	mov	r3, r0
 8000774:	2b20      	cmp	r3, #32
 8000776:	d1f9      	bne.n	800076c <main+0x240>
  	  if (bitFlag & BFLAG_UART_RCV) {
 8000778:	e70d      	b.n	8000596 <main+0x6a>
 800077a:	bf00      	nop
 800077c:	2000020c 	.word	0x2000020c
 8000780:	40005400 	.word	0x40005400
 8000784:	00061a80 	.word	0x00061a80
 8000788:	20000464 	.word	0x20000464
 800078c:	20000462 	.word	0x20000462
 8000790:	20000360 	.word	0x20000360
 8000794:	20000468 	.word	0x20000468
 8000798:	20000064 	.word	0x20000064
 800079c:	20000038 	.word	0x20000038
 80007a0:	2000008c 	.word	0x2000008c
 80007a4:	200000b4 	.word	0x200000b4

080007a8 <HAL_I2C_SlaveTxCpltCallback>:
#ifdef MASTER_BOARD
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2cHandle){
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
}
#else
void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	2120      	movs	r1, #32
 80007b4:	4803      	ldr	r0, [pc, #12]	; (80007c4 <HAL_I2C_SlaveTxCpltCallback+0x1c>)
 80007b6:	f003 fa5b 	bl	8003c70 <HAL_GPIO_WritePin>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40020000 	.word	0x40020000

080007c8 <HAL_I2C_SlaveRxCpltCallback>:
#ifdef MASTER_BOARD
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *I2cHandle) {
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
}
#else
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	2120      	movs	r1, #32
 80007d4:	4803      	ldr	r0, [pc, #12]	; (80007e4 <HAL_I2C_SlaveRxCpltCallback+0x1c>)
 80007d6:	f003 fa4b 	bl	8003c70 <HAL_GPIO_WritePin>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40020000 	.word	0x40020000

080007e8 <HAL_I2C_ErrorCallback>:



/* @brief  I2C error callbacks
   @param  I2cHandle: I2C handle */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	printf("\r\nI2C ERROR \r\n\n");
 80007f0:	4805      	ldr	r0, [pc, #20]	; (8000808 <HAL_I2C_ErrorCallback+0x20>)
 80007f2:	f007 fa45 	bl	8007c80 <puts>
	while(1) {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007f6:	2120      	movs	r1, #32
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <HAL_I2C_ErrorCallback+0x24>)
 80007fa:	f003 fa52 	bl	8003ca2 <HAL_GPIO_TogglePin>
		HAL_Delay(20);
 80007fe:	2014      	movs	r0, #20
 8000800:	f002 fb5c 	bl	8002ebc <HAL_Delay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000804:	e7f7      	b.n	80007f6 <HAL_I2C_ErrorCallback+0xe>
 8000806:	bf00      	nop
 8000808:	080085b8 	.word	0x080085b8
 800080c:	40020000 	.word	0x40020000

08000810 <SystemClock_Config>:
	printf("Buffer same!!!\r\n");
	return 0;
}

/* @brief System Clock Configuration */
void SystemClock_Config(void) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b094      	sub	sp, #80	; 0x50
 8000814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	2234      	movs	r2, #52	; 0x34
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f007 f9b8 	bl	8007b94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000824:	f107 0308 	add.w	r3, r7, #8
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000834:	2300      	movs	r3, #0
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	4b2a      	ldr	r3, [pc, #168]	; (80008e4 <SystemClock_Config+0xd4>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083c:	4a29      	ldr	r2, [pc, #164]	; (80008e4 <SystemClock_Config+0xd4>)
 800083e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000842:	6413      	str	r3, [r2, #64]	; 0x40
 8000844:	4b27      	ldr	r3, [pc, #156]	; (80008e4 <SystemClock_Config+0xd4>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000850:	2300      	movs	r3, #0
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	4b24      	ldr	r3, [pc, #144]	; (80008e8 <SystemClock_Config+0xd8>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800085c:	4a22      	ldr	r2, [pc, #136]	; (80008e8 <SystemClock_Config+0xd8>)
 800085e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000862:	6013      	str	r3, [r2, #0]
 8000864:	4b20      	ldr	r3, [pc, #128]	; (80008e8 <SystemClock_Config+0xd8>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.*/
  RCC_OscInitStruct.OscillatorType 		= RCC_OSCILLATORTYPE_HSI;
 8000870:	2302      	movs	r3, #2
 8000872:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState 			= RCC_HSI_ON;
 8000874:	2301      	movs	r3, #1
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000878:	2310      	movs	r3, #16
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState 		= RCC_PLL_ON;
 800087c:	2302      	movs	r3, #2
 800087e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource 		= RCC_PLLSOURCE_HSI;
 8000880:	2300      	movs	r3, #0
 8000882:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM 			= 16;
 8000884:	2310      	movs	r3, #16
 8000886:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN 			= 336;
 8000888:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800088c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP 			= RCC_PLLP_DIV4;
 800088e:	2304      	movs	r3, #4
 8000890:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ 			= 2;
 8000892:	2302      	movs	r3, #2
 8000894:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR 			= 2;
 8000896:	2302      	movs	r3, #2
 8000898:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4618      	mov	r0, r3
 80008a0:	f005 fc2e 	bl	8006100 <HAL_RCC_OscConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008aa:	f000 fba9 	bl	8001000 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ae:	230f      	movs	r3, #15
 80008b0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b2:	2302      	movs	r3, #2
 80008b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK){
 80008c4:	f107 0308 	add.w	r3, r7, #8
 80008c8:	2105      	movs	r1, #5
 80008ca:	4618      	mov	r0, r3
 80008cc:	f005 f8ce 	bl	8005a6c <HAL_RCC_ClockConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0xca>
    Error_Handler();
 80008d6:	f000 fb93 	bl	8001000 <Error_Handler>
  }
}
 80008da:	bf00      	nop
 80008dc:	3750      	adds	r7, #80	; 0x50
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40007000 	.word	0x40007000

080008ec <MX_USART2_UART_Init>:

/* @brief USART2 Initialization Function*/
static void MX_USART2_UART_Init(void) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  huart2.Instance 			= USART2;
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_USART2_UART_Init+0x58>)
 80008f2:	4a15      	ldr	r2, [pc, #84]	; (8000948 <MX_USART2_UART_Init+0x5c>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate 		= 115200;
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <MX_USART2_UART_Init+0x58>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength 	= UART_WORDLENGTH_8B;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_USART2_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits 		= UART_STOPBITS_1;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_USART2_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity 		= UART_PARITY_NONE;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_USART2_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode 			= UART_MODE_TX_RX;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_USART2_UART_Init+0x58>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl 	= UART_HWCONTROL_NONE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_USART2_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling 	= UART_OVERSAMPLING_16;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_USART2_UART_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart2) != HAL_OK){
 8000922:	4808      	ldr	r0, [pc, #32]	; (8000944 <MX_USART2_UART_Init+0x58>)
 8000924:	f005 fe8a 	bl	800663c <HAL_UART_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_USART2_UART_Init+0x46>
    Error_Handler();
 800092e:	f000 fb67 	bl	8001000 <Error_Handler>
  }

  #ifdef RX_EVENT_CB
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, u8arr_eventBuff, UART_BUF_SZ);
 8000932:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000936:	4905      	ldr	r1, [pc, #20]	; (800094c <MX_USART2_UART_Init+0x60>)
 8000938:	4802      	ldr	r0, [pc, #8]	; (8000944 <MX_USART2_UART_Init+0x58>)
 800093a:	f005 ff8e 	bl	800685a <HAL_UARTEx_ReceiveToIdle_DMA>
  #else
	serial_init();
  #endif
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000168 	.word	0x20000168
 8000948:	40004400 	.word	0x40004400
 800094c:	20000260 	.word	0x20000260

08000950 <MX_DMA_Init>:


static void MX_DMA_Init(void) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_DMA_Init+0x3c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a0b      	ldr	r2, [pc, #44]	; (800098c <MX_DMA_Init+0x3c>)
 8000960:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_DMA_Init+0x3c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2100      	movs	r1, #0
 8000976:	2010      	movs	r0, #16
 8000978:	f002 fb9f 	bl	80030ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800097c:	2010      	movs	r0, #16
 800097e:	f002 fbb8 	bl	80030f2 <HAL_NVIC_EnableIRQ>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800

08000990 <MX_GPIO_Init>:

/* @brief GPIO Initialization Function*/
static void MX_GPIO_Init(void) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <MX_GPIO_Init+0xd0>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a2c      	ldr	r2, [pc, #176]	; (8000a60 <MX_GPIO_Init+0xd0>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b2a      	ldr	r3, [pc, #168]	; (8000a60 <MX_GPIO_Init+0xd0>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	4b26      	ldr	r3, [pc, #152]	; (8000a60 <MX_GPIO_Init+0xd0>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a25      	ldr	r2, [pc, #148]	; (8000a60 <MX_GPIO_Init+0xd0>)
 80009cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b23      	ldr	r3, [pc, #140]	; (8000a60 <MX_GPIO_Init+0xd0>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <MX_GPIO_Init+0xd0>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a1e      	ldr	r2, [pc, #120]	; (8000a60 <MX_GPIO_Init+0xd0>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <MX_GPIO_Init+0xd0>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <MX_GPIO_Init+0xd0>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a17      	ldr	r2, [pc, #92]	; (8000a60 <MX_GPIO_Init+0xd0>)
 8000a04:	f043 0302 	orr.w	r3, r3, #2
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <MX_GPIO_Init+0xd0>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2120      	movs	r1, #32
 8000a1a:	4812      	ldr	r0, [pc, #72]	; (8000a64 <MX_GPIO_Init+0xd4>)
 8000a1c:	f003 f928 	bl	8003c70 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin 		= B1_Pin;
 8000a20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 8000a26:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	480c      	ldr	r0, [pc, #48]	; (8000a68 <MX_GPIO_Init+0xd8>)
 8000a38:	f002 ff86 	bl	8003948 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin 		= LD2_Pin;
 8000a3c:	2320      	movs	r3, #32
 8000a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode 		= GPIO_MODE_OUTPUT_PP;
 8000a40:	2301      	movs	r3, #1
 8000a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed 	= GPIO_SPEED_FREQ_LOW;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4619      	mov	r1, r3
 8000a52:	4804      	ldr	r0, [pc, #16]	; (8000a64 <MX_GPIO_Init+0xd4>)
 8000a54:	f002 ff78 	bl	8003948 <HAL_GPIO_Init>
}
 8000a58:	bf00      	nop
 8000a5a:	3728      	adds	r7, #40	; 0x28
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020000 	.word	0x40020000
 8000a68:	40020800 	.word	0x40020800

08000a6c <tinysh_dec>:

/*********************************************************************
 * @name	: tinysh_dec
 * @brief	: string to decimal conversion (up to 15 chars).
 *********************************************************************/
long tinysh_dec(char *s) {
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  unsigned long res=0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
  uint8_t index = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	72fb      	strb	r3, [r7, #11]
  int8_t min	= 1;			//Penanda masukan - atau +
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	72bb      	strb	r3, [r7, #10]

  while(*s) {
 8000a80:	e031      	b.n	8000ae6 <tinysh_dec+0x7a>
	  res*=10;					//berfungsi menjadikan result kelipatan pangkat 10 (menjadikan puluhan)
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	4613      	mov	r3, r2
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	4413      	add	r3, r2
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	60fb      	str	r3, [r7, #12]

	  if((*s == '-')&&(index == 0))			// jika inputan negatif
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b2d      	cmp	r3, #45	; 0x2d
 8000a94:	d105      	bne.n	8000aa2 <tinysh_dec+0x36>
 8000a96:	7afb      	ldrb	r3, [r7, #11]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d102      	bne.n	8000aa2 <tinysh_dec+0x36>
		  min = -1;
 8000a9c:	23ff      	movs	r3, #255	; 0xff
 8000a9e:	72bb      	strb	r3, [r7, #10]
 8000aa0:	e018      	b.n	8000ad4 <tinysh_dec+0x68>
	  else if((*s == '0')&&(index == 0))	// jika inputan 0
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b30      	cmp	r3, #48	; 0x30
 8000aa8:	d105      	bne.n	8000ab6 <tinysh_dec+0x4a>
 8000aaa:	7afb      	ldrb	r3, [r7, #11]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d102      	bne.n	8000ab6 <tinysh_dec+0x4a>
		  res = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	e00e      	b.n	8000ad4 <tinysh_dec+0x68>
	  else if(*s>='0' && *s<='9')			// jika inputan normal
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b2f      	cmp	r3, #47	; 0x2f
 8000abc:	d919      	bls.n	8000af2 <tinysh_dec+0x86>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b39      	cmp	r3, #57	; 0x39
 8000ac4:	d815      	bhi.n	8000af2 <tinysh_dec+0x86>
		  res+=*s-'0';			//bagian ini berfungsi mengurangi ascii inputna dengan ascii 0 sehingga didapat nilai integer sesungguhnya
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	461a      	mov	r2, r3
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	4413      	add	r3, r2
 8000ad0:	3b30      	subs	r3, #48	; 0x30
 8000ad2:	60fb      	str	r3, [r7, #12]
	  else
		  break;

	  s++;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	607b      	str	r3, [r7, #4]
	  index++;
 8000ada:	7afb      	ldrb	r3, [r7, #11]
 8000adc:	3301      	adds	r3, #1
 8000ade:	72fb      	strb	r3, [r7, #11]

	  if(index > 15)
 8000ae0:	7afb      	ldrb	r3, [r7, #11]
 8000ae2:	2b0f      	cmp	r3, #15
 8000ae4:	d804      	bhi.n	8000af0 <tinysh_dec+0x84>
  while(*s) {
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d1c9      	bne.n	8000a82 <tinysh_dec+0x16>
 8000aee:	e000      	b.n	8000af2 <tinysh_dec+0x86>
	  {
		 break;
 8000af0:	bf00      	nop
	  }
  }

  return (res * min);
 8000af2:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	fb02 f303 	mul.w	r3, r2, r3
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <copyValue>:
/* @name	: copyValue
 * @brief 	: Copy Array
 * @target	: array of target to place the value
 * @source	: array with data witch copied
 * @start_target, @start_source, @length*/
void copyValue(int32_t target[], int32_t source[], uint8_t start_target, uint8_t start_source, uint8_t length){
 8000b08:	b480      	push	{r7}
 8000b0a:	b087      	sub	sp, #28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	4611      	mov	r1, r2
 8000b14:	461a      	mov	r2, r3
 8000b16:	460b      	mov	r3, r1
 8000b18:	71fb      	strb	r3, [r7, #7]
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < length; i++){
 8000b1e:	2300      	movs	r3, #0
 8000b20:	75fb      	strb	r3, [r7, #23]
 8000b22:	e010      	b.n	8000b46 <copyValue+0x3e>
		target[i+start_target] = source[i+start_source];
 8000b24:	7dfa      	ldrb	r2, [r7, #23]
 8000b26:	79bb      	ldrb	r3, [r7, #6]
 8000b28:	4413      	add	r3, r2
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	68ba      	ldr	r2, [r7, #8]
 8000b2e:	441a      	add	r2, r3
 8000b30:	7df9      	ldrb	r1, [r7, #23]
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	440b      	add	r3, r1
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	68f9      	ldr	r1, [r7, #12]
 8000b3a:	440b      	add	r3, r1
 8000b3c:	6812      	ldr	r2, [r2, #0]
 8000b3e:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < length; i++){
 8000b40:	7dfb      	ldrb	r3, [r7, #23]
 8000b42:	3301      	adds	r3, #1
 8000b44:	75fb      	strb	r3, [r7, #23]
 8000b46:	7dfa      	ldrb	r2, [r7, #23]
 8000b48:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d3e9      	bcc.n	8000b24 <copyValue+0x1c>
	}
}
 8000b50:	bf00      	nop
 8000b52:	bf00      	nop
 8000b54:	371c      	adds	r7, #28
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
	...

08000b60 <vShell_cmdParse>:

/********************************************************
 * 	Parsing incoming message						   	*
 ********************************************************/
static void vShell_cmdParse(char *input) {
 8000b60:	b590      	push	{r4, r7, lr}
 8000b62:	b08d      	sub	sp, #52	; 0x34
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	for(uint8_t u8_idx = 0; u8_idx < CFG_HEADER_NUM; u8_idx++) {
 8000b68:	2300      	movs	r3, #0
 8000b6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000b6e:	e18f      	b.n	8000e90 <vShell_cmdParse+0x330>
		if(!memcmp(input,(char*)&str_cfg_header[u8_idx][0], CFG_HEADER_LEN)) {
 8000b70:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000b74:	4613      	mov	r3, r2
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	4413      	add	r3, r2
 8000b7a:	4aaa      	ldr	r2, [pc, #680]	; (8000e24 <vShell_cmdParse+0x2c4>)
 8000b7c:	4413      	add	r3, r2
 8000b7e:	2205      	movs	r2, #5
 8000b80:	4619      	mov	r1, r3
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f006 ffe8 	bl	8007b58 <memcmp>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	f040 817b 	bne.w	8000e86 <vShell_cmdParse+0x326>
			char *pChar 		= &input[CFG_HEADER_LEN];		//pointer untuk menyimpan header (5 char)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3305      	adds	r3, #5
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
			char *pChar2 		= &input[CFG_HEADER_LEN];		//pointer untuk menyimpan header (5 char)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	3305      	adds	r3, #5
 8000b9a:	61fb      	str	r3, [r7, #28]
			uint8_t u8_start 	= 0;			// ini penanda yang akan bergeser tiap indeks (menandai lokasi dari sparating symboll)
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			uint8_t u8_stop 	= 0;			// ini penenda start pointer paling awal atau awal baru setelah sparating symboll
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			uint8_t u8_cnt 		= 0;			// menampung ada berapa sih inputan nya
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

			char str_res[20];

			if (u8_idx==1) {
 8000bae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d107      	bne.n	8000bc6 <vShell_cmdParse+0x66>
				bitFlag |= BFLAG_I2C_RDA;
 8000bb6:	4b9c      	ldr	r3, [pc, #624]	; (8000e28 <vShell_cmdParse+0x2c8>)
 8000bb8:	881b      	ldrh	r3, [r3, #0]
 8000bba:	f043 0302 	orr.w	r3, r3, #2
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	4b99      	ldr	r3, [pc, #612]	; (8000e28 <vShell_cmdParse+0x2c8>)
 8000bc2:	801a      	strh	r2, [r3, #0]
 8000bc4:	e15f      	b.n	8000e86 <vShell_cmdParse+0x326>
			}

			else if (u8_idx == 5){		//{RD0} Read Buffer TX and RX from Master
 8000bc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bca:	2b05      	cmp	r3, #5
 8000bcc:	d107      	bne.n	8000bde <vShell_cmdParse+0x7e>
				bitFlag |= BFLAG_I2C_RDB;
 8000bce:	4b96      	ldr	r3, [pc, #600]	; (8000e28 <vShell_cmdParse+0x2c8>)
 8000bd0:	881b      	ldrh	r3, [r3, #0]
 8000bd2:	f043 0304 	orr.w	r3, r3, #4
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	4b93      	ldr	r3, [pc, #588]	; (8000e28 <vShell_cmdParse+0x2c8>)
 8000bda:	801a      	strh	r2, [r3, #0]
 8000bdc:	e153      	b.n	8000e86 <vShell_cmdParse+0x326>
			}

			else if (u8_idx == 6){ 		//{RD1} Read from res1
 8000bde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000be2:	2b06      	cmp	r3, #6
 8000be4:	d10a      	bne.n	8000bfc <vShell_cmdParse+0x9c>
				aTxBuffer[0]=4;
 8000be6:	4b91      	ldr	r3, [pc, #580]	; (8000e2c <vShell_cmdParse+0x2cc>)
 8000be8:	2204      	movs	r2, #4
 8000bea:	601a      	str	r2, [r3, #0]
				bitFlag |= BFLAG_I2C_WRS;
 8000bec:	4b8e      	ldr	r3, [pc, #568]	; (8000e28 <vShell_cmdParse+0x2c8>)
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	f043 0320 	orr.w	r3, r3, #32
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	4b8c      	ldr	r3, [pc, #560]	; (8000e28 <vShell_cmdParse+0x2c8>)
 8000bf8:	801a      	strh	r2, [r3, #0]
 8000bfa:	e144      	b.n	8000e86 <vShell_cmdParse+0x326>
			}
			else if (u8_idx == 7){ 		//{RD2} Read from res2
 8000bfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c00:	2b07      	cmp	r3, #7
 8000c02:	d10a      	bne.n	8000c1a <vShell_cmdParse+0xba>
				aTxBuffer[0]=5;
 8000c04:	4b89      	ldr	r3, [pc, #548]	; (8000e2c <vShell_cmdParse+0x2cc>)
 8000c06:	2205      	movs	r2, #5
 8000c08:	601a      	str	r2, [r3, #0]
				bitFlag |= BFLAG_I2C_WRS;
 8000c0a:	4b87      	ldr	r3, [pc, #540]	; (8000e28 <vShell_cmdParse+0x2c8>)
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	f043 0320 	orr.w	r3, r3, #32
 8000c12:	b29a      	uxth	r2, r3
 8000c14:	4b84      	ldr	r3, [pc, #528]	; (8000e28 <vShell_cmdParse+0x2c8>)
 8000c16:	801a      	strh	r2, [r3, #0]
 8000c18:	e135      	b.n	8000e86 <vShell_cmdParse+0x326>
			}
			else if (u8_idx == 8){		//{RD3} Read from res3
 8000c1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c1e:	2b08      	cmp	r3, #8
 8000c20:	d10a      	bne.n	8000c38 <vShell_cmdParse+0xd8>
				aTxBuffer[0]=6;
 8000c22:	4b82      	ldr	r3, [pc, #520]	; (8000e2c <vShell_cmdParse+0x2cc>)
 8000c24:	2206      	movs	r2, #6
 8000c26:	601a      	str	r2, [r3, #0]
				bitFlag |= BFLAG_I2C_WRS;
 8000c28:	4b7f      	ldr	r3, [pc, #508]	; (8000e28 <vShell_cmdParse+0x2c8>)
 8000c2a:	881b      	ldrh	r3, [r3, #0]
 8000c2c:	f043 0320 	orr.w	r3, r3, #32
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	4b7d      	ldr	r3, [pc, #500]	; (8000e28 <vShell_cmdParse+0x2c8>)
 8000c34:	801a      	strh	r2, [r3, #0]
 8000c36:	e126      	b.n	8000e86 <vShell_cmdParse+0x326>
			}

			else if (u8_idx == 9){		//{WRA: Read all
 8000c38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c3c:	2b09      	cmp	r3, #9
 8000c3e:	f040 8085 	bne.w	8000d4c <vShell_cmdParse+0x1ec>
				for (uint8_t i=0; i<30; i++){
 8000c42:	2300      	movs	r3, #0
 8000c44:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000c48:	e00a      	b.n	8000c60 <vShell_cmdParse+0x100>
					temp[i] = 0;
 8000c4a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c4e:	4a78      	ldr	r2, [pc, #480]	; (8000e30 <vShell_cmdParse+0x2d0>)
 8000c50:	2100      	movs	r1, #0
 8000c52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (uint8_t i=0; i<30; i++){
 8000c56:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000c60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c64:	2b1d      	cmp	r3, #29
 8000c66:	d9f0      	bls.n	8000c4a <vShell_cmdParse+0xea>
				}

				while (*pChar) {
 8000c68:	e06b      	b.n	8000d42 <vShell_cmdParse+0x1e2>
					if(*pChar == ';' || *pChar == '}') {
 8000c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b3b      	cmp	r3, #59	; 0x3b
 8000c70:	d003      	beq.n	8000c7a <vShell_cmdParse+0x11a>
 8000c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b7d      	cmp	r3, #125	; 0x7d
 8000c78:	d15b      	bne.n	8000d32 <vShell_cmdParse+0x1d2>
						memset(&str_res[0], 0, 20);		// default/reset untuk mendeklarasikan array str_res akan bernilai 0 semua sebanyak 10 indeks mulai dari str_res[0]
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	2214      	movs	r2, #20
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f006 ff86 	bl	8007b94 <memset>
						memcpy(&str_res[0], &pChar2[u8_stop], u8_start - u8_stop);	// mengcopy data array dari pChar2[u8_stop] sejumlah (u8_start - u8_stop0 char menuju str_res
 8000c88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c8c:	69fa      	ldr	r2, [r7, #28]
 8000c8e:	18d1      	adds	r1, r2, r3
 8000c90:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000c94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	f107 0308 	add.w	r3, r7, #8
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f006 ff69 	bl	8007b78 <memcpy>

						if(strlen(str_res)>0){
 8000ca6:	f107 0308 	add.w	r3, r7, #8
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d00a      	beq.n	8000cc6 <vShell_cmdParse+0x166>
							temp[u8_cnt] = tinysh_dec(&str_res[0]);
 8000cb0:	f897 4025 	ldrb.w	r4, [r7, #37]	; 0x25
 8000cb4:	f107 0308 	add.w	r3, r7, #8
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fed7 	bl	8000a6c <tinysh_dec>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	4a5b      	ldr	r2, [pc, #364]	; (8000e30 <vShell_cmdParse+0x2d0>)
 8000cc2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
						}

						if(*pChar == ';') { u8_stop = u8_start + 1; }
 8000cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b3b      	cmp	r3, #59	; 0x3b
 8000ccc:	d105      	bne.n	8000cda <vShell_cmdParse+0x17a>
 8000cce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000cd8:	e026      	b.n	8000d28 <vShell_cmdParse+0x1c8>
						else if(*pChar == '}') {
 8000cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b7d      	cmp	r3, #125	; 0x7d
 8000ce0:	d122      	bne.n	8000d28 <vShell_cmdParse+0x1c8>
							for (uint8_t i=0; i<10; i++){
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000ce8:	e00b      	b.n	8000d02 <vShell_cmdParse+0x1a2>
								aTxBuffer[i+1] = 0;
 8000cea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000cee:	3301      	adds	r3, #1
 8000cf0:	4a4e      	ldr	r2, [pc, #312]	; (8000e2c <vShell_cmdParse+0x2cc>)
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							for (uint8_t i=0; i<10; i++){
 8000cf8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000d02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d06:	2b09      	cmp	r3, #9
 8000d08:	d9ef      	bls.n	8000cea <vShell_cmdParse+0x18a>
							}

							//copyValue(temp, aTxBuffer, 0, 10);
							memcpy(&aTxBuffer[1], &temp[0], 10);
 8000d0a:	220a      	movs	r2, #10
 8000d0c:	4948      	ldr	r1, [pc, #288]	; (8000e30 <vShell_cmdParse+0x2d0>)
 8000d0e:	4849      	ldr	r0, [pc, #292]	; (8000e34 <vShell_cmdParse+0x2d4>)
 8000d10:	f006 ff32 	bl	8007b78 <memcpy>
							aTxBuffer[0]=7;
 8000d14:	4b45      	ldr	r3, [pc, #276]	; (8000e2c <vShell_cmdParse+0x2cc>)
 8000d16:	2207      	movs	r2, #7
 8000d18:	601a      	str	r2, [r3, #0]
							bitFlag |= BFLAG_I2C_WRS;
 8000d1a:	4b43      	ldr	r3, [pc, #268]	; (8000e28 <vShell_cmdParse+0x2c8>)
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	f043 0320 	orr.w	r3, r3, #32
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	4b40      	ldr	r3, [pc, #256]	; (8000e28 <vShell_cmdParse+0x2c8>)
 8000d26:	801a      	strh	r2, [r3, #0]
						}
						u8_cnt++;
 8000d28:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					}
					pChar++;
 8000d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d34:	3301      	adds	r3, #1
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
					u8_start++;
 8000d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				while (*pChar) {
 8000d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d18f      	bne.n	8000c6a <vShell_cmdParse+0x10a>
				}
				break;
 8000d4a:	e0a7      	b.n	8000e9c <vShell_cmdParse+0x33c>
			}

			else if ((u8_idx > 0) && (u8_idx < 5)) {
 8000d4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	f000 8098 	beq.w	8000e86 <vShell_cmdParse+0x326>
 8000d56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d5a:	2b04      	cmp	r3, #4
 8000d5c:	f200 8093 	bhi.w	8000e86 <vShell_cmdParse+0x326>
				/* Reset TX Buffer from index 1 to 10*/
				for (uint8_t i=0; i<10; i++){
 8000d60:	2300      	movs	r3, #0
 8000d62:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000d66:	e00b      	b.n	8000d80 <vShell_cmdParse+0x220>
					aTxBuffer[i+1] = 0;
 8000d68:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	4a2f      	ldr	r2, [pc, #188]	; (8000e2c <vShell_cmdParse+0x2cc>)
 8000d70:	2100      	movs	r1, #0
 8000d72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (uint8_t i=0; i<10; i++){
 8000d76:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000d80:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000d84:	2b09      	cmp	r3, #9
 8000d86:	d9ef      	bls.n	8000d68 <vShell_cmdParse+0x208>
				}

				/* WRITE HEADER */
				while (*pChar) {
 8000d88:	e078      	b.n	8000e7c <vShell_cmdParse+0x31c>
					if(*pChar == ';' || *pChar == '}') {
 8000d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b3b      	cmp	r3, #59	; 0x3b
 8000d90:	d003      	beq.n	8000d9a <vShell_cmdParse+0x23a>
 8000d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b7d      	cmp	r3, #125	; 0x7d
 8000d98:	d168      	bne.n	8000e6c <vShell_cmdParse+0x30c>
						memset(&str_res[0], 0, 20);		// default/reset untuk mendeklarasikan array str_res akan bernilai 0 semua sebanyak 10 indeks mulai dari str_res[0]
 8000d9a:	f107 0308 	add.w	r3, r7, #8
 8000d9e:	2214      	movs	r2, #20
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f006 fef6 	bl	8007b94 <memset>
						memcpy(&str_res[0], &pChar2[u8_stop], u8_start - u8_stop);	// mengcopy data array dari pChar2[u8_stop] sejumlah (u8_start - u8_stop0 char menuju str_res
 8000da8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dac:	69fa      	ldr	r2, [r7, #28]
 8000dae:	18d1      	adds	r1, r2, r3
 8000db0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000db4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	461a      	mov	r2, r3
 8000dbc:	f107 0308 	add.w	r3, r7, #8
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f006 fed9 	bl	8007b78 <memcpy>

						if(strlen(str_res)>0){
 8000dc6:	f107 0308 	add.w	r3, r7, #8
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d00b      	beq.n	8000de8 <vShell_cmdParse+0x288>
							aTxBuffer[u8_cnt+1] = tinysh_dec(&str_res[0]);
 8000dd0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000dd4:	1c5c      	adds	r4, r3, #1
 8000dd6:	f107 0308 	add.w	r3, r7, #8
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fe46 	bl	8000a6c <tinysh_dec>
 8000de0:	4603      	mov	r3, r0
 8000de2:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <vShell_cmdParse+0x2cc>)
 8000de4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
						}

						if(*pChar == ';') { u8_stop = u8_start + 1; }
 8000de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b3b      	cmp	r3, #59	; 0x3b
 8000dee:	d105      	bne.n	8000dfc <vShell_cmdParse+0x29c>
 8000df0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000df4:	3301      	adds	r3, #1
 8000df6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000dfa:	e032      	b.n	8000e62 <vShell_cmdParse+0x302>
						else if(*pChar == '}') {
 8000dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b7d      	cmp	r3, #125	; 0x7d
 8000e02:	d12e      	bne.n	8000e62 <vShell_cmdParse+0x302>
							if (u8_idx == 2){ // {WR1: Write at form 1
 8000e04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d103      	bne.n	8000e14 <vShell_cmdParse+0x2b4>
								/*Set first index as a trigger for slave*/
								aTxBuffer[0]=1;
 8000e0c:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <vShell_cmdParse+0x2cc>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	e018      	b.n	8000e46 <vShell_cmdParse+0x2e6>
							}
							else if (u8_idx == 3){ // {WR2: Write at form 2
 8000e14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e18:	2b03      	cmp	r3, #3
 8000e1a:	d10d      	bne.n	8000e38 <vShell_cmdParse+0x2d8>
								aTxBuffer[0]=2;
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <vShell_cmdParse+0x2cc>)
 8000e1e:	2202      	movs	r2, #2
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	e010      	b.n	8000e46 <vShell_cmdParse+0x2e6>
 8000e24:	20000000 	.word	0x20000000
 8000e28:	20000464 	.word	0x20000464
 8000e2c:	20000038 	.word	0x20000038
 8000e30:	20000494 	.word	0x20000494
 8000e34:	2000003c 	.word	0x2000003c
							}
							else if (u8_idx == 4){ // {WR3: Write at form 3
 8000e38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e3c:	2b04      	cmp	r3, #4
 8000e3e:	d102      	bne.n	8000e46 <vShell_cmdParse+0x2e6>
								aTxBuffer[0]=3;
 8000e40:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <vShell_cmdParse+0x344>)
 8000e42:	2203      	movs	r2, #3
 8000e44:	601a      	str	r2, [r3, #0]
							}
							bitFlag |= BFLAG_I2C_WRS;
 8000e46:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <vShell_cmdParse+0x348>)
 8000e48:	881b      	ldrh	r3, [r3, #0]
 8000e4a:	f043 0320 	orr.w	r3, r3, #32
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <vShell_cmdParse+0x348>)
 8000e52:	801a      	strh	r2, [r3, #0]
							bitFlag |= BFLAG_I2C_RDB;
 8000e54:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <vShell_cmdParse+0x348>)
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	f043 0304 	orr.w	r3, r3, #4
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <vShell_cmdParse+0x348>)
 8000e60:	801a      	strh	r2, [r3, #0]
						}
						u8_cnt++;
 8000e62:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000e66:	3301      	adds	r3, #1
 8000e68:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					}
					pChar++;
 8000e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e6e:	3301      	adds	r3, #1
 8000e70:	62bb      	str	r3, [r7, #40]	; 0x28
					u8_start++;
 8000e72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e76:	3301      	adds	r3, #1
 8000e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				while (*pChar) {
 8000e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d182      	bne.n	8000d8a <vShell_cmdParse+0x22a>
				}
				break;
 8000e84:	e00a      	b.n	8000e9c <vShell_cmdParse+0x33c>
	for(uint8_t u8_idx = 0; u8_idx < CFG_HEADER_NUM; u8_idx++) {
 8000e86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000e90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e94:	2b0a      	cmp	r3, #10
 8000e96:	f67f ae6b 	bls.w	8000b70 <vShell_cmdParse+0x10>
			}
		}
	}
}
 8000e9a:	bf00      	nop
 8000e9c:	bf00      	nop
 8000e9e:	3734      	adds	r7, #52	; 0x34
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd90      	pop	{r4, r7, pc}
 8000ea4:	20000038 	.word	0x20000038
 8000ea8:	20000464 	.word	0x20000464

08000eac <uartProcessing>:

void uartProcessing (uint8_t *u8p_buffer, uint16_t u16_size){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	807b      	strh	r3, [r7, #2]
	//Bagian ini akan dipanggil di serial.c, line 57
	//printf("UART jalan\r\n"); // Harusnya bisa langsung jalan kalo di konek lewat UI
	vShell_cmdParse((char*)u8p_buffer);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff fe51 	bl	8000b60 <vShell_cmdParse>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <vUAFE_uart_handle>:
/*****************************************************************
 * @name 	vUAFE_uart_handle
 * @brief	handle afe uart data copy
 ****************************************************************/
static void vUAFE_uart_handle(uint16_t Size)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	80fb      	strh	r3, [r7, #6]
	uint16_t u16_numData;

	/* Check if number of received data in reception buffer has changed */
	if (Size != u16_oldPos)
 8000ed2:	4b36      	ldr	r3, [pc, #216]	; (8000fac <vUAFE_uart_handle+0xe4>)
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	88fa      	ldrh	r2, [r7, #6]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d05f      	beq.n	8000f9c <vUAFE_uart_handle+0xd4>
	{
		if (Size > u16_oldPos)
 8000edc:	4b33      	ldr	r3, [pc, #204]	; (8000fac <vUAFE_uart_handle+0xe4>)
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	88fa      	ldrh	r2, [r7, #6]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d91a      	bls.n	8000f1c <vUAFE_uart_handle+0x54>
		{
			/* Current position is higher than previous one */
			u16_numData = Size - u16_oldPos;
 8000ee6:	4b31      	ldr	r3, [pc, #196]	; (8000fac <vUAFE_uart_handle+0xe4>)
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	88fa      	ldrh	r2, [r7, #6]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	81fb      	strh	r3, [r7, #14]
			memcpy(&u8arr_uartEvent[u16_lenCnt],&u8arr_eventBuff[u16_oldPos],u16_numData);
 8000ef0:	4b2f      	ldr	r3, [pc, #188]	; (8000fb0 <vUAFE_uart_handle+0xe8>)
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b2f      	ldr	r3, [pc, #188]	; (8000fb4 <vUAFE_uart_handle+0xec>)
 8000ef8:	4413      	add	r3, r2
 8000efa:	4a2c      	ldr	r2, [pc, #176]	; (8000fac <vUAFE_uart_handle+0xe4>)
 8000efc:	8812      	ldrh	r2, [r2, #0]
 8000efe:	4611      	mov	r1, r2
 8000f00:	4a2d      	ldr	r2, [pc, #180]	; (8000fb8 <vUAFE_uart_handle+0xf0>)
 8000f02:	4411      	add	r1, r2
 8000f04:	89fa      	ldrh	r2, [r7, #14]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f006 fe36 	bl	8007b78 <memcpy>
			u16_lenCnt += u16_numData;
 8000f0c:	4b28      	ldr	r3, [pc, #160]	; (8000fb0 <vUAFE_uart_handle+0xe8>)
 8000f0e:	881a      	ldrh	r2, [r3, #0]
 8000f10:	89fb      	ldrh	r3, [r7, #14]
 8000f12:	4413      	add	r3, r2
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	4b26      	ldr	r3, [pc, #152]	; (8000fb0 <vUAFE_uart_handle+0xe8>)
 8000f18:	801a      	strh	r2, [r3, #0]
 8000f1a:	e02a      	b.n	8000f72 <vUAFE_uart_handle+0xaa>
		}
		else
		{
			/* End of buffer has been reached */
			u16_numData = UART_BUF_SZ - u16_oldPos;
 8000f1c:	4b23      	ldr	r3, [pc, #140]	; (8000fac <vUAFE_uart_handle+0xe4>)
 8000f1e:	881b      	ldrh	r3, [r3, #0]
 8000f20:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000f24:	81fb      	strh	r3, [r7, #14]

			memcpy (&u8arr_uartEvent[u16_lenCnt], 			// copy data in that remaining space
 8000f26:	4b22      	ldr	r3, [pc, #136]	; (8000fb0 <vUAFE_uart_handle+0xe8>)
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <vUAFE_uart_handle+0xec>)
 8000f2e:	4413      	add	r3, r2
					&u8arr_eventBuff[u16_oldPos],
 8000f30:	4a1e      	ldr	r2, [pc, #120]	; (8000fac <vUAFE_uart_handle+0xe4>)
 8000f32:	8812      	ldrh	r2, [r2, #0]
 8000f34:	4611      	mov	r1, r2
 8000f36:	4a20      	ldr	r2, [pc, #128]	; (8000fb8 <vUAFE_uart_handle+0xf0>)
 8000f38:	4411      	add	r1, r2
			memcpy (&u8arr_uartEvent[u16_lenCnt], 			// copy data in that remaining space
 8000f3a:	89fa      	ldrh	r2, [r7, #14]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f006 fe1b 	bl	8007b78 <memcpy>
					u16_numData);

			u16_lenCnt += u16_numData;
 8000f42:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <vUAFE_uart_handle+0xe8>)
 8000f44:	881a      	ldrh	r2, [r3, #0]
 8000f46:	89fb      	ldrh	r3, [r7, #14]
 8000f48:	4413      	add	r3, r2
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <vUAFE_uart_handle+0xe8>)
 8000f4e:	801a      	strh	r2, [r3, #0]

			memcpy (&u8arr_uartEvent[u16_lenCnt], 			// copy the remaining data
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <vUAFE_uart_handle+0xe8>)
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <vUAFE_uart_handle+0xec>)
 8000f58:	4413      	add	r3, r2
 8000f5a:	88fa      	ldrh	r2, [r7, #6]
 8000f5c:	4916      	ldr	r1, [pc, #88]	; (8000fb8 <vUAFE_uart_handle+0xf0>)
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f006 fe0a 	bl	8007b78 <memcpy>
					&u8arr_eventBuff[0],
					Size);

			u16_lenCnt += Size;
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <vUAFE_uart_handle+0xe8>)
 8000f66:	881a      	ldrh	r2, [r3, #0]
 8000f68:	88fb      	ldrh	r3, [r7, #6]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <vUAFE_uart_handle+0xe8>)
 8000f70:	801a      	strh	r2, [r3, #0]
		}

		/* Check for ready to process */
		if((u8arr_uartEvent[u16_lenCnt - 1] == '\n')&&(u8arr_uartEvent[u16_lenCnt - 2]== '\r'))
 8000f72:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <vUAFE_uart_handle+0xe8>)
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	4a0e      	ldr	r2, [pc, #56]	; (8000fb4 <vUAFE_uart_handle+0xec>)
 8000f7a:	5cd3      	ldrb	r3, [r2, r3]
 8000f7c:	2b0a      	cmp	r3, #10
 8000f7e:	d10d      	bne.n	8000f9c <vUAFE_uart_handle+0xd4>
 8000f80:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <vUAFE_uart_handle+0xe8>)
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	3b02      	subs	r3, #2
 8000f86:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <vUAFE_uart_handle+0xec>)
 8000f88:	5cd3      	ldrb	r3, [r2, r3]
 8000f8a:	2b0d      	cmp	r3, #13
 8000f8c:	d106      	bne.n	8000f9c <vUAFE_uart_handle+0xd4>
		{
			bitFlag |= BFLAG_UART_RCV;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <vUAFE_uart_handle+0xf4>)
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <vUAFE_uart_handle+0xf4>)
 8000f9a:	801a      	strh	r2, [r3, #0]
		}

	}

	u16_oldPos = Size;
 8000f9c:	4a03      	ldr	r2, [pc, #12]	; (8000fac <vUAFE_uart_handle+0xe4>)
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	8013      	strh	r3, [r2, #0]
}
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000460 	.word	0x20000460
 8000fb0:	20000462 	.word	0x20000462
 8000fb4:	20000360 	.word	0x20000360
 8000fb8:	20000260 	.word	0x20000260
 8000fbc:	20000464 	.word	0x20000464

08000fc0 <HAL_UARTEx_RxEventCallback>:
/*****************************************************************
 * @name HAL_UARTEx_RxEventCallback
 * @brief
 ****************************************************************/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	807b      	strh	r3, [r7, #2]
	#ifdef RX_EVENT_CB
		if (huart->Instance == USART2)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a08      	ldr	r2, [pc, #32]	; (8000ff4 <HAL_UARTEx_RxEventCallback+0x34>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d109      	bne.n	8000fea <HAL_UARTEx_RxEventCallback+0x2a>
		{
			vUAFE_uart_handle(Size);
 8000fd6:	887b      	ldrh	r3, [r7, #2]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff75 	bl	8000ec8 <vUAFE_uart_handle>
			HAL_UARTEx_ReceiveToIdle_DMA(&huart2, u8arr_eventBuff, UART_BUF_SZ);
 8000fde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fe2:	4905      	ldr	r1, [pc, #20]	; (8000ff8 <HAL_UARTEx_RxEventCallback+0x38>)
 8000fe4:	4805      	ldr	r0, [pc, #20]	; (8000ffc <HAL_UARTEx_RxEventCallback+0x3c>)
 8000fe6:	f005 fc38 	bl	800685a <HAL_UARTEx_ReceiveToIdle_DMA>
		}
	#endif
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40004400 	.word	0x40004400
 8000ff8:	20000260 	.word	0x20000260
 8000ffc:	20000168 	.word	0x20000168

08001000 <Error_Handler>:


/*******************************************************************
  * @brief  This function is executed in case of error occurrence.
  ******************************************************************/
void Error_Handler(void) {
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  printf("\r\nerror handler!!!\r\n");
 8001004:	4806      	ldr	r0, [pc, #24]	; (8001020 <Error_Handler+0x20>)
 8001006:	f006 fe3b 	bl	8007c80 <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800100a:	b672      	cpsid	i
}
 800100c:	bf00      	nop
  __disable_irq();

  while (1) {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800100e:	2120      	movs	r1, #32
 8001010:	4804      	ldr	r0, [pc, #16]	; (8001024 <Error_Handler+0x24>)
 8001012:	f002 fe46 	bl	8003ca2 <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 8001016:	2032      	movs	r0, #50	; 0x32
 8001018:	f001 ff50 	bl	8002ebc <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800101c:	e7f7      	b.n	800100e <Error_Handler+0xe>
 800101e:	bf00      	nop
 8001020:	08008604 	.word	0x08008604
 8001024:	40020000 	.word	0x40020000

08001028 <serial_init>:
static uint8_t u8arr_uart[UART_BUF_SZ];
static uint8_t u8idx;

/* Public functions definitions */
void serial_init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* initialize serial */
  stdin_init(&hstdin, &huart2, u8arr_buffer, UART_BUF_SZ);
 800102c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001030:	4a06      	ldr	r2, [pc, #24]	; (800104c <serial_init+0x24>)
 8001032:	4907      	ldr	r1, [pc, #28]	; (8001050 <serial_init+0x28>)
 8001034:	4807      	ldr	r0, [pc, #28]	; (8001054 <serial_init+0x2c>)
 8001036:	f000 f865 	bl	8001104 <stdin_init>
  stdin_set_callback(&hstdin, stdin_callback);
 800103a:	4907      	ldr	r1, [pc, #28]	; (8001058 <serial_init+0x30>)
 800103c:	4805      	ldr	r0, [pc, #20]	; (8001054 <serial_init+0x2c>)
 800103e:	f000 f878 	bl	8001132 <stdin_set_callback>
  stdin_start(&hstdin);
 8001042:	4804      	ldr	r0, [pc, #16]	; (8001054 <serial_init+0x2c>)
 8001044:	f000 f896 	bl	8001174 <stdin_start>
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}
 800104c:	2000051c 	.word	0x2000051c
 8001050:	20000168 	.word	0x20000168
 8001054:	2000050c 	.word	0x2000050c
 8001058:	08001085 	.word	0x08001085

0800105c <serial_handlerUART>:

void serial_handlerUART(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  stdin_irq_uart(&hstdin);
 8001060:	4802      	ldr	r0, [pc, #8]	; (800106c <serial_handlerUART+0x10>)
 8001062:	f001 fbf5 	bl	8002850 <stdin_irq_uart>
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2000050c 	.word	0x2000050c

08001070 <serial_handlerDMA>:

void serial_handlerDMA(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  stdin_irq_dma(&hstdin);
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <serial_handlerDMA+0x10>)
 8001076:	f000 f8b3 	bl	80011e0 <stdin_irq_dma>
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000050c 	.word	0x2000050c

08001084 <stdin_callback>:

/* Private function definitions */
static void stdin_callback(uint8_t *u8p_buffer, uint16_t u16_size)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	460b      	mov	r3, r1
 800108e:	807b      	strh	r3, [r7, #2]
	//printf("UART RX Handler\r\n\n");

	memcpy(&u8arr_uart[u8idx], u8p_buffer, u16_size);
 8001090:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <stdin_callback+0x78>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <stdin_callback+0x7c>)
 8001098:	4413      	add	r3, r2
 800109a:	887a      	ldrh	r2, [r7, #2]
 800109c:	6879      	ldr	r1, [r7, #4]
 800109e:	4618      	mov	r0, r3
 80010a0:	f006 fd6a 	bl	8007b78 <memcpy>
	u8idx += u16_size;
 80010a4:	887b      	ldrh	r3, [r7, #2]
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	4b14      	ldr	r3, [pc, #80]	; (80010fc <stdin_callback+0x78>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4413      	add	r3, r2
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <stdin_callback+0x78>)
 80010b2:	701a      	strb	r2, [r3, #0]

	if((u8p_buffer[u16_size - 1] == '\n')&&(u8p_buffer[u16_size - 2]== '\r'))
 80010b4:	887b      	ldrh	r3, [r7, #2]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	4413      	add	r3, r2
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b0a      	cmp	r3, #10
 80010c0:	d118      	bne.n	80010f4 <stdin_callback+0x70>
 80010c2:	887b      	ldrh	r3, [r7, #2]
 80010c4:	3b02      	subs	r3, #2
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b0d      	cmp	r3, #13
 80010ce:	d111      	bne.n	80010f4 <stdin_callback+0x70>
	{
		uartProcessing (u8arr_uart, u8idx - 2);
 80010d0:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <stdin_callback+0x78>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	3b02      	subs	r3, #2
 80010d8:	b29b      	uxth	r3, r3
 80010da:	4619      	mov	r1, r3
 80010dc:	4808      	ldr	r0, [pc, #32]	; (8001100 <stdin_callback+0x7c>)
 80010de:	f7ff fee5 	bl	8000eac <uartProcessing>
		memset(u8arr_uart, 0, UART_BUF_SZ);
 80010e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010e6:	2100      	movs	r1, #0
 80010e8:	4805      	ldr	r0, [pc, #20]	; (8001100 <stdin_callback+0x7c>)
 80010ea:	f006 fd53 	bl	8007b94 <memset>
		u8idx = 0;
 80010ee:	4b03      	ldr	r3, [pc, #12]	; (80010fc <stdin_callback+0x78>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
	}
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	2000071c 	.word	0x2000071c
 8001100:	2000061c 	.word	0x2000061c

08001104 <stdin_init>:
static void fill_buffer(stdin_t *in, uint16_t pos, uint16_t size);

/* Public function implementations
 * --------------------------------------------*/
void stdin_init(stdin_t *in, UART_HandleTypeDef *uart, uint8_t *buffer, uint16_t size)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	807b      	strh	r3, [r7, #2]
  in->huart = uart;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	68ba      	ldr	r2, [r7, #8]
 8001116:	601a      	str	r2, [r3, #0]
  in->buffer = buffer;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	609a      	str	r2, [r3, #8]
  in->size = size;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	887a      	ldrh	r2, [r7, #2]
 8001122:	819a      	strh	r2, [r3, #12]

  stdin_flush(in);
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f000 f812 	bl	800114e <stdin_flush>
}
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <stdin_set_callback>:

void stdin_set_callback(stdin_t *in, stdin_callback_t cb)
{
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	6039      	str	r1, [r7, #0]
  in->callback = cb;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	605a      	str	r2, [r3, #4]
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <stdin_flush>:

void stdin_flush(stdin_t *in)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  memset(in->buffer, 0, in->size);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6898      	ldr	r0, [r3, #8]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	899b      	ldrh	r3, [r3, #12]
 800115e:	461a      	mov	r2, r3
 8001160:	2100      	movs	r1, #0
 8001162:	f006 fd17 	bl	8007b94 <memset>
  in->pos = 0;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	81da      	strh	r2, [r3, #14]
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <stdin_start>:

HAL_StatusTypeDef stdin_start(stdin_t *in)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Enable interrupts */
  __HAL_UART_ENABLE_IT(in->huart, UART_IT_IDLE);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	68da      	ldr	r2, [r3, #12]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f042 0210 	orr.w	r2, r2, #16
 800118e:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(HDMA(in), DMA_IT_TC);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f042 0210 	orr.w	r2, r2, #16
 80011a6:	601a      	str	r2, [r3, #0]
  __HAL_DMA_ENABLE_IT(HDMA(in), DMA_IT_HT);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f042 0208 	orr.w	r2, r2, #8
 80011be:	601a      	str	r2, [r3, #0]

  /* Start receiving UART in DMA mode */
  status = HAL_UART_Receive_DMA(in->huart, in->buffer, in->size);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6818      	ldr	r0, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6899      	ldr	r1, [r3, #8]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	899b      	ldrh	r3, [r3, #12]
 80011cc:	461a      	mov	r2, r3
 80011ce:	f005 fb14 	bl	80067fa <HAL_UART_Receive_DMA>
 80011d2:	4603      	mov	r3, r0
 80011d4:	73fb      	strb	r3, [r7, #15]
  return (status);
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <stdin_irq_dma>:
  status = HAL_UART_DMAStop(in->huart);
  return (status);
}

void stdin_irq_dma(stdin_t *in)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Handle HT interrupt */
  if (__HAL_DMA_GET_IT_SOURCE(HDMA(in), DMA_IT_HT))
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0308 	and.w	r3, r3, #8
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 823c 	beq.w	8001674 <stdin_irq_dma+0x494>
  {
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_HT_FLAG_INDEX(HDMA(in)));
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	4b7f      	ldr	r3, [pc, #508]	; (8001404 <stdin_irq_dma+0x224>)
 8001208:	429a      	cmp	r2, r3
 800120a:	d978      	bls.n	80012fe <stdin_irq_dma+0x11e>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a7c      	ldr	r2, [pc, #496]	; (8001408 <stdin_irq_dma+0x228>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d06d      	beq.n	80012f6 <stdin_irq_dma+0x116>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a7a      	ldr	r2, [pc, #488]	; (800140c <stdin_irq_dma+0x22c>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d064      	beq.n	80012f2 <stdin_irq_dma+0x112>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a77      	ldr	r2, [pc, #476]	; (8001410 <stdin_irq_dma+0x230>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d05b      	beq.n	80012ee <stdin_irq_dma+0x10e>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a75      	ldr	r2, [pc, #468]	; (8001414 <stdin_irq_dma+0x234>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d052      	beq.n	80012ea <stdin_irq_dma+0x10a>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a72      	ldr	r2, [pc, #456]	; (8001418 <stdin_irq_dma+0x238>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d048      	beq.n	80012e4 <stdin_irq_dma+0x104>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a70      	ldr	r2, [pc, #448]	; (800141c <stdin_irq_dma+0x23c>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d03e      	beq.n	80012de <stdin_irq_dma+0xfe>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a6d      	ldr	r2, [pc, #436]	; (8001420 <stdin_irq_dma+0x240>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d034      	beq.n	80012d8 <stdin_irq_dma+0xf8>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a6b      	ldr	r2, [pc, #428]	; (8001424 <stdin_irq_dma+0x244>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d02a      	beq.n	80012d2 <stdin_irq_dma+0xf2>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a68      	ldr	r2, [pc, #416]	; (8001428 <stdin_irq_dma+0x248>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d020      	beq.n	80012cc <stdin_irq_dma+0xec>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a66      	ldr	r2, [pc, #408]	; (800142c <stdin_irq_dma+0x24c>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d016      	beq.n	80012c6 <stdin_irq_dma+0xe6>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a63      	ldr	r2, [pc, #396]	; (8001430 <stdin_irq_dma+0x250>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d00c      	beq.n	80012c0 <stdin_irq_dma+0xe0>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a61      	ldr	r2, [pc, #388]	; (8001434 <stdin_irq_dma+0x254>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d102      	bne.n	80012ba <stdin_irq_dma+0xda>
 80012b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012b8:	e01e      	b.n	80012f8 <stdin_irq_dma+0x118>
 80012ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80012be:	e01b      	b.n	80012f8 <stdin_irq_dma+0x118>
 80012c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012c4:	e018      	b.n	80012f8 <stdin_irq_dma+0x118>
 80012c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012ca:	e015      	b.n	80012f8 <stdin_irq_dma+0x118>
 80012cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012d0:	e012      	b.n	80012f8 <stdin_irq_dma+0x118>
 80012d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012d6:	e00f      	b.n	80012f8 <stdin_irq_dma+0x118>
 80012d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012dc:	e00c      	b.n	80012f8 <stdin_irq_dma+0x118>
 80012de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e2:	e009      	b.n	80012f8 <stdin_irq_dma+0x118>
 80012e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e8:	e006      	b.n	80012f8 <stdin_irq_dma+0x118>
 80012ea:	2310      	movs	r3, #16
 80012ec:	e004      	b.n	80012f8 <stdin_irq_dma+0x118>
 80012ee:	2310      	movs	r3, #16
 80012f0:	e002      	b.n	80012f8 <stdin_irq_dma+0x118>
 80012f2:	2310      	movs	r3, #16
 80012f4:	e000      	b.n	80012f8 <stdin_irq_dma+0x118>
 80012f6:	2310      	movs	r3, #16
 80012f8:	4a4f      	ldr	r2, [pc, #316]	; (8001438 <stdin_irq_dma+0x258>)
 80012fa:	60d3      	str	r3, [r2, #12]
 80012fc:	e199      	b.n	8001632 <stdin_irq_dma+0x452>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	4b4c      	ldr	r3, [pc, #304]	; (800143c <stdin_irq_dma+0x25c>)
 800130a:	429a      	cmp	r2, r3
 800130c:	f240 8098 	bls.w	8001440 <stdin_irq_dma+0x260>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a3b      	ldr	r2, [pc, #236]	; (8001408 <stdin_irq_dma+0x228>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d06d      	beq.n	80013fa <stdin_irq_dma+0x21a>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a39      	ldr	r2, [pc, #228]	; (800140c <stdin_irq_dma+0x22c>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d064      	beq.n	80013f6 <stdin_irq_dma+0x216>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a36      	ldr	r2, [pc, #216]	; (8001410 <stdin_irq_dma+0x230>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d05b      	beq.n	80013f2 <stdin_irq_dma+0x212>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a34      	ldr	r2, [pc, #208]	; (8001414 <stdin_irq_dma+0x234>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d052      	beq.n	80013ee <stdin_irq_dma+0x20e>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a31      	ldr	r2, [pc, #196]	; (8001418 <stdin_irq_dma+0x238>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d048      	beq.n	80013e8 <stdin_irq_dma+0x208>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a2f      	ldr	r2, [pc, #188]	; (800141c <stdin_irq_dma+0x23c>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d03e      	beq.n	80013e2 <stdin_irq_dma+0x202>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a2c      	ldr	r2, [pc, #176]	; (8001420 <stdin_irq_dma+0x240>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d034      	beq.n	80013dc <stdin_irq_dma+0x1fc>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a2a      	ldr	r2, [pc, #168]	; (8001424 <stdin_irq_dma+0x244>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d02a      	beq.n	80013d6 <stdin_irq_dma+0x1f6>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a27      	ldr	r2, [pc, #156]	; (8001428 <stdin_irq_dma+0x248>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d020      	beq.n	80013d0 <stdin_irq_dma+0x1f0>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a25      	ldr	r2, [pc, #148]	; (800142c <stdin_irq_dma+0x24c>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d016      	beq.n	80013ca <stdin_irq_dma+0x1ea>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a22      	ldr	r2, [pc, #136]	; (8001430 <stdin_irq_dma+0x250>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d00c      	beq.n	80013c4 <stdin_irq_dma+0x1e4>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a20      	ldr	r2, [pc, #128]	; (8001434 <stdin_irq_dma+0x254>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d102      	bne.n	80013be <stdin_irq_dma+0x1de>
 80013b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013bc:	e01e      	b.n	80013fc <stdin_irq_dma+0x21c>
 80013be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80013c2:	e01b      	b.n	80013fc <stdin_irq_dma+0x21c>
 80013c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013c8:	e018      	b.n	80013fc <stdin_irq_dma+0x21c>
 80013ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013ce:	e015      	b.n	80013fc <stdin_irq_dma+0x21c>
 80013d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013d4:	e012      	b.n	80013fc <stdin_irq_dma+0x21c>
 80013d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013da:	e00f      	b.n	80013fc <stdin_irq_dma+0x21c>
 80013dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013e0:	e00c      	b.n	80013fc <stdin_irq_dma+0x21c>
 80013e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013e6:	e009      	b.n	80013fc <stdin_irq_dma+0x21c>
 80013e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ec:	e006      	b.n	80013fc <stdin_irq_dma+0x21c>
 80013ee:	2310      	movs	r3, #16
 80013f0:	e004      	b.n	80013fc <stdin_irq_dma+0x21c>
 80013f2:	2310      	movs	r3, #16
 80013f4:	e002      	b.n	80013fc <stdin_irq_dma+0x21c>
 80013f6:	2310      	movs	r3, #16
 80013f8:	e000      	b.n	80013fc <stdin_irq_dma+0x21c>
 80013fa:	2310      	movs	r3, #16
 80013fc:	4a0e      	ldr	r2, [pc, #56]	; (8001438 <stdin_irq_dma+0x258>)
 80013fe:	6093      	str	r3, [r2, #8]
 8001400:	e117      	b.n	8001632 <stdin_irq_dma+0x452>
 8001402:	bf00      	nop
 8001404:	40026458 	.word	0x40026458
 8001408:	40026010 	.word	0x40026010
 800140c:	40026410 	.word	0x40026410
 8001410:	40026070 	.word	0x40026070
 8001414:	40026470 	.word	0x40026470
 8001418:	40026028 	.word	0x40026028
 800141c:	40026428 	.word	0x40026428
 8001420:	40026088 	.word	0x40026088
 8001424:	40026488 	.word	0x40026488
 8001428:	40026040 	.word	0x40026040
 800142c:	40026440 	.word	0x40026440
 8001430:	400260a0 	.word	0x400260a0
 8001434:	400264a0 	.word	0x400264a0
 8001438:	40026400 	.word	0x40026400
 800143c:	400260b8 	.word	0x400260b8
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	4b7c      	ldr	r3, [pc, #496]	; (800163c <stdin_irq_dma+0x45c>)
 800144c:	429a      	cmp	r2, r3
 800144e:	d978      	bls.n	8001542 <stdin_irq_dma+0x362>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a79      	ldr	r2, [pc, #484]	; (8001640 <stdin_irq_dma+0x460>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d06d      	beq.n	800153a <stdin_irq_dma+0x35a>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a77      	ldr	r2, [pc, #476]	; (8001644 <stdin_irq_dma+0x464>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d064      	beq.n	8001536 <stdin_irq_dma+0x356>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a74      	ldr	r2, [pc, #464]	; (8001648 <stdin_irq_dma+0x468>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d05b      	beq.n	8001532 <stdin_irq_dma+0x352>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a72      	ldr	r2, [pc, #456]	; (800164c <stdin_irq_dma+0x46c>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d052      	beq.n	800152e <stdin_irq_dma+0x34e>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a6f      	ldr	r2, [pc, #444]	; (8001650 <stdin_irq_dma+0x470>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d048      	beq.n	8001528 <stdin_irq_dma+0x348>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a6d      	ldr	r2, [pc, #436]	; (8001654 <stdin_irq_dma+0x474>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d03e      	beq.n	8001522 <stdin_irq_dma+0x342>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a6a      	ldr	r2, [pc, #424]	; (8001658 <stdin_irq_dma+0x478>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d034      	beq.n	800151c <stdin_irq_dma+0x33c>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a68      	ldr	r2, [pc, #416]	; (800165c <stdin_irq_dma+0x47c>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d02a      	beq.n	8001516 <stdin_irq_dma+0x336>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a65      	ldr	r2, [pc, #404]	; (8001660 <stdin_irq_dma+0x480>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d020      	beq.n	8001510 <stdin_irq_dma+0x330>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a63      	ldr	r2, [pc, #396]	; (8001664 <stdin_irq_dma+0x484>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d016      	beq.n	800150a <stdin_irq_dma+0x32a>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a60      	ldr	r2, [pc, #384]	; (8001668 <stdin_irq_dma+0x488>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d00c      	beq.n	8001504 <stdin_irq_dma+0x324>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a5e      	ldr	r2, [pc, #376]	; (800166c <stdin_irq_dma+0x48c>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d102      	bne.n	80014fe <stdin_irq_dma+0x31e>
 80014f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014fc:	e01e      	b.n	800153c <stdin_irq_dma+0x35c>
 80014fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001502:	e01b      	b.n	800153c <stdin_irq_dma+0x35c>
 8001504:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001508:	e018      	b.n	800153c <stdin_irq_dma+0x35c>
 800150a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800150e:	e015      	b.n	800153c <stdin_irq_dma+0x35c>
 8001510:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001514:	e012      	b.n	800153c <stdin_irq_dma+0x35c>
 8001516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800151a:	e00f      	b.n	800153c <stdin_irq_dma+0x35c>
 800151c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001520:	e00c      	b.n	800153c <stdin_irq_dma+0x35c>
 8001522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001526:	e009      	b.n	800153c <stdin_irq_dma+0x35c>
 8001528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800152c:	e006      	b.n	800153c <stdin_irq_dma+0x35c>
 800152e:	2310      	movs	r3, #16
 8001530:	e004      	b.n	800153c <stdin_irq_dma+0x35c>
 8001532:	2310      	movs	r3, #16
 8001534:	e002      	b.n	800153c <stdin_irq_dma+0x35c>
 8001536:	2310      	movs	r3, #16
 8001538:	e000      	b.n	800153c <stdin_irq_dma+0x35c>
 800153a:	2310      	movs	r3, #16
 800153c:	4a4c      	ldr	r2, [pc, #304]	; (8001670 <stdin_irq_dma+0x490>)
 800153e:	60d3      	str	r3, [r2, #12]
 8001540:	e077      	b.n	8001632 <stdin_irq_dma+0x452>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a3d      	ldr	r2, [pc, #244]	; (8001640 <stdin_irq_dma+0x460>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d06d      	beq.n	800162c <stdin_irq_dma+0x44c>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a3a      	ldr	r2, [pc, #232]	; (8001644 <stdin_irq_dma+0x464>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d064      	beq.n	8001628 <stdin_irq_dma+0x448>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a38      	ldr	r2, [pc, #224]	; (8001648 <stdin_irq_dma+0x468>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d05b      	beq.n	8001624 <stdin_irq_dma+0x444>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a35      	ldr	r2, [pc, #212]	; (800164c <stdin_irq_dma+0x46c>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d052      	beq.n	8001620 <stdin_irq_dma+0x440>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a33      	ldr	r2, [pc, #204]	; (8001650 <stdin_irq_dma+0x470>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d048      	beq.n	800161a <stdin_irq_dma+0x43a>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a30      	ldr	r2, [pc, #192]	; (8001654 <stdin_irq_dma+0x474>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d03e      	beq.n	8001614 <stdin_irq_dma+0x434>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a2e      	ldr	r2, [pc, #184]	; (8001658 <stdin_irq_dma+0x478>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d034      	beq.n	800160e <stdin_irq_dma+0x42e>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a2b      	ldr	r2, [pc, #172]	; (800165c <stdin_irq_dma+0x47c>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d02a      	beq.n	8001608 <stdin_irq_dma+0x428>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a29      	ldr	r2, [pc, #164]	; (8001660 <stdin_irq_dma+0x480>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d020      	beq.n	8001602 <stdin_irq_dma+0x422>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a26      	ldr	r2, [pc, #152]	; (8001664 <stdin_irq_dma+0x484>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d016      	beq.n	80015fc <stdin_irq_dma+0x41c>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a24      	ldr	r2, [pc, #144]	; (8001668 <stdin_irq_dma+0x488>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d00c      	beq.n	80015f6 <stdin_irq_dma+0x416>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a21      	ldr	r2, [pc, #132]	; (800166c <stdin_irq_dma+0x48c>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d102      	bne.n	80015f0 <stdin_irq_dma+0x410>
 80015ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015ee:	e01e      	b.n	800162e <stdin_irq_dma+0x44e>
 80015f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80015f4:	e01b      	b.n	800162e <stdin_irq_dma+0x44e>
 80015f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015fa:	e018      	b.n	800162e <stdin_irq_dma+0x44e>
 80015fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001600:	e015      	b.n	800162e <stdin_irq_dma+0x44e>
 8001602:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001606:	e012      	b.n	800162e <stdin_irq_dma+0x44e>
 8001608:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800160c:	e00f      	b.n	800162e <stdin_irq_dma+0x44e>
 800160e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001612:	e00c      	b.n	800162e <stdin_irq_dma+0x44e>
 8001614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001618:	e009      	b.n	800162e <stdin_irq_dma+0x44e>
 800161a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800161e:	e006      	b.n	800162e <stdin_irq_dma+0x44e>
 8001620:	2310      	movs	r3, #16
 8001622:	e004      	b.n	800162e <stdin_irq_dma+0x44e>
 8001624:	2310      	movs	r3, #16
 8001626:	e002      	b.n	800162e <stdin_irq_dma+0x44e>
 8001628:	2310      	movs	r3, #16
 800162a:	e000      	b.n	800162e <stdin_irq_dma+0x44e>
 800162c:	2310      	movs	r3, #16
 800162e:	4a10      	ldr	r2, [pc, #64]	; (8001670 <stdin_irq_dma+0x490>)
 8001630:	6093      	str	r3, [r2, #8]
    check_buffer(in);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f001 f92c 	bl	8002890 <check_buffer>
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_FE_FLAG_INDEX(HDMA(in)));
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_DME_FLAG_INDEX(HDMA(in)));

    HAL_UART_Receive_DMA(in->huart, in->buffer, in->size);
  }
}
 8001638:	f001 b8ea 	b.w	8002810 <stdin_irq_dma+0x1630>
 800163c:	40026058 	.word	0x40026058
 8001640:	40026010 	.word	0x40026010
 8001644:	40026410 	.word	0x40026410
 8001648:	40026070 	.word	0x40026070
 800164c:	40026470 	.word	0x40026470
 8001650:	40026028 	.word	0x40026028
 8001654:	40026428 	.word	0x40026428
 8001658:	40026088 	.word	0x40026088
 800165c:	40026488 	.word	0x40026488
 8001660:	40026040 	.word	0x40026040
 8001664:	40026440 	.word	0x40026440
 8001668:	400260a0 	.word	0x400260a0
 800166c:	400264a0 	.word	0x400264a0
 8001670:	40026000 	.word	0x40026000
  else if (__HAL_DMA_GET_IT_SOURCE(HDMA(in), DMA_IT_TC))
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0310 	and.w	r3, r3, #16
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 823c 	beq.w	8001b00 <stdin_irq_dma+0x920>
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_TC_FLAG_INDEX(HDMA(in)));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4b7f      	ldr	r3, [pc, #508]	; (8001890 <stdin_irq_dma+0x6b0>)
 8001694:	429a      	cmp	r2, r3
 8001696:	d978      	bls.n	800178a <stdin_irq_dma+0x5aa>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a7c      	ldr	r2, [pc, #496]	; (8001894 <stdin_irq_dma+0x6b4>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d06d      	beq.n	8001782 <stdin_irq_dma+0x5a2>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a7a      	ldr	r2, [pc, #488]	; (8001898 <stdin_irq_dma+0x6b8>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d064      	beq.n	800177e <stdin_irq_dma+0x59e>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a77      	ldr	r2, [pc, #476]	; (800189c <stdin_irq_dma+0x6bc>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d05b      	beq.n	800177a <stdin_irq_dma+0x59a>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a75      	ldr	r2, [pc, #468]	; (80018a0 <stdin_irq_dma+0x6c0>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d052      	beq.n	8001776 <stdin_irq_dma+0x596>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a72      	ldr	r2, [pc, #456]	; (80018a4 <stdin_irq_dma+0x6c4>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d048      	beq.n	8001770 <stdin_irq_dma+0x590>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a70      	ldr	r2, [pc, #448]	; (80018a8 <stdin_irq_dma+0x6c8>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d03e      	beq.n	800176a <stdin_irq_dma+0x58a>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a6d      	ldr	r2, [pc, #436]	; (80018ac <stdin_irq_dma+0x6cc>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d034      	beq.n	8001764 <stdin_irq_dma+0x584>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a6b      	ldr	r2, [pc, #428]	; (80018b0 <stdin_irq_dma+0x6d0>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d02a      	beq.n	800175e <stdin_irq_dma+0x57e>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a68      	ldr	r2, [pc, #416]	; (80018b4 <stdin_irq_dma+0x6d4>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d020      	beq.n	8001758 <stdin_irq_dma+0x578>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a66      	ldr	r2, [pc, #408]	; (80018b8 <stdin_irq_dma+0x6d8>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d016      	beq.n	8001752 <stdin_irq_dma+0x572>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a63      	ldr	r2, [pc, #396]	; (80018bc <stdin_irq_dma+0x6dc>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d00c      	beq.n	800174c <stdin_irq_dma+0x56c>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a61      	ldr	r2, [pc, #388]	; (80018c0 <stdin_irq_dma+0x6e0>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d102      	bne.n	8001746 <stdin_irq_dma+0x566>
 8001740:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001744:	e01e      	b.n	8001784 <stdin_irq_dma+0x5a4>
 8001746:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800174a:	e01b      	b.n	8001784 <stdin_irq_dma+0x5a4>
 800174c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001750:	e018      	b.n	8001784 <stdin_irq_dma+0x5a4>
 8001752:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001756:	e015      	b.n	8001784 <stdin_irq_dma+0x5a4>
 8001758:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800175c:	e012      	b.n	8001784 <stdin_irq_dma+0x5a4>
 800175e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001762:	e00f      	b.n	8001784 <stdin_irq_dma+0x5a4>
 8001764:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001768:	e00c      	b.n	8001784 <stdin_irq_dma+0x5a4>
 800176a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800176e:	e009      	b.n	8001784 <stdin_irq_dma+0x5a4>
 8001770:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001774:	e006      	b.n	8001784 <stdin_irq_dma+0x5a4>
 8001776:	2320      	movs	r3, #32
 8001778:	e004      	b.n	8001784 <stdin_irq_dma+0x5a4>
 800177a:	2320      	movs	r3, #32
 800177c:	e002      	b.n	8001784 <stdin_irq_dma+0x5a4>
 800177e:	2320      	movs	r3, #32
 8001780:	e000      	b.n	8001784 <stdin_irq_dma+0x5a4>
 8001782:	2320      	movs	r3, #32
 8001784:	4a4f      	ldr	r2, [pc, #316]	; (80018c4 <stdin_irq_dma+0x6e4>)
 8001786:	60d3      	str	r3, [r2, #12]
 8001788:	e199      	b.n	8001abe <stdin_irq_dma+0x8de>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	4b4c      	ldr	r3, [pc, #304]	; (80018c8 <stdin_irq_dma+0x6e8>)
 8001796:	429a      	cmp	r2, r3
 8001798:	f240 8098 	bls.w	80018cc <stdin_irq_dma+0x6ec>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a3b      	ldr	r2, [pc, #236]	; (8001894 <stdin_irq_dma+0x6b4>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d06d      	beq.n	8001886 <stdin_irq_dma+0x6a6>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a39      	ldr	r2, [pc, #228]	; (8001898 <stdin_irq_dma+0x6b8>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d064      	beq.n	8001882 <stdin_irq_dma+0x6a2>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a36      	ldr	r2, [pc, #216]	; (800189c <stdin_irq_dma+0x6bc>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d05b      	beq.n	800187e <stdin_irq_dma+0x69e>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a34      	ldr	r2, [pc, #208]	; (80018a0 <stdin_irq_dma+0x6c0>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d052      	beq.n	800187a <stdin_irq_dma+0x69a>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a31      	ldr	r2, [pc, #196]	; (80018a4 <stdin_irq_dma+0x6c4>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d048      	beq.n	8001874 <stdin_irq_dma+0x694>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a2f      	ldr	r2, [pc, #188]	; (80018a8 <stdin_irq_dma+0x6c8>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d03e      	beq.n	800186e <stdin_irq_dma+0x68e>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a2c      	ldr	r2, [pc, #176]	; (80018ac <stdin_irq_dma+0x6cc>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d034      	beq.n	8001868 <stdin_irq_dma+0x688>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a2a      	ldr	r2, [pc, #168]	; (80018b0 <stdin_irq_dma+0x6d0>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d02a      	beq.n	8001862 <stdin_irq_dma+0x682>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a27      	ldr	r2, [pc, #156]	; (80018b4 <stdin_irq_dma+0x6d4>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d020      	beq.n	800185c <stdin_irq_dma+0x67c>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a25      	ldr	r2, [pc, #148]	; (80018b8 <stdin_irq_dma+0x6d8>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d016      	beq.n	8001856 <stdin_irq_dma+0x676>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a22      	ldr	r2, [pc, #136]	; (80018bc <stdin_irq_dma+0x6dc>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d00c      	beq.n	8001850 <stdin_irq_dma+0x670>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a20      	ldr	r2, [pc, #128]	; (80018c0 <stdin_irq_dma+0x6e0>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d102      	bne.n	800184a <stdin_irq_dma+0x66a>
 8001844:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001848:	e01e      	b.n	8001888 <stdin_irq_dma+0x6a8>
 800184a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800184e:	e01b      	b.n	8001888 <stdin_irq_dma+0x6a8>
 8001850:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001854:	e018      	b.n	8001888 <stdin_irq_dma+0x6a8>
 8001856:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800185a:	e015      	b.n	8001888 <stdin_irq_dma+0x6a8>
 800185c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001860:	e012      	b.n	8001888 <stdin_irq_dma+0x6a8>
 8001862:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001866:	e00f      	b.n	8001888 <stdin_irq_dma+0x6a8>
 8001868:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800186c:	e00c      	b.n	8001888 <stdin_irq_dma+0x6a8>
 800186e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001872:	e009      	b.n	8001888 <stdin_irq_dma+0x6a8>
 8001874:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001878:	e006      	b.n	8001888 <stdin_irq_dma+0x6a8>
 800187a:	2320      	movs	r3, #32
 800187c:	e004      	b.n	8001888 <stdin_irq_dma+0x6a8>
 800187e:	2320      	movs	r3, #32
 8001880:	e002      	b.n	8001888 <stdin_irq_dma+0x6a8>
 8001882:	2320      	movs	r3, #32
 8001884:	e000      	b.n	8001888 <stdin_irq_dma+0x6a8>
 8001886:	2320      	movs	r3, #32
 8001888:	4a0e      	ldr	r2, [pc, #56]	; (80018c4 <stdin_irq_dma+0x6e4>)
 800188a:	6093      	str	r3, [r2, #8]
 800188c:	e117      	b.n	8001abe <stdin_irq_dma+0x8de>
 800188e:	bf00      	nop
 8001890:	40026458 	.word	0x40026458
 8001894:	40026010 	.word	0x40026010
 8001898:	40026410 	.word	0x40026410
 800189c:	40026070 	.word	0x40026070
 80018a0:	40026470 	.word	0x40026470
 80018a4:	40026028 	.word	0x40026028
 80018a8:	40026428 	.word	0x40026428
 80018ac:	40026088 	.word	0x40026088
 80018b0:	40026488 	.word	0x40026488
 80018b4:	40026040 	.word	0x40026040
 80018b8:	40026440 	.word	0x40026440
 80018bc:	400260a0 	.word	0x400260a0
 80018c0:	400264a0 	.word	0x400264a0
 80018c4:	40026400 	.word	0x40026400
 80018c8:	400260b8 	.word	0x400260b8
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	461a      	mov	r2, r3
 80018d6:	4b7c      	ldr	r3, [pc, #496]	; (8001ac8 <stdin_irq_dma+0x8e8>)
 80018d8:	429a      	cmp	r2, r3
 80018da:	d978      	bls.n	80019ce <stdin_irq_dma+0x7ee>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a79      	ldr	r2, [pc, #484]	; (8001acc <stdin_irq_dma+0x8ec>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d06d      	beq.n	80019c6 <stdin_irq_dma+0x7e6>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a77      	ldr	r2, [pc, #476]	; (8001ad0 <stdin_irq_dma+0x8f0>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d064      	beq.n	80019c2 <stdin_irq_dma+0x7e2>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a74      	ldr	r2, [pc, #464]	; (8001ad4 <stdin_irq_dma+0x8f4>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d05b      	beq.n	80019be <stdin_irq_dma+0x7de>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a72      	ldr	r2, [pc, #456]	; (8001ad8 <stdin_irq_dma+0x8f8>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d052      	beq.n	80019ba <stdin_irq_dma+0x7da>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a6f      	ldr	r2, [pc, #444]	; (8001adc <stdin_irq_dma+0x8fc>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d048      	beq.n	80019b4 <stdin_irq_dma+0x7d4>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a6d      	ldr	r2, [pc, #436]	; (8001ae0 <stdin_irq_dma+0x900>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d03e      	beq.n	80019ae <stdin_irq_dma+0x7ce>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a6a      	ldr	r2, [pc, #424]	; (8001ae4 <stdin_irq_dma+0x904>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d034      	beq.n	80019a8 <stdin_irq_dma+0x7c8>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a68      	ldr	r2, [pc, #416]	; (8001ae8 <stdin_irq_dma+0x908>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d02a      	beq.n	80019a2 <stdin_irq_dma+0x7c2>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a65      	ldr	r2, [pc, #404]	; (8001aec <stdin_irq_dma+0x90c>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d020      	beq.n	800199c <stdin_irq_dma+0x7bc>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a63      	ldr	r2, [pc, #396]	; (8001af0 <stdin_irq_dma+0x910>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d016      	beq.n	8001996 <stdin_irq_dma+0x7b6>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a60      	ldr	r2, [pc, #384]	; (8001af4 <stdin_irq_dma+0x914>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d00c      	beq.n	8001990 <stdin_irq_dma+0x7b0>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a5e      	ldr	r2, [pc, #376]	; (8001af8 <stdin_irq_dma+0x918>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d102      	bne.n	800198a <stdin_irq_dma+0x7aa>
 8001984:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001988:	e01e      	b.n	80019c8 <stdin_irq_dma+0x7e8>
 800198a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800198e:	e01b      	b.n	80019c8 <stdin_irq_dma+0x7e8>
 8001990:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001994:	e018      	b.n	80019c8 <stdin_irq_dma+0x7e8>
 8001996:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800199a:	e015      	b.n	80019c8 <stdin_irq_dma+0x7e8>
 800199c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019a0:	e012      	b.n	80019c8 <stdin_irq_dma+0x7e8>
 80019a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019a6:	e00f      	b.n	80019c8 <stdin_irq_dma+0x7e8>
 80019a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019ac:	e00c      	b.n	80019c8 <stdin_irq_dma+0x7e8>
 80019ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019b2:	e009      	b.n	80019c8 <stdin_irq_dma+0x7e8>
 80019b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019b8:	e006      	b.n	80019c8 <stdin_irq_dma+0x7e8>
 80019ba:	2320      	movs	r3, #32
 80019bc:	e004      	b.n	80019c8 <stdin_irq_dma+0x7e8>
 80019be:	2320      	movs	r3, #32
 80019c0:	e002      	b.n	80019c8 <stdin_irq_dma+0x7e8>
 80019c2:	2320      	movs	r3, #32
 80019c4:	e000      	b.n	80019c8 <stdin_irq_dma+0x7e8>
 80019c6:	2320      	movs	r3, #32
 80019c8:	4a4c      	ldr	r2, [pc, #304]	; (8001afc <stdin_irq_dma+0x91c>)
 80019ca:	60d3      	str	r3, [r2, #12]
 80019cc:	e077      	b.n	8001abe <stdin_irq_dma+0x8de>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a3d      	ldr	r2, [pc, #244]	; (8001acc <stdin_irq_dma+0x8ec>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d06d      	beq.n	8001ab8 <stdin_irq_dma+0x8d8>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a3a      	ldr	r2, [pc, #232]	; (8001ad0 <stdin_irq_dma+0x8f0>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d064      	beq.n	8001ab4 <stdin_irq_dma+0x8d4>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a38      	ldr	r2, [pc, #224]	; (8001ad4 <stdin_irq_dma+0x8f4>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d05b      	beq.n	8001ab0 <stdin_irq_dma+0x8d0>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a35      	ldr	r2, [pc, #212]	; (8001ad8 <stdin_irq_dma+0x8f8>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d052      	beq.n	8001aac <stdin_irq_dma+0x8cc>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a33      	ldr	r2, [pc, #204]	; (8001adc <stdin_irq_dma+0x8fc>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d048      	beq.n	8001aa6 <stdin_irq_dma+0x8c6>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a30      	ldr	r2, [pc, #192]	; (8001ae0 <stdin_irq_dma+0x900>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d03e      	beq.n	8001aa0 <stdin_irq_dma+0x8c0>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a2e      	ldr	r2, [pc, #184]	; (8001ae4 <stdin_irq_dma+0x904>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d034      	beq.n	8001a9a <stdin_irq_dma+0x8ba>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a2b      	ldr	r2, [pc, #172]	; (8001ae8 <stdin_irq_dma+0x908>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d02a      	beq.n	8001a94 <stdin_irq_dma+0x8b4>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a29      	ldr	r2, [pc, #164]	; (8001aec <stdin_irq_dma+0x90c>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d020      	beq.n	8001a8e <stdin_irq_dma+0x8ae>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a26      	ldr	r2, [pc, #152]	; (8001af0 <stdin_irq_dma+0x910>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d016      	beq.n	8001a88 <stdin_irq_dma+0x8a8>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a24      	ldr	r2, [pc, #144]	; (8001af4 <stdin_irq_dma+0x914>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d00c      	beq.n	8001a82 <stdin_irq_dma+0x8a2>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a21      	ldr	r2, [pc, #132]	; (8001af8 <stdin_irq_dma+0x918>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d102      	bne.n	8001a7c <stdin_irq_dma+0x89c>
 8001a76:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a7a:	e01e      	b.n	8001aba <stdin_irq_dma+0x8da>
 8001a7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001a80:	e01b      	b.n	8001aba <stdin_irq_dma+0x8da>
 8001a82:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a86:	e018      	b.n	8001aba <stdin_irq_dma+0x8da>
 8001a88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a8c:	e015      	b.n	8001aba <stdin_irq_dma+0x8da>
 8001a8e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a92:	e012      	b.n	8001aba <stdin_irq_dma+0x8da>
 8001a94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a98:	e00f      	b.n	8001aba <stdin_irq_dma+0x8da>
 8001a9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a9e:	e00c      	b.n	8001aba <stdin_irq_dma+0x8da>
 8001aa0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001aa4:	e009      	b.n	8001aba <stdin_irq_dma+0x8da>
 8001aa6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001aaa:	e006      	b.n	8001aba <stdin_irq_dma+0x8da>
 8001aac:	2320      	movs	r3, #32
 8001aae:	e004      	b.n	8001aba <stdin_irq_dma+0x8da>
 8001ab0:	2320      	movs	r3, #32
 8001ab2:	e002      	b.n	8001aba <stdin_irq_dma+0x8da>
 8001ab4:	2320      	movs	r3, #32
 8001ab6:	e000      	b.n	8001aba <stdin_irq_dma+0x8da>
 8001ab8:	2320      	movs	r3, #32
 8001aba:	4a10      	ldr	r2, [pc, #64]	; (8001afc <stdin_irq_dma+0x91c>)
 8001abc:	6093      	str	r3, [r2, #8]
    check_buffer(in);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 fee6 	bl	8002890 <check_buffer>
}
 8001ac4:	f000 bea4 	b.w	8002810 <stdin_irq_dma+0x1630>
 8001ac8:	40026058 	.word	0x40026058
 8001acc:	40026010 	.word	0x40026010
 8001ad0:	40026410 	.word	0x40026410
 8001ad4:	40026070 	.word	0x40026070
 8001ad8:	40026470 	.word	0x40026470
 8001adc:	40026028 	.word	0x40026028
 8001ae0:	40026428 	.word	0x40026428
 8001ae4:	40026088 	.word	0x40026088
 8001ae8:	40026488 	.word	0x40026488
 8001aec:	40026040 	.word	0x40026040
 8001af0:	40026440 	.word	0x40026440
 8001af4:	400260a0 	.word	0x400260a0
 8001af8:	400264a0 	.word	0x400264a0
 8001afc:	40026000 	.word	0x40026000
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_TE_FLAG_INDEX(HDMA(in)));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4b7f      	ldr	r3, [pc, #508]	; (8001d08 <stdin_irq_dma+0xb28>)
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d978      	bls.n	8001c02 <stdin_irq_dma+0xa22>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a7c      	ldr	r2, [pc, #496]	; (8001d0c <stdin_irq_dma+0xb2c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d06d      	beq.n	8001bfa <stdin_irq_dma+0xa1a>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a7a      	ldr	r2, [pc, #488]	; (8001d10 <stdin_irq_dma+0xb30>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d064      	beq.n	8001bf6 <stdin_irq_dma+0xa16>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a77      	ldr	r2, [pc, #476]	; (8001d14 <stdin_irq_dma+0xb34>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d05b      	beq.n	8001bf2 <stdin_irq_dma+0xa12>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a75      	ldr	r2, [pc, #468]	; (8001d18 <stdin_irq_dma+0xb38>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d052      	beq.n	8001bee <stdin_irq_dma+0xa0e>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a72      	ldr	r2, [pc, #456]	; (8001d1c <stdin_irq_dma+0xb3c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d048      	beq.n	8001be8 <stdin_irq_dma+0xa08>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a70      	ldr	r2, [pc, #448]	; (8001d20 <stdin_irq_dma+0xb40>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d03e      	beq.n	8001be2 <stdin_irq_dma+0xa02>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a6d      	ldr	r2, [pc, #436]	; (8001d24 <stdin_irq_dma+0xb44>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d034      	beq.n	8001bdc <stdin_irq_dma+0x9fc>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a6b      	ldr	r2, [pc, #428]	; (8001d28 <stdin_irq_dma+0xb48>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d02a      	beq.n	8001bd6 <stdin_irq_dma+0x9f6>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a68      	ldr	r2, [pc, #416]	; (8001d2c <stdin_irq_dma+0xb4c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d020      	beq.n	8001bd0 <stdin_irq_dma+0x9f0>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a66      	ldr	r2, [pc, #408]	; (8001d30 <stdin_irq_dma+0xb50>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d016      	beq.n	8001bca <stdin_irq_dma+0x9ea>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a63      	ldr	r2, [pc, #396]	; (8001d34 <stdin_irq_dma+0xb54>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d00c      	beq.n	8001bc4 <stdin_irq_dma+0x9e4>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a61      	ldr	r2, [pc, #388]	; (8001d38 <stdin_irq_dma+0xb58>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d102      	bne.n	8001bbe <stdin_irq_dma+0x9de>
 8001bb8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001bbc:	e01e      	b.n	8001bfc <stdin_irq_dma+0xa1c>
 8001bbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bc2:	e01b      	b.n	8001bfc <stdin_irq_dma+0xa1c>
 8001bc4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001bc8:	e018      	b.n	8001bfc <stdin_irq_dma+0xa1c>
 8001bca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001bce:	e015      	b.n	8001bfc <stdin_irq_dma+0xa1c>
 8001bd0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001bd4:	e012      	b.n	8001bfc <stdin_irq_dma+0xa1c>
 8001bd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bda:	e00f      	b.n	8001bfc <stdin_irq_dma+0xa1c>
 8001bdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001be0:	e00c      	b.n	8001bfc <stdin_irq_dma+0xa1c>
 8001be2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001be6:	e009      	b.n	8001bfc <stdin_irq_dma+0xa1c>
 8001be8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bec:	e006      	b.n	8001bfc <stdin_irq_dma+0xa1c>
 8001bee:	2308      	movs	r3, #8
 8001bf0:	e004      	b.n	8001bfc <stdin_irq_dma+0xa1c>
 8001bf2:	2308      	movs	r3, #8
 8001bf4:	e002      	b.n	8001bfc <stdin_irq_dma+0xa1c>
 8001bf6:	2308      	movs	r3, #8
 8001bf8:	e000      	b.n	8001bfc <stdin_irq_dma+0xa1c>
 8001bfa:	2308      	movs	r3, #8
 8001bfc:	4a4f      	ldr	r2, [pc, #316]	; (8001d3c <stdin_irq_dma+0xb5c>)
 8001bfe:	60d3      	str	r3, [r2, #12]
 8001c00:	e1b7      	b.n	8001f72 <stdin_irq_dma+0xd92>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	4b4c      	ldr	r3, [pc, #304]	; (8001d40 <stdin_irq_dma+0xb60>)
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	f240 8098 	bls.w	8001d44 <stdin_irq_dma+0xb64>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a3b      	ldr	r2, [pc, #236]	; (8001d0c <stdin_irq_dma+0xb2c>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d06d      	beq.n	8001cfe <stdin_irq_dma+0xb1e>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a39      	ldr	r2, [pc, #228]	; (8001d10 <stdin_irq_dma+0xb30>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d064      	beq.n	8001cfa <stdin_irq_dma+0xb1a>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a36      	ldr	r2, [pc, #216]	; (8001d14 <stdin_irq_dma+0xb34>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d05b      	beq.n	8001cf6 <stdin_irq_dma+0xb16>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a34      	ldr	r2, [pc, #208]	; (8001d18 <stdin_irq_dma+0xb38>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d052      	beq.n	8001cf2 <stdin_irq_dma+0xb12>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a31      	ldr	r2, [pc, #196]	; (8001d1c <stdin_irq_dma+0xb3c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d048      	beq.n	8001cec <stdin_irq_dma+0xb0c>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a2f      	ldr	r2, [pc, #188]	; (8001d20 <stdin_irq_dma+0xb40>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d03e      	beq.n	8001ce6 <stdin_irq_dma+0xb06>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a2c      	ldr	r2, [pc, #176]	; (8001d24 <stdin_irq_dma+0xb44>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d034      	beq.n	8001ce0 <stdin_irq_dma+0xb00>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a2a      	ldr	r2, [pc, #168]	; (8001d28 <stdin_irq_dma+0xb48>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d02a      	beq.n	8001cda <stdin_irq_dma+0xafa>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a27      	ldr	r2, [pc, #156]	; (8001d2c <stdin_irq_dma+0xb4c>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d020      	beq.n	8001cd4 <stdin_irq_dma+0xaf4>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a25      	ldr	r2, [pc, #148]	; (8001d30 <stdin_irq_dma+0xb50>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d016      	beq.n	8001cce <stdin_irq_dma+0xaee>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a22      	ldr	r2, [pc, #136]	; (8001d34 <stdin_irq_dma+0xb54>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d00c      	beq.n	8001cc8 <stdin_irq_dma+0xae8>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a20      	ldr	r2, [pc, #128]	; (8001d38 <stdin_irq_dma+0xb58>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d102      	bne.n	8001cc2 <stdin_irq_dma+0xae2>
 8001cbc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001cc0:	e01e      	b.n	8001d00 <stdin_irq_dma+0xb20>
 8001cc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cc6:	e01b      	b.n	8001d00 <stdin_irq_dma+0xb20>
 8001cc8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001ccc:	e018      	b.n	8001d00 <stdin_irq_dma+0xb20>
 8001cce:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001cd2:	e015      	b.n	8001d00 <stdin_irq_dma+0xb20>
 8001cd4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001cd8:	e012      	b.n	8001d00 <stdin_irq_dma+0xb20>
 8001cda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cde:	e00f      	b.n	8001d00 <stdin_irq_dma+0xb20>
 8001ce0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ce4:	e00c      	b.n	8001d00 <stdin_irq_dma+0xb20>
 8001ce6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cea:	e009      	b.n	8001d00 <stdin_irq_dma+0xb20>
 8001cec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cf0:	e006      	b.n	8001d00 <stdin_irq_dma+0xb20>
 8001cf2:	2308      	movs	r3, #8
 8001cf4:	e004      	b.n	8001d00 <stdin_irq_dma+0xb20>
 8001cf6:	2308      	movs	r3, #8
 8001cf8:	e002      	b.n	8001d00 <stdin_irq_dma+0xb20>
 8001cfa:	2308      	movs	r3, #8
 8001cfc:	e000      	b.n	8001d00 <stdin_irq_dma+0xb20>
 8001cfe:	2308      	movs	r3, #8
 8001d00:	4a0e      	ldr	r2, [pc, #56]	; (8001d3c <stdin_irq_dma+0xb5c>)
 8001d02:	6093      	str	r3, [r2, #8]
 8001d04:	e135      	b.n	8001f72 <stdin_irq_dma+0xd92>
 8001d06:	bf00      	nop
 8001d08:	40026458 	.word	0x40026458
 8001d0c:	40026010 	.word	0x40026010
 8001d10:	40026410 	.word	0x40026410
 8001d14:	40026070 	.word	0x40026070
 8001d18:	40026470 	.word	0x40026470
 8001d1c:	40026028 	.word	0x40026028
 8001d20:	40026428 	.word	0x40026428
 8001d24:	40026088 	.word	0x40026088
 8001d28:	40026488 	.word	0x40026488
 8001d2c:	40026040 	.word	0x40026040
 8001d30:	40026440 	.word	0x40026440
 8001d34:	400260a0 	.word	0x400260a0
 8001d38:	400264a0 	.word	0x400264a0
 8001d3c:	40026400 	.word	0x40026400
 8001d40:	400260b8 	.word	0x400260b8
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b79      	ldr	r3, [pc, #484]	; (8001f34 <stdin_irq_dma+0xd54>)
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d978      	bls.n	8001e46 <stdin_irq_dma+0xc66>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a76      	ldr	r2, [pc, #472]	; (8001f38 <stdin_irq_dma+0xd58>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d06d      	beq.n	8001e3e <stdin_irq_dma+0xc5e>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a74      	ldr	r2, [pc, #464]	; (8001f3c <stdin_irq_dma+0xd5c>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d064      	beq.n	8001e3a <stdin_irq_dma+0xc5a>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a71      	ldr	r2, [pc, #452]	; (8001f40 <stdin_irq_dma+0xd60>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d05b      	beq.n	8001e36 <stdin_irq_dma+0xc56>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a6f      	ldr	r2, [pc, #444]	; (8001f44 <stdin_irq_dma+0xd64>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d052      	beq.n	8001e32 <stdin_irq_dma+0xc52>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a6c      	ldr	r2, [pc, #432]	; (8001f48 <stdin_irq_dma+0xd68>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d048      	beq.n	8001e2c <stdin_irq_dma+0xc4c>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a6a      	ldr	r2, [pc, #424]	; (8001f4c <stdin_irq_dma+0xd6c>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d03e      	beq.n	8001e26 <stdin_irq_dma+0xc46>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a67      	ldr	r2, [pc, #412]	; (8001f50 <stdin_irq_dma+0xd70>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d034      	beq.n	8001e20 <stdin_irq_dma+0xc40>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a65      	ldr	r2, [pc, #404]	; (8001f54 <stdin_irq_dma+0xd74>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d02a      	beq.n	8001e1a <stdin_irq_dma+0xc3a>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a62      	ldr	r2, [pc, #392]	; (8001f58 <stdin_irq_dma+0xd78>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d020      	beq.n	8001e14 <stdin_irq_dma+0xc34>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a60      	ldr	r2, [pc, #384]	; (8001f5c <stdin_irq_dma+0xd7c>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d016      	beq.n	8001e0e <stdin_irq_dma+0xc2e>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a5d      	ldr	r2, [pc, #372]	; (8001f60 <stdin_irq_dma+0xd80>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d00c      	beq.n	8001e08 <stdin_irq_dma+0xc28>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a5b      	ldr	r2, [pc, #364]	; (8001f64 <stdin_irq_dma+0xd84>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d102      	bne.n	8001e02 <stdin_irq_dma+0xc22>
 8001dfc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001e00:	e01e      	b.n	8001e40 <stdin_irq_dma+0xc60>
 8001e02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e06:	e01b      	b.n	8001e40 <stdin_irq_dma+0xc60>
 8001e08:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001e0c:	e018      	b.n	8001e40 <stdin_irq_dma+0xc60>
 8001e0e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001e12:	e015      	b.n	8001e40 <stdin_irq_dma+0xc60>
 8001e14:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001e18:	e012      	b.n	8001e40 <stdin_irq_dma+0xc60>
 8001e1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e1e:	e00f      	b.n	8001e40 <stdin_irq_dma+0xc60>
 8001e20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e24:	e00c      	b.n	8001e40 <stdin_irq_dma+0xc60>
 8001e26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e2a:	e009      	b.n	8001e40 <stdin_irq_dma+0xc60>
 8001e2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e30:	e006      	b.n	8001e40 <stdin_irq_dma+0xc60>
 8001e32:	2308      	movs	r3, #8
 8001e34:	e004      	b.n	8001e40 <stdin_irq_dma+0xc60>
 8001e36:	2308      	movs	r3, #8
 8001e38:	e002      	b.n	8001e40 <stdin_irq_dma+0xc60>
 8001e3a:	2308      	movs	r3, #8
 8001e3c:	e000      	b.n	8001e40 <stdin_irq_dma+0xc60>
 8001e3e:	2308      	movs	r3, #8
 8001e40:	4a49      	ldr	r2, [pc, #292]	; (8001f68 <stdin_irq_dma+0xd88>)
 8001e42:	60d3      	str	r3, [r2, #12]
 8001e44:	e095      	b.n	8001f72 <stdin_irq_dma+0xd92>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a3a      	ldr	r2, [pc, #232]	; (8001f38 <stdin_irq_dma+0xd58>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	f000 808b 	beq.w	8001f6c <stdin_irq_dma+0xd8c>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a37      	ldr	r2, [pc, #220]	; (8001f3c <stdin_irq_dma+0xd5c>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d064      	beq.n	8001f2e <stdin_irq_dma+0xd4e>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a34      	ldr	r2, [pc, #208]	; (8001f40 <stdin_irq_dma+0xd60>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d05b      	beq.n	8001f2a <stdin_irq_dma+0xd4a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a32      	ldr	r2, [pc, #200]	; (8001f44 <stdin_irq_dma+0xd64>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d052      	beq.n	8001f26 <stdin_irq_dma+0xd46>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a2f      	ldr	r2, [pc, #188]	; (8001f48 <stdin_irq_dma+0xd68>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d048      	beq.n	8001f20 <stdin_irq_dma+0xd40>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a2d      	ldr	r2, [pc, #180]	; (8001f4c <stdin_irq_dma+0xd6c>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d03e      	beq.n	8001f1a <stdin_irq_dma+0xd3a>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a2a      	ldr	r2, [pc, #168]	; (8001f50 <stdin_irq_dma+0xd70>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d034      	beq.n	8001f14 <stdin_irq_dma+0xd34>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a28      	ldr	r2, [pc, #160]	; (8001f54 <stdin_irq_dma+0xd74>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d02a      	beq.n	8001f0e <stdin_irq_dma+0xd2e>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a25      	ldr	r2, [pc, #148]	; (8001f58 <stdin_irq_dma+0xd78>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d020      	beq.n	8001f08 <stdin_irq_dma+0xd28>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a23      	ldr	r2, [pc, #140]	; (8001f5c <stdin_irq_dma+0xd7c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d016      	beq.n	8001f02 <stdin_irq_dma+0xd22>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a20      	ldr	r2, [pc, #128]	; (8001f60 <stdin_irq_dma+0xd80>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d00c      	beq.n	8001efc <stdin_irq_dma+0xd1c>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a1e      	ldr	r2, [pc, #120]	; (8001f64 <stdin_irq_dma+0xd84>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d102      	bne.n	8001ef6 <stdin_irq_dma+0xd16>
 8001ef0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001ef4:	e03b      	b.n	8001f6e <stdin_irq_dma+0xd8e>
 8001ef6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001efa:	e038      	b.n	8001f6e <stdin_irq_dma+0xd8e>
 8001efc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f00:	e035      	b.n	8001f6e <stdin_irq_dma+0xd8e>
 8001f02:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f06:	e032      	b.n	8001f6e <stdin_irq_dma+0xd8e>
 8001f08:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f0c:	e02f      	b.n	8001f6e <stdin_irq_dma+0xd8e>
 8001f0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f12:	e02c      	b.n	8001f6e <stdin_irq_dma+0xd8e>
 8001f14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f18:	e029      	b.n	8001f6e <stdin_irq_dma+0xd8e>
 8001f1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f1e:	e026      	b.n	8001f6e <stdin_irq_dma+0xd8e>
 8001f20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f24:	e023      	b.n	8001f6e <stdin_irq_dma+0xd8e>
 8001f26:	2308      	movs	r3, #8
 8001f28:	e021      	b.n	8001f6e <stdin_irq_dma+0xd8e>
 8001f2a:	2308      	movs	r3, #8
 8001f2c:	e01f      	b.n	8001f6e <stdin_irq_dma+0xd8e>
 8001f2e:	2308      	movs	r3, #8
 8001f30:	e01d      	b.n	8001f6e <stdin_irq_dma+0xd8e>
 8001f32:	bf00      	nop
 8001f34:	40026058 	.word	0x40026058
 8001f38:	40026010 	.word	0x40026010
 8001f3c:	40026410 	.word	0x40026410
 8001f40:	40026070 	.word	0x40026070
 8001f44:	40026470 	.word	0x40026470
 8001f48:	40026028 	.word	0x40026028
 8001f4c:	40026428 	.word	0x40026428
 8001f50:	40026088 	.word	0x40026088
 8001f54:	40026488 	.word	0x40026488
 8001f58:	40026040 	.word	0x40026040
 8001f5c:	40026440 	.word	0x40026440
 8001f60:	400260a0 	.word	0x400260a0
 8001f64:	400264a0 	.word	0x400264a0
 8001f68:	40026000 	.word	0x40026000
 8001f6c:	2308      	movs	r3, #8
 8001f6e:	4a7e      	ldr	r2, [pc, #504]	; (8002168 <stdin_irq_dma+0xf88>)
 8001f70:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_FE_FLAG_INDEX(HDMA(in)));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	4b7b      	ldr	r3, [pc, #492]	; (800216c <stdin_irq_dma+0xf8c>)
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d974      	bls.n	800206c <stdin_irq_dma+0xe8c>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a79      	ldr	r2, [pc, #484]	; (8002170 <stdin_irq_dma+0xf90>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d069      	beq.n	8002064 <stdin_irq_dma+0xe84>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a76      	ldr	r2, [pc, #472]	; (8002174 <stdin_irq_dma+0xf94>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d060      	beq.n	8002060 <stdin_irq_dma+0xe80>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a74      	ldr	r2, [pc, #464]	; (8002178 <stdin_irq_dma+0xf98>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d057      	beq.n	800205c <stdin_irq_dma+0xe7c>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a71      	ldr	r2, [pc, #452]	; (800217c <stdin_irq_dma+0xf9c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d04e      	beq.n	8002058 <stdin_irq_dma+0xe78>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a6f      	ldr	r2, [pc, #444]	; (8002180 <stdin_irq_dma+0xfa0>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d045      	beq.n	8002054 <stdin_irq_dma+0xe74>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a6c      	ldr	r2, [pc, #432]	; (8002184 <stdin_irq_dma+0xfa4>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d03c      	beq.n	8002050 <stdin_irq_dma+0xe70>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a6a      	ldr	r2, [pc, #424]	; (8002188 <stdin_irq_dma+0xfa8>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d033      	beq.n	800204c <stdin_irq_dma+0xe6c>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a67      	ldr	r2, [pc, #412]	; (800218c <stdin_irq_dma+0xfac>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d02a      	beq.n	8002048 <stdin_irq_dma+0xe68>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a65      	ldr	r2, [pc, #404]	; (8002190 <stdin_irq_dma+0xfb0>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d020      	beq.n	8002042 <stdin_irq_dma+0xe62>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a62      	ldr	r2, [pc, #392]	; (8002194 <stdin_irq_dma+0xfb4>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d016      	beq.n	800203c <stdin_irq_dma+0xe5c>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a60      	ldr	r2, [pc, #384]	; (8002198 <stdin_irq_dma+0xfb8>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d00c      	beq.n	8002036 <stdin_irq_dma+0xe56>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a5d      	ldr	r2, [pc, #372]	; (800219c <stdin_irq_dma+0xfbc>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d102      	bne.n	8002030 <stdin_irq_dma+0xe50>
 800202a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800202e:	e01a      	b.n	8002066 <stdin_irq_dma+0xe86>
 8002030:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002034:	e017      	b.n	8002066 <stdin_irq_dma+0xe86>
 8002036:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800203a:	e014      	b.n	8002066 <stdin_irq_dma+0xe86>
 800203c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002040:	e011      	b.n	8002066 <stdin_irq_dma+0xe86>
 8002042:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002046:	e00e      	b.n	8002066 <stdin_irq_dma+0xe86>
 8002048:	2340      	movs	r3, #64	; 0x40
 800204a:	e00c      	b.n	8002066 <stdin_irq_dma+0xe86>
 800204c:	2340      	movs	r3, #64	; 0x40
 800204e:	e00a      	b.n	8002066 <stdin_irq_dma+0xe86>
 8002050:	2340      	movs	r3, #64	; 0x40
 8002052:	e008      	b.n	8002066 <stdin_irq_dma+0xe86>
 8002054:	2340      	movs	r3, #64	; 0x40
 8002056:	e006      	b.n	8002066 <stdin_irq_dma+0xe86>
 8002058:	2301      	movs	r3, #1
 800205a:	e004      	b.n	8002066 <stdin_irq_dma+0xe86>
 800205c:	2301      	movs	r3, #1
 800205e:	e002      	b.n	8002066 <stdin_irq_dma+0xe86>
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <stdin_irq_dma+0xe86>
 8002064:	2301      	movs	r3, #1
 8002066:	4a4e      	ldr	r2, [pc, #312]	; (80021a0 <stdin_irq_dma+0xfc0>)
 8002068:	60d3      	str	r3, [r2, #12]
 800206a:	e1ac      	b.n	80023c6 <stdin_irq_dma+0x11e6>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	461a      	mov	r2, r3
 8002076:	4b4b      	ldr	r3, [pc, #300]	; (80021a4 <stdin_irq_dma+0xfc4>)
 8002078:	429a      	cmp	r2, r3
 800207a:	f240 8095 	bls.w	80021a8 <stdin_irq_dma+0xfc8>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a3a      	ldr	r2, [pc, #232]	; (8002170 <stdin_irq_dma+0xf90>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d069      	beq.n	8002160 <stdin_irq_dma+0xf80>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a37      	ldr	r2, [pc, #220]	; (8002174 <stdin_irq_dma+0xf94>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d060      	beq.n	800215c <stdin_irq_dma+0xf7c>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a35      	ldr	r2, [pc, #212]	; (8002178 <stdin_irq_dma+0xf98>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d057      	beq.n	8002158 <stdin_irq_dma+0xf78>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a32      	ldr	r2, [pc, #200]	; (800217c <stdin_irq_dma+0xf9c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d04e      	beq.n	8002154 <stdin_irq_dma+0xf74>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a30      	ldr	r2, [pc, #192]	; (8002180 <stdin_irq_dma+0xfa0>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d045      	beq.n	8002150 <stdin_irq_dma+0xf70>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a2d      	ldr	r2, [pc, #180]	; (8002184 <stdin_irq_dma+0xfa4>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d03c      	beq.n	800214c <stdin_irq_dma+0xf6c>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a2b      	ldr	r2, [pc, #172]	; (8002188 <stdin_irq_dma+0xfa8>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d033      	beq.n	8002148 <stdin_irq_dma+0xf68>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a28      	ldr	r2, [pc, #160]	; (800218c <stdin_irq_dma+0xfac>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d02a      	beq.n	8002144 <stdin_irq_dma+0xf64>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a26      	ldr	r2, [pc, #152]	; (8002190 <stdin_irq_dma+0xfb0>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d020      	beq.n	800213e <stdin_irq_dma+0xf5e>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a23      	ldr	r2, [pc, #140]	; (8002194 <stdin_irq_dma+0xfb4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d016      	beq.n	8002138 <stdin_irq_dma+0xf58>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a21      	ldr	r2, [pc, #132]	; (8002198 <stdin_irq_dma+0xfb8>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d00c      	beq.n	8002132 <stdin_irq_dma+0xf52>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a1e      	ldr	r2, [pc, #120]	; (800219c <stdin_irq_dma+0xfbc>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d102      	bne.n	800212c <stdin_irq_dma+0xf4c>
 8002126:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800212a:	e01a      	b.n	8002162 <stdin_irq_dma+0xf82>
 800212c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002130:	e017      	b.n	8002162 <stdin_irq_dma+0xf82>
 8002132:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002136:	e014      	b.n	8002162 <stdin_irq_dma+0xf82>
 8002138:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800213c:	e011      	b.n	8002162 <stdin_irq_dma+0xf82>
 800213e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002142:	e00e      	b.n	8002162 <stdin_irq_dma+0xf82>
 8002144:	2340      	movs	r3, #64	; 0x40
 8002146:	e00c      	b.n	8002162 <stdin_irq_dma+0xf82>
 8002148:	2340      	movs	r3, #64	; 0x40
 800214a:	e00a      	b.n	8002162 <stdin_irq_dma+0xf82>
 800214c:	2340      	movs	r3, #64	; 0x40
 800214e:	e008      	b.n	8002162 <stdin_irq_dma+0xf82>
 8002150:	2340      	movs	r3, #64	; 0x40
 8002152:	e006      	b.n	8002162 <stdin_irq_dma+0xf82>
 8002154:	2301      	movs	r3, #1
 8002156:	e004      	b.n	8002162 <stdin_irq_dma+0xf82>
 8002158:	2301      	movs	r3, #1
 800215a:	e002      	b.n	8002162 <stdin_irq_dma+0xf82>
 800215c:	2301      	movs	r3, #1
 800215e:	e000      	b.n	8002162 <stdin_irq_dma+0xf82>
 8002160:	2301      	movs	r3, #1
 8002162:	4a0f      	ldr	r2, [pc, #60]	; (80021a0 <stdin_irq_dma+0xfc0>)
 8002164:	6093      	str	r3, [r2, #8]
 8002166:	e12e      	b.n	80023c6 <stdin_irq_dma+0x11e6>
 8002168:	40026000 	.word	0x40026000
 800216c:	40026458 	.word	0x40026458
 8002170:	40026010 	.word	0x40026010
 8002174:	40026410 	.word	0x40026410
 8002178:	40026070 	.word	0x40026070
 800217c:	40026470 	.word	0x40026470
 8002180:	40026028 	.word	0x40026028
 8002184:	40026428 	.word	0x40026428
 8002188:	40026088 	.word	0x40026088
 800218c:	40026488 	.word	0x40026488
 8002190:	40026040 	.word	0x40026040
 8002194:	40026440 	.word	0x40026440
 8002198:	400260a0 	.word	0x400260a0
 800219c:	400264a0 	.word	0x400264a0
 80021a0:	40026400 	.word	0x40026400
 80021a4:	400260b8 	.word	0x400260b8
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	4b75      	ldr	r3, [pc, #468]	; (8002388 <stdin_irq_dma+0x11a8>)
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d974      	bls.n	80022a2 <stdin_irq_dma+0x10c2>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a72      	ldr	r2, [pc, #456]	; (800238c <stdin_irq_dma+0x11ac>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d069      	beq.n	800229a <stdin_irq_dma+0x10ba>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a70      	ldr	r2, [pc, #448]	; (8002390 <stdin_irq_dma+0x11b0>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d060      	beq.n	8002296 <stdin_irq_dma+0x10b6>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a6d      	ldr	r2, [pc, #436]	; (8002394 <stdin_irq_dma+0x11b4>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d057      	beq.n	8002292 <stdin_irq_dma+0x10b2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a6b      	ldr	r2, [pc, #428]	; (8002398 <stdin_irq_dma+0x11b8>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d04e      	beq.n	800228e <stdin_irq_dma+0x10ae>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a68      	ldr	r2, [pc, #416]	; (800239c <stdin_irq_dma+0x11bc>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d045      	beq.n	800228a <stdin_irq_dma+0x10aa>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a66      	ldr	r2, [pc, #408]	; (80023a0 <stdin_irq_dma+0x11c0>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d03c      	beq.n	8002286 <stdin_irq_dma+0x10a6>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a63      	ldr	r2, [pc, #396]	; (80023a4 <stdin_irq_dma+0x11c4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d033      	beq.n	8002282 <stdin_irq_dma+0x10a2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a61      	ldr	r2, [pc, #388]	; (80023a8 <stdin_irq_dma+0x11c8>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d02a      	beq.n	800227e <stdin_irq_dma+0x109e>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a5e      	ldr	r2, [pc, #376]	; (80023ac <stdin_irq_dma+0x11cc>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d020      	beq.n	8002278 <stdin_irq_dma+0x1098>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a5c      	ldr	r2, [pc, #368]	; (80023b0 <stdin_irq_dma+0x11d0>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d016      	beq.n	8002272 <stdin_irq_dma+0x1092>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a59      	ldr	r2, [pc, #356]	; (80023b4 <stdin_irq_dma+0x11d4>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d00c      	beq.n	800226c <stdin_irq_dma+0x108c>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a57      	ldr	r2, [pc, #348]	; (80023b8 <stdin_irq_dma+0x11d8>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d102      	bne.n	8002266 <stdin_irq_dma+0x1086>
 8002260:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002264:	e01a      	b.n	800229c <stdin_irq_dma+0x10bc>
 8002266:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800226a:	e017      	b.n	800229c <stdin_irq_dma+0x10bc>
 800226c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002270:	e014      	b.n	800229c <stdin_irq_dma+0x10bc>
 8002272:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002276:	e011      	b.n	800229c <stdin_irq_dma+0x10bc>
 8002278:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800227c:	e00e      	b.n	800229c <stdin_irq_dma+0x10bc>
 800227e:	2340      	movs	r3, #64	; 0x40
 8002280:	e00c      	b.n	800229c <stdin_irq_dma+0x10bc>
 8002282:	2340      	movs	r3, #64	; 0x40
 8002284:	e00a      	b.n	800229c <stdin_irq_dma+0x10bc>
 8002286:	2340      	movs	r3, #64	; 0x40
 8002288:	e008      	b.n	800229c <stdin_irq_dma+0x10bc>
 800228a:	2340      	movs	r3, #64	; 0x40
 800228c:	e006      	b.n	800229c <stdin_irq_dma+0x10bc>
 800228e:	2301      	movs	r3, #1
 8002290:	e004      	b.n	800229c <stdin_irq_dma+0x10bc>
 8002292:	2301      	movs	r3, #1
 8002294:	e002      	b.n	800229c <stdin_irq_dma+0x10bc>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <stdin_irq_dma+0x10bc>
 800229a:	2301      	movs	r3, #1
 800229c:	4a47      	ldr	r2, [pc, #284]	; (80023bc <stdin_irq_dma+0x11dc>)
 800229e:	60d3      	str	r3, [r2, #12]
 80022a0:	e091      	b.n	80023c6 <stdin_irq_dma+0x11e6>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a38      	ldr	r2, [pc, #224]	; (800238c <stdin_irq_dma+0x11ac>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	f000 8087 	beq.w	80023c0 <stdin_irq_dma+0x11e0>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a35      	ldr	r2, [pc, #212]	; (8002390 <stdin_irq_dma+0x11b0>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d060      	beq.n	8002382 <stdin_irq_dma+0x11a2>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a32      	ldr	r2, [pc, #200]	; (8002394 <stdin_irq_dma+0x11b4>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d057      	beq.n	800237e <stdin_irq_dma+0x119e>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a30      	ldr	r2, [pc, #192]	; (8002398 <stdin_irq_dma+0x11b8>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d04e      	beq.n	800237a <stdin_irq_dma+0x119a>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a2d      	ldr	r2, [pc, #180]	; (800239c <stdin_irq_dma+0x11bc>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d045      	beq.n	8002376 <stdin_irq_dma+0x1196>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a2b      	ldr	r2, [pc, #172]	; (80023a0 <stdin_irq_dma+0x11c0>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d03c      	beq.n	8002372 <stdin_irq_dma+0x1192>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a28      	ldr	r2, [pc, #160]	; (80023a4 <stdin_irq_dma+0x11c4>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d033      	beq.n	800236e <stdin_irq_dma+0x118e>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a26      	ldr	r2, [pc, #152]	; (80023a8 <stdin_irq_dma+0x11c8>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d02a      	beq.n	800236a <stdin_irq_dma+0x118a>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a23      	ldr	r2, [pc, #140]	; (80023ac <stdin_irq_dma+0x11cc>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d020      	beq.n	8002364 <stdin_irq_dma+0x1184>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a21      	ldr	r2, [pc, #132]	; (80023b0 <stdin_irq_dma+0x11d0>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d016      	beq.n	800235e <stdin_irq_dma+0x117e>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a1e      	ldr	r2, [pc, #120]	; (80023b4 <stdin_irq_dma+0x11d4>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d00c      	beq.n	8002358 <stdin_irq_dma+0x1178>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a1c      	ldr	r2, [pc, #112]	; (80023b8 <stdin_irq_dma+0x11d8>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d102      	bne.n	8002352 <stdin_irq_dma+0x1172>
 800234c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002350:	e037      	b.n	80023c2 <stdin_irq_dma+0x11e2>
 8002352:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002356:	e034      	b.n	80023c2 <stdin_irq_dma+0x11e2>
 8002358:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800235c:	e031      	b.n	80023c2 <stdin_irq_dma+0x11e2>
 800235e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002362:	e02e      	b.n	80023c2 <stdin_irq_dma+0x11e2>
 8002364:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002368:	e02b      	b.n	80023c2 <stdin_irq_dma+0x11e2>
 800236a:	2340      	movs	r3, #64	; 0x40
 800236c:	e029      	b.n	80023c2 <stdin_irq_dma+0x11e2>
 800236e:	2340      	movs	r3, #64	; 0x40
 8002370:	e027      	b.n	80023c2 <stdin_irq_dma+0x11e2>
 8002372:	2340      	movs	r3, #64	; 0x40
 8002374:	e025      	b.n	80023c2 <stdin_irq_dma+0x11e2>
 8002376:	2340      	movs	r3, #64	; 0x40
 8002378:	e023      	b.n	80023c2 <stdin_irq_dma+0x11e2>
 800237a:	2301      	movs	r3, #1
 800237c:	e021      	b.n	80023c2 <stdin_irq_dma+0x11e2>
 800237e:	2301      	movs	r3, #1
 8002380:	e01f      	b.n	80023c2 <stdin_irq_dma+0x11e2>
 8002382:	2301      	movs	r3, #1
 8002384:	e01d      	b.n	80023c2 <stdin_irq_dma+0x11e2>
 8002386:	bf00      	nop
 8002388:	40026058 	.word	0x40026058
 800238c:	40026010 	.word	0x40026010
 8002390:	40026410 	.word	0x40026410
 8002394:	40026070 	.word	0x40026070
 8002398:	40026470 	.word	0x40026470
 800239c:	40026028 	.word	0x40026028
 80023a0:	40026428 	.word	0x40026428
 80023a4:	40026088 	.word	0x40026088
 80023a8:	40026488 	.word	0x40026488
 80023ac:	40026040 	.word	0x40026040
 80023b0:	40026440 	.word	0x40026440
 80023b4:	400260a0 	.word	0x400260a0
 80023b8:	400264a0 	.word	0x400264a0
 80023bc:	40026000 	.word	0x40026000
 80023c0:	2301      	movs	r3, #1
 80023c2:	4a82      	ldr	r2, [pc, #520]	; (80025cc <stdin_irq_dma+0x13ec>)
 80023c4:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_DME_FLAG_INDEX(HDMA(in)));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	4b7f      	ldr	r3, [pc, #508]	; (80025d0 <stdin_irq_dma+0x13f0>)
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d978      	bls.n	80024c8 <stdin_irq_dma+0x12e8>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a7d      	ldr	r2, [pc, #500]	; (80025d4 <stdin_irq_dma+0x13f4>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d06d      	beq.n	80024c0 <stdin_irq_dma+0x12e0>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a7a      	ldr	r2, [pc, #488]	; (80025d8 <stdin_irq_dma+0x13f8>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d064      	beq.n	80024bc <stdin_irq_dma+0x12dc>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a78      	ldr	r2, [pc, #480]	; (80025dc <stdin_irq_dma+0x13fc>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d05b      	beq.n	80024b8 <stdin_irq_dma+0x12d8>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a75      	ldr	r2, [pc, #468]	; (80025e0 <stdin_irq_dma+0x1400>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d052      	beq.n	80024b4 <stdin_irq_dma+0x12d4>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a73      	ldr	r2, [pc, #460]	; (80025e4 <stdin_irq_dma+0x1404>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d048      	beq.n	80024ae <stdin_irq_dma+0x12ce>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a70      	ldr	r2, [pc, #448]	; (80025e8 <stdin_irq_dma+0x1408>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d03e      	beq.n	80024a8 <stdin_irq_dma+0x12c8>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a6e      	ldr	r2, [pc, #440]	; (80025ec <stdin_irq_dma+0x140c>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d034      	beq.n	80024a2 <stdin_irq_dma+0x12c2>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a6b      	ldr	r2, [pc, #428]	; (80025f0 <stdin_irq_dma+0x1410>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d02a      	beq.n	800249c <stdin_irq_dma+0x12bc>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a69      	ldr	r2, [pc, #420]	; (80025f4 <stdin_irq_dma+0x1414>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d020      	beq.n	8002496 <stdin_irq_dma+0x12b6>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a66      	ldr	r2, [pc, #408]	; (80025f8 <stdin_irq_dma+0x1418>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d016      	beq.n	8002490 <stdin_irq_dma+0x12b0>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a64      	ldr	r2, [pc, #400]	; (80025fc <stdin_irq_dma+0x141c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d00c      	beq.n	800248a <stdin_irq_dma+0x12aa>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a61      	ldr	r2, [pc, #388]	; (8002600 <stdin_irq_dma+0x1420>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d102      	bne.n	8002484 <stdin_irq_dma+0x12a4>
 800247e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002482:	e01e      	b.n	80024c2 <stdin_irq_dma+0x12e2>
 8002484:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002488:	e01b      	b.n	80024c2 <stdin_irq_dma+0x12e2>
 800248a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800248e:	e018      	b.n	80024c2 <stdin_irq_dma+0x12e2>
 8002490:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002494:	e015      	b.n	80024c2 <stdin_irq_dma+0x12e2>
 8002496:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800249a:	e012      	b.n	80024c2 <stdin_irq_dma+0x12e2>
 800249c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024a0:	e00f      	b.n	80024c2 <stdin_irq_dma+0x12e2>
 80024a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024a6:	e00c      	b.n	80024c2 <stdin_irq_dma+0x12e2>
 80024a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024ac:	e009      	b.n	80024c2 <stdin_irq_dma+0x12e2>
 80024ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024b2:	e006      	b.n	80024c2 <stdin_irq_dma+0x12e2>
 80024b4:	2304      	movs	r3, #4
 80024b6:	e004      	b.n	80024c2 <stdin_irq_dma+0x12e2>
 80024b8:	2304      	movs	r3, #4
 80024ba:	e002      	b.n	80024c2 <stdin_irq_dma+0x12e2>
 80024bc:	2304      	movs	r3, #4
 80024be:	e000      	b.n	80024c2 <stdin_irq_dma+0x12e2>
 80024c0:	2304      	movs	r3, #4
 80024c2:	4a50      	ldr	r2, [pc, #320]	; (8002604 <stdin_irq_dma+0x1424>)
 80024c4:	60d3      	str	r3, [r2, #12]
 80024c6:	e19a      	b.n	80027fe <stdin_irq_dma+0x161e>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	461a      	mov	r2, r3
 80024d2:	4b4d      	ldr	r3, [pc, #308]	; (8002608 <stdin_irq_dma+0x1428>)
 80024d4:	429a      	cmp	r2, r3
 80024d6:	f240 8099 	bls.w	800260c <stdin_irq_dma+0x142c>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a3c      	ldr	r2, [pc, #240]	; (80025d4 <stdin_irq_dma+0x13f4>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d06d      	beq.n	80025c4 <stdin_irq_dma+0x13e4>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a39      	ldr	r2, [pc, #228]	; (80025d8 <stdin_irq_dma+0x13f8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d064      	beq.n	80025c0 <stdin_irq_dma+0x13e0>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a37      	ldr	r2, [pc, #220]	; (80025dc <stdin_irq_dma+0x13fc>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d05b      	beq.n	80025bc <stdin_irq_dma+0x13dc>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a34      	ldr	r2, [pc, #208]	; (80025e0 <stdin_irq_dma+0x1400>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d052      	beq.n	80025b8 <stdin_irq_dma+0x13d8>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a32      	ldr	r2, [pc, #200]	; (80025e4 <stdin_irq_dma+0x1404>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d048      	beq.n	80025b2 <stdin_irq_dma+0x13d2>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a2f      	ldr	r2, [pc, #188]	; (80025e8 <stdin_irq_dma+0x1408>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d03e      	beq.n	80025ac <stdin_irq_dma+0x13cc>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a2d      	ldr	r2, [pc, #180]	; (80025ec <stdin_irq_dma+0x140c>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d034      	beq.n	80025a6 <stdin_irq_dma+0x13c6>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a2a      	ldr	r2, [pc, #168]	; (80025f0 <stdin_irq_dma+0x1410>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d02a      	beq.n	80025a0 <stdin_irq_dma+0x13c0>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a28      	ldr	r2, [pc, #160]	; (80025f4 <stdin_irq_dma+0x1414>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d020      	beq.n	800259a <stdin_irq_dma+0x13ba>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a25      	ldr	r2, [pc, #148]	; (80025f8 <stdin_irq_dma+0x1418>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d016      	beq.n	8002594 <stdin_irq_dma+0x13b4>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a23      	ldr	r2, [pc, #140]	; (80025fc <stdin_irq_dma+0x141c>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d00c      	beq.n	800258e <stdin_irq_dma+0x13ae>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a20      	ldr	r2, [pc, #128]	; (8002600 <stdin_irq_dma+0x1420>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d102      	bne.n	8002588 <stdin_irq_dma+0x13a8>
 8002582:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002586:	e01e      	b.n	80025c6 <stdin_irq_dma+0x13e6>
 8002588:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800258c:	e01b      	b.n	80025c6 <stdin_irq_dma+0x13e6>
 800258e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002592:	e018      	b.n	80025c6 <stdin_irq_dma+0x13e6>
 8002594:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002598:	e015      	b.n	80025c6 <stdin_irq_dma+0x13e6>
 800259a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800259e:	e012      	b.n	80025c6 <stdin_irq_dma+0x13e6>
 80025a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025a4:	e00f      	b.n	80025c6 <stdin_irq_dma+0x13e6>
 80025a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025aa:	e00c      	b.n	80025c6 <stdin_irq_dma+0x13e6>
 80025ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025b0:	e009      	b.n	80025c6 <stdin_irq_dma+0x13e6>
 80025b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025b6:	e006      	b.n	80025c6 <stdin_irq_dma+0x13e6>
 80025b8:	2304      	movs	r3, #4
 80025ba:	e004      	b.n	80025c6 <stdin_irq_dma+0x13e6>
 80025bc:	2304      	movs	r3, #4
 80025be:	e002      	b.n	80025c6 <stdin_irq_dma+0x13e6>
 80025c0:	2304      	movs	r3, #4
 80025c2:	e000      	b.n	80025c6 <stdin_irq_dma+0x13e6>
 80025c4:	2304      	movs	r3, #4
 80025c6:	4a0f      	ldr	r2, [pc, #60]	; (8002604 <stdin_irq_dma+0x1424>)
 80025c8:	6093      	str	r3, [r2, #8]
 80025ca:	e118      	b.n	80027fe <stdin_irq_dma+0x161e>
 80025cc:	40026000 	.word	0x40026000
 80025d0:	40026458 	.word	0x40026458
 80025d4:	40026010 	.word	0x40026010
 80025d8:	40026410 	.word	0x40026410
 80025dc:	40026070 	.word	0x40026070
 80025e0:	40026470 	.word	0x40026470
 80025e4:	40026028 	.word	0x40026028
 80025e8:	40026428 	.word	0x40026428
 80025ec:	40026088 	.word	0x40026088
 80025f0:	40026488 	.word	0x40026488
 80025f4:	40026040 	.word	0x40026040
 80025f8:	40026440 	.word	0x40026440
 80025fc:	400260a0 	.word	0x400260a0
 8002600:	400264a0 	.word	0x400264a0
 8002604:	40026400 	.word	0x40026400
 8002608:	400260b8 	.word	0x400260b8
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	461a      	mov	r2, r3
 8002616:	4b80      	ldr	r3, [pc, #512]	; (8002818 <stdin_irq_dma+0x1638>)
 8002618:	429a      	cmp	r2, r3
 800261a:	d978      	bls.n	800270e <stdin_irq_dma+0x152e>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a7d      	ldr	r2, [pc, #500]	; (800281c <stdin_irq_dma+0x163c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d06d      	beq.n	8002706 <stdin_irq_dma+0x1526>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a7b      	ldr	r2, [pc, #492]	; (8002820 <stdin_irq_dma+0x1640>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d064      	beq.n	8002702 <stdin_irq_dma+0x1522>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a78      	ldr	r2, [pc, #480]	; (8002824 <stdin_irq_dma+0x1644>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d05b      	beq.n	80026fe <stdin_irq_dma+0x151e>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a76      	ldr	r2, [pc, #472]	; (8002828 <stdin_irq_dma+0x1648>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d052      	beq.n	80026fa <stdin_irq_dma+0x151a>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a73      	ldr	r2, [pc, #460]	; (800282c <stdin_irq_dma+0x164c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d048      	beq.n	80026f4 <stdin_irq_dma+0x1514>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a71      	ldr	r2, [pc, #452]	; (8002830 <stdin_irq_dma+0x1650>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d03e      	beq.n	80026ee <stdin_irq_dma+0x150e>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a6e      	ldr	r2, [pc, #440]	; (8002834 <stdin_irq_dma+0x1654>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d034      	beq.n	80026e8 <stdin_irq_dma+0x1508>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a6c      	ldr	r2, [pc, #432]	; (8002838 <stdin_irq_dma+0x1658>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d02a      	beq.n	80026e2 <stdin_irq_dma+0x1502>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a69      	ldr	r2, [pc, #420]	; (800283c <stdin_irq_dma+0x165c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d020      	beq.n	80026dc <stdin_irq_dma+0x14fc>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a67      	ldr	r2, [pc, #412]	; (8002840 <stdin_irq_dma+0x1660>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d016      	beq.n	80026d6 <stdin_irq_dma+0x14f6>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a64      	ldr	r2, [pc, #400]	; (8002844 <stdin_irq_dma+0x1664>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d00c      	beq.n	80026d0 <stdin_irq_dma+0x14f0>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a62      	ldr	r2, [pc, #392]	; (8002848 <stdin_irq_dma+0x1668>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d102      	bne.n	80026ca <stdin_irq_dma+0x14ea>
 80026c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80026c8:	e01e      	b.n	8002708 <stdin_irq_dma+0x1528>
 80026ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026ce:	e01b      	b.n	8002708 <stdin_irq_dma+0x1528>
 80026d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80026d4:	e018      	b.n	8002708 <stdin_irq_dma+0x1528>
 80026d6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80026da:	e015      	b.n	8002708 <stdin_irq_dma+0x1528>
 80026dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80026e0:	e012      	b.n	8002708 <stdin_irq_dma+0x1528>
 80026e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026e6:	e00f      	b.n	8002708 <stdin_irq_dma+0x1528>
 80026e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026ec:	e00c      	b.n	8002708 <stdin_irq_dma+0x1528>
 80026ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026f2:	e009      	b.n	8002708 <stdin_irq_dma+0x1528>
 80026f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026f8:	e006      	b.n	8002708 <stdin_irq_dma+0x1528>
 80026fa:	2304      	movs	r3, #4
 80026fc:	e004      	b.n	8002708 <stdin_irq_dma+0x1528>
 80026fe:	2304      	movs	r3, #4
 8002700:	e002      	b.n	8002708 <stdin_irq_dma+0x1528>
 8002702:	2304      	movs	r3, #4
 8002704:	e000      	b.n	8002708 <stdin_irq_dma+0x1528>
 8002706:	2304      	movs	r3, #4
 8002708:	4a50      	ldr	r2, [pc, #320]	; (800284c <stdin_irq_dma+0x166c>)
 800270a:	60d3      	str	r3, [r2, #12]
 800270c:	e077      	b.n	80027fe <stdin_irq_dma+0x161e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a41      	ldr	r2, [pc, #260]	; (800281c <stdin_irq_dma+0x163c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d06d      	beq.n	80027f8 <stdin_irq_dma+0x1618>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a3e      	ldr	r2, [pc, #248]	; (8002820 <stdin_irq_dma+0x1640>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d064      	beq.n	80027f4 <stdin_irq_dma+0x1614>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a3c      	ldr	r2, [pc, #240]	; (8002824 <stdin_irq_dma+0x1644>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d05b      	beq.n	80027f0 <stdin_irq_dma+0x1610>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a39      	ldr	r2, [pc, #228]	; (8002828 <stdin_irq_dma+0x1648>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d052      	beq.n	80027ec <stdin_irq_dma+0x160c>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a37      	ldr	r2, [pc, #220]	; (800282c <stdin_irq_dma+0x164c>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d048      	beq.n	80027e6 <stdin_irq_dma+0x1606>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a34      	ldr	r2, [pc, #208]	; (8002830 <stdin_irq_dma+0x1650>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d03e      	beq.n	80027e0 <stdin_irq_dma+0x1600>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a32      	ldr	r2, [pc, #200]	; (8002834 <stdin_irq_dma+0x1654>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d034      	beq.n	80027da <stdin_irq_dma+0x15fa>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a2f      	ldr	r2, [pc, #188]	; (8002838 <stdin_irq_dma+0x1658>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d02a      	beq.n	80027d4 <stdin_irq_dma+0x15f4>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a2d      	ldr	r2, [pc, #180]	; (800283c <stdin_irq_dma+0x165c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d020      	beq.n	80027ce <stdin_irq_dma+0x15ee>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a2a      	ldr	r2, [pc, #168]	; (8002840 <stdin_irq_dma+0x1660>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d016      	beq.n	80027c8 <stdin_irq_dma+0x15e8>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a28      	ldr	r2, [pc, #160]	; (8002844 <stdin_irq_dma+0x1664>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d00c      	beq.n	80027c2 <stdin_irq_dma+0x15e2>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a25      	ldr	r2, [pc, #148]	; (8002848 <stdin_irq_dma+0x1668>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d102      	bne.n	80027bc <stdin_irq_dma+0x15dc>
 80027b6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80027ba:	e01e      	b.n	80027fa <stdin_irq_dma+0x161a>
 80027bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027c0:	e01b      	b.n	80027fa <stdin_irq_dma+0x161a>
 80027c2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80027c6:	e018      	b.n	80027fa <stdin_irq_dma+0x161a>
 80027c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80027cc:	e015      	b.n	80027fa <stdin_irq_dma+0x161a>
 80027ce:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80027d2:	e012      	b.n	80027fa <stdin_irq_dma+0x161a>
 80027d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027d8:	e00f      	b.n	80027fa <stdin_irq_dma+0x161a>
 80027da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027de:	e00c      	b.n	80027fa <stdin_irq_dma+0x161a>
 80027e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027e4:	e009      	b.n	80027fa <stdin_irq_dma+0x161a>
 80027e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027ea:	e006      	b.n	80027fa <stdin_irq_dma+0x161a>
 80027ec:	2304      	movs	r3, #4
 80027ee:	e004      	b.n	80027fa <stdin_irq_dma+0x161a>
 80027f0:	2304      	movs	r3, #4
 80027f2:	e002      	b.n	80027fa <stdin_irq_dma+0x161a>
 80027f4:	2304      	movs	r3, #4
 80027f6:	e000      	b.n	80027fa <stdin_irq_dma+0x161a>
 80027f8:	2304      	movs	r3, #4
 80027fa:	4a14      	ldr	r2, [pc, #80]	; (800284c <stdin_irq_dma+0x166c>)
 80027fc:	6093      	str	r3, [r2, #8]
    HAL_UART_Receive_DMA(in->huart, in->buffer, in->size);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6899      	ldr	r1, [r3, #8]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	899b      	ldrh	r3, [r3, #12]
 800280a:	461a      	mov	r2, r3
 800280c:	f003 fff5 	bl	80067fa <HAL_UART_Receive_DMA>
}
 8002810:	bf00      	nop
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40026058 	.word	0x40026058
 800281c:	40026010 	.word	0x40026010
 8002820:	40026410 	.word	0x40026410
 8002824:	40026070 	.word	0x40026070
 8002828:	40026470 	.word	0x40026470
 800282c:	40026028 	.word	0x40026028
 8002830:	40026428 	.word	0x40026428
 8002834:	40026088 	.word	0x40026088
 8002838:	40026488 	.word	0x40026488
 800283c:	40026040 	.word	0x40026040
 8002840:	40026440 	.word	0x40026440
 8002844:	400260a0 	.word	0x400260a0
 8002848:	400264a0 	.word	0x400264a0
 800284c:	40026000 	.word	0x40026000

08002850 <stdin_irq_uart>:

void stdin_irq_uart(stdin_t *in)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  if (__HAL_UART_GET_FLAG(in->huart, UART_FLAG_IDLE))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0310 	and.w	r3, r3, #16
 8002864:	2b10      	cmp	r3, #16
 8002866:	d10f      	bne.n	8002888 <stdin_irq_uart+0x38>
  {
    __HAL_UART_CLEAR_IDLEFLAG(in->huart);
 8002868:	2300      	movs	r3, #0
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
    check_buffer(in);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f804 	bl	8002890 <check_buffer>
  }
}
 8002888:	bf00      	nop
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <check_buffer>:

/* Private function implementations
 * --------------------------------------------*/
static void check_buffer(stdin_t *in)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint16_t pos;
  uint16_t new;

  /* Calculate current position in buffer */
  new = __HAL_DMA_GET_COUNTER(HDMA(in));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	81fb      	strh	r3, [r7, #14]
  pos = in->size - new;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	899a      	ldrh	r2, [r3, #12]
 80028a8:	89fb      	ldrh	r3, [r7, #14]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	81bb      	strh	r3, [r7, #12]

  /* Check change in received data */
  if (pos != in->pos)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	89db      	ldrh	r3, [r3, #14]
 80028b2:	89ba      	ldrh	r2, [r7, #12]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d025      	beq.n	8002904 <check_buffer+0x74>
  {
    if (pos > in->pos)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	89db      	ldrh	r3, [r3, #14]
 80028bc:	89ba      	ldrh	r2, [r7, #12]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d90b      	bls.n	80028da <check_buffer+0x4a>
      /* Current position is over previous one */
      /* We are in "linear" mode */
      /* Process data directly by subtracting "pointers" */
      fill_buffer(in, in->pos, pos - in->pos);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	89d9      	ldrh	r1, [r3, #14]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	89db      	ldrh	r3, [r3, #14]
 80028ca:	89ba      	ldrh	r2, [r7, #12]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	461a      	mov	r2, r3
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f824 	bl	8002920 <fill_buffer>
 80028d8:	e014      	b.n	8002904 <check_buffer+0x74>
    else
    {
      /* We are in "overflow" mode */
      /* First process data to the end of buffer */
      fill_buffer(in, in->pos, in->size - in->pos);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	89d9      	ldrh	r1, [r3, #14]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	899a      	ldrh	r2, [r3, #12]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	89db      	ldrh	r3, [r3, #14]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	461a      	mov	r2, r3
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 f817 	bl	8002920 <fill_buffer>
      /* Check and continue with beginning of buffer */
      if (pos > 0)
 80028f2:	89bb      	ldrh	r3, [r7, #12]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d005      	beq.n	8002904 <check_buffer+0x74>
        fill_buffer(in, 0, pos);
 80028f8:	89bb      	ldrh	r3, [r7, #12]
 80028fa:	461a      	mov	r2, r3
 80028fc:	2100      	movs	r1, #0
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f80e 	bl	8002920 <fill_buffer>
    }
  }

  /* Check and manually update if we reached end of buffer */
  in->pos = (pos == in->size) ? 0 : pos;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	899b      	ldrh	r3, [r3, #12]
 8002908:	89ba      	ldrh	r2, [r7, #12]
 800290a:	429a      	cmp	r2, r3
 800290c:	d001      	beq.n	8002912 <check_buffer+0x82>
 800290e:	89ba      	ldrh	r2, [r7, #12]
 8002910:	e000      	b.n	8002914 <check_buffer+0x84>
 8002912:	2200      	movs	r2, #0
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	81da      	strh	r2, [r3, #14]
}
 8002918:	bf00      	nop
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <fill_buffer>:

static void fill_buffer(stdin_t *in, uint16_t pos, uint16_t size)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	807b      	strh	r3, [r7, #2]
 800292c:	4613      	mov	r3, r2
 800292e:	803b      	strh	r3, [r7, #0]
  if (NULL == in->callback)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d009      	beq.n	800294c <fill_buffer+0x2c>
    return;

  in->callback(&in->buffer[pos], size);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6891      	ldr	r1, [r2, #8]
 8002940:	887a      	ldrh	r2, [r7, #2]
 8002942:	440a      	add	r2, r1
 8002944:	8839      	ldrh	r1, [r7, #0]
 8002946:	4610      	mov	r0, r2
 8002948:	4798      	blx	r3
 800294a:	e000      	b.n	800294e <fill_buffer+0x2e>
    return;
 800294c:	bf00      	nop
}
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_MspInit>:

extern DMA_HandleTypeDef hdma_usart2_rx;


void HAL_MspInit(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	607b      	str	r3, [r7, #4]
 800295e:	4b10      	ldr	r3, [pc, #64]	; (80029a0 <HAL_MspInit+0x4c>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	4a0f      	ldr	r2, [pc, #60]	; (80029a0 <HAL_MspInit+0x4c>)
 8002964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002968:	6453      	str	r3, [r2, #68]	; 0x44
 800296a:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <HAL_MspInit+0x4c>)
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002972:	607b      	str	r3, [r7, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	603b      	str	r3, [r7, #0]
 800297a:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <HAL_MspInit+0x4c>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	4a08      	ldr	r2, [pc, #32]	; (80029a0 <HAL_MspInit+0x4c>)
 8002980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002984:	6413      	str	r3, [r2, #64]	; 0x40
 8002986:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <HAL_MspInit+0x4c>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002992:	2007      	movs	r0, #7
 8002994:	f000 fb86 	bl	80030a4 <HAL_NVIC_SetPriorityGrouping>
}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40023800 	.word	0x40023800

080029a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08a      	sub	sp, #40	; 0x28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ac:	f107 0314 	add.w	r3, r7, #20
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	60da      	str	r2, [r3, #12]
 80029ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a34      	ldr	r2, [pc, #208]	; (8002a94 <HAL_UART_MspInit+0xf0>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d162      	bne.n	8002a8c <HAL_UART_MspInit+0xe8>
  {
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	613b      	str	r3, [r7, #16]
 80029ca:	4b33      	ldr	r3, [pc, #204]	; (8002a98 <HAL_UART_MspInit+0xf4>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	4a32      	ldr	r2, [pc, #200]	; (8002a98 <HAL_UART_MspInit+0xf4>)
 80029d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d4:	6413      	str	r3, [r2, #64]	; 0x40
 80029d6:	4b30      	ldr	r3, [pc, #192]	; (8002a98 <HAL_UART_MspInit+0xf4>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029de:	613b      	str	r3, [r7, #16]
 80029e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	4b2c      	ldr	r3, [pc, #176]	; (8002a98 <HAL_UART_MspInit+0xf4>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	4a2b      	ldr	r2, [pc, #172]	; (8002a98 <HAL_UART_MspInit+0xf4>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	6313      	str	r3, [r2, #48]	; 0x30
 80029f2:	4b29      	ldr	r3, [pc, #164]	; (8002a98 <HAL_UART_MspInit+0xf4>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin 		= USART_TX_Pin|USART_RX_Pin;
 80029fe:	230c      	movs	r3, #12
 8002a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 8002a02:	2302      	movs	r3, #2
 8002a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate 	= GPIO_AF7_USART2;
 8002a0e:	2307      	movs	r3, #7
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a12:	f107 0314 	add.w	r3, r7, #20
 8002a16:	4619      	mov	r1, r3
 8002a18:	4820      	ldr	r0, [pc, #128]	; (8002a9c <HAL_UART_MspInit+0xf8>)
 8002a1a:	f000 ff95 	bl	8003948 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance 				= DMA1_Stream5;
 8002a1e:	4b20      	ldr	r3, [pc, #128]	; (8002aa0 <HAL_UART_MspInit+0xfc>)
 8002a20:	4a20      	ldr	r2, [pc, #128]	; (8002aa4 <HAL_UART_MspInit+0x100>)
 8002a22:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel 			= DMA_CHANNEL_4;
 8002a24:	4b1e      	ldr	r3, [pc, #120]	; (8002aa0 <HAL_UART_MspInit+0xfc>)
 8002a26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a2a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction 			= DMA_PERIPH_TO_MEMORY;
 8002a2c:	4b1c      	ldr	r3, [pc, #112]	; (8002aa0 <HAL_UART_MspInit+0xfc>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8002a32:	4b1b      	ldr	r3, [pc, #108]	; (8002aa0 <HAL_UART_MspInit+0xfc>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8002a38:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <HAL_UART_MspInit+0xfc>)
 8002a3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a3e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a40:	4b17      	ldr	r3, [pc, #92]	; (8002aa0 <HAL_UART_MspInit+0xfc>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8002a46:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <HAL_UART_MspInit+0xfc>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode 				= DMA_CIRCULAR;
 8002a4c:	4b14      	ldr	r3, [pc, #80]	; (8002aa0 <HAL_UART_MspInit+0xfc>)
 8002a4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a52:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority 			= DMA_PRIORITY_LOW;
 8002a54:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <HAL_UART_MspInit+0xfc>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 8002a5a:	4b11      	ldr	r3, [pc, #68]	; (8002aa0 <HAL_UART_MspInit+0xfc>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002a60:	480f      	ldr	r0, [pc, #60]	; (8002aa0 <HAL_UART_MspInit+0xfc>)
 8002a62:	f000 fb61 	bl	8003128 <HAL_DMA_Init>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002a6c:	f7fe fac8 	bl	8001000 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a0b      	ldr	r2, [pc, #44]	; (8002aa0 <HAL_UART_MspInit+0xfc>)
 8002a74:	639a      	str	r2, [r3, #56]	; 0x38
 8002a76:	4a0a      	ldr	r2, [pc, #40]	; (8002aa0 <HAL_UART_MspInit+0xfc>)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2100      	movs	r1, #0
 8002a80:	2026      	movs	r0, #38	; 0x26
 8002a82:	f000 fb1a 	bl	80030ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a86:	2026      	movs	r0, #38	; 0x26
 8002a88:	f000 fb33 	bl	80030f2 <HAL_NVIC_EnableIRQ>
  }

}
 8002a8c:	bf00      	nop
 8002a8e:	3728      	adds	r7, #40	; 0x28
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40004400 	.word	0x40004400
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	40020000 	.word	0x40020000
 8002aa0:	200001ac 	.word	0x200001ac
 8002aa4:	40026088 	.word	0x40026088

08002aa8 <HAL_I2C_MspInit>:
  *           - NVIC configuration for DMA interrupt request enable
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08a      	sub	sp, #40	; 0x28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /*##-1- Enable GPIO Clocks #################################################*/
  /* Enable GPIO TX/RX clock */
  I2Cx_SCL_GPIO_CLK_ENABLE();
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	4b2b      	ldr	r3, [pc, #172]	; (8002b64 <HAL_I2C_MspInit+0xbc>)
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab8:	4a2a      	ldr	r2, [pc, #168]	; (8002b64 <HAL_I2C_MspInit+0xbc>)
 8002aba:	f043 0302 	orr.w	r3, r3, #2
 8002abe:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac0:	4b28      	ldr	r3, [pc, #160]	; (8002b64 <HAL_I2C_MspInit+0xbc>)
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	693b      	ldr	r3, [r7, #16]
  I2Cx_SDA_GPIO_CLK_ENABLE();
 8002acc:	2300      	movs	r3, #0
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	4b24      	ldr	r3, [pc, #144]	; (8002b64 <HAL_I2C_MspInit+0xbc>)
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad4:	4a23      	ldr	r2, [pc, #140]	; (8002b64 <HAL_I2C_MspInit+0xbc>)
 8002ad6:	f043 0302 	orr.w	r3, r3, #2
 8002ada:	6313      	str	r3, [r2, #48]	; 0x30
 8002adc:	4b21      	ldr	r3, [pc, #132]	; (8002b64 <HAL_I2C_MspInit+0xbc>)
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* I2C TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
 8002ae8:	2340      	movs	r3, #64	; 0x40
 8002aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8002aec:	2312      	movs	r3, #18
 8002aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8002af0:	2301      	movs	r3, #1
 8002af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8002af4:	2302      	movs	r3, #2
 8002af6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
 8002af8:	2304      	movs	r3, #4
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	4619      	mov	r1, r3
 8002b02:	4819      	ldr	r0, [pc, #100]	; (8002b68 <HAL_I2C_MspInit+0xc0>)
 8002b04:	f000 ff20 	bl	8003948 <HAL_GPIO_Init>

  /* I2C RX GPIO pin configuration  */
  GPIO_InitStruct.Pin 		= I2Cx_SDA_PIN;
 8002b08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = I2Cx_SDA_AF;
 8002b0e:	2304      	movs	r3, #4
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002b12:	f107 0314 	add.w	r3, r7, #20
 8002b16:	4619      	mov	r1, r3
 8002b18:	4813      	ldr	r0, [pc, #76]	; (8002b68 <HAL_I2C_MspInit+0xc0>)
 8002b1a:	f000 ff15 	bl	8003948 <HAL_GPIO_Init>

  /*##-3- Enable I2C peripheral Clock ########################################*/
  /* Enable I2C1 clock */
  I2Cx_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60bb      	str	r3, [r7, #8]
 8002b22:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <HAL_I2C_MspInit+0xbc>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	4a0f      	ldr	r2, [pc, #60]	; (8002b64 <HAL_I2C_MspInit+0xbc>)
 8002b28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b2e:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <HAL_I2C_MspInit+0xbc>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]

  /*##-4- Configure the NVIC for I2C #########################################*/
  /* NVIC for I2C1 */
  HAL_NVIC_SetPriority(I2Cx_ER_IRQn, 1, 0);
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	2020      	movs	r0, #32
 8002b40:	f000 fabb 	bl	80030ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2Cx_ER_IRQn);
 8002b44:	2020      	movs	r0, #32
 8002b46:	f000 fad4 	bl	80030f2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(I2Cx_EV_IRQn, 2, 0);
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2102      	movs	r1, #2
 8002b4e:	201f      	movs	r0, #31
 8002b50:	f000 fab3 	bl	80030ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2Cx_EV_IRQn);
 8002b54:	201f      	movs	r0, #31
 8002b56:	f000 facc 	bl	80030f2 <HAL_NVIC_EnableIRQ>
}
 8002b5a:	bf00      	nop
 8002b5c:	3728      	adds	r7, #40	; 0x28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40023800 	.word	0x40023800
 8002b68:	40020400 	.word	0x40020400

08002b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  while (1)
 8002b70:	e7fe      	b.n	8002b70 <NMI_Handler+0x4>

08002b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b72:	b480      	push	{r7}
 8002b74:	af00      	add	r7, sp, #0
  while (1)
 8002b76:	e7fe      	b.n	8002b76 <HardFault_Handler+0x4>

08002b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  while (1)
 8002b7c:	e7fe      	b.n	8002b7c <MemManage_Handler+0x4>

08002b7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	af00      	add	r7, sp, #0
  while (1)
 8002b82:	e7fe      	b.n	8002b82 <BusFault_Handler+0x4>

08002b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  while (1)
 8002b88:	e7fe      	b.n	8002b88 <UsageFault_Handler+0x4>

08002b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	af00      	add	r7, sp, #0

}
 8002b8e:	bf00      	nop
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0

}
 8002b9c:	bf00      	nop
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	af00      	add	r7, sp, #0

}
 8002baa:	bf00      	nop
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8002bb8:	f000 f960 	bl	8002e7c <HAL_IncTick>
}
 8002bbc:	bf00      	nop
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002bc4:	4803      	ldr	r0, [pc, #12]	; (8002bd4 <DMA1_Stream5_IRQHandler+0x14>)
 8002bc6:	f000 fc47 	bl	8003458 <HAL_DMA_IRQHandler>
  serial_handlerDMA();
 8002bca:	f7fe fa51 	bl	8001070 <serial_handlerDMA>
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	200001ac 	.word	0x200001ac

08002bd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 8002bdc:	4803      	ldr	r0, [pc, #12]	; (8002bec <USART2_IRQHandler+0x14>)
 8002bde:	f003 fea1 	bl	8006924 <HAL_UART_IRQHandler>
	serial_handlerUART();
 8002be2:	f7fe fa3b 	bl	800105c <serial_handlerUART>
}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000168 	.word	0x20000168

08002bf0 <I2C1_EV_IRQHandler>:
  * @param  None
  * @retval None
  * @Note   This function is redefined in "main.h" and related to I2C data transmission
  */
void I2Cx_EV_IRQHandler(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(& I2cHandle);
 8002bf4:	4802      	ldr	r0, [pc, #8]	; (8002c00 <I2C1_EV_IRQHandler+0x10>)
 8002bf6:	f001 fa93 	bl	8004120 <HAL_I2C_EV_IRQHandler>
}
 8002bfa:	bf00      	nop
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	2000020c 	.word	0x2000020c

08002c04 <I2C1_ER_IRQHandler>:
  * @param  None
  * @retval None
  * @Note   This function is redefined in "main.h" and related to I2C error
  */
void I2Cx_ER_IRQHandler(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(& I2cHandle);
 8002c08:	4802      	ldr	r0, [pc, #8]	; (8002c14 <I2C1_ER_IRQHandler+0x10>)
 8002c0a:	f001 fbf6 	bl	80043fa <HAL_I2C_ER_IRQHandler>
}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	2000020c 	.word	0x2000020c

08002c18 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	e00a      	b.n	8002c40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c2a:	f3af 8000 	nop.w
 8002c2e:	4601      	mov	r1, r0
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	1c5a      	adds	r2, r3, #1
 8002c34:	60ba      	str	r2, [r7, #8]
 8002c36:	b2ca      	uxtb	r2, r1
 8002c38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	617b      	str	r3, [r7, #20]
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	dbf0      	blt.n	8002c2a <_read+0x12>
	}

return len;
 8002c48:	687b      	ldr	r3, [r7, #4]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b086      	sub	sp, #24
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	60f8      	str	r0, [r7, #12]
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c5e:	2300      	movs	r3, #0
 8002c60:	617b      	str	r3, [r7, #20]
 8002c62:	e009      	b.n	8002c78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	60ba      	str	r2, [r7, #8]
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fd fc4b 	bl	8000508 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	3301      	adds	r3, #1
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	dbf1      	blt.n	8002c64 <_write+0x12>
	}
	return len;
 8002c80:	687b      	ldr	r3, [r7, #4]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <_close>:

int _close(int file)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
	return -1;
 8002c92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cb2:	605a      	str	r2, [r3, #4]
	return 0;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <_isatty>:

int _isatty(int file)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
	return 1;
 8002cca:	2301      	movs	r3, #1
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
	return 0;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
	...

08002cf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cfc:	4a14      	ldr	r2, [pc, #80]	; (8002d50 <_sbrk+0x5c>)
 8002cfe:	4b15      	ldr	r3, [pc, #84]	; (8002d54 <_sbrk+0x60>)
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d08:	4b13      	ldr	r3, [pc, #76]	; (8002d58 <_sbrk+0x64>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d102      	bne.n	8002d16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d10:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <_sbrk+0x64>)
 8002d12:	4a12      	ldr	r2, [pc, #72]	; (8002d5c <_sbrk+0x68>)
 8002d14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d16:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <_sbrk+0x64>)
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d207      	bcs.n	8002d34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d24:	f004 feee 	bl	8007b04 <__errno>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	220c      	movs	r2, #12
 8002d2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d32:	e009      	b.n	8002d48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d34:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <_sbrk+0x64>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d3a:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <_sbrk+0x64>)
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4413      	add	r3, r2
 8002d42:	4a05      	ldr	r2, [pc, #20]	; (8002d58 <_sbrk+0x64>)
 8002d44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d46:	68fb      	ldr	r3, [r7, #12]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	20020000 	.word	0x20020000
 8002d54:	00000400 	.word	0x00000400
 8002d58:	20000720 	.word	0x20000720
 8002d5c:	20000738 	.word	0x20000738

08002d60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <SystemInit+0x20>)
 8002d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6a:	4a05      	ldr	r2, [pc, #20]	; (8002d80 <SystemInit+0x20>)
 8002d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d74:	bf00      	nop
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dbc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d88:	480d      	ldr	r0, [pc, #52]	; (8002dc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d8a:	490e      	ldr	r1, [pc, #56]	; (8002dc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d8c:	4a0e      	ldr	r2, [pc, #56]	; (8002dc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d90:	e002      	b.n	8002d98 <LoopCopyDataInit>

08002d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d96:	3304      	adds	r3, #4

08002d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d9c:	d3f9      	bcc.n	8002d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d9e:	4a0b      	ldr	r2, [pc, #44]	; (8002dcc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002da0:	4c0b      	ldr	r4, [pc, #44]	; (8002dd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002da4:	e001      	b.n	8002daa <LoopFillZerobss>

08002da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002da8:	3204      	adds	r2, #4

08002daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dac:	d3fb      	bcc.n	8002da6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002dae:	f7ff ffd7 	bl	8002d60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002db2:	f004 fead 	bl	8007b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002db6:	f7fd fbb9 	bl	800052c <main>
  bx  lr    
 8002dba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002dbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dc4:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8002dc8:	080086ac 	.word	0x080086ac
  ldr r2, =_sbss
 8002dcc:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8002dd0:	20000738 	.word	0x20000738

08002dd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dd4:	e7fe      	b.n	8002dd4 <ADC_IRQHandler>
	...

08002dd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ddc:	4b0e      	ldr	r3, [pc, #56]	; (8002e18 <HAL_Init+0x40>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a0d      	ldr	r2, [pc, #52]	; (8002e18 <HAL_Init+0x40>)
 8002de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002de6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002de8:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <HAL_Init+0x40>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a0a      	ldr	r2, [pc, #40]	; (8002e18 <HAL_Init+0x40>)
 8002dee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002df2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002df4:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <HAL_Init+0x40>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a07      	ldr	r2, [pc, #28]	; (8002e18 <HAL_Init+0x40>)
 8002dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e00:	2003      	movs	r0, #3
 8002e02:	f000 f94f 	bl	80030a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e06:	2000      	movs	r0, #0
 8002e08:	f000 f808 	bl	8002e1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e0c:	f7ff fda2 	bl	8002954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40023c00 	.word	0x40023c00

08002e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e24:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <HAL_InitTick+0x54>)
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <HAL_InitTick+0x58>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 f967 	bl	800310e <HAL_SYSTICK_Config>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e00e      	b.n	8002e68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b0f      	cmp	r3, #15
 8002e4e:	d80a      	bhi.n	8002e66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e50:	2200      	movs	r2, #0
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	f04f 30ff 	mov.w	r0, #4294967295
 8002e58:	f000 f92f 	bl	80030ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e5c:	4a06      	ldr	r2, [pc, #24]	; (8002e78 <HAL_InitTick+0x5c>)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	e000      	b.n	8002e68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	200000dc 	.word	0x200000dc
 8002e74:	200000e4 	.word	0x200000e4
 8002e78:	200000e0 	.word	0x200000e0

08002e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e80:	4b06      	ldr	r3, [pc, #24]	; (8002e9c <HAL_IncTick+0x20>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	461a      	mov	r2, r3
 8002e86:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <HAL_IncTick+0x24>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	4a04      	ldr	r2, [pc, #16]	; (8002ea0 <HAL_IncTick+0x24>)
 8002e8e:	6013      	str	r3, [r2, #0]
}
 8002e90:	bf00      	nop
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	200000e4 	.word	0x200000e4
 8002ea0:	20000724 	.word	0x20000724

08002ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ea8:	4b03      	ldr	r3, [pc, #12]	; (8002eb8 <HAL_GetTick+0x14>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	20000724 	.word	0x20000724

08002ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ec4:	f7ff ffee 	bl	8002ea4 <HAL_GetTick>
 8002ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed4:	d005      	beq.n	8002ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ed6:	4b0a      	ldr	r3, [pc, #40]	; (8002f00 <HAL_Delay+0x44>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4413      	add	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ee2:	bf00      	nop
 8002ee4:	f7ff ffde 	bl	8002ea4 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d8f7      	bhi.n	8002ee4 <HAL_Delay+0x28>
  {
  }
}
 8002ef4:	bf00      	nop
 8002ef6:	bf00      	nop
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	200000e4 	.word	0x200000e4

08002f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f14:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <__NVIC_SetPriorityGrouping+0x44>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f20:	4013      	ands	r3, r2
 8002f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f36:	4a04      	ldr	r2, [pc, #16]	; (8002f48 <__NVIC_SetPriorityGrouping+0x44>)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	60d3      	str	r3, [r2, #12]
}
 8002f3c:	bf00      	nop
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	e000ed00 	.word	0xe000ed00

08002f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f50:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <__NVIC_GetPriorityGrouping+0x18>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	0a1b      	lsrs	r3, r3, #8
 8002f56:	f003 0307 	and.w	r3, r3, #7
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	e000ed00 	.word	0xe000ed00

08002f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	db0b      	blt.n	8002f92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f7a:	79fb      	ldrb	r3, [r7, #7]
 8002f7c:	f003 021f 	and.w	r2, r3, #31
 8002f80:	4907      	ldr	r1, [pc, #28]	; (8002fa0 <__NVIC_EnableIRQ+0x38>)
 8002f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	2001      	movs	r0, #1
 8002f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	e000e100 	.word	0xe000e100

08002fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4603      	mov	r3, r0
 8002fac:	6039      	str	r1, [r7, #0]
 8002fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	db0a      	blt.n	8002fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	490c      	ldr	r1, [pc, #48]	; (8002ff0 <__NVIC_SetPriority+0x4c>)
 8002fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc2:	0112      	lsls	r2, r2, #4
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fcc:	e00a      	b.n	8002fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	4908      	ldr	r1, [pc, #32]	; (8002ff4 <__NVIC_SetPriority+0x50>)
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	3b04      	subs	r3, #4
 8002fdc:	0112      	lsls	r2, r2, #4
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	761a      	strb	r2, [r3, #24]
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	e000e100 	.word	0xe000e100
 8002ff4:	e000ed00 	.word	0xe000ed00

08002ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b089      	sub	sp, #36	; 0x24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f1c3 0307 	rsb	r3, r3, #7
 8003012:	2b04      	cmp	r3, #4
 8003014:	bf28      	it	cs
 8003016:	2304      	movcs	r3, #4
 8003018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	3304      	adds	r3, #4
 800301e:	2b06      	cmp	r3, #6
 8003020:	d902      	bls.n	8003028 <NVIC_EncodePriority+0x30>
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	3b03      	subs	r3, #3
 8003026:	e000      	b.n	800302a <NVIC_EncodePriority+0x32>
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800302c:	f04f 32ff 	mov.w	r2, #4294967295
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	43da      	mvns	r2, r3
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	401a      	ands	r2, r3
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003040:	f04f 31ff 	mov.w	r1, #4294967295
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	fa01 f303 	lsl.w	r3, r1, r3
 800304a:	43d9      	mvns	r1, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003050:	4313      	orrs	r3, r2
         );
}
 8003052:	4618      	mov	r0, r3
 8003054:	3724      	adds	r7, #36	; 0x24
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
	...

08003060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3b01      	subs	r3, #1
 800306c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003070:	d301      	bcc.n	8003076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003072:	2301      	movs	r3, #1
 8003074:	e00f      	b.n	8003096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003076:	4a0a      	ldr	r2, [pc, #40]	; (80030a0 <SysTick_Config+0x40>)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3b01      	subs	r3, #1
 800307c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800307e:	210f      	movs	r1, #15
 8003080:	f04f 30ff 	mov.w	r0, #4294967295
 8003084:	f7ff ff8e 	bl	8002fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003088:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <SysTick_Config+0x40>)
 800308a:	2200      	movs	r2, #0
 800308c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800308e:	4b04      	ldr	r3, [pc, #16]	; (80030a0 <SysTick_Config+0x40>)
 8003090:	2207      	movs	r2, #7
 8003092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	e000e010 	.word	0xe000e010

080030a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7ff ff29 	bl	8002f04 <__NVIC_SetPriorityGrouping>
}
 80030b2:	bf00      	nop
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b086      	sub	sp, #24
 80030be:	af00      	add	r7, sp, #0
 80030c0:	4603      	mov	r3, r0
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	607a      	str	r2, [r7, #4]
 80030c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030cc:	f7ff ff3e 	bl	8002f4c <__NVIC_GetPriorityGrouping>
 80030d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	68b9      	ldr	r1, [r7, #8]
 80030d6:	6978      	ldr	r0, [r7, #20]
 80030d8:	f7ff ff8e 	bl	8002ff8 <NVIC_EncodePriority>
 80030dc:	4602      	mov	r2, r0
 80030de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030e2:	4611      	mov	r1, r2
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff ff5d 	bl	8002fa4 <__NVIC_SetPriority>
}
 80030ea:	bf00      	nop
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	4603      	mov	r3, r0
 80030fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff ff31 	bl	8002f68 <__NVIC_EnableIRQ>
}
 8003106:	bf00      	nop
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b082      	sub	sp, #8
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7ff ffa2 	bl	8003060 <SysTick_Config>
 800311c:	4603      	mov	r3, r0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
	...

08003128 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003134:	f7ff feb6 	bl	8002ea4 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e099      	b.n	8003278 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0201 	bic.w	r2, r2, #1
 8003162:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003164:	e00f      	b.n	8003186 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003166:	f7ff fe9d 	bl	8002ea4 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b05      	cmp	r3, #5
 8003172:	d908      	bls.n	8003186 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2220      	movs	r2, #32
 8003178:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2203      	movs	r2, #3
 800317e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e078      	b.n	8003278 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1e8      	bne.n	8003166 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	4b38      	ldr	r3, [pc, #224]	; (8003280 <HAL_DMA_Init+0x158>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d107      	bne.n	80031f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e8:	4313      	orrs	r3, r2
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f023 0307 	bic.w	r3, r3, #7
 8003206:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	4313      	orrs	r3, r2
 8003210:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	2b04      	cmp	r3, #4
 8003218:	d117      	bne.n	800324a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	4313      	orrs	r3, r2
 8003222:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00e      	beq.n	800324a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 fb0f 	bl	8003850 <DMA_CheckFifoParam>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d008      	beq.n	800324a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2240      	movs	r2, #64	; 0x40
 800323c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003246:	2301      	movs	r3, #1
 8003248:	e016      	b.n	8003278 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 fac6 	bl	80037e4 <DMA_CalcBaseAndBitshift>
 8003258:	4603      	mov	r3, r0
 800325a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003260:	223f      	movs	r2, #63	; 0x3f
 8003262:	409a      	lsls	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	f010803f 	.word	0xf010803f

08003284 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
 8003290:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003292:	2300      	movs	r3, #0
 8003294:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d101      	bne.n	80032aa <HAL_DMA_Start_IT+0x26>
 80032a6:	2302      	movs	r3, #2
 80032a8:	e040      	b.n	800332c <HAL_DMA_Start_IT+0xa8>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d12f      	bne.n	800331e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2202      	movs	r2, #2
 80032c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	68b9      	ldr	r1, [r7, #8]
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 fa58 	bl	8003788 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032dc:	223f      	movs	r2, #63	; 0x3f
 80032de:	409a      	lsls	r2, r3
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0216 	orr.w	r2, r2, #22
 80032f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d007      	beq.n	800330c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0208 	orr.w	r2, r2, #8
 800330a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0201 	orr.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	e005      	b.n	800332a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003326:	2302      	movs	r3, #2
 8003328:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800332a:	7dfb      	ldrb	r3, [r7, #23]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003340:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003342:	f7ff fdaf 	bl	8002ea4 <HAL_GetTick>
 8003346:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d008      	beq.n	8003366 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2280      	movs	r2, #128	; 0x80
 8003358:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e052      	b.n	800340c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0216 	bic.w	r2, r2, #22
 8003374:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695a      	ldr	r2, [r3, #20]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003384:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	2b00      	cmp	r3, #0
 800338c:	d103      	bne.n	8003396 <HAL_DMA_Abort+0x62>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003392:	2b00      	cmp	r3, #0
 8003394:	d007      	beq.n	80033a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0208 	bic.w	r2, r2, #8
 80033a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0201 	bic.w	r2, r2, #1
 80033b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033b6:	e013      	b.n	80033e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033b8:	f7ff fd74 	bl	8002ea4 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b05      	cmp	r3, #5
 80033c4:	d90c      	bls.n	80033e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2220      	movs	r2, #32
 80033ca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2203      	movs	r2, #3
 80033d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e015      	b.n	800340c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1e4      	bne.n	80033b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f2:	223f      	movs	r2, #63	; 0x3f
 80033f4:	409a      	lsls	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d004      	beq.n	8003432 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2280      	movs	r2, #128	; 0x80
 800342c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e00c      	b.n	800344c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2205      	movs	r2, #5
 8003436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 0201 	bic.w	r2, r2, #1
 8003448:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003460:	2300      	movs	r3, #0
 8003462:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003464:	4b8e      	ldr	r3, [pc, #568]	; (80036a0 <HAL_DMA_IRQHandler+0x248>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a8e      	ldr	r2, [pc, #568]	; (80036a4 <HAL_DMA_IRQHandler+0x24c>)
 800346a:	fba2 2303 	umull	r2, r3, r2, r3
 800346e:	0a9b      	lsrs	r3, r3, #10
 8003470:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003476:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003482:	2208      	movs	r2, #8
 8003484:	409a      	lsls	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	4013      	ands	r3, r2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d01a      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b00      	cmp	r3, #0
 800349a:	d013      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 0204 	bic.w	r2, r2, #4
 80034aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b0:	2208      	movs	r2, #8
 80034b2:	409a      	lsls	r2, r3
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034bc:	f043 0201 	orr.w	r2, r3, #1
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c8:	2201      	movs	r2, #1
 80034ca:	409a      	lsls	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4013      	ands	r3, r2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d012      	beq.n	80034fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00b      	beq.n	80034fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e6:	2201      	movs	r2, #1
 80034e8:	409a      	lsls	r2, r3
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f2:	f043 0202 	orr.w	r2, r3, #2
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fe:	2204      	movs	r2, #4
 8003500:	409a      	lsls	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	4013      	ands	r3, r2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d012      	beq.n	8003530 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00b      	beq.n	8003530 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351c:	2204      	movs	r2, #4
 800351e:	409a      	lsls	r2, r3
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003528:	f043 0204 	orr.w	r2, r3, #4
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003534:	2210      	movs	r2, #16
 8003536:	409a      	lsls	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4013      	ands	r3, r2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d043      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	2b00      	cmp	r3, #0
 800354c:	d03c      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003552:	2210      	movs	r2, #16
 8003554:	409a      	lsls	r2, r3
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d018      	beq.n	800359a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d108      	bne.n	8003588 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	2b00      	cmp	r3, #0
 800357c:	d024      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	4798      	blx	r3
 8003586:	e01f      	b.n	80035c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800358c:	2b00      	cmp	r3, #0
 800358e:	d01b      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	4798      	blx	r3
 8003598:	e016      	b.n	80035c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d107      	bne.n	80035b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0208 	bic.w	r2, r2, #8
 80035b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035cc:	2220      	movs	r2, #32
 80035ce:	409a      	lsls	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4013      	ands	r3, r2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 808f 	beq.w	80036f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0310 	and.w	r3, r3, #16
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 8087 	beq.w	80036f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ee:	2220      	movs	r2, #32
 80035f0:	409a      	lsls	r2, r3
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b05      	cmp	r3, #5
 8003600:	d136      	bne.n	8003670 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0216 	bic.w	r2, r2, #22
 8003610:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695a      	ldr	r2, [r3, #20]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003620:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	2b00      	cmp	r3, #0
 8003628:	d103      	bne.n	8003632 <HAL_DMA_IRQHandler+0x1da>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800362e:	2b00      	cmp	r3, #0
 8003630:	d007      	beq.n	8003642 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0208 	bic.w	r2, r2, #8
 8003640:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003646:	223f      	movs	r2, #63	; 0x3f
 8003648:	409a      	lsls	r2, r3
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003662:	2b00      	cmp	r3, #0
 8003664:	d07e      	beq.n	8003764 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	4798      	blx	r3
        }
        return;
 800366e:	e079      	b.n	8003764 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d01d      	beq.n	80036ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10d      	bne.n	80036a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003690:	2b00      	cmp	r3, #0
 8003692:	d031      	beq.n	80036f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	4798      	blx	r3
 800369c:	e02c      	b.n	80036f8 <HAL_DMA_IRQHandler+0x2a0>
 800369e:	bf00      	nop
 80036a0:	200000dc 	.word	0x200000dc
 80036a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d023      	beq.n	80036f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	4798      	blx	r3
 80036b8:	e01e      	b.n	80036f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10f      	bne.n	80036e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0210 	bic.w	r2, r2, #16
 80036d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d032      	beq.n	8003766 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d022      	beq.n	8003752 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2205      	movs	r2, #5
 8003710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0201 	bic.w	r2, r2, #1
 8003722:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	3301      	adds	r3, #1
 8003728:	60bb      	str	r3, [r7, #8]
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	429a      	cmp	r2, r3
 800372e:	d307      	bcc.n	8003740 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f2      	bne.n	8003724 <HAL_DMA_IRQHandler+0x2cc>
 800373e:	e000      	b.n	8003742 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003740:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003756:	2b00      	cmp	r3, #0
 8003758:	d005      	beq.n	8003766 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	4798      	blx	r3
 8003762:	e000      	b.n	8003766 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003764:	bf00      	nop
    }
  }
}
 8003766:	3718      	adds	r7, #24
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800377a:	b2db      	uxtb	r3, r3
}
 800377c:	4618      	mov	r0, r3
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	2b40      	cmp	r3, #64	; 0x40
 80037b4:	d108      	bne.n	80037c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80037c6:	e007      	b.n	80037d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	60da      	str	r2, [r3, #12]
}
 80037d8:	bf00      	nop
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	3b10      	subs	r3, #16
 80037f4:	4a14      	ldr	r2, [pc, #80]	; (8003848 <DMA_CalcBaseAndBitshift+0x64>)
 80037f6:	fba2 2303 	umull	r2, r3, r2, r3
 80037fa:	091b      	lsrs	r3, r3, #4
 80037fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037fe:	4a13      	ldr	r2, [pc, #76]	; (800384c <DMA_CalcBaseAndBitshift+0x68>)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4413      	add	r3, r2
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2b03      	cmp	r3, #3
 8003810:	d909      	bls.n	8003826 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800381a:	f023 0303 	bic.w	r3, r3, #3
 800381e:	1d1a      	adds	r2, r3, #4
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	659a      	str	r2, [r3, #88]	; 0x58
 8003824:	e007      	b.n	8003836 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800382e:	f023 0303 	bic.w	r3, r3, #3
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	aaaaaaab 	.word	0xaaaaaaab
 800384c:	08008630 	.word	0x08008630

08003850 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003858:	2300      	movs	r3, #0
 800385a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003860:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d11f      	bne.n	80038aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	2b03      	cmp	r3, #3
 800386e:	d856      	bhi.n	800391e <DMA_CheckFifoParam+0xce>
 8003870:	a201      	add	r2, pc, #4	; (adr r2, 8003878 <DMA_CheckFifoParam+0x28>)
 8003872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003876:	bf00      	nop
 8003878:	08003889 	.word	0x08003889
 800387c:	0800389b 	.word	0x0800389b
 8003880:	08003889 	.word	0x08003889
 8003884:	0800391f 	.word	0x0800391f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d046      	beq.n	8003922 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003898:	e043      	b.n	8003922 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038a2:	d140      	bne.n	8003926 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038a8:	e03d      	b.n	8003926 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038b2:	d121      	bne.n	80038f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d837      	bhi.n	800392a <DMA_CheckFifoParam+0xda>
 80038ba:	a201      	add	r2, pc, #4	; (adr r2, 80038c0 <DMA_CheckFifoParam+0x70>)
 80038bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c0:	080038d1 	.word	0x080038d1
 80038c4:	080038d7 	.word	0x080038d7
 80038c8:	080038d1 	.word	0x080038d1
 80038cc:	080038e9 	.word	0x080038e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	73fb      	strb	r3, [r7, #15]
      break;
 80038d4:	e030      	b.n	8003938 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d025      	beq.n	800392e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038e6:	e022      	b.n	800392e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038f0:	d11f      	bne.n	8003932 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038f6:	e01c      	b.n	8003932 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d903      	bls.n	8003906 <DMA_CheckFifoParam+0xb6>
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	2b03      	cmp	r3, #3
 8003902:	d003      	beq.n	800390c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003904:	e018      	b.n	8003938 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	73fb      	strb	r3, [r7, #15]
      break;
 800390a:	e015      	b.n	8003938 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003910:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00e      	beq.n	8003936 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	73fb      	strb	r3, [r7, #15]
      break;
 800391c:	e00b      	b.n	8003936 <DMA_CheckFifoParam+0xe6>
      break;
 800391e:	bf00      	nop
 8003920:	e00a      	b.n	8003938 <DMA_CheckFifoParam+0xe8>
      break;
 8003922:	bf00      	nop
 8003924:	e008      	b.n	8003938 <DMA_CheckFifoParam+0xe8>
      break;
 8003926:	bf00      	nop
 8003928:	e006      	b.n	8003938 <DMA_CheckFifoParam+0xe8>
      break;
 800392a:	bf00      	nop
 800392c:	e004      	b.n	8003938 <DMA_CheckFifoParam+0xe8>
      break;
 800392e:	bf00      	nop
 8003930:	e002      	b.n	8003938 <DMA_CheckFifoParam+0xe8>
      break;   
 8003932:	bf00      	nop
 8003934:	e000      	b.n	8003938 <DMA_CheckFifoParam+0xe8>
      break;
 8003936:	bf00      	nop
    }
  } 
  
  return status; 
 8003938:	7bfb      	ldrb	r3, [r7, #15]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop

08003948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003948:	b480      	push	{r7}
 800394a:	b089      	sub	sp, #36	; 0x24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003952:	2300      	movs	r3, #0
 8003954:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003956:	2300      	movs	r3, #0
 8003958:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800395a:	2300      	movs	r3, #0
 800395c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800395e:	2300      	movs	r3, #0
 8003960:	61fb      	str	r3, [r7, #28]
 8003962:	e165      	b.n	8003c30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003964:	2201      	movs	r2, #1
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	4013      	ands	r3, r2
 8003976:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	429a      	cmp	r2, r3
 800397e:	f040 8154 	bne.w	8003c2a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	2b01      	cmp	r3, #1
 800398c:	d005      	beq.n	800399a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003996:	2b02      	cmp	r3, #2
 8003998:	d130      	bne.n	80039fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	2203      	movs	r2, #3
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	43db      	mvns	r3, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4013      	ands	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039d0:	2201      	movs	r2, #1
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	43db      	mvns	r3, r3
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4013      	ands	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	091b      	lsrs	r3, r3, #4
 80039e6:	f003 0201 	and.w	r2, r3, #1
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f003 0303 	and.w	r3, r3, #3
 8003a04:	2b03      	cmp	r3, #3
 8003a06:	d017      	beq.n	8003a38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	2203      	movs	r2, #3
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f003 0303 	and.w	r3, r3, #3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d123      	bne.n	8003a8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	08da      	lsrs	r2, r3, #3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3208      	adds	r2, #8
 8003a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	220f      	movs	r2, #15
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	43db      	mvns	r3, r3
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4013      	ands	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	691a      	ldr	r2, [r3, #16]
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	08da      	lsrs	r2, r3, #3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3208      	adds	r2, #8
 8003a86:	69b9      	ldr	r1, [r7, #24]
 8003a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	2203      	movs	r2, #3
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f003 0203 	and.w	r2, r3, #3
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 80ae 	beq.w	8003c2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60fb      	str	r3, [r7, #12]
 8003ad2:	4b5d      	ldr	r3, [pc, #372]	; (8003c48 <HAL_GPIO_Init+0x300>)
 8003ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad6:	4a5c      	ldr	r2, [pc, #368]	; (8003c48 <HAL_GPIO_Init+0x300>)
 8003ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003adc:	6453      	str	r3, [r2, #68]	; 0x44
 8003ade:	4b5a      	ldr	r3, [pc, #360]	; (8003c48 <HAL_GPIO_Init+0x300>)
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003aea:	4a58      	ldr	r2, [pc, #352]	; (8003c4c <HAL_GPIO_Init+0x304>)
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	089b      	lsrs	r3, r3, #2
 8003af0:	3302      	adds	r3, #2
 8003af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	220f      	movs	r2, #15
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	43db      	mvns	r3, r3
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a4f      	ldr	r2, [pc, #316]	; (8003c50 <HAL_GPIO_Init+0x308>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d025      	beq.n	8003b62 <HAL_GPIO_Init+0x21a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a4e      	ldr	r2, [pc, #312]	; (8003c54 <HAL_GPIO_Init+0x30c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d01f      	beq.n	8003b5e <HAL_GPIO_Init+0x216>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a4d      	ldr	r2, [pc, #308]	; (8003c58 <HAL_GPIO_Init+0x310>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d019      	beq.n	8003b5a <HAL_GPIO_Init+0x212>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a4c      	ldr	r2, [pc, #304]	; (8003c5c <HAL_GPIO_Init+0x314>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d013      	beq.n	8003b56 <HAL_GPIO_Init+0x20e>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a4b      	ldr	r2, [pc, #300]	; (8003c60 <HAL_GPIO_Init+0x318>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d00d      	beq.n	8003b52 <HAL_GPIO_Init+0x20a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a4a      	ldr	r2, [pc, #296]	; (8003c64 <HAL_GPIO_Init+0x31c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d007      	beq.n	8003b4e <HAL_GPIO_Init+0x206>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a49      	ldr	r2, [pc, #292]	; (8003c68 <HAL_GPIO_Init+0x320>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d101      	bne.n	8003b4a <HAL_GPIO_Init+0x202>
 8003b46:	2306      	movs	r3, #6
 8003b48:	e00c      	b.n	8003b64 <HAL_GPIO_Init+0x21c>
 8003b4a:	2307      	movs	r3, #7
 8003b4c:	e00a      	b.n	8003b64 <HAL_GPIO_Init+0x21c>
 8003b4e:	2305      	movs	r3, #5
 8003b50:	e008      	b.n	8003b64 <HAL_GPIO_Init+0x21c>
 8003b52:	2304      	movs	r3, #4
 8003b54:	e006      	b.n	8003b64 <HAL_GPIO_Init+0x21c>
 8003b56:	2303      	movs	r3, #3
 8003b58:	e004      	b.n	8003b64 <HAL_GPIO_Init+0x21c>
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	e002      	b.n	8003b64 <HAL_GPIO_Init+0x21c>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e000      	b.n	8003b64 <HAL_GPIO_Init+0x21c>
 8003b62:	2300      	movs	r3, #0
 8003b64:	69fa      	ldr	r2, [r7, #28]
 8003b66:	f002 0203 	and.w	r2, r2, #3
 8003b6a:	0092      	lsls	r2, r2, #2
 8003b6c:	4093      	lsls	r3, r2
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b74:	4935      	ldr	r1, [pc, #212]	; (8003c4c <HAL_GPIO_Init+0x304>)
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	089b      	lsrs	r3, r3, #2
 8003b7a:	3302      	adds	r3, #2
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b82:	4b3a      	ldr	r3, [pc, #232]	; (8003c6c <HAL_GPIO_Init+0x324>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ba6:	4a31      	ldr	r2, [pc, #196]	; (8003c6c <HAL_GPIO_Init+0x324>)
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bac:	4b2f      	ldr	r3, [pc, #188]	; (8003c6c <HAL_GPIO_Init+0x324>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bd0:	4a26      	ldr	r2, [pc, #152]	; (8003c6c <HAL_GPIO_Init+0x324>)
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bd6:	4b25      	ldr	r3, [pc, #148]	; (8003c6c <HAL_GPIO_Init+0x324>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	43db      	mvns	r3, r3
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	4013      	ands	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bfa:	4a1c      	ldr	r2, [pc, #112]	; (8003c6c <HAL_GPIO_Init+0x324>)
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c00:	4b1a      	ldr	r3, [pc, #104]	; (8003c6c <HAL_GPIO_Init+0x324>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d003      	beq.n	8003c24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c24:	4a11      	ldr	r2, [pc, #68]	; (8003c6c <HAL_GPIO_Init+0x324>)
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	61fb      	str	r3, [r7, #28]
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	2b0f      	cmp	r3, #15
 8003c34:	f67f ae96 	bls.w	8003964 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c38:	bf00      	nop
 8003c3a:	bf00      	nop
 8003c3c:	3724      	adds	r7, #36	; 0x24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	40013800 	.word	0x40013800
 8003c50:	40020000 	.word	0x40020000
 8003c54:	40020400 	.word	0x40020400
 8003c58:	40020800 	.word	0x40020800
 8003c5c:	40020c00 	.word	0x40020c00
 8003c60:	40021000 	.word	0x40021000
 8003c64:	40021400 	.word	0x40021400
 8003c68:	40021800 	.word	0x40021800
 8003c6c:	40013c00 	.word	0x40013c00

08003c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	807b      	strh	r3, [r7, #2]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c80:	787b      	ldrb	r3, [r7, #1]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c86:	887a      	ldrh	r2, [r7, #2]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c8c:	e003      	b.n	8003c96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c8e:	887b      	ldrh	r3, [r7, #2]
 8003c90:	041a      	lsls	r2, r3, #16
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	619a      	str	r2, [r3, #24]
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b085      	sub	sp, #20
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
 8003caa:	460b      	mov	r3, r1
 8003cac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003cb4:	887a      	ldrh	r2, [r7, #2]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	041a      	lsls	r2, r3, #16
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	43d9      	mvns	r1, r3
 8003cc0:	887b      	ldrh	r3, [r7, #2]
 8003cc2:	400b      	ands	r3, r1
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	619a      	str	r2, [r3, #24]
}
 8003cca:	bf00      	nop
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
	...

08003cd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e12b      	b.n	8003f42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d106      	bne.n	8003d04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7fe fed2 	bl	8002aa8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2224      	movs	r2, #36	; 0x24
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0201 	bic.w	r2, r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d3c:	f001 ff88 	bl	8005c50 <HAL_RCC_GetPCLK1Freq>
 8003d40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	4a81      	ldr	r2, [pc, #516]	; (8003f4c <HAL_I2C_Init+0x274>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d807      	bhi.n	8003d5c <HAL_I2C_Init+0x84>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	4a80      	ldr	r2, [pc, #512]	; (8003f50 <HAL_I2C_Init+0x278>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	bf94      	ite	ls
 8003d54:	2301      	movls	r3, #1
 8003d56:	2300      	movhi	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	e006      	b.n	8003d6a <HAL_I2C_Init+0x92>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4a7d      	ldr	r2, [pc, #500]	; (8003f54 <HAL_I2C_Init+0x27c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	bf94      	ite	ls
 8003d64:	2301      	movls	r3, #1
 8003d66:	2300      	movhi	r3, #0
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e0e7      	b.n	8003f42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	4a78      	ldr	r2, [pc, #480]	; (8003f58 <HAL_I2C_Init+0x280>)
 8003d76:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7a:	0c9b      	lsrs	r3, r3, #18
 8003d7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	4a6a      	ldr	r2, [pc, #424]	; (8003f4c <HAL_I2C_Init+0x274>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d802      	bhi.n	8003dac <HAL_I2C_Init+0xd4>
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	3301      	adds	r3, #1
 8003daa:	e009      	b.n	8003dc0 <HAL_I2C_Init+0xe8>
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003db2:	fb02 f303 	mul.w	r3, r2, r3
 8003db6:	4a69      	ldr	r2, [pc, #420]	; (8003f5c <HAL_I2C_Init+0x284>)
 8003db8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbc:	099b      	lsrs	r3, r3, #6
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6812      	ldr	r2, [r2, #0]
 8003dc4:	430b      	orrs	r3, r1
 8003dc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003dd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	495c      	ldr	r1, [pc, #368]	; (8003f4c <HAL_I2C_Init+0x274>)
 8003ddc:	428b      	cmp	r3, r1
 8003dde:	d819      	bhi.n	8003e14 <HAL_I2C_Init+0x13c>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	1e59      	subs	r1, r3, #1
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dee:	1c59      	adds	r1, r3, #1
 8003df0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003df4:	400b      	ands	r3, r1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <HAL_I2C_Init+0x138>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	1e59      	subs	r1, r3, #1
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e08:	3301      	adds	r3, #1
 8003e0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e0e:	e051      	b.n	8003eb4 <HAL_I2C_Init+0x1dc>
 8003e10:	2304      	movs	r3, #4
 8003e12:	e04f      	b.n	8003eb4 <HAL_I2C_Init+0x1dc>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d111      	bne.n	8003e40 <HAL_I2C_Init+0x168>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	1e58      	subs	r0, r3, #1
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6859      	ldr	r1, [r3, #4]
 8003e24:	460b      	mov	r3, r1
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	440b      	add	r3, r1
 8003e2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e2e:	3301      	adds	r3, #1
 8003e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	bf0c      	ite	eq
 8003e38:	2301      	moveq	r3, #1
 8003e3a:	2300      	movne	r3, #0
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	e012      	b.n	8003e66 <HAL_I2C_Init+0x18e>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	1e58      	subs	r0, r3, #1
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6859      	ldr	r1, [r3, #4]
 8003e48:	460b      	mov	r3, r1
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	0099      	lsls	r1, r3, #2
 8003e50:	440b      	add	r3, r1
 8003e52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e56:	3301      	adds	r3, #1
 8003e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	bf0c      	ite	eq
 8003e60:	2301      	moveq	r3, #1
 8003e62:	2300      	movne	r3, #0
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <HAL_I2C_Init+0x196>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e022      	b.n	8003eb4 <HAL_I2C_Init+0x1dc>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10e      	bne.n	8003e94 <HAL_I2C_Init+0x1bc>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	1e58      	subs	r0, r3, #1
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6859      	ldr	r1, [r3, #4]
 8003e7e:	460b      	mov	r3, r1
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	440b      	add	r3, r1
 8003e84:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e88:	3301      	adds	r3, #1
 8003e8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e92:	e00f      	b.n	8003eb4 <HAL_I2C_Init+0x1dc>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	1e58      	subs	r0, r3, #1
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6859      	ldr	r1, [r3, #4]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	0099      	lsls	r1, r3, #2
 8003ea4:	440b      	add	r3, r1
 8003ea6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eaa:	3301      	adds	r3, #1
 8003eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003eb4:	6879      	ldr	r1, [r7, #4]
 8003eb6:	6809      	ldr	r1, [r1, #0]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69da      	ldr	r2, [r3, #28]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ee2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6911      	ldr	r1, [r2, #16]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	68d2      	ldr	r2, [r2, #12]
 8003eee:	4311      	orrs	r1, r2
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6812      	ldr	r2, [r2, #0]
 8003ef4:	430b      	orrs	r3, r1
 8003ef6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	695a      	ldr	r2, [r3, #20]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0201 	orr.w	r2, r2, #1
 8003f22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	000186a0 	.word	0x000186a0
 8003f50:	001e847f 	.word	0x001e847f
 8003f54:	003d08ff 	.word	0x003d08ff
 8003f58:	431bde83 	.word	0x431bde83
 8003f5c:	10624dd3 	.word	0x10624dd3

08003f60 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b20      	cmp	r3, #32
 8003f78:	d158      	bne.n	800402c <HAL_I2C_Slave_Transmit_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d002      	beq.n	8003f86 <HAL_I2C_Slave_Transmit_IT+0x26>
 8003f80:	88fb      	ldrh	r3, [r7, #6]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_I2C_Slave_Transmit_IT+0x2a>
    {
      return  HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e051      	b.n	800402e <HAL_I2C_Slave_Transmit_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d101      	bne.n	8003f98 <HAL_I2C_Slave_Transmit_IT+0x38>
 8003f94:	2302      	movs	r3, #2
 8003f96:	e04a      	b.n	800402e <HAL_I2C_Slave_Transmit_IT+0xce>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d007      	beq.n	8003fbe <HAL_I2C_Slave_Transmit_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f042 0201 	orr.w	r2, r2, #1
 8003fbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fcc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2221      	movs	r2, #33	; 0x21
 8003fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	88fa      	ldrh	r2, [r7, #6]
 8003fee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4a0f      	ldr	r2, [pc, #60]	; (800403c <HAL_I2C_Slave_Transmit_IT+0xdc>)
 8003ffe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800400e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004026:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004028:	2300      	movs	r3, #0
 800402a:	e000      	b.n	800402e <HAL_I2C_Slave_Transmit_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 800402c:	2302      	movs	r3, #2
  }
}
 800402e:	4618      	mov	r0, r3
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	ffff0000 	.word	0xffff0000

08004040 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	4613      	mov	r3, r2
 800404c:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b20      	cmp	r3, #32
 8004058:	d158      	bne.n	800410c <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d002      	beq.n	8004066 <HAL_I2C_Slave_Receive_IT+0x26>
 8004060:	88fb      	ldrh	r3, [r7, #6]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e051      	b.n	800410e <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_I2C_Slave_Receive_IT+0x38>
 8004074:	2302      	movs	r3, #2
 8004076:	e04a      	b.n	800410e <HAL_I2C_Slave_Receive_IT+0xce>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b01      	cmp	r3, #1
 800408c:	d007      	beq.n	800409e <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f042 0201 	orr.w	r2, r2, #1
 800409c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040ac:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2222      	movs	r2, #34	; 0x22
 80040b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2220      	movs	r2, #32
 80040ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	88fa      	ldrh	r2, [r7, #6]
 80040ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	4a0f      	ldr	r2, [pc, #60]	; (800411c <HAL_I2C_Slave_Receive_IT+0xdc>)
 80040de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040ee:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004106:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004108:	2300      	movs	r3, #0
 800410a:	e000      	b.n	800410e <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 800410c:	2302      	movs	r3, #2
  }
}
 800410e:	4618      	mov	r0, r3
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	ffff0000 	.word	0xffff0000

08004120 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b088      	sub	sp, #32
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004128:	2300      	movs	r3, #0
 800412a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004138:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004140:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004148:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800414a:	7bfb      	ldrb	r3, [r7, #15]
 800414c:	2b10      	cmp	r3, #16
 800414e:	d003      	beq.n	8004158 <HAL_I2C_EV_IRQHandler+0x38>
 8004150:	7bfb      	ldrb	r3, [r7, #15]
 8004152:	2b40      	cmp	r3, #64	; 0x40
 8004154:	f040 80bd 	bne.w	80042d2 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10d      	bne.n	800418e <HAL_I2C_EV_IRQHandler+0x6e>
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004178:	d003      	beq.n	8004182 <HAL_I2C_EV_IRQHandler+0x62>
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004180:	d101      	bne.n	8004186 <HAL_I2C_EV_IRQHandler+0x66>
 8004182:	2301      	movs	r3, #1
 8004184:	e000      	b.n	8004188 <HAL_I2C_EV_IRQHandler+0x68>
 8004186:	2300      	movs	r3, #0
 8004188:	2b01      	cmp	r3, #1
 800418a:	f000 812e 	beq.w	80043ea <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00c      	beq.n	80041b2 <HAL_I2C_EV_IRQHandler+0x92>
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	0a5b      	lsrs	r3, r3, #9
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d006      	beq.n	80041b2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f001 fc45 	bl	8005a34 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 fd52 	bl	8004c54 <I2C_Master_SB>
 80041b0:	e08e      	b.n	80042d0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	08db      	lsrs	r3, r3, #3
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d009      	beq.n	80041d2 <HAL_I2C_EV_IRQHandler+0xb2>
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	0a5b      	lsrs	r3, r3, #9
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 fdc8 	bl	8004d60 <I2C_Master_ADD10>
 80041d0:	e07e      	b.n	80042d0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	085b      	lsrs	r3, r3, #1
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d009      	beq.n	80041f2 <HAL_I2C_EV_IRQHandler+0xd2>
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	0a5b      	lsrs	r3, r3, #9
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 fde2 	bl	8004db4 <I2C_Master_ADDR>
 80041f0:	e06e      	b.n	80042d0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	089b      	lsrs	r3, r3, #2
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d037      	beq.n	800426e <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004208:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800420c:	f000 80ef 	beq.w	80043ee <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	09db      	lsrs	r3, r3, #7
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00f      	beq.n	800423c <HAL_I2C_EV_IRQHandler+0x11c>
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	0a9b      	lsrs	r3, r3, #10
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b00      	cmp	r3, #0
 8004226:	d009      	beq.n	800423c <HAL_I2C_EV_IRQHandler+0x11c>
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	089b      	lsrs	r3, r3, #2
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	2b00      	cmp	r3, #0
 8004232:	d103      	bne.n	800423c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f9df 	bl	80045f8 <I2C_MasterTransmit_TXE>
 800423a:	e049      	b.n	80042d0 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	089b      	lsrs	r3, r3, #2
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 80d2 	beq.w	80043ee <HAL_I2C_EV_IRQHandler+0x2ce>
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	0a5b      	lsrs	r3, r3, #9
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 80cb 	beq.w	80043ee <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8004258:	7bfb      	ldrb	r3, [r7, #15]
 800425a:	2b10      	cmp	r3, #16
 800425c:	d103      	bne.n	8004266 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 fa66 	bl	8004730 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004264:	e0c3      	b.n	80043ee <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 faca 	bl	8004800 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800426c:	e0bf      	b.n	80043ee <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004278:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800427c:	f000 80b7 	beq.w	80043ee <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	099b      	lsrs	r3, r3, #6
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00f      	beq.n	80042ac <HAL_I2C_EV_IRQHandler+0x18c>
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	0a9b      	lsrs	r3, r3, #10
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d009      	beq.n	80042ac <HAL_I2C_EV_IRQHandler+0x18c>
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	089b      	lsrs	r3, r3, #2
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d103      	bne.n	80042ac <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 fb3a 	bl	800491e <I2C_MasterReceive_RXNE>
 80042aa:	e011      	b.n	80042d0 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	089b      	lsrs	r3, r3, #2
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 809a 	beq.w	80043ee <HAL_I2C_EV_IRQHandler+0x2ce>
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	0a5b      	lsrs	r3, r3, #9
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 8093 	beq.w	80043ee <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 fbd9 	bl	8004a80 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042ce:	e08e      	b.n	80043ee <HAL_I2C_EV_IRQHandler+0x2ce>
 80042d0:	e08d      	b.n	80043ee <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d004      	beq.n	80042e4 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	61fb      	str	r3, [r7, #28]
 80042e2:	e007      	b.n	80042f4 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	085b      	lsrs	r3, r3, #1
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d012      	beq.n	8004326 <HAL_I2C_EV_IRQHandler+0x206>
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	0a5b      	lsrs	r3, r3, #9
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00c      	beq.n	8004326 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800431c:	69b9      	ldr	r1, [r7, #24]
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 ff97 	bl	8005252 <I2C_Slave_ADDR>
 8004324:	e066      	b.n	80043f4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	091b      	lsrs	r3, r3, #4
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d009      	beq.n	8004346 <HAL_I2C_EV_IRQHandler+0x226>
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	0a5b      	lsrs	r3, r3, #9
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 ffcc 	bl	80052dc <I2C_Slave_STOPF>
 8004344:	e056      	b.n	80043f4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004346:	7bbb      	ldrb	r3, [r7, #14]
 8004348:	2b21      	cmp	r3, #33	; 0x21
 800434a:	d002      	beq.n	8004352 <HAL_I2C_EV_IRQHandler+0x232>
 800434c:	7bbb      	ldrb	r3, [r7, #14]
 800434e:	2b29      	cmp	r3, #41	; 0x29
 8004350:	d125      	bne.n	800439e <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	09db      	lsrs	r3, r3, #7
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00f      	beq.n	800437e <HAL_I2C_EV_IRQHandler+0x25e>
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	0a9b      	lsrs	r3, r3, #10
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d009      	beq.n	800437e <HAL_I2C_EV_IRQHandler+0x25e>
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	089b      	lsrs	r3, r3, #2
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d103      	bne.n	800437e <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 fead 	bl	80050d6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800437c:	e039      	b.n	80043f2 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	089b      	lsrs	r3, r3, #2
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d033      	beq.n	80043f2 <HAL_I2C_EV_IRQHandler+0x2d2>
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	0a5b      	lsrs	r3, r3, #9
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d02d      	beq.n	80043f2 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 feda 	bl	8005150 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800439c:	e029      	b.n	80043f2 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	099b      	lsrs	r3, r3, #6
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00f      	beq.n	80043ca <HAL_I2C_EV_IRQHandler+0x2aa>
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	0a9b      	lsrs	r3, r3, #10
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d009      	beq.n	80043ca <HAL_I2C_EV_IRQHandler+0x2aa>
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	089b      	lsrs	r3, r3, #2
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d103      	bne.n	80043ca <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 fee5 	bl	8005192 <I2C_SlaveReceive_RXNE>
 80043c8:	e014      	b.n	80043f4 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	089b      	lsrs	r3, r3, #2
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00e      	beq.n	80043f4 <HAL_I2C_EV_IRQHandler+0x2d4>
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	0a5b      	lsrs	r3, r3, #9
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d008      	beq.n	80043f4 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 ff13 	bl	800520e <I2C_SlaveReceive_BTF>
 80043e8:	e004      	b.n	80043f4 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 80043ea:	bf00      	nop
 80043ec:	e002      	b.n	80043f4 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043ee:	bf00      	nop
 80043f0:	e000      	b.n	80043f4 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043f2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80043f4:	3720      	adds	r7, #32
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b08a      	sub	sp, #40	; 0x28
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004412:	2300      	movs	r3, #0
 8004414:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800441c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	0a1b      	lsrs	r3, r3, #8
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00e      	beq.n	8004448 <HAL_I2C_ER_IRQHandler+0x4e>
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	0a1b      	lsrs	r3, r3, #8
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d008      	beq.n	8004448 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	f043 0301 	orr.w	r3, r3, #1
 800443c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004446:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	0a5b      	lsrs	r3, r3, #9
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00e      	beq.n	8004472 <HAL_I2C_ER_IRQHandler+0x78>
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	0a1b      	lsrs	r3, r3, #8
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b00      	cmp	r3, #0
 800445e:	d008      	beq.n	8004472 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	f043 0302 	orr.w	r3, r3, #2
 8004466:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004470:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	0a9b      	lsrs	r3, r3, #10
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d03f      	beq.n	80044fe <HAL_I2C_ER_IRQHandler+0x104>
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	0a1b      	lsrs	r3, r3, #8
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d039      	beq.n	80044fe <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800448a:	7efb      	ldrb	r3, [r7, #27]
 800448c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004492:	b29b      	uxth	r3, r3
 8004494:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800449c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80044a4:	7ebb      	ldrb	r3, [r7, #26]
 80044a6:	2b20      	cmp	r3, #32
 80044a8:	d112      	bne.n	80044d0 <HAL_I2C_ER_IRQHandler+0xd6>
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10f      	bne.n	80044d0 <HAL_I2C_ER_IRQHandler+0xd6>
 80044b0:	7cfb      	ldrb	r3, [r7, #19]
 80044b2:	2b21      	cmp	r3, #33	; 0x21
 80044b4:	d008      	beq.n	80044c8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80044b6:	7cfb      	ldrb	r3, [r7, #19]
 80044b8:	2b29      	cmp	r3, #41	; 0x29
 80044ba:	d005      	beq.n	80044c8 <HAL_I2C_ER_IRQHandler+0xce>
 80044bc:	7cfb      	ldrb	r3, [r7, #19]
 80044be:	2b28      	cmp	r3, #40	; 0x28
 80044c0:	d106      	bne.n	80044d0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2b21      	cmp	r3, #33	; 0x21
 80044c6:	d103      	bne.n	80044d0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f001 f837 	bl	800553c <I2C_Slave_AF>
 80044ce:	e016      	b.n	80044fe <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044d8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	f043 0304 	orr.w	r3, r3, #4
 80044e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80044e2:	7efb      	ldrb	r3, [r7, #27]
 80044e4:	2b10      	cmp	r3, #16
 80044e6:	d002      	beq.n	80044ee <HAL_I2C_ER_IRQHandler+0xf4>
 80044e8:	7efb      	ldrb	r3, [r7, #27]
 80044ea:	2b40      	cmp	r3, #64	; 0x40
 80044ec:	d107      	bne.n	80044fe <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044fc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80044fe:	6a3b      	ldr	r3, [r7, #32]
 8004500:	0adb      	lsrs	r3, r3, #11
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00e      	beq.n	8004528 <HAL_I2C_ER_IRQHandler+0x12e>
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	0a1b      	lsrs	r3, r3, #8
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d008      	beq.n	8004528 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	f043 0308 	orr.w	r3, r3, #8
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004526:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	2b00      	cmp	r3, #0
 800452c:	d008      	beq.n	8004540 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004534:	431a      	orrs	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f001 f86e 	bl	800561c <I2C_ITError>
  }
}
 8004540:	bf00      	nop
 8004542:	3728      	adds	r7, #40	; 0x28
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	460b      	mov	r3, r1
 800457a:	70fb      	strb	r3, [r7, #3]
 800457c:	4613      	mov	r3, r2
 800457e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ea:	b2db      	uxtb	r3, r3
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004606:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800460e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800461a:	2b00      	cmp	r3, #0
 800461c:	d150      	bne.n	80046c0 <I2C_MasterTransmit_TXE+0xc8>
 800461e:	7bfb      	ldrb	r3, [r7, #15]
 8004620:	2b21      	cmp	r3, #33	; 0x21
 8004622:	d14d      	bne.n	80046c0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2b08      	cmp	r3, #8
 8004628:	d01d      	beq.n	8004666 <I2C_MasterTransmit_TXE+0x6e>
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	2b20      	cmp	r3, #32
 800462e:	d01a      	beq.n	8004666 <I2C_MasterTransmit_TXE+0x6e>
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004636:	d016      	beq.n	8004666 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004646:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2211      	movs	r2, #17
 800464c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2220      	movs	r2, #32
 800465a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7ff ff72 	bl	8004548 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004664:	e060      	b.n	8004728 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004674:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004684:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2220      	movs	r2, #32
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b40      	cmp	r3, #64	; 0x40
 800469e:	d107      	bne.n	80046b0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f7ff ff79 	bl	80045a0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80046ae:	e03b      	b.n	8004728 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f7ff ff45 	bl	8004548 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80046be:	e033      	b.n	8004728 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
 80046c2:	2b21      	cmp	r3, #33	; 0x21
 80046c4:	d005      	beq.n	80046d2 <I2C_MasterTransmit_TXE+0xda>
 80046c6:	7bbb      	ldrb	r3, [r7, #14]
 80046c8:	2b40      	cmp	r3, #64	; 0x40
 80046ca:	d12d      	bne.n	8004728 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80046cc:	7bfb      	ldrb	r3, [r7, #15]
 80046ce:	2b22      	cmp	r3, #34	; 0x22
 80046d0:	d12a      	bne.n	8004728 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d108      	bne.n	80046ee <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046ea:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80046ec:	e01c      	b.n	8004728 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b40      	cmp	r3, #64	; 0x40
 80046f8:	d103      	bne.n	8004702 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f880 	bl	8004800 <I2C_MemoryTransmit_TXE_BTF>
}
 8004700:	e012      	b.n	8004728 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	781a      	ldrb	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471c:	b29b      	uxth	r3, r3
 800471e:	3b01      	subs	r3, #1
 8004720:	b29a      	uxth	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004726:	e7ff      	b.n	8004728 <I2C_MasterTransmit_TXE+0x130>
 8004728:	bf00      	nop
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b21      	cmp	r3, #33	; 0x21
 8004748:	d156      	bne.n	80047f8 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800474e:	b29b      	uxth	r3, r3
 8004750:	2b00      	cmp	r3, #0
 8004752:	d012      	beq.n	800477a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004758:	781a      	ldrb	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	1c5a      	adds	r2, r3, #1
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800476e:	b29b      	uxth	r3, r3
 8004770:	3b01      	subs	r3, #1
 8004772:	b29a      	uxth	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004778:	e03e      	b.n	80047f8 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2b08      	cmp	r3, #8
 800477e:	d01d      	beq.n	80047bc <I2C_MasterTransmit_BTF+0x8c>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2b20      	cmp	r3, #32
 8004784:	d01a      	beq.n	80047bc <I2C_MasterTransmit_BTF+0x8c>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800478c:	d016      	beq.n	80047bc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800479c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2211      	movs	r2, #17
 80047a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2220      	movs	r2, #32
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7ff fec7 	bl	8004548 <HAL_I2C_MasterTxCpltCallback>
}
 80047ba:	e01d      	b.n	80047f8 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047ca:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047da:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2220      	movs	r2, #32
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7ff fea8 	bl	8004548 <HAL_I2C_MasterTxCpltCallback>
}
 80047f8:	bf00      	nop
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800480e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004814:	2b00      	cmp	r3, #0
 8004816:	d11d      	bne.n	8004854 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481c:	2b01      	cmp	r3, #1
 800481e:	d10b      	bne.n	8004838 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004824:	b2da      	uxtb	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004830:	1c9a      	adds	r2, r3, #2
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004836:	e06e      	b.n	8004916 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800483c:	b29b      	uxth	r3, r3
 800483e:	121b      	asrs	r3, r3, #8
 8004840:	b2da      	uxtb	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800484c:	1c5a      	adds	r2, r3, #1
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004852:	e060      	b.n	8004916 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004858:	2b01      	cmp	r3, #1
 800485a:	d10b      	bne.n	8004874 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004860:	b2da      	uxtb	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800486c:	1c5a      	adds	r2, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004872:	e050      	b.n	8004916 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004878:	2b02      	cmp	r3, #2
 800487a:	d14c      	bne.n	8004916 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800487c:	7bfb      	ldrb	r3, [r7, #15]
 800487e:	2b22      	cmp	r3, #34	; 0x22
 8004880:	d108      	bne.n	8004894 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004890:	601a      	str	r2, [r3, #0]
}
 8004892:	e040      	b.n	8004916 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004898:	b29b      	uxth	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d015      	beq.n	80048ca <I2C_MemoryTransmit_TXE_BTF+0xca>
 800489e:	7bfb      	ldrb	r3, [r7, #15]
 80048a0:	2b21      	cmp	r3, #33	; 0x21
 80048a2:	d112      	bne.n	80048ca <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	781a      	ldrb	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048be:	b29b      	uxth	r3, r3
 80048c0:	3b01      	subs	r3, #1
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80048c8:	e025      	b.n	8004916 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d120      	bne.n	8004916 <I2C_MemoryTransmit_TXE_BTF+0x116>
 80048d4:	7bfb      	ldrb	r3, [r7, #15]
 80048d6:	2b21      	cmp	r3, #33	; 0x21
 80048d8:	d11d      	bne.n	8004916 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048e8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048f8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2220      	movs	r2, #32
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f7ff fe45 	bl	80045a0 <HAL_I2C_MemTxCpltCallback>
}
 8004916:	bf00      	nop
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b084      	sub	sp, #16
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b22      	cmp	r3, #34	; 0x22
 8004930:	f040 80a2 	bne.w	8004a78 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004938:	b29b      	uxth	r3, r3
 800493a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2b03      	cmp	r3, #3
 8004940:	d921      	bls.n	8004986 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	691a      	ldr	r2, [r3, #16]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	b2d2      	uxtb	r2, r2
 800494e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	1c5a      	adds	r2, r3, #1
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800495e:	b29b      	uxth	r3, r3
 8004960:	3b01      	subs	r3, #1
 8004962:	b29a      	uxth	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800496c:	b29b      	uxth	r3, r3
 800496e:	2b03      	cmp	r3, #3
 8004970:	f040 8082 	bne.w	8004a78 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004982:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004984:	e078      	b.n	8004a78 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498a:	2b02      	cmp	r3, #2
 800498c:	d074      	beq.n	8004a78 <I2C_MasterReceive_RXNE+0x15a>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d002      	beq.n	800499a <I2C_MasterReceive_RXNE+0x7c>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d16e      	bne.n	8004a78 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f001 f818 	bl	80059d0 <I2C_WaitOnSTOPRequestThroughIT>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d142      	bne.n	8004a2c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049b4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049c4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	691a      	ldr	r2, [r3, #16]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	b2d2      	uxtb	r2, r2
 80049d2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2220      	movs	r2, #32
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b40      	cmp	r3, #64	; 0x40
 80049fe:	d10a      	bne.n	8004a16 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7ff fdd0 	bl	80045b4 <HAL_I2C_MemRxCpltCallback>
}
 8004a14:	e030      	b.n	8004a78 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2212      	movs	r2, #18
 8004a22:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7ff fd99 	bl	800455c <HAL_I2C_MasterRxCpltCallback>
}
 8004a2a:	e025      	b.n	8004a78 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685a      	ldr	r2, [r3, #4]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a3a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	691a      	ldr	r2, [r3, #16]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	b2d2      	uxtb	r2, r2
 8004a48:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	1c5a      	adds	r2, r3, #1
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2220      	movs	r2, #32
 8004a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7fb feb8 	bl	80007e8 <HAL_I2C_ErrorCallback>
}
 8004a78:	bf00      	nop
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	2b04      	cmp	r3, #4
 8004a96:	d11b      	bne.n	8004ad0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aa6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	691a      	ldr	r2, [r3, #16]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab2:	b2d2      	uxtb	r2, r2
 8004ab4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aba:	1c5a      	adds	r2, r3, #1
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004ace:	e0bd      	b.n	8004c4c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	2b03      	cmp	r3, #3
 8004ad8:	d129      	bne.n	8004b2e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ae8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2b04      	cmp	r3, #4
 8004aee:	d00a      	beq.n	8004b06 <I2C_MasterReceive_BTF+0x86>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d007      	beq.n	8004b06 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b04:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	691a      	ldr	r2, [r3, #16]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	b2d2      	uxtb	r2, r2
 8004b12:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	1c5a      	adds	r2, r3, #1
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	3b01      	subs	r3, #1
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b2c:	e08e      	b.n	8004c4c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d176      	bne.n	8004c26 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d002      	beq.n	8004b44 <I2C_MasterReceive_BTF+0xc4>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2b10      	cmp	r3, #16
 8004b42:	d108      	bne.n	8004b56 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	e019      	b.n	8004b8a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d002      	beq.n	8004b62 <I2C_MasterReceive_BTF+0xe2>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d108      	bne.n	8004b74 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b70:	601a      	str	r2, [r3, #0]
 8004b72:	e00a      	b.n	8004b8a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2b10      	cmp	r3, #16
 8004b78:	d007      	beq.n	8004b8a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b88:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	691a      	ldr	r2, [r3, #16]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	b2d2      	uxtb	r2, r2
 8004b96:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	1c5a      	adds	r2, r3, #1
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	691a      	ldr	r2, [r3, #16]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	1c5a      	adds	r2, r3, #1
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004be4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2220      	movs	r2, #32
 8004bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b40      	cmp	r3, #64	; 0x40
 8004bf8:	d10a      	bne.n	8004c10 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7ff fcd3 	bl	80045b4 <HAL_I2C_MemRxCpltCallback>
}
 8004c0e:	e01d      	b.n	8004c4c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2212      	movs	r2, #18
 8004c1c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7ff fc9c 	bl	800455c <HAL_I2C_MasterRxCpltCallback>
}
 8004c24:	e012      	b.n	8004c4c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	691a      	ldr	r2, [r3, #16]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	b2d2      	uxtb	r2, r2
 8004c32:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	1c5a      	adds	r2, r3, #1
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	3b01      	subs	r3, #1
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004c4c:	bf00      	nop
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b40      	cmp	r3, #64	; 0x40
 8004c66:	d117      	bne.n	8004c98 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d109      	bne.n	8004c84 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	461a      	mov	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c80:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004c82:	e067      	b.n	8004d54 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	f043 0301 	orr.w	r3, r3, #1
 8004c8e:	b2da      	uxtb	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	611a      	str	r2, [r3, #16]
}
 8004c96:	e05d      	b.n	8004d54 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ca0:	d133      	bne.n	8004d0a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b21      	cmp	r3, #33	; 0x21
 8004cac:	d109      	bne.n	8004cc2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004cbe:	611a      	str	r2, [r3, #16]
 8004cc0:	e008      	b.n	8004cd4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	f043 0301 	orr.w	r3, r3, #1
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d004      	beq.n	8004ce6 <I2C_Master_SB+0x92>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d108      	bne.n	8004cf8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d032      	beq.n	8004d54 <I2C_Master_SB+0x100>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d02d      	beq.n	8004d54 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d06:	605a      	str	r2, [r3, #4]
}
 8004d08:	e024      	b.n	8004d54 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10e      	bne.n	8004d30 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	11db      	asrs	r3, r3, #7
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	f003 0306 	and.w	r3, r3, #6
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	f063 030f 	orn	r3, r3, #15
 8004d26:	b2da      	uxtb	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	611a      	str	r2, [r3, #16]
}
 8004d2e:	e011      	b.n	8004d54 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d10d      	bne.n	8004d54 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	11db      	asrs	r3, r3, #7
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	f003 0306 	and.w	r3, r3, #6
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	f063 030e 	orn	r3, r3, #14
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	611a      	str	r2, [r3, #16]
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d004      	beq.n	8004d86 <I2C_Master_ADD10+0x26>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d108      	bne.n	8004d98 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00c      	beq.n	8004da8 <I2C_Master_ADD10+0x48>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d007      	beq.n	8004da8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004da6:	605a      	str	r2, [r3, #4]
  }
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b091      	sub	sp, #68	; 0x44
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dc2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dca:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b22      	cmp	r3, #34	; 0x22
 8004ddc:	f040 8169 	bne.w	80050b2 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10f      	bne.n	8004e08 <I2C_Master_ADDR+0x54>
 8004de8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004dec:	2b40      	cmp	r3, #64	; 0x40
 8004dee:	d10b      	bne.n	8004e08 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004df0:	2300      	movs	r3, #0
 8004df2:	633b      	str	r3, [r7, #48]	; 0x30
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	633b      	str	r3, [r7, #48]	; 0x30
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	633b      	str	r3, [r7, #48]	; 0x30
 8004e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e06:	e160      	b.n	80050ca <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d11d      	bne.n	8004e4c <I2C_Master_ADDR+0x98>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e18:	d118      	bne.n	8004e4c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e3e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e44:	1c5a      	adds	r2, r3, #1
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	651a      	str	r2, [r3, #80]	; 0x50
 8004e4a:	e13e      	b.n	80050ca <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d113      	bne.n	8004e7e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e56:	2300      	movs	r3, #0
 8004e58:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e7a:	601a      	str	r2, [r3, #0]
 8004e7c:	e115      	b.n	80050aa <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	f040 808a 	bne.w	8004f9e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e90:	d137      	bne.n	8004f02 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ea0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eb0:	d113      	bne.n	8004eda <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ec0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	e0e7      	b.n	80050aa <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eda:	2300      	movs	r3, #0
 8004edc:	623b      	str	r3, [r7, #32]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	623b      	str	r3, [r7, #32]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	623b      	str	r3, [r7, #32]
 8004eee:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	e0d3      	b.n	80050aa <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d02e      	beq.n	8004f66 <I2C_Master_ADDR+0x1b2>
 8004f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0a:	2b20      	cmp	r3, #32
 8004f0c:	d02b      	beq.n	8004f66 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f10:	2b12      	cmp	r3, #18
 8004f12:	d102      	bne.n	8004f1a <I2C_Master_ADDR+0x166>
 8004f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d125      	bne.n	8004f66 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	d00e      	beq.n	8004f3e <I2C_Master_ADDR+0x18a>
 8004f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d00b      	beq.n	8004f3e <I2C_Master_ADDR+0x18a>
 8004f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f28:	2b10      	cmp	r3, #16
 8004f2a:	d008      	beq.n	8004f3e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f3a:	601a      	str	r2, [r3, #0]
 8004f3c:	e007      	b.n	8004f4e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f4c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f4e:	2300      	movs	r3, #0
 8004f50:	61fb      	str	r3, [r7, #28]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	61fb      	str	r3, [r7, #28]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	61fb      	str	r3, [r7, #28]
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	e0a1      	b.n	80050aa <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f74:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f76:	2300      	movs	r3, #0
 8004f78:	61bb      	str	r3, [r7, #24]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	61bb      	str	r3, [r7, #24]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	61bb      	str	r3, [r7, #24]
 8004f8a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f9a:	601a      	str	r2, [r3, #0]
 8004f9c:	e085      	b.n	80050aa <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d14d      	bne.n	8005044 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	d016      	beq.n	8004fdc <I2C_Master_ADDR+0x228>
 8004fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d013      	beq.n	8004fdc <I2C_Master_ADDR+0x228>
 8004fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb6:	2b10      	cmp	r3, #16
 8004fb8:	d010      	beq.n	8004fdc <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fc8:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fd8:	601a      	str	r2, [r3, #0]
 8004fda:	e007      	b.n	8004fec <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fea:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ff6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ffa:	d117      	bne.n	800502c <I2C_Master_ADDR+0x278>
 8004ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005002:	d00b      	beq.n	800501c <I2C_Master_ADDR+0x268>
 8005004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005006:	2b01      	cmp	r3, #1
 8005008:	d008      	beq.n	800501c <I2C_Master_ADDR+0x268>
 800500a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500c:	2b08      	cmp	r3, #8
 800500e:	d005      	beq.n	800501c <I2C_Master_ADDR+0x268>
 8005010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005012:	2b10      	cmp	r3, #16
 8005014:	d002      	beq.n	800501c <I2C_Master_ADDR+0x268>
 8005016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005018:	2b20      	cmp	r3, #32
 800501a:	d107      	bne.n	800502c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800502a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800502c:	2300      	movs	r3, #0
 800502e:	617b      	str	r3, [r7, #20]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	617b      	str	r3, [r7, #20]
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	e032      	b.n	80050aa <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005052:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800505e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005062:	d117      	bne.n	8005094 <I2C_Master_ADDR+0x2e0>
 8005064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005066:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800506a:	d00b      	beq.n	8005084 <I2C_Master_ADDR+0x2d0>
 800506c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506e:	2b01      	cmp	r3, #1
 8005070:	d008      	beq.n	8005084 <I2C_Master_ADDR+0x2d0>
 8005072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005074:	2b08      	cmp	r3, #8
 8005076:	d005      	beq.n	8005084 <I2C_Master_ADDR+0x2d0>
 8005078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507a:	2b10      	cmp	r3, #16
 800507c:	d002      	beq.n	8005084 <I2C_Master_ADDR+0x2d0>
 800507e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005080:	2b20      	cmp	r3, #32
 8005082:	d107      	bne.n	8005094 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005092:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005094:	2300      	movs	r3, #0
 8005096:	613b      	str	r3, [r7, #16]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	613b      	str	r3, [r7, #16]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	613b      	str	r3, [r7, #16]
 80050a8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80050b0:	e00b      	b.n	80050ca <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050b2:	2300      	movs	r3, #0
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	60fb      	str	r3, [r7, #12]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	60fb      	str	r3, [r7, #12]
 80050c6:	68fb      	ldr	r3, [r7, #12]
}
 80050c8:	e7ff      	b.n	80050ca <I2C_Master_ADDR+0x316>
 80050ca:	bf00      	nop
 80050cc:	3744      	adds	r7, #68	; 0x44
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b084      	sub	sp, #16
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d02b      	beq.n	8005148 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	781a      	ldrb	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	1c5a      	adds	r2, r3, #1
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800510a:	b29b      	uxth	r3, r3
 800510c:	3b01      	subs	r3, #1
 800510e:	b29a      	uxth	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005118:	b29b      	uxth	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d114      	bne.n	8005148 <I2C_SlaveTransmit_TXE+0x72>
 800511e:	7bfb      	ldrb	r3, [r7, #15]
 8005120:	2b29      	cmp	r3, #41	; 0x29
 8005122:	d111      	bne.n	8005148 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005132:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2221      	movs	r2, #33	; 0x21
 8005138:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2228      	movs	r2, #40	; 0x28
 800513e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7fb fb30 	bl	80007a8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005148:	bf00      	nop
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515c:	b29b      	uxth	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d011      	beq.n	8005186 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	781a      	ldrb	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	1c5a      	adds	r2, r3, #1
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800517c:	b29b      	uxth	r3, r3
 800517e:	3b01      	subs	r3, #1
 8005180:	b29a      	uxth	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b084      	sub	sp, #16
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d02c      	beq.n	8005206 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691a      	ldr	r2, [r3, #16]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	3b01      	subs	r3, #1
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d114      	bne.n	8005206 <I2C_SlaveReceive_RXNE+0x74>
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
 80051de:	2b2a      	cmp	r3, #42	; 0x2a
 80051e0:	d111      	bne.n	8005206 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051f0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2222      	movs	r2, #34	; 0x22
 80051f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2228      	movs	r2, #40	; 0x28
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7fb fae1 	bl	80007c8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005206:	bf00      	nop
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800520e:	b480      	push	{r7}
 8005210:	b083      	sub	sp, #12
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800521a:	b29b      	uxth	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d012      	beq.n	8005246 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	691a      	ldr	r2, [r3, #16]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	b2d2      	uxtb	r2, r2
 800522c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	1c5a      	adds	r2, r3, #1
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800523c:	b29b      	uxth	r3, r3
 800523e:	3b01      	subs	r3, #1
 8005240:	b29a      	uxth	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005246:	bf00      	nop
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b084      	sub	sp, #16
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
 800525a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800525c:	2300      	movs	r3, #0
 800525e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005266:	b2db      	uxtb	r3, r3
 8005268:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800526c:	2b28      	cmp	r3, #40	; 0x28
 800526e:	d127      	bne.n	80052c0 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800527e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	089b      	lsrs	r3, r3, #2
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800528c:	2301      	movs	r3, #1
 800528e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	09db      	lsrs	r3, r3, #7
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	2b00      	cmp	r3, #0
 800529a:	d103      	bne.n	80052a4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	81bb      	strh	r3, [r7, #12]
 80052a2:	e002      	b.n	80052aa <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80052b2:	89ba      	ldrh	r2, [r7, #12]
 80052b4:	7bfb      	ldrb	r3, [r7, #15]
 80052b6:	4619      	mov	r1, r3
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7ff f959 	bl	8004570 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80052be:	e008      	b.n	80052d2 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f06f 0202 	mvn.w	r2, #2
 80052c8:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80052d2:	bf00      	nop
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
	...

080052dc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ea:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052fa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80052fc:	2300      	movs	r3, #0
 80052fe:	60bb      	str	r3, [r7, #8]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	60bb      	str	r3, [r7, #8]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0201 	orr.w	r2, r2, #1
 8005316:	601a      	str	r2, [r3, #0]
 8005318:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005328:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005338:	d172      	bne.n	8005420 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800533a:	7bfb      	ldrb	r3, [r7, #15]
 800533c:	2b22      	cmp	r3, #34	; 0x22
 800533e:	d002      	beq.n	8005346 <I2C_Slave_STOPF+0x6a>
 8005340:	7bfb      	ldrb	r3, [r7, #15]
 8005342:	2b2a      	cmp	r3, #42	; 0x2a
 8005344:	d135      	bne.n	80053b2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	b29a      	uxth	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005358:	b29b      	uxth	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d005      	beq.n	800536a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	f043 0204 	orr.w	r2, r3, #4
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005378:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537e:	4618      	mov	r0, r3
 8005380:	f7fe f9f4 	bl	800376c <HAL_DMA_GetState>
 8005384:	4603      	mov	r3, r0
 8005386:	2b01      	cmp	r3, #1
 8005388:	d049      	beq.n	800541e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538e:	4a69      	ldr	r2, [pc, #420]	; (8005534 <I2C_Slave_STOPF+0x258>)
 8005390:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005396:	4618      	mov	r0, r3
 8005398:	f7fe f83c 	bl	8003414 <HAL_DMA_Abort_IT>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d03d      	beq.n	800541e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053ac:	4610      	mov	r0, r2
 80053ae:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80053b0:	e035      	b.n	800541e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d005      	beq.n	80053d6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	f043 0204 	orr.w	r2, r3, #4
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053e4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fe f9be 	bl	800376c <HAL_DMA_GetState>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d014      	beq.n	8005420 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053fa:	4a4e      	ldr	r2, [pc, #312]	; (8005534 <I2C_Slave_STOPF+0x258>)
 80053fc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005402:	4618      	mov	r0, r3
 8005404:	f7fe f806 	bl	8003414 <HAL_DMA_Abort_IT>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d008      	beq.n	8005420 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005418:	4610      	mov	r0, r2
 800541a:	4798      	blx	r3
 800541c:	e000      	b.n	8005420 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800541e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005424:	b29b      	uxth	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d03e      	beq.n	80054a8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	f003 0304 	and.w	r3, r3, #4
 8005434:	2b04      	cmp	r3, #4
 8005436:	d112      	bne.n	800545e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691a      	ldr	r2, [r3, #16]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005442:	b2d2      	uxtb	r2, r2
 8005444:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005454:	b29b      	uxth	r3, r3
 8005456:	3b01      	subs	r3, #1
 8005458:	b29a      	uxth	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005468:	2b40      	cmp	r3, #64	; 0x40
 800546a:	d112      	bne.n	8005492 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	691a      	ldr	r2, [r3, #16]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	b2d2      	uxtb	r2, r2
 8005478:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	1c5a      	adds	r2, r3, #1
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005488:	b29b      	uxth	r3, r3
 800548a:	3b01      	subs	r3, #1
 800548c:	b29a      	uxth	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005496:	b29b      	uxth	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	d005      	beq.n	80054a8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a0:	f043 0204 	orr.w	r2, r3, #4
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d003      	beq.n	80054b8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 f8b3 	bl	800561c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80054b6:	e039      	b.n	800552c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
 80054ba:	2b2a      	cmp	r3, #42	; 0x2a
 80054bc:	d109      	bne.n	80054d2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2228      	movs	r2, #40	; 0x28
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f7fb f97b 	bl	80007c8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b28      	cmp	r3, #40	; 0x28
 80054dc:	d111      	bne.n	8005502 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a15      	ldr	r2, [pc, #84]	; (8005538 <I2C_Slave_STOPF+0x25c>)
 80054e2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2220      	movs	r2, #32
 80054ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7ff f846 	bl	800458c <HAL_I2C_ListenCpltCallback>
}
 8005500:	e014      	b.n	800552c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005506:	2b22      	cmp	r3, #34	; 0x22
 8005508:	d002      	beq.n	8005510 <I2C_Slave_STOPF+0x234>
 800550a:	7bfb      	ldrb	r3, [r7, #15]
 800550c:	2b22      	cmp	r3, #34	; 0x22
 800550e:	d10d      	bne.n	800552c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2220      	movs	r2, #32
 800551a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7fb f94e 	bl	80007c8 <HAL_I2C_SlaveRxCpltCallback>
}
 800552c:	bf00      	nop
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	08005881 	.word	0x08005881
 8005538:	ffff0000 	.word	0xffff0000

0800553c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800554a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005550:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2b08      	cmp	r3, #8
 8005556:	d002      	beq.n	800555e <I2C_Slave_AF+0x22>
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2b20      	cmp	r3, #32
 800555c:	d129      	bne.n	80055b2 <I2C_Slave_AF+0x76>
 800555e:	7bfb      	ldrb	r3, [r7, #15]
 8005560:	2b28      	cmp	r3, #40	; 0x28
 8005562:	d126      	bne.n	80055b2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a2c      	ldr	r2, [pc, #176]	; (8005618 <I2C_Slave_AF+0xdc>)
 8005568:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	685a      	ldr	r2, [r3, #4]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005578:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005582:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005592:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2220      	movs	r2, #32
 800559e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7fe ffee 	bl	800458c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80055b0:	e02e      	b.n	8005610 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80055b2:	7bfb      	ldrb	r3, [r7, #15]
 80055b4:	2b21      	cmp	r3, #33	; 0x21
 80055b6:	d126      	bne.n	8005606 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a17      	ldr	r2, [pc, #92]	; (8005618 <I2C_Slave_AF+0xdc>)
 80055bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2221      	movs	r2, #33	; 0x21
 80055c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685a      	ldr	r2, [r3, #4]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80055e2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055ec:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055fc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7fb f8d2 	bl	80007a8 <HAL_I2C_SlaveTxCpltCallback>
}
 8005604:	e004      	b.n	8005610 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800560e:	615a      	str	r2, [r3, #20]
}
 8005610:	bf00      	nop
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	ffff0000 	.word	0xffff0000

0800561c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800562a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005632:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005634:	7bbb      	ldrb	r3, [r7, #14]
 8005636:	2b10      	cmp	r3, #16
 8005638:	d002      	beq.n	8005640 <I2C_ITError+0x24>
 800563a:	7bbb      	ldrb	r3, [r7, #14]
 800563c:	2b40      	cmp	r3, #64	; 0x40
 800563e:	d10a      	bne.n	8005656 <I2C_ITError+0x3a>
 8005640:	7bfb      	ldrb	r3, [r7, #15]
 8005642:	2b22      	cmp	r3, #34	; 0x22
 8005644:	d107      	bne.n	8005656 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005654:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005656:	7bfb      	ldrb	r3, [r7, #15]
 8005658:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800565c:	2b28      	cmp	r3, #40	; 0x28
 800565e:	d107      	bne.n	8005670 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2228      	movs	r2, #40	; 0x28
 800566a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800566e:	e015      	b.n	800569c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800567a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800567e:	d00a      	beq.n	8005696 <I2C_ITError+0x7a>
 8005680:	7bfb      	ldrb	r3, [r7, #15]
 8005682:	2b60      	cmp	r3, #96	; 0x60
 8005684:	d007      	beq.n	8005696 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2220      	movs	r2, #32
 800568a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056aa:	d162      	bne.n	8005772 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	685a      	ldr	r2, [r3, #4]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056ba:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d020      	beq.n	800570c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ce:	4a6a      	ldr	r2, [pc, #424]	; (8005878 <I2C_ITError+0x25c>)
 80056d0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fd fe9c 	bl	8003414 <HAL_DMA_Abort_IT>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 8089 	beq.w	80057f6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f022 0201 	bic.w	r2, r2, #1
 80056f2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2220      	movs	r2, #32
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005706:	4610      	mov	r0, r2
 8005708:	4798      	blx	r3
 800570a:	e074      	b.n	80057f6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005710:	4a59      	ldr	r2, [pc, #356]	; (8005878 <I2C_ITError+0x25c>)
 8005712:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005718:	4618      	mov	r0, r3
 800571a:	f7fd fe7b 	bl	8003414 <HAL_DMA_Abort_IT>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d068      	beq.n	80057f6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572e:	2b40      	cmp	r3, #64	; 0x40
 8005730:	d10b      	bne.n	800574a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	691a      	ldr	r2, [r3, #16]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	b2d2      	uxtb	r2, r2
 800573e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005744:	1c5a      	adds	r2, r3, #1
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 0201 	bic.w	r2, r2, #1
 8005758:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2220      	movs	r2, #32
 800575e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800576c:	4610      	mov	r0, r2
 800576e:	4798      	blx	r3
 8005770:	e041      	b.n	80057f6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b60      	cmp	r3, #96	; 0x60
 800577c:	d125      	bne.n	80057ca <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2220      	movs	r2, #32
 8005782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005796:	2b40      	cmp	r3, #64	; 0x40
 8005798:	d10b      	bne.n	80057b2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	691a      	ldr	r2, [r3, #16]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a4:	b2d2      	uxtb	r2, r2
 80057a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ac:	1c5a      	adds	r2, r3, #1
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f022 0201 	bic.w	r2, r2, #1
 80057c0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f7fe ff00 	bl	80045c8 <HAL_I2C_AbortCpltCallback>
 80057c8:	e015      	b.n	80057f6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d4:	2b40      	cmp	r3, #64	; 0x40
 80057d6:	d10b      	bne.n	80057f0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	691a      	ldr	r2, [r3, #16]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e2:	b2d2      	uxtb	r2, r2
 80057e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ea:	1c5a      	adds	r2, r3, #1
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f7fa fff9 	bl	80007e8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10e      	bne.n	8005824 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800580c:	2b00      	cmp	r3, #0
 800580e:	d109      	bne.n	8005824 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005816:	2b00      	cmp	r3, #0
 8005818:	d104      	bne.n	8005824 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005820:	2b00      	cmp	r3, #0
 8005822:	d007      	beq.n	8005834 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005832:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800583a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005840:	f003 0304 	and.w	r3, r3, #4
 8005844:	2b04      	cmp	r3, #4
 8005846:	d113      	bne.n	8005870 <I2C_ITError+0x254>
 8005848:	7bfb      	ldrb	r3, [r7, #15]
 800584a:	2b28      	cmp	r3, #40	; 0x28
 800584c:	d110      	bne.n	8005870 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a0a      	ldr	r2, [pc, #40]	; (800587c <I2C_ITError+0x260>)
 8005852:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2220      	movs	r2, #32
 800585e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7fe fe8e 	bl	800458c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005870:	bf00      	nop
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	08005881 	.word	0x08005881
 800587c:	ffff0000 	.word	0xffff0000

08005880 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005888:	2300      	movs	r3, #0
 800588a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005890:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005898:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800589a:	4b4b      	ldr	r3, [pc, #300]	; (80059c8 <I2C_DMAAbort+0x148>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	08db      	lsrs	r3, r3, #3
 80058a0:	4a4a      	ldr	r2, [pc, #296]	; (80059cc <I2C_DMAAbort+0x14c>)
 80058a2:	fba2 2303 	umull	r2, r3, r2, r3
 80058a6:	0a1a      	lsrs	r2, r3, #8
 80058a8:	4613      	mov	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4413      	add	r3, r2
 80058ae:	00da      	lsls	r2, r3, #3
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d106      	bne.n	80058c8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058be:	f043 0220 	orr.w	r2, r3, #32
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80058c6:	e00a      	b.n	80058de <I2C_DMAAbort+0x5e>
    }
    count--;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	3b01      	subs	r3, #1
 80058cc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058dc:	d0ea      	beq.n	80058b4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ea:	2200      	movs	r2, #0
 80058ec:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fa:	2200      	movs	r2, #0
 80058fc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800590c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2200      	movs	r2, #0
 8005912:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005918:	2b00      	cmp	r3, #0
 800591a:	d003      	beq.n	8005924 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005920:	2200      	movs	r2, #0
 8005922:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005928:	2b00      	cmp	r3, #0
 800592a:	d003      	beq.n	8005934 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005930:	2200      	movs	r2, #0
 8005932:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f022 0201 	bic.w	r2, r2, #1
 8005942:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b60      	cmp	r3, #96	; 0x60
 800594e:	d10e      	bne.n	800596e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	2220      	movs	r2, #32
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	2200      	movs	r2, #0
 8005964:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005966:	6978      	ldr	r0, [r7, #20]
 8005968:	f7fe fe2e 	bl	80045c8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800596c:	e027      	b.n	80059be <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800596e:	7cfb      	ldrb	r3, [r7, #19]
 8005970:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005974:	2b28      	cmp	r3, #40	; 0x28
 8005976:	d117      	bne.n	80059a8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 0201 	orr.w	r2, r2, #1
 8005986:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005996:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	2200      	movs	r2, #0
 800599c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	2228      	movs	r2, #40	; 0x28
 80059a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80059a6:	e007      	b.n	80059b8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	2220      	movs	r2, #32
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80059b8:	6978      	ldr	r0, [r7, #20]
 80059ba:	f7fa ff15 	bl	80007e8 <HAL_I2C_ErrorCallback>
}
 80059be:	bf00      	nop
 80059c0:	3718      	adds	r7, #24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	200000dc 	.word	0x200000dc
 80059cc:	14f8b589 	.word	0x14f8b589

080059d0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059d8:	2300      	movs	r3, #0
 80059da:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80059dc:	4b13      	ldr	r3, [pc, #76]	; (8005a2c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	08db      	lsrs	r3, r3, #3
 80059e2:	4a13      	ldr	r2, [pc, #76]	; (8005a30 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80059e4:	fba2 2303 	umull	r2, r3, r2, r3
 80059e8:	0a1a      	lsrs	r2, r3, #8
 80059ea:	4613      	mov	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	3b01      	subs	r3, #1
 80059f6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d107      	bne.n	8005a0e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	f043 0220 	orr.w	r2, r3, #32
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e008      	b.n	8005a20 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a1c:	d0e9      	beq.n	80059f2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3714      	adds	r7, #20
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	200000dc 	.word	0x200000dc
 8005a30:	14f8b589 	.word	0x14f8b589

08005a34 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a40:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005a44:	d103      	bne.n	8005a4e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005a4c:	e007      	b.n	8005a5e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a52:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005a56:	d102      	bne.n	8005a5e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2208      	movs	r2, #8
 8005a5c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005a5e:	bf00      	nop
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
	...

08005a6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e0cc      	b.n	8005c1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a80:	4b68      	ldr	r3, [pc, #416]	; (8005c24 <HAL_RCC_ClockConfig+0x1b8>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 030f 	and.w	r3, r3, #15
 8005a88:	683a      	ldr	r2, [r7, #0]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d90c      	bls.n	8005aa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a8e:	4b65      	ldr	r3, [pc, #404]	; (8005c24 <HAL_RCC_ClockConfig+0x1b8>)
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	b2d2      	uxtb	r2, r2
 8005a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a96:	4b63      	ldr	r3, [pc, #396]	; (8005c24 <HAL_RCC_ClockConfig+0x1b8>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 030f 	and.w	r3, r3, #15
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d001      	beq.n	8005aa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e0b8      	b.n	8005c1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d020      	beq.n	8005af6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0304 	and.w	r3, r3, #4
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d005      	beq.n	8005acc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ac0:	4b59      	ldr	r3, [pc, #356]	; (8005c28 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	4a58      	ldr	r2, [pc, #352]	; (8005c28 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005aca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0308 	and.w	r3, r3, #8
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d005      	beq.n	8005ae4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ad8:	4b53      	ldr	r3, [pc, #332]	; (8005c28 <HAL_RCC_ClockConfig+0x1bc>)
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	4a52      	ldr	r2, [pc, #328]	; (8005c28 <HAL_RCC_ClockConfig+0x1bc>)
 8005ade:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ae2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ae4:	4b50      	ldr	r3, [pc, #320]	; (8005c28 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	494d      	ldr	r1, [pc, #308]	; (8005c28 <HAL_RCC_ClockConfig+0x1bc>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d044      	beq.n	8005b8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d107      	bne.n	8005b1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b0a:	4b47      	ldr	r3, [pc, #284]	; (8005c28 <HAL_RCC_ClockConfig+0x1bc>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d119      	bne.n	8005b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e07f      	b.n	8005c1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d003      	beq.n	8005b2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b26:	2b03      	cmp	r3, #3
 8005b28:	d107      	bne.n	8005b3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b2a:	4b3f      	ldr	r3, [pc, #252]	; (8005c28 <HAL_RCC_ClockConfig+0x1bc>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d109      	bne.n	8005b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e06f      	b.n	8005c1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b3a:	4b3b      	ldr	r3, [pc, #236]	; (8005c28 <HAL_RCC_ClockConfig+0x1bc>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0302 	and.w	r3, r3, #2
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e067      	b.n	8005c1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b4a:	4b37      	ldr	r3, [pc, #220]	; (8005c28 <HAL_RCC_ClockConfig+0x1bc>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f023 0203 	bic.w	r2, r3, #3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	4934      	ldr	r1, [pc, #208]	; (8005c28 <HAL_RCC_ClockConfig+0x1bc>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b5c:	f7fd f9a2 	bl	8002ea4 <HAL_GetTick>
 8005b60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b62:	e00a      	b.n	8005b7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b64:	f7fd f99e 	bl	8002ea4 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e04f      	b.n	8005c1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b7a:	4b2b      	ldr	r3, [pc, #172]	; (8005c28 <HAL_RCC_ClockConfig+0x1bc>)
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f003 020c 	and.w	r2, r3, #12
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d1eb      	bne.n	8005b64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b8c:	4b25      	ldr	r3, [pc, #148]	; (8005c24 <HAL_RCC_ClockConfig+0x1b8>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 030f 	and.w	r3, r3, #15
 8005b94:	683a      	ldr	r2, [r7, #0]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d20c      	bcs.n	8005bb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b9a:	4b22      	ldr	r3, [pc, #136]	; (8005c24 <HAL_RCC_ClockConfig+0x1b8>)
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	b2d2      	uxtb	r2, r2
 8005ba0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ba2:	4b20      	ldr	r3, [pc, #128]	; (8005c24 <HAL_RCC_ClockConfig+0x1b8>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 030f 	and.w	r3, r3, #15
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d001      	beq.n	8005bb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e032      	b.n	8005c1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0304 	and.w	r3, r3, #4
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d008      	beq.n	8005bd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bc0:	4b19      	ldr	r3, [pc, #100]	; (8005c28 <HAL_RCC_ClockConfig+0x1bc>)
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	4916      	ldr	r1, [pc, #88]	; (8005c28 <HAL_RCC_ClockConfig+0x1bc>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0308 	and.w	r3, r3, #8
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d009      	beq.n	8005bf2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bde:	4b12      	ldr	r3, [pc, #72]	; (8005c28 <HAL_RCC_ClockConfig+0x1bc>)
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	00db      	lsls	r3, r3, #3
 8005bec:	490e      	ldr	r1, [pc, #56]	; (8005c28 <HAL_RCC_ClockConfig+0x1bc>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005bf2:	f000 f855 	bl	8005ca0 <HAL_RCC_GetSysClockFreq>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	4b0b      	ldr	r3, [pc, #44]	; (8005c28 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	091b      	lsrs	r3, r3, #4
 8005bfe:	f003 030f 	and.w	r3, r3, #15
 8005c02:	490a      	ldr	r1, [pc, #40]	; (8005c2c <HAL_RCC_ClockConfig+0x1c0>)
 8005c04:	5ccb      	ldrb	r3, [r1, r3]
 8005c06:	fa22 f303 	lsr.w	r3, r2, r3
 8005c0a:	4a09      	ldr	r2, [pc, #36]	; (8005c30 <HAL_RCC_ClockConfig+0x1c4>)
 8005c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005c0e:	4b09      	ldr	r3, [pc, #36]	; (8005c34 <HAL_RCC_ClockConfig+0x1c8>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7fd f902 	bl	8002e1c <HAL_InitTick>

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	40023c00 	.word	0x40023c00
 8005c28:	40023800 	.word	0x40023800
 8005c2c:	08008618 	.word	0x08008618
 8005c30:	200000dc 	.word	0x200000dc
 8005c34:	200000e0 	.word	0x200000e0

08005c38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c3c:	4b03      	ldr	r3, [pc, #12]	; (8005c4c <HAL_RCC_GetHCLKFreq+0x14>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	200000dc 	.word	0x200000dc

08005c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c54:	f7ff fff0 	bl	8005c38 <HAL_RCC_GetHCLKFreq>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	4b05      	ldr	r3, [pc, #20]	; (8005c70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	0a9b      	lsrs	r3, r3, #10
 8005c60:	f003 0307 	and.w	r3, r3, #7
 8005c64:	4903      	ldr	r1, [pc, #12]	; (8005c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c66:	5ccb      	ldrb	r3, [r1, r3]
 8005c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	40023800 	.word	0x40023800
 8005c74:	08008628 	.word	0x08008628

08005c78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c7c:	f7ff ffdc 	bl	8005c38 <HAL_RCC_GetHCLKFreq>
 8005c80:	4602      	mov	r2, r0
 8005c82:	4b05      	ldr	r3, [pc, #20]	; (8005c98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	0b5b      	lsrs	r3, r3, #13
 8005c88:	f003 0307 	and.w	r3, r3, #7
 8005c8c:	4903      	ldr	r1, [pc, #12]	; (8005c9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c8e:	5ccb      	ldrb	r3, [r1, r3]
 8005c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	40023800 	.word	0x40023800
 8005c9c:	08008628 	.word	0x08008628

08005ca0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ca4:	b0ae      	sub	sp, #184	; 0xb8
 8005ca6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cc6:	4bcb      	ldr	r3, [pc, #812]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f003 030c 	and.w	r3, r3, #12
 8005cce:	2b0c      	cmp	r3, #12
 8005cd0:	f200 8206 	bhi.w	80060e0 <HAL_RCC_GetSysClockFreq+0x440>
 8005cd4:	a201      	add	r2, pc, #4	; (adr r2, 8005cdc <HAL_RCC_GetSysClockFreq+0x3c>)
 8005cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cda:	bf00      	nop
 8005cdc:	08005d11 	.word	0x08005d11
 8005ce0:	080060e1 	.word	0x080060e1
 8005ce4:	080060e1 	.word	0x080060e1
 8005ce8:	080060e1 	.word	0x080060e1
 8005cec:	08005d19 	.word	0x08005d19
 8005cf0:	080060e1 	.word	0x080060e1
 8005cf4:	080060e1 	.word	0x080060e1
 8005cf8:	080060e1 	.word	0x080060e1
 8005cfc:	08005d21 	.word	0x08005d21
 8005d00:	080060e1 	.word	0x080060e1
 8005d04:	080060e1 	.word	0x080060e1
 8005d08:	080060e1 	.word	0x080060e1
 8005d0c:	08005f11 	.word	0x08005f11
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d10:	4bb9      	ldr	r3, [pc, #740]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x358>)
 8005d12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8005d16:	e1e7      	b.n	80060e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d18:	4bb8      	ldr	r3, [pc, #736]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x35c>)
 8005d1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005d1e:	e1e3      	b.n	80060e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d20:	4bb4      	ldr	r3, [pc, #720]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d2c:	4bb1      	ldr	r3, [pc, #708]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d071      	beq.n	8005e1c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d38:	4bae      	ldr	r3, [pc, #696]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	099b      	lsrs	r3, r3, #6
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d44:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005d48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d54:	2300      	movs	r3, #0
 8005d56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005d5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005d5e:	4622      	mov	r2, r4
 8005d60:	462b      	mov	r3, r5
 8005d62:	f04f 0000 	mov.w	r0, #0
 8005d66:	f04f 0100 	mov.w	r1, #0
 8005d6a:	0159      	lsls	r1, r3, #5
 8005d6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d70:	0150      	lsls	r0, r2, #5
 8005d72:	4602      	mov	r2, r0
 8005d74:	460b      	mov	r3, r1
 8005d76:	4621      	mov	r1, r4
 8005d78:	1a51      	subs	r1, r2, r1
 8005d7a:	6439      	str	r1, [r7, #64]	; 0x40
 8005d7c:	4629      	mov	r1, r5
 8005d7e:	eb63 0301 	sbc.w	r3, r3, r1
 8005d82:	647b      	str	r3, [r7, #68]	; 0x44
 8005d84:	f04f 0200 	mov.w	r2, #0
 8005d88:	f04f 0300 	mov.w	r3, #0
 8005d8c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005d90:	4649      	mov	r1, r9
 8005d92:	018b      	lsls	r3, r1, #6
 8005d94:	4641      	mov	r1, r8
 8005d96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d9a:	4641      	mov	r1, r8
 8005d9c:	018a      	lsls	r2, r1, #6
 8005d9e:	4641      	mov	r1, r8
 8005da0:	1a51      	subs	r1, r2, r1
 8005da2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005da4:	4649      	mov	r1, r9
 8005da6:	eb63 0301 	sbc.w	r3, r3, r1
 8005daa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dac:	f04f 0200 	mov.w	r2, #0
 8005db0:	f04f 0300 	mov.w	r3, #0
 8005db4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005db8:	4649      	mov	r1, r9
 8005dba:	00cb      	lsls	r3, r1, #3
 8005dbc:	4641      	mov	r1, r8
 8005dbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dc2:	4641      	mov	r1, r8
 8005dc4:	00ca      	lsls	r2, r1, #3
 8005dc6:	4610      	mov	r0, r2
 8005dc8:	4619      	mov	r1, r3
 8005dca:	4603      	mov	r3, r0
 8005dcc:	4622      	mov	r2, r4
 8005dce:	189b      	adds	r3, r3, r2
 8005dd0:	633b      	str	r3, [r7, #48]	; 0x30
 8005dd2:	462b      	mov	r3, r5
 8005dd4:	460a      	mov	r2, r1
 8005dd6:	eb42 0303 	adc.w	r3, r2, r3
 8005dda:	637b      	str	r3, [r7, #52]	; 0x34
 8005ddc:	f04f 0200 	mov.w	r2, #0
 8005de0:	f04f 0300 	mov.w	r3, #0
 8005de4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005de8:	4629      	mov	r1, r5
 8005dea:	024b      	lsls	r3, r1, #9
 8005dec:	4621      	mov	r1, r4
 8005dee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005df2:	4621      	mov	r1, r4
 8005df4:	024a      	lsls	r2, r1, #9
 8005df6:	4610      	mov	r0, r2
 8005df8:	4619      	mov	r1, r3
 8005dfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e04:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005e08:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005e0c:	f7fa f9fa 	bl	8000204 <__aeabi_uldivmod>
 8005e10:	4602      	mov	r2, r0
 8005e12:	460b      	mov	r3, r1
 8005e14:	4613      	mov	r3, r2
 8005e16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e1a:	e067      	b.n	8005eec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e1c:	4b75      	ldr	r3, [pc, #468]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	099b      	lsrs	r3, r3, #6
 8005e22:	2200      	movs	r2, #0
 8005e24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e28:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005e2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e34:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e36:	2300      	movs	r3, #0
 8005e38:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e3a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8005e3e:	4622      	mov	r2, r4
 8005e40:	462b      	mov	r3, r5
 8005e42:	f04f 0000 	mov.w	r0, #0
 8005e46:	f04f 0100 	mov.w	r1, #0
 8005e4a:	0159      	lsls	r1, r3, #5
 8005e4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e50:	0150      	lsls	r0, r2, #5
 8005e52:	4602      	mov	r2, r0
 8005e54:	460b      	mov	r3, r1
 8005e56:	4621      	mov	r1, r4
 8005e58:	1a51      	subs	r1, r2, r1
 8005e5a:	62b9      	str	r1, [r7, #40]	; 0x28
 8005e5c:	4629      	mov	r1, r5
 8005e5e:	eb63 0301 	sbc.w	r3, r3, r1
 8005e62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e64:	f04f 0200 	mov.w	r2, #0
 8005e68:	f04f 0300 	mov.w	r3, #0
 8005e6c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005e70:	4649      	mov	r1, r9
 8005e72:	018b      	lsls	r3, r1, #6
 8005e74:	4641      	mov	r1, r8
 8005e76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e7a:	4641      	mov	r1, r8
 8005e7c:	018a      	lsls	r2, r1, #6
 8005e7e:	4641      	mov	r1, r8
 8005e80:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e84:	4649      	mov	r1, r9
 8005e86:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e8a:	f04f 0200 	mov.w	r2, #0
 8005e8e:	f04f 0300 	mov.w	r3, #0
 8005e92:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e96:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e9e:	4692      	mov	sl, r2
 8005ea0:	469b      	mov	fp, r3
 8005ea2:	4623      	mov	r3, r4
 8005ea4:	eb1a 0303 	adds.w	r3, sl, r3
 8005ea8:	623b      	str	r3, [r7, #32]
 8005eaa:	462b      	mov	r3, r5
 8005eac:	eb4b 0303 	adc.w	r3, fp, r3
 8005eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8005eb2:	f04f 0200 	mov.w	r2, #0
 8005eb6:	f04f 0300 	mov.w	r3, #0
 8005eba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005ebe:	4629      	mov	r1, r5
 8005ec0:	028b      	lsls	r3, r1, #10
 8005ec2:	4621      	mov	r1, r4
 8005ec4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ec8:	4621      	mov	r1, r4
 8005eca:	028a      	lsls	r2, r1, #10
 8005ecc:	4610      	mov	r0, r2
 8005ece:	4619      	mov	r1, r3
 8005ed0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	673b      	str	r3, [r7, #112]	; 0x70
 8005ed8:	677a      	str	r2, [r7, #116]	; 0x74
 8005eda:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005ede:	f7fa f991 	bl	8000204 <__aeabi_uldivmod>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005eec:	4b41      	ldr	r3, [pc, #260]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	0c1b      	lsrs	r3, r3, #16
 8005ef2:	f003 0303 	and.w	r3, r3, #3
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	005b      	lsls	r3, r3, #1
 8005efa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8005efe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005f0e:	e0eb      	b.n	80060e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f10:	4b38      	ldr	r3, [pc, #224]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f1c:	4b35      	ldr	r3, [pc, #212]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d06b      	beq.n	8006000 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f28:	4b32      	ldr	r3, [pc, #200]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	099b      	lsrs	r3, r3, #6
 8005f2e:	2200      	movs	r2, #0
 8005f30:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f32:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f3a:	663b      	str	r3, [r7, #96]	; 0x60
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	667b      	str	r3, [r7, #100]	; 0x64
 8005f40:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005f44:	4622      	mov	r2, r4
 8005f46:	462b      	mov	r3, r5
 8005f48:	f04f 0000 	mov.w	r0, #0
 8005f4c:	f04f 0100 	mov.w	r1, #0
 8005f50:	0159      	lsls	r1, r3, #5
 8005f52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f56:	0150      	lsls	r0, r2, #5
 8005f58:	4602      	mov	r2, r0
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	4621      	mov	r1, r4
 8005f5e:	1a51      	subs	r1, r2, r1
 8005f60:	61b9      	str	r1, [r7, #24]
 8005f62:	4629      	mov	r1, r5
 8005f64:	eb63 0301 	sbc.w	r3, r3, r1
 8005f68:	61fb      	str	r3, [r7, #28]
 8005f6a:	f04f 0200 	mov.w	r2, #0
 8005f6e:	f04f 0300 	mov.w	r3, #0
 8005f72:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005f76:	4659      	mov	r1, fp
 8005f78:	018b      	lsls	r3, r1, #6
 8005f7a:	4651      	mov	r1, sl
 8005f7c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f80:	4651      	mov	r1, sl
 8005f82:	018a      	lsls	r2, r1, #6
 8005f84:	4651      	mov	r1, sl
 8005f86:	ebb2 0801 	subs.w	r8, r2, r1
 8005f8a:	4659      	mov	r1, fp
 8005f8c:	eb63 0901 	sbc.w	r9, r3, r1
 8005f90:	f04f 0200 	mov.w	r2, #0
 8005f94:	f04f 0300 	mov.w	r3, #0
 8005f98:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f9c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fa0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fa4:	4690      	mov	r8, r2
 8005fa6:	4699      	mov	r9, r3
 8005fa8:	4623      	mov	r3, r4
 8005faa:	eb18 0303 	adds.w	r3, r8, r3
 8005fae:	613b      	str	r3, [r7, #16]
 8005fb0:	462b      	mov	r3, r5
 8005fb2:	eb49 0303 	adc.w	r3, r9, r3
 8005fb6:	617b      	str	r3, [r7, #20]
 8005fb8:	f04f 0200 	mov.w	r2, #0
 8005fbc:	f04f 0300 	mov.w	r3, #0
 8005fc0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005fc4:	4629      	mov	r1, r5
 8005fc6:	024b      	lsls	r3, r1, #9
 8005fc8:	4621      	mov	r1, r4
 8005fca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005fce:	4621      	mov	r1, r4
 8005fd0:	024a      	lsls	r2, r1, #9
 8005fd2:	4610      	mov	r0, r2
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fda:	2200      	movs	r2, #0
 8005fdc:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fde:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005fe0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005fe4:	f7fa f90e 	bl	8000204 <__aeabi_uldivmod>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	460b      	mov	r3, r1
 8005fec:	4613      	mov	r3, r2
 8005fee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ff2:	e065      	b.n	80060c0 <HAL_RCC_GetSysClockFreq+0x420>
 8005ff4:	40023800 	.word	0x40023800
 8005ff8:	00f42400 	.word	0x00f42400
 8005ffc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006000:	4b3d      	ldr	r3, [pc, #244]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x458>)
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	099b      	lsrs	r3, r3, #6
 8006006:	2200      	movs	r2, #0
 8006008:	4618      	mov	r0, r3
 800600a:	4611      	mov	r1, r2
 800600c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006010:	653b      	str	r3, [r7, #80]	; 0x50
 8006012:	2300      	movs	r3, #0
 8006014:	657b      	str	r3, [r7, #84]	; 0x54
 8006016:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800601a:	4642      	mov	r2, r8
 800601c:	464b      	mov	r3, r9
 800601e:	f04f 0000 	mov.w	r0, #0
 8006022:	f04f 0100 	mov.w	r1, #0
 8006026:	0159      	lsls	r1, r3, #5
 8006028:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800602c:	0150      	lsls	r0, r2, #5
 800602e:	4602      	mov	r2, r0
 8006030:	460b      	mov	r3, r1
 8006032:	4641      	mov	r1, r8
 8006034:	1a51      	subs	r1, r2, r1
 8006036:	60b9      	str	r1, [r7, #8]
 8006038:	4649      	mov	r1, r9
 800603a:	eb63 0301 	sbc.w	r3, r3, r1
 800603e:	60fb      	str	r3, [r7, #12]
 8006040:	f04f 0200 	mov.w	r2, #0
 8006044:	f04f 0300 	mov.w	r3, #0
 8006048:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800604c:	4659      	mov	r1, fp
 800604e:	018b      	lsls	r3, r1, #6
 8006050:	4651      	mov	r1, sl
 8006052:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006056:	4651      	mov	r1, sl
 8006058:	018a      	lsls	r2, r1, #6
 800605a:	4651      	mov	r1, sl
 800605c:	1a54      	subs	r4, r2, r1
 800605e:	4659      	mov	r1, fp
 8006060:	eb63 0501 	sbc.w	r5, r3, r1
 8006064:	f04f 0200 	mov.w	r2, #0
 8006068:	f04f 0300 	mov.w	r3, #0
 800606c:	00eb      	lsls	r3, r5, #3
 800606e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006072:	00e2      	lsls	r2, r4, #3
 8006074:	4614      	mov	r4, r2
 8006076:	461d      	mov	r5, r3
 8006078:	4643      	mov	r3, r8
 800607a:	18e3      	adds	r3, r4, r3
 800607c:	603b      	str	r3, [r7, #0]
 800607e:	464b      	mov	r3, r9
 8006080:	eb45 0303 	adc.w	r3, r5, r3
 8006084:	607b      	str	r3, [r7, #4]
 8006086:	f04f 0200 	mov.w	r2, #0
 800608a:	f04f 0300 	mov.w	r3, #0
 800608e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006092:	4629      	mov	r1, r5
 8006094:	028b      	lsls	r3, r1, #10
 8006096:	4621      	mov	r1, r4
 8006098:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800609c:	4621      	mov	r1, r4
 800609e:	028a      	lsls	r2, r1, #10
 80060a0:	4610      	mov	r0, r2
 80060a2:	4619      	mov	r1, r3
 80060a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060a8:	2200      	movs	r2, #0
 80060aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80060ac:	64fa      	str	r2, [r7, #76]	; 0x4c
 80060ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80060b2:	f7fa f8a7 	bl	8000204 <__aeabi_uldivmod>
 80060b6:	4602      	mov	r2, r0
 80060b8:	460b      	mov	r3, r1
 80060ba:	4613      	mov	r3, r2
 80060bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80060c0:	4b0d      	ldr	r3, [pc, #52]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x458>)
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	0f1b      	lsrs	r3, r3, #28
 80060c6:	f003 0307 	and.w	r3, r3, #7
 80060ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80060ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80060d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80060d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80060de:	e003      	b.n	80060e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060e0:	4b06      	ldr	r3, [pc, #24]	; (80060fc <HAL_RCC_GetSysClockFreq+0x45c>)
 80060e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80060e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	37b8      	adds	r7, #184	; 0xb8
 80060f0:	46bd      	mov	sp, r7
 80060f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060f6:	bf00      	nop
 80060f8:	40023800 	.word	0x40023800
 80060fc:	00f42400 	.word	0x00f42400

08006100 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e28d      	b.n	800662e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	2b00      	cmp	r3, #0
 800611c:	f000 8083 	beq.w	8006226 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006120:	4b94      	ldr	r3, [pc, #592]	; (8006374 <HAL_RCC_OscConfig+0x274>)
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f003 030c 	and.w	r3, r3, #12
 8006128:	2b04      	cmp	r3, #4
 800612a:	d019      	beq.n	8006160 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800612c:	4b91      	ldr	r3, [pc, #580]	; (8006374 <HAL_RCC_OscConfig+0x274>)
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006134:	2b08      	cmp	r3, #8
 8006136:	d106      	bne.n	8006146 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006138:	4b8e      	ldr	r3, [pc, #568]	; (8006374 <HAL_RCC_OscConfig+0x274>)
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006140:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006144:	d00c      	beq.n	8006160 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006146:	4b8b      	ldr	r3, [pc, #556]	; (8006374 <HAL_RCC_OscConfig+0x274>)
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800614e:	2b0c      	cmp	r3, #12
 8006150:	d112      	bne.n	8006178 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006152:	4b88      	ldr	r3, [pc, #544]	; (8006374 <HAL_RCC_OscConfig+0x274>)
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800615a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800615e:	d10b      	bne.n	8006178 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006160:	4b84      	ldr	r3, [pc, #528]	; (8006374 <HAL_RCC_OscConfig+0x274>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d05b      	beq.n	8006224 <HAL_RCC_OscConfig+0x124>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d157      	bne.n	8006224 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e25a      	b.n	800662e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006180:	d106      	bne.n	8006190 <HAL_RCC_OscConfig+0x90>
 8006182:	4b7c      	ldr	r3, [pc, #496]	; (8006374 <HAL_RCC_OscConfig+0x274>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a7b      	ldr	r2, [pc, #492]	; (8006374 <HAL_RCC_OscConfig+0x274>)
 8006188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800618c:	6013      	str	r3, [r2, #0]
 800618e:	e01d      	b.n	80061cc <HAL_RCC_OscConfig+0xcc>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006198:	d10c      	bne.n	80061b4 <HAL_RCC_OscConfig+0xb4>
 800619a:	4b76      	ldr	r3, [pc, #472]	; (8006374 <HAL_RCC_OscConfig+0x274>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a75      	ldr	r2, [pc, #468]	; (8006374 <HAL_RCC_OscConfig+0x274>)
 80061a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061a4:	6013      	str	r3, [r2, #0]
 80061a6:	4b73      	ldr	r3, [pc, #460]	; (8006374 <HAL_RCC_OscConfig+0x274>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a72      	ldr	r2, [pc, #456]	; (8006374 <HAL_RCC_OscConfig+0x274>)
 80061ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061b0:	6013      	str	r3, [r2, #0]
 80061b2:	e00b      	b.n	80061cc <HAL_RCC_OscConfig+0xcc>
 80061b4:	4b6f      	ldr	r3, [pc, #444]	; (8006374 <HAL_RCC_OscConfig+0x274>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a6e      	ldr	r2, [pc, #440]	; (8006374 <HAL_RCC_OscConfig+0x274>)
 80061ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061be:	6013      	str	r3, [r2, #0]
 80061c0:	4b6c      	ldr	r3, [pc, #432]	; (8006374 <HAL_RCC_OscConfig+0x274>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a6b      	ldr	r2, [pc, #428]	; (8006374 <HAL_RCC_OscConfig+0x274>)
 80061c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d013      	beq.n	80061fc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d4:	f7fc fe66 	bl	8002ea4 <HAL_GetTick>
 80061d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061da:	e008      	b.n	80061ee <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061dc:	f7fc fe62 	bl	8002ea4 <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	2b64      	cmp	r3, #100	; 0x64
 80061e8:	d901      	bls.n	80061ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e21f      	b.n	800662e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061ee:	4b61      	ldr	r3, [pc, #388]	; (8006374 <HAL_RCC_OscConfig+0x274>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d0f0      	beq.n	80061dc <HAL_RCC_OscConfig+0xdc>
 80061fa:	e014      	b.n	8006226 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061fc:	f7fc fe52 	bl	8002ea4 <HAL_GetTick>
 8006200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006202:	e008      	b.n	8006216 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006204:	f7fc fe4e 	bl	8002ea4 <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	2b64      	cmp	r3, #100	; 0x64
 8006210:	d901      	bls.n	8006216 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e20b      	b.n	800662e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006216:	4b57      	ldr	r3, [pc, #348]	; (8006374 <HAL_RCC_OscConfig+0x274>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1f0      	bne.n	8006204 <HAL_RCC_OscConfig+0x104>
 8006222:	e000      	b.n	8006226 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0302 	and.w	r3, r3, #2
 800622e:	2b00      	cmp	r3, #0
 8006230:	d06f      	beq.n	8006312 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006232:	4b50      	ldr	r3, [pc, #320]	; (8006374 <HAL_RCC_OscConfig+0x274>)
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f003 030c 	and.w	r3, r3, #12
 800623a:	2b00      	cmp	r3, #0
 800623c:	d017      	beq.n	800626e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800623e:	4b4d      	ldr	r3, [pc, #308]	; (8006374 <HAL_RCC_OscConfig+0x274>)
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006246:	2b08      	cmp	r3, #8
 8006248:	d105      	bne.n	8006256 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800624a:	4b4a      	ldr	r3, [pc, #296]	; (8006374 <HAL_RCC_OscConfig+0x274>)
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00b      	beq.n	800626e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006256:	4b47      	ldr	r3, [pc, #284]	; (8006374 <HAL_RCC_OscConfig+0x274>)
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800625e:	2b0c      	cmp	r3, #12
 8006260:	d11c      	bne.n	800629c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006262:	4b44      	ldr	r3, [pc, #272]	; (8006374 <HAL_RCC_OscConfig+0x274>)
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d116      	bne.n	800629c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800626e:	4b41      	ldr	r3, [pc, #260]	; (8006374 <HAL_RCC_OscConfig+0x274>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b00      	cmp	r3, #0
 8006278:	d005      	beq.n	8006286 <HAL_RCC_OscConfig+0x186>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d001      	beq.n	8006286 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e1d3      	b.n	800662e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006286:	4b3b      	ldr	r3, [pc, #236]	; (8006374 <HAL_RCC_OscConfig+0x274>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	00db      	lsls	r3, r3, #3
 8006294:	4937      	ldr	r1, [pc, #220]	; (8006374 <HAL_RCC_OscConfig+0x274>)
 8006296:	4313      	orrs	r3, r2
 8006298:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800629a:	e03a      	b.n	8006312 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d020      	beq.n	80062e6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062a4:	4b34      	ldr	r3, [pc, #208]	; (8006378 <HAL_RCC_OscConfig+0x278>)
 80062a6:	2201      	movs	r2, #1
 80062a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062aa:	f7fc fdfb 	bl	8002ea4 <HAL_GetTick>
 80062ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062b0:	e008      	b.n	80062c4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062b2:	f7fc fdf7 	bl	8002ea4 <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d901      	bls.n	80062c4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e1b4      	b.n	800662e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062c4:	4b2b      	ldr	r3, [pc, #172]	; (8006374 <HAL_RCC_OscConfig+0x274>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0302 	and.w	r3, r3, #2
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d0f0      	beq.n	80062b2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062d0:	4b28      	ldr	r3, [pc, #160]	; (8006374 <HAL_RCC_OscConfig+0x274>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	00db      	lsls	r3, r3, #3
 80062de:	4925      	ldr	r1, [pc, #148]	; (8006374 <HAL_RCC_OscConfig+0x274>)
 80062e0:	4313      	orrs	r3, r2
 80062e2:	600b      	str	r3, [r1, #0]
 80062e4:	e015      	b.n	8006312 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062e6:	4b24      	ldr	r3, [pc, #144]	; (8006378 <HAL_RCC_OscConfig+0x278>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ec:	f7fc fdda 	bl	8002ea4 <HAL_GetTick>
 80062f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062f2:	e008      	b.n	8006306 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062f4:	f7fc fdd6 	bl	8002ea4 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d901      	bls.n	8006306 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e193      	b.n	800662e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006306:	4b1b      	ldr	r3, [pc, #108]	; (8006374 <HAL_RCC_OscConfig+0x274>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0302 	and.w	r3, r3, #2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1f0      	bne.n	80062f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0308 	and.w	r3, r3, #8
 800631a:	2b00      	cmp	r3, #0
 800631c:	d036      	beq.n	800638c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d016      	beq.n	8006354 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006326:	4b15      	ldr	r3, [pc, #84]	; (800637c <HAL_RCC_OscConfig+0x27c>)
 8006328:	2201      	movs	r2, #1
 800632a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800632c:	f7fc fdba 	bl	8002ea4 <HAL_GetTick>
 8006330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006332:	e008      	b.n	8006346 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006334:	f7fc fdb6 	bl	8002ea4 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b02      	cmp	r3, #2
 8006340:	d901      	bls.n	8006346 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e173      	b.n	800662e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006346:	4b0b      	ldr	r3, [pc, #44]	; (8006374 <HAL_RCC_OscConfig+0x274>)
 8006348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b00      	cmp	r3, #0
 8006350:	d0f0      	beq.n	8006334 <HAL_RCC_OscConfig+0x234>
 8006352:	e01b      	b.n	800638c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006354:	4b09      	ldr	r3, [pc, #36]	; (800637c <HAL_RCC_OscConfig+0x27c>)
 8006356:	2200      	movs	r2, #0
 8006358:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800635a:	f7fc fda3 	bl	8002ea4 <HAL_GetTick>
 800635e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006360:	e00e      	b.n	8006380 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006362:	f7fc fd9f 	bl	8002ea4 <HAL_GetTick>
 8006366:	4602      	mov	r2, r0
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	2b02      	cmp	r3, #2
 800636e:	d907      	bls.n	8006380 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e15c      	b.n	800662e <HAL_RCC_OscConfig+0x52e>
 8006374:	40023800 	.word	0x40023800
 8006378:	42470000 	.word	0x42470000
 800637c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006380:	4b8a      	ldr	r3, [pc, #552]	; (80065ac <HAL_RCC_OscConfig+0x4ac>)
 8006382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006384:	f003 0302 	and.w	r3, r3, #2
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1ea      	bne.n	8006362 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0304 	and.w	r3, r3, #4
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 8097 	beq.w	80064c8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800639a:	2300      	movs	r3, #0
 800639c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800639e:	4b83      	ldr	r3, [pc, #524]	; (80065ac <HAL_RCC_OscConfig+0x4ac>)
 80063a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10f      	bne.n	80063ca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063aa:	2300      	movs	r3, #0
 80063ac:	60bb      	str	r3, [r7, #8]
 80063ae:	4b7f      	ldr	r3, [pc, #508]	; (80065ac <HAL_RCC_OscConfig+0x4ac>)
 80063b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b2:	4a7e      	ldr	r2, [pc, #504]	; (80065ac <HAL_RCC_OscConfig+0x4ac>)
 80063b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063b8:	6413      	str	r3, [r2, #64]	; 0x40
 80063ba:	4b7c      	ldr	r3, [pc, #496]	; (80065ac <HAL_RCC_OscConfig+0x4ac>)
 80063bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063c2:	60bb      	str	r3, [r7, #8]
 80063c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063c6:	2301      	movs	r3, #1
 80063c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063ca:	4b79      	ldr	r3, [pc, #484]	; (80065b0 <HAL_RCC_OscConfig+0x4b0>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d118      	bne.n	8006408 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063d6:	4b76      	ldr	r3, [pc, #472]	; (80065b0 <HAL_RCC_OscConfig+0x4b0>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a75      	ldr	r2, [pc, #468]	; (80065b0 <HAL_RCC_OscConfig+0x4b0>)
 80063dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063e2:	f7fc fd5f 	bl	8002ea4 <HAL_GetTick>
 80063e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063e8:	e008      	b.n	80063fc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063ea:	f7fc fd5b 	bl	8002ea4 <HAL_GetTick>
 80063ee:	4602      	mov	r2, r0
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d901      	bls.n	80063fc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e118      	b.n	800662e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063fc:	4b6c      	ldr	r3, [pc, #432]	; (80065b0 <HAL_RCC_OscConfig+0x4b0>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006404:	2b00      	cmp	r3, #0
 8006406:	d0f0      	beq.n	80063ea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d106      	bne.n	800641e <HAL_RCC_OscConfig+0x31e>
 8006410:	4b66      	ldr	r3, [pc, #408]	; (80065ac <HAL_RCC_OscConfig+0x4ac>)
 8006412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006414:	4a65      	ldr	r2, [pc, #404]	; (80065ac <HAL_RCC_OscConfig+0x4ac>)
 8006416:	f043 0301 	orr.w	r3, r3, #1
 800641a:	6713      	str	r3, [r2, #112]	; 0x70
 800641c:	e01c      	b.n	8006458 <HAL_RCC_OscConfig+0x358>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	2b05      	cmp	r3, #5
 8006424:	d10c      	bne.n	8006440 <HAL_RCC_OscConfig+0x340>
 8006426:	4b61      	ldr	r3, [pc, #388]	; (80065ac <HAL_RCC_OscConfig+0x4ac>)
 8006428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800642a:	4a60      	ldr	r2, [pc, #384]	; (80065ac <HAL_RCC_OscConfig+0x4ac>)
 800642c:	f043 0304 	orr.w	r3, r3, #4
 8006430:	6713      	str	r3, [r2, #112]	; 0x70
 8006432:	4b5e      	ldr	r3, [pc, #376]	; (80065ac <HAL_RCC_OscConfig+0x4ac>)
 8006434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006436:	4a5d      	ldr	r2, [pc, #372]	; (80065ac <HAL_RCC_OscConfig+0x4ac>)
 8006438:	f043 0301 	orr.w	r3, r3, #1
 800643c:	6713      	str	r3, [r2, #112]	; 0x70
 800643e:	e00b      	b.n	8006458 <HAL_RCC_OscConfig+0x358>
 8006440:	4b5a      	ldr	r3, [pc, #360]	; (80065ac <HAL_RCC_OscConfig+0x4ac>)
 8006442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006444:	4a59      	ldr	r2, [pc, #356]	; (80065ac <HAL_RCC_OscConfig+0x4ac>)
 8006446:	f023 0301 	bic.w	r3, r3, #1
 800644a:	6713      	str	r3, [r2, #112]	; 0x70
 800644c:	4b57      	ldr	r3, [pc, #348]	; (80065ac <HAL_RCC_OscConfig+0x4ac>)
 800644e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006450:	4a56      	ldr	r2, [pc, #344]	; (80065ac <HAL_RCC_OscConfig+0x4ac>)
 8006452:	f023 0304 	bic.w	r3, r3, #4
 8006456:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d015      	beq.n	800648c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006460:	f7fc fd20 	bl	8002ea4 <HAL_GetTick>
 8006464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006466:	e00a      	b.n	800647e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006468:	f7fc fd1c 	bl	8002ea4 <HAL_GetTick>
 800646c:	4602      	mov	r2, r0
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	f241 3288 	movw	r2, #5000	; 0x1388
 8006476:	4293      	cmp	r3, r2
 8006478:	d901      	bls.n	800647e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e0d7      	b.n	800662e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800647e:	4b4b      	ldr	r3, [pc, #300]	; (80065ac <HAL_RCC_OscConfig+0x4ac>)
 8006480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006482:	f003 0302 	and.w	r3, r3, #2
 8006486:	2b00      	cmp	r3, #0
 8006488:	d0ee      	beq.n	8006468 <HAL_RCC_OscConfig+0x368>
 800648a:	e014      	b.n	80064b6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800648c:	f7fc fd0a 	bl	8002ea4 <HAL_GetTick>
 8006490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006492:	e00a      	b.n	80064aa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006494:	f7fc fd06 	bl	8002ea4 <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	f241 3288 	movw	r2, #5000	; 0x1388
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d901      	bls.n	80064aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e0c1      	b.n	800662e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064aa:	4b40      	ldr	r3, [pc, #256]	; (80065ac <HAL_RCC_OscConfig+0x4ac>)
 80064ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1ee      	bne.n	8006494 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064b6:	7dfb      	ldrb	r3, [r7, #23]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d105      	bne.n	80064c8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064bc:	4b3b      	ldr	r3, [pc, #236]	; (80065ac <HAL_RCC_OscConfig+0x4ac>)
 80064be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c0:	4a3a      	ldr	r2, [pc, #232]	; (80065ac <HAL_RCC_OscConfig+0x4ac>)
 80064c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 80ad 	beq.w	800662c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80064d2:	4b36      	ldr	r3, [pc, #216]	; (80065ac <HAL_RCC_OscConfig+0x4ac>)
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f003 030c 	and.w	r3, r3, #12
 80064da:	2b08      	cmp	r3, #8
 80064dc:	d060      	beq.n	80065a0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d145      	bne.n	8006572 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064e6:	4b33      	ldr	r3, [pc, #204]	; (80065b4 <HAL_RCC_OscConfig+0x4b4>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ec:	f7fc fcda 	bl	8002ea4 <HAL_GetTick>
 80064f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064f2:	e008      	b.n	8006506 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064f4:	f7fc fcd6 	bl	8002ea4 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d901      	bls.n	8006506 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e093      	b.n	800662e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006506:	4b29      	ldr	r3, [pc, #164]	; (80065ac <HAL_RCC_OscConfig+0x4ac>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1f0      	bne.n	80064f4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	69da      	ldr	r2, [r3, #28]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	431a      	orrs	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006520:	019b      	lsls	r3, r3, #6
 8006522:	431a      	orrs	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006528:	085b      	lsrs	r3, r3, #1
 800652a:	3b01      	subs	r3, #1
 800652c:	041b      	lsls	r3, r3, #16
 800652e:	431a      	orrs	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006534:	061b      	lsls	r3, r3, #24
 8006536:	431a      	orrs	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653c:	071b      	lsls	r3, r3, #28
 800653e:	491b      	ldr	r1, [pc, #108]	; (80065ac <HAL_RCC_OscConfig+0x4ac>)
 8006540:	4313      	orrs	r3, r2
 8006542:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006544:	4b1b      	ldr	r3, [pc, #108]	; (80065b4 <HAL_RCC_OscConfig+0x4b4>)
 8006546:	2201      	movs	r2, #1
 8006548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800654a:	f7fc fcab 	bl	8002ea4 <HAL_GetTick>
 800654e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006550:	e008      	b.n	8006564 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006552:	f7fc fca7 	bl	8002ea4 <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	2b02      	cmp	r3, #2
 800655e:	d901      	bls.n	8006564 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e064      	b.n	800662e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006564:	4b11      	ldr	r3, [pc, #68]	; (80065ac <HAL_RCC_OscConfig+0x4ac>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d0f0      	beq.n	8006552 <HAL_RCC_OscConfig+0x452>
 8006570:	e05c      	b.n	800662c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006572:	4b10      	ldr	r3, [pc, #64]	; (80065b4 <HAL_RCC_OscConfig+0x4b4>)
 8006574:	2200      	movs	r2, #0
 8006576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006578:	f7fc fc94 	bl	8002ea4 <HAL_GetTick>
 800657c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800657e:	e008      	b.n	8006592 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006580:	f7fc fc90 	bl	8002ea4 <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	2b02      	cmp	r3, #2
 800658c:	d901      	bls.n	8006592 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e04d      	b.n	800662e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006592:	4b06      	ldr	r3, [pc, #24]	; (80065ac <HAL_RCC_OscConfig+0x4ac>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1f0      	bne.n	8006580 <HAL_RCC_OscConfig+0x480>
 800659e:	e045      	b.n	800662c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d107      	bne.n	80065b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e040      	b.n	800662e <HAL_RCC_OscConfig+0x52e>
 80065ac:	40023800 	.word	0x40023800
 80065b0:	40007000 	.word	0x40007000
 80065b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80065b8:	4b1f      	ldr	r3, [pc, #124]	; (8006638 <HAL_RCC_OscConfig+0x538>)
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d030      	beq.n	8006628 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d129      	bne.n	8006628 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065de:	429a      	cmp	r2, r3
 80065e0:	d122      	bne.n	8006628 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80065e8:	4013      	ands	r3, r2
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80065ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d119      	bne.n	8006628 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fe:	085b      	lsrs	r3, r3, #1
 8006600:	3b01      	subs	r3, #1
 8006602:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006604:	429a      	cmp	r2, r3
 8006606:	d10f      	bne.n	8006628 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006612:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006614:	429a      	cmp	r2, r3
 8006616:	d107      	bne.n	8006628 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006622:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006624:	429a      	cmp	r2, r3
 8006626:	d001      	beq.n	800662c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e000      	b.n	800662e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3718      	adds	r7, #24
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	40023800 	.word	0x40023800

0800663c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d101      	bne.n	800664e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e03f      	b.n	80066ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d106      	bne.n	8006668 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f7fc f99e 	bl	80029a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2224      	movs	r2, #36	; 0x24
 800666c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68da      	ldr	r2, [r3, #12]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800667e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 ffcb 	bl	800761c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	691a      	ldr	r2, [r3, #16]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006694:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	695a      	ldr	r2, [r3, #20]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68da      	ldr	r2, [r3, #12]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2220      	movs	r2, #32
 80066c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2220      	movs	r2, #32
 80066c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b08a      	sub	sp, #40	; 0x28
 80066da:	af02      	add	r7, sp, #8
 80066dc:	60f8      	str	r0, [r7, #12]
 80066de:	60b9      	str	r1, [r7, #8]
 80066e0:	603b      	str	r3, [r7, #0]
 80066e2:	4613      	mov	r3, r2
 80066e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80066e6:	2300      	movs	r3, #0
 80066e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b20      	cmp	r3, #32
 80066f4:	d17c      	bne.n	80067f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d002      	beq.n	8006702 <HAL_UART_Transmit+0x2c>
 80066fc:	88fb      	ldrh	r3, [r7, #6]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d101      	bne.n	8006706 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e075      	b.n	80067f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800670c:	2b01      	cmp	r3, #1
 800670e:	d101      	bne.n	8006714 <HAL_UART_Transmit+0x3e>
 8006710:	2302      	movs	r3, #2
 8006712:	e06e      	b.n	80067f2 <HAL_UART_Transmit+0x11c>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2221      	movs	r2, #33	; 0x21
 8006726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800672a:	f7fc fbbb 	bl	8002ea4 <HAL_GetTick>
 800672e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	88fa      	ldrh	r2, [r7, #6]
 8006734:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	88fa      	ldrh	r2, [r7, #6]
 800673a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006744:	d108      	bne.n	8006758 <HAL_UART_Transmit+0x82>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d104      	bne.n	8006758 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800674e:	2300      	movs	r3, #0
 8006750:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	61bb      	str	r3, [r7, #24]
 8006756:	e003      	b.n	8006760 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800675c:	2300      	movs	r3, #0
 800675e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006768:	e02a      	b.n	80067c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	2200      	movs	r2, #0
 8006772:	2180      	movs	r1, #128	; 0x80
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f000 fc83 	bl	8007080 <UART_WaitOnFlagUntilTimeout>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d001      	beq.n	8006784 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e036      	b.n	80067f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10b      	bne.n	80067a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	461a      	mov	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006798:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	3302      	adds	r3, #2
 800679e:	61bb      	str	r3, [r7, #24]
 80067a0:	e007      	b.n	80067b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	781a      	ldrb	r2, [r3, #0]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	3301      	adds	r3, #1
 80067b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	3b01      	subs	r3, #1
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1cf      	bne.n	800676a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	9300      	str	r3, [sp, #0]
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	2200      	movs	r2, #0
 80067d2:	2140      	movs	r1, #64	; 0x40
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f000 fc53 	bl	8007080 <UART_WaitOnFlagUntilTimeout>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d001      	beq.n	80067e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e006      	b.n	80067f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2220      	movs	r2, #32
 80067e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80067ec:	2300      	movs	r3, #0
 80067ee:	e000      	b.n	80067f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80067f0:	2302      	movs	r3, #2
  }
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3720      	adds	r7, #32
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b084      	sub	sp, #16
 80067fe:	af00      	add	r7, sp, #0
 8006800:	60f8      	str	r0, [r7, #12]
 8006802:	60b9      	str	r1, [r7, #8]
 8006804:	4613      	mov	r3, r2
 8006806:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b20      	cmp	r3, #32
 8006812:	d11d      	bne.n	8006850 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d002      	beq.n	8006820 <HAL_UART_Receive_DMA+0x26>
 800681a:	88fb      	ldrh	r3, [r7, #6]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e016      	b.n	8006852 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800682a:	2b01      	cmp	r3, #1
 800682c:	d101      	bne.n	8006832 <HAL_UART_Receive_DMA+0x38>
 800682e:	2302      	movs	r3, #2
 8006830:	e00f      	b.n	8006852 <HAL_UART_Receive_DMA+0x58>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006840:	88fb      	ldrh	r3, [r7, #6]
 8006842:	461a      	mov	r2, r3
 8006844:	68b9      	ldr	r1, [r7, #8]
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f000 fc88 	bl	800715c <UART_Start_Receive_DMA>
 800684c:	4603      	mov	r3, r0
 800684e:	e000      	b.n	8006852 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006850:	2302      	movs	r3, #2
  }
}
 8006852:	4618      	mov	r0, r3
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b08c      	sub	sp, #48	; 0x30
 800685e:	af00      	add	r7, sp, #0
 8006860:	60f8      	str	r0, [r7, #12]
 8006862:	60b9      	str	r1, [r7, #8]
 8006864:	4613      	mov	r3, r2
 8006866:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800686e:	b2db      	uxtb	r3, r3
 8006870:	2b20      	cmp	r3, #32
 8006872:	d152      	bne.n	800691a <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d002      	beq.n	8006880 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800687a:	88fb      	ldrh	r3, [r7, #6]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e04b      	b.n	800691c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800688a:	2b01      	cmp	r3, #1
 800688c:	d101      	bne.n	8006892 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800688e:	2302      	movs	r3, #2
 8006890:	e044      	b.n	800691c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2201      	movs	r2, #1
 800689e:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80068a0:	88fb      	ldrh	r3, [r7, #6]
 80068a2:	461a      	mov	r2, r3
 80068a4:	68b9      	ldr	r1, [r7, #8]
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	f000 fc58 	bl	800715c <UART_Start_Receive_DMA>
 80068ac:	4603      	mov	r3, r0
 80068ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80068b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d12c      	bne.n	8006914 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d125      	bne.n	800690e <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068c2:	2300      	movs	r3, #0
 80068c4:	613b      	str	r3, [r7, #16]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	613b      	str	r3, [r7, #16]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	613b      	str	r3, [r7, #16]
 80068d6:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	330c      	adds	r3, #12
 80068de:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	e853 3f00 	ldrex	r3, [r3]
 80068e6:	617b      	str	r3, [r7, #20]
   return(result);
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	f043 0310 	orr.w	r3, r3, #16
 80068ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	330c      	adds	r3, #12
 80068f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068f8:	627a      	str	r2, [r7, #36]	; 0x24
 80068fa:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fc:	6a39      	ldr	r1, [r7, #32]
 80068fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006900:	e841 2300 	strex	r3, r2, [r1]
 8006904:	61fb      	str	r3, [r7, #28]
   return(result);
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1e5      	bne.n	80068d8 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800690c:	e002      	b.n	8006914 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006914:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006918:	e000      	b.n	800691c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800691a:	2302      	movs	r3, #2
  }
}
 800691c:	4618      	mov	r0, r3
 800691e:	3730      	adds	r7, #48	; 0x30
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b0ba      	sub	sp, #232	; 0xe8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800694a:	2300      	movs	r3, #0
 800694c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006950:	2300      	movs	r3, #0
 8006952:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800695a:	f003 030f 	and.w	r3, r3, #15
 800695e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006962:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10f      	bne.n	800698a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800696a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800696e:	f003 0320 	and.w	r3, r3, #32
 8006972:	2b00      	cmp	r3, #0
 8006974:	d009      	beq.n	800698a <HAL_UART_IRQHandler+0x66>
 8006976:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800697a:	f003 0320 	and.w	r3, r3, #32
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fd8f 	bl	80074a6 <UART_Receive_IT>
      return;
 8006988:	e256      	b.n	8006e38 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800698a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800698e:	2b00      	cmp	r3, #0
 8006990:	f000 80de 	beq.w	8006b50 <HAL_UART_IRQHandler+0x22c>
 8006994:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	2b00      	cmp	r3, #0
 800699e:	d106      	bne.n	80069ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80069a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f000 80d1 	beq.w	8006b50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80069ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00b      	beq.n	80069d2 <HAL_UART_IRQHandler+0xae>
 80069ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d005      	beq.n	80069d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ca:	f043 0201 	orr.w	r2, r3, #1
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069d6:	f003 0304 	and.w	r3, r3, #4
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00b      	beq.n	80069f6 <HAL_UART_IRQHandler+0xd2>
 80069de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d005      	beq.n	80069f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ee:	f043 0202 	orr.w	r2, r3, #2
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069fa:	f003 0302 	and.w	r3, r3, #2
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00b      	beq.n	8006a1a <HAL_UART_IRQHandler+0xf6>
 8006a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a06:	f003 0301 	and.w	r3, r3, #1
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d005      	beq.n	8006a1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a12:	f043 0204 	orr.w	r2, r3, #4
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a1e:	f003 0308 	and.w	r3, r3, #8
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d011      	beq.n	8006a4a <HAL_UART_IRQHandler+0x126>
 8006a26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a2a:	f003 0320 	and.w	r3, r3, #32
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d105      	bne.n	8006a3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006a32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d005      	beq.n	8006a4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a42:	f043 0208 	orr.w	r2, r3, #8
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	f000 81ed 	beq.w	8006e2e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a58:	f003 0320 	and.w	r3, r3, #32
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d008      	beq.n	8006a72 <HAL_UART_IRQHandler+0x14e>
 8006a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a64:	f003 0320 	and.w	r3, r3, #32
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d002      	beq.n	8006a72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fd1a 	bl	80074a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a7c:	2b40      	cmp	r3, #64	; 0x40
 8006a7e:	bf0c      	ite	eq
 8006a80:	2301      	moveq	r3, #1
 8006a82:	2300      	movne	r3, #0
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8e:	f003 0308 	and.w	r3, r3, #8
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d103      	bne.n	8006a9e <HAL_UART_IRQHandler+0x17a>
 8006a96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d04f      	beq.n	8006b3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fc22 	bl	80072e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aae:	2b40      	cmp	r3, #64	; 0x40
 8006ab0:	d141      	bne.n	8006b36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	3314      	adds	r3, #20
 8006ab8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ac0:	e853 3f00 	ldrex	r3, [r3]
 8006ac4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006ac8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006acc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ad0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	3314      	adds	r3, #20
 8006ada:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006ade:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006ae2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006aea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006aee:	e841 2300 	strex	r3, r2, [r1]
 8006af2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006af6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1d9      	bne.n	8006ab2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d013      	beq.n	8006b2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0a:	4a7d      	ldr	r2, [pc, #500]	; (8006d00 <HAL_UART_IRQHandler+0x3dc>)
 8006b0c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7fc fc7e 	bl	8003414 <HAL_DMA_Abort_IT>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d016      	beq.n	8006b4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b28:	4610      	mov	r0, r2
 8006b2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b2c:	e00e      	b.n	8006b4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f9a4 	bl	8006e7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b34:	e00a      	b.n	8006b4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 f9a0 	bl	8006e7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b3c:	e006      	b.n	8006b4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f99c 	bl	8006e7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006b4a:	e170      	b.n	8006e2e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b4c:	bf00      	nop
    return;
 8006b4e:	e16e      	b.n	8006e2e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	f040 814a 	bne.w	8006dee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b5e:	f003 0310 	and.w	r3, r3, #16
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f000 8143 	beq.w	8006dee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b6c:	f003 0310 	and.w	r3, r3, #16
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f000 813c 	beq.w	8006dee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b76:	2300      	movs	r3, #0
 8006b78:	60bb      	str	r3, [r7, #8]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	60bb      	str	r3, [r7, #8]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	60bb      	str	r3, [r7, #8]
 8006b8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b96:	2b40      	cmp	r3, #64	; 0x40
 8006b98:	f040 80b4 	bne.w	8006d04 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ba8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f000 8140 	beq.w	8006e32 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006bb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	f080 8139 	bcs.w	8006e32 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006bc6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bd2:	f000 8088 	beq.w	8006ce6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	330c      	adds	r3, #12
 8006bdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006be4:	e853 3f00 	ldrex	r3, [r3]
 8006be8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006bec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006bf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bf4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	330c      	adds	r3, #12
 8006bfe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006c02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006c0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c12:	e841 2300 	strex	r3, r2, [r1]
 8006c16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1d9      	bne.n	8006bd6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3314      	adds	r3, #20
 8006c28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c2c:	e853 3f00 	ldrex	r3, [r3]
 8006c30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006c32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c34:	f023 0301 	bic.w	r3, r3, #1
 8006c38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	3314      	adds	r3, #20
 8006c42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006c46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006c4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006c4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c52:	e841 2300 	strex	r3, r2, [r1]
 8006c56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006c58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1e1      	bne.n	8006c22 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	3314      	adds	r3, #20
 8006c64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c68:	e853 3f00 	ldrex	r3, [r3]
 8006c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	3314      	adds	r3, #20
 8006c7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006c82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006c84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006c88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c8a:	e841 2300 	strex	r3, r2, [r1]
 8006c8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006c90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1e3      	bne.n	8006c5e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2220      	movs	r2, #32
 8006c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	330c      	adds	r3, #12
 8006caa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cae:	e853 3f00 	ldrex	r3, [r3]
 8006cb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cb6:	f023 0310 	bic.w	r3, r3, #16
 8006cba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	330c      	adds	r3, #12
 8006cc4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006cc8:	65ba      	str	r2, [r7, #88]	; 0x58
 8006cca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ccc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006cce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006cd0:	e841 2300 	strex	r3, r2, [r1]
 8006cd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1e3      	bne.n	8006ca4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f7fc fb27 	bl	8003334 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7fa f962 	bl	8000fc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006cfc:	e099      	b.n	8006e32 <HAL_UART_IRQHandler+0x50e>
 8006cfe:	bf00      	nop
 8006d00:	080073af 	.word	0x080073af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f000 808b 	beq.w	8006e36 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006d20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 8086 	beq.w	8006e36 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	330c      	adds	r3, #12
 8006d30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d34:	e853 3f00 	ldrex	r3, [r3]
 8006d38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	330c      	adds	r3, #12
 8006d4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006d4e:	647a      	str	r2, [r7, #68]	; 0x44
 8006d50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d56:	e841 2300 	strex	r3, r2, [r1]
 8006d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1e3      	bne.n	8006d2a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	3314      	adds	r3, #20
 8006d68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6c:	e853 3f00 	ldrex	r3, [r3]
 8006d70:	623b      	str	r3, [r7, #32]
   return(result);
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	f023 0301 	bic.w	r3, r3, #1
 8006d78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	3314      	adds	r3, #20
 8006d82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006d86:	633a      	str	r2, [r7, #48]	; 0x30
 8006d88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d8e:	e841 2300 	strex	r3, r2, [r1]
 8006d92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1e3      	bne.n	8006d62 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2220      	movs	r2, #32
 8006d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	330c      	adds	r3, #12
 8006dae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	e853 3f00 	ldrex	r3, [r3]
 8006db6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f023 0310 	bic.w	r3, r3, #16
 8006dbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	330c      	adds	r3, #12
 8006dc8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006dcc:	61fa      	str	r2, [r7, #28]
 8006dce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd0:	69b9      	ldr	r1, [r7, #24]
 8006dd2:	69fa      	ldr	r2, [r7, #28]
 8006dd4:	e841 2300 	strex	r3, r2, [r1]
 8006dd8:	617b      	str	r3, [r7, #20]
   return(result);
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1e3      	bne.n	8006da8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006de0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006de4:	4619      	mov	r1, r3
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f7fa f8ea 	bl	8000fc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006dec:	e023      	b.n	8006e36 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d009      	beq.n	8006e0e <HAL_UART_IRQHandler+0x4ea>
 8006dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d003      	beq.n	8006e0e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 fae5 	bl	80073d6 <UART_Transmit_IT>
    return;
 8006e0c:	e014      	b.n	8006e38 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00e      	beq.n	8006e38 <HAL_UART_IRQHandler+0x514>
 8006e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d008      	beq.n	8006e38 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 fb25 	bl	8007476 <UART_EndTransmit_IT>
    return;
 8006e2c:	e004      	b.n	8006e38 <HAL_UART_IRQHandler+0x514>
    return;
 8006e2e:	bf00      	nop
 8006e30:	e002      	b.n	8006e38 <HAL_UART_IRQHandler+0x514>
      return;
 8006e32:	bf00      	nop
 8006e34:	e000      	b.n	8006e38 <HAL_UART_IRQHandler+0x514>
      return;
 8006e36:	bf00      	nop
  }
}
 8006e38:	37e8      	adds	r7, #232	; 0xe8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop

08006e40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b09c      	sub	sp, #112	; 0x70
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d172      	bne.n	8006f92 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eae:	2200      	movs	r2, #0
 8006eb0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	330c      	adds	r3, #12
 8006eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ebc:	e853 3f00 	ldrex	r3, [r3]
 8006ec0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ec8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	330c      	adds	r3, #12
 8006ed0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ed2:	65ba      	str	r2, [r7, #88]	; 0x58
 8006ed4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ed8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006eda:	e841 2300 	strex	r3, r2, [r1]
 8006ede:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1e5      	bne.n	8006eb2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	3314      	adds	r3, #20
 8006eec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef0:	e853 3f00 	ldrex	r3, [r3]
 8006ef4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef8:	f023 0301 	bic.w	r3, r3, #1
 8006efc:	667b      	str	r3, [r7, #100]	; 0x64
 8006efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	3314      	adds	r3, #20
 8006f04:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006f06:	647a      	str	r2, [r7, #68]	; 0x44
 8006f08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f0e:	e841 2300 	strex	r3, r2, [r1]
 8006f12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1e5      	bne.n	8006ee6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	3314      	adds	r3, #20
 8006f20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f24:	e853 3f00 	ldrex	r3, [r3]
 8006f28:	623b      	str	r3, [r7, #32]
   return(result);
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f30:	663b      	str	r3, [r7, #96]	; 0x60
 8006f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	3314      	adds	r3, #20
 8006f38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f3a:	633a      	str	r2, [r7, #48]	; 0x30
 8006f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f42:	e841 2300 	strex	r3, r2, [r1]
 8006f46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1e5      	bne.n	8006f1a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f50:	2220      	movs	r2, #32
 8006f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d119      	bne.n	8006f92 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	330c      	adds	r3, #12
 8006f64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	e853 3f00 	ldrex	r3, [r3]
 8006f6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f023 0310 	bic.w	r3, r3, #16
 8006f74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	330c      	adds	r3, #12
 8006f7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f7e:	61fa      	str	r2, [r7, #28]
 8006f80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f82:	69b9      	ldr	r1, [r7, #24]
 8006f84:	69fa      	ldr	r2, [r7, #28]
 8006f86:	e841 2300 	strex	r3, r2, [r1]
 8006f8a:	617b      	str	r3, [r7, #20]
   return(result);
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1e5      	bne.n	8006f5e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d106      	bne.n	8006fa8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006fa2:	f7fa f80d 	bl	8000fc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006fa6:	e002      	b.n	8006fae <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006fa8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006faa:	f7ff ff53 	bl	8006e54 <HAL_UART_RxCpltCallback>
}
 8006fae:	bf00      	nop
 8006fb0:	3770      	adds	r7, #112	; 0x70
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b084      	sub	sp, #16
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d108      	bne.n	8006fde <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006fd0:	085b      	lsrs	r3, r3, #1
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f7f9 fff2 	bl	8000fc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006fdc:	e002      	b.n	8006fe4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f7ff ff42 	bl	8006e68 <HAL_UART_RxHalfCpltCallback>
}
 8006fe4:	bf00      	nop
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	695b      	ldr	r3, [r3, #20]
 8007004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007008:	2b80      	cmp	r3, #128	; 0x80
 800700a:	bf0c      	ite	eq
 800700c:	2301      	moveq	r3, #1
 800700e:	2300      	movne	r3, #0
 8007010:	b2db      	uxtb	r3, r3
 8007012:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b21      	cmp	r3, #33	; 0x21
 800701e:	d108      	bne.n	8007032 <UART_DMAError+0x46>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d005      	beq.n	8007032 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	2200      	movs	r2, #0
 800702a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800702c:	68b8      	ldr	r0, [r7, #8]
 800702e:	f000 f933 	bl	8007298 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800703c:	2b40      	cmp	r3, #64	; 0x40
 800703e:	bf0c      	ite	eq
 8007040:	2301      	moveq	r3, #1
 8007042:	2300      	movne	r3, #0
 8007044:	b2db      	uxtb	r3, r3
 8007046:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800704e:	b2db      	uxtb	r3, r3
 8007050:	2b22      	cmp	r3, #34	; 0x22
 8007052:	d108      	bne.n	8007066 <UART_DMAError+0x7a>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d005      	beq.n	8007066 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	2200      	movs	r2, #0
 800705e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007060:	68b8      	ldr	r0, [r7, #8]
 8007062:	f000 f941 	bl	80072e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706a:	f043 0210 	orr.w	r2, r3, #16
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007072:	68b8      	ldr	r0, [r7, #8]
 8007074:	f7ff ff02 	bl	8006e7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007078:	bf00      	nop
 800707a:	3710      	adds	r7, #16
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b090      	sub	sp, #64	; 0x40
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	603b      	str	r3, [r7, #0]
 800708c:	4613      	mov	r3, r2
 800708e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007090:	e050      	b.n	8007134 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007098:	d04c      	beq.n	8007134 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800709a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800709c:	2b00      	cmp	r3, #0
 800709e:	d007      	beq.n	80070b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80070a0:	f7fb ff00 	bl	8002ea4 <HAL_GetTick>
 80070a4:	4602      	mov	r2, r0
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d241      	bcs.n	8007134 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	330c      	adds	r3, #12
 80070b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ba:	e853 3f00 	ldrex	r3, [r3]
 80070be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	330c      	adds	r3, #12
 80070ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80070d0:	637a      	str	r2, [r7, #52]	; 0x34
 80070d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070d8:	e841 2300 	strex	r3, r2, [r1]
 80070dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1e5      	bne.n	80070b0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3314      	adds	r3, #20
 80070ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	e853 3f00 	ldrex	r3, [r3]
 80070f2:	613b      	str	r3, [r7, #16]
   return(result);
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	f023 0301 	bic.w	r3, r3, #1
 80070fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	3314      	adds	r3, #20
 8007102:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007104:	623a      	str	r2, [r7, #32]
 8007106:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007108:	69f9      	ldr	r1, [r7, #28]
 800710a:	6a3a      	ldr	r2, [r7, #32]
 800710c:	e841 2300 	strex	r3, r2, [r1]
 8007110:	61bb      	str	r3, [r7, #24]
   return(result);
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1e5      	bne.n	80070e4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2220      	movs	r2, #32
 800711c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2220      	movs	r2, #32
 8007124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e00f      	b.n	8007154 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	4013      	ands	r3, r2
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	429a      	cmp	r2, r3
 8007142:	bf0c      	ite	eq
 8007144:	2301      	moveq	r3, #1
 8007146:	2300      	movne	r3, #0
 8007148:	b2db      	uxtb	r3, r3
 800714a:	461a      	mov	r2, r3
 800714c:	79fb      	ldrb	r3, [r7, #7]
 800714e:	429a      	cmp	r2, r3
 8007150:	d09f      	beq.n	8007092 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3740      	adds	r7, #64	; 0x40
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b098      	sub	sp, #96	; 0x60
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	4613      	mov	r3, r2
 8007168:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	88fa      	ldrh	r2, [r7, #6]
 8007174:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2222      	movs	r2, #34	; 0x22
 8007180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007188:	4a40      	ldr	r2, [pc, #256]	; (800728c <UART_Start_Receive_DMA+0x130>)
 800718a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007190:	4a3f      	ldr	r2, [pc, #252]	; (8007290 <UART_Start_Receive_DMA+0x134>)
 8007192:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007198:	4a3e      	ldr	r2, [pc, #248]	; (8007294 <UART_Start_Receive_DMA+0x138>)
 800719a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a0:	2200      	movs	r2, #0
 80071a2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80071a4:	f107 0308 	add.w	r3, r7, #8
 80071a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	3304      	adds	r3, #4
 80071b4:	4619      	mov	r1, r3
 80071b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	88fb      	ldrh	r3, [r7, #6]
 80071bc:	f7fc f862 	bl	8003284 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80071c0:	2300      	movs	r3, #0
 80071c2:	613b      	str	r3, [r7, #16]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	613b      	str	r3, [r7, #16]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	613b      	str	r3, [r7, #16]
 80071d4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d019      	beq.n	800721a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	330c      	adds	r3, #12
 80071ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071f0:	e853 3f00 	ldrex	r3, [r3]
 80071f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	330c      	adds	r3, #12
 8007204:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007206:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007208:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800720c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800720e:	e841 2300 	strex	r3, r2, [r1]
 8007212:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1e5      	bne.n	80071e6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	3314      	adds	r3, #20
 8007220:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007224:	e853 3f00 	ldrex	r3, [r3]
 8007228:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800722a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722c:	f043 0301 	orr.w	r3, r3, #1
 8007230:	657b      	str	r3, [r7, #84]	; 0x54
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	3314      	adds	r3, #20
 8007238:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800723a:	63ba      	str	r2, [r7, #56]	; 0x38
 800723c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007240:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007242:	e841 2300 	strex	r3, r2, [r1]
 8007246:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1e5      	bne.n	800721a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	3314      	adds	r3, #20
 8007254:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	e853 3f00 	ldrex	r3, [r3]
 800725c:	617b      	str	r3, [r7, #20]
   return(result);
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007264:	653b      	str	r3, [r7, #80]	; 0x50
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	3314      	adds	r3, #20
 800726c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800726e:	627a      	str	r2, [r7, #36]	; 0x24
 8007270:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007272:	6a39      	ldr	r1, [r7, #32]
 8007274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007276:	e841 2300 	strex	r3, r2, [r1]
 800727a:	61fb      	str	r3, [r7, #28]
   return(result);
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1e5      	bne.n	800724e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3760      	adds	r7, #96	; 0x60
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	08006e91 	.word	0x08006e91
 8007290:	08006fb7 	.word	0x08006fb7
 8007294:	08006fed 	.word	0x08006fed

08007298 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007298:	b480      	push	{r7}
 800729a:	b089      	sub	sp, #36	; 0x24
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	330c      	adds	r3, #12
 80072a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	e853 3f00 	ldrex	r3, [r3]
 80072ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80072b6:	61fb      	str	r3, [r7, #28]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	330c      	adds	r3, #12
 80072be:	69fa      	ldr	r2, [r7, #28]
 80072c0:	61ba      	str	r2, [r7, #24]
 80072c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c4:	6979      	ldr	r1, [r7, #20]
 80072c6:	69ba      	ldr	r2, [r7, #24]
 80072c8:	e841 2300 	strex	r3, r2, [r1]
 80072cc:	613b      	str	r3, [r7, #16]
   return(result);
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d1e5      	bne.n	80072a0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2220      	movs	r2, #32
 80072d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80072dc:	bf00      	nop
 80072de:	3724      	adds	r7, #36	; 0x24
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b095      	sub	sp, #84	; 0x54
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	330c      	adds	r3, #12
 80072f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072fa:	e853 3f00 	ldrex	r3, [r3]
 80072fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007302:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007306:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	330c      	adds	r3, #12
 800730e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007310:	643a      	str	r2, [r7, #64]	; 0x40
 8007312:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007314:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007316:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007318:	e841 2300 	strex	r3, r2, [r1]
 800731c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800731e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1e5      	bne.n	80072f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	3314      	adds	r3, #20
 800732a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732c:	6a3b      	ldr	r3, [r7, #32]
 800732e:	e853 3f00 	ldrex	r3, [r3]
 8007332:	61fb      	str	r3, [r7, #28]
   return(result);
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	f023 0301 	bic.w	r3, r3, #1
 800733a:	64bb      	str	r3, [r7, #72]	; 0x48
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	3314      	adds	r3, #20
 8007342:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007344:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007346:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007348:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800734a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800734c:	e841 2300 	strex	r3, r2, [r1]
 8007350:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1e5      	bne.n	8007324 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800735c:	2b01      	cmp	r3, #1
 800735e:	d119      	bne.n	8007394 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	330c      	adds	r3, #12
 8007366:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	e853 3f00 	ldrex	r3, [r3]
 800736e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	f023 0310 	bic.w	r3, r3, #16
 8007376:	647b      	str	r3, [r7, #68]	; 0x44
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	330c      	adds	r3, #12
 800737e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007380:	61ba      	str	r2, [r7, #24]
 8007382:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007384:	6979      	ldr	r1, [r7, #20]
 8007386:	69ba      	ldr	r2, [r7, #24]
 8007388:	e841 2300 	strex	r3, r2, [r1]
 800738c:	613b      	str	r3, [r7, #16]
   return(result);
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1e5      	bne.n	8007360 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2220      	movs	r2, #32
 8007398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80073a2:	bf00      	nop
 80073a4:	3754      	adds	r7, #84	; 0x54
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr

080073ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b084      	sub	sp, #16
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2200      	movs	r2, #0
 80073c0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f7ff fd57 	bl	8006e7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073ce:	bf00      	nop
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80073d6:	b480      	push	{r7}
 80073d8:	b085      	sub	sp, #20
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	2b21      	cmp	r3, #33	; 0x21
 80073e8:	d13e      	bne.n	8007468 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073f2:	d114      	bne.n	800741e <UART_Transmit_IT+0x48>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d110      	bne.n	800741e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a1b      	ldr	r3, [r3, #32]
 8007400:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	881b      	ldrh	r3, [r3, #0]
 8007406:	461a      	mov	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007410:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a1b      	ldr	r3, [r3, #32]
 8007416:	1c9a      	adds	r2, r3, #2
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	621a      	str	r2, [r3, #32]
 800741c:	e008      	b.n	8007430 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a1b      	ldr	r3, [r3, #32]
 8007422:	1c59      	adds	r1, r3, #1
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	6211      	str	r1, [r2, #32]
 8007428:	781a      	ldrb	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007434:	b29b      	uxth	r3, r3
 8007436:	3b01      	subs	r3, #1
 8007438:	b29b      	uxth	r3, r3
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	4619      	mov	r1, r3
 800743e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007440:	2b00      	cmp	r3, #0
 8007442:	d10f      	bne.n	8007464 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68da      	ldr	r2, [r3, #12]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007452:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68da      	ldr	r2, [r3, #12]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007462:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007464:	2300      	movs	r3, #0
 8007466:	e000      	b.n	800746a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007468:	2302      	movs	r3, #2
  }
}
 800746a:	4618      	mov	r0, r3
 800746c:	3714      	adds	r7, #20
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b082      	sub	sp, #8
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68da      	ldr	r2, [r3, #12]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800748c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2220      	movs	r2, #32
 8007492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f7ff fcd2 	bl	8006e40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b08c      	sub	sp, #48	; 0x30
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b22      	cmp	r3, #34	; 0x22
 80074b8:	f040 80ab 	bne.w	8007612 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074c4:	d117      	bne.n	80074f6 <UART_Receive_IT+0x50>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d113      	bne.n	80074f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80074ce:	2300      	movs	r3, #0
 80074d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	b29b      	uxth	r3, r3
 80074e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ee:	1c9a      	adds	r2, r3, #2
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	629a      	str	r2, [r3, #40]	; 0x28
 80074f4:	e026      	b.n	8007544 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80074fc:	2300      	movs	r3, #0
 80074fe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007508:	d007      	beq.n	800751a <UART_Receive_IT+0x74>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10a      	bne.n	8007528 <UART_Receive_IT+0x82>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d106      	bne.n	8007528 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	b2da      	uxtb	r2, r3
 8007522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007524:	701a      	strb	r2, [r3, #0]
 8007526:	e008      	b.n	800753a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	b2db      	uxtb	r3, r3
 8007530:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007534:	b2da      	uxtb	r2, r3
 8007536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007538:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753e:	1c5a      	adds	r2, r3, #1
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007548:	b29b      	uxth	r3, r3
 800754a:	3b01      	subs	r3, #1
 800754c:	b29b      	uxth	r3, r3
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	4619      	mov	r1, r3
 8007552:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007554:	2b00      	cmp	r3, #0
 8007556:	d15a      	bne.n	800760e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68da      	ldr	r2, [r3, #12]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f022 0220 	bic.w	r2, r2, #32
 8007566:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68da      	ldr	r2, [r3, #12]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007576:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	695a      	ldr	r2, [r3, #20]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f022 0201 	bic.w	r2, r2, #1
 8007586:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2220      	movs	r2, #32
 800758c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007594:	2b01      	cmp	r3, #1
 8007596:	d135      	bne.n	8007604 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	330c      	adds	r3, #12
 80075a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	e853 3f00 	ldrex	r3, [r3]
 80075ac:	613b      	str	r3, [r7, #16]
   return(result);
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	f023 0310 	bic.w	r3, r3, #16
 80075b4:	627b      	str	r3, [r7, #36]	; 0x24
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	330c      	adds	r3, #12
 80075bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075be:	623a      	str	r2, [r7, #32]
 80075c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c2:	69f9      	ldr	r1, [r7, #28]
 80075c4:	6a3a      	ldr	r2, [r7, #32]
 80075c6:	e841 2300 	strex	r3, r2, [r1]
 80075ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1e5      	bne.n	800759e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 0310 	and.w	r3, r3, #16
 80075dc:	2b10      	cmp	r3, #16
 80075de:	d10a      	bne.n	80075f6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075e0:	2300      	movs	r3, #0
 80075e2:	60fb      	str	r3, [r7, #12]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	60fb      	str	r3, [r7, #12]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	60fb      	str	r3, [r7, #12]
 80075f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80075fa:	4619      	mov	r1, r3
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f7f9 fcdf 	bl	8000fc0 <HAL_UARTEx_RxEventCallback>
 8007602:	e002      	b.n	800760a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7ff fc25 	bl	8006e54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800760a:	2300      	movs	r3, #0
 800760c:	e002      	b.n	8007614 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800760e:	2300      	movs	r3, #0
 8007610:	e000      	b.n	8007614 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007612:	2302      	movs	r3, #2
  }
}
 8007614:	4618      	mov	r0, r3
 8007616:	3730      	adds	r7, #48	; 0x30
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800761c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007620:	b0c0      	sub	sp, #256	; 0x100
 8007622:	af00      	add	r7, sp, #0
 8007624:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007638:	68d9      	ldr	r1, [r3, #12]
 800763a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	ea40 0301 	orr.w	r3, r0, r1
 8007644:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800764a:	689a      	ldr	r2, [r3, #8]
 800764c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	431a      	orrs	r2, r3
 8007654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007658:	695b      	ldr	r3, [r3, #20]
 800765a:	431a      	orrs	r2, r3
 800765c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007660:	69db      	ldr	r3, [r3, #28]
 8007662:	4313      	orrs	r3, r2
 8007664:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007674:	f021 010c 	bic.w	r1, r1, #12
 8007678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007682:	430b      	orrs	r3, r1
 8007684:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007696:	6999      	ldr	r1, [r3, #24]
 8007698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	ea40 0301 	orr.w	r3, r0, r1
 80076a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80076a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	4b8f      	ldr	r3, [pc, #572]	; (80078e8 <UART_SetConfig+0x2cc>)
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d005      	beq.n	80076bc <UART_SetConfig+0xa0>
 80076b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	4b8d      	ldr	r3, [pc, #564]	; (80078ec <UART_SetConfig+0x2d0>)
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d104      	bne.n	80076c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80076bc:	f7fe fadc 	bl	8005c78 <HAL_RCC_GetPCLK2Freq>
 80076c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80076c4:	e003      	b.n	80076ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80076c6:	f7fe fac3 	bl	8005c50 <HAL_RCC_GetPCLK1Freq>
 80076ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076d2:	69db      	ldr	r3, [r3, #28]
 80076d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076d8:	f040 810c 	bne.w	80078f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80076dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076e0:	2200      	movs	r2, #0
 80076e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80076e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80076ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80076ee:	4622      	mov	r2, r4
 80076f0:	462b      	mov	r3, r5
 80076f2:	1891      	adds	r1, r2, r2
 80076f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80076f6:	415b      	adcs	r3, r3
 80076f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80076fe:	4621      	mov	r1, r4
 8007700:	eb12 0801 	adds.w	r8, r2, r1
 8007704:	4629      	mov	r1, r5
 8007706:	eb43 0901 	adc.w	r9, r3, r1
 800770a:	f04f 0200 	mov.w	r2, #0
 800770e:	f04f 0300 	mov.w	r3, #0
 8007712:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007716:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800771a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800771e:	4690      	mov	r8, r2
 8007720:	4699      	mov	r9, r3
 8007722:	4623      	mov	r3, r4
 8007724:	eb18 0303 	adds.w	r3, r8, r3
 8007728:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800772c:	462b      	mov	r3, r5
 800772e:	eb49 0303 	adc.w	r3, r9, r3
 8007732:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007742:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007746:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800774a:	460b      	mov	r3, r1
 800774c:	18db      	adds	r3, r3, r3
 800774e:	653b      	str	r3, [r7, #80]	; 0x50
 8007750:	4613      	mov	r3, r2
 8007752:	eb42 0303 	adc.w	r3, r2, r3
 8007756:	657b      	str	r3, [r7, #84]	; 0x54
 8007758:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800775c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007760:	f7f8 fd50 	bl	8000204 <__aeabi_uldivmod>
 8007764:	4602      	mov	r2, r0
 8007766:	460b      	mov	r3, r1
 8007768:	4b61      	ldr	r3, [pc, #388]	; (80078f0 <UART_SetConfig+0x2d4>)
 800776a:	fba3 2302 	umull	r2, r3, r3, r2
 800776e:	095b      	lsrs	r3, r3, #5
 8007770:	011c      	lsls	r4, r3, #4
 8007772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007776:	2200      	movs	r2, #0
 8007778:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800777c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007780:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007784:	4642      	mov	r2, r8
 8007786:	464b      	mov	r3, r9
 8007788:	1891      	adds	r1, r2, r2
 800778a:	64b9      	str	r1, [r7, #72]	; 0x48
 800778c:	415b      	adcs	r3, r3
 800778e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007790:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007794:	4641      	mov	r1, r8
 8007796:	eb12 0a01 	adds.w	sl, r2, r1
 800779a:	4649      	mov	r1, r9
 800779c:	eb43 0b01 	adc.w	fp, r3, r1
 80077a0:	f04f 0200 	mov.w	r2, #0
 80077a4:	f04f 0300 	mov.w	r3, #0
 80077a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80077ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80077b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077b4:	4692      	mov	sl, r2
 80077b6:	469b      	mov	fp, r3
 80077b8:	4643      	mov	r3, r8
 80077ba:	eb1a 0303 	adds.w	r3, sl, r3
 80077be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80077c2:	464b      	mov	r3, r9
 80077c4:	eb4b 0303 	adc.w	r3, fp, r3
 80077c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80077cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80077dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80077e0:	460b      	mov	r3, r1
 80077e2:	18db      	adds	r3, r3, r3
 80077e4:	643b      	str	r3, [r7, #64]	; 0x40
 80077e6:	4613      	mov	r3, r2
 80077e8:	eb42 0303 	adc.w	r3, r2, r3
 80077ec:	647b      	str	r3, [r7, #68]	; 0x44
 80077ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80077f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80077f6:	f7f8 fd05 	bl	8000204 <__aeabi_uldivmod>
 80077fa:	4602      	mov	r2, r0
 80077fc:	460b      	mov	r3, r1
 80077fe:	4611      	mov	r1, r2
 8007800:	4b3b      	ldr	r3, [pc, #236]	; (80078f0 <UART_SetConfig+0x2d4>)
 8007802:	fba3 2301 	umull	r2, r3, r3, r1
 8007806:	095b      	lsrs	r3, r3, #5
 8007808:	2264      	movs	r2, #100	; 0x64
 800780a:	fb02 f303 	mul.w	r3, r2, r3
 800780e:	1acb      	subs	r3, r1, r3
 8007810:	00db      	lsls	r3, r3, #3
 8007812:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007816:	4b36      	ldr	r3, [pc, #216]	; (80078f0 <UART_SetConfig+0x2d4>)
 8007818:	fba3 2302 	umull	r2, r3, r3, r2
 800781c:	095b      	lsrs	r3, r3, #5
 800781e:	005b      	lsls	r3, r3, #1
 8007820:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007824:	441c      	add	r4, r3
 8007826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800782a:	2200      	movs	r2, #0
 800782c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007830:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007834:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007838:	4642      	mov	r2, r8
 800783a:	464b      	mov	r3, r9
 800783c:	1891      	adds	r1, r2, r2
 800783e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007840:	415b      	adcs	r3, r3
 8007842:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007844:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007848:	4641      	mov	r1, r8
 800784a:	1851      	adds	r1, r2, r1
 800784c:	6339      	str	r1, [r7, #48]	; 0x30
 800784e:	4649      	mov	r1, r9
 8007850:	414b      	adcs	r3, r1
 8007852:	637b      	str	r3, [r7, #52]	; 0x34
 8007854:	f04f 0200 	mov.w	r2, #0
 8007858:	f04f 0300 	mov.w	r3, #0
 800785c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007860:	4659      	mov	r1, fp
 8007862:	00cb      	lsls	r3, r1, #3
 8007864:	4651      	mov	r1, sl
 8007866:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800786a:	4651      	mov	r1, sl
 800786c:	00ca      	lsls	r2, r1, #3
 800786e:	4610      	mov	r0, r2
 8007870:	4619      	mov	r1, r3
 8007872:	4603      	mov	r3, r0
 8007874:	4642      	mov	r2, r8
 8007876:	189b      	adds	r3, r3, r2
 8007878:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800787c:	464b      	mov	r3, r9
 800787e:	460a      	mov	r2, r1
 8007880:	eb42 0303 	adc.w	r3, r2, r3
 8007884:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007894:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007898:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800789c:	460b      	mov	r3, r1
 800789e:	18db      	adds	r3, r3, r3
 80078a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80078a2:	4613      	mov	r3, r2
 80078a4:	eb42 0303 	adc.w	r3, r2, r3
 80078a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80078ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80078b2:	f7f8 fca7 	bl	8000204 <__aeabi_uldivmod>
 80078b6:	4602      	mov	r2, r0
 80078b8:	460b      	mov	r3, r1
 80078ba:	4b0d      	ldr	r3, [pc, #52]	; (80078f0 <UART_SetConfig+0x2d4>)
 80078bc:	fba3 1302 	umull	r1, r3, r3, r2
 80078c0:	095b      	lsrs	r3, r3, #5
 80078c2:	2164      	movs	r1, #100	; 0x64
 80078c4:	fb01 f303 	mul.w	r3, r1, r3
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	00db      	lsls	r3, r3, #3
 80078cc:	3332      	adds	r3, #50	; 0x32
 80078ce:	4a08      	ldr	r2, [pc, #32]	; (80078f0 <UART_SetConfig+0x2d4>)
 80078d0:	fba2 2303 	umull	r2, r3, r2, r3
 80078d4:	095b      	lsrs	r3, r3, #5
 80078d6:	f003 0207 	and.w	r2, r3, #7
 80078da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4422      	add	r2, r4
 80078e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80078e4:	e105      	b.n	8007af2 <UART_SetConfig+0x4d6>
 80078e6:	bf00      	nop
 80078e8:	40011000 	.word	0x40011000
 80078ec:	40011400 	.word	0x40011400
 80078f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078f8:	2200      	movs	r2, #0
 80078fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80078fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007902:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007906:	4642      	mov	r2, r8
 8007908:	464b      	mov	r3, r9
 800790a:	1891      	adds	r1, r2, r2
 800790c:	6239      	str	r1, [r7, #32]
 800790e:	415b      	adcs	r3, r3
 8007910:	627b      	str	r3, [r7, #36]	; 0x24
 8007912:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007916:	4641      	mov	r1, r8
 8007918:	1854      	adds	r4, r2, r1
 800791a:	4649      	mov	r1, r9
 800791c:	eb43 0501 	adc.w	r5, r3, r1
 8007920:	f04f 0200 	mov.w	r2, #0
 8007924:	f04f 0300 	mov.w	r3, #0
 8007928:	00eb      	lsls	r3, r5, #3
 800792a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800792e:	00e2      	lsls	r2, r4, #3
 8007930:	4614      	mov	r4, r2
 8007932:	461d      	mov	r5, r3
 8007934:	4643      	mov	r3, r8
 8007936:	18e3      	adds	r3, r4, r3
 8007938:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800793c:	464b      	mov	r3, r9
 800793e:	eb45 0303 	adc.w	r3, r5, r3
 8007942:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007952:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007956:	f04f 0200 	mov.w	r2, #0
 800795a:	f04f 0300 	mov.w	r3, #0
 800795e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007962:	4629      	mov	r1, r5
 8007964:	008b      	lsls	r3, r1, #2
 8007966:	4621      	mov	r1, r4
 8007968:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800796c:	4621      	mov	r1, r4
 800796e:	008a      	lsls	r2, r1, #2
 8007970:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007974:	f7f8 fc46 	bl	8000204 <__aeabi_uldivmod>
 8007978:	4602      	mov	r2, r0
 800797a:	460b      	mov	r3, r1
 800797c:	4b60      	ldr	r3, [pc, #384]	; (8007b00 <UART_SetConfig+0x4e4>)
 800797e:	fba3 2302 	umull	r2, r3, r3, r2
 8007982:	095b      	lsrs	r3, r3, #5
 8007984:	011c      	lsls	r4, r3, #4
 8007986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800798a:	2200      	movs	r2, #0
 800798c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007990:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007994:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007998:	4642      	mov	r2, r8
 800799a:	464b      	mov	r3, r9
 800799c:	1891      	adds	r1, r2, r2
 800799e:	61b9      	str	r1, [r7, #24]
 80079a0:	415b      	adcs	r3, r3
 80079a2:	61fb      	str	r3, [r7, #28]
 80079a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80079a8:	4641      	mov	r1, r8
 80079aa:	1851      	adds	r1, r2, r1
 80079ac:	6139      	str	r1, [r7, #16]
 80079ae:	4649      	mov	r1, r9
 80079b0:	414b      	adcs	r3, r1
 80079b2:	617b      	str	r3, [r7, #20]
 80079b4:	f04f 0200 	mov.w	r2, #0
 80079b8:	f04f 0300 	mov.w	r3, #0
 80079bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80079c0:	4659      	mov	r1, fp
 80079c2:	00cb      	lsls	r3, r1, #3
 80079c4:	4651      	mov	r1, sl
 80079c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079ca:	4651      	mov	r1, sl
 80079cc:	00ca      	lsls	r2, r1, #3
 80079ce:	4610      	mov	r0, r2
 80079d0:	4619      	mov	r1, r3
 80079d2:	4603      	mov	r3, r0
 80079d4:	4642      	mov	r2, r8
 80079d6:	189b      	adds	r3, r3, r2
 80079d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80079dc:	464b      	mov	r3, r9
 80079de:	460a      	mov	r2, r1
 80079e0:	eb42 0303 	adc.w	r3, r2, r3
 80079e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80079e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80079f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80079f4:	f04f 0200 	mov.w	r2, #0
 80079f8:	f04f 0300 	mov.w	r3, #0
 80079fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007a00:	4649      	mov	r1, r9
 8007a02:	008b      	lsls	r3, r1, #2
 8007a04:	4641      	mov	r1, r8
 8007a06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a0a:	4641      	mov	r1, r8
 8007a0c:	008a      	lsls	r2, r1, #2
 8007a0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007a12:	f7f8 fbf7 	bl	8000204 <__aeabi_uldivmod>
 8007a16:	4602      	mov	r2, r0
 8007a18:	460b      	mov	r3, r1
 8007a1a:	4b39      	ldr	r3, [pc, #228]	; (8007b00 <UART_SetConfig+0x4e4>)
 8007a1c:	fba3 1302 	umull	r1, r3, r3, r2
 8007a20:	095b      	lsrs	r3, r3, #5
 8007a22:	2164      	movs	r1, #100	; 0x64
 8007a24:	fb01 f303 	mul.w	r3, r1, r3
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	011b      	lsls	r3, r3, #4
 8007a2c:	3332      	adds	r3, #50	; 0x32
 8007a2e:	4a34      	ldr	r2, [pc, #208]	; (8007b00 <UART_SetConfig+0x4e4>)
 8007a30:	fba2 2303 	umull	r2, r3, r2, r3
 8007a34:	095b      	lsrs	r3, r3, #5
 8007a36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a3a:	441c      	add	r4, r3
 8007a3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a40:	2200      	movs	r2, #0
 8007a42:	673b      	str	r3, [r7, #112]	; 0x70
 8007a44:	677a      	str	r2, [r7, #116]	; 0x74
 8007a46:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007a4a:	4642      	mov	r2, r8
 8007a4c:	464b      	mov	r3, r9
 8007a4e:	1891      	adds	r1, r2, r2
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	415b      	adcs	r3, r3
 8007a54:	60fb      	str	r3, [r7, #12]
 8007a56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a5a:	4641      	mov	r1, r8
 8007a5c:	1851      	adds	r1, r2, r1
 8007a5e:	6039      	str	r1, [r7, #0]
 8007a60:	4649      	mov	r1, r9
 8007a62:	414b      	adcs	r3, r1
 8007a64:	607b      	str	r3, [r7, #4]
 8007a66:	f04f 0200 	mov.w	r2, #0
 8007a6a:	f04f 0300 	mov.w	r3, #0
 8007a6e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007a72:	4659      	mov	r1, fp
 8007a74:	00cb      	lsls	r3, r1, #3
 8007a76:	4651      	mov	r1, sl
 8007a78:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a7c:	4651      	mov	r1, sl
 8007a7e:	00ca      	lsls	r2, r1, #3
 8007a80:	4610      	mov	r0, r2
 8007a82:	4619      	mov	r1, r3
 8007a84:	4603      	mov	r3, r0
 8007a86:	4642      	mov	r2, r8
 8007a88:	189b      	adds	r3, r3, r2
 8007a8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a8c:	464b      	mov	r3, r9
 8007a8e:	460a      	mov	r2, r1
 8007a90:	eb42 0303 	adc.w	r3, r2, r3
 8007a94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	663b      	str	r3, [r7, #96]	; 0x60
 8007aa0:	667a      	str	r2, [r7, #100]	; 0x64
 8007aa2:	f04f 0200 	mov.w	r2, #0
 8007aa6:	f04f 0300 	mov.w	r3, #0
 8007aaa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007aae:	4649      	mov	r1, r9
 8007ab0:	008b      	lsls	r3, r1, #2
 8007ab2:	4641      	mov	r1, r8
 8007ab4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ab8:	4641      	mov	r1, r8
 8007aba:	008a      	lsls	r2, r1, #2
 8007abc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007ac0:	f7f8 fba0 	bl	8000204 <__aeabi_uldivmod>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	4b0d      	ldr	r3, [pc, #52]	; (8007b00 <UART_SetConfig+0x4e4>)
 8007aca:	fba3 1302 	umull	r1, r3, r3, r2
 8007ace:	095b      	lsrs	r3, r3, #5
 8007ad0:	2164      	movs	r1, #100	; 0x64
 8007ad2:	fb01 f303 	mul.w	r3, r1, r3
 8007ad6:	1ad3      	subs	r3, r2, r3
 8007ad8:	011b      	lsls	r3, r3, #4
 8007ada:	3332      	adds	r3, #50	; 0x32
 8007adc:	4a08      	ldr	r2, [pc, #32]	; (8007b00 <UART_SetConfig+0x4e4>)
 8007ade:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae2:	095b      	lsrs	r3, r3, #5
 8007ae4:	f003 020f 	and.w	r2, r3, #15
 8007ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4422      	add	r2, r4
 8007af0:	609a      	str	r2, [r3, #8]
}
 8007af2:	bf00      	nop
 8007af4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007af8:	46bd      	mov	sp, r7
 8007afa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007afe:	bf00      	nop
 8007b00:	51eb851f 	.word	0x51eb851f

08007b04 <__errno>:
 8007b04:	4b01      	ldr	r3, [pc, #4]	; (8007b0c <__errno+0x8>)
 8007b06:	6818      	ldr	r0, [r3, #0]
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	200000e8 	.word	0x200000e8

08007b10 <__libc_init_array>:
 8007b10:	b570      	push	{r4, r5, r6, lr}
 8007b12:	4d0d      	ldr	r5, [pc, #52]	; (8007b48 <__libc_init_array+0x38>)
 8007b14:	4c0d      	ldr	r4, [pc, #52]	; (8007b4c <__libc_init_array+0x3c>)
 8007b16:	1b64      	subs	r4, r4, r5
 8007b18:	10a4      	asrs	r4, r4, #2
 8007b1a:	2600      	movs	r6, #0
 8007b1c:	42a6      	cmp	r6, r4
 8007b1e:	d109      	bne.n	8007b34 <__libc_init_array+0x24>
 8007b20:	4d0b      	ldr	r5, [pc, #44]	; (8007b50 <__libc_init_array+0x40>)
 8007b22:	4c0c      	ldr	r4, [pc, #48]	; (8007b54 <__libc_init_array+0x44>)
 8007b24:	f000 fd3c 	bl	80085a0 <_init>
 8007b28:	1b64      	subs	r4, r4, r5
 8007b2a:	10a4      	asrs	r4, r4, #2
 8007b2c:	2600      	movs	r6, #0
 8007b2e:	42a6      	cmp	r6, r4
 8007b30:	d105      	bne.n	8007b3e <__libc_init_array+0x2e>
 8007b32:	bd70      	pop	{r4, r5, r6, pc}
 8007b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b38:	4798      	blx	r3
 8007b3a:	3601      	adds	r6, #1
 8007b3c:	e7ee      	b.n	8007b1c <__libc_init_array+0xc>
 8007b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b42:	4798      	blx	r3
 8007b44:	3601      	adds	r6, #1
 8007b46:	e7f2      	b.n	8007b2e <__libc_init_array+0x1e>
 8007b48:	080086a4 	.word	0x080086a4
 8007b4c:	080086a4 	.word	0x080086a4
 8007b50:	080086a4 	.word	0x080086a4
 8007b54:	080086a8 	.word	0x080086a8

08007b58 <memcmp>:
 8007b58:	b510      	push	{r4, lr}
 8007b5a:	3901      	subs	r1, #1
 8007b5c:	4402      	add	r2, r0
 8007b5e:	4290      	cmp	r0, r2
 8007b60:	d101      	bne.n	8007b66 <memcmp+0xe>
 8007b62:	2000      	movs	r0, #0
 8007b64:	e005      	b.n	8007b72 <memcmp+0x1a>
 8007b66:	7803      	ldrb	r3, [r0, #0]
 8007b68:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007b6c:	42a3      	cmp	r3, r4
 8007b6e:	d001      	beq.n	8007b74 <memcmp+0x1c>
 8007b70:	1b18      	subs	r0, r3, r4
 8007b72:	bd10      	pop	{r4, pc}
 8007b74:	3001      	adds	r0, #1
 8007b76:	e7f2      	b.n	8007b5e <memcmp+0x6>

08007b78 <memcpy>:
 8007b78:	440a      	add	r2, r1
 8007b7a:	4291      	cmp	r1, r2
 8007b7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b80:	d100      	bne.n	8007b84 <memcpy+0xc>
 8007b82:	4770      	bx	lr
 8007b84:	b510      	push	{r4, lr}
 8007b86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b8e:	4291      	cmp	r1, r2
 8007b90:	d1f9      	bne.n	8007b86 <memcpy+0xe>
 8007b92:	bd10      	pop	{r4, pc}

08007b94 <memset>:
 8007b94:	4402      	add	r2, r0
 8007b96:	4603      	mov	r3, r0
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d100      	bne.n	8007b9e <memset+0xa>
 8007b9c:	4770      	bx	lr
 8007b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8007ba2:	e7f9      	b.n	8007b98 <memset+0x4>

08007ba4 <_puts_r>:
 8007ba4:	b570      	push	{r4, r5, r6, lr}
 8007ba6:	460e      	mov	r6, r1
 8007ba8:	4605      	mov	r5, r0
 8007baa:	b118      	cbz	r0, 8007bb4 <_puts_r+0x10>
 8007bac:	6983      	ldr	r3, [r0, #24]
 8007bae:	b90b      	cbnz	r3, 8007bb4 <_puts_r+0x10>
 8007bb0:	f000 fa48 	bl	8008044 <__sinit>
 8007bb4:	69ab      	ldr	r3, [r5, #24]
 8007bb6:	68ac      	ldr	r4, [r5, #8]
 8007bb8:	b913      	cbnz	r3, 8007bc0 <_puts_r+0x1c>
 8007bba:	4628      	mov	r0, r5
 8007bbc:	f000 fa42 	bl	8008044 <__sinit>
 8007bc0:	4b2c      	ldr	r3, [pc, #176]	; (8007c74 <_puts_r+0xd0>)
 8007bc2:	429c      	cmp	r4, r3
 8007bc4:	d120      	bne.n	8007c08 <_puts_r+0x64>
 8007bc6:	686c      	ldr	r4, [r5, #4]
 8007bc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bca:	07db      	lsls	r3, r3, #31
 8007bcc:	d405      	bmi.n	8007bda <_puts_r+0x36>
 8007bce:	89a3      	ldrh	r3, [r4, #12]
 8007bd0:	0598      	lsls	r0, r3, #22
 8007bd2:	d402      	bmi.n	8007bda <_puts_r+0x36>
 8007bd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bd6:	f000 fad3 	bl	8008180 <__retarget_lock_acquire_recursive>
 8007bda:	89a3      	ldrh	r3, [r4, #12]
 8007bdc:	0719      	lsls	r1, r3, #28
 8007bde:	d51d      	bpl.n	8007c1c <_puts_r+0x78>
 8007be0:	6923      	ldr	r3, [r4, #16]
 8007be2:	b1db      	cbz	r3, 8007c1c <_puts_r+0x78>
 8007be4:	3e01      	subs	r6, #1
 8007be6:	68a3      	ldr	r3, [r4, #8]
 8007be8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007bec:	3b01      	subs	r3, #1
 8007bee:	60a3      	str	r3, [r4, #8]
 8007bf0:	bb39      	cbnz	r1, 8007c42 <_puts_r+0x9e>
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	da38      	bge.n	8007c68 <_puts_r+0xc4>
 8007bf6:	4622      	mov	r2, r4
 8007bf8:	210a      	movs	r1, #10
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	f000 f848 	bl	8007c90 <__swbuf_r>
 8007c00:	3001      	adds	r0, #1
 8007c02:	d011      	beq.n	8007c28 <_puts_r+0x84>
 8007c04:	250a      	movs	r5, #10
 8007c06:	e011      	b.n	8007c2c <_puts_r+0x88>
 8007c08:	4b1b      	ldr	r3, [pc, #108]	; (8007c78 <_puts_r+0xd4>)
 8007c0a:	429c      	cmp	r4, r3
 8007c0c:	d101      	bne.n	8007c12 <_puts_r+0x6e>
 8007c0e:	68ac      	ldr	r4, [r5, #8]
 8007c10:	e7da      	b.n	8007bc8 <_puts_r+0x24>
 8007c12:	4b1a      	ldr	r3, [pc, #104]	; (8007c7c <_puts_r+0xd8>)
 8007c14:	429c      	cmp	r4, r3
 8007c16:	bf08      	it	eq
 8007c18:	68ec      	ldreq	r4, [r5, #12]
 8007c1a:	e7d5      	b.n	8007bc8 <_puts_r+0x24>
 8007c1c:	4621      	mov	r1, r4
 8007c1e:	4628      	mov	r0, r5
 8007c20:	f000 f888 	bl	8007d34 <__swsetup_r>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	d0dd      	beq.n	8007be4 <_puts_r+0x40>
 8007c28:	f04f 35ff 	mov.w	r5, #4294967295
 8007c2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c2e:	07da      	lsls	r2, r3, #31
 8007c30:	d405      	bmi.n	8007c3e <_puts_r+0x9a>
 8007c32:	89a3      	ldrh	r3, [r4, #12]
 8007c34:	059b      	lsls	r3, r3, #22
 8007c36:	d402      	bmi.n	8007c3e <_puts_r+0x9a>
 8007c38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c3a:	f000 faa2 	bl	8008182 <__retarget_lock_release_recursive>
 8007c3e:	4628      	mov	r0, r5
 8007c40:	bd70      	pop	{r4, r5, r6, pc}
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	da04      	bge.n	8007c50 <_puts_r+0xac>
 8007c46:	69a2      	ldr	r2, [r4, #24]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	dc06      	bgt.n	8007c5a <_puts_r+0xb6>
 8007c4c:	290a      	cmp	r1, #10
 8007c4e:	d004      	beq.n	8007c5a <_puts_r+0xb6>
 8007c50:	6823      	ldr	r3, [r4, #0]
 8007c52:	1c5a      	adds	r2, r3, #1
 8007c54:	6022      	str	r2, [r4, #0]
 8007c56:	7019      	strb	r1, [r3, #0]
 8007c58:	e7c5      	b.n	8007be6 <_puts_r+0x42>
 8007c5a:	4622      	mov	r2, r4
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	f000 f817 	bl	8007c90 <__swbuf_r>
 8007c62:	3001      	adds	r0, #1
 8007c64:	d1bf      	bne.n	8007be6 <_puts_r+0x42>
 8007c66:	e7df      	b.n	8007c28 <_puts_r+0x84>
 8007c68:	6823      	ldr	r3, [r4, #0]
 8007c6a:	250a      	movs	r5, #10
 8007c6c:	1c5a      	adds	r2, r3, #1
 8007c6e:	6022      	str	r2, [r4, #0]
 8007c70:	701d      	strb	r5, [r3, #0]
 8007c72:	e7db      	b.n	8007c2c <_puts_r+0x88>
 8007c74:	0800865c 	.word	0x0800865c
 8007c78:	0800867c 	.word	0x0800867c
 8007c7c:	0800863c 	.word	0x0800863c

08007c80 <puts>:
 8007c80:	4b02      	ldr	r3, [pc, #8]	; (8007c8c <puts+0xc>)
 8007c82:	4601      	mov	r1, r0
 8007c84:	6818      	ldr	r0, [r3, #0]
 8007c86:	f7ff bf8d 	b.w	8007ba4 <_puts_r>
 8007c8a:	bf00      	nop
 8007c8c:	200000e8 	.word	0x200000e8

08007c90 <__swbuf_r>:
 8007c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c92:	460e      	mov	r6, r1
 8007c94:	4614      	mov	r4, r2
 8007c96:	4605      	mov	r5, r0
 8007c98:	b118      	cbz	r0, 8007ca2 <__swbuf_r+0x12>
 8007c9a:	6983      	ldr	r3, [r0, #24]
 8007c9c:	b90b      	cbnz	r3, 8007ca2 <__swbuf_r+0x12>
 8007c9e:	f000 f9d1 	bl	8008044 <__sinit>
 8007ca2:	4b21      	ldr	r3, [pc, #132]	; (8007d28 <__swbuf_r+0x98>)
 8007ca4:	429c      	cmp	r4, r3
 8007ca6:	d12b      	bne.n	8007d00 <__swbuf_r+0x70>
 8007ca8:	686c      	ldr	r4, [r5, #4]
 8007caa:	69a3      	ldr	r3, [r4, #24]
 8007cac:	60a3      	str	r3, [r4, #8]
 8007cae:	89a3      	ldrh	r3, [r4, #12]
 8007cb0:	071a      	lsls	r2, r3, #28
 8007cb2:	d52f      	bpl.n	8007d14 <__swbuf_r+0x84>
 8007cb4:	6923      	ldr	r3, [r4, #16]
 8007cb6:	b36b      	cbz	r3, 8007d14 <__swbuf_r+0x84>
 8007cb8:	6923      	ldr	r3, [r4, #16]
 8007cba:	6820      	ldr	r0, [r4, #0]
 8007cbc:	1ac0      	subs	r0, r0, r3
 8007cbe:	6963      	ldr	r3, [r4, #20]
 8007cc0:	b2f6      	uxtb	r6, r6
 8007cc2:	4283      	cmp	r3, r0
 8007cc4:	4637      	mov	r7, r6
 8007cc6:	dc04      	bgt.n	8007cd2 <__swbuf_r+0x42>
 8007cc8:	4621      	mov	r1, r4
 8007cca:	4628      	mov	r0, r5
 8007ccc:	f000 f926 	bl	8007f1c <_fflush_r>
 8007cd0:	bb30      	cbnz	r0, 8007d20 <__swbuf_r+0x90>
 8007cd2:	68a3      	ldr	r3, [r4, #8]
 8007cd4:	3b01      	subs	r3, #1
 8007cd6:	60a3      	str	r3, [r4, #8]
 8007cd8:	6823      	ldr	r3, [r4, #0]
 8007cda:	1c5a      	adds	r2, r3, #1
 8007cdc:	6022      	str	r2, [r4, #0]
 8007cde:	701e      	strb	r6, [r3, #0]
 8007ce0:	6963      	ldr	r3, [r4, #20]
 8007ce2:	3001      	adds	r0, #1
 8007ce4:	4283      	cmp	r3, r0
 8007ce6:	d004      	beq.n	8007cf2 <__swbuf_r+0x62>
 8007ce8:	89a3      	ldrh	r3, [r4, #12]
 8007cea:	07db      	lsls	r3, r3, #31
 8007cec:	d506      	bpl.n	8007cfc <__swbuf_r+0x6c>
 8007cee:	2e0a      	cmp	r6, #10
 8007cf0:	d104      	bne.n	8007cfc <__swbuf_r+0x6c>
 8007cf2:	4621      	mov	r1, r4
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	f000 f911 	bl	8007f1c <_fflush_r>
 8007cfa:	b988      	cbnz	r0, 8007d20 <__swbuf_r+0x90>
 8007cfc:	4638      	mov	r0, r7
 8007cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d00:	4b0a      	ldr	r3, [pc, #40]	; (8007d2c <__swbuf_r+0x9c>)
 8007d02:	429c      	cmp	r4, r3
 8007d04:	d101      	bne.n	8007d0a <__swbuf_r+0x7a>
 8007d06:	68ac      	ldr	r4, [r5, #8]
 8007d08:	e7cf      	b.n	8007caa <__swbuf_r+0x1a>
 8007d0a:	4b09      	ldr	r3, [pc, #36]	; (8007d30 <__swbuf_r+0xa0>)
 8007d0c:	429c      	cmp	r4, r3
 8007d0e:	bf08      	it	eq
 8007d10:	68ec      	ldreq	r4, [r5, #12]
 8007d12:	e7ca      	b.n	8007caa <__swbuf_r+0x1a>
 8007d14:	4621      	mov	r1, r4
 8007d16:	4628      	mov	r0, r5
 8007d18:	f000 f80c 	bl	8007d34 <__swsetup_r>
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	d0cb      	beq.n	8007cb8 <__swbuf_r+0x28>
 8007d20:	f04f 37ff 	mov.w	r7, #4294967295
 8007d24:	e7ea      	b.n	8007cfc <__swbuf_r+0x6c>
 8007d26:	bf00      	nop
 8007d28:	0800865c 	.word	0x0800865c
 8007d2c:	0800867c 	.word	0x0800867c
 8007d30:	0800863c 	.word	0x0800863c

08007d34 <__swsetup_r>:
 8007d34:	4b32      	ldr	r3, [pc, #200]	; (8007e00 <__swsetup_r+0xcc>)
 8007d36:	b570      	push	{r4, r5, r6, lr}
 8007d38:	681d      	ldr	r5, [r3, #0]
 8007d3a:	4606      	mov	r6, r0
 8007d3c:	460c      	mov	r4, r1
 8007d3e:	b125      	cbz	r5, 8007d4a <__swsetup_r+0x16>
 8007d40:	69ab      	ldr	r3, [r5, #24]
 8007d42:	b913      	cbnz	r3, 8007d4a <__swsetup_r+0x16>
 8007d44:	4628      	mov	r0, r5
 8007d46:	f000 f97d 	bl	8008044 <__sinit>
 8007d4a:	4b2e      	ldr	r3, [pc, #184]	; (8007e04 <__swsetup_r+0xd0>)
 8007d4c:	429c      	cmp	r4, r3
 8007d4e:	d10f      	bne.n	8007d70 <__swsetup_r+0x3c>
 8007d50:	686c      	ldr	r4, [r5, #4]
 8007d52:	89a3      	ldrh	r3, [r4, #12]
 8007d54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d58:	0719      	lsls	r1, r3, #28
 8007d5a:	d42c      	bmi.n	8007db6 <__swsetup_r+0x82>
 8007d5c:	06dd      	lsls	r5, r3, #27
 8007d5e:	d411      	bmi.n	8007d84 <__swsetup_r+0x50>
 8007d60:	2309      	movs	r3, #9
 8007d62:	6033      	str	r3, [r6, #0]
 8007d64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d68:	81a3      	strh	r3, [r4, #12]
 8007d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d6e:	e03e      	b.n	8007dee <__swsetup_r+0xba>
 8007d70:	4b25      	ldr	r3, [pc, #148]	; (8007e08 <__swsetup_r+0xd4>)
 8007d72:	429c      	cmp	r4, r3
 8007d74:	d101      	bne.n	8007d7a <__swsetup_r+0x46>
 8007d76:	68ac      	ldr	r4, [r5, #8]
 8007d78:	e7eb      	b.n	8007d52 <__swsetup_r+0x1e>
 8007d7a:	4b24      	ldr	r3, [pc, #144]	; (8007e0c <__swsetup_r+0xd8>)
 8007d7c:	429c      	cmp	r4, r3
 8007d7e:	bf08      	it	eq
 8007d80:	68ec      	ldreq	r4, [r5, #12]
 8007d82:	e7e6      	b.n	8007d52 <__swsetup_r+0x1e>
 8007d84:	0758      	lsls	r0, r3, #29
 8007d86:	d512      	bpl.n	8007dae <__swsetup_r+0x7a>
 8007d88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d8a:	b141      	cbz	r1, 8007d9e <__swsetup_r+0x6a>
 8007d8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d90:	4299      	cmp	r1, r3
 8007d92:	d002      	beq.n	8007d9a <__swsetup_r+0x66>
 8007d94:	4630      	mov	r0, r6
 8007d96:	f000 fa5b 	bl	8008250 <_free_r>
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	6363      	str	r3, [r4, #52]	; 0x34
 8007d9e:	89a3      	ldrh	r3, [r4, #12]
 8007da0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007da4:	81a3      	strh	r3, [r4, #12]
 8007da6:	2300      	movs	r3, #0
 8007da8:	6063      	str	r3, [r4, #4]
 8007daa:	6923      	ldr	r3, [r4, #16]
 8007dac:	6023      	str	r3, [r4, #0]
 8007dae:	89a3      	ldrh	r3, [r4, #12]
 8007db0:	f043 0308 	orr.w	r3, r3, #8
 8007db4:	81a3      	strh	r3, [r4, #12]
 8007db6:	6923      	ldr	r3, [r4, #16]
 8007db8:	b94b      	cbnz	r3, 8007dce <__swsetup_r+0x9a>
 8007dba:	89a3      	ldrh	r3, [r4, #12]
 8007dbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dc4:	d003      	beq.n	8007dce <__swsetup_r+0x9a>
 8007dc6:	4621      	mov	r1, r4
 8007dc8:	4630      	mov	r0, r6
 8007dca:	f000 fa01 	bl	80081d0 <__smakebuf_r>
 8007dce:	89a0      	ldrh	r0, [r4, #12]
 8007dd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007dd4:	f010 0301 	ands.w	r3, r0, #1
 8007dd8:	d00a      	beq.n	8007df0 <__swsetup_r+0xbc>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	60a3      	str	r3, [r4, #8]
 8007dde:	6963      	ldr	r3, [r4, #20]
 8007de0:	425b      	negs	r3, r3
 8007de2:	61a3      	str	r3, [r4, #24]
 8007de4:	6923      	ldr	r3, [r4, #16]
 8007de6:	b943      	cbnz	r3, 8007dfa <__swsetup_r+0xc6>
 8007de8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007dec:	d1ba      	bne.n	8007d64 <__swsetup_r+0x30>
 8007dee:	bd70      	pop	{r4, r5, r6, pc}
 8007df0:	0781      	lsls	r1, r0, #30
 8007df2:	bf58      	it	pl
 8007df4:	6963      	ldrpl	r3, [r4, #20]
 8007df6:	60a3      	str	r3, [r4, #8]
 8007df8:	e7f4      	b.n	8007de4 <__swsetup_r+0xb0>
 8007dfa:	2000      	movs	r0, #0
 8007dfc:	e7f7      	b.n	8007dee <__swsetup_r+0xba>
 8007dfe:	bf00      	nop
 8007e00:	200000e8 	.word	0x200000e8
 8007e04:	0800865c 	.word	0x0800865c
 8007e08:	0800867c 	.word	0x0800867c
 8007e0c:	0800863c 	.word	0x0800863c

08007e10 <__sflush_r>:
 8007e10:	898a      	ldrh	r2, [r1, #12]
 8007e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e16:	4605      	mov	r5, r0
 8007e18:	0710      	lsls	r0, r2, #28
 8007e1a:	460c      	mov	r4, r1
 8007e1c:	d458      	bmi.n	8007ed0 <__sflush_r+0xc0>
 8007e1e:	684b      	ldr	r3, [r1, #4]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	dc05      	bgt.n	8007e30 <__sflush_r+0x20>
 8007e24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	dc02      	bgt.n	8007e30 <__sflush_r+0x20>
 8007e2a:	2000      	movs	r0, #0
 8007e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e32:	2e00      	cmp	r6, #0
 8007e34:	d0f9      	beq.n	8007e2a <__sflush_r+0x1a>
 8007e36:	2300      	movs	r3, #0
 8007e38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e3c:	682f      	ldr	r7, [r5, #0]
 8007e3e:	602b      	str	r3, [r5, #0]
 8007e40:	d032      	beq.n	8007ea8 <__sflush_r+0x98>
 8007e42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e44:	89a3      	ldrh	r3, [r4, #12]
 8007e46:	075a      	lsls	r2, r3, #29
 8007e48:	d505      	bpl.n	8007e56 <__sflush_r+0x46>
 8007e4a:	6863      	ldr	r3, [r4, #4]
 8007e4c:	1ac0      	subs	r0, r0, r3
 8007e4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e50:	b10b      	cbz	r3, 8007e56 <__sflush_r+0x46>
 8007e52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e54:	1ac0      	subs	r0, r0, r3
 8007e56:	2300      	movs	r3, #0
 8007e58:	4602      	mov	r2, r0
 8007e5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e5c:	6a21      	ldr	r1, [r4, #32]
 8007e5e:	4628      	mov	r0, r5
 8007e60:	47b0      	blx	r6
 8007e62:	1c43      	adds	r3, r0, #1
 8007e64:	89a3      	ldrh	r3, [r4, #12]
 8007e66:	d106      	bne.n	8007e76 <__sflush_r+0x66>
 8007e68:	6829      	ldr	r1, [r5, #0]
 8007e6a:	291d      	cmp	r1, #29
 8007e6c:	d82c      	bhi.n	8007ec8 <__sflush_r+0xb8>
 8007e6e:	4a2a      	ldr	r2, [pc, #168]	; (8007f18 <__sflush_r+0x108>)
 8007e70:	40ca      	lsrs	r2, r1
 8007e72:	07d6      	lsls	r6, r2, #31
 8007e74:	d528      	bpl.n	8007ec8 <__sflush_r+0xb8>
 8007e76:	2200      	movs	r2, #0
 8007e78:	6062      	str	r2, [r4, #4]
 8007e7a:	04d9      	lsls	r1, r3, #19
 8007e7c:	6922      	ldr	r2, [r4, #16]
 8007e7e:	6022      	str	r2, [r4, #0]
 8007e80:	d504      	bpl.n	8007e8c <__sflush_r+0x7c>
 8007e82:	1c42      	adds	r2, r0, #1
 8007e84:	d101      	bne.n	8007e8a <__sflush_r+0x7a>
 8007e86:	682b      	ldr	r3, [r5, #0]
 8007e88:	b903      	cbnz	r3, 8007e8c <__sflush_r+0x7c>
 8007e8a:	6560      	str	r0, [r4, #84]	; 0x54
 8007e8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e8e:	602f      	str	r7, [r5, #0]
 8007e90:	2900      	cmp	r1, #0
 8007e92:	d0ca      	beq.n	8007e2a <__sflush_r+0x1a>
 8007e94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e98:	4299      	cmp	r1, r3
 8007e9a:	d002      	beq.n	8007ea2 <__sflush_r+0x92>
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	f000 f9d7 	bl	8008250 <_free_r>
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	6360      	str	r0, [r4, #52]	; 0x34
 8007ea6:	e7c1      	b.n	8007e2c <__sflush_r+0x1c>
 8007ea8:	6a21      	ldr	r1, [r4, #32]
 8007eaa:	2301      	movs	r3, #1
 8007eac:	4628      	mov	r0, r5
 8007eae:	47b0      	blx	r6
 8007eb0:	1c41      	adds	r1, r0, #1
 8007eb2:	d1c7      	bne.n	8007e44 <__sflush_r+0x34>
 8007eb4:	682b      	ldr	r3, [r5, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d0c4      	beq.n	8007e44 <__sflush_r+0x34>
 8007eba:	2b1d      	cmp	r3, #29
 8007ebc:	d001      	beq.n	8007ec2 <__sflush_r+0xb2>
 8007ebe:	2b16      	cmp	r3, #22
 8007ec0:	d101      	bne.n	8007ec6 <__sflush_r+0xb6>
 8007ec2:	602f      	str	r7, [r5, #0]
 8007ec4:	e7b1      	b.n	8007e2a <__sflush_r+0x1a>
 8007ec6:	89a3      	ldrh	r3, [r4, #12]
 8007ec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ecc:	81a3      	strh	r3, [r4, #12]
 8007ece:	e7ad      	b.n	8007e2c <__sflush_r+0x1c>
 8007ed0:	690f      	ldr	r7, [r1, #16]
 8007ed2:	2f00      	cmp	r7, #0
 8007ed4:	d0a9      	beq.n	8007e2a <__sflush_r+0x1a>
 8007ed6:	0793      	lsls	r3, r2, #30
 8007ed8:	680e      	ldr	r6, [r1, #0]
 8007eda:	bf08      	it	eq
 8007edc:	694b      	ldreq	r3, [r1, #20]
 8007ede:	600f      	str	r7, [r1, #0]
 8007ee0:	bf18      	it	ne
 8007ee2:	2300      	movne	r3, #0
 8007ee4:	eba6 0807 	sub.w	r8, r6, r7
 8007ee8:	608b      	str	r3, [r1, #8]
 8007eea:	f1b8 0f00 	cmp.w	r8, #0
 8007eee:	dd9c      	ble.n	8007e2a <__sflush_r+0x1a>
 8007ef0:	6a21      	ldr	r1, [r4, #32]
 8007ef2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ef4:	4643      	mov	r3, r8
 8007ef6:	463a      	mov	r2, r7
 8007ef8:	4628      	mov	r0, r5
 8007efa:	47b0      	blx	r6
 8007efc:	2800      	cmp	r0, #0
 8007efe:	dc06      	bgt.n	8007f0e <__sflush_r+0xfe>
 8007f00:	89a3      	ldrh	r3, [r4, #12]
 8007f02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f06:	81a3      	strh	r3, [r4, #12]
 8007f08:	f04f 30ff 	mov.w	r0, #4294967295
 8007f0c:	e78e      	b.n	8007e2c <__sflush_r+0x1c>
 8007f0e:	4407      	add	r7, r0
 8007f10:	eba8 0800 	sub.w	r8, r8, r0
 8007f14:	e7e9      	b.n	8007eea <__sflush_r+0xda>
 8007f16:	bf00      	nop
 8007f18:	20400001 	.word	0x20400001

08007f1c <_fflush_r>:
 8007f1c:	b538      	push	{r3, r4, r5, lr}
 8007f1e:	690b      	ldr	r3, [r1, #16]
 8007f20:	4605      	mov	r5, r0
 8007f22:	460c      	mov	r4, r1
 8007f24:	b913      	cbnz	r3, 8007f2c <_fflush_r+0x10>
 8007f26:	2500      	movs	r5, #0
 8007f28:	4628      	mov	r0, r5
 8007f2a:	bd38      	pop	{r3, r4, r5, pc}
 8007f2c:	b118      	cbz	r0, 8007f36 <_fflush_r+0x1a>
 8007f2e:	6983      	ldr	r3, [r0, #24]
 8007f30:	b90b      	cbnz	r3, 8007f36 <_fflush_r+0x1a>
 8007f32:	f000 f887 	bl	8008044 <__sinit>
 8007f36:	4b14      	ldr	r3, [pc, #80]	; (8007f88 <_fflush_r+0x6c>)
 8007f38:	429c      	cmp	r4, r3
 8007f3a:	d11b      	bne.n	8007f74 <_fflush_r+0x58>
 8007f3c:	686c      	ldr	r4, [r5, #4]
 8007f3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d0ef      	beq.n	8007f26 <_fflush_r+0xa>
 8007f46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f48:	07d0      	lsls	r0, r2, #31
 8007f4a:	d404      	bmi.n	8007f56 <_fflush_r+0x3a>
 8007f4c:	0599      	lsls	r1, r3, #22
 8007f4e:	d402      	bmi.n	8007f56 <_fflush_r+0x3a>
 8007f50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f52:	f000 f915 	bl	8008180 <__retarget_lock_acquire_recursive>
 8007f56:	4628      	mov	r0, r5
 8007f58:	4621      	mov	r1, r4
 8007f5a:	f7ff ff59 	bl	8007e10 <__sflush_r>
 8007f5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f60:	07da      	lsls	r2, r3, #31
 8007f62:	4605      	mov	r5, r0
 8007f64:	d4e0      	bmi.n	8007f28 <_fflush_r+0xc>
 8007f66:	89a3      	ldrh	r3, [r4, #12]
 8007f68:	059b      	lsls	r3, r3, #22
 8007f6a:	d4dd      	bmi.n	8007f28 <_fflush_r+0xc>
 8007f6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f6e:	f000 f908 	bl	8008182 <__retarget_lock_release_recursive>
 8007f72:	e7d9      	b.n	8007f28 <_fflush_r+0xc>
 8007f74:	4b05      	ldr	r3, [pc, #20]	; (8007f8c <_fflush_r+0x70>)
 8007f76:	429c      	cmp	r4, r3
 8007f78:	d101      	bne.n	8007f7e <_fflush_r+0x62>
 8007f7a:	68ac      	ldr	r4, [r5, #8]
 8007f7c:	e7df      	b.n	8007f3e <_fflush_r+0x22>
 8007f7e:	4b04      	ldr	r3, [pc, #16]	; (8007f90 <_fflush_r+0x74>)
 8007f80:	429c      	cmp	r4, r3
 8007f82:	bf08      	it	eq
 8007f84:	68ec      	ldreq	r4, [r5, #12]
 8007f86:	e7da      	b.n	8007f3e <_fflush_r+0x22>
 8007f88:	0800865c 	.word	0x0800865c
 8007f8c:	0800867c 	.word	0x0800867c
 8007f90:	0800863c 	.word	0x0800863c

08007f94 <std>:
 8007f94:	2300      	movs	r3, #0
 8007f96:	b510      	push	{r4, lr}
 8007f98:	4604      	mov	r4, r0
 8007f9a:	e9c0 3300 	strd	r3, r3, [r0]
 8007f9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fa2:	6083      	str	r3, [r0, #8]
 8007fa4:	8181      	strh	r1, [r0, #12]
 8007fa6:	6643      	str	r3, [r0, #100]	; 0x64
 8007fa8:	81c2      	strh	r2, [r0, #14]
 8007faa:	6183      	str	r3, [r0, #24]
 8007fac:	4619      	mov	r1, r3
 8007fae:	2208      	movs	r2, #8
 8007fb0:	305c      	adds	r0, #92	; 0x5c
 8007fb2:	f7ff fdef 	bl	8007b94 <memset>
 8007fb6:	4b05      	ldr	r3, [pc, #20]	; (8007fcc <std+0x38>)
 8007fb8:	6263      	str	r3, [r4, #36]	; 0x24
 8007fba:	4b05      	ldr	r3, [pc, #20]	; (8007fd0 <std+0x3c>)
 8007fbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8007fbe:	4b05      	ldr	r3, [pc, #20]	; (8007fd4 <std+0x40>)
 8007fc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007fc2:	4b05      	ldr	r3, [pc, #20]	; (8007fd8 <std+0x44>)
 8007fc4:	6224      	str	r4, [r4, #32]
 8007fc6:	6323      	str	r3, [r4, #48]	; 0x30
 8007fc8:	bd10      	pop	{r4, pc}
 8007fca:	bf00      	nop
 8007fcc:	08008431 	.word	0x08008431
 8007fd0:	08008453 	.word	0x08008453
 8007fd4:	0800848b 	.word	0x0800848b
 8007fd8:	080084af 	.word	0x080084af

08007fdc <_cleanup_r>:
 8007fdc:	4901      	ldr	r1, [pc, #4]	; (8007fe4 <_cleanup_r+0x8>)
 8007fde:	f000 b8af 	b.w	8008140 <_fwalk_reent>
 8007fe2:	bf00      	nop
 8007fe4:	08007f1d 	.word	0x08007f1d

08007fe8 <__sfmoreglue>:
 8007fe8:	b570      	push	{r4, r5, r6, lr}
 8007fea:	2268      	movs	r2, #104	; 0x68
 8007fec:	1e4d      	subs	r5, r1, #1
 8007fee:	4355      	muls	r5, r2
 8007ff0:	460e      	mov	r6, r1
 8007ff2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007ff6:	f000 f997 	bl	8008328 <_malloc_r>
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	b140      	cbz	r0, 8008010 <__sfmoreglue+0x28>
 8007ffe:	2100      	movs	r1, #0
 8008000:	e9c0 1600 	strd	r1, r6, [r0]
 8008004:	300c      	adds	r0, #12
 8008006:	60a0      	str	r0, [r4, #8]
 8008008:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800800c:	f7ff fdc2 	bl	8007b94 <memset>
 8008010:	4620      	mov	r0, r4
 8008012:	bd70      	pop	{r4, r5, r6, pc}

08008014 <__sfp_lock_acquire>:
 8008014:	4801      	ldr	r0, [pc, #4]	; (800801c <__sfp_lock_acquire+0x8>)
 8008016:	f000 b8b3 	b.w	8008180 <__retarget_lock_acquire_recursive>
 800801a:	bf00      	nop
 800801c:	20000729 	.word	0x20000729

08008020 <__sfp_lock_release>:
 8008020:	4801      	ldr	r0, [pc, #4]	; (8008028 <__sfp_lock_release+0x8>)
 8008022:	f000 b8ae 	b.w	8008182 <__retarget_lock_release_recursive>
 8008026:	bf00      	nop
 8008028:	20000729 	.word	0x20000729

0800802c <__sinit_lock_acquire>:
 800802c:	4801      	ldr	r0, [pc, #4]	; (8008034 <__sinit_lock_acquire+0x8>)
 800802e:	f000 b8a7 	b.w	8008180 <__retarget_lock_acquire_recursive>
 8008032:	bf00      	nop
 8008034:	2000072a 	.word	0x2000072a

08008038 <__sinit_lock_release>:
 8008038:	4801      	ldr	r0, [pc, #4]	; (8008040 <__sinit_lock_release+0x8>)
 800803a:	f000 b8a2 	b.w	8008182 <__retarget_lock_release_recursive>
 800803e:	bf00      	nop
 8008040:	2000072a 	.word	0x2000072a

08008044 <__sinit>:
 8008044:	b510      	push	{r4, lr}
 8008046:	4604      	mov	r4, r0
 8008048:	f7ff fff0 	bl	800802c <__sinit_lock_acquire>
 800804c:	69a3      	ldr	r3, [r4, #24]
 800804e:	b11b      	cbz	r3, 8008058 <__sinit+0x14>
 8008050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008054:	f7ff bff0 	b.w	8008038 <__sinit_lock_release>
 8008058:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800805c:	6523      	str	r3, [r4, #80]	; 0x50
 800805e:	4b13      	ldr	r3, [pc, #76]	; (80080ac <__sinit+0x68>)
 8008060:	4a13      	ldr	r2, [pc, #76]	; (80080b0 <__sinit+0x6c>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	62a2      	str	r2, [r4, #40]	; 0x28
 8008066:	42a3      	cmp	r3, r4
 8008068:	bf04      	itt	eq
 800806a:	2301      	moveq	r3, #1
 800806c:	61a3      	streq	r3, [r4, #24]
 800806e:	4620      	mov	r0, r4
 8008070:	f000 f820 	bl	80080b4 <__sfp>
 8008074:	6060      	str	r0, [r4, #4]
 8008076:	4620      	mov	r0, r4
 8008078:	f000 f81c 	bl	80080b4 <__sfp>
 800807c:	60a0      	str	r0, [r4, #8]
 800807e:	4620      	mov	r0, r4
 8008080:	f000 f818 	bl	80080b4 <__sfp>
 8008084:	2200      	movs	r2, #0
 8008086:	60e0      	str	r0, [r4, #12]
 8008088:	2104      	movs	r1, #4
 800808a:	6860      	ldr	r0, [r4, #4]
 800808c:	f7ff ff82 	bl	8007f94 <std>
 8008090:	68a0      	ldr	r0, [r4, #8]
 8008092:	2201      	movs	r2, #1
 8008094:	2109      	movs	r1, #9
 8008096:	f7ff ff7d 	bl	8007f94 <std>
 800809a:	68e0      	ldr	r0, [r4, #12]
 800809c:	2202      	movs	r2, #2
 800809e:	2112      	movs	r1, #18
 80080a0:	f7ff ff78 	bl	8007f94 <std>
 80080a4:	2301      	movs	r3, #1
 80080a6:	61a3      	str	r3, [r4, #24]
 80080a8:	e7d2      	b.n	8008050 <__sinit+0xc>
 80080aa:	bf00      	nop
 80080ac:	08008638 	.word	0x08008638
 80080b0:	08007fdd 	.word	0x08007fdd

080080b4 <__sfp>:
 80080b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080b6:	4607      	mov	r7, r0
 80080b8:	f7ff ffac 	bl	8008014 <__sfp_lock_acquire>
 80080bc:	4b1e      	ldr	r3, [pc, #120]	; (8008138 <__sfp+0x84>)
 80080be:	681e      	ldr	r6, [r3, #0]
 80080c0:	69b3      	ldr	r3, [r6, #24]
 80080c2:	b913      	cbnz	r3, 80080ca <__sfp+0x16>
 80080c4:	4630      	mov	r0, r6
 80080c6:	f7ff ffbd 	bl	8008044 <__sinit>
 80080ca:	3648      	adds	r6, #72	; 0x48
 80080cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80080d0:	3b01      	subs	r3, #1
 80080d2:	d503      	bpl.n	80080dc <__sfp+0x28>
 80080d4:	6833      	ldr	r3, [r6, #0]
 80080d6:	b30b      	cbz	r3, 800811c <__sfp+0x68>
 80080d8:	6836      	ldr	r6, [r6, #0]
 80080da:	e7f7      	b.n	80080cc <__sfp+0x18>
 80080dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80080e0:	b9d5      	cbnz	r5, 8008118 <__sfp+0x64>
 80080e2:	4b16      	ldr	r3, [pc, #88]	; (800813c <__sfp+0x88>)
 80080e4:	60e3      	str	r3, [r4, #12]
 80080e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80080ea:	6665      	str	r5, [r4, #100]	; 0x64
 80080ec:	f000 f847 	bl	800817e <__retarget_lock_init_recursive>
 80080f0:	f7ff ff96 	bl	8008020 <__sfp_lock_release>
 80080f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80080f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80080fc:	6025      	str	r5, [r4, #0]
 80080fe:	61a5      	str	r5, [r4, #24]
 8008100:	2208      	movs	r2, #8
 8008102:	4629      	mov	r1, r5
 8008104:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008108:	f7ff fd44 	bl	8007b94 <memset>
 800810c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008110:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008114:	4620      	mov	r0, r4
 8008116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008118:	3468      	adds	r4, #104	; 0x68
 800811a:	e7d9      	b.n	80080d0 <__sfp+0x1c>
 800811c:	2104      	movs	r1, #4
 800811e:	4638      	mov	r0, r7
 8008120:	f7ff ff62 	bl	8007fe8 <__sfmoreglue>
 8008124:	4604      	mov	r4, r0
 8008126:	6030      	str	r0, [r6, #0]
 8008128:	2800      	cmp	r0, #0
 800812a:	d1d5      	bne.n	80080d8 <__sfp+0x24>
 800812c:	f7ff ff78 	bl	8008020 <__sfp_lock_release>
 8008130:	230c      	movs	r3, #12
 8008132:	603b      	str	r3, [r7, #0]
 8008134:	e7ee      	b.n	8008114 <__sfp+0x60>
 8008136:	bf00      	nop
 8008138:	08008638 	.word	0x08008638
 800813c:	ffff0001 	.word	0xffff0001

08008140 <_fwalk_reent>:
 8008140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008144:	4606      	mov	r6, r0
 8008146:	4688      	mov	r8, r1
 8008148:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800814c:	2700      	movs	r7, #0
 800814e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008152:	f1b9 0901 	subs.w	r9, r9, #1
 8008156:	d505      	bpl.n	8008164 <_fwalk_reent+0x24>
 8008158:	6824      	ldr	r4, [r4, #0]
 800815a:	2c00      	cmp	r4, #0
 800815c:	d1f7      	bne.n	800814e <_fwalk_reent+0xe>
 800815e:	4638      	mov	r0, r7
 8008160:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008164:	89ab      	ldrh	r3, [r5, #12]
 8008166:	2b01      	cmp	r3, #1
 8008168:	d907      	bls.n	800817a <_fwalk_reent+0x3a>
 800816a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800816e:	3301      	adds	r3, #1
 8008170:	d003      	beq.n	800817a <_fwalk_reent+0x3a>
 8008172:	4629      	mov	r1, r5
 8008174:	4630      	mov	r0, r6
 8008176:	47c0      	blx	r8
 8008178:	4307      	orrs	r7, r0
 800817a:	3568      	adds	r5, #104	; 0x68
 800817c:	e7e9      	b.n	8008152 <_fwalk_reent+0x12>

0800817e <__retarget_lock_init_recursive>:
 800817e:	4770      	bx	lr

08008180 <__retarget_lock_acquire_recursive>:
 8008180:	4770      	bx	lr

08008182 <__retarget_lock_release_recursive>:
 8008182:	4770      	bx	lr

08008184 <__swhatbuf_r>:
 8008184:	b570      	push	{r4, r5, r6, lr}
 8008186:	460e      	mov	r6, r1
 8008188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800818c:	2900      	cmp	r1, #0
 800818e:	b096      	sub	sp, #88	; 0x58
 8008190:	4614      	mov	r4, r2
 8008192:	461d      	mov	r5, r3
 8008194:	da08      	bge.n	80081a8 <__swhatbuf_r+0x24>
 8008196:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	602a      	str	r2, [r5, #0]
 800819e:	061a      	lsls	r2, r3, #24
 80081a0:	d410      	bmi.n	80081c4 <__swhatbuf_r+0x40>
 80081a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081a6:	e00e      	b.n	80081c6 <__swhatbuf_r+0x42>
 80081a8:	466a      	mov	r2, sp
 80081aa:	f000 f9a7 	bl	80084fc <_fstat_r>
 80081ae:	2800      	cmp	r0, #0
 80081b0:	dbf1      	blt.n	8008196 <__swhatbuf_r+0x12>
 80081b2:	9a01      	ldr	r2, [sp, #4]
 80081b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80081b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80081bc:	425a      	negs	r2, r3
 80081be:	415a      	adcs	r2, r3
 80081c0:	602a      	str	r2, [r5, #0]
 80081c2:	e7ee      	b.n	80081a2 <__swhatbuf_r+0x1e>
 80081c4:	2340      	movs	r3, #64	; 0x40
 80081c6:	2000      	movs	r0, #0
 80081c8:	6023      	str	r3, [r4, #0]
 80081ca:	b016      	add	sp, #88	; 0x58
 80081cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080081d0 <__smakebuf_r>:
 80081d0:	898b      	ldrh	r3, [r1, #12]
 80081d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081d4:	079d      	lsls	r5, r3, #30
 80081d6:	4606      	mov	r6, r0
 80081d8:	460c      	mov	r4, r1
 80081da:	d507      	bpl.n	80081ec <__smakebuf_r+0x1c>
 80081dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80081e0:	6023      	str	r3, [r4, #0]
 80081e2:	6123      	str	r3, [r4, #16]
 80081e4:	2301      	movs	r3, #1
 80081e6:	6163      	str	r3, [r4, #20]
 80081e8:	b002      	add	sp, #8
 80081ea:	bd70      	pop	{r4, r5, r6, pc}
 80081ec:	ab01      	add	r3, sp, #4
 80081ee:	466a      	mov	r2, sp
 80081f0:	f7ff ffc8 	bl	8008184 <__swhatbuf_r>
 80081f4:	9900      	ldr	r1, [sp, #0]
 80081f6:	4605      	mov	r5, r0
 80081f8:	4630      	mov	r0, r6
 80081fa:	f000 f895 	bl	8008328 <_malloc_r>
 80081fe:	b948      	cbnz	r0, 8008214 <__smakebuf_r+0x44>
 8008200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008204:	059a      	lsls	r2, r3, #22
 8008206:	d4ef      	bmi.n	80081e8 <__smakebuf_r+0x18>
 8008208:	f023 0303 	bic.w	r3, r3, #3
 800820c:	f043 0302 	orr.w	r3, r3, #2
 8008210:	81a3      	strh	r3, [r4, #12]
 8008212:	e7e3      	b.n	80081dc <__smakebuf_r+0xc>
 8008214:	4b0d      	ldr	r3, [pc, #52]	; (800824c <__smakebuf_r+0x7c>)
 8008216:	62b3      	str	r3, [r6, #40]	; 0x28
 8008218:	89a3      	ldrh	r3, [r4, #12]
 800821a:	6020      	str	r0, [r4, #0]
 800821c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008220:	81a3      	strh	r3, [r4, #12]
 8008222:	9b00      	ldr	r3, [sp, #0]
 8008224:	6163      	str	r3, [r4, #20]
 8008226:	9b01      	ldr	r3, [sp, #4]
 8008228:	6120      	str	r0, [r4, #16]
 800822a:	b15b      	cbz	r3, 8008244 <__smakebuf_r+0x74>
 800822c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008230:	4630      	mov	r0, r6
 8008232:	f000 f975 	bl	8008520 <_isatty_r>
 8008236:	b128      	cbz	r0, 8008244 <__smakebuf_r+0x74>
 8008238:	89a3      	ldrh	r3, [r4, #12]
 800823a:	f023 0303 	bic.w	r3, r3, #3
 800823e:	f043 0301 	orr.w	r3, r3, #1
 8008242:	81a3      	strh	r3, [r4, #12]
 8008244:	89a0      	ldrh	r0, [r4, #12]
 8008246:	4305      	orrs	r5, r0
 8008248:	81a5      	strh	r5, [r4, #12]
 800824a:	e7cd      	b.n	80081e8 <__smakebuf_r+0x18>
 800824c:	08007fdd 	.word	0x08007fdd

08008250 <_free_r>:
 8008250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008252:	2900      	cmp	r1, #0
 8008254:	d044      	beq.n	80082e0 <_free_r+0x90>
 8008256:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800825a:	9001      	str	r0, [sp, #4]
 800825c:	2b00      	cmp	r3, #0
 800825e:	f1a1 0404 	sub.w	r4, r1, #4
 8008262:	bfb8      	it	lt
 8008264:	18e4      	addlt	r4, r4, r3
 8008266:	f000 f97d 	bl	8008564 <__malloc_lock>
 800826a:	4a1e      	ldr	r2, [pc, #120]	; (80082e4 <_free_r+0x94>)
 800826c:	9801      	ldr	r0, [sp, #4]
 800826e:	6813      	ldr	r3, [r2, #0]
 8008270:	b933      	cbnz	r3, 8008280 <_free_r+0x30>
 8008272:	6063      	str	r3, [r4, #4]
 8008274:	6014      	str	r4, [r2, #0]
 8008276:	b003      	add	sp, #12
 8008278:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800827c:	f000 b978 	b.w	8008570 <__malloc_unlock>
 8008280:	42a3      	cmp	r3, r4
 8008282:	d908      	bls.n	8008296 <_free_r+0x46>
 8008284:	6825      	ldr	r5, [r4, #0]
 8008286:	1961      	adds	r1, r4, r5
 8008288:	428b      	cmp	r3, r1
 800828a:	bf01      	itttt	eq
 800828c:	6819      	ldreq	r1, [r3, #0]
 800828e:	685b      	ldreq	r3, [r3, #4]
 8008290:	1949      	addeq	r1, r1, r5
 8008292:	6021      	streq	r1, [r4, #0]
 8008294:	e7ed      	b.n	8008272 <_free_r+0x22>
 8008296:	461a      	mov	r2, r3
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	b10b      	cbz	r3, 80082a0 <_free_r+0x50>
 800829c:	42a3      	cmp	r3, r4
 800829e:	d9fa      	bls.n	8008296 <_free_r+0x46>
 80082a0:	6811      	ldr	r1, [r2, #0]
 80082a2:	1855      	adds	r5, r2, r1
 80082a4:	42a5      	cmp	r5, r4
 80082a6:	d10b      	bne.n	80082c0 <_free_r+0x70>
 80082a8:	6824      	ldr	r4, [r4, #0]
 80082aa:	4421      	add	r1, r4
 80082ac:	1854      	adds	r4, r2, r1
 80082ae:	42a3      	cmp	r3, r4
 80082b0:	6011      	str	r1, [r2, #0]
 80082b2:	d1e0      	bne.n	8008276 <_free_r+0x26>
 80082b4:	681c      	ldr	r4, [r3, #0]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	6053      	str	r3, [r2, #4]
 80082ba:	4421      	add	r1, r4
 80082bc:	6011      	str	r1, [r2, #0]
 80082be:	e7da      	b.n	8008276 <_free_r+0x26>
 80082c0:	d902      	bls.n	80082c8 <_free_r+0x78>
 80082c2:	230c      	movs	r3, #12
 80082c4:	6003      	str	r3, [r0, #0]
 80082c6:	e7d6      	b.n	8008276 <_free_r+0x26>
 80082c8:	6825      	ldr	r5, [r4, #0]
 80082ca:	1961      	adds	r1, r4, r5
 80082cc:	428b      	cmp	r3, r1
 80082ce:	bf04      	itt	eq
 80082d0:	6819      	ldreq	r1, [r3, #0]
 80082d2:	685b      	ldreq	r3, [r3, #4]
 80082d4:	6063      	str	r3, [r4, #4]
 80082d6:	bf04      	itt	eq
 80082d8:	1949      	addeq	r1, r1, r5
 80082da:	6021      	streq	r1, [r4, #0]
 80082dc:	6054      	str	r4, [r2, #4]
 80082de:	e7ca      	b.n	8008276 <_free_r+0x26>
 80082e0:	b003      	add	sp, #12
 80082e2:	bd30      	pop	{r4, r5, pc}
 80082e4:	2000072c 	.word	0x2000072c

080082e8 <sbrk_aligned>:
 80082e8:	b570      	push	{r4, r5, r6, lr}
 80082ea:	4e0e      	ldr	r6, [pc, #56]	; (8008324 <sbrk_aligned+0x3c>)
 80082ec:	460c      	mov	r4, r1
 80082ee:	6831      	ldr	r1, [r6, #0]
 80082f0:	4605      	mov	r5, r0
 80082f2:	b911      	cbnz	r1, 80082fa <sbrk_aligned+0x12>
 80082f4:	f000 f88c 	bl	8008410 <_sbrk_r>
 80082f8:	6030      	str	r0, [r6, #0]
 80082fa:	4621      	mov	r1, r4
 80082fc:	4628      	mov	r0, r5
 80082fe:	f000 f887 	bl	8008410 <_sbrk_r>
 8008302:	1c43      	adds	r3, r0, #1
 8008304:	d00a      	beq.n	800831c <sbrk_aligned+0x34>
 8008306:	1cc4      	adds	r4, r0, #3
 8008308:	f024 0403 	bic.w	r4, r4, #3
 800830c:	42a0      	cmp	r0, r4
 800830e:	d007      	beq.n	8008320 <sbrk_aligned+0x38>
 8008310:	1a21      	subs	r1, r4, r0
 8008312:	4628      	mov	r0, r5
 8008314:	f000 f87c 	bl	8008410 <_sbrk_r>
 8008318:	3001      	adds	r0, #1
 800831a:	d101      	bne.n	8008320 <sbrk_aligned+0x38>
 800831c:	f04f 34ff 	mov.w	r4, #4294967295
 8008320:	4620      	mov	r0, r4
 8008322:	bd70      	pop	{r4, r5, r6, pc}
 8008324:	20000730 	.word	0x20000730

08008328 <_malloc_r>:
 8008328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800832c:	1ccd      	adds	r5, r1, #3
 800832e:	f025 0503 	bic.w	r5, r5, #3
 8008332:	3508      	adds	r5, #8
 8008334:	2d0c      	cmp	r5, #12
 8008336:	bf38      	it	cc
 8008338:	250c      	movcc	r5, #12
 800833a:	2d00      	cmp	r5, #0
 800833c:	4607      	mov	r7, r0
 800833e:	db01      	blt.n	8008344 <_malloc_r+0x1c>
 8008340:	42a9      	cmp	r1, r5
 8008342:	d905      	bls.n	8008350 <_malloc_r+0x28>
 8008344:	230c      	movs	r3, #12
 8008346:	603b      	str	r3, [r7, #0]
 8008348:	2600      	movs	r6, #0
 800834a:	4630      	mov	r0, r6
 800834c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008350:	4e2e      	ldr	r6, [pc, #184]	; (800840c <_malloc_r+0xe4>)
 8008352:	f000 f907 	bl	8008564 <__malloc_lock>
 8008356:	6833      	ldr	r3, [r6, #0]
 8008358:	461c      	mov	r4, r3
 800835a:	bb34      	cbnz	r4, 80083aa <_malloc_r+0x82>
 800835c:	4629      	mov	r1, r5
 800835e:	4638      	mov	r0, r7
 8008360:	f7ff ffc2 	bl	80082e8 <sbrk_aligned>
 8008364:	1c43      	adds	r3, r0, #1
 8008366:	4604      	mov	r4, r0
 8008368:	d14d      	bne.n	8008406 <_malloc_r+0xde>
 800836a:	6834      	ldr	r4, [r6, #0]
 800836c:	4626      	mov	r6, r4
 800836e:	2e00      	cmp	r6, #0
 8008370:	d140      	bne.n	80083f4 <_malloc_r+0xcc>
 8008372:	6823      	ldr	r3, [r4, #0]
 8008374:	4631      	mov	r1, r6
 8008376:	4638      	mov	r0, r7
 8008378:	eb04 0803 	add.w	r8, r4, r3
 800837c:	f000 f848 	bl	8008410 <_sbrk_r>
 8008380:	4580      	cmp	r8, r0
 8008382:	d13a      	bne.n	80083fa <_malloc_r+0xd2>
 8008384:	6821      	ldr	r1, [r4, #0]
 8008386:	3503      	adds	r5, #3
 8008388:	1a6d      	subs	r5, r5, r1
 800838a:	f025 0503 	bic.w	r5, r5, #3
 800838e:	3508      	adds	r5, #8
 8008390:	2d0c      	cmp	r5, #12
 8008392:	bf38      	it	cc
 8008394:	250c      	movcc	r5, #12
 8008396:	4629      	mov	r1, r5
 8008398:	4638      	mov	r0, r7
 800839a:	f7ff ffa5 	bl	80082e8 <sbrk_aligned>
 800839e:	3001      	adds	r0, #1
 80083a0:	d02b      	beq.n	80083fa <_malloc_r+0xd2>
 80083a2:	6823      	ldr	r3, [r4, #0]
 80083a4:	442b      	add	r3, r5
 80083a6:	6023      	str	r3, [r4, #0]
 80083a8:	e00e      	b.n	80083c8 <_malloc_r+0xa0>
 80083aa:	6822      	ldr	r2, [r4, #0]
 80083ac:	1b52      	subs	r2, r2, r5
 80083ae:	d41e      	bmi.n	80083ee <_malloc_r+0xc6>
 80083b0:	2a0b      	cmp	r2, #11
 80083b2:	d916      	bls.n	80083e2 <_malloc_r+0xba>
 80083b4:	1961      	adds	r1, r4, r5
 80083b6:	42a3      	cmp	r3, r4
 80083b8:	6025      	str	r5, [r4, #0]
 80083ba:	bf18      	it	ne
 80083bc:	6059      	strne	r1, [r3, #4]
 80083be:	6863      	ldr	r3, [r4, #4]
 80083c0:	bf08      	it	eq
 80083c2:	6031      	streq	r1, [r6, #0]
 80083c4:	5162      	str	r2, [r4, r5]
 80083c6:	604b      	str	r3, [r1, #4]
 80083c8:	4638      	mov	r0, r7
 80083ca:	f104 060b 	add.w	r6, r4, #11
 80083ce:	f000 f8cf 	bl	8008570 <__malloc_unlock>
 80083d2:	f026 0607 	bic.w	r6, r6, #7
 80083d6:	1d23      	adds	r3, r4, #4
 80083d8:	1af2      	subs	r2, r6, r3
 80083da:	d0b6      	beq.n	800834a <_malloc_r+0x22>
 80083dc:	1b9b      	subs	r3, r3, r6
 80083de:	50a3      	str	r3, [r4, r2]
 80083e0:	e7b3      	b.n	800834a <_malloc_r+0x22>
 80083e2:	6862      	ldr	r2, [r4, #4]
 80083e4:	42a3      	cmp	r3, r4
 80083e6:	bf0c      	ite	eq
 80083e8:	6032      	streq	r2, [r6, #0]
 80083ea:	605a      	strne	r2, [r3, #4]
 80083ec:	e7ec      	b.n	80083c8 <_malloc_r+0xa0>
 80083ee:	4623      	mov	r3, r4
 80083f0:	6864      	ldr	r4, [r4, #4]
 80083f2:	e7b2      	b.n	800835a <_malloc_r+0x32>
 80083f4:	4634      	mov	r4, r6
 80083f6:	6876      	ldr	r6, [r6, #4]
 80083f8:	e7b9      	b.n	800836e <_malloc_r+0x46>
 80083fa:	230c      	movs	r3, #12
 80083fc:	603b      	str	r3, [r7, #0]
 80083fe:	4638      	mov	r0, r7
 8008400:	f000 f8b6 	bl	8008570 <__malloc_unlock>
 8008404:	e7a1      	b.n	800834a <_malloc_r+0x22>
 8008406:	6025      	str	r5, [r4, #0]
 8008408:	e7de      	b.n	80083c8 <_malloc_r+0xa0>
 800840a:	bf00      	nop
 800840c:	2000072c 	.word	0x2000072c

08008410 <_sbrk_r>:
 8008410:	b538      	push	{r3, r4, r5, lr}
 8008412:	4d06      	ldr	r5, [pc, #24]	; (800842c <_sbrk_r+0x1c>)
 8008414:	2300      	movs	r3, #0
 8008416:	4604      	mov	r4, r0
 8008418:	4608      	mov	r0, r1
 800841a:	602b      	str	r3, [r5, #0]
 800841c:	f7fa fc6a 	bl	8002cf4 <_sbrk>
 8008420:	1c43      	adds	r3, r0, #1
 8008422:	d102      	bne.n	800842a <_sbrk_r+0x1a>
 8008424:	682b      	ldr	r3, [r5, #0]
 8008426:	b103      	cbz	r3, 800842a <_sbrk_r+0x1a>
 8008428:	6023      	str	r3, [r4, #0]
 800842a:	bd38      	pop	{r3, r4, r5, pc}
 800842c:	20000734 	.word	0x20000734

08008430 <__sread>:
 8008430:	b510      	push	{r4, lr}
 8008432:	460c      	mov	r4, r1
 8008434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008438:	f000 f8a0 	bl	800857c <_read_r>
 800843c:	2800      	cmp	r0, #0
 800843e:	bfab      	itete	ge
 8008440:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008442:	89a3      	ldrhlt	r3, [r4, #12]
 8008444:	181b      	addge	r3, r3, r0
 8008446:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800844a:	bfac      	ite	ge
 800844c:	6563      	strge	r3, [r4, #84]	; 0x54
 800844e:	81a3      	strhlt	r3, [r4, #12]
 8008450:	bd10      	pop	{r4, pc}

08008452 <__swrite>:
 8008452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008456:	461f      	mov	r7, r3
 8008458:	898b      	ldrh	r3, [r1, #12]
 800845a:	05db      	lsls	r3, r3, #23
 800845c:	4605      	mov	r5, r0
 800845e:	460c      	mov	r4, r1
 8008460:	4616      	mov	r6, r2
 8008462:	d505      	bpl.n	8008470 <__swrite+0x1e>
 8008464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008468:	2302      	movs	r3, #2
 800846a:	2200      	movs	r2, #0
 800846c:	f000 f868 	bl	8008540 <_lseek_r>
 8008470:	89a3      	ldrh	r3, [r4, #12]
 8008472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008476:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800847a:	81a3      	strh	r3, [r4, #12]
 800847c:	4632      	mov	r2, r6
 800847e:	463b      	mov	r3, r7
 8008480:	4628      	mov	r0, r5
 8008482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008486:	f000 b817 	b.w	80084b8 <_write_r>

0800848a <__sseek>:
 800848a:	b510      	push	{r4, lr}
 800848c:	460c      	mov	r4, r1
 800848e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008492:	f000 f855 	bl	8008540 <_lseek_r>
 8008496:	1c43      	adds	r3, r0, #1
 8008498:	89a3      	ldrh	r3, [r4, #12]
 800849a:	bf15      	itete	ne
 800849c:	6560      	strne	r0, [r4, #84]	; 0x54
 800849e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80084a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80084a6:	81a3      	strheq	r3, [r4, #12]
 80084a8:	bf18      	it	ne
 80084aa:	81a3      	strhne	r3, [r4, #12]
 80084ac:	bd10      	pop	{r4, pc}

080084ae <__sclose>:
 80084ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084b2:	f000 b813 	b.w	80084dc <_close_r>
	...

080084b8 <_write_r>:
 80084b8:	b538      	push	{r3, r4, r5, lr}
 80084ba:	4d07      	ldr	r5, [pc, #28]	; (80084d8 <_write_r+0x20>)
 80084bc:	4604      	mov	r4, r0
 80084be:	4608      	mov	r0, r1
 80084c0:	4611      	mov	r1, r2
 80084c2:	2200      	movs	r2, #0
 80084c4:	602a      	str	r2, [r5, #0]
 80084c6:	461a      	mov	r2, r3
 80084c8:	f7fa fbc3 	bl	8002c52 <_write>
 80084cc:	1c43      	adds	r3, r0, #1
 80084ce:	d102      	bne.n	80084d6 <_write_r+0x1e>
 80084d0:	682b      	ldr	r3, [r5, #0]
 80084d2:	b103      	cbz	r3, 80084d6 <_write_r+0x1e>
 80084d4:	6023      	str	r3, [r4, #0]
 80084d6:	bd38      	pop	{r3, r4, r5, pc}
 80084d8:	20000734 	.word	0x20000734

080084dc <_close_r>:
 80084dc:	b538      	push	{r3, r4, r5, lr}
 80084de:	4d06      	ldr	r5, [pc, #24]	; (80084f8 <_close_r+0x1c>)
 80084e0:	2300      	movs	r3, #0
 80084e2:	4604      	mov	r4, r0
 80084e4:	4608      	mov	r0, r1
 80084e6:	602b      	str	r3, [r5, #0]
 80084e8:	f7fa fbcf 	bl	8002c8a <_close>
 80084ec:	1c43      	adds	r3, r0, #1
 80084ee:	d102      	bne.n	80084f6 <_close_r+0x1a>
 80084f0:	682b      	ldr	r3, [r5, #0]
 80084f2:	b103      	cbz	r3, 80084f6 <_close_r+0x1a>
 80084f4:	6023      	str	r3, [r4, #0]
 80084f6:	bd38      	pop	{r3, r4, r5, pc}
 80084f8:	20000734 	.word	0x20000734

080084fc <_fstat_r>:
 80084fc:	b538      	push	{r3, r4, r5, lr}
 80084fe:	4d07      	ldr	r5, [pc, #28]	; (800851c <_fstat_r+0x20>)
 8008500:	2300      	movs	r3, #0
 8008502:	4604      	mov	r4, r0
 8008504:	4608      	mov	r0, r1
 8008506:	4611      	mov	r1, r2
 8008508:	602b      	str	r3, [r5, #0]
 800850a:	f7fa fbca 	bl	8002ca2 <_fstat>
 800850e:	1c43      	adds	r3, r0, #1
 8008510:	d102      	bne.n	8008518 <_fstat_r+0x1c>
 8008512:	682b      	ldr	r3, [r5, #0]
 8008514:	b103      	cbz	r3, 8008518 <_fstat_r+0x1c>
 8008516:	6023      	str	r3, [r4, #0]
 8008518:	bd38      	pop	{r3, r4, r5, pc}
 800851a:	bf00      	nop
 800851c:	20000734 	.word	0x20000734

08008520 <_isatty_r>:
 8008520:	b538      	push	{r3, r4, r5, lr}
 8008522:	4d06      	ldr	r5, [pc, #24]	; (800853c <_isatty_r+0x1c>)
 8008524:	2300      	movs	r3, #0
 8008526:	4604      	mov	r4, r0
 8008528:	4608      	mov	r0, r1
 800852a:	602b      	str	r3, [r5, #0]
 800852c:	f7fa fbc9 	bl	8002cc2 <_isatty>
 8008530:	1c43      	adds	r3, r0, #1
 8008532:	d102      	bne.n	800853a <_isatty_r+0x1a>
 8008534:	682b      	ldr	r3, [r5, #0]
 8008536:	b103      	cbz	r3, 800853a <_isatty_r+0x1a>
 8008538:	6023      	str	r3, [r4, #0]
 800853a:	bd38      	pop	{r3, r4, r5, pc}
 800853c:	20000734 	.word	0x20000734

08008540 <_lseek_r>:
 8008540:	b538      	push	{r3, r4, r5, lr}
 8008542:	4d07      	ldr	r5, [pc, #28]	; (8008560 <_lseek_r+0x20>)
 8008544:	4604      	mov	r4, r0
 8008546:	4608      	mov	r0, r1
 8008548:	4611      	mov	r1, r2
 800854a:	2200      	movs	r2, #0
 800854c:	602a      	str	r2, [r5, #0]
 800854e:	461a      	mov	r2, r3
 8008550:	f7fa fbc2 	bl	8002cd8 <_lseek>
 8008554:	1c43      	adds	r3, r0, #1
 8008556:	d102      	bne.n	800855e <_lseek_r+0x1e>
 8008558:	682b      	ldr	r3, [r5, #0]
 800855a:	b103      	cbz	r3, 800855e <_lseek_r+0x1e>
 800855c:	6023      	str	r3, [r4, #0]
 800855e:	bd38      	pop	{r3, r4, r5, pc}
 8008560:	20000734 	.word	0x20000734

08008564 <__malloc_lock>:
 8008564:	4801      	ldr	r0, [pc, #4]	; (800856c <__malloc_lock+0x8>)
 8008566:	f7ff be0b 	b.w	8008180 <__retarget_lock_acquire_recursive>
 800856a:	bf00      	nop
 800856c:	20000728 	.word	0x20000728

08008570 <__malloc_unlock>:
 8008570:	4801      	ldr	r0, [pc, #4]	; (8008578 <__malloc_unlock+0x8>)
 8008572:	f7ff be06 	b.w	8008182 <__retarget_lock_release_recursive>
 8008576:	bf00      	nop
 8008578:	20000728 	.word	0x20000728

0800857c <_read_r>:
 800857c:	b538      	push	{r3, r4, r5, lr}
 800857e:	4d07      	ldr	r5, [pc, #28]	; (800859c <_read_r+0x20>)
 8008580:	4604      	mov	r4, r0
 8008582:	4608      	mov	r0, r1
 8008584:	4611      	mov	r1, r2
 8008586:	2200      	movs	r2, #0
 8008588:	602a      	str	r2, [r5, #0]
 800858a:	461a      	mov	r2, r3
 800858c:	f7fa fb44 	bl	8002c18 <_read>
 8008590:	1c43      	adds	r3, r0, #1
 8008592:	d102      	bne.n	800859a <_read_r+0x1e>
 8008594:	682b      	ldr	r3, [r5, #0]
 8008596:	b103      	cbz	r3, 800859a <_read_r+0x1e>
 8008598:	6023      	str	r3, [r4, #0]
 800859a:	bd38      	pop	{r3, r4, r5, pc}
 800859c:	20000734 	.word	0x20000734

080085a0 <_init>:
 80085a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085a2:	bf00      	nop
 80085a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085a6:	bc08      	pop	{r3}
 80085a8:	469e      	mov	lr, r3
 80085aa:	4770      	bx	lr

080085ac <_fini>:
 80085ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ae:	bf00      	nop
 80085b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085b2:	bc08      	pop	{r3}
 80085b4:	469e      	mov	lr, r3
 80085b6:	4770      	bx	lr
