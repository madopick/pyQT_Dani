
Project_23_03_06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008eb0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08009080  08009080  00019080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009330  08009330  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009330  08009330  00019330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009338  08009338  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009338  08009338  00019338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800933c  0800933c  0001933c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08009340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000618  200000d4  08009414  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006ec  08009414  000206ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6b1  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002169  00000000  00000000  0002e7b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  00030920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b00  00000000  00000000  000314d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022dfd  00000000  00000000  00031fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010dc9  00000000  00000000  00054dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cccd9  00000000  00000000  00065b96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013286f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003830  00000000  00000000  001328c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000d4 	.word	0x200000d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009068 	.word	0x08009068

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000d8 	.word	0x200000d8
 800020c:	08009068 	.word	0x08009068

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <__io_putchar>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

/* @brief  Retargets the C library printf function to the USART. */
PUTCHAR_PROTOTYPE {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80005bc:	1d39      	adds	r1, r7, #4
 80005be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005c2:	2201      	movs	r2, #1
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <__io_putchar+0x20>)
 80005c6:	f006 fae4 	bl	8006b92 <HAL_UART_Transmit>
  return ch;
 80005ca:	687b      	ldr	r3, [r7, #4]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200000f0 	.word	0x200000f0

080005d8 <main>:

/* bit flag */
uint8_t bitFlag = 0;

int main(void)
{
 80005d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005da:	b08f      	sub	sp, #60	; 0x3c
 80005dc:	af08      	add	r7, sp, #32
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f002 fdd9 	bl	8003194 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 fb1f 	bl	8000c24 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 fbdd 	bl	8000da4 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ea:	f000 fbbb 	bl	8000d64 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005ee:	f000 fb87 	bl	8000d00 <MX_USART2_UART_Init>

  /*##-1- Configure the I2C peripheral ######################################*/
  I2cHandle.Instance             = I2Cx;
 80005f2:	4b4c      	ldr	r3, [pc, #304]	; (8000724 <main+0x14c>)
 80005f4:	4a4c      	ldr	r2, [pc, #304]	; (8000728 <main+0x150>)
 80005f6:	601a      	str	r2, [r3, #0]
  I2cHandle.Init.AddressingMode  = I2C_ADDRESSINGMODE_10BIT;
 80005f8:	4b4a      	ldr	r3, [pc, #296]	; (8000724 <main+0x14c>)
 80005fa:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80005fe:	611a      	str	r2, [r3, #16]
  I2cHandle.Init.ClockSpeed      = 400000;
 8000600:	4b48      	ldr	r3, [pc, #288]	; (8000724 <main+0x14c>)
 8000602:	4a4a      	ldr	r2, [pc, #296]	; (800072c <main+0x154>)
 8000604:	605a      	str	r2, [r3, #4]
  I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000606:	4b47      	ldr	r3, [pc, #284]	; (8000724 <main+0x14c>)
 8000608:	2200      	movs	r2, #0
 800060a:	615a      	str	r2, [r3, #20]
  I2cHandle.Init.DutyCycle       = I2C_DUTYCYCLE_16_9;
 800060c:	4b45      	ldr	r3, [pc, #276]	; (8000724 <main+0x14c>)
 800060e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000612:	609a      	str	r2, [r3, #8]
  I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000614:	4b43      	ldr	r3, [pc, #268]	; (8000724 <main+0x14c>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 800061a:	4b42      	ldr	r3, [pc, #264]	; (8000724 <main+0x14c>)
 800061c:	2200      	movs	r2, #0
 800061e:	621a      	str	r2, [r3, #32]
  I2cHandle.Init.OwnAddress1     = I2C_ADDRESS;
 8000620:	4b40      	ldr	r3, [pc, #256]	; (8000724 <main+0x14c>)
 8000622:	f240 320f 	movw	r2, #783	; 0x30f
 8000626:	60da      	str	r2, [r3, #12]
  I2cHandle.Init.OwnAddress2     = 0xFE;
 8000628:	4b3e      	ldr	r3, [pc, #248]	; (8000724 <main+0x14c>)
 800062a:	22fe      	movs	r2, #254	; 0xfe
 800062c:	619a      	str	r2, [r3, #24]

  if(HAL_I2C_Init(&I2cHandle) != HAL_OK){ Error_Handler(); }
 800062e:	483d      	ldr	r0, [pc, #244]	; (8000724 <main+0x14c>)
 8000630:	f003 fd30 	bl	8004094 <HAL_I2C_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <main+0x66>
 800063a:	f000 febf 	bl	80013bc <Error_Handler>

  serial_init();
 800063e:	f000 fed1 	bl	80013e4 <serial_init>
  #ifdef MASTER_BOARD
  	  printf("Init OK\r\n");
 8000642:	483b      	ldr	r0, [pc, #236]	; (8000730 <main+0x158>)
 8000644:	f007 fd92 	bl	800816c <puts>
  #endif

  /****************** MAIN **********************/
  while (1) {
	  /*Perintah untuk kirim data ke UART*/
  	  if (bitFlag & BFLAG_UART_RCV) {
 8000648:	4b3a      	ldr	r3, [pc, #232]	; (8000734 <main+0x15c>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	f003 0301 	and.w	r3, r3, #1
 8000650:	2b00      	cmp	r3, #0
 8000652:	d017      	beq.n	8000684 <main+0xac>
  		  uartProcessing (u8arr_uartEvent, u16_lenCnt - 2); // remove \r & \n
 8000654:	4b38      	ldr	r3, [pc, #224]	; (8000738 <main+0x160>)
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	3b02      	subs	r3, #2
 800065a:	b29b      	uxth	r3, r3
 800065c:	4619      	mov	r1, r3
 800065e:	4837      	ldr	r0, [pc, #220]	; (800073c <main+0x164>)
 8000660:	f000 fe02 	bl	8001268 <uartProcessing>
  		  memset(u8arr_uartEvent, 0, UART_BUF_SZ);
 8000664:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000668:	2100      	movs	r1, #0
 800066a:	4834      	ldr	r0, [pc, #208]	; (800073c <main+0x164>)
 800066c:	f007 fcf0 	bl	8008050 <memset>
  		  u16_lenCnt = 0;
 8000670:	4b31      	ldr	r3, [pc, #196]	; (8000738 <main+0x160>)
 8000672:	2200      	movs	r2, #0
 8000674:	801a      	strh	r2, [r3, #0]

  		  /* Reset bit 0 bitflag */
  		  bitFlag 	&= ~BFLAG_UART_RCV;
 8000676:	4b2f      	ldr	r3, [pc, #188]	; (8000734 <main+0x15c>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	f023 0301 	bic.w	r3, r3, #1
 800067e:	b2da      	uxtb	r2, r3
 8000680:	4b2c      	ldr	r3, [pc, #176]	; (8000734 <main+0x15c>)
 8000682:	701a      	strb	r2, [r3, #0]
  	  }

  	  if (bitFlag & BFLAG_I2C_RSL) {
 8000684:	4b2b      	ldr	r3, [pc, #172]	; (8000734 <main+0x15c>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	f003 0302 	and.w	r3, r3, #2
 800068c:	2b00      	cmp	r3, #0
 800068e:	f000 809b 	beq.w	80007c8 <main+0x1f0>
		#ifdef MASTER_BOARD
  		  /* Master give trigger to Slave*/
  		  for (uint8_t i=4; i<=6; i++){
 8000692:	2304      	movs	r3, #4
 8000694:	75fb      	strb	r3, [r7, #23]
 8000696:	e089      	b.n	80007ac <main+0x1d4>
  			  aTxBuffer[0] = i;
 8000698:	7dfb      	ldrb	r3, [r7, #23]
 800069a:	4a29      	ldr	r2, [pc, #164]	; (8000740 <main+0x168>)
 800069c:	6013      	str	r3, [r2, #0]
  			  do
  			  {
  				  /*##-2- Proses transmission START #####################################*/
  				  if(HAL_I2C_Master_Transmit_IT(&I2cHandle, (uint16_t)I2C_ADDRESS, (uint8_t*)aTxBuffer, TXBUFFERSIZE)!= HAL_OK)
 800069e:	2364      	movs	r3, #100	; 0x64
 80006a0:	4a27      	ldr	r2, [pc, #156]	; (8000740 <main+0x168>)
 80006a2:	f240 310f 	movw	r1, #783	; 0x30f
 80006a6:	481f      	ldr	r0, [pc, #124]	; (8000724 <main+0x14c>)
 80006a8:	f003 fe38 	bl	800431c <HAL_I2C_Master_Transmit_IT>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <main+0xde>
  				  {Error_Handler();}
 80006b2:	f000 fe83 	bl	80013bc <Error_Handler>

  				  /*##-3- Menunggu transfer data selesai ###################################*/
  				  while (HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY)
 80006b6:	bf00      	nop
 80006b8:	481a      	ldr	r0, [pc, #104]	; (8000724 <main+0x14c>)
 80006ba:	f004 f9e1 	bl	8004a80 <HAL_I2C_GetState>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b20      	cmp	r3, #32
 80006c2:	d1f9      	bne.n	80006b8 <main+0xe0>
  				  {}
  				  //printf("Access Slave Success!!\r\n\n");
  			  } while(HAL_I2C_GetError(&I2cHandle) == HAL_I2C_ERROR_AF);
 80006c4:	4817      	ldr	r0, [pc, #92]	; (8000724 <main+0x14c>)
 80006c6:	f004 f9e9 	bl	8004a9c <HAL_I2C_GetError>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b04      	cmp	r3, #4
 80006ce:	d0e6      	beq.n	800069e <main+0xc6>

  			  /* Master recieve data from Slave*/
  			  /*##-4- I2C periperal siap menerima data ############################*/
  			  do
  			  {
  				  if(HAL_I2C_Master_Receive_IT(&I2cHandle, (uint16_t)I2C_ADDRESS, (uint8_t *)aStartBuffer, RXBUFFERSIZE) != HAL_OK) {Error_Handler();}
 80006d0:	2364      	movs	r3, #100	; 0x64
 80006d2:	4a1c      	ldr	r2, [pc, #112]	; (8000744 <main+0x16c>)
 80006d4:	f240 310f 	movw	r1, #783	; 0x30f
 80006d8:	4812      	ldr	r0, [pc, #72]	; (8000724 <main+0x14c>)
 80006da:	f003 fec5 	bl	8004468 <HAL_I2C_Master_Receive_IT>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <main+0x110>
 80006e4:	f000 fe6a 	bl	80013bc <Error_Handler>

  				  /* Saat Acknowledge failure (Slave tidak mengakui alamatnya) Master memulai ulang komunikasi */
  			  } while (HAL_I2C_GetError(&I2cHandle) == HAL_I2C_ERROR_AF);
 80006e8:	480e      	ldr	r0, [pc, #56]	; (8000724 <main+0x14c>)
 80006ea:	f004 f9d7 	bl	8004a9c <HAL_I2C_GetError>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b04      	cmp	r3, #4
 80006f2:	d0ed      	beq.n	80006d0 <main+0xf8>

  			  /*##-5- Menunggu akhir transfer ###################################*/
  			  while (HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY)
 80006f4:	bf00      	nop
 80006f6:	480b      	ldr	r0, [pc, #44]	; (8000724 <main+0x14c>)
 80006f8:	f004 f9c2 	bl	8004a80 <HAL_I2C_GetState>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b20      	cmp	r3, #32
 8000700:	d1f9      	bne.n	80006f6 <main+0x11e>
  			  {}
  			  if (aStartBuffer[0]==4){
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <main+0x16c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2b04      	cmp	r3, #4
 8000708:	d103      	bne.n	8000712 <main+0x13a>
  				  printf("R1: ");
 800070a:	480f      	ldr	r0, [pc, #60]	; (8000748 <main+0x170>)
 800070c:	f007 fca8 	bl	8008060 <iprintf>
 8000710:	e025      	b.n	800075e <main+0x186>
  			  }
  			  else if (aStartBuffer[0]==5){
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <main+0x16c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2b05      	cmp	r3, #5
 8000718:	d11a      	bne.n	8000750 <main+0x178>
  				  printf("R2: ");
 800071a:	480c      	ldr	r0, [pc, #48]	; (800074c <main+0x174>)
 800071c:	f007 fca0 	bl	8008060 <iprintf>
 8000720:	e01d      	b.n	800075e <main+0x186>
 8000722:	bf00      	nop
 8000724:	20000194 	.word	0x20000194
 8000728:	40005400 	.word	0x40005400
 800072c:	00061a80 	.word	0x00061a80
 8000730:	08009080 	.word	0x08009080
 8000734:	200004bc 	.word	0x200004bc
 8000738:	200004ba 	.word	0x200004ba
 800073c:	200003b8 	.word	0x200003b8
 8000740:	20000000 	.word	0x20000000
 8000744:	2000028c 	.word	0x2000028c
 8000748:	0800908c 	.word	0x0800908c
 800074c:	08009094 	.word	0x08009094
  			  }
  			  else if (aStartBuffer[0]==6){
 8000750:	4b96      	ldr	r3, [pc, #600]	; (80009ac <main+0x3d4>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b06      	cmp	r3, #6
 8000756:	d102      	bne.n	800075e <main+0x186>
  				  printf("R3: ");
 8000758:	4895      	ldr	r0, [pc, #596]	; (80009b0 <main+0x3d8>)
 800075a:	f007 fc81 	bl	8008060 <iprintf>
  			  }
  			  printf("%ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld;\r\n",
 800075e:	4b93      	ldr	r3, [pc, #588]	; (80009ac <main+0x3d4>)
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	4b91      	ldr	r3, [pc, #580]	; (80009ac <main+0x3d4>)
 8000766:	689a      	ldr	r2, [r3, #8]
 8000768:	60ba      	str	r2, [r7, #8]
 800076a:	4b90      	ldr	r3, [pc, #576]	; (80009ac <main+0x3d4>)
 800076c:	68d8      	ldr	r0, [r3, #12]
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	4b8e      	ldr	r3, [pc, #568]	; (80009ac <main+0x3d4>)
 8000772:	691b      	ldr	r3, [r3, #16]
 8000774:	4a8d      	ldr	r2, [pc, #564]	; (80009ac <main+0x3d4>)
 8000776:	6952      	ldr	r2, [r2, #20]
 8000778:	498c      	ldr	r1, [pc, #560]	; (80009ac <main+0x3d4>)
 800077a:	6989      	ldr	r1, [r1, #24]
 800077c:	488b      	ldr	r0, [pc, #556]	; (80009ac <main+0x3d4>)
 800077e:	69c0      	ldr	r0, [r0, #28]
 8000780:	4c8a      	ldr	r4, [pc, #552]	; (80009ac <main+0x3d4>)
 8000782:	6a24      	ldr	r4, [r4, #32]
 8000784:	4d89      	ldr	r5, [pc, #548]	; (80009ac <main+0x3d4>)
 8000786:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 8000788:	4e88      	ldr	r6, [pc, #544]	; (80009ac <main+0x3d4>)
 800078a:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 800078c:	9606      	str	r6, [sp, #24]
 800078e:	9505      	str	r5, [sp, #20]
 8000790:	9404      	str	r4, [sp, #16]
 8000792:	9003      	str	r0, [sp, #12]
 8000794:	9102      	str	r1, [sp, #8]
 8000796:	9201      	str	r2, [sp, #4]
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	68ba      	ldr	r2, [r7, #8]
 800079e:	68f9      	ldr	r1, [r7, #12]
 80007a0:	4884      	ldr	r0, [pc, #528]	; (80009b4 <main+0x3dc>)
 80007a2:	f007 fc5d 	bl	8008060 <iprintf>
  		  for (uint8_t i=4; i<=6; i++){
 80007a6:	7dfb      	ldrb	r3, [r7, #23]
 80007a8:	3301      	adds	r3, #1
 80007aa:	75fb      	strb	r3, [r7, #23]
 80007ac:	7dfb      	ldrb	r3, [r7, #23]
 80007ae:	2b06      	cmp	r3, #6
 80007b0:	f67f af72 	bls.w	8000698 <main+0xc0>
  	  				 aStartBuffer[1], aStartBuffer[2], aStartBuffer[3],
					 aStartBuffer[4], aStartBuffer[5], aStartBuffer[6],
					 aStartBuffer[7], aStartBuffer[8], aStartBuffer[9], aStartBuffer[10]);

  		  }
  		  printf("END\r\n");
 80007b4:	4880      	ldr	r0, [pc, #512]	; (80009b8 <main+0x3e0>)
 80007b6:	f007 fcd9 	bl	800816c <puts>

  		  bitFlag &= ~BFLAG_I2C_RSL;
 80007ba:	4b80      	ldr	r3, [pc, #512]	; (80009bc <main+0x3e4>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	f023 0302 	bic.w	r3, r3, #2
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	4b7d      	ldr	r3, [pc, #500]	; (80009bc <main+0x3e4>)
 80007c6:	701a      	strb	r2, [r3, #0]
		#endif
  	  }

  	  /* Perintah untuk WRITE atau sending I2C */
  	  if (bitFlag & BFLAG_I2C_WR1) {
 80007c8:	4b7c      	ldr	r3, [pc, #496]	; (80009bc <main+0x3e4>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	f003 0310 	and.w	r3, r3, #16
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d022      	beq.n	800081a <main+0x242>
			  //printf("Master I2C Sending code %ld\r\n", aTxBuffer[0]);

			  do
			  {
				  /*##-2- Proses transmission START #####################################*/
				  if(HAL_I2C_Master_Transmit_IT(&I2cHandle, (uint16_t)I2C_ADDRESS, (uint8_t*)aTxBuffer, TXBUFFERSIZE)!= HAL_OK)
 80007d4:	2364      	movs	r3, #100	; 0x64
 80007d6:	4a7a      	ldr	r2, [pc, #488]	; (80009c0 <main+0x3e8>)
 80007d8:	f240 310f 	movw	r1, #783	; 0x30f
 80007dc:	4879      	ldr	r0, [pc, #484]	; (80009c4 <main+0x3ec>)
 80007de:	f003 fd9d 	bl	800431c <HAL_I2C_Master_Transmit_IT>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <main+0x214>
				  {Error_Handler();}
 80007e8:	f000 fde8 	bl	80013bc <Error_Handler>

				  /*##-3- Menunggu transfer data selesai ###################################*/
				  while (HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY)
 80007ec:	bf00      	nop
 80007ee:	4875      	ldr	r0, [pc, #468]	; (80009c4 <main+0x3ec>)
 80007f0:	f004 f946 	bl	8004a80 <HAL_I2C_GetState>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b20      	cmp	r3, #32
 80007f8:	d1f9      	bne.n	80007ee <main+0x216>
				  {}
				  printf("Sending Success!!\r\n");
 80007fa:	4873      	ldr	r0, [pc, #460]	; (80009c8 <main+0x3f0>)
 80007fc:	f007 fcb6 	bl	800816c <puts>
			  } while(HAL_I2C_GetError(&I2cHandle) == HAL_I2C_ERROR_AF);
 8000800:	4870      	ldr	r0, [pc, #448]	; (80009c4 <main+0x3ec>)
 8000802:	f004 f94b 	bl	8004a9c <HAL_I2C_GetError>
 8000806:	4603      	mov	r3, r0
 8000808:	2b04      	cmp	r3, #4
 800080a:	d0e3      	beq.n	80007d4 <main+0x1fc>

			  bitFlag |= BFLAG_I2C_RD1;
 800080c:	4b6b      	ldr	r3, [pc, #428]	; (80009bc <main+0x3e4>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	f043 0308 	orr.w	r3, r3, #8
 8000814:	b2da      	uxtb	r2, r3
 8000816:	4b69      	ldr	r3, [pc, #420]	; (80009bc <main+0x3e4>)
 8000818:	701a      	strb	r2, [r3, #0]
			  /* Reset bit 2 bitflag ada di bagian BFLAG_I2C_RD0 */
	  	  #endif
  	 }

  	/* Perintah untuk Compare buffer dan READ dari I2C */
  	 if (bitFlag & BFLAG_I2C_RD1)
 800081a:	4b68      	ldr	r3, [pc, #416]	; (80009bc <main+0x3e4>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	f003 0308 	and.w	r3, r3, #8
 8000822:	2b00      	cmp	r3, #0
 8000824:	f000 8113 	beq.w	8000a4e <main+0x476>
  		 #ifdef MASTER_BOARD
  		 	 /*##-4- I2C periperal siap menerima data ############################*/
  			 do {
  				 //printf("Master I2C Receiving... \r\n");

  				 if(HAL_I2C_Master_Receive_IT(&I2cHandle, (uint16_t)I2C_ADDRESS, (uint8_t *)aRxBuffer, RXBUFFERSIZE) != HAL_OK) {Error_Handler();}
 8000828:	2364      	movs	r3, #100	; 0x64
 800082a:	4a68      	ldr	r2, [pc, #416]	; (80009cc <main+0x3f4>)
 800082c:	f240 310f 	movw	r1, #783	; 0x30f
 8000830:	4864      	ldr	r0, [pc, #400]	; (80009c4 <main+0x3ec>)
 8000832:	f003 fe19 	bl	8004468 <HAL_I2C_Master_Receive_IT>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <main+0x268>
 800083c:	f000 fdbe 	bl	80013bc <Error_Handler>

  				 /* Saat Acknowledge failure (Slave tidak mengakui alamatnya) Master memulai ulang komunikasi */
  			 } while (HAL_I2C_GetError(&I2cHandle) == HAL_I2C_ERROR_AF);
 8000840:	4860      	ldr	r0, [pc, #384]	; (80009c4 <main+0x3ec>)
 8000842:	f004 f92b 	bl	8004a9c <HAL_I2C_GetError>
 8000846:	4603      	mov	r3, r0
 8000848:	2b04      	cmp	r3, #4
 800084a:	d0ed      	beq.n	8000828 <main+0x250>

  			 /*##-5- Menunggu akhir transfer ###################################*/
  			 while (HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY){}
 800084c:	bf00      	nop
 800084e:	485d      	ldr	r0, [pc, #372]	; (80009c4 <main+0x3ec>)
 8000850:	f004 f916 	bl	8004a80 <HAL_I2C_GetState>
 8000854:	4603      	mov	r3, r0
 8000856:	2b20      	cmp	r3, #32
 8000858:	d1f9      	bne.n	800084e <main+0x276>
  			 //printf("Master I2C Receive Success\r\n\n");

  			 /* Jika di write di form 1 maka nilai buffer disimpan di var res1 dan atur BFLAG_I2C_WR1*/
  			 if (aRxBuffer[0]==1)
 800085a:	4b5c      	ldr	r3, [pc, #368]	; (80009cc <main+0x3f4>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d109      	bne.n	8000876 <main+0x29e>
  			 {
  				 printf("Send RES1: \r\n");
 8000862:	485b      	ldr	r0, [pc, #364]	; (80009d0 <main+0x3f8>)
 8000864:	f007 fc82 	bl	800816c <puts>

  				 /* Reset bitflag */
  				 bitFlag 	&= ~BFLAG_I2C_WR1;
 8000868:	4b54      	ldr	r3, [pc, #336]	; (80009bc <main+0x3e4>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	f023 0310 	bic.w	r3, r3, #16
 8000870:	b2da      	uxtb	r2, r3
 8000872:	4b52      	ldr	r3, [pc, #328]	; (80009bc <main+0x3e4>)
 8000874:	701a      	strb	r2, [r3, #0]
  			 }
  			 if (aRxBuffer[0]==2)
 8000876:	4b55      	ldr	r3, [pc, #340]	; (80009cc <main+0x3f4>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2b02      	cmp	r3, #2
 800087c:	d109      	bne.n	8000892 <main+0x2ba>
  			 {
  				 printf("Send RES2: \r\n");
 800087e:	4855      	ldr	r0, [pc, #340]	; (80009d4 <main+0x3fc>)
 8000880:	f007 fc74 	bl	800816c <puts>

  				 /* Reset bitflag */
  				 bitFlag 	&= ~BFLAG_I2C_WR1;
 8000884:	4b4d      	ldr	r3, [pc, #308]	; (80009bc <main+0x3e4>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	f023 0310 	bic.w	r3, r3, #16
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b4b      	ldr	r3, [pc, #300]	; (80009bc <main+0x3e4>)
 8000890:	701a      	strb	r2, [r3, #0]
  			 }
  			 if (aRxBuffer[0]==3)
 8000892:	4b4e      	ldr	r3, [pc, #312]	; (80009cc <main+0x3f4>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2b03      	cmp	r3, #3
 8000898:	d109      	bne.n	80008ae <main+0x2d6>
  			 {
  				 printf("Send RES3: \r\n");
 800089a:	484f      	ldr	r0, [pc, #316]	; (80009d8 <main+0x400>)
 800089c:	f007 fc66 	bl	800816c <puts>

  				 /* Reset bitflag */
  				 bitFlag 	&= ~BFLAG_I2C_WR1;
 80008a0:	4b46      	ldr	r3, [pc, #280]	; (80009bc <main+0x3e4>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	f023 0310 	bic.w	r3, r3, #16
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	4b44      	ldr	r3, [pc, #272]	; (80009bc <main+0x3e4>)
 80008ac:	701a      	strb	r2, [r3, #0]
  			 }
  			 if (aRxBuffer[0]==4)
 80008ae:	4b47      	ldr	r3, [pc, #284]	; (80009cc <main+0x3f4>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2b04      	cmp	r3, #4
 80008b4:	d109      	bne.n	80008ca <main+0x2f2>
  			 {
  				 printf("Read RES1: ");
 80008b6:	4849      	ldr	r0, [pc, #292]	; (80009dc <main+0x404>)
 80008b8:	f007 fbd2 	bl	8008060 <iprintf>

  				 /* Reset bitflag */
  				 bitFlag 	&= ~BFLAG_I2C_WR1;
 80008bc:	4b3f      	ldr	r3, [pc, #252]	; (80009bc <main+0x3e4>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	f023 0310 	bic.w	r3, r3, #16
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	4b3d      	ldr	r3, [pc, #244]	; (80009bc <main+0x3e4>)
 80008c8:	701a      	strb	r2, [r3, #0]
  			 }
  			 if (aRxBuffer[0]==5)
 80008ca:	4b40      	ldr	r3, [pc, #256]	; (80009cc <main+0x3f4>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2b05      	cmp	r3, #5
 80008d0:	d109      	bne.n	80008e6 <main+0x30e>
			 {
  				 printf("READ RES2: ");
 80008d2:	4843      	ldr	r0, [pc, #268]	; (80009e0 <main+0x408>)
 80008d4:	f007 fbc4 	bl	8008060 <iprintf>

  				/* Reset bitflag */
				 bitFlag 	&= ~BFLAG_I2C_WR1;
 80008d8:	4b38      	ldr	r3, [pc, #224]	; (80009bc <main+0x3e4>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	f023 0310 	bic.w	r3, r3, #16
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	4b36      	ldr	r3, [pc, #216]	; (80009bc <main+0x3e4>)
 80008e4:	701a      	strb	r2, [r3, #0]
			 }
  			 if (aRxBuffer[0]==6)
 80008e6:	4b39      	ldr	r3, [pc, #228]	; (80009cc <main+0x3f4>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	2b06      	cmp	r3, #6
 80008ec:	d109      	bne.n	8000902 <main+0x32a>
			 {
  				 printf("READ RES3: ");
 80008ee:	483d      	ldr	r0, [pc, #244]	; (80009e4 <main+0x40c>)
 80008f0:	f007 fbb6 	bl	8008060 <iprintf>

  				/* Reset bitflag */
				 bitFlag 	&= ~BFLAG_I2C_WR1;
 80008f4:	4b31      	ldr	r3, [pc, #196]	; (80009bc <main+0x3e4>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	f023 0310 	bic.w	r3, r3, #16
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	4b2f      	ldr	r3, [pc, #188]	; (80009bc <main+0x3e4>)
 8000900:	701a      	strb	r2, [r3, #0]
			 }
  			 if (aRxBuffer[0]==7)
 8000902:	4b32      	ldr	r3, [pc, #200]	; (80009cc <main+0x3f4>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b07      	cmp	r3, #7
 8000908:	d118      	bne.n	800093c <main+0x364>
			 {
  				for (uint8_t i=0; i<10; i++){
 800090a:	2300      	movs	r3, #0
 800090c:	75bb      	strb	r3, [r7, #22]
 800090e:	e008      	b.n	8000922 <main+0x34a>
					aTxBuffer[i+1] = 0;
 8000910:	7dbb      	ldrb	r3, [r7, #22]
 8000912:	3301      	adds	r3, #1
 8000914:	4a2a      	ldr	r2, [pc, #168]	; (80009c0 <main+0x3e8>)
 8000916:	2100      	movs	r1, #0
 8000918:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  				for (uint8_t i=0; i<10; i++){
 800091c:	7dbb      	ldrb	r3, [r7, #22]
 800091e:	3301      	adds	r3, #1
 8000920:	75bb      	strb	r3, [r7, #22]
 8000922:	7dbb      	ldrb	r3, [r7, #22]
 8000924:	2b09      	cmp	r3, #9
 8000926:	d9f3      	bls.n	8000910 <main+0x338>
				}
				copyValue(temp, aTxBuffer, 10, 10);
 8000928:	230a      	movs	r3, #10
 800092a:	220a      	movs	r2, #10
 800092c:	4924      	ldr	r1, [pc, #144]	; (80009c0 <main+0x3e8>)
 800092e:	482e      	ldr	r0, [pc, #184]	; (80009e8 <main+0x410>)
 8000930:	f000 f94e 	bl	8000bd0 <copyValue>
				aTxBuffer[0]=8;
 8000934:	4b22      	ldr	r3, [pc, #136]	; (80009c0 <main+0x3e8>)
 8000936:	2208      	movs	r2, #8
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	e027      	b.n	800098c <main+0x3b4>
			 }
  			 else if (aRxBuffer[0]==8)
 800093c:	4b23      	ldr	r3, [pc, #140]	; (80009cc <main+0x3f4>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b08      	cmp	r3, #8
 8000942:	d118      	bne.n	8000976 <main+0x39e>
			 {
  				for (uint8_t i=0; i<10; i++){
 8000944:	2300      	movs	r3, #0
 8000946:	757b      	strb	r3, [r7, #21]
 8000948:	e008      	b.n	800095c <main+0x384>
					aTxBuffer[i+1] = 0;
 800094a:	7d7b      	ldrb	r3, [r7, #21]
 800094c:	3301      	adds	r3, #1
 800094e:	4a1c      	ldr	r2, [pc, #112]	; (80009c0 <main+0x3e8>)
 8000950:	2100      	movs	r1, #0
 8000952:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  				for (uint8_t i=0; i<10; i++){
 8000956:	7d7b      	ldrb	r3, [r7, #21]
 8000958:	3301      	adds	r3, #1
 800095a:	757b      	strb	r3, [r7, #21]
 800095c:	7d7b      	ldrb	r3, [r7, #21]
 800095e:	2b09      	cmp	r3, #9
 8000960:	d9f3      	bls.n	800094a <main+0x372>
				}
				copyValue(temp, aTxBuffer, 20, 10);
 8000962:	230a      	movs	r3, #10
 8000964:	2214      	movs	r2, #20
 8000966:	4916      	ldr	r1, [pc, #88]	; (80009c0 <main+0x3e8>)
 8000968:	481f      	ldr	r0, [pc, #124]	; (80009e8 <main+0x410>)
 800096a:	f000 f931 	bl	8000bd0 <copyValue>
				aTxBuffer[0]=9;
 800096e:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <main+0x3e8>)
 8000970:	2209      	movs	r2, #9
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	e00a      	b.n	800098c <main+0x3b4>
			 }
			 else if (aRxBuffer[0]==9)
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <main+0x3f4>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b09      	cmp	r3, #9
 800097c:	d106      	bne.n	800098c <main+0x3b4>
			 {
				bitFlag &= ~BFLAG_I2C_WR1;
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <main+0x3e4>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	f023 0310 	bic.w	r3, r3, #16
 8000986:	b2da      	uxtb	r2, r3
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <main+0x3e4>)
 800098a:	701a      	strb	r2, [r3, #0]
			 }

  			 if (aRxBuffer[0]<4)
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <main+0x3f4>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b03      	cmp	r3, #3
 8000992:	dc2d      	bgt.n	80009f0 <main+0x418>
  			 {
  				 /*##-6- Compare the sent and received buffers ##############################*/
				 if(Buffercmp(aTxBuffer,aRxBuffer, 11)){
 8000994:	220b      	movs	r2, #11
 8000996:	490d      	ldr	r1, [pc, #52]	; (80009cc <main+0x3f4>)
 8000998:	4809      	ldr	r0, [pc, #36]	; (80009c0 <main+0x3e8>)
 800099a:	f000 f8f9 	bl	8000b90 <Buffercmp>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d04d      	beq.n	8000a40 <main+0x468>
					 printf("Buffer compare Fail!!!\r\n\n");
 80009a4:	4811      	ldr	r0, [pc, #68]	; (80009ec <main+0x414>)
 80009a6:	f007 fbe1 	bl	800816c <puts>
 80009aa:	e049      	b.n	8000a40 <main+0x468>
 80009ac:	2000028c 	.word	0x2000028c
 80009b0:	0800909c 	.word	0x0800909c
 80009b4:	080090a4 	.word	0x080090a4
 80009b8:	080090d8 	.word	0x080090d8
 80009bc:	200004bc 	.word	0x200004bc
 80009c0:	20000000 	.word	0x20000000
 80009c4:	20000194 	.word	0x20000194
 80009c8:	080090e0 	.word	0x080090e0
 80009cc:	20000260 	.word	0x20000260
 80009d0:	080090f4 	.word	0x080090f4
 80009d4:	08009104 	.word	0x08009104
 80009d8:	08009114 	.word	0x08009114
 80009dc:	08009124 	.word	0x08009124
 80009e0:	08009130 	.word	0x08009130
 80009e4:	0800913c 	.word	0x0800913c
 80009e8:	200001e8 	.word	0x200001e8
 80009ec:	08009148 	.word	0x08009148
				 }
  			 }
  			 else if (aRxBuffer[0]>=4){
 80009f0:	4b47      	ldr	r3, [pc, #284]	; (8000b10 <main+0x538>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b03      	cmp	r3, #3
 80009f6:	dd23      	ble.n	8000a40 <main+0x468>
  				 printf("%ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld\r\n\n",
 80009f8:	4b45      	ldr	r3, [pc, #276]	; (8000b10 <main+0x538>)
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	4b44      	ldr	r3, [pc, #272]	; (8000b10 <main+0x538>)
 8000a00:	689a      	ldr	r2, [r3, #8]
 8000a02:	60ba      	str	r2, [r7, #8]
 8000a04:	4b42      	ldr	r3, [pc, #264]	; (8000b10 <main+0x538>)
 8000a06:	68d8      	ldr	r0, [r3, #12]
 8000a08:	6078      	str	r0, [r7, #4]
 8000a0a:	4b41      	ldr	r3, [pc, #260]	; (8000b10 <main+0x538>)
 8000a0c:	691b      	ldr	r3, [r3, #16]
 8000a0e:	4a40      	ldr	r2, [pc, #256]	; (8000b10 <main+0x538>)
 8000a10:	6952      	ldr	r2, [r2, #20]
 8000a12:	493f      	ldr	r1, [pc, #252]	; (8000b10 <main+0x538>)
 8000a14:	6989      	ldr	r1, [r1, #24]
 8000a16:	483e      	ldr	r0, [pc, #248]	; (8000b10 <main+0x538>)
 8000a18:	69c0      	ldr	r0, [r0, #28]
 8000a1a:	4c3d      	ldr	r4, [pc, #244]	; (8000b10 <main+0x538>)
 8000a1c:	6a24      	ldr	r4, [r4, #32]
 8000a1e:	4d3c      	ldr	r5, [pc, #240]	; (8000b10 <main+0x538>)
 8000a20:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 8000a22:	4e3b      	ldr	r6, [pc, #236]	; (8000b10 <main+0x538>)
 8000a24:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 8000a26:	9606      	str	r6, [sp, #24]
 8000a28:	9505      	str	r5, [sp, #20]
 8000a2a:	9404      	str	r4, [sp, #16]
 8000a2c:	9003      	str	r0, [sp, #12]
 8000a2e:	9102      	str	r1, [sp, #8]
 8000a30:	9201      	str	r2, [sp, #4]
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	68ba      	ldr	r2, [r7, #8]
 8000a38:	68f9      	ldr	r1, [r7, #12]
 8000a3a:	4836      	ldr	r0, [pc, #216]	; (8000b14 <main+0x53c>)
 8000a3c:	f007 fb10 	bl	8008060 <iprintf>
						 aRxBuffer[7], aRxBuffer[8], aRxBuffer[9], aRxBuffer[10]);
  			 }


  			 /* Reset bit 1 bitflag */
			 bitFlag 	&= ~BFLAG_I2C_RD1;
 8000a40:	4b35      	ldr	r3, [pc, #212]	; (8000b18 <main+0x540>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	f023 0308 	bic.w	r3, r3, #8
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	4b33      	ldr	r3, [pc, #204]	; (8000b18 <main+0x540>)
 8000a4c:	701a      	strb	r2, [r3, #0]
		 #endif
	 }
  	 if (bitFlag & BFLAG_I2C_RD0)
 8000a4e:	4b32      	ldr	r3, [pc, #200]	; (8000b18 <main+0x540>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	f003 0304 	and.w	r3, r3, #4
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	f43f adf6 	beq.w	8000648 <main+0x70>
  	 {
  	  	 #ifdef MASTER_BOARD

  	  		 printf("Code: %ld\nTX integer: %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld\r\n",
 8000a5c:	4b2f      	ldr	r3, [pc, #188]	; (8000b1c <main+0x544>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	4b2e      	ldr	r3, [pc, #184]	; (8000b1c <main+0x544>)
 8000a64:	685a      	ldr	r2, [r3, #4]
 8000a66:	60ba      	str	r2, [r7, #8]
 8000a68:	4b2c      	ldr	r3, [pc, #176]	; (8000b1c <main+0x544>)
 8000a6a:	6898      	ldr	r0, [r3, #8]
 8000a6c:	6078      	str	r0, [r7, #4]
 8000a6e:	4b2b      	ldr	r3, [pc, #172]	; (8000b1c <main+0x544>)
 8000a70:	68db      	ldr	r3, [r3, #12]
 8000a72:	4a2a      	ldr	r2, [pc, #168]	; (8000b1c <main+0x544>)
 8000a74:	6912      	ldr	r2, [r2, #16]
 8000a76:	4929      	ldr	r1, [pc, #164]	; (8000b1c <main+0x544>)
 8000a78:	6949      	ldr	r1, [r1, #20]
 8000a7a:	4828      	ldr	r0, [pc, #160]	; (8000b1c <main+0x544>)
 8000a7c:	6980      	ldr	r0, [r0, #24]
 8000a7e:	4c27      	ldr	r4, [pc, #156]	; (8000b1c <main+0x544>)
 8000a80:	69e4      	ldr	r4, [r4, #28]
 8000a82:	603c      	str	r4, [r7, #0]
 8000a84:	4d25      	ldr	r5, [pc, #148]	; (8000b1c <main+0x544>)
 8000a86:	6a2d      	ldr	r5, [r5, #32]
 8000a88:	4e24      	ldr	r6, [pc, #144]	; (8000b1c <main+0x544>)
 8000a8a:	6a76      	ldr	r6, [r6, #36]	; 0x24
 8000a8c:	4c23      	ldr	r4, [pc, #140]	; (8000b1c <main+0x544>)
 8000a8e:	6aa4      	ldr	r4, [r4, #40]	; 0x28
 8000a90:	9407      	str	r4, [sp, #28]
 8000a92:	9606      	str	r6, [sp, #24]
 8000a94:	9505      	str	r5, [sp, #20]
 8000a96:	683c      	ldr	r4, [r7, #0]
 8000a98:	9404      	str	r4, [sp, #16]
 8000a9a:	9003      	str	r0, [sp, #12]
 8000a9c:	9102      	str	r1, [sp, #8]
 8000a9e:	9201      	str	r2, [sp, #4]
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	68ba      	ldr	r2, [r7, #8]
 8000aa6:	68f9      	ldr	r1, [r7, #12]
 8000aa8:	481d      	ldr	r0, [pc, #116]	; (8000b20 <main+0x548>)
 8000aaa:	f007 fad9 	bl	8008060 <iprintf>
  	  				 aTxBuffer[0], aTxBuffer[1], aTxBuffer[2], aTxBuffer[3],
					 aTxBuffer[4], aTxBuffer[5], aTxBuffer[6],
					 aTxBuffer[7], aTxBuffer[8], aTxBuffer[9], aTxBuffer[10]);
  	  		 printf("Code: %ld\nRX integer: %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld\r\n\n",
 8000aae:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <main+0x538>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <main+0x538>)
 8000ab6:	685a      	ldr	r2, [r3, #4]
 8000ab8:	60ba      	str	r2, [r7, #8]
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <main+0x538>)
 8000abc:	6898      	ldr	r0, [r3, #8]
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <main+0x538>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <main+0x538>)
 8000ac6:	6912      	ldr	r2, [r2, #16]
 8000ac8:	4911      	ldr	r1, [pc, #68]	; (8000b10 <main+0x538>)
 8000aca:	6949      	ldr	r1, [r1, #20]
 8000acc:	4810      	ldr	r0, [pc, #64]	; (8000b10 <main+0x538>)
 8000ace:	6980      	ldr	r0, [r0, #24]
 8000ad0:	4c0f      	ldr	r4, [pc, #60]	; (8000b10 <main+0x538>)
 8000ad2:	69e4      	ldr	r4, [r4, #28]
 8000ad4:	603c      	str	r4, [r7, #0]
 8000ad6:	4d0e      	ldr	r5, [pc, #56]	; (8000b10 <main+0x538>)
 8000ad8:	6a2d      	ldr	r5, [r5, #32]
 8000ada:	4e0d      	ldr	r6, [pc, #52]	; (8000b10 <main+0x538>)
 8000adc:	6a76      	ldr	r6, [r6, #36]	; 0x24
 8000ade:	4c0c      	ldr	r4, [pc, #48]	; (8000b10 <main+0x538>)
 8000ae0:	6aa4      	ldr	r4, [r4, #40]	; 0x28
 8000ae2:	9407      	str	r4, [sp, #28]
 8000ae4:	9606      	str	r6, [sp, #24]
 8000ae6:	9505      	str	r5, [sp, #20]
 8000ae8:	683c      	ldr	r4, [r7, #0]
 8000aea:	9404      	str	r4, [sp, #16]
 8000aec:	9003      	str	r0, [sp, #12]
 8000aee:	9102      	str	r1, [sp, #8]
 8000af0:	9201      	str	r2, [sp, #4]
 8000af2:	9300      	str	r3, [sp, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	68ba      	ldr	r2, [r7, #8]
 8000af8:	68f9      	ldr	r1, [r7, #12]
 8000afa:	480a      	ldr	r0, [pc, #40]	; (8000b24 <main+0x54c>)
 8000afc:	f007 fab0 	bl	8008060 <iprintf>
  	  				 aRxBuffer[0], aRxBuffer[1], aRxBuffer[2], aRxBuffer[3],
					 aRxBuffer[4], aRxBuffer[5], aRxBuffer[6],
					 aRxBuffer[7], aRxBuffer[8], aRxBuffer[9], aRxBuffer[10]);

  	  		 /* Reset bit 1 bitflag */
  			 bitFlag 	&= ~BFLAG_I2C_RD0;
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <main+0x540>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	f023 0304 	bic.w	r3, r3, #4
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4b03      	ldr	r3, [pc, #12]	; (8000b18 <main+0x540>)
 8000b0c:	701a      	strb	r2, [r3, #0]
  	  if (bitFlag & BFLAG_UART_RCV) {
 8000b0e:	e59b      	b.n	8000648 <main+0x70>
 8000b10:	20000260 	.word	0x20000260
 8000b14:	08009164 	.word	0x08009164
 8000b18:	200004bc 	.word	0x200004bc
 8000b1c:	20000000 	.word	0x20000000
 8000b20:	08009198 	.word	0x08009198
 8000b24:	080091e4 	.word	0x080091e4

08000b28 <HAL_I2C_MasterTxCpltCallback>:
  * @param  I2cHandle: I2C handle
  * @note	Turn LED2 on: Jika kirim data berhasil
  ***********************************************************************************/
#ifdef MASTER_BOARD
//Untuk MASTER BOARD
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2cHandle){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000b30:	2201      	movs	r2, #1
 8000b32:	2120      	movs	r1, #32
 8000b34:	4803      	ldr	r0, [pc, #12]	; (8000b44 <HAL_I2C_MasterTxCpltCallback+0x1c>)
 8000b36:	f003 fa79 	bl	800402c <HAL_GPIO_WritePin>
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40020000 	.word	0x40020000

08000b48 <HAL_I2C_MasterRxCpltCallback>:
  * @param  I2cHandle: I2C handle
  * @note	Turn LED2 on: Jika menerima data berhasil
  ************************************************************************************/
#ifdef MASTER_BOARD
// MASTER BOARD
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *I2cHandle) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000b50:	2201      	movs	r2, #1
 8000b52:	2120      	movs	r1, #32
 8000b54:	4803      	ldr	r0, [pc, #12]	; (8000b64 <HAL_I2C_MasterRxCpltCallback+0x1c>)
 8000b56:	f003 fa69 	bl	800402c <HAL_GPIO_WritePin>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40020000 	.word	0x40020000

08000b68 <HAL_I2C_ErrorCallback>:



/* @brief  I2C error callbacks
   @param  I2cHandle: I2C handle */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	printf("\r\nI2C ERROR \r\n\n");
 8000b70:	4805      	ldr	r0, [pc, #20]	; (8000b88 <HAL_I2C_ErrorCallback+0x20>)
 8000b72:	f007 fafb 	bl	800816c <puts>
	while(1) {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b76:	2120      	movs	r1, #32
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <HAL_I2C_ErrorCallback+0x24>)
 8000b7a:	f003 fa70 	bl	800405e <HAL_GPIO_TogglePin>
		HAL_Delay(20);
 8000b7e:	2014      	movs	r0, #20
 8000b80:	f002 fb7a 	bl	8003278 <HAL_Delay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b84:	e7f7      	b.n	8000b76 <HAL_I2C_ErrorCallback+0xe>
 8000b86:	bf00      	nop
 8000b88:	08009230 	.word	0x08009230
 8000b8c:	40020000 	.word	0x40020000

08000b90 <Buffercmp>:
  * @param  pBuffer1, pBuffer2: buffers to be compared.
  * @param  BufferLength: buffer's length
  * @retval 0  : pBuffer1 identical to pBuffer2
  *         >0 : pBuffer1 differs from pBuffer2
  */
static uint16_t Buffercmp(uint32_t pBuffer1[], uint32_t pBuffer2[], uint8_t length){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	71fb      	strb	r3, [r7, #7]
	printf("Compare prosess...\r\n");
 8000b9e:	480a      	ldr	r0, [pc, #40]	; (8000bc8 <Buffercmp+0x38>)
 8000ba0:	f007 fae4 	bl	800816c <puts>
	for (uint8_t i = 0; i <= length; i++){
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	75fb      	strb	r3, [r7, #23]
 8000ba8:	e002      	b.n	8000bb0 <Buffercmp+0x20>
 8000baa:	7dfb      	ldrb	r3, [r7, #23]
 8000bac:	3301      	adds	r3, #1
 8000bae:	75fb      	strb	r3, [r7, #23]
 8000bb0:	7dfa      	ldrb	r2, [r7, #23]
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d9f8      	bls.n	8000baa <Buffercmp+0x1a>
		if (pBuffer1[i]!=pBuffer1[i]){
			printf("Buffer different!!!\r\n");
			return i;
		}
	}
	printf("Buffer same!!!\r\n");
 8000bb8:	4804      	ldr	r0, [pc, #16]	; (8000bcc <Buffercmp+0x3c>)
 8000bba:	f007 fad7 	bl	800816c <puts>
	return 0;
 8000bbe:	2300      	movs	r3, #0
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3718      	adds	r7, #24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	08009240 	.word	0x08009240
 8000bcc:	08009254 	.word	0x08009254

08000bd0 <copyValue>:
	for (uint8_t i = 0; i <= length; i++){
		pBuffer[i+1] = pRes[i];
	}
}

void copyValue(uint32_t source[], uint32_t target[], uint8_t start, uint8_t length){
 8000bd0:	b480      	push	{r7}
 8000bd2:	b087      	sub	sp, #28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	4611      	mov	r1, r2
 8000bdc:	461a      	mov	r2, r3
 8000bde:	460b      	mov	r3, r1
 8000be0:	71fb      	strb	r3, [r7, #7]
 8000be2:	4613      	mov	r3, r2
 8000be4:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < length; i++){
 8000be6:	2300      	movs	r3, #0
 8000be8:	75fb      	strb	r3, [r7, #23]
 8000bea:	e00f      	b.n	8000c0c <copyValue+0x3c>
		target[i+1] = source[i+start];
 8000bec:	7dfa      	ldrb	r2, [r7, #23]
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	68fa      	ldr	r2, [r7, #12]
 8000bf6:	441a      	add	r2, r3
 8000bf8:	7dfb      	ldrb	r3, [r7, #23]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	68b9      	ldr	r1, [r7, #8]
 8000c00:	440b      	add	r3, r1
 8000c02:	6812      	ldr	r2, [r2, #0]
 8000c04:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < length; i++){
 8000c06:	7dfb      	ldrb	r3, [r7, #23]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	75fb      	strb	r3, [r7, #23]
 8000c0c:	7dfa      	ldrb	r2, [r7, #23]
 8000c0e:	79bb      	ldrb	r3, [r7, #6]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d3eb      	bcc.n	8000bec <copyValue+0x1c>
	}
}
 8000c14:	bf00      	nop
 8000c16:	bf00      	nop
 8000c18:	371c      	adds	r7, #28
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
	...

08000c24 <SystemClock_Config>:

/* @brief System Clock Configuration */
void SystemClock_Config(void) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b094      	sub	sp, #80	; 0x50
 8000c28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	2234      	movs	r2, #52	; 0x34
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f007 fa0c 	bl	8008050 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c38:	f107 0308 	add.w	r3, r7, #8
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c48:	2300      	movs	r3, #0
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	4b2a      	ldr	r3, [pc, #168]	; (8000cf8 <SystemClock_Config+0xd4>)
 8000c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c50:	4a29      	ldr	r2, [pc, #164]	; (8000cf8 <SystemClock_Config+0xd4>)
 8000c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c56:	6413      	str	r3, [r2, #64]	; 0x40
 8000c58:	4b27      	ldr	r3, [pc, #156]	; (8000cf8 <SystemClock_Config+0xd4>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c64:	2300      	movs	r3, #0
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	4b24      	ldr	r3, [pc, #144]	; (8000cfc <SystemClock_Config+0xd8>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c70:	4a22      	ldr	r2, [pc, #136]	; (8000cfc <SystemClock_Config+0xd8>)
 8000c72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c76:	6013      	str	r3, [r2, #0]
 8000c78:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <SystemClock_Config+0xd8>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c80:	603b      	str	r3, [r7, #0]
 8000c82:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.*/
  RCC_OscInitStruct.OscillatorType 		= RCC_OSCILLATORTYPE_HSI;
 8000c84:	2302      	movs	r3, #2
 8000c86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState 			= RCC_HSI_ON;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c8c:	2310      	movs	r3, #16
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState 		= RCC_PLL_ON;
 8000c90:	2302      	movs	r3, #2
 8000c92:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource 		= RCC_PLLSOURCE_HSI;
 8000c94:	2300      	movs	r3, #0
 8000c96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM 			= 16;
 8000c98:	2310      	movs	r3, #16
 8000c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN 			= 336;
 8000c9c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ca0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP 			= RCC_PLLP_DIV4;
 8000ca2:	2304      	movs	r3, #4
 8000ca4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ 			= 2;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR 			= 2;
 8000caa:	2302      	movs	r3, #2
 8000cac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f005 fc82 	bl	80065bc <HAL_RCC_OscConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000cbe:	f000 fb7d 	bl	80013bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc2:	230f      	movs	r3, #15
 8000cc4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK){
 8000cd8:	f107 0308 	add.w	r3, r7, #8
 8000cdc:	2105      	movs	r1, #5
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f005 f922 	bl	8005f28 <HAL_RCC_ClockConfig>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <SystemClock_Config+0xca>
    Error_Handler();
 8000cea:	f000 fb67 	bl	80013bc <Error_Handler>
  }
}
 8000cee:	bf00      	nop
 8000cf0:	3750      	adds	r7, #80	; 0x50
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40007000 	.word	0x40007000

08000d00 <MX_USART2_UART_Init>:

/* @brief USART2 Initialization Function*/
static void MX_USART2_UART_Init(void) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  huart2.Instance 			= USART2;
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <MX_USART2_UART_Init+0x58>)
 8000d06:	4a15      	ldr	r2, [pc, #84]	; (8000d5c <MX_USART2_UART_Init+0x5c>)
 8000d08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate 		= 115200;
 8000d0a:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <MX_USART2_UART_Init+0x58>)
 8000d0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength 	= UART_WORDLENGTH_8B;
 8000d12:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <MX_USART2_UART_Init+0x58>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits 		= UART_STOPBITS_1;
 8000d18:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <MX_USART2_UART_Init+0x58>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity 		= UART_PARITY_NONE;
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <MX_USART2_UART_Init+0x58>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode 			= UART_MODE_TX_RX;
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <MX_USART2_UART_Init+0x58>)
 8000d26:	220c      	movs	r2, #12
 8000d28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl 	= UART_HWCONTROL_NONE;
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <MX_USART2_UART_Init+0x58>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling 	= UART_OVERSAMPLING_16;
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <MX_USART2_UART_Init+0x58>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart2) != HAL_OK){
 8000d36:	4808      	ldr	r0, [pc, #32]	; (8000d58 <MX_USART2_UART_Init+0x58>)
 8000d38:	f005 fede 	bl	8006af8 <HAL_UART_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_USART2_UART_Init+0x46>
    Error_Handler();
 8000d42:	f000 fb3b 	bl	80013bc <Error_Handler>
  }

  #ifdef RX_EVENT_CB
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, u8arr_eventBuff, UART_BUF_SZ);
 8000d46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d4a:	4905      	ldr	r1, [pc, #20]	; (8000d60 <MX_USART2_UART_Init+0x60>)
 8000d4c:	4802      	ldr	r0, [pc, #8]	; (8000d58 <MX_USART2_UART_Init+0x58>)
 8000d4e:	f005 ffe2 	bl	8006d16 <HAL_UARTEx_ReceiveToIdle_DMA>
  #else
	serial_init();
  #endif
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200000f0 	.word	0x200000f0
 8000d5c:	40004400 	.word	0x40004400
 8000d60:	200002b8 	.word	0x200002b8

08000d64 <MX_DMA_Init>:


static void MX_DMA_Init(void) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <MX_DMA_Init+0x3c>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a0b      	ldr	r2, [pc, #44]	; (8000da0 <MX_DMA_Init+0x3c>)
 8000d74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <MX_DMA_Init+0x3c>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2010      	movs	r0, #16
 8000d8c:	f002 fb73 	bl	8003476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d90:	2010      	movs	r0, #16
 8000d92:	f002 fb8c 	bl	80034ae <HAL_NVIC_EnableIRQ>
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800

08000da4 <MX_GPIO_Init>:

/* @brief GPIO Initialization Function*/
static void MX_GPIO_Init(void) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	4b2d      	ldr	r3, [pc, #180]	; (8000e74 <MX_GPIO_Init+0xd0>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a2c      	ldr	r2, [pc, #176]	; (8000e74 <MX_GPIO_Init+0xd0>)
 8000dc4:	f043 0304 	orr.w	r3, r3, #4
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b2a      	ldr	r3, [pc, #168]	; (8000e74 <MX_GPIO_Init+0xd0>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0304 	and.w	r3, r3, #4
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	4b26      	ldr	r3, [pc, #152]	; (8000e74 <MX_GPIO_Init+0xd0>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a25      	ldr	r2, [pc, #148]	; (8000e74 <MX_GPIO_Init+0xd0>)
 8000de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b23      	ldr	r3, [pc, #140]	; (8000e74 <MX_GPIO_Init+0xd0>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <MX_GPIO_Init+0xd0>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a1e      	ldr	r2, [pc, #120]	; (8000e74 <MX_GPIO_Init+0xd0>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <MX_GPIO_Init+0xd0>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <MX_GPIO_Init+0xd0>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a17      	ldr	r2, [pc, #92]	; (8000e74 <MX_GPIO_Init+0xd0>)
 8000e18:	f043 0302 	orr.w	r3, r3, #2
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <MX_GPIO_Init+0xd0>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0302 	and.w	r3, r3, #2
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2120      	movs	r1, #32
 8000e2e:	4812      	ldr	r0, [pc, #72]	; (8000e78 <MX_GPIO_Init+0xd4>)
 8000e30:	f003 f8fc 	bl	800402c <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin 		= B1_Pin;
 8000e34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 8000e3a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4619      	mov	r1, r3
 8000e4a:	480c      	ldr	r0, [pc, #48]	; (8000e7c <MX_GPIO_Init+0xd8>)
 8000e4c:	f002 ff5a 	bl	8003d04 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin 		= LD2_Pin;
 8000e50:	2320      	movs	r3, #32
 8000e52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode 		= GPIO_MODE_OUTPUT_PP;
 8000e54:	2301      	movs	r3, #1
 8000e56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed 	= GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4619      	mov	r1, r3
 8000e66:	4804      	ldr	r0, [pc, #16]	; (8000e78 <MX_GPIO_Init+0xd4>)
 8000e68:	f002 ff4c 	bl	8003d04 <HAL_GPIO_Init>
}
 8000e6c:	bf00      	nop
 8000e6e:	3728      	adds	r7, #40	; 0x28
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40020000 	.word	0x40020000
 8000e7c:	40020800 	.word	0x40020800

08000e80 <tinysh_dec>:

/*********************************************************************
 * @name	: tinysh_dec
 * @brief	: string to decimal conversion (up to 15 chars).
 *********************************************************************/
long tinysh_dec(char *s) {
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  unsigned long res=0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60fb      	str	r3, [r7, #12]
  uint8_t index = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	72fb      	strb	r3, [r7, #11]
  int8_t min	= 1;			//Penanda masukan - atau +
 8000e90:	2301      	movs	r3, #1
 8000e92:	72bb      	strb	r3, [r7, #10]

  while(*s) {
 8000e94:	e031      	b.n	8000efa <tinysh_dec+0x7a>
	  res*=10;					//berfungsi menjadikan result kelipatan pangkat 10 (menjadikan puluhan)
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	4413      	add	r3, r2
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	60fb      	str	r3, [r7, #12]

	  if((*s == '-')&&(index == 0))			// jika inputan negatif
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b2d      	cmp	r3, #45	; 0x2d
 8000ea8:	d105      	bne.n	8000eb6 <tinysh_dec+0x36>
 8000eaa:	7afb      	ldrb	r3, [r7, #11]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d102      	bne.n	8000eb6 <tinysh_dec+0x36>
		  min = -1;
 8000eb0:	23ff      	movs	r3, #255	; 0xff
 8000eb2:	72bb      	strb	r3, [r7, #10]
 8000eb4:	e018      	b.n	8000ee8 <tinysh_dec+0x68>
	  else if((*s == '0')&&(index == 0))	// jika inputan 0
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b30      	cmp	r3, #48	; 0x30
 8000ebc:	d105      	bne.n	8000eca <tinysh_dec+0x4a>
 8000ebe:	7afb      	ldrb	r3, [r7, #11]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d102      	bne.n	8000eca <tinysh_dec+0x4a>
		  res = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	e00e      	b.n	8000ee8 <tinysh_dec+0x68>
	  else if(*s>='0' && *s<='9')			// jika inputan normal
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b2f      	cmp	r3, #47	; 0x2f
 8000ed0:	d919      	bls.n	8000f06 <tinysh_dec+0x86>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b39      	cmp	r3, #57	; 0x39
 8000ed8:	d815      	bhi.n	8000f06 <tinysh_dec+0x86>
		  res+=*s-'0';			//bagian ini berfungsi mengurangi ascii inputna dengan ascii 0 sehingga didapat nilai integer sesungguhnya
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	3b30      	subs	r3, #48	; 0x30
 8000ee6:	60fb      	str	r3, [r7, #12]
	  else
		  break;

	  s++;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3301      	adds	r3, #1
 8000eec:	607b      	str	r3, [r7, #4]
	  index++;
 8000eee:	7afb      	ldrb	r3, [r7, #11]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	72fb      	strb	r3, [r7, #11]

	  if(index > 15)
 8000ef4:	7afb      	ldrb	r3, [r7, #11]
 8000ef6:	2b0f      	cmp	r3, #15
 8000ef8:	d804      	bhi.n	8000f04 <tinysh_dec+0x84>
  while(*s) {
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d1c9      	bne.n	8000e96 <tinysh_dec+0x16>
 8000f02:	e000      	b.n	8000f06 <tinysh_dec+0x86>
	  {
		 break;
 8000f04:	bf00      	nop
	  }
  }

  return (res * min);
 8000f06:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	fb02 f303 	mul.w	r3, r2, r3
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <vShell_cmdParse>:

/********************************************************
 * 	Parsing incoming message						   	*
 ********************************************************/
static void vShell_cmdParse(char *input) {
 8000f1c:	b590      	push	{r4, r7, lr}
 8000f1e:	b08d      	sub	sp, #52	; 0x34
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	for(uint8_t u8_idx = 0; u8_idx < CFG_HEADER_NUM; u8_idx++) {
 8000f24:	2300      	movs	r3, #0
 8000f26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000f2a:	e18f      	b.n	800124c <vShell_cmdParse+0x330>
		if(!memcmp(input,(char*)&str_cfg_header[u8_idx][0], CFG_HEADER_CHARS_LEN)) {
 8000f2c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000f30:	4613      	mov	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	4aab      	ldr	r2, [pc, #684]	; (80011e4 <vShell_cmdParse+0x2c8>)
 8000f38:	4413      	add	r3, r2
 8000f3a:	2205      	movs	r2, #5
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f007 f868 	bl	8008014 <memcmp>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	f040 817b 	bne.w	8001242 <vShell_cmdParse+0x326>
			char *pChar 		= &input[CFG_HEADER_CHARS_LEN];		//pointer untuk menyimpan header (5 char)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3305      	adds	r3, #5
 8000f50:	62bb      	str	r3, [r7, #40]	; 0x28
			char *pChar2 		= &input[CFG_HEADER_CHARS_LEN];		//pointer untuk menyimpan header (5 char)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3305      	adds	r3, #5
 8000f56:	61fb      	str	r3, [r7, #28]
			uint8_t u8_start 	= 0;			// ini penanda yang akan bergeser tiap indeks (menandai lokasi dari sparating symboll)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			uint8_t u8_stop 	= 0;			// ini penenda start pointer paling awal atau awal baru setelah sparating symboll
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			uint8_t u8_cnt 		= 0;			// menampung ada berapa sih inputan nya
 8000f64:	2300      	movs	r3, #0
 8000f66:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

			char str_res[20];

			if (u8_idx==1) {
 8000f6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d107      	bne.n	8000f82 <vShell_cmdParse+0x66>
				bitFlag |= BFLAG_I2C_RSL;
 8000f72:	4b9d      	ldr	r3, [pc, #628]	; (80011e8 <vShell_cmdParse+0x2cc>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	f043 0302 	orr.w	r3, r3, #2
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	4b9a      	ldr	r3, [pc, #616]	; (80011e8 <vShell_cmdParse+0x2cc>)
 8000f7e:	701a      	strb	r2, [r3, #0]
 8000f80:	e15f      	b.n	8001242 <vShell_cmdParse+0x326>
			}

			else if (u8_idx == 5){		//{RD0}
 8000f82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f86:	2b05      	cmp	r3, #5
 8000f88:	d107      	bne.n	8000f9a <vShell_cmdParse+0x7e>
				/* READ HEADER */
				bitFlag |= BFLAG_I2C_RD0;
 8000f8a:	4b97      	ldr	r3, [pc, #604]	; (80011e8 <vShell_cmdParse+0x2cc>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	f043 0304 	orr.w	r3, r3, #4
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	4b94      	ldr	r3, [pc, #592]	; (80011e8 <vShell_cmdParse+0x2cc>)
 8000f96:	701a      	strb	r2, [r3, #0]
 8000f98:	e153      	b.n	8001242 <vShell_cmdParse+0x326>
			}

			/* READ HEADER */
			else if (u8_idx == 6){ 		//{RD1} Read from res1
 8000f9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f9e:	2b06      	cmp	r3, #6
 8000fa0:	d10a      	bne.n	8000fb8 <vShell_cmdParse+0x9c>
				aTxBuffer[0]=4;
 8000fa2:	4b92      	ldr	r3, [pc, #584]	; (80011ec <vShell_cmdParse+0x2d0>)
 8000fa4:	2204      	movs	r2, #4
 8000fa6:	601a      	str	r2, [r3, #0]
				bitFlag |= BFLAG_I2C_WR1;
 8000fa8:	4b8f      	ldr	r3, [pc, #572]	; (80011e8 <vShell_cmdParse+0x2cc>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	f043 0310 	orr.w	r3, r3, #16
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4b8d      	ldr	r3, [pc, #564]	; (80011e8 <vShell_cmdParse+0x2cc>)
 8000fb4:	701a      	strb	r2, [r3, #0]
 8000fb6:	e144      	b.n	8001242 <vShell_cmdParse+0x326>
			}
			else if (u8_idx == 7){ 		//{RD2} Read from res2
 8000fb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000fbc:	2b07      	cmp	r3, #7
 8000fbe:	d10a      	bne.n	8000fd6 <vShell_cmdParse+0xba>
				aTxBuffer[0]=5;
 8000fc0:	4b8a      	ldr	r3, [pc, #552]	; (80011ec <vShell_cmdParse+0x2d0>)
 8000fc2:	2205      	movs	r2, #5
 8000fc4:	601a      	str	r2, [r3, #0]
				bitFlag |= BFLAG_I2C_WR1;
 8000fc6:	4b88      	ldr	r3, [pc, #544]	; (80011e8 <vShell_cmdParse+0x2cc>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	f043 0310 	orr.w	r3, r3, #16
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	4b85      	ldr	r3, [pc, #532]	; (80011e8 <vShell_cmdParse+0x2cc>)
 8000fd2:	701a      	strb	r2, [r3, #0]
 8000fd4:	e135      	b.n	8001242 <vShell_cmdParse+0x326>
			}
			else if (u8_idx == 8){		//{RD3} Read from res3
 8000fd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000fda:	2b08      	cmp	r3, #8
 8000fdc:	d10a      	bne.n	8000ff4 <vShell_cmdParse+0xd8>
				aTxBuffer[0]=6;
 8000fde:	4b83      	ldr	r3, [pc, #524]	; (80011ec <vShell_cmdParse+0x2d0>)
 8000fe0:	2206      	movs	r2, #6
 8000fe2:	601a      	str	r2, [r3, #0]
				bitFlag |= BFLAG_I2C_WR1;
 8000fe4:	4b80      	ldr	r3, [pc, #512]	; (80011e8 <vShell_cmdParse+0x2cc>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	f043 0310 	orr.w	r3, r3, #16
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4b7e      	ldr	r3, [pc, #504]	; (80011e8 <vShell_cmdParse+0x2cc>)
 8000ff0:	701a      	strb	r2, [r3, #0]
 8000ff2:	e126      	b.n	8001242 <vShell_cmdParse+0x326>
			}

			else if (u8_idx == 9){		//{WRA: Read all
 8000ff4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ff8:	2b09      	cmp	r3, #9
 8000ffa:	f040 8086 	bne.w	800110a <vShell_cmdParse+0x1ee>
				for (uint8_t i=0; i<30; i++){
 8000ffe:	2300      	movs	r3, #0
 8001000:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001004:	e00a      	b.n	800101c <vShell_cmdParse+0x100>
					temp[i] = 0;
 8001006:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800100a:	4a79      	ldr	r2, [pc, #484]	; (80011f0 <vShell_cmdParse+0x2d4>)
 800100c:	2100      	movs	r1, #0
 800100e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (uint8_t i=0; i<30; i++){
 8001012:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001016:	3301      	adds	r3, #1
 8001018:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800101c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001020:	2b1d      	cmp	r3, #29
 8001022:	d9f0      	bls.n	8001006 <vShell_cmdParse+0xea>
				}

				while (*pChar) {
 8001024:	e06c      	b.n	8001100 <vShell_cmdParse+0x1e4>
					if(*pChar == ';' || *pChar == '}') {
 8001026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b3b      	cmp	r3, #59	; 0x3b
 800102c:	d003      	beq.n	8001036 <vShell_cmdParse+0x11a>
 800102e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b7d      	cmp	r3, #125	; 0x7d
 8001034:	d15c      	bne.n	80010f0 <vShell_cmdParse+0x1d4>
						memset(&str_res[0], 0, 20);		// default/reset untuk mendeklarasikan array str_res akan bernilai 0 semua sebanyak 10 indeks mulai dari str_res[0]
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	2214      	movs	r2, #20
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f007 f806 	bl	8008050 <memset>
						memcpy(&str_res[0], &pChar2[u8_stop], u8_start - u8_stop);	// mengcopy data array dari pChar2[u8_stop] sejumlah (u8_start - u8_stop0 char menuju str_res
 8001044:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001048:	69fa      	ldr	r2, [r7, #28]
 800104a:	18d1      	adds	r1, r2, r3
 800104c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001050:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	461a      	mov	r2, r3
 8001058:	f107 0308 	add.w	r3, r7, #8
 800105c:	4618      	mov	r0, r3
 800105e:	f006 ffe9 	bl	8008034 <memcpy>

						if(strlen(str_res)>0){
 8001062:	f107 0308 	add.w	r3, r7, #8
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d00a      	beq.n	8001082 <vShell_cmdParse+0x166>
							temp[u8_cnt] = tinysh_dec(&str_res[0]);
 800106c:	f897 4025 	ldrb.w	r4, [r7, #37]	; 0x25
 8001070:	f107 0308 	add.w	r3, r7, #8
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff03 	bl	8000e80 <tinysh_dec>
 800107a:	4603      	mov	r3, r0
 800107c:	4a5c      	ldr	r2, [pc, #368]	; (80011f0 <vShell_cmdParse+0x2d4>)
 800107e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
						}

						if(*pChar == ';') { u8_stop = u8_start + 1; }
 8001082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b3b      	cmp	r3, #59	; 0x3b
 8001088:	d105      	bne.n	8001096 <vShell_cmdParse+0x17a>
 800108a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800108e:	3301      	adds	r3, #1
 8001090:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001094:	e027      	b.n	80010e6 <vShell_cmdParse+0x1ca>
						else if(*pChar == '}') {
 8001096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b7d      	cmp	r3, #125	; 0x7d
 800109c:	d123      	bne.n	80010e6 <vShell_cmdParse+0x1ca>
							for (uint8_t i=0; i<10; i++){
 800109e:	2300      	movs	r3, #0
 80010a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80010a4:	e00b      	b.n	80010be <vShell_cmdParse+0x1a2>
								aTxBuffer[i+1] = 0;
 80010a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010aa:	3301      	adds	r3, #1
 80010ac:	4a4f      	ldr	r2, [pc, #316]	; (80011ec <vShell_cmdParse+0x2d0>)
 80010ae:	2100      	movs	r1, #0
 80010b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							for (uint8_t i=0; i<10; i++){
 80010b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010b8:	3301      	adds	r3, #1
 80010ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80010be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010c2:	2b09      	cmp	r3, #9
 80010c4:	d9ef      	bls.n	80010a6 <vShell_cmdParse+0x18a>
							}

							copyValue(temp, aTxBuffer, 0, 10);
 80010c6:	230a      	movs	r3, #10
 80010c8:	2200      	movs	r2, #0
 80010ca:	4948      	ldr	r1, [pc, #288]	; (80011ec <vShell_cmdParse+0x2d0>)
 80010cc:	4848      	ldr	r0, [pc, #288]	; (80011f0 <vShell_cmdParse+0x2d4>)
 80010ce:	f7ff fd7f 	bl	8000bd0 <copyValue>
							aTxBuffer[0]=7;
 80010d2:	4b46      	ldr	r3, [pc, #280]	; (80011ec <vShell_cmdParse+0x2d0>)
 80010d4:	2207      	movs	r2, #7
 80010d6:	601a      	str	r2, [r3, #0]
							bitFlag |= BFLAG_I2C_WR1;
 80010d8:	4b43      	ldr	r3, [pc, #268]	; (80011e8 <vShell_cmdParse+0x2cc>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	f043 0310 	orr.w	r3, r3, #16
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4b41      	ldr	r3, [pc, #260]	; (80011e8 <vShell_cmdParse+0x2cc>)
 80010e4:	701a      	strb	r2, [r3, #0]
						}
						u8_cnt++;
 80010e6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80010ea:	3301      	adds	r3, #1
 80010ec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					}
					pChar++;
 80010f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f2:	3301      	adds	r3, #1
 80010f4:	62bb      	str	r3, [r7, #40]	; 0x28
					u8_start++;
 80010f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010fa:	3301      	adds	r3, #1
 80010fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				while (*pChar) {
 8001100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d18e      	bne.n	8001026 <vShell_cmdParse+0x10a>
				}
				break;
 8001108:	e0a6      	b.n	8001258 <vShell_cmdParse+0x33c>
			}

			else if ((u8_idx > 0) && (u8_idx < 5)) {
 800110a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800110e:	2b00      	cmp	r3, #0
 8001110:	f000 8097 	beq.w	8001242 <vShell_cmdParse+0x326>
 8001114:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001118:	2b04      	cmp	r3, #4
 800111a:	f200 8092 	bhi.w	8001242 <vShell_cmdParse+0x326>
				/* Reset TX Buffer from index 1 to 10*/
				for (uint8_t i=0; i<10; i++){
 800111e:	2300      	movs	r3, #0
 8001120:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001124:	e00b      	b.n	800113e <vShell_cmdParse+0x222>
					aTxBuffer[i+1] = 0;
 8001126:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800112a:	3301      	adds	r3, #1
 800112c:	4a2f      	ldr	r2, [pc, #188]	; (80011ec <vShell_cmdParse+0x2d0>)
 800112e:	2100      	movs	r1, #0
 8001130:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (uint8_t i=0; i<10; i++){
 8001134:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001138:	3301      	adds	r3, #1
 800113a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800113e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001142:	2b09      	cmp	r3, #9
 8001144:	d9ef      	bls.n	8001126 <vShell_cmdParse+0x20a>
				}

				/* WRITE HEADER */
				while (*pChar) {
 8001146:	e077      	b.n	8001238 <vShell_cmdParse+0x31c>
					if(*pChar == ';' || *pChar == '}') {
 8001148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b3b      	cmp	r3, #59	; 0x3b
 800114e:	d003      	beq.n	8001158 <vShell_cmdParse+0x23c>
 8001150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b7d      	cmp	r3, #125	; 0x7d
 8001156:	d167      	bne.n	8001228 <vShell_cmdParse+0x30c>
						memset(&str_res[0], 0, 20);		// default/reset untuk mendeklarasikan array str_res akan bernilai 0 semua sebanyak 10 indeks mulai dari str_res[0]
 8001158:	f107 0308 	add.w	r3, r7, #8
 800115c:	2214      	movs	r2, #20
 800115e:	2100      	movs	r1, #0
 8001160:	4618      	mov	r0, r3
 8001162:	f006 ff75 	bl	8008050 <memset>
						memcpy(&str_res[0], &pChar2[u8_stop], u8_start - u8_stop);	// mengcopy data array dari pChar2[u8_stop] sejumlah (u8_start - u8_stop0 char menuju str_res
 8001166:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800116a:	69fa      	ldr	r2, [r7, #28]
 800116c:	18d1      	adds	r1, r2, r3
 800116e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001172:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	461a      	mov	r2, r3
 800117a:	f107 0308 	add.w	r3, r7, #8
 800117e:	4618      	mov	r0, r3
 8001180:	f006 ff58 	bl	8008034 <memcpy>

						if(strlen(str_res)>0){
 8001184:	f107 0308 	add.w	r3, r7, #8
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d00b      	beq.n	80011a6 <vShell_cmdParse+0x28a>
							aTxBuffer[u8_cnt+1] = tinysh_dec(&str_res[0]);
 800118e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001192:	1c5c      	adds	r4, r3, #1
 8001194:	f107 0308 	add.w	r3, r7, #8
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fe71 	bl	8000e80 <tinysh_dec>
 800119e:	4603      	mov	r3, r0
 80011a0:	4a12      	ldr	r2, [pc, #72]	; (80011ec <vShell_cmdParse+0x2d0>)
 80011a2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
						}

						if(*pChar == ';') { u8_stop = u8_start + 1; }
 80011a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b3b      	cmp	r3, #59	; 0x3b
 80011ac:	d105      	bne.n	80011ba <vShell_cmdParse+0x29e>
 80011ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011b2:	3301      	adds	r3, #1
 80011b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80011b8:	e031      	b.n	800121e <vShell_cmdParse+0x302>
						else if(*pChar == '}') {
 80011ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b7d      	cmp	r3, #125	; 0x7d
 80011c0:	d12d      	bne.n	800121e <vShell_cmdParse+0x302>
							if (u8_idx == 2){ // {WR1: Write at form 1
 80011c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d103      	bne.n	80011d2 <vShell_cmdParse+0x2b6>
								/*Set first index as a trigger for slave*/
								aTxBuffer[0]=1;
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <vShell_cmdParse+0x2d0>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	e017      	b.n	8001202 <vShell_cmdParse+0x2e6>
							}
							else if (u8_idx == 3){ // {WR2: Write at form 2
 80011d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	d10c      	bne.n	80011f4 <vShell_cmdParse+0x2d8>
								aTxBuffer[0]=2;
 80011da:	4b04      	ldr	r3, [pc, #16]	; (80011ec <vShell_cmdParse+0x2d0>)
 80011dc:	2202      	movs	r2, #2
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	e00f      	b.n	8001202 <vShell_cmdParse+0x2e6>
 80011e2:	bf00      	nop
 80011e4:	2000002c 	.word	0x2000002c
 80011e8:	200004bc 	.word	0x200004bc
 80011ec:	20000000 	.word	0x20000000
 80011f0:	200001e8 	.word	0x200001e8
							}
							else if (u8_idx == 4){ // {WR3: Write at form 3
 80011f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011f8:	2b04      	cmp	r3, #4
 80011fa:	d102      	bne.n	8001202 <vShell_cmdParse+0x2e6>
								aTxBuffer[0]=3;
 80011fc:	4b18      	ldr	r3, [pc, #96]	; (8001260 <vShell_cmdParse+0x344>)
 80011fe:	2203      	movs	r2, #3
 8001200:	601a      	str	r2, [r3, #0]
							}
							bitFlag |= BFLAG_I2C_WR1;
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <vShell_cmdParse+0x348>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	f043 0310 	orr.w	r3, r3, #16
 800120a:	b2da      	uxtb	r2, r3
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <vShell_cmdParse+0x348>)
 800120e:	701a      	strb	r2, [r3, #0]
							bitFlag |= BFLAG_I2C_RD0;
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <vShell_cmdParse+0x348>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	f043 0304 	orr.w	r3, r3, #4
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4b12      	ldr	r3, [pc, #72]	; (8001264 <vShell_cmdParse+0x348>)
 800121c:	701a      	strb	r2, [r3, #0]
						}
						u8_cnt++;
 800121e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001222:	3301      	adds	r3, #1
 8001224:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					}
					pChar++;
 8001228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800122a:	3301      	adds	r3, #1
 800122c:	62bb      	str	r3, [r7, #40]	; 0x28
					u8_start++;
 800122e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001232:	3301      	adds	r3, #1
 8001234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				while (*pChar) {
 8001238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d183      	bne.n	8001148 <vShell_cmdParse+0x22c>
				}
				break;
 8001240:	e00a      	b.n	8001258 <vShell_cmdParse+0x33c>
	for(uint8_t u8_idx = 0; u8_idx < CFG_HEADER_NUM; u8_idx++) {
 8001242:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001246:	3301      	adds	r3, #1
 8001248:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800124c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001250:	2b0a      	cmp	r3, #10
 8001252:	f67f ae6b 	bls.w	8000f2c <vShell_cmdParse+0x10>
			}
		}
	}
}
 8001256:	bf00      	nop
 8001258:	bf00      	nop
 800125a:	3734      	adds	r7, #52	; 0x34
 800125c:	46bd      	mov	sp, r7
 800125e:	bd90      	pop	{r4, r7, pc}
 8001260:	20000000 	.word	0x20000000
 8001264:	200004bc 	.word	0x200004bc

08001268 <uartProcessing>:

void uartProcessing (uint8_t *u8p_buffer, uint16_t u16_size){
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	807b      	strh	r3, [r7, #2]
	//Bagian ini akan dipanggil di serial.c, line 57
	//printf("UART jalan\r\n"); // Harusnya bisa langsung jalan kalo di konek lewat UI
	vShell_cmdParse((char*)u8p_buffer);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff fe51 	bl	8000f1c <vShell_cmdParse>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <vUAFE_uart_handle>:
/*****************************************************************
 * @name 	vUAFE_uart_handle
 * @brief	handle afe uart data copy
 ****************************************************************/
static void vUAFE_uart_handle(uint16_t Size)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	80fb      	strh	r3, [r7, #6]
	uint16_t u16_numData;

	/* Check if number of received data in reception buffer has changed */
	if (Size != u16_oldPos)
 800128e:	4b36      	ldr	r3, [pc, #216]	; (8001368 <vUAFE_uart_handle+0xe4>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	88fa      	ldrh	r2, [r7, #6]
 8001294:	429a      	cmp	r2, r3
 8001296:	d05f      	beq.n	8001358 <vUAFE_uart_handle+0xd4>
	{
		if (Size > u16_oldPos)
 8001298:	4b33      	ldr	r3, [pc, #204]	; (8001368 <vUAFE_uart_handle+0xe4>)
 800129a:	881b      	ldrh	r3, [r3, #0]
 800129c:	88fa      	ldrh	r2, [r7, #6]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d91a      	bls.n	80012d8 <vUAFE_uart_handle+0x54>
		{
			/* Current position is higher than previous one */
			u16_numData = Size - u16_oldPos;
 80012a2:	4b31      	ldr	r3, [pc, #196]	; (8001368 <vUAFE_uart_handle+0xe4>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	88fa      	ldrh	r2, [r7, #6]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	81fb      	strh	r3, [r7, #14]
			memcpy(&u8arr_uartEvent[u16_lenCnt],&u8arr_eventBuff[u16_oldPos],u16_numData);
 80012ac:	4b2f      	ldr	r3, [pc, #188]	; (800136c <vUAFE_uart_handle+0xe8>)
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b2f      	ldr	r3, [pc, #188]	; (8001370 <vUAFE_uart_handle+0xec>)
 80012b4:	4413      	add	r3, r2
 80012b6:	4a2c      	ldr	r2, [pc, #176]	; (8001368 <vUAFE_uart_handle+0xe4>)
 80012b8:	8812      	ldrh	r2, [r2, #0]
 80012ba:	4611      	mov	r1, r2
 80012bc:	4a2d      	ldr	r2, [pc, #180]	; (8001374 <vUAFE_uart_handle+0xf0>)
 80012be:	4411      	add	r1, r2
 80012c0:	89fa      	ldrh	r2, [r7, #14]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f006 feb6 	bl	8008034 <memcpy>
			u16_lenCnt += u16_numData;
 80012c8:	4b28      	ldr	r3, [pc, #160]	; (800136c <vUAFE_uart_handle+0xe8>)
 80012ca:	881a      	ldrh	r2, [r3, #0]
 80012cc:	89fb      	ldrh	r3, [r7, #14]
 80012ce:	4413      	add	r3, r2
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	4b26      	ldr	r3, [pc, #152]	; (800136c <vUAFE_uart_handle+0xe8>)
 80012d4:	801a      	strh	r2, [r3, #0]
 80012d6:	e02a      	b.n	800132e <vUAFE_uart_handle+0xaa>
		}
		else
		{
			/* End of buffer has been reached */
			u16_numData = UART_BUF_SZ - u16_oldPos;
 80012d8:	4b23      	ldr	r3, [pc, #140]	; (8001368 <vUAFE_uart_handle+0xe4>)
 80012da:	881b      	ldrh	r3, [r3, #0]
 80012dc:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80012e0:	81fb      	strh	r3, [r7, #14]

			memcpy (&u8arr_uartEvent[u16_lenCnt], 			// copy data in that remaining space
 80012e2:	4b22      	ldr	r3, [pc, #136]	; (800136c <vUAFE_uart_handle+0xe8>)
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	461a      	mov	r2, r3
 80012e8:	4b21      	ldr	r3, [pc, #132]	; (8001370 <vUAFE_uart_handle+0xec>)
 80012ea:	4413      	add	r3, r2
					&u8arr_eventBuff[u16_oldPos],
 80012ec:	4a1e      	ldr	r2, [pc, #120]	; (8001368 <vUAFE_uart_handle+0xe4>)
 80012ee:	8812      	ldrh	r2, [r2, #0]
 80012f0:	4611      	mov	r1, r2
 80012f2:	4a20      	ldr	r2, [pc, #128]	; (8001374 <vUAFE_uart_handle+0xf0>)
 80012f4:	4411      	add	r1, r2
			memcpy (&u8arr_uartEvent[u16_lenCnt], 			// copy data in that remaining space
 80012f6:	89fa      	ldrh	r2, [r7, #14]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f006 fe9b 	bl	8008034 <memcpy>
					u16_numData);

			u16_lenCnt += u16_numData;
 80012fe:	4b1b      	ldr	r3, [pc, #108]	; (800136c <vUAFE_uart_handle+0xe8>)
 8001300:	881a      	ldrh	r2, [r3, #0]
 8001302:	89fb      	ldrh	r3, [r7, #14]
 8001304:	4413      	add	r3, r2
 8001306:	b29a      	uxth	r2, r3
 8001308:	4b18      	ldr	r3, [pc, #96]	; (800136c <vUAFE_uart_handle+0xe8>)
 800130a:	801a      	strh	r2, [r3, #0]

			memcpy (&u8arr_uartEvent[u16_lenCnt], 			// copy the remaining data
 800130c:	4b17      	ldr	r3, [pc, #92]	; (800136c <vUAFE_uart_handle+0xe8>)
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	4b17      	ldr	r3, [pc, #92]	; (8001370 <vUAFE_uart_handle+0xec>)
 8001314:	4413      	add	r3, r2
 8001316:	88fa      	ldrh	r2, [r7, #6]
 8001318:	4916      	ldr	r1, [pc, #88]	; (8001374 <vUAFE_uart_handle+0xf0>)
 800131a:	4618      	mov	r0, r3
 800131c:	f006 fe8a 	bl	8008034 <memcpy>
					&u8arr_eventBuff[0],
					Size);

			u16_lenCnt += Size;
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <vUAFE_uart_handle+0xe8>)
 8001322:	881a      	ldrh	r2, [r3, #0]
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	4413      	add	r3, r2
 8001328:	b29a      	uxth	r2, r3
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <vUAFE_uart_handle+0xe8>)
 800132c:	801a      	strh	r2, [r3, #0]
		}

		/* Check for ready to process */
		if((u8arr_uartEvent[u16_lenCnt - 1] == '\n')&&(u8arr_uartEvent[u16_lenCnt - 2]== '\r'))
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <vUAFE_uart_handle+0xe8>)
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	3b01      	subs	r3, #1
 8001334:	4a0e      	ldr	r2, [pc, #56]	; (8001370 <vUAFE_uart_handle+0xec>)
 8001336:	5cd3      	ldrb	r3, [r2, r3]
 8001338:	2b0a      	cmp	r3, #10
 800133a:	d10d      	bne.n	8001358 <vUAFE_uart_handle+0xd4>
 800133c:	4b0b      	ldr	r3, [pc, #44]	; (800136c <vUAFE_uart_handle+0xe8>)
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	3b02      	subs	r3, #2
 8001342:	4a0b      	ldr	r2, [pc, #44]	; (8001370 <vUAFE_uart_handle+0xec>)
 8001344:	5cd3      	ldrb	r3, [r2, r3]
 8001346:	2b0d      	cmp	r3, #13
 8001348:	d106      	bne.n	8001358 <vUAFE_uart_handle+0xd4>
		{
			bitFlag |= BFLAG_UART_RCV;
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <vUAFE_uart_handle+0xf4>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	b2da      	uxtb	r2, r3
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <vUAFE_uart_handle+0xf4>)
 8001356:	701a      	strb	r2, [r3, #0]
		}

	}

	u16_oldPos = Size;
 8001358:	4a03      	ldr	r2, [pc, #12]	; (8001368 <vUAFE_uart_handle+0xe4>)
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	8013      	strh	r3, [r2, #0]
}
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200004b8 	.word	0x200004b8
 800136c:	200004ba 	.word	0x200004ba
 8001370:	200003b8 	.word	0x200003b8
 8001374:	200002b8 	.word	0x200002b8
 8001378:	200004bc 	.word	0x200004bc

0800137c <HAL_UARTEx_RxEventCallback>:
/*****************************************************************
 * @name HAL_UARTEx_RxEventCallback
 * @brief
 ****************************************************************/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]
	#ifdef RX_EVENT_CB
		if (huart->Instance == USART2)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a08      	ldr	r2, [pc, #32]	; (80013b0 <HAL_UARTEx_RxEventCallback+0x34>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d109      	bne.n	80013a6 <HAL_UARTEx_RxEventCallback+0x2a>
		{
			vUAFE_uart_handle(Size);
 8001392:	887b      	ldrh	r3, [r7, #2]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff75 	bl	8001284 <vUAFE_uart_handle>
			HAL_UARTEx_ReceiveToIdle_DMA(&huart2, u8arr_eventBuff, UART_BUF_SZ);
 800139a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800139e:	4905      	ldr	r1, [pc, #20]	; (80013b4 <HAL_UARTEx_RxEventCallback+0x38>)
 80013a0:	4805      	ldr	r0, [pc, #20]	; (80013b8 <HAL_UARTEx_RxEventCallback+0x3c>)
 80013a2:	f005 fcb8 	bl	8006d16 <HAL_UARTEx_ReceiveToIdle_DMA>
		}
	#endif
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40004400 	.word	0x40004400
 80013b4:	200002b8 	.word	0x200002b8
 80013b8:	200000f0 	.word	0x200000f0

080013bc <Error_Handler>:


/*******************************************************************
  * @brief  This function is executed in case of error occurrence.
  ******************************************************************/
void Error_Handler(void) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  printf("\r\nerror handler!!!\r\n");
 80013c0:	4806      	ldr	r0, [pc, #24]	; (80013dc <Error_Handler+0x20>)
 80013c2:	f006 fed3 	bl	800816c <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c6:	b672      	cpsid	i
}
 80013c8:	bf00      	nop
  __disable_irq();

  while (1) {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80013ca:	2120      	movs	r1, #32
 80013cc:	4804      	ldr	r0, [pc, #16]	; (80013e0 <Error_Handler+0x24>)
 80013ce:	f002 fe46 	bl	800405e <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 80013d2:	2032      	movs	r0, #50	; 0x32
 80013d4:	f001 ff50 	bl	8003278 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80013d8:	e7f7      	b.n	80013ca <Error_Handler+0xe>
 80013da:	bf00      	nop
 80013dc:	08009264 	.word	0x08009264
 80013e0:	40020000 	.word	0x40020000

080013e4 <serial_init>:
static uint8_t u8arr_uart[UART_BUF_SZ];
static uint8_t u8idx;

/* Public functions definitions */
void serial_init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* initialize serial */
  stdin_init(&hstdin, &huart2, u8arr_buffer, UART_BUF_SZ);
 80013e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ec:	4a06      	ldr	r2, [pc, #24]	; (8001408 <serial_init+0x24>)
 80013ee:	4907      	ldr	r1, [pc, #28]	; (800140c <serial_init+0x28>)
 80013f0:	4807      	ldr	r0, [pc, #28]	; (8001410 <serial_init+0x2c>)
 80013f2:	f000 f865 	bl	80014c0 <stdin_init>
  stdin_set_callback(&hstdin, stdin_callback);
 80013f6:	4907      	ldr	r1, [pc, #28]	; (8001414 <serial_init+0x30>)
 80013f8:	4805      	ldr	r0, [pc, #20]	; (8001410 <serial_init+0x2c>)
 80013fa:	f000 f878 	bl	80014ee <stdin_set_callback>
  stdin_start(&hstdin);
 80013fe:	4804      	ldr	r0, [pc, #16]	; (8001410 <serial_init+0x2c>)
 8001400:	f000 f896 	bl	8001530 <stdin_start>
}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	200004d0 	.word	0x200004d0
 800140c:	200000f0 	.word	0x200000f0
 8001410:	200004c0 	.word	0x200004c0
 8001414:	08001441 	.word	0x08001441

08001418 <serial_handlerUART>:

void serial_handlerUART(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  stdin_irq_uart(&hstdin);
 800141c:	4802      	ldr	r0, [pc, #8]	; (8001428 <serial_handlerUART+0x10>)
 800141e:	f001 fbf5 	bl	8002c0c <stdin_irq_uart>
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200004c0 	.word	0x200004c0

0800142c <serial_handlerDMA>:

void serial_handlerDMA(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  stdin_irq_dma(&hstdin);
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <serial_handlerDMA+0x10>)
 8001432:	f000 f8b3 	bl	800159c <stdin_irq_dma>
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200004c0 	.word	0x200004c0

08001440 <stdin_callback>:

/* Private function definitions */
static void stdin_callback(uint8_t *u8p_buffer, uint16_t u16_size)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	807b      	strh	r3, [r7, #2]
	//printf("UART RX Handler\r\n\n");

	memcpy(&u8arr_uart[u8idx], u8p_buffer, u16_size);
 800144c:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <stdin_callback+0x78>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <stdin_callback+0x7c>)
 8001454:	4413      	add	r3, r2
 8001456:	887a      	ldrh	r2, [r7, #2]
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	4618      	mov	r0, r3
 800145c:	f006 fdea 	bl	8008034 <memcpy>
	u8idx += u16_size;
 8001460:	887b      	ldrh	r3, [r7, #2]
 8001462:	b2da      	uxtb	r2, r3
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <stdin_callback+0x78>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	4413      	add	r3, r2
 800146a:	b2da      	uxtb	r2, r3
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <stdin_callback+0x78>)
 800146e:	701a      	strb	r2, [r3, #0]

	if((u8p_buffer[u16_size - 1] == '\n')&&(u8p_buffer[u16_size - 2]== '\r'))
 8001470:	887b      	ldrh	r3, [r7, #2]
 8001472:	3b01      	subs	r3, #1
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	4413      	add	r3, r2
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b0a      	cmp	r3, #10
 800147c:	d118      	bne.n	80014b0 <stdin_callback+0x70>
 800147e:	887b      	ldrh	r3, [r7, #2]
 8001480:	3b02      	subs	r3, #2
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b0d      	cmp	r3, #13
 800148a:	d111      	bne.n	80014b0 <stdin_callback+0x70>
	{
		uartProcessing (u8arr_uart, u8idx - 2);
 800148c:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <stdin_callback+0x78>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	b29b      	uxth	r3, r3
 8001492:	3b02      	subs	r3, #2
 8001494:	b29b      	uxth	r3, r3
 8001496:	4619      	mov	r1, r3
 8001498:	4808      	ldr	r0, [pc, #32]	; (80014bc <stdin_callback+0x7c>)
 800149a:	f7ff fee5 	bl	8001268 <uartProcessing>
		memset(u8arr_uart, 0, UART_BUF_SZ);
 800149e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014a2:	2100      	movs	r1, #0
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <stdin_callback+0x7c>)
 80014a6:	f006 fdd3 	bl	8008050 <memset>
		u8idx = 0;
 80014aa:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <stdin_callback+0x78>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]
	}
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	200006d0 	.word	0x200006d0
 80014bc:	200005d0 	.word	0x200005d0

080014c0 <stdin_init>:
static void fill_buffer(stdin_t *in, uint16_t pos, uint16_t size);

/* Public function implementations
 * --------------------------------------------*/
void stdin_init(stdin_t *in, UART_HandleTypeDef *uart, uint8_t *buffer, uint16_t size)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
 80014cc:	807b      	strh	r3, [r7, #2]
  in->huart = uart;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	68ba      	ldr	r2, [r7, #8]
 80014d2:	601a      	str	r2, [r3, #0]
  in->buffer = buffer;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	609a      	str	r2, [r3, #8]
  in->size = size;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	887a      	ldrh	r2, [r7, #2]
 80014de:	819a      	strh	r2, [r3, #12]

  stdin_flush(in);
 80014e0:	68f8      	ldr	r0, [r7, #12]
 80014e2:	f000 f812 	bl	800150a <stdin_flush>
}
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <stdin_set_callback>:

void stdin_set_callback(stdin_t *in, stdin_callback_t cb)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
 80014f6:	6039      	str	r1, [r7, #0]
  in->callback = cb;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	605a      	str	r2, [r3, #4]
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <stdin_flush>:

void stdin_flush(stdin_t *in)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
  memset(in->buffer, 0, in->size);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6898      	ldr	r0, [r3, #8]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	899b      	ldrh	r3, [r3, #12]
 800151a:	461a      	mov	r2, r3
 800151c:	2100      	movs	r1, #0
 800151e:	f006 fd97 	bl	8008050 <memset>
  in->pos = 0;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	81da      	strh	r2, [r3, #14]
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <stdin_start>:

HAL_StatusTypeDef stdin_start(stdin_t *in)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Enable interrupts */
  __HAL_UART_ENABLE_IT(in->huart, UART_IT_IDLE);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68da      	ldr	r2, [r3, #12]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 0210 	orr.w	r2, r2, #16
 800154a:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(HDMA(in), DMA_IT_TC);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 0210 	orr.w	r2, r2, #16
 8001562:	601a      	str	r2, [r3, #0]
  __HAL_DMA_ENABLE_IT(HDMA(in), DMA_IT_HT);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f042 0208 	orr.w	r2, r2, #8
 800157a:	601a      	str	r2, [r3, #0]

  /* Start receiving UART in DMA mode */
  status = HAL_UART_Receive_DMA(in->huart, in->buffer, in->size);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6818      	ldr	r0, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6899      	ldr	r1, [r3, #8]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	899b      	ldrh	r3, [r3, #12]
 8001588:	461a      	mov	r2, r3
 800158a:	f005 fb94 	bl	8006cb6 <HAL_UART_Receive_DMA>
 800158e:	4603      	mov	r3, r0
 8001590:	73fb      	strb	r3, [r7, #15]
  return (status);
 8001592:	7bfb      	ldrb	r3, [r7, #15]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <stdin_irq_dma>:
  status = HAL_UART_DMAStop(in->huart);
  return (status);
}

void stdin_irq_dma(stdin_t *in)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Handle HT interrupt */
  if (__HAL_DMA_GET_IT_SOURCE(HDMA(in), DMA_IT_HT))
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0308 	and.w	r3, r3, #8
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 823c 	beq.w	8001a30 <stdin_irq_dma+0x494>
  {
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_HT_FLAG_INDEX(HDMA(in)));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	461a      	mov	r2, r3
 80015c2:	4b7f      	ldr	r3, [pc, #508]	; (80017c0 <stdin_irq_dma+0x224>)
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d978      	bls.n	80016ba <stdin_irq_dma+0x11e>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a7c      	ldr	r2, [pc, #496]	; (80017c4 <stdin_irq_dma+0x228>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d06d      	beq.n	80016b2 <stdin_irq_dma+0x116>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a7a      	ldr	r2, [pc, #488]	; (80017c8 <stdin_irq_dma+0x22c>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d064      	beq.n	80016ae <stdin_irq_dma+0x112>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a77      	ldr	r2, [pc, #476]	; (80017cc <stdin_irq_dma+0x230>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d05b      	beq.n	80016aa <stdin_irq_dma+0x10e>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a75      	ldr	r2, [pc, #468]	; (80017d0 <stdin_irq_dma+0x234>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d052      	beq.n	80016a6 <stdin_irq_dma+0x10a>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a72      	ldr	r2, [pc, #456]	; (80017d4 <stdin_irq_dma+0x238>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d048      	beq.n	80016a0 <stdin_irq_dma+0x104>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a70      	ldr	r2, [pc, #448]	; (80017d8 <stdin_irq_dma+0x23c>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d03e      	beq.n	800169a <stdin_irq_dma+0xfe>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a6d      	ldr	r2, [pc, #436]	; (80017dc <stdin_irq_dma+0x240>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d034      	beq.n	8001694 <stdin_irq_dma+0xf8>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a6b      	ldr	r2, [pc, #428]	; (80017e0 <stdin_irq_dma+0x244>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d02a      	beq.n	800168e <stdin_irq_dma+0xf2>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a68      	ldr	r2, [pc, #416]	; (80017e4 <stdin_irq_dma+0x248>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d020      	beq.n	8001688 <stdin_irq_dma+0xec>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a66      	ldr	r2, [pc, #408]	; (80017e8 <stdin_irq_dma+0x24c>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d016      	beq.n	8001682 <stdin_irq_dma+0xe6>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a63      	ldr	r2, [pc, #396]	; (80017ec <stdin_irq_dma+0x250>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d00c      	beq.n	800167c <stdin_irq_dma+0xe0>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a61      	ldr	r2, [pc, #388]	; (80017f0 <stdin_irq_dma+0x254>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d102      	bne.n	8001676 <stdin_irq_dma+0xda>
 8001670:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001674:	e01e      	b.n	80016b4 <stdin_irq_dma+0x118>
 8001676:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800167a:	e01b      	b.n	80016b4 <stdin_irq_dma+0x118>
 800167c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001680:	e018      	b.n	80016b4 <stdin_irq_dma+0x118>
 8001682:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001686:	e015      	b.n	80016b4 <stdin_irq_dma+0x118>
 8001688:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800168c:	e012      	b.n	80016b4 <stdin_irq_dma+0x118>
 800168e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001692:	e00f      	b.n	80016b4 <stdin_irq_dma+0x118>
 8001694:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001698:	e00c      	b.n	80016b4 <stdin_irq_dma+0x118>
 800169a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800169e:	e009      	b.n	80016b4 <stdin_irq_dma+0x118>
 80016a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016a4:	e006      	b.n	80016b4 <stdin_irq_dma+0x118>
 80016a6:	2310      	movs	r3, #16
 80016a8:	e004      	b.n	80016b4 <stdin_irq_dma+0x118>
 80016aa:	2310      	movs	r3, #16
 80016ac:	e002      	b.n	80016b4 <stdin_irq_dma+0x118>
 80016ae:	2310      	movs	r3, #16
 80016b0:	e000      	b.n	80016b4 <stdin_irq_dma+0x118>
 80016b2:	2310      	movs	r3, #16
 80016b4:	4a4f      	ldr	r2, [pc, #316]	; (80017f4 <stdin_irq_dma+0x258>)
 80016b6:	60d3      	str	r3, [r2, #12]
 80016b8:	e199      	b.n	80019ee <stdin_irq_dma+0x452>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	461a      	mov	r2, r3
 80016c4:	4b4c      	ldr	r3, [pc, #304]	; (80017f8 <stdin_irq_dma+0x25c>)
 80016c6:	429a      	cmp	r2, r3
 80016c8:	f240 8098 	bls.w	80017fc <stdin_irq_dma+0x260>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a3b      	ldr	r2, [pc, #236]	; (80017c4 <stdin_irq_dma+0x228>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d06d      	beq.n	80017b6 <stdin_irq_dma+0x21a>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a39      	ldr	r2, [pc, #228]	; (80017c8 <stdin_irq_dma+0x22c>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d064      	beq.n	80017b2 <stdin_irq_dma+0x216>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a36      	ldr	r2, [pc, #216]	; (80017cc <stdin_irq_dma+0x230>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d05b      	beq.n	80017ae <stdin_irq_dma+0x212>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a34      	ldr	r2, [pc, #208]	; (80017d0 <stdin_irq_dma+0x234>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d052      	beq.n	80017aa <stdin_irq_dma+0x20e>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a31      	ldr	r2, [pc, #196]	; (80017d4 <stdin_irq_dma+0x238>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d048      	beq.n	80017a4 <stdin_irq_dma+0x208>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a2f      	ldr	r2, [pc, #188]	; (80017d8 <stdin_irq_dma+0x23c>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d03e      	beq.n	800179e <stdin_irq_dma+0x202>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a2c      	ldr	r2, [pc, #176]	; (80017dc <stdin_irq_dma+0x240>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d034      	beq.n	8001798 <stdin_irq_dma+0x1fc>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a2a      	ldr	r2, [pc, #168]	; (80017e0 <stdin_irq_dma+0x244>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d02a      	beq.n	8001792 <stdin_irq_dma+0x1f6>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a27      	ldr	r2, [pc, #156]	; (80017e4 <stdin_irq_dma+0x248>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d020      	beq.n	800178c <stdin_irq_dma+0x1f0>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a25      	ldr	r2, [pc, #148]	; (80017e8 <stdin_irq_dma+0x24c>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d016      	beq.n	8001786 <stdin_irq_dma+0x1ea>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a22      	ldr	r2, [pc, #136]	; (80017ec <stdin_irq_dma+0x250>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d00c      	beq.n	8001780 <stdin_irq_dma+0x1e4>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a20      	ldr	r2, [pc, #128]	; (80017f0 <stdin_irq_dma+0x254>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d102      	bne.n	800177a <stdin_irq_dma+0x1de>
 8001774:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001778:	e01e      	b.n	80017b8 <stdin_irq_dma+0x21c>
 800177a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800177e:	e01b      	b.n	80017b8 <stdin_irq_dma+0x21c>
 8001780:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001784:	e018      	b.n	80017b8 <stdin_irq_dma+0x21c>
 8001786:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800178a:	e015      	b.n	80017b8 <stdin_irq_dma+0x21c>
 800178c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001790:	e012      	b.n	80017b8 <stdin_irq_dma+0x21c>
 8001792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001796:	e00f      	b.n	80017b8 <stdin_irq_dma+0x21c>
 8001798:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800179c:	e00c      	b.n	80017b8 <stdin_irq_dma+0x21c>
 800179e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017a2:	e009      	b.n	80017b8 <stdin_irq_dma+0x21c>
 80017a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017a8:	e006      	b.n	80017b8 <stdin_irq_dma+0x21c>
 80017aa:	2310      	movs	r3, #16
 80017ac:	e004      	b.n	80017b8 <stdin_irq_dma+0x21c>
 80017ae:	2310      	movs	r3, #16
 80017b0:	e002      	b.n	80017b8 <stdin_irq_dma+0x21c>
 80017b2:	2310      	movs	r3, #16
 80017b4:	e000      	b.n	80017b8 <stdin_irq_dma+0x21c>
 80017b6:	2310      	movs	r3, #16
 80017b8:	4a0e      	ldr	r2, [pc, #56]	; (80017f4 <stdin_irq_dma+0x258>)
 80017ba:	6093      	str	r3, [r2, #8]
 80017bc:	e117      	b.n	80019ee <stdin_irq_dma+0x452>
 80017be:	bf00      	nop
 80017c0:	40026458 	.word	0x40026458
 80017c4:	40026010 	.word	0x40026010
 80017c8:	40026410 	.word	0x40026410
 80017cc:	40026070 	.word	0x40026070
 80017d0:	40026470 	.word	0x40026470
 80017d4:	40026028 	.word	0x40026028
 80017d8:	40026428 	.word	0x40026428
 80017dc:	40026088 	.word	0x40026088
 80017e0:	40026488 	.word	0x40026488
 80017e4:	40026040 	.word	0x40026040
 80017e8:	40026440 	.word	0x40026440
 80017ec:	400260a0 	.word	0x400260a0
 80017f0:	400264a0 	.word	0x400264a0
 80017f4:	40026400 	.word	0x40026400
 80017f8:	400260b8 	.word	0x400260b8
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	4b7c      	ldr	r3, [pc, #496]	; (80019f8 <stdin_irq_dma+0x45c>)
 8001808:	429a      	cmp	r2, r3
 800180a:	d978      	bls.n	80018fe <stdin_irq_dma+0x362>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a79      	ldr	r2, [pc, #484]	; (80019fc <stdin_irq_dma+0x460>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d06d      	beq.n	80018f6 <stdin_irq_dma+0x35a>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a77      	ldr	r2, [pc, #476]	; (8001a00 <stdin_irq_dma+0x464>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d064      	beq.n	80018f2 <stdin_irq_dma+0x356>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a74      	ldr	r2, [pc, #464]	; (8001a04 <stdin_irq_dma+0x468>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d05b      	beq.n	80018ee <stdin_irq_dma+0x352>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a72      	ldr	r2, [pc, #456]	; (8001a08 <stdin_irq_dma+0x46c>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d052      	beq.n	80018ea <stdin_irq_dma+0x34e>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a6f      	ldr	r2, [pc, #444]	; (8001a0c <stdin_irq_dma+0x470>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d048      	beq.n	80018e4 <stdin_irq_dma+0x348>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a6d      	ldr	r2, [pc, #436]	; (8001a10 <stdin_irq_dma+0x474>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d03e      	beq.n	80018de <stdin_irq_dma+0x342>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a6a      	ldr	r2, [pc, #424]	; (8001a14 <stdin_irq_dma+0x478>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d034      	beq.n	80018d8 <stdin_irq_dma+0x33c>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a68      	ldr	r2, [pc, #416]	; (8001a18 <stdin_irq_dma+0x47c>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d02a      	beq.n	80018d2 <stdin_irq_dma+0x336>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a65      	ldr	r2, [pc, #404]	; (8001a1c <stdin_irq_dma+0x480>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d020      	beq.n	80018cc <stdin_irq_dma+0x330>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a63      	ldr	r2, [pc, #396]	; (8001a20 <stdin_irq_dma+0x484>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d016      	beq.n	80018c6 <stdin_irq_dma+0x32a>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a60      	ldr	r2, [pc, #384]	; (8001a24 <stdin_irq_dma+0x488>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d00c      	beq.n	80018c0 <stdin_irq_dma+0x324>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a5e      	ldr	r2, [pc, #376]	; (8001a28 <stdin_irq_dma+0x48c>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d102      	bne.n	80018ba <stdin_irq_dma+0x31e>
 80018b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018b8:	e01e      	b.n	80018f8 <stdin_irq_dma+0x35c>
 80018ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80018be:	e01b      	b.n	80018f8 <stdin_irq_dma+0x35c>
 80018c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018c4:	e018      	b.n	80018f8 <stdin_irq_dma+0x35c>
 80018c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018ca:	e015      	b.n	80018f8 <stdin_irq_dma+0x35c>
 80018cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018d0:	e012      	b.n	80018f8 <stdin_irq_dma+0x35c>
 80018d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018d6:	e00f      	b.n	80018f8 <stdin_irq_dma+0x35c>
 80018d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018dc:	e00c      	b.n	80018f8 <stdin_irq_dma+0x35c>
 80018de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018e2:	e009      	b.n	80018f8 <stdin_irq_dma+0x35c>
 80018e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018e8:	e006      	b.n	80018f8 <stdin_irq_dma+0x35c>
 80018ea:	2310      	movs	r3, #16
 80018ec:	e004      	b.n	80018f8 <stdin_irq_dma+0x35c>
 80018ee:	2310      	movs	r3, #16
 80018f0:	e002      	b.n	80018f8 <stdin_irq_dma+0x35c>
 80018f2:	2310      	movs	r3, #16
 80018f4:	e000      	b.n	80018f8 <stdin_irq_dma+0x35c>
 80018f6:	2310      	movs	r3, #16
 80018f8:	4a4c      	ldr	r2, [pc, #304]	; (8001a2c <stdin_irq_dma+0x490>)
 80018fa:	60d3      	str	r3, [r2, #12]
 80018fc:	e077      	b.n	80019ee <stdin_irq_dma+0x452>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a3d      	ldr	r2, [pc, #244]	; (80019fc <stdin_irq_dma+0x460>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d06d      	beq.n	80019e8 <stdin_irq_dma+0x44c>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a3a      	ldr	r2, [pc, #232]	; (8001a00 <stdin_irq_dma+0x464>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d064      	beq.n	80019e4 <stdin_irq_dma+0x448>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a38      	ldr	r2, [pc, #224]	; (8001a04 <stdin_irq_dma+0x468>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d05b      	beq.n	80019e0 <stdin_irq_dma+0x444>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a35      	ldr	r2, [pc, #212]	; (8001a08 <stdin_irq_dma+0x46c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d052      	beq.n	80019dc <stdin_irq_dma+0x440>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a33      	ldr	r2, [pc, #204]	; (8001a0c <stdin_irq_dma+0x470>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d048      	beq.n	80019d6 <stdin_irq_dma+0x43a>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a30      	ldr	r2, [pc, #192]	; (8001a10 <stdin_irq_dma+0x474>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d03e      	beq.n	80019d0 <stdin_irq_dma+0x434>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a2e      	ldr	r2, [pc, #184]	; (8001a14 <stdin_irq_dma+0x478>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d034      	beq.n	80019ca <stdin_irq_dma+0x42e>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a2b      	ldr	r2, [pc, #172]	; (8001a18 <stdin_irq_dma+0x47c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d02a      	beq.n	80019c4 <stdin_irq_dma+0x428>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a29      	ldr	r2, [pc, #164]	; (8001a1c <stdin_irq_dma+0x480>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d020      	beq.n	80019be <stdin_irq_dma+0x422>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a26      	ldr	r2, [pc, #152]	; (8001a20 <stdin_irq_dma+0x484>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d016      	beq.n	80019b8 <stdin_irq_dma+0x41c>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a24      	ldr	r2, [pc, #144]	; (8001a24 <stdin_irq_dma+0x488>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d00c      	beq.n	80019b2 <stdin_irq_dma+0x416>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a21      	ldr	r2, [pc, #132]	; (8001a28 <stdin_irq_dma+0x48c>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d102      	bne.n	80019ac <stdin_irq_dma+0x410>
 80019a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019aa:	e01e      	b.n	80019ea <stdin_irq_dma+0x44e>
 80019ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80019b0:	e01b      	b.n	80019ea <stdin_irq_dma+0x44e>
 80019b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019b6:	e018      	b.n	80019ea <stdin_irq_dma+0x44e>
 80019b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019bc:	e015      	b.n	80019ea <stdin_irq_dma+0x44e>
 80019be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019c2:	e012      	b.n	80019ea <stdin_irq_dma+0x44e>
 80019c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019c8:	e00f      	b.n	80019ea <stdin_irq_dma+0x44e>
 80019ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ce:	e00c      	b.n	80019ea <stdin_irq_dma+0x44e>
 80019d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019d4:	e009      	b.n	80019ea <stdin_irq_dma+0x44e>
 80019d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019da:	e006      	b.n	80019ea <stdin_irq_dma+0x44e>
 80019dc:	2310      	movs	r3, #16
 80019de:	e004      	b.n	80019ea <stdin_irq_dma+0x44e>
 80019e0:	2310      	movs	r3, #16
 80019e2:	e002      	b.n	80019ea <stdin_irq_dma+0x44e>
 80019e4:	2310      	movs	r3, #16
 80019e6:	e000      	b.n	80019ea <stdin_irq_dma+0x44e>
 80019e8:	2310      	movs	r3, #16
 80019ea:	4a10      	ldr	r2, [pc, #64]	; (8001a2c <stdin_irq_dma+0x490>)
 80019ec:	6093      	str	r3, [r2, #8]
    check_buffer(in);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f001 f92c 	bl	8002c4c <check_buffer>
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_FE_FLAG_INDEX(HDMA(in)));
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_DME_FLAG_INDEX(HDMA(in)));

    HAL_UART_Receive_DMA(in->huart, in->buffer, in->size);
  }
}
 80019f4:	f001 b8ea 	b.w	8002bcc <stdin_irq_dma+0x1630>
 80019f8:	40026058 	.word	0x40026058
 80019fc:	40026010 	.word	0x40026010
 8001a00:	40026410 	.word	0x40026410
 8001a04:	40026070 	.word	0x40026070
 8001a08:	40026470 	.word	0x40026470
 8001a0c:	40026028 	.word	0x40026028
 8001a10:	40026428 	.word	0x40026428
 8001a14:	40026088 	.word	0x40026088
 8001a18:	40026488 	.word	0x40026488
 8001a1c:	40026040 	.word	0x40026040
 8001a20:	40026440 	.word	0x40026440
 8001a24:	400260a0 	.word	0x400260a0
 8001a28:	400264a0 	.word	0x400264a0
 8001a2c:	40026000 	.word	0x40026000
  else if (__HAL_DMA_GET_IT_SOURCE(HDMA(in), DMA_IT_TC))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0310 	and.w	r3, r3, #16
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 823c 	beq.w	8001ebc <stdin_irq_dma+0x920>
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_TC_FLAG_INDEX(HDMA(in)));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4b7f      	ldr	r3, [pc, #508]	; (8001c4c <stdin_irq_dma+0x6b0>)
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d978      	bls.n	8001b46 <stdin_irq_dma+0x5aa>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a7c      	ldr	r2, [pc, #496]	; (8001c50 <stdin_irq_dma+0x6b4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d06d      	beq.n	8001b3e <stdin_irq_dma+0x5a2>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a7a      	ldr	r2, [pc, #488]	; (8001c54 <stdin_irq_dma+0x6b8>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d064      	beq.n	8001b3a <stdin_irq_dma+0x59e>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a77      	ldr	r2, [pc, #476]	; (8001c58 <stdin_irq_dma+0x6bc>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d05b      	beq.n	8001b36 <stdin_irq_dma+0x59a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a75      	ldr	r2, [pc, #468]	; (8001c5c <stdin_irq_dma+0x6c0>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d052      	beq.n	8001b32 <stdin_irq_dma+0x596>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a72      	ldr	r2, [pc, #456]	; (8001c60 <stdin_irq_dma+0x6c4>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d048      	beq.n	8001b2c <stdin_irq_dma+0x590>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a70      	ldr	r2, [pc, #448]	; (8001c64 <stdin_irq_dma+0x6c8>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d03e      	beq.n	8001b26 <stdin_irq_dma+0x58a>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a6d      	ldr	r2, [pc, #436]	; (8001c68 <stdin_irq_dma+0x6cc>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d034      	beq.n	8001b20 <stdin_irq_dma+0x584>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a6b      	ldr	r2, [pc, #428]	; (8001c6c <stdin_irq_dma+0x6d0>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d02a      	beq.n	8001b1a <stdin_irq_dma+0x57e>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a68      	ldr	r2, [pc, #416]	; (8001c70 <stdin_irq_dma+0x6d4>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d020      	beq.n	8001b14 <stdin_irq_dma+0x578>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a66      	ldr	r2, [pc, #408]	; (8001c74 <stdin_irq_dma+0x6d8>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d016      	beq.n	8001b0e <stdin_irq_dma+0x572>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a63      	ldr	r2, [pc, #396]	; (8001c78 <stdin_irq_dma+0x6dc>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d00c      	beq.n	8001b08 <stdin_irq_dma+0x56c>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a61      	ldr	r2, [pc, #388]	; (8001c7c <stdin_irq_dma+0x6e0>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d102      	bne.n	8001b02 <stdin_irq_dma+0x566>
 8001afc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b00:	e01e      	b.n	8001b40 <stdin_irq_dma+0x5a4>
 8001b02:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001b06:	e01b      	b.n	8001b40 <stdin_irq_dma+0x5a4>
 8001b08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b0c:	e018      	b.n	8001b40 <stdin_irq_dma+0x5a4>
 8001b0e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b12:	e015      	b.n	8001b40 <stdin_irq_dma+0x5a4>
 8001b14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b18:	e012      	b.n	8001b40 <stdin_irq_dma+0x5a4>
 8001b1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b1e:	e00f      	b.n	8001b40 <stdin_irq_dma+0x5a4>
 8001b20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b24:	e00c      	b.n	8001b40 <stdin_irq_dma+0x5a4>
 8001b26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b2a:	e009      	b.n	8001b40 <stdin_irq_dma+0x5a4>
 8001b2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b30:	e006      	b.n	8001b40 <stdin_irq_dma+0x5a4>
 8001b32:	2320      	movs	r3, #32
 8001b34:	e004      	b.n	8001b40 <stdin_irq_dma+0x5a4>
 8001b36:	2320      	movs	r3, #32
 8001b38:	e002      	b.n	8001b40 <stdin_irq_dma+0x5a4>
 8001b3a:	2320      	movs	r3, #32
 8001b3c:	e000      	b.n	8001b40 <stdin_irq_dma+0x5a4>
 8001b3e:	2320      	movs	r3, #32
 8001b40:	4a4f      	ldr	r2, [pc, #316]	; (8001c80 <stdin_irq_dma+0x6e4>)
 8001b42:	60d3      	str	r3, [r2, #12]
 8001b44:	e199      	b.n	8001e7a <stdin_irq_dma+0x8de>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	4b4c      	ldr	r3, [pc, #304]	; (8001c84 <stdin_irq_dma+0x6e8>)
 8001b52:	429a      	cmp	r2, r3
 8001b54:	f240 8098 	bls.w	8001c88 <stdin_irq_dma+0x6ec>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a3b      	ldr	r2, [pc, #236]	; (8001c50 <stdin_irq_dma+0x6b4>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d06d      	beq.n	8001c42 <stdin_irq_dma+0x6a6>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a39      	ldr	r2, [pc, #228]	; (8001c54 <stdin_irq_dma+0x6b8>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d064      	beq.n	8001c3e <stdin_irq_dma+0x6a2>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a36      	ldr	r2, [pc, #216]	; (8001c58 <stdin_irq_dma+0x6bc>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d05b      	beq.n	8001c3a <stdin_irq_dma+0x69e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a34      	ldr	r2, [pc, #208]	; (8001c5c <stdin_irq_dma+0x6c0>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d052      	beq.n	8001c36 <stdin_irq_dma+0x69a>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a31      	ldr	r2, [pc, #196]	; (8001c60 <stdin_irq_dma+0x6c4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d048      	beq.n	8001c30 <stdin_irq_dma+0x694>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a2f      	ldr	r2, [pc, #188]	; (8001c64 <stdin_irq_dma+0x6c8>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d03e      	beq.n	8001c2a <stdin_irq_dma+0x68e>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a2c      	ldr	r2, [pc, #176]	; (8001c68 <stdin_irq_dma+0x6cc>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d034      	beq.n	8001c24 <stdin_irq_dma+0x688>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a2a      	ldr	r2, [pc, #168]	; (8001c6c <stdin_irq_dma+0x6d0>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d02a      	beq.n	8001c1e <stdin_irq_dma+0x682>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a27      	ldr	r2, [pc, #156]	; (8001c70 <stdin_irq_dma+0x6d4>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d020      	beq.n	8001c18 <stdin_irq_dma+0x67c>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a25      	ldr	r2, [pc, #148]	; (8001c74 <stdin_irq_dma+0x6d8>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d016      	beq.n	8001c12 <stdin_irq_dma+0x676>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a22      	ldr	r2, [pc, #136]	; (8001c78 <stdin_irq_dma+0x6dc>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d00c      	beq.n	8001c0c <stdin_irq_dma+0x670>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a20      	ldr	r2, [pc, #128]	; (8001c7c <stdin_irq_dma+0x6e0>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d102      	bne.n	8001c06 <stdin_irq_dma+0x66a>
 8001c00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c04:	e01e      	b.n	8001c44 <stdin_irq_dma+0x6a8>
 8001c06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001c0a:	e01b      	b.n	8001c44 <stdin_irq_dma+0x6a8>
 8001c0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c10:	e018      	b.n	8001c44 <stdin_irq_dma+0x6a8>
 8001c12:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c16:	e015      	b.n	8001c44 <stdin_irq_dma+0x6a8>
 8001c18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c1c:	e012      	b.n	8001c44 <stdin_irq_dma+0x6a8>
 8001c1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c22:	e00f      	b.n	8001c44 <stdin_irq_dma+0x6a8>
 8001c24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c28:	e00c      	b.n	8001c44 <stdin_irq_dma+0x6a8>
 8001c2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c2e:	e009      	b.n	8001c44 <stdin_irq_dma+0x6a8>
 8001c30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c34:	e006      	b.n	8001c44 <stdin_irq_dma+0x6a8>
 8001c36:	2320      	movs	r3, #32
 8001c38:	e004      	b.n	8001c44 <stdin_irq_dma+0x6a8>
 8001c3a:	2320      	movs	r3, #32
 8001c3c:	e002      	b.n	8001c44 <stdin_irq_dma+0x6a8>
 8001c3e:	2320      	movs	r3, #32
 8001c40:	e000      	b.n	8001c44 <stdin_irq_dma+0x6a8>
 8001c42:	2320      	movs	r3, #32
 8001c44:	4a0e      	ldr	r2, [pc, #56]	; (8001c80 <stdin_irq_dma+0x6e4>)
 8001c46:	6093      	str	r3, [r2, #8]
 8001c48:	e117      	b.n	8001e7a <stdin_irq_dma+0x8de>
 8001c4a:	bf00      	nop
 8001c4c:	40026458 	.word	0x40026458
 8001c50:	40026010 	.word	0x40026010
 8001c54:	40026410 	.word	0x40026410
 8001c58:	40026070 	.word	0x40026070
 8001c5c:	40026470 	.word	0x40026470
 8001c60:	40026028 	.word	0x40026028
 8001c64:	40026428 	.word	0x40026428
 8001c68:	40026088 	.word	0x40026088
 8001c6c:	40026488 	.word	0x40026488
 8001c70:	40026040 	.word	0x40026040
 8001c74:	40026440 	.word	0x40026440
 8001c78:	400260a0 	.word	0x400260a0
 8001c7c:	400264a0 	.word	0x400264a0
 8001c80:	40026400 	.word	0x40026400
 8001c84:	400260b8 	.word	0x400260b8
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b7c      	ldr	r3, [pc, #496]	; (8001e84 <stdin_irq_dma+0x8e8>)
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d978      	bls.n	8001d8a <stdin_irq_dma+0x7ee>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a79      	ldr	r2, [pc, #484]	; (8001e88 <stdin_irq_dma+0x8ec>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d06d      	beq.n	8001d82 <stdin_irq_dma+0x7e6>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a77      	ldr	r2, [pc, #476]	; (8001e8c <stdin_irq_dma+0x8f0>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d064      	beq.n	8001d7e <stdin_irq_dma+0x7e2>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a74      	ldr	r2, [pc, #464]	; (8001e90 <stdin_irq_dma+0x8f4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d05b      	beq.n	8001d7a <stdin_irq_dma+0x7de>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a72      	ldr	r2, [pc, #456]	; (8001e94 <stdin_irq_dma+0x8f8>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d052      	beq.n	8001d76 <stdin_irq_dma+0x7da>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a6f      	ldr	r2, [pc, #444]	; (8001e98 <stdin_irq_dma+0x8fc>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d048      	beq.n	8001d70 <stdin_irq_dma+0x7d4>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a6d      	ldr	r2, [pc, #436]	; (8001e9c <stdin_irq_dma+0x900>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d03e      	beq.n	8001d6a <stdin_irq_dma+0x7ce>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a6a      	ldr	r2, [pc, #424]	; (8001ea0 <stdin_irq_dma+0x904>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d034      	beq.n	8001d64 <stdin_irq_dma+0x7c8>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a68      	ldr	r2, [pc, #416]	; (8001ea4 <stdin_irq_dma+0x908>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d02a      	beq.n	8001d5e <stdin_irq_dma+0x7c2>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a65      	ldr	r2, [pc, #404]	; (8001ea8 <stdin_irq_dma+0x90c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d020      	beq.n	8001d58 <stdin_irq_dma+0x7bc>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a63      	ldr	r2, [pc, #396]	; (8001eac <stdin_irq_dma+0x910>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d016      	beq.n	8001d52 <stdin_irq_dma+0x7b6>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a60      	ldr	r2, [pc, #384]	; (8001eb0 <stdin_irq_dma+0x914>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00c      	beq.n	8001d4c <stdin_irq_dma+0x7b0>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a5e      	ldr	r2, [pc, #376]	; (8001eb4 <stdin_irq_dma+0x918>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d102      	bne.n	8001d46 <stdin_irq_dma+0x7aa>
 8001d40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d44:	e01e      	b.n	8001d84 <stdin_irq_dma+0x7e8>
 8001d46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001d4a:	e01b      	b.n	8001d84 <stdin_irq_dma+0x7e8>
 8001d4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d50:	e018      	b.n	8001d84 <stdin_irq_dma+0x7e8>
 8001d52:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d56:	e015      	b.n	8001d84 <stdin_irq_dma+0x7e8>
 8001d58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d5c:	e012      	b.n	8001d84 <stdin_irq_dma+0x7e8>
 8001d5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d62:	e00f      	b.n	8001d84 <stdin_irq_dma+0x7e8>
 8001d64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d68:	e00c      	b.n	8001d84 <stdin_irq_dma+0x7e8>
 8001d6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d6e:	e009      	b.n	8001d84 <stdin_irq_dma+0x7e8>
 8001d70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d74:	e006      	b.n	8001d84 <stdin_irq_dma+0x7e8>
 8001d76:	2320      	movs	r3, #32
 8001d78:	e004      	b.n	8001d84 <stdin_irq_dma+0x7e8>
 8001d7a:	2320      	movs	r3, #32
 8001d7c:	e002      	b.n	8001d84 <stdin_irq_dma+0x7e8>
 8001d7e:	2320      	movs	r3, #32
 8001d80:	e000      	b.n	8001d84 <stdin_irq_dma+0x7e8>
 8001d82:	2320      	movs	r3, #32
 8001d84:	4a4c      	ldr	r2, [pc, #304]	; (8001eb8 <stdin_irq_dma+0x91c>)
 8001d86:	60d3      	str	r3, [r2, #12]
 8001d88:	e077      	b.n	8001e7a <stdin_irq_dma+0x8de>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a3d      	ldr	r2, [pc, #244]	; (8001e88 <stdin_irq_dma+0x8ec>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d06d      	beq.n	8001e74 <stdin_irq_dma+0x8d8>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a3a      	ldr	r2, [pc, #232]	; (8001e8c <stdin_irq_dma+0x8f0>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d064      	beq.n	8001e70 <stdin_irq_dma+0x8d4>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a38      	ldr	r2, [pc, #224]	; (8001e90 <stdin_irq_dma+0x8f4>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d05b      	beq.n	8001e6c <stdin_irq_dma+0x8d0>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a35      	ldr	r2, [pc, #212]	; (8001e94 <stdin_irq_dma+0x8f8>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d052      	beq.n	8001e68 <stdin_irq_dma+0x8cc>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a33      	ldr	r2, [pc, #204]	; (8001e98 <stdin_irq_dma+0x8fc>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d048      	beq.n	8001e62 <stdin_irq_dma+0x8c6>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a30      	ldr	r2, [pc, #192]	; (8001e9c <stdin_irq_dma+0x900>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d03e      	beq.n	8001e5c <stdin_irq_dma+0x8c0>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a2e      	ldr	r2, [pc, #184]	; (8001ea0 <stdin_irq_dma+0x904>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d034      	beq.n	8001e56 <stdin_irq_dma+0x8ba>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a2b      	ldr	r2, [pc, #172]	; (8001ea4 <stdin_irq_dma+0x908>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d02a      	beq.n	8001e50 <stdin_irq_dma+0x8b4>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a29      	ldr	r2, [pc, #164]	; (8001ea8 <stdin_irq_dma+0x90c>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d020      	beq.n	8001e4a <stdin_irq_dma+0x8ae>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a26      	ldr	r2, [pc, #152]	; (8001eac <stdin_irq_dma+0x910>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d016      	beq.n	8001e44 <stdin_irq_dma+0x8a8>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a24      	ldr	r2, [pc, #144]	; (8001eb0 <stdin_irq_dma+0x914>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d00c      	beq.n	8001e3e <stdin_irq_dma+0x8a2>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a21      	ldr	r2, [pc, #132]	; (8001eb4 <stdin_irq_dma+0x918>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d102      	bne.n	8001e38 <stdin_irq_dma+0x89c>
 8001e32:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e36:	e01e      	b.n	8001e76 <stdin_irq_dma+0x8da>
 8001e38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001e3c:	e01b      	b.n	8001e76 <stdin_irq_dma+0x8da>
 8001e3e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e42:	e018      	b.n	8001e76 <stdin_irq_dma+0x8da>
 8001e44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e48:	e015      	b.n	8001e76 <stdin_irq_dma+0x8da>
 8001e4a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e4e:	e012      	b.n	8001e76 <stdin_irq_dma+0x8da>
 8001e50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e54:	e00f      	b.n	8001e76 <stdin_irq_dma+0x8da>
 8001e56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e5a:	e00c      	b.n	8001e76 <stdin_irq_dma+0x8da>
 8001e5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e60:	e009      	b.n	8001e76 <stdin_irq_dma+0x8da>
 8001e62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e66:	e006      	b.n	8001e76 <stdin_irq_dma+0x8da>
 8001e68:	2320      	movs	r3, #32
 8001e6a:	e004      	b.n	8001e76 <stdin_irq_dma+0x8da>
 8001e6c:	2320      	movs	r3, #32
 8001e6e:	e002      	b.n	8001e76 <stdin_irq_dma+0x8da>
 8001e70:	2320      	movs	r3, #32
 8001e72:	e000      	b.n	8001e76 <stdin_irq_dma+0x8da>
 8001e74:	2320      	movs	r3, #32
 8001e76:	4a10      	ldr	r2, [pc, #64]	; (8001eb8 <stdin_irq_dma+0x91c>)
 8001e78:	6093      	str	r3, [r2, #8]
    check_buffer(in);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 fee6 	bl	8002c4c <check_buffer>
}
 8001e80:	f000 bea4 	b.w	8002bcc <stdin_irq_dma+0x1630>
 8001e84:	40026058 	.word	0x40026058
 8001e88:	40026010 	.word	0x40026010
 8001e8c:	40026410 	.word	0x40026410
 8001e90:	40026070 	.word	0x40026070
 8001e94:	40026470 	.word	0x40026470
 8001e98:	40026028 	.word	0x40026028
 8001e9c:	40026428 	.word	0x40026428
 8001ea0:	40026088 	.word	0x40026088
 8001ea4:	40026488 	.word	0x40026488
 8001ea8:	40026040 	.word	0x40026040
 8001eac:	40026440 	.word	0x40026440
 8001eb0:	400260a0 	.word	0x400260a0
 8001eb4:	400264a0 	.word	0x400264a0
 8001eb8:	40026000 	.word	0x40026000
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_TE_FLAG_INDEX(HDMA(in)));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4b7f      	ldr	r3, [pc, #508]	; (80020c4 <stdin_irq_dma+0xb28>)
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d978      	bls.n	8001fbe <stdin_irq_dma+0xa22>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a7c      	ldr	r2, [pc, #496]	; (80020c8 <stdin_irq_dma+0xb2c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d06d      	beq.n	8001fb6 <stdin_irq_dma+0xa1a>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a7a      	ldr	r2, [pc, #488]	; (80020cc <stdin_irq_dma+0xb30>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d064      	beq.n	8001fb2 <stdin_irq_dma+0xa16>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a77      	ldr	r2, [pc, #476]	; (80020d0 <stdin_irq_dma+0xb34>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d05b      	beq.n	8001fae <stdin_irq_dma+0xa12>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a75      	ldr	r2, [pc, #468]	; (80020d4 <stdin_irq_dma+0xb38>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d052      	beq.n	8001faa <stdin_irq_dma+0xa0e>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a72      	ldr	r2, [pc, #456]	; (80020d8 <stdin_irq_dma+0xb3c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d048      	beq.n	8001fa4 <stdin_irq_dma+0xa08>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a70      	ldr	r2, [pc, #448]	; (80020dc <stdin_irq_dma+0xb40>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d03e      	beq.n	8001f9e <stdin_irq_dma+0xa02>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a6d      	ldr	r2, [pc, #436]	; (80020e0 <stdin_irq_dma+0xb44>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d034      	beq.n	8001f98 <stdin_irq_dma+0x9fc>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a6b      	ldr	r2, [pc, #428]	; (80020e4 <stdin_irq_dma+0xb48>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d02a      	beq.n	8001f92 <stdin_irq_dma+0x9f6>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a68      	ldr	r2, [pc, #416]	; (80020e8 <stdin_irq_dma+0xb4c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d020      	beq.n	8001f8c <stdin_irq_dma+0x9f0>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a66      	ldr	r2, [pc, #408]	; (80020ec <stdin_irq_dma+0xb50>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d016      	beq.n	8001f86 <stdin_irq_dma+0x9ea>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a63      	ldr	r2, [pc, #396]	; (80020f0 <stdin_irq_dma+0xb54>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d00c      	beq.n	8001f80 <stdin_irq_dma+0x9e4>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a61      	ldr	r2, [pc, #388]	; (80020f4 <stdin_irq_dma+0xb58>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d102      	bne.n	8001f7a <stdin_irq_dma+0x9de>
 8001f74:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f78:	e01e      	b.n	8001fb8 <stdin_irq_dma+0xa1c>
 8001f7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f7e:	e01b      	b.n	8001fb8 <stdin_irq_dma+0xa1c>
 8001f80:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f84:	e018      	b.n	8001fb8 <stdin_irq_dma+0xa1c>
 8001f86:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f8a:	e015      	b.n	8001fb8 <stdin_irq_dma+0xa1c>
 8001f8c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f90:	e012      	b.n	8001fb8 <stdin_irq_dma+0xa1c>
 8001f92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f96:	e00f      	b.n	8001fb8 <stdin_irq_dma+0xa1c>
 8001f98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f9c:	e00c      	b.n	8001fb8 <stdin_irq_dma+0xa1c>
 8001f9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fa2:	e009      	b.n	8001fb8 <stdin_irq_dma+0xa1c>
 8001fa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fa8:	e006      	b.n	8001fb8 <stdin_irq_dma+0xa1c>
 8001faa:	2308      	movs	r3, #8
 8001fac:	e004      	b.n	8001fb8 <stdin_irq_dma+0xa1c>
 8001fae:	2308      	movs	r3, #8
 8001fb0:	e002      	b.n	8001fb8 <stdin_irq_dma+0xa1c>
 8001fb2:	2308      	movs	r3, #8
 8001fb4:	e000      	b.n	8001fb8 <stdin_irq_dma+0xa1c>
 8001fb6:	2308      	movs	r3, #8
 8001fb8:	4a4f      	ldr	r2, [pc, #316]	; (80020f8 <stdin_irq_dma+0xb5c>)
 8001fba:	60d3      	str	r3, [r2, #12]
 8001fbc:	e1b7      	b.n	800232e <stdin_irq_dma+0xd92>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	4b4c      	ldr	r3, [pc, #304]	; (80020fc <stdin_irq_dma+0xb60>)
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	f240 8098 	bls.w	8002100 <stdin_irq_dma+0xb64>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a3b      	ldr	r2, [pc, #236]	; (80020c8 <stdin_irq_dma+0xb2c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d06d      	beq.n	80020ba <stdin_irq_dma+0xb1e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a39      	ldr	r2, [pc, #228]	; (80020cc <stdin_irq_dma+0xb30>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d064      	beq.n	80020b6 <stdin_irq_dma+0xb1a>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a36      	ldr	r2, [pc, #216]	; (80020d0 <stdin_irq_dma+0xb34>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d05b      	beq.n	80020b2 <stdin_irq_dma+0xb16>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a34      	ldr	r2, [pc, #208]	; (80020d4 <stdin_irq_dma+0xb38>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d052      	beq.n	80020ae <stdin_irq_dma+0xb12>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a31      	ldr	r2, [pc, #196]	; (80020d8 <stdin_irq_dma+0xb3c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d048      	beq.n	80020a8 <stdin_irq_dma+0xb0c>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a2f      	ldr	r2, [pc, #188]	; (80020dc <stdin_irq_dma+0xb40>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d03e      	beq.n	80020a2 <stdin_irq_dma+0xb06>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a2c      	ldr	r2, [pc, #176]	; (80020e0 <stdin_irq_dma+0xb44>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d034      	beq.n	800209c <stdin_irq_dma+0xb00>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a2a      	ldr	r2, [pc, #168]	; (80020e4 <stdin_irq_dma+0xb48>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d02a      	beq.n	8002096 <stdin_irq_dma+0xafa>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a27      	ldr	r2, [pc, #156]	; (80020e8 <stdin_irq_dma+0xb4c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d020      	beq.n	8002090 <stdin_irq_dma+0xaf4>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a25      	ldr	r2, [pc, #148]	; (80020ec <stdin_irq_dma+0xb50>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d016      	beq.n	800208a <stdin_irq_dma+0xaee>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a22      	ldr	r2, [pc, #136]	; (80020f0 <stdin_irq_dma+0xb54>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d00c      	beq.n	8002084 <stdin_irq_dma+0xae8>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a20      	ldr	r2, [pc, #128]	; (80020f4 <stdin_irq_dma+0xb58>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d102      	bne.n	800207e <stdin_irq_dma+0xae2>
 8002078:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800207c:	e01e      	b.n	80020bc <stdin_irq_dma+0xb20>
 800207e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002082:	e01b      	b.n	80020bc <stdin_irq_dma+0xb20>
 8002084:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002088:	e018      	b.n	80020bc <stdin_irq_dma+0xb20>
 800208a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800208e:	e015      	b.n	80020bc <stdin_irq_dma+0xb20>
 8002090:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002094:	e012      	b.n	80020bc <stdin_irq_dma+0xb20>
 8002096:	f44f 7300 	mov.w	r3, #512	; 0x200
 800209a:	e00f      	b.n	80020bc <stdin_irq_dma+0xb20>
 800209c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020a0:	e00c      	b.n	80020bc <stdin_irq_dma+0xb20>
 80020a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020a6:	e009      	b.n	80020bc <stdin_irq_dma+0xb20>
 80020a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020ac:	e006      	b.n	80020bc <stdin_irq_dma+0xb20>
 80020ae:	2308      	movs	r3, #8
 80020b0:	e004      	b.n	80020bc <stdin_irq_dma+0xb20>
 80020b2:	2308      	movs	r3, #8
 80020b4:	e002      	b.n	80020bc <stdin_irq_dma+0xb20>
 80020b6:	2308      	movs	r3, #8
 80020b8:	e000      	b.n	80020bc <stdin_irq_dma+0xb20>
 80020ba:	2308      	movs	r3, #8
 80020bc:	4a0e      	ldr	r2, [pc, #56]	; (80020f8 <stdin_irq_dma+0xb5c>)
 80020be:	6093      	str	r3, [r2, #8]
 80020c0:	e135      	b.n	800232e <stdin_irq_dma+0xd92>
 80020c2:	bf00      	nop
 80020c4:	40026458 	.word	0x40026458
 80020c8:	40026010 	.word	0x40026010
 80020cc:	40026410 	.word	0x40026410
 80020d0:	40026070 	.word	0x40026070
 80020d4:	40026470 	.word	0x40026470
 80020d8:	40026028 	.word	0x40026028
 80020dc:	40026428 	.word	0x40026428
 80020e0:	40026088 	.word	0x40026088
 80020e4:	40026488 	.word	0x40026488
 80020e8:	40026040 	.word	0x40026040
 80020ec:	40026440 	.word	0x40026440
 80020f0:	400260a0 	.word	0x400260a0
 80020f4:	400264a0 	.word	0x400264a0
 80020f8:	40026400 	.word	0x40026400
 80020fc:	400260b8 	.word	0x400260b8
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	461a      	mov	r2, r3
 800210a:	4b79      	ldr	r3, [pc, #484]	; (80022f0 <stdin_irq_dma+0xd54>)
 800210c:	429a      	cmp	r2, r3
 800210e:	d978      	bls.n	8002202 <stdin_irq_dma+0xc66>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a76      	ldr	r2, [pc, #472]	; (80022f4 <stdin_irq_dma+0xd58>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d06d      	beq.n	80021fa <stdin_irq_dma+0xc5e>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a74      	ldr	r2, [pc, #464]	; (80022f8 <stdin_irq_dma+0xd5c>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d064      	beq.n	80021f6 <stdin_irq_dma+0xc5a>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a71      	ldr	r2, [pc, #452]	; (80022fc <stdin_irq_dma+0xd60>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d05b      	beq.n	80021f2 <stdin_irq_dma+0xc56>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a6f      	ldr	r2, [pc, #444]	; (8002300 <stdin_irq_dma+0xd64>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d052      	beq.n	80021ee <stdin_irq_dma+0xc52>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a6c      	ldr	r2, [pc, #432]	; (8002304 <stdin_irq_dma+0xd68>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d048      	beq.n	80021e8 <stdin_irq_dma+0xc4c>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a6a      	ldr	r2, [pc, #424]	; (8002308 <stdin_irq_dma+0xd6c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d03e      	beq.n	80021e2 <stdin_irq_dma+0xc46>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a67      	ldr	r2, [pc, #412]	; (800230c <stdin_irq_dma+0xd70>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d034      	beq.n	80021dc <stdin_irq_dma+0xc40>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a65      	ldr	r2, [pc, #404]	; (8002310 <stdin_irq_dma+0xd74>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d02a      	beq.n	80021d6 <stdin_irq_dma+0xc3a>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a62      	ldr	r2, [pc, #392]	; (8002314 <stdin_irq_dma+0xd78>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d020      	beq.n	80021d0 <stdin_irq_dma+0xc34>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a60      	ldr	r2, [pc, #384]	; (8002318 <stdin_irq_dma+0xd7c>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d016      	beq.n	80021ca <stdin_irq_dma+0xc2e>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a5d      	ldr	r2, [pc, #372]	; (800231c <stdin_irq_dma+0xd80>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d00c      	beq.n	80021c4 <stdin_irq_dma+0xc28>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a5b      	ldr	r2, [pc, #364]	; (8002320 <stdin_irq_dma+0xd84>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d102      	bne.n	80021be <stdin_irq_dma+0xc22>
 80021b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80021bc:	e01e      	b.n	80021fc <stdin_irq_dma+0xc60>
 80021be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021c2:	e01b      	b.n	80021fc <stdin_irq_dma+0xc60>
 80021c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80021c8:	e018      	b.n	80021fc <stdin_irq_dma+0xc60>
 80021ca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80021ce:	e015      	b.n	80021fc <stdin_irq_dma+0xc60>
 80021d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80021d4:	e012      	b.n	80021fc <stdin_irq_dma+0xc60>
 80021d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021da:	e00f      	b.n	80021fc <stdin_irq_dma+0xc60>
 80021dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021e0:	e00c      	b.n	80021fc <stdin_irq_dma+0xc60>
 80021e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021e6:	e009      	b.n	80021fc <stdin_irq_dma+0xc60>
 80021e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ec:	e006      	b.n	80021fc <stdin_irq_dma+0xc60>
 80021ee:	2308      	movs	r3, #8
 80021f0:	e004      	b.n	80021fc <stdin_irq_dma+0xc60>
 80021f2:	2308      	movs	r3, #8
 80021f4:	e002      	b.n	80021fc <stdin_irq_dma+0xc60>
 80021f6:	2308      	movs	r3, #8
 80021f8:	e000      	b.n	80021fc <stdin_irq_dma+0xc60>
 80021fa:	2308      	movs	r3, #8
 80021fc:	4a49      	ldr	r2, [pc, #292]	; (8002324 <stdin_irq_dma+0xd88>)
 80021fe:	60d3      	str	r3, [r2, #12]
 8002200:	e095      	b.n	800232e <stdin_irq_dma+0xd92>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a3a      	ldr	r2, [pc, #232]	; (80022f4 <stdin_irq_dma+0xd58>)
 800220c:	4293      	cmp	r3, r2
 800220e:	f000 808b 	beq.w	8002328 <stdin_irq_dma+0xd8c>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a37      	ldr	r2, [pc, #220]	; (80022f8 <stdin_irq_dma+0xd5c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d064      	beq.n	80022ea <stdin_irq_dma+0xd4e>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a34      	ldr	r2, [pc, #208]	; (80022fc <stdin_irq_dma+0xd60>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d05b      	beq.n	80022e6 <stdin_irq_dma+0xd4a>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a32      	ldr	r2, [pc, #200]	; (8002300 <stdin_irq_dma+0xd64>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d052      	beq.n	80022e2 <stdin_irq_dma+0xd46>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a2f      	ldr	r2, [pc, #188]	; (8002304 <stdin_irq_dma+0xd68>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d048      	beq.n	80022dc <stdin_irq_dma+0xd40>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a2d      	ldr	r2, [pc, #180]	; (8002308 <stdin_irq_dma+0xd6c>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d03e      	beq.n	80022d6 <stdin_irq_dma+0xd3a>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a2a      	ldr	r2, [pc, #168]	; (800230c <stdin_irq_dma+0xd70>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d034      	beq.n	80022d0 <stdin_irq_dma+0xd34>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a28      	ldr	r2, [pc, #160]	; (8002310 <stdin_irq_dma+0xd74>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d02a      	beq.n	80022ca <stdin_irq_dma+0xd2e>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a25      	ldr	r2, [pc, #148]	; (8002314 <stdin_irq_dma+0xd78>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d020      	beq.n	80022c4 <stdin_irq_dma+0xd28>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a23      	ldr	r2, [pc, #140]	; (8002318 <stdin_irq_dma+0xd7c>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d016      	beq.n	80022be <stdin_irq_dma+0xd22>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a20      	ldr	r2, [pc, #128]	; (800231c <stdin_irq_dma+0xd80>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d00c      	beq.n	80022b8 <stdin_irq_dma+0xd1c>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a1e      	ldr	r2, [pc, #120]	; (8002320 <stdin_irq_dma+0xd84>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d102      	bne.n	80022b2 <stdin_irq_dma+0xd16>
 80022ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80022b0:	e03b      	b.n	800232a <stdin_irq_dma+0xd8e>
 80022b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022b6:	e038      	b.n	800232a <stdin_irq_dma+0xd8e>
 80022b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80022bc:	e035      	b.n	800232a <stdin_irq_dma+0xd8e>
 80022be:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80022c2:	e032      	b.n	800232a <stdin_irq_dma+0xd8e>
 80022c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80022c8:	e02f      	b.n	800232a <stdin_irq_dma+0xd8e>
 80022ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022ce:	e02c      	b.n	800232a <stdin_irq_dma+0xd8e>
 80022d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022d4:	e029      	b.n	800232a <stdin_irq_dma+0xd8e>
 80022d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022da:	e026      	b.n	800232a <stdin_irq_dma+0xd8e>
 80022dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022e0:	e023      	b.n	800232a <stdin_irq_dma+0xd8e>
 80022e2:	2308      	movs	r3, #8
 80022e4:	e021      	b.n	800232a <stdin_irq_dma+0xd8e>
 80022e6:	2308      	movs	r3, #8
 80022e8:	e01f      	b.n	800232a <stdin_irq_dma+0xd8e>
 80022ea:	2308      	movs	r3, #8
 80022ec:	e01d      	b.n	800232a <stdin_irq_dma+0xd8e>
 80022ee:	bf00      	nop
 80022f0:	40026058 	.word	0x40026058
 80022f4:	40026010 	.word	0x40026010
 80022f8:	40026410 	.word	0x40026410
 80022fc:	40026070 	.word	0x40026070
 8002300:	40026470 	.word	0x40026470
 8002304:	40026028 	.word	0x40026028
 8002308:	40026428 	.word	0x40026428
 800230c:	40026088 	.word	0x40026088
 8002310:	40026488 	.word	0x40026488
 8002314:	40026040 	.word	0x40026040
 8002318:	40026440 	.word	0x40026440
 800231c:	400260a0 	.word	0x400260a0
 8002320:	400264a0 	.word	0x400264a0
 8002324:	40026000 	.word	0x40026000
 8002328:	2308      	movs	r3, #8
 800232a:	4a7e      	ldr	r2, [pc, #504]	; (8002524 <stdin_irq_dma+0xf88>)
 800232c:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_FE_FLAG_INDEX(HDMA(in)));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	461a      	mov	r2, r3
 8002338:	4b7b      	ldr	r3, [pc, #492]	; (8002528 <stdin_irq_dma+0xf8c>)
 800233a:	429a      	cmp	r2, r3
 800233c:	d974      	bls.n	8002428 <stdin_irq_dma+0xe8c>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a79      	ldr	r2, [pc, #484]	; (800252c <stdin_irq_dma+0xf90>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d069      	beq.n	8002420 <stdin_irq_dma+0xe84>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a76      	ldr	r2, [pc, #472]	; (8002530 <stdin_irq_dma+0xf94>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d060      	beq.n	800241c <stdin_irq_dma+0xe80>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a74      	ldr	r2, [pc, #464]	; (8002534 <stdin_irq_dma+0xf98>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d057      	beq.n	8002418 <stdin_irq_dma+0xe7c>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a71      	ldr	r2, [pc, #452]	; (8002538 <stdin_irq_dma+0xf9c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d04e      	beq.n	8002414 <stdin_irq_dma+0xe78>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a6f      	ldr	r2, [pc, #444]	; (800253c <stdin_irq_dma+0xfa0>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d045      	beq.n	8002410 <stdin_irq_dma+0xe74>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a6c      	ldr	r2, [pc, #432]	; (8002540 <stdin_irq_dma+0xfa4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d03c      	beq.n	800240c <stdin_irq_dma+0xe70>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a6a      	ldr	r2, [pc, #424]	; (8002544 <stdin_irq_dma+0xfa8>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d033      	beq.n	8002408 <stdin_irq_dma+0xe6c>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a67      	ldr	r2, [pc, #412]	; (8002548 <stdin_irq_dma+0xfac>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d02a      	beq.n	8002404 <stdin_irq_dma+0xe68>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a65      	ldr	r2, [pc, #404]	; (800254c <stdin_irq_dma+0xfb0>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d020      	beq.n	80023fe <stdin_irq_dma+0xe62>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a62      	ldr	r2, [pc, #392]	; (8002550 <stdin_irq_dma+0xfb4>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d016      	beq.n	80023f8 <stdin_irq_dma+0xe5c>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a60      	ldr	r2, [pc, #384]	; (8002554 <stdin_irq_dma+0xfb8>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d00c      	beq.n	80023f2 <stdin_irq_dma+0xe56>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a5d      	ldr	r2, [pc, #372]	; (8002558 <stdin_irq_dma+0xfbc>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d102      	bne.n	80023ec <stdin_irq_dma+0xe50>
 80023e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023ea:	e01a      	b.n	8002422 <stdin_irq_dma+0xe86>
 80023ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023f0:	e017      	b.n	8002422 <stdin_irq_dma+0xe86>
 80023f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023f6:	e014      	b.n	8002422 <stdin_irq_dma+0xe86>
 80023f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023fc:	e011      	b.n	8002422 <stdin_irq_dma+0xe86>
 80023fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002402:	e00e      	b.n	8002422 <stdin_irq_dma+0xe86>
 8002404:	2340      	movs	r3, #64	; 0x40
 8002406:	e00c      	b.n	8002422 <stdin_irq_dma+0xe86>
 8002408:	2340      	movs	r3, #64	; 0x40
 800240a:	e00a      	b.n	8002422 <stdin_irq_dma+0xe86>
 800240c:	2340      	movs	r3, #64	; 0x40
 800240e:	e008      	b.n	8002422 <stdin_irq_dma+0xe86>
 8002410:	2340      	movs	r3, #64	; 0x40
 8002412:	e006      	b.n	8002422 <stdin_irq_dma+0xe86>
 8002414:	2301      	movs	r3, #1
 8002416:	e004      	b.n	8002422 <stdin_irq_dma+0xe86>
 8002418:	2301      	movs	r3, #1
 800241a:	e002      	b.n	8002422 <stdin_irq_dma+0xe86>
 800241c:	2301      	movs	r3, #1
 800241e:	e000      	b.n	8002422 <stdin_irq_dma+0xe86>
 8002420:	2301      	movs	r3, #1
 8002422:	4a4e      	ldr	r2, [pc, #312]	; (800255c <stdin_irq_dma+0xfc0>)
 8002424:	60d3      	str	r3, [r2, #12]
 8002426:	e1ac      	b.n	8002782 <stdin_irq_dma+0x11e6>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	461a      	mov	r2, r3
 8002432:	4b4b      	ldr	r3, [pc, #300]	; (8002560 <stdin_irq_dma+0xfc4>)
 8002434:	429a      	cmp	r2, r3
 8002436:	f240 8095 	bls.w	8002564 <stdin_irq_dma+0xfc8>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a3a      	ldr	r2, [pc, #232]	; (800252c <stdin_irq_dma+0xf90>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d069      	beq.n	800251c <stdin_irq_dma+0xf80>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a37      	ldr	r2, [pc, #220]	; (8002530 <stdin_irq_dma+0xf94>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d060      	beq.n	8002518 <stdin_irq_dma+0xf7c>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a35      	ldr	r2, [pc, #212]	; (8002534 <stdin_irq_dma+0xf98>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d057      	beq.n	8002514 <stdin_irq_dma+0xf78>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a32      	ldr	r2, [pc, #200]	; (8002538 <stdin_irq_dma+0xf9c>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d04e      	beq.n	8002510 <stdin_irq_dma+0xf74>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a30      	ldr	r2, [pc, #192]	; (800253c <stdin_irq_dma+0xfa0>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d045      	beq.n	800250c <stdin_irq_dma+0xf70>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a2d      	ldr	r2, [pc, #180]	; (8002540 <stdin_irq_dma+0xfa4>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d03c      	beq.n	8002508 <stdin_irq_dma+0xf6c>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a2b      	ldr	r2, [pc, #172]	; (8002544 <stdin_irq_dma+0xfa8>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d033      	beq.n	8002504 <stdin_irq_dma+0xf68>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a28      	ldr	r2, [pc, #160]	; (8002548 <stdin_irq_dma+0xfac>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d02a      	beq.n	8002500 <stdin_irq_dma+0xf64>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a26      	ldr	r2, [pc, #152]	; (800254c <stdin_irq_dma+0xfb0>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d020      	beq.n	80024fa <stdin_irq_dma+0xf5e>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a23      	ldr	r2, [pc, #140]	; (8002550 <stdin_irq_dma+0xfb4>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d016      	beq.n	80024f4 <stdin_irq_dma+0xf58>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a21      	ldr	r2, [pc, #132]	; (8002554 <stdin_irq_dma+0xfb8>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d00c      	beq.n	80024ee <stdin_irq_dma+0xf52>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a1e      	ldr	r2, [pc, #120]	; (8002558 <stdin_irq_dma+0xfbc>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d102      	bne.n	80024e8 <stdin_irq_dma+0xf4c>
 80024e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024e6:	e01a      	b.n	800251e <stdin_irq_dma+0xf82>
 80024e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024ec:	e017      	b.n	800251e <stdin_irq_dma+0xf82>
 80024ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024f2:	e014      	b.n	800251e <stdin_irq_dma+0xf82>
 80024f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024f8:	e011      	b.n	800251e <stdin_irq_dma+0xf82>
 80024fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024fe:	e00e      	b.n	800251e <stdin_irq_dma+0xf82>
 8002500:	2340      	movs	r3, #64	; 0x40
 8002502:	e00c      	b.n	800251e <stdin_irq_dma+0xf82>
 8002504:	2340      	movs	r3, #64	; 0x40
 8002506:	e00a      	b.n	800251e <stdin_irq_dma+0xf82>
 8002508:	2340      	movs	r3, #64	; 0x40
 800250a:	e008      	b.n	800251e <stdin_irq_dma+0xf82>
 800250c:	2340      	movs	r3, #64	; 0x40
 800250e:	e006      	b.n	800251e <stdin_irq_dma+0xf82>
 8002510:	2301      	movs	r3, #1
 8002512:	e004      	b.n	800251e <stdin_irq_dma+0xf82>
 8002514:	2301      	movs	r3, #1
 8002516:	e002      	b.n	800251e <stdin_irq_dma+0xf82>
 8002518:	2301      	movs	r3, #1
 800251a:	e000      	b.n	800251e <stdin_irq_dma+0xf82>
 800251c:	2301      	movs	r3, #1
 800251e:	4a0f      	ldr	r2, [pc, #60]	; (800255c <stdin_irq_dma+0xfc0>)
 8002520:	6093      	str	r3, [r2, #8]
 8002522:	e12e      	b.n	8002782 <stdin_irq_dma+0x11e6>
 8002524:	40026000 	.word	0x40026000
 8002528:	40026458 	.word	0x40026458
 800252c:	40026010 	.word	0x40026010
 8002530:	40026410 	.word	0x40026410
 8002534:	40026070 	.word	0x40026070
 8002538:	40026470 	.word	0x40026470
 800253c:	40026028 	.word	0x40026028
 8002540:	40026428 	.word	0x40026428
 8002544:	40026088 	.word	0x40026088
 8002548:	40026488 	.word	0x40026488
 800254c:	40026040 	.word	0x40026040
 8002550:	40026440 	.word	0x40026440
 8002554:	400260a0 	.word	0x400260a0
 8002558:	400264a0 	.word	0x400264a0
 800255c:	40026400 	.word	0x40026400
 8002560:	400260b8 	.word	0x400260b8
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	461a      	mov	r2, r3
 800256e:	4b75      	ldr	r3, [pc, #468]	; (8002744 <stdin_irq_dma+0x11a8>)
 8002570:	429a      	cmp	r2, r3
 8002572:	d974      	bls.n	800265e <stdin_irq_dma+0x10c2>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a72      	ldr	r2, [pc, #456]	; (8002748 <stdin_irq_dma+0x11ac>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d069      	beq.n	8002656 <stdin_irq_dma+0x10ba>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a70      	ldr	r2, [pc, #448]	; (800274c <stdin_irq_dma+0x11b0>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d060      	beq.n	8002652 <stdin_irq_dma+0x10b6>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a6d      	ldr	r2, [pc, #436]	; (8002750 <stdin_irq_dma+0x11b4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d057      	beq.n	800264e <stdin_irq_dma+0x10b2>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a6b      	ldr	r2, [pc, #428]	; (8002754 <stdin_irq_dma+0x11b8>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d04e      	beq.n	800264a <stdin_irq_dma+0x10ae>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a68      	ldr	r2, [pc, #416]	; (8002758 <stdin_irq_dma+0x11bc>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d045      	beq.n	8002646 <stdin_irq_dma+0x10aa>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a66      	ldr	r2, [pc, #408]	; (800275c <stdin_irq_dma+0x11c0>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d03c      	beq.n	8002642 <stdin_irq_dma+0x10a6>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a63      	ldr	r2, [pc, #396]	; (8002760 <stdin_irq_dma+0x11c4>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d033      	beq.n	800263e <stdin_irq_dma+0x10a2>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a61      	ldr	r2, [pc, #388]	; (8002764 <stdin_irq_dma+0x11c8>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d02a      	beq.n	800263a <stdin_irq_dma+0x109e>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a5e      	ldr	r2, [pc, #376]	; (8002768 <stdin_irq_dma+0x11cc>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d020      	beq.n	8002634 <stdin_irq_dma+0x1098>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a5c      	ldr	r2, [pc, #368]	; (800276c <stdin_irq_dma+0x11d0>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d016      	beq.n	800262e <stdin_irq_dma+0x1092>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a59      	ldr	r2, [pc, #356]	; (8002770 <stdin_irq_dma+0x11d4>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d00c      	beq.n	8002628 <stdin_irq_dma+0x108c>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a57      	ldr	r2, [pc, #348]	; (8002774 <stdin_irq_dma+0x11d8>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d102      	bne.n	8002622 <stdin_irq_dma+0x1086>
 800261c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002620:	e01a      	b.n	8002658 <stdin_irq_dma+0x10bc>
 8002622:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002626:	e017      	b.n	8002658 <stdin_irq_dma+0x10bc>
 8002628:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800262c:	e014      	b.n	8002658 <stdin_irq_dma+0x10bc>
 800262e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002632:	e011      	b.n	8002658 <stdin_irq_dma+0x10bc>
 8002634:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002638:	e00e      	b.n	8002658 <stdin_irq_dma+0x10bc>
 800263a:	2340      	movs	r3, #64	; 0x40
 800263c:	e00c      	b.n	8002658 <stdin_irq_dma+0x10bc>
 800263e:	2340      	movs	r3, #64	; 0x40
 8002640:	e00a      	b.n	8002658 <stdin_irq_dma+0x10bc>
 8002642:	2340      	movs	r3, #64	; 0x40
 8002644:	e008      	b.n	8002658 <stdin_irq_dma+0x10bc>
 8002646:	2340      	movs	r3, #64	; 0x40
 8002648:	e006      	b.n	8002658 <stdin_irq_dma+0x10bc>
 800264a:	2301      	movs	r3, #1
 800264c:	e004      	b.n	8002658 <stdin_irq_dma+0x10bc>
 800264e:	2301      	movs	r3, #1
 8002650:	e002      	b.n	8002658 <stdin_irq_dma+0x10bc>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <stdin_irq_dma+0x10bc>
 8002656:	2301      	movs	r3, #1
 8002658:	4a47      	ldr	r2, [pc, #284]	; (8002778 <stdin_irq_dma+0x11dc>)
 800265a:	60d3      	str	r3, [r2, #12]
 800265c:	e091      	b.n	8002782 <stdin_irq_dma+0x11e6>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a38      	ldr	r2, [pc, #224]	; (8002748 <stdin_irq_dma+0x11ac>)
 8002668:	4293      	cmp	r3, r2
 800266a:	f000 8087 	beq.w	800277c <stdin_irq_dma+0x11e0>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a35      	ldr	r2, [pc, #212]	; (800274c <stdin_irq_dma+0x11b0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d060      	beq.n	800273e <stdin_irq_dma+0x11a2>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a32      	ldr	r2, [pc, #200]	; (8002750 <stdin_irq_dma+0x11b4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d057      	beq.n	800273a <stdin_irq_dma+0x119e>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a30      	ldr	r2, [pc, #192]	; (8002754 <stdin_irq_dma+0x11b8>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d04e      	beq.n	8002736 <stdin_irq_dma+0x119a>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a2d      	ldr	r2, [pc, #180]	; (8002758 <stdin_irq_dma+0x11bc>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d045      	beq.n	8002732 <stdin_irq_dma+0x1196>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a2b      	ldr	r2, [pc, #172]	; (800275c <stdin_irq_dma+0x11c0>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d03c      	beq.n	800272e <stdin_irq_dma+0x1192>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a28      	ldr	r2, [pc, #160]	; (8002760 <stdin_irq_dma+0x11c4>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d033      	beq.n	800272a <stdin_irq_dma+0x118e>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a26      	ldr	r2, [pc, #152]	; (8002764 <stdin_irq_dma+0x11c8>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d02a      	beq.n	8002726 <stdin_irq_dma+0x118a>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a23      	ldr	r2, [pc, #140]	; (8002768 <stdin_irq_dma+0x11cc>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d020      	beq.n	8002720 <stdin_irq_dma+0x1184>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a21      	ldr	r2, [pc, #132]	; (800276c <stdin_irq_dma+0x11d0>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d016      	beq.n	800271a <stdin_irq_dma+0x117e>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a1e      	ldr	r2, [pc, #120]	; (8002770 <stdin_irq_dma+0x11d4>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d00c      	beq.n	8002714 <stdin_irq_dma+0x1178>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a1c      	ldr	r2, [pc, #112]	; (8002774 <stdin_irq_dma+0x11d8>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d102      	bne.n	800270e <stdin_irq_dma+0x1172>
 8002708:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800270c:	e037      	b.n	800277e <stdin_irq_dma+0x11e2>
 800270e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002712:	e034      	b.n	800277e <stdin_irq_dma+0x11e2>
 8002714:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002718:	e031      	b.n	800277e <stdin_irq_dma+0x11e2>
 800271a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800271e:	e02e      	b.n	800277e <stdin_irq_dma+0x11e2>
 8002720:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002724:	e02b      	b.n	800277e <stdin_irq_dma+0x11e2>
 8002726:	2340      	movs	r3, #64	; 0x40
 8002728:	e029      	b.n	800277e <stdin_irq_dma+0x11e2>
 800272a:	2340      	movs	r3, #64	; 0x40
 800272c:	e027      	b.n	800277e <stdin_irq_dma+0x11e2>
 800272e:	2340      	movs	r3, #64	; 0x40
 8002730:	e025      	b.n	800277e <stdin_irq_dma+0x11e2>
 8002732:	2340      	movs	r3, #64	; 0x40
 8002734:	e023      	b.n	800277e <stdin_irq_dma+0x11e2>
 8002736:	2301      	movs	r3, #1
 8002738:	e021      	b.n	800277e <stdin_irq_dma+0x11e2>
 800273a:	2301      	movs	r3, #1
 800273c:	e01f      	b.n	800277e <stdin_irq_dma+0x11e2>
 800273e:	2301      	movs	r3, #1
 8002740:	e01d      	b.n	800277e <stdin_irq_dma+0x11e2>
 8002742:	bf00      	nop
 8002744:	40026058 	.word	0x40026058
 8002748:	40026010 	.word	0x40026010
 800274c:	40026410 	.word	0x40026410
 8002750:	40026070 	.word	0x40026070
 8002754:	40026470 	.word	0x40026470
 8002758:	40026028 	.word	0x40026028
 800275c:	40026428 	.word	0x40026428
 8002760:	40026088 	.word	0x40026088
 8002764:	40026488 	.word	0x40026488
 8002768:	40026040 	.word	0x40026040
 800276c:	40026440 	.word	0x40026440
 8002770:	400260a0 	.word	0x400260a0
 8002774:	400264a0 	.word	0x400264a0
 8002778:	40026000 	.word	0x40026000
 800277c:	2301      	movs	r3, #1
 800277e:	4a82      	ldr	r2, [pc, #520]	; (8002988 <stdin_irq_dma+0x13ec>)
 8002780:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_DME_FLAG_INDEX(HDMA(in)));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	461a      	mov	r2, r3
 800278c:	4b7f      	ldr	r3, [pc, #508]	; (800298c <stdin_irq_dma+0x13f0>)
 800278e:	429a      	cmp	r2, r3
 8002790:	d978      	bls.n	8002884 <stdin_irq_dma+0x12e8>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a7d      	ldr	r2, [pc, #500]	; (8002990 <stdin_irq_dma+0x13f4>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d06d      	beq.n	800287c <stdin_irq_dma+0x12e0>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a7a      	ldr	r2, [pc, #488]	; (8002994 <stdin_irq_dma+0x13f8>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d064      	beq.n	8002878 <stdin_irq_dma+0x12dc>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a78      	ldr	r2, [pc, #480]	; (8002998 <stdin_irq_dma+0x13fc>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d05b      	beq.n	8002874 <stdin_irq_dma+0x12d8>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a75      	ldr	r2, [pc, #468]	; (800299c <stdin_irq_dma+0x1400>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d052      	beq.n	8002870 <stdin_irq_dma+0x12d4>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a73      	ldr	r2, [pc, #460]	; (80029a0 <stdin_irq_dma+0x1404>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d048      	beq.n	800286a <stdin_irq_dma+0x12ce>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a70      	ldr	r2, [pc, #448]	; (80029a4 <stdin_irq_dma+0x1408>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d03e      	beq.n	8002864 <stdin_irq_dma+0x12c8>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a6e      	ldr	r2, [pc, #440]	; (80029a8 <stdin_irq_dma+0x140c>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d034      	beq.n	800285e <stdin_irq_dma+0x12c2>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a6b      	ldr	r2, [pc, #428]	; (80029ac <stdin_irq_dma+0x1410>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d02a      	beq.n	8002858 <stdin_irq_dma+0x12bc>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a69      	ldr	r2, [pc, #420]	; (80029b0 <stdin_irq_dma+0x1414>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d020      	beq.n	8002852 <stdin_irq_dma+0x12b6>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a66      	ldr	r2, [pc, #408]	; (80029b4 <stdin_irq_dma+0x1418>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d016      	beq.n	800284c <stdin_irq_dma+0x12b0>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a64      	ldr	r2, [pc, #400]	; (80029b8 <stdin_irq_dma+0x141c>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d00c      	beq.n	8002846 <stdin_irq_dma+0x12aa>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a61      	ldr	r2, [pc, #388]	; (80029bc <stdin_irq_dma+0x1420>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d102      	bne.n	8002840 <stdin_irq_dma+0x12a4>
 800283a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800283e:	e01e      	b.n	800287e <stdin_irq_dma+0x12e2>
 8002840:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002844:	e01b      	b.n	800287e <stdin_irq_dma+0x12e2>
 8002846:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800284a:	e018      	b.n	800287e <stdin_irq_dma+0x12e2>
 800284c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002850:	e015      	b.n	800287e <stdin_irq_dma+0x12e2>
 8002852:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002856:	e012      	b.n	800287e <stdin_irq_dma+0x12e2>
 8002858:	f44f 7380 	mov.w	r3, #256	; 0x100
 800285c:	e00f      	b.n	800287e <stdin_irq_dma+0x12e2>
 800285e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002862:	e00c      	b.n	800287e <stdin_irq_dma+0x12e2>
 8002864:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002868:	e009      	b.n	800287e <stdin_irq_dma+0x12e2>
 800286a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800286e:	e006      	b.n	800287e <stdin_irq_dma+0x12e2>
 8002870:	2304      	movs	r3, #4
 8002872:	e004      	b.n	800287e <stdin_irq_dma+0x12e2>
 8002874:	2304      	movs	r3, #4
 8002876:	e002      	b.n	800287e <stdin_irq_dma+0x12e2>
 8002878:	2304      	movs	r3, #4
 800287a:	e000      	b.n	800287e <stdin_irq_dma+0x12e2>
 800287c:	2304      	movs	r3, #4
 800287e:	4a50      	ldr	r2, [pc, #320]	; (80029c0 <stdin_irq_dma+0x1424>)
 8002880:	60d3      	str	r3, [r2, #12]
 8002882:	e19a      	b.n	8002bba <stdin_irq_dma+0x161e>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	4b4d      	ldr	r3, [pc, #308]	; (80029c4 <stdin_irq_dma+0x1428>)
 8002890:	429a      	cmp	r2, r3
 8002892:	f240 8099 	bls.w	80029c8 <stdin_irq_dma+0x142c>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a3c      	ldr	r2, [pc, #240]	; (8002990 <stdin_irq_dma+0x13f4>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d06d      	beq.n	8002980 <stdin_irq_dma+0x13e4>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a39      	ldr	r2, [pc, #228]	; (8002994 <stdin_irq_dma+0x13f8>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d064      	beq.n	800297c <stdin_irq_dma+0x13e0>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a37      	ldr	r2, [pc, #220]	; (8002998 <stdin_irq_dma+0x13fc>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d05b      	beq.n	8002978 <stdin_irq_dma+0x13dc>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a34      	ldr	r2, [pc, #208]	; (800299c <stdin_irq_dma+0x1400>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d052      	beq.n	8002974 <stdin_irq_dma+0x13d8>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a32      	ldr	r2, [pc, #200]	; (80029a0 <stdin_irq_dma+0x1404>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d048      	beq.n	800296e <stdin_irq_dma+0x13d2>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a2f      	ldr	r2, [pc, #188]	; (80029a4 <stdin_irq_dma+0x1408>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d03e      	beq.n	8002968 <stdin_irq_dma+0x13cc>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a2d      	ldr	r2, [pc, #180]	; (80029a8 <stdin_irq_dma+0x140c>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d034      	beq.n	8002962 <stdin_irq_dma+0x13c6>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a2a      	ldr	r2, [pc, #168]	; (80029ac <stdin_irq_dma+0x1410>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d02a      	beq.n	800295c <stdin_irq_dma+0x13c0>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a28      	ldr	r2, [pc, #160]	; (80029b0 <stdin_irq_dma+0x1414>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d020      	beq.n	8002956 <stdin_irq_dma+0x13ba>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a25      	ldr	r2, [pc, #148]	; (80029b4 <stdin_irq_dma+0x1418>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d016      	beq.n	8002950 <stdin_irq_dma+0x13b4>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a23      	ldr	r2, [pc, #140]	; (80029b8 <stdin_irq_dma+0x141c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d00c      	beq.n	800294a <stdin_irq_dma+0x13ae>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a20      	ldr	r2, [pc, #128]	; (80029bc <stdin_irq_dma+0x1420>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d102      	bne.n	8002944 <stdin_irq_dma+0x13a8>
 800293e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002942:	e01e      	b.n	8002982 <stdin_irq_dma+0x13e6>
 8002944:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002948:	e01b      	b.n	8002982 <stdin_irq_dma+0x13e6>
 800294a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800294e:	e018      	b.n	8002982 <stdin_irq_dma+0x13e6>
 8002950:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002954:	e015      	b.n	8002982 <stdin_irq_dma+0x13e6>
 8002956:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800295a:	e012      	b.n	8002982 <stdin_irq_dma+0x13e6>
 800295c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002960:	e00f      	b.n	8002982 <stdin_irq_dma+0x13e6>
 8002962:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002966:	e00c      	b.n	8002982 <stdin_irq_dma+0x13e6>
 8002968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800296c:	e009      	b.n	8002982 <stdin_irq_dma+0x13e6>
 800296e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002972:	e006      	b.n	8002982 <stdin_irq_dma+0x13e6>
 8002974:	2304      	movs	r3, #4
 8002976:	e004      	b.n	8002982 <stdin_irq_dma+0x13e6>
 8002978:	2304      	movs	r3, #4
 800297a:	e002      	b.n	8002982 <stdin_irq_dma+0x13e6>
 800297c:	2304      	movs	r3, #4
 800297e:	e000      	b.n	8002982 <stdin_irq_dma+0x13e6>
 8002980:	2304      	movs	r3, #4
 8002982:	4a0f      	ldr	r2, [pc, #60]	; (80029c0 <stdin_irq_dma+0x1424>)
 8002984:	6093      	str	r3, [r2, #8]
 8002986:	e118      	b.n	8002bba <stdin_irq_dma+0x161e>
 8002988:	40026000 	.word	0x40026000
 800298c:	40026458 	.word	0x40026458
 8002990:	40026010 	.word	0x40026010
 8002994:	40026410 	.word	0x40026410
 8002998:	40026070 	.word	0x40026070
 800299c:	40026470 	.word	0x40026470
 80029a0:	40026028 	.word	0x40026028
 80029a4:	40026428 	.word	0x40026428
 80029a8:	40026088 	.word	0x40026088
 80029ac:	40026488 	.word	0x40026488
 80029b0:	40026040 	.word	0x40026040
 80029b4:	40026440 	.word	0x40026440
 80029b8:	400260a0 	.word	0x400260a0
 80029bc:	400264a0 	.word	0x400264a0
 80029c0:	40026400 	.word	0x40026400
 80029c4:	400260b8 	.word	0x400260b8
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	461a      	mov	r2, r3
 80029d2:	4b80      	ldr	r3, [pc, #512]	; (8002bd4 <stdin_irq_dma+0x1638>)
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d978      	bls.n	8002aca <stdin_irq_dma+0x152e>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a7d      	ldr	r2, [pc, #500]	; (8002bd8 <stdin_irq_dma+0x163c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d06d      	beq.n	8002ac2 <stdin_irq_dma+0x1526>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a7b      	ldr	r2, [pc, #492]	; (8002bdc <stdin_irq_dma+0x1640>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d064      	beq.n	8002abe <stdin_irq_dma+0x1522>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a78      	ldr	r2, [pc, #480]	; (8002be0 <stdin_irq_dma+0x1644>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d05b      	beq.n	8002aba <stdin_irq_dma+0x151e>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a76      	ldr	r2, [pc, #472]	; (8002be4 <stdin_irq_dma+0x1648>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d052      	beq.n	8002ab6 <stdin_irq_dma+0x151a>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a73      	ldr	r2, [pc, #460]	; (8002be8 <stdin_irq_dma+0x164c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d048      	beq.n	8002ab0 <stdin_irq_dma+0x1514>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a71      	ldr	r2, [pc, #452]	; (8002bec <stdin_irq_dma+0x1650>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d03e      	beq.n	8002aaa <stdin_irq_dma+0x150e>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a6e      	ldr	r2, [pc, #440]	; (8002bf0 <stdin_irq_dma+0x1654>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d034      	beq.n	8002aa4 <stdin_irq_dma+0x1508>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a6c      	ldr	r2, [pc, #432]	; (8002bf4 <stdin_irq_dma+0x1658>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d02a      	beq.n	8002a9e <stdin_irq_dma+0x1502>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a69      	ldr	r2, [pc, #420]	; (8002bf8 <stdin_irq_dma+0x165c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d020      	beq.n	8002a98 <stdin_irq_dma+0x14fc>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a67      	ldr	r2, [pc, #412]	; (8002bfc <stdin_irq_dma+0x1660>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d016      	beq.n	8002a92 <stdin_irq_dma+0x14f6>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a64      	ldr	r2, [pc, #400]	; (8002c00 <stdin_irq_dma+0x1664>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d00c      	beq.n	8002a8c <stdin_irq_dma+0x14f0>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a62      	ldr	r2, [pc, #392]	; (8002c04 <stdin_irq_dma+0x1668>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d102      	bne.n	8002a86 <stdin_irq_dma+0x14ea>
 8002a80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a84:	e01e      	b.n	8002ac4 <stdin_irq_dma+0x1528>
 8002a86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a8a:	e01b      	b.n	8002ac4 <stdin_irq_dma+0x1528>
 8002a8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a90:	e018      	b.n	8002ac4 <stdin_irq_dma+0x1528>
 8002a92:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a96:	e015      	b.n	8002ac4 <stdin_irq_dma+0x1528>
 8002a98:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a9c:	e012      	b.n	8002ac4 <stdin_irq_dma+0x1528>
 8002a9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aa2:	e00f      	b.n	8002ac4 <stdin_irq_dma+0x1528>
 8002aa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aa8:	e00c      	b.n	8002ac4 <stdin_irq_dma+0x1528>
 8002aaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aae:	e009      	b.n	8002ac4 <stdin_irq_dma+0x1528>
 8002ab0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ab4:	e006      	b.n	8002ac4 <stdin_irq_dma+0x1528>
 8002ab6:	2304      	movs	r3, #4
 8002ab8:	e004      	b.n	8002ac4 <stdin_irq_dma+0x1528>
 8002aba:	2304      	movs	r3, #4
 8002abc:	e002      	b.n	8002ac4 <stdin_irq_dma+0x1528>
 8002abe:	2304      	movs	r3, #4
 8002ac0:	e000      	b.n	8002ac4 <stdin_irq_dma+0x1528>
 8002ac2:	2304      	movs	r3, #4
 8002ac4:	4a50      	ldr	r2, [pc, #320]	; (8002c08 <stdin_irq_dma+0x166c>)
 8002ac6:	60d3      	str	r3, [r2, #12]
 8002ac8:	e077      	b.n	8002bba <stdin_irq_dma+0x161e>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a41      	ldr	r2, [pc, #260]	; (8002bd8 <stdin_irq_dma+0x163c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d06d      	beq.n	8002bb4 <stdin_irq_dma+0x1618>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a3e      	ldr	r2, [pc, #248]	; (8002bdc <stdin_irq_dma+0x1640>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d064      	beq.n	8002bb0 <stdin_irq_dma+0x1614>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a3c      	ldr	r2, [pc, #240]	; (8002be0 <stdin_irq_dma+0x1644>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d05b      	beq.n	8002bac <stdin_irq_dma+0x1610>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a39      	ldr	r2, [pc, #228]	; (8002be4 <stdin_irq_dma+0x1648>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d052      	beq.n	8002ba8 <stdin_irq_dma+0x160c>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a37      	ldr	r2, [pc, #220]	; (8002be8 <stdin_irq_dma+0x164c>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d048      	beq.n	8002ba2 <stdin_irq_dma+0x1606>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a34      	ldr	r2, [pc, #208]	; (8002bec <stdin_irq_dma+0x1650>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d03e      	beq.n	8002b9c <stdin_irq_dma+0x1600>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a32      	ldr	r2, [pc, #200]	; (8002bf0 <stdin_irq_dma+0x1654>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d034      	beq.n	8002b96 <stdin_irq_dma+0x15fa>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a2f      	ldr	r2, [pc, #188]	; (8002bf4 <stdin_irq_dma+0x1658>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d02a      	beq.n	8002b90 <stdin_irq_dma+0x15f4>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a2d      	ldr	r2, [pc, #180]	; (8002bf8 <stdin_irq_dma+0x165c>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d020      	beq.n	8002b8a <stdin_irq_dma+0x15ee>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a2a      	ldr	r2, [pc, #168]	; (8002bfc <stdin_irq_dma+0x1660>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d016      	beq.n	8002b84 <stdin_irq_dma+0x15e8>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a28      	ldr	r2, [pc, #160]	; (8002c00 <stdin_irq_dma+0x1664>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d00c      	beq.n	8002b7e <stdin_irq_dma+0x15e2>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a25      	ldr	r2, [pc, #148]	; (8002c04 <stdin_irq_dma+0x1668>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d102      	bne.n	8002b78 <stdin_irq_dma+0x15dc>
 8002b72:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b76:	e01e      	b.n	8002bb6 <stdin_irq_dma+0x161a>
 8002b78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b7c:	e01b      	b.n	8002bb6 <stdin_irq_dma+0x161a>
 8002b7e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b82:	e018      	b.n	8002bb6 <stdin_irq_dma+0x161a>
 8002b84:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b88:	e015      	b.n	8002bb6 <stdin_irq_dma+0x161a>
 8002b8a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b8e:	e012      	b.n	8002bb6 <stdin_irq_dma+0x161a>
 8002b90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b94:	e00f      	b.n	8002bb6 <stdin_irq_dma+0x161a>
 8002b96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b9a:	e00c      	b.n	8002bb6 <stdin_irq_dma+0x161a>
 8002b9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ba0:	e009      	b.n	8002bb6 <stdin_irq_dma+0x161a>
 8002ba2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ba6:	e006      	b.n	8002bb6 <stdin_irq_dma+0x161a>
 8002ba8:	2304      	movs	r3, #4
 8002baa:	e004      	b.n	8002bb6 <stdin_irq_dma+0x161a>
 8002bac:	2304      	movs	r3, #4
 8002bae:	e002      	b.n	8002bb6 <stdin_irq_dma+0x161a>
 8002bb0:	2304      	movs	r3, #4
 8002bb2:	e000      	b.n	8002bb6 <stdin_irq_dma+0x161a>
 8002bb4:	2304      	movs	r3, #4
 8002bb6:	4a14      	ldr	r2, [pc, #80]	; (8002c08 <stdin_irq_dma+0x166c>)
 8002bb8:	6093      	str	r3, [r2, #8]
    HAL_UART_Receive_DMA(in->huart, in->buffer, in->size);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6818      	ldr	r0, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6899      	ldr	r1, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	899b      	ldrh	r3, [r3, #12]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	f004 f875 	bl	8006cb6 <HAL_UART_Receive_DMA>
}
 8002bcc:	bf00      	nop
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40026058 	.word	0x40026058
 8002bd8:	40026010 	.word	0x40026010
 8002bdc:	40026410 	.word	0x40026410
 8002be0:	40026070 	.word	0x40026070
 8002be4:	40026470 	.word	0x40026470
 8002be8:	40026028 	.word	0x40026028
 8002bec:	40026428 	.word	0x40026428
 8002bf0:	40026088 	.word	0x40026088
 8002bf4:	40026488 	.word	0x40026488
 8002bf8:	40026040 	.word	0x40026040
 8002bfc:	40026440 	.word	0x40026440
 8002c00:	400260a0 	.word	0x400260a0
 8002c04:	400264a0 	.word	0x400264a0
 8002c08:	40026000 	.word	0x40026000

08002c0c <stdin_irq_uart>:

void stdin_irq_uart(stdin_t *in)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  if (__HAL_UART_GET_FLAG(in->huart, UART_FLAG_IDLE))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0310 	and.w	r3, r3, #16
 8002c20:	2b10      	cmp	r3, #16
 8002c22:	d10f      	bne.n	8002c44 <stdin_irq_uart+0x38>
  {
    __HAL_UART_CLEAR_IDLEFLAG(in->huart);
 8002c24:	2300      	movs	r3, #0
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
    check_buffer(in);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f804 	bl	8002c4c <check_buffer>
  }
}
 8002c44:	bf00      	nop
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <check_buffer>:

/* Private function implementations
 * --------------------------------------------*/
static void check_buffer(stdin_t *in)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint16_t pos;
  uint16_t new;

  /* Calculate current position in buffer */
  new = __HAL_DMA_GET_COUNTER(HDMA(in));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	81fb      	strh	r3, [r7, #14]
  pos = in->size - new;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	899a      	ldrh	r2, [r3, #12]
 8002c64:	89fb      	ldrh	r3, [r7, #14]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	81bb      	strh	r3, [r7, #12]

  /* Check change in received data */
  if (pos != in->pos)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	89db      	ldrh	r3, [r3, #14]
 8002c6e:	89ba      	ldrh	r2, [r7, #12]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d025      	beq.n	8002cc0 <check_buffer+0x74>
  {
    if (pos > in->pos)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	89db      	ldrh	r3, [r3, #14]
 8002c78:	89ba      	ldrh	r2, [r7, #12]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d90b      	bls.n	8002c96 <check_buffer+0x4a>
      /* Current position is over previous one */
      /* We are in "linear" mode */
      /* Process data directly by subtracting "pointers" */
      fill_buffer(in, in->pos, pos - in->pos);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	89d9      	ldrh	r1, [r3, #14]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	89db      	ldrh	r3, [r3, #14]
 8002c86:	89ba      	ldrh	r2, [r7, #12]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f824 	bl	8002cdc <fill_buffer>
 8002c94:	e014      	b.n	8002cc0 <check_buffer+0x74>
    else
    {
      /* We are in "overflow" mode */
      /* First process data to the end of buffer */
      fill_buffer(in, in->pos, in->size - in->pos);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	89d9      	ldrh	r1, [r3, #14]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	899a      	ldrh	r2, [r3, #12]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	89db      	ldrh	r3, [r3, #14]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 f817 	bl	8002cdc <fill_buffer>
      /* Check and continue with beginning of buffer */
      if (pos > 0)
 8002cae:	89bb      	ldrh	r3, [r7, #12]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <check_buffer+0x74>
        fill_buffer(in, 0, pos);
 8002cb4:	89bb      	ldrh	r3, [r7, #12]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	2100      	movs	r1, #0
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f80e 	bl	8002cdc <fill_buffer>
    }
  }

  /* Check and manually update if we reached end of buffer */
  in->pos = (pos == in->size) ? 0 : pos;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	899b      	ldrh	r3, [r3, #12]
 8002cc4:	89ba      	ldrh	r2, [r7, #12]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d001      	beq.n	8002cce <check_buffer+0x82>
 8002cca:	89ba      	ldrh	r2, [r7, #12]
 8002ccc:	e000      	b.n	8002cd0 <check_buffer+0x84>
 8002cce:	2200      	movs	r2, #0
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	81da      	strh	r2, [r3, #14]
}
 8002cd4:	bf00      	nop
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <fill_buffer>:

static void fill_buffer(stdin_t *in, uint16_t pos, uint16_t size)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	807b      	strh	r3, [r7, #2]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	803b      	strh	r3, [r7, #0]
  if (NULL == in->callback)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d009      	beq.n	8002d08 <fill_buffer+0x2c>
    return;

  in->callback(&in->buffer[pos], size);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6891      	ldr	r1, [r2, #8]
 8002cfc:	887a      	ldrh	r2, [r7, #2]
 8002cfe:	440a      	add	r2, r1
 8002d00:	8839      	ldrh	r1, [r7, #0]
 8002d02:	4610      	mov	r0, r2
 8002d04:	4798      	blx	r3
 8002d06:	e000      	b.n	8002d0a <fill_buffer+0x2e>
    return;
 8002d08:	bf00      	nop
}
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_MspInit>:

extern DMA_HandleTypeDef hdma_usart2_rx;


void HAL_MspInit(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	607b      	str	r3, [r7, #4]
 8002d1a:	4b10      	ldr	r3, [pc, #64]	; (8002d5c <HAL_MspInit+0x4c>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	4a0f      	ldr	r2, [pc, #60]	; (8002d5c <HAL_MspInit+0x4c>)
 8002d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d24:	6453      	str	r3, [r2, #68]	; 0x44
 8002d26:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <HAL_MspInit+0x4c>)
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d2e:	607b      	str	r3, [r7, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	603b      	str	r3, [r7, #0]
 8002d36:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <HAL_MspInit+0x4c>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	4a08      	ldr	r2, [pc, #32]	; (8002d5c <HAL_MspInit+0x4c>)
 8002d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d40:	6413      	str	r3, [r2, #64]	; 0x40
 8002d42:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <HAL_MspInit+0x4c>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002d4e:	2007      	movs	r0, #7
 8002d50:	f000 fb86 	bl	8003460 <HAL_NVIC_SetPriorityGrouping>
}
 8002d54:	bf00      	nop
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40023800 	.word	0x40023800

08002d60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08a      	sub	sp, #40	; 0x28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	f107 0314 	add.w	r3, r7, #20
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
 8002d76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a34      	ldr	r2, [pc, #208]	; (8002e50 <HAL_UART_MspInit+0xf0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d162      	bne.n	8002e48 <HAL_UART_MspInit+0xe8>
  {
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	4b33      	ldr	r3, [pc, #204]	; (8002e54 <HAL_UART_MspInit+0xf4>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	4a32      	ldr	r2, [pc, #200]	; (8002e54 <HAL_UART_MspInit+0xf4>)
 8002d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d90:	6413      	str	r3, [r2, #64]	; 0x40
 8002d92:	4b30      	ldr	r3, [pc, #192]	; (8002e54 <HAL_UART_MspInit+0xf4>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	4b2c      	ldr	r3, [pc, #176]	; (8002e54 <HAL_UART_MspInit+0xf4>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	4a2b      	ldr	r2, [pc, #172]	; (8002e54 <HAL_UART_MspInit+0xf4>)
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	6313      	str	r3, [r2, #48]	; 0x30
 8002dae:	4b29      	ldr	r3, [pc, #164]	; (8002e54 <HAL_UART_MspInit+0xf4>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin 		= USART_TX_Pin|USART_RX_Pin;
 8002dba:	230c      	movs	r3, #12
 8002dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate 	= GPIO_AF7_USART2;
 8002dca:	2307      	movs	r3, #7
 8002dcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dce:	f107 0314 	add.w	r3, r7, #20
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4820      	ldr	r0, [pc, #128]	; (8002e58 <HAL_UART_MspInit+0xf8>)
 8002dd6:	f000 ff95 	bl	8003d04 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance 				= DMA1_Stream5;
 8002dda:	4b20      	ldr	r3, [pc, #128]	; (8002e5c <HAL_UART_MspInit+0xfc>)
 8002ddc:	4a20      	ldr	r2, [pc, #128]	; (8002e60 <HAL_UART_MspInit+0x100>)
 8002dde:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel 			= DMA_CHANNEL_4;
 8002de0:	4b1e      	ldr	r3, [pc, #120]	; (8002e5c <HAL_UART_MspInit+0xfc>)
 8002de2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002de6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction 			= DMA_PERIPH_TO_MEMORY;
 8002de8:	4b1c      	ldr	r3, [pc, #112]	; (8002e5c <HAL_UART_MspInit+0xfc>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8002dee:	4b1b      	ldr	r3, [pc, #108]	; (8002e5c <HAL_UART_MspInit+0xfc>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8002df4:	4b19      	ldr	r3, [pc, #100]	; (8002e5c <HAL_UART_MspInit+0xfc>)
 8002df6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dfa:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dfc:	4b17      	ldr	r3, [pc, #92]	; (8002e5c <HAL_UART_MspInit+0xfc>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8002e02:	4b16      	ldr	r3, [pc, #88]	; (8002e5c <HAL_UART_MspInit+0xfc>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode 				= DMA_CIRCULAR;
 8002e08:	4b14      	ldr	r3, [pc, #80]	; (8002e5c <HAL_UART_MspInit+0xfc>)
 8002e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e0e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority 			= DMA_PRIORITY_LOW;
 8002e10:	4b12      	ldr	r3, [pc, #72]	; (8002e5c <HAL_UART_MspInit+0xfc>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 8002e16:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <HAL_UART_MspInit+0xfc>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002e1c:	480f      	ldr	r0, [pc, #60]	; (8002e5c <HAL_UART_MspInit+0xfc>)
 8002e1e:	f000 fb61 	bl	80034e4 <HAL_DMA_Init>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002e28:	f7fe fac8 	bl	80013bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a0b      	ldr	r2, [pc, #44]	; (8002e5c <HAL_UART_MspInit+0xfc>)
 8002e30:	639a      	str	r2, [r3, #56]	; 0x38
 8002e32:	4a0a      	ldr	r2, [pc, #40]	; (8002e5c <HAL_UART_MspInit+0xfc>)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002e38:	2200      	movs	r2, #0
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	2026      	movs	r0, #38	; 0x26
 8002e3e:	f000 fb1a 	bl	8003476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e42:	2026      	movs	r0, #38	; 0x26
 8002e44:	f000 fb33 	bl	80034ae <HAL_NVIC_EnableIRQ>
  }

}
 8002e48:	bf00      	nop
 8002e4a:	3728      	adds	r7, #40	; 0x28
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40004400 	.word	0x40004400
 8002e54:	40023800 	.word	0x40023800
 8002e58:	40020000 	.word	0x40020000
 8002e5c:	20000134 	.word	0x20000134
 8002e60:	40026088 	.word	0x40026088

08002e64 <HAL_I2C_MspInit>:
  *           - NVIC configuration for DMA interrupt request enable
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08a      	sub	sp, #40	; 0x28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /*##-1- Enable GPIO Clocks #################################################*/
  /* Enable GPIO TX/RX clock */
  I2Cx_SCL_GPIO_CLK_ENABLE();
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	613b      	str	r3, [r7, #16]
 8002e70:	4b2b      	ldr	r3, [pc, #172]	; (8002f20 <HAL_I2C_MspInit+0xbc>)
 8002e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e74:	4a2a      	ldr	r2, [pc, #168]	; (8002f20 <HAL_I2C_MspInit+0xbc>)
 8002e76:	f043 0302 	orr.w	r3, r3, #2
 8002e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7c:	4b28      	ldr	r3, [pc, #160]	; (8002f20 <HAL_I2C_MspInit+0xbc>)
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	613b      	str	r3, [r7, #16]
 8002e86:	693b      	ldr	r3, [r7, #16]
  I2Cx_SDA_GPIO_CLK_ENABLE();
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	4b24      	ldr	r3, [pc, #144]	; (8002f20 <HAL_I2C_MspInit+0xbc>)
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e90:	4a23      	ldr	r2, [pc, #140]	; (8002f20 <HAL_I2C_MspInit+0xbc>)
 8002e92:	f043 0302 	orr.w	r3, r3, #2
 8002e96:	6313      	str	r3, [r2, #48]	; 0x30
 8002e98:	4b21      	ldr	r3, [pc, #132]	; (8002f20 <HAL_I2C_MspInit+0xbc>)
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* I2C TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
 8002ea4:	2340      	movs	r3, #64	; 0x40
 8002ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8002ea8:	2312      	movs	r3, #18
 8002eaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8002eac:	2301      	movs	r3, #1
 8002eae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
 8002eb4:	2304      	movs	r3, #4
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002eb8:	f107 0314 	add.w	r3, r7, #20
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4819      	ldr	r0, [pc, #100]	; (8002f24 <HAL_I2C_MspInit+0xc0>)
 8002ec0:	f000 ff20 	bl	8003d04 <HAL_GPIO_Init>

  /* I2C RX GPIO pin configuration  */
  GPIO_InitStruct.Pin 		= I2Cx_SDA_PIN;
 8002ec4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ec8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = I2Cx_SDA_AF;
 8002eca:	2304      	movs	r3, #4
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002ece:	f107 0314 	add.w	r3, r7, #20
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4813      	ldr	r0, [pc, #76]	; (8002f24 <HAL_I2C_MspInit+0xc0>)
 8002ed6:	f000 ff15 	bl	8003d04 <HAL_GPIO_Init>

  /*##-3- Enable I2C peripheral Clock ########################################*/
  /* Enable I2C1 clock */
  I2Cx_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	60bb      	str	r3, [r7, #8]
 8002ede:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <HAL_I2C_MspInit+0xbc>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	4a0f      	ldr	r2, [pc, #60]	; (8002f20 <HAL_I2C_MspInit+0xbc>)
 8002ee4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eea:	4b0d      	ldr	r3, [pc, #52]	; (8002f20 <HAL_I2C_MspInit+0xbc>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ef2:	60bb      	str	r3, [r7, #8]
 8002ef4:	68bb      	ldr	r3, [r7, #8]

  /*##-4- Configure the NVIC for I2C #########################################*/
  /* NVIC for I2C1 */
  HAL_NVIC_SetPriority(I2Cx_ER_IRQn, 1, 0);
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2101      	movs	r1, #1
 8002efa:	2020      	movs	r0, #32
 8002efc:	f000 fabb 	bl	8003476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2Cx_ER_IRQn);
 8002f00:	2020      	movs	r0, #32
 8002f02:	f000 fad4 	bl	80034ae <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(I2Cx_EV_IRQn, 2, 0);
 8002f06:	2200      	movs	r2, #0
 8002f08:	2102      	movs	r1, #2
 8002f0a:	201f      	movs	r0, #31
 8002f0c:	f000 fab3 	bl	8003476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2Cx_EV_IRQn);
 8002f10:	201f      	movs	r0, #31
 8002f12:	f000 facc 	bl	80034ae <HAL_NVIC_EnableIRQ>
}
 8002f16:	bf00      	nop
 8002f18:	3728      	adds	r7, #40	; 0x28
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40023800 	.word	0x40023800
 8002f24:	40020400 	.word	0x40020400

08002f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  while (1)
 8002f2c:	e7fe      	b.n	8002f2c <NMI_Handler+0x4>

08002f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	af00      	add	r7, sp, #0
  while (1)
 8002f32:	e7fe      	b.n	8002f32 <HardFault_Handler+0x4>

08002f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  while (1)
 8002f38:	e7fe      	b.n	8002f38 <MemManage_Handler+0x4>

08002f3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	af00      	add	r7, sp, #0
  while (1)
 8002f3e:	e7fe      	b.n	8002f3e <BusFault_Handler+0x4>

08002f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  while (1)
 8002f44:	e7fe      	b.n	8002f44 <UsageFault_Handler+0x4>

08002f46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f46:	b480      	push	{r7}
 8002f48:	af00      	add	r7, sp, #0

}
 8002f4a:	bf00      	nop
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0

}
 8002f58:	bf00      	nop
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f62:	b480      	push	{r7}
 8002f64:	af00      	add	r7, sp, #0

}
 8002f66:	bf00      	nop
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8002f74:	f000 f960 	bl	8003238 <HAL_IncTick>
}
 8002f78:	bf00      	nop
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002f80:	4803      	ldr	r0, [pc, #12]	; (8002f90 <DMA1_Stream5_IRQHandler+0x14>)
 8002f82:	f000 fc47 	bl	8003814 <HAL_DMA_IRQHandler>
  serial_handlerDMA();
 8002f86:	f7fe fa51 	bl	800142c <serial_handlerDMA>
}
 8002f8a:	bf00      	nop
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000134 	.word	0x20000134

08002f94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 8002f98:	4803      	ldr	r0, [pc, #12]	; (8002fa8 <USART2_IRQHandler+0x14>)
 8002f9a:	f003 ff21 	bl	8006de0 <HAL_UART_IRQHandler>
	serial_handlerUART();
 8002f9e:	f7fe fa3b 	bl	8001418 <serial_handlerUART>
}
 8002fa2:	bf00      	nop
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	200000f0 	.word	0x200000f0

08002fac <I2C1_EV_IRQHandler>:
  * @param  None
  * @retval None
  * @Note   This function is redefined in "main.h" and related to I2C data transmission
  */
void I2Cx_EV_IRQHandler(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(& I2cHandle);
 8002fb0:	4802      	ldr	r0, [pc, #8]	; (8002fbc <I2C1_EV_IRQHandler+0x10>)
 8002fb2:	f001 fb07 	bl	80045c4 <HAL_I2C_EV_IRQHandler>
}
 8002fb6:	bf00      	nop
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000194 	.word	0x20000194

08002fc0 <I2C1_ER_IRQHandler>:
  * @param  None
  * @retval None
  * @Note   This function is redefined in "main.h" and related to I2C error
  */
void I2Cx_ER_IRQHandler(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(& I2cHandle);
 8002fc4:	4802      	ldr	r0, [pc, #8]	; (8002fd0 <I2C1_ER_IRQHandler+0x10>)
 8002fc6:	f001 fc6a 	bl	800489e <HAL_I2C_ER_IRQHandler>
}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000194 	.word	0x20000194

08002fd4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	e00a      	b.n	8002ffc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002fe6:	f3af 8000 	nop.w
 8002fea:	4601      	mov	r1, r0
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	60ba      	str	r2, [r7, #8]
 8002ff2:	b2ca      	uxtb	r2, r1
 8002ff4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	429a      	cmp	r2, r3
 8003002:	dbf0      	blt.n	8002fe6 <_read+0x12>
	}

return len;
 8003004:	687b      	ldr	r3, [r7, #4]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b086      	sub	sp, #24
 8003012:	af00      	add	r7, sp, #0
 8003014:	60f8      	str	r0, [r7, #12]
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800301a:	2300      	movs	r3, #0
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	e009      	b.n	8003034 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	1c5a      	adds	r2, r3, #1
 8003024:	60ba      	str	r2, [r7, #8]
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f7fd fac3 	bl	80005b4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	3301      	adds	r3, #1
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	429a      	cmp	r2, r3
 800303a:	dbf1      	blt.n	8003020 <_write+0x12>
	}
	return len;
 800303c:	687b      	ldr	r3, [r7, #4]
}
 800303e:	4618      	mov	r0, r3
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <_close>:

int _close(int file)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
	return -1;
 800304e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003052:	4618      	mov	r0, r3
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800305e:	b480      	push	{r7}
 8003060:	b083      	sub	sp, #12
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800306e:	605a      	str	r2, [r3, #4]
	return 0;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <_isatty>:

int _isatty(int file)
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
	return 1;
 8003086:	2301      	movs	r3, #1
}
 8003088:	4618      	mov	r0, r3
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
	return 0;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
	...

080030b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030b8:	4a14      	ldr	r2, [pc, #80]	; (800310c <_sbrk+0x5c>)
 80030ba:	4b15      	ldr	r3, [pc, #84]	; (8003110 <_sbrk+0x60>)
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030c4:	4b13      	ldr	r3, [pc, #76]	; (8003114 <_sbrk+0x64>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d102      	bne.n	80030d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030cc:	4b11      	ldr	r3, [pc, #68]	; (8003114 <_sbrk+0x64>)
 80030ce:	4a12      	ldr	r2, [pc, #72]	; (8003118 <_sbrk+0x68>)
 80030d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030d2:	4b10      	ldr	r3, [pc, #64]	; (8003114 <_sbrk+0x64>)
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4413      	add	r3, r2
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d207      	bcs.n	80030f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030e0:	f004 ff6e 	bl	8007fc0 <__errno>
 80030e4:	4603      	mov	r3, r0
 80030e6:	220c      	movs	r2, #12
 80030e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030ea:	f04f 33ff 	mov.w	r3, #4294967295
 80030ee:	e009      	b.n	8003104 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030f0:	4b08      	ldr	r3, [pc, #32]	; (8003114 <_sbrk+0x64>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030f6:	4b07      	ldr	r3, [pc, #28]	; (8003114 <_sbrk+0x64>)
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4413      	add	r3, r2
 80030fe:	4a05      	ldr	r2, [pc, #20]	; (8003114 <_sbrk+0x64>)
 8003100:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003102:	68fb      	ldr	r3, [r7, #12]
}
 8003104:	4618      	mov	r0, r3
 8003106:	3718      	adds	r7, #24
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	20020000 	.word	0x20020000
 8003110:	00000400 	.word	0x00000400
 8003114:	200006d4 	.word	0x200006d4
 8003118:	200006f0 	.word	0x200006f0

0800311c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003120:	4b06      	ldr	r3, [pc, #24]	; (800313c <SystemInit+0x20>)
 8003122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003126:	4a05      	ldr	r2, [pc, #20]	; (800313c <SystemInit+0x20>)
 8003128:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800312c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003130:	bf00      	nop
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	e000ed00 	.word	0xe000ed00

08003140 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003140:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003178 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003144:	480d      	ldr	r0, [pc, #52]	; (800317c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003146:	490e      	ldr	r1, [pc, #56]	; (8003180 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003148:	4a0e      	ldr	r2, [pc, #56]	; (8003184 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800314a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800314c:	e002      	b.n	8003154 <LoopCopyDataInit>

0800314e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800314e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003152:	3304      	adds	r3, #4

08003154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003158:	d3f9      	bcc.n	800314e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800315a:	4a0b      	ldr	r2, [pc, #44]	; (8003188 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800315c:	4c0b      	ldr	r4, [pc, #44]	; (800318c <LoopFillZerobss+0x26>)
  movs r3, #0
 800315e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003160:	e001      	b.n	8003166 <LoopFillZerobss>

08003162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003164:	3204      	adds	r2, #4

08003166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003168:	d3fb      	bcc.n	8003162 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800316a:	f7ff ffd7 	bl	800311c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800316e:	f004 ff2d 	bl	8007fcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003172:	f7fd fa31 	bl	80005d8 <main>
  bx  lr    
 8003176:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003178:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800317c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003180:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8003184:	08009340 	.word	0x08009340
  ldr r2, =_sbss
 8003188:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 800318c:	200006ec 	.word	0x200006ec

08003190 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003190:	e7fe      	b.n	8003190 <ADC_IRQHandler>
	...

08003194 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003198:	4b0e      	ldr	r3, [pc, #56]	; (80031d4 <HAL_Init+0x40>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a0d      	ldr	r2, [pc, #52]	; (80031d4 <HAL_Init+0x40>)
 800319e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031a4:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <HAL_Init+0x40>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a0a      	ldr	r2, [pc, #40]	; (80031d4 <HAL_Init+0x40>)
 80031aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031b0:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <HAL_Init+0x40>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a07      	ldr	r2, [pc, #28]	; (80031d4 <HAL_Init+0x40>)
 80031b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031bc:	2003      	movs	r0, #3
 80031be:	f000 f94f 	bl	8003460 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031c2:	2000      	movs	r0, #0
 80031c4:	f000 f808 	bl	80031d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031c8:	f7ff fda2 	bl	8002d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40023c00 	.word	0x40023c00

080031d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031e0:	4b12      	ldr	r3, [pc, #72]	; (800322c <HAL_InitTick+0x54>)
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	4b12      	ldr	r3, [pc, #72]	; (8003230 <HAL_InitTick+0x58>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	4619      	mov	r1, r3
 80031ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80031f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 f967 	bl	80034ca <HAL_SYSTICK_Config>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e00e      	b.n	8003224 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b0f      	cmp	r3, #15
 800320a:	d80a      	bhi.n	8003222 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800320c:	2200      	movs	r2, #0
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	f04f 30ff 	mov.w	r0, #4294967295
 8003214:	f000 f92f 	bl	8003476 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003218:	4a06      	ldr	r2, [pc, #24]	; (8003234 <HAL_InitTick+0x5c>)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	e000      	b.n	8003224 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
}
 8003224:	4618      	mov	r0, r3
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	20000064 	.word	0x20000064
 8003230:	2000006c 	.word	0x2000006c
 8003234:	20000068 	.word	0x20000068

08003238 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800323c:	4b06      	ldr	r3, [pc, #24]	; (8003258 <HAL_IncTick+0x20>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	461a      	mov	r2, r3
 8003242:	4b06      	ldr	r3, [pc, #24]	; (800325c <HAL_IncTick+0x24>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4413      	add	r3, r2
 8003248:	4a04      	ldr	r2, [pc, #16]	; (800325c <HAL_IncTick+0x24>)
 800324a:	6013      	str	r3, [r2, #0]
}
 800324c:	bf00      	nop
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	2000006c 	.word	0x2000006c
 800325c:	200006d8 	.word	0x200006d8

08003260 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  return uwTick;
 8003264:	4b03      	ldr	r3, [pc, #12]	; (8003274 <HAL_GetTick+0x14>)
 8003266:	681b      	ldr	r3, [r3, #0]
}
 8003268:	4618      	mov	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	200006d8 	.word	0x200006d8

08003278 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003280:	f7ff ffee 	bl	8003260 <HAL_GetTick>
 8003284:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003290:	d005      	beq.n	800329e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003292:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <HAL_Delay+0x44>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	461a      	mov	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4413      	add	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800329e:	bf00      	nop
 80032a0:	f7ff ffde 	bl	8003260 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d8f7      	bhi.n	80032a0 <HAL_Delay+0x28>
  {
  }
}
 80032b0:	bf00      	nop
 80032b2:	bf00      	nop
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	2000006c 	.word	0x2000006c

080032c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032d0:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <__NVIC_SetPriorityGrouping+0x44>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032dc:	4013      	ands	r3, r2
 80032de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032f2:	4a04      	ldr	r2, [pc, #16]	; (8003304 <__NVIC_SetPriorityGrouping+0x44>)
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	60d3      	str	r3, [r2, #12]
}
 80032f8:	bf00      	nop
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	e000ed00 	.word	0xe000ed00

08003308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800330c:	4b04      	ldr	r3, [pc, #16]	; (8003320 <__NVIC_GetPriorityGrouping+0x18>)
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	0a1b      	lsrs	r3, r3, #8
 8003312:	f003 0307 	and.w	r3, r3, #7
}
 8003316:	4618      	mov	r0, r3
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	e000ed00 	.word	0xe000ed00

08003324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800332e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003332:	2b00      	cmp	r3, #0
 8003334:	db0b      	blt.n	800334e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003336:	79fb      	ldrb	r3, [r7, #7]
 8003338:	f003 021f 	and.w	r2, r3, #31
 800333c:	4907      	ldr	r1, [pc, #28]	; (800335c <__NVIC_EnableIRQ+0x38>)
 800333e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003342:	095b      	lsrs	r3, r3, #5
 8003344:	2001      	movs	r0, #1
 8003346:	fa00 f202 	lsl.w	r2, r0, r2
 800334a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	e000e100 	.word	0xe000e100

08003360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	6039      	str	r1, [r7, #0]
 800336a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800336c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003370:	2b00      	cmp	r3, #0
 8003372:	db0a      	blt.n	800338a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	b2da      	uxtb	r2, r3
 8003378:	490c      	ldr	r1, [pc, #48]	; (80033ac <__NVIC_SetPriority+0x4c>)
 800337a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337e:	0112      	lsls	r2, r2, #4
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	440b      	add	r3, r1
 8003384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003388:	e00a      	b.n	80033a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	b2da      	uxtb	r2, r3
 800338e:	4908      	ldr	r1, [pc, #32]	; (80033b0 <__NVIC_SetPriority+0x50>)
 8003390:	79fb      	ldrb	r3, [r7, #7]
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	3b04      	subs	r3, #4
 8003398:	0112      	lsls	r2, r2, #4
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	440b      	add	r3, r1
 800339e:	761a      	strb	r2, [r3, #24]
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	e000e100 	.word	0xe000e100
 80033b0:	e000ed00 	.word	0xe000ed00

080033b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b089      	sub	sp, #36	; 0x24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f1c3 0307 	rsb	r3, r3, #7
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	bf28      	it	cs
 80033d2:	2304      	movcs	r3, #4
 80033d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	3304      	adds	r3, #4
 80033da:	2b06      	cmp	r3, #6
 80033dc:	d902      	bls.n	80033e4 <NVIC_EncodePriority+0x30>
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	3b03      	subs	r3, #3
 80033e2:	e000      	b.n	80033e6 <NVIC_EncodePriority+0x32>
 80033e4:	2300      	movs	r3, #0
 80033e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e8:	f04f 32ff 	mov.w	r2, #4294967295
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43da      	mvns	r2, r3
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	401a      	ands	r2, r3
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	fa01 f303 	lsl.w	r3, r1, r3
 8003406:	43d9      	mvns	r1, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800340c:	4313      	orrs	r3, r2
         );
}
 800340e:	4618      	mov	r0, r3
 8003410:	3724      	adds	r7, #36	; 0x24
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
	...

0800341c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3b01      	subs	r3, #1
 8003428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800342c:	d301      	bcc.n	8003432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800342e:	2301      	movs	r3, #1
 8003430:	e00f      	b.n	8003452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003432:	4a0a      	ldr	r2, [pc, #40]	; (800345c <SysTick_Config+0x40>)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3b01      	subs	r3, #1
 8003438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800343a:	210f      	movs	r1, #15
 800343c:	f04f 30ff 	mov.w	r0, #4294967295
 8003440:	f7ff ff8e 	bl	8003360 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003444:	4b05      	ldr	r3, [pc, #20]	; (800345c <SysTick_Config+0x40>)
 8003446:	2200      	movs	r2, #0
 8003448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800344a:	4b04      	ldr	r3, [pc, #16]	; (800345c <SysTick_Config+0x40>)
 800344c:	2207      	movs	r2, #7
 800344e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	e000e010 	.word	0xe000e010

08003460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f7ff ff29 	bl	80032c0 <__NVIC_SetPriorityGrouping>
}
 800346e:	bf00      	nop
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003476:	b580      	push	{r7, lr}
 8003478:	b086      	sub	sp, #24
 800347a:	af00      	add	r7, sp, #0
 800347c:	4603      	mov	r3, r0
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	607a      	str	r2, [r7, #4]
 8003482:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003484:	2300      	movs	r3, #0
 8003486:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003488:	f7ff ff3e 	bl	8003308 <__NVIC_GetPriorityGrouping>
 800348c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	68b9      	ldr	r1, [r7, #8]
 8003492:	6978      	ldr	r0, [r7, #20]
 8003494:	f7ff ff8e 	bl	80033b4 <NVIC_EncodePriority>
 8003498:	4602      	mov	r2, r0
 800349a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800349e:	4611      	mov	r1, r2
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff ff5d 	bl	8003360 <__NVIC_SetPriority>
}
 80034a6:	bf00      	nop
 80034a8:	3718      	adds	r7, #24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	4603      	mov	r3, r0
 80034b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff ff31 	bl	8003324 <__NVIC_EnableIRQ>
}
 80034c2:	bf00      	nop
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b082      	sub	sp, #8
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff ffa2 	bl	800341c <SysTick_Config>
 80034d8:	4603      	mov	r3, r0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
	...

080034e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034f0:	f7ff feb6 	bl	8003260 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e099      	b.n	8003634 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0201 	bic.w	r2, r2, #1
 800351e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003520:	e00f      	b.n	8003542 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003522:	f7ff fe9d 	bl	8003260 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b05      	cmp	r3, #5
 800352e:	d908      	bls.n	8003542 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2220      	movs	r2, #32
 8003534:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2203      	movs	r2, #3
 800353a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e078      	b.n	8003634 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1e8      	bne.n	8003522 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	4b38      	ldr	r3, [pc, #224]	; (800363c <HAL_DMA_Init+0x158>)
 800355c:	4013      	ands	r3, r2
 800355e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800356e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800357a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003586:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	2b04      	cmp	r3, #4
 800359a:	d107      	bne.n	80035ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a4:	4313      	orrs	r3, r2
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f023 0307 	bic.w	r3, r3, #7
 80035c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d117      	bne.n	8003606 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	4313      	orrs	r3, r2
 80035de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00e      	beq.n	8003606 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 fb0f 	bl	8003c0c <DMA_CheckFifoParam>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d008      	beq.n	8003606 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2240      	movs	r2, #64	; 0x40
 80035f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003602:	2301      	movs	r3, #1
 8003604:	e016      	b.n	8003634 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 fac6 	bl	8003ba0 <DMA_CalcBaseAndBitshift>
 8003614:	4603      	mov	r3, r0
 8003616:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361c:	223f      	movs	r2, #63	; 0x3f
 800361e:	409a      	lsls	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	f010803f 	.word	0xf010803f

08003640 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
 800364c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003656:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800365e:	2b01      	cmp	r3, #1
 8003660:	d101      	bne.n	8003666 <HAL_DMA_Start_IT+0x26>
 8003662:	2302      	movs	r3, #2
 8003664:	e040      	b.n	80036e8 <HAL_DMA_Start_IT+0xa8>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b01      	cmp	r3, #1
 8003678:	d12f      	bne.n	80036da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2202      	movs	r2, #2
 800367e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	68b9      	ldr	r1, [r7, #8]
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 fa58 	bl	8003b44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003698:	223f      	movs	r2, #63	; 0x3f
 800369a:	409a      	lsls	r2, r3
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 0216 	orr.w	r2, r2, #22
 80036ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d007      	beq.n	80036c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0208 	orr.w	r2, r2, #8
 80036c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0201 	orr.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	e005      	b.n	80036e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80036e2:	2302      	movs	r3, #2
 80036e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80036e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036fe:	f7ff fdaf 	bl	8003260 <HAL_GetTick>
 8003702:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d008      	beq.n	8003722 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2280      	movs	r2, #128	; 0x80
 8003714:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e052      	b.n	80037c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0216 	bic.w	r2, r2, #22
 8003730:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	695a      	ldr	r2, [r3, #20]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003740:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	d103      	bne.n	8003752 <HAL_DMA_Abort+0x62>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800374e:	2b00      	cmp	r3, #0
 8003750:	d007      	beq.n	8003762 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0208 	bic.w	r2, r2, #8
 8003760:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0201 	bic.w	r2, r2, #1
 8003770:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003772:	e013      	b.n	800379c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003774:	f7ff fd74 	bl	8003260 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b05      	cmp	r3, #5
 8003780:	d90c      	bls.n	800379c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2220      	movs	r2, #32
 8003786:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2203      	movs	r2, #3
 800378c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e015      	b.n	80037c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1e4      	bne.n	8003774 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ae:	223f      	movs	r2, #63	; 0x3f
 80037b0:	409a      	lsls	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d004      	beq.n	80037ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2280      	movs	r2, #128	; 0x80
 80037e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e00c      	b.n	8003808 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2205      	movs	r2, #5
 80037f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0201 	bic.w	r2, r2, #1
 8003804:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800381c:	2300      	movs	r3, #0
 800381e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003820:	4b8e      	ldr	r3, [pc, #568]	; (8003a5c <HAL_DMA_IRQHandler+0x248>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a8e      	ldr	r2, [pc, #568]	; (8003a60 <HAL_DMA_IRQHandler+0x24c>)
 8003826:	fba2 2303 	umull	r2, r3, r2, r3
 800382a:	0a9b      	lsrs	r3, r3, #10
 800382c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003832:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800383e:	2208      	movs	r2, #8
 8003840:	409a      	lsls	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4013      	ands	r3, r2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d01a      	beq.n	8003880 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d013      	beq.n	8003880 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0204 	bic.w	r2, r2, #4
 8003866:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386c:	2208      	movs	r2, #8
 800386e:	409a      	lsls	r2, r3
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003878:	f043 0201 	orr.w	r2, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003884:	2201      	movs	r2, #1
 8003886:	409a      	lsls	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4013      	ands	r3, r2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d012      	beq.n	80038b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00b      	beq.n	80038b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a2:	2201      	movs	r2, #1
 80038a4:	409a      	lsls	r2, r3
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ae:	f043 0202 	orr.w	r2, r3, #2
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ba:	2204      	movs	r2, #4
 80038bc:	409a      	lsls	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	4013      	ands	r3, r2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d012      	beq.n	80038ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00b      	beq.n	80038ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d8:	2204      	movs	r2, #4
 80038da:	409a      	lsls	r2, r3
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e4:	f043 0204 	orr.w	r2, r3, #4
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f0:	2210      	movs	r2, #16
 80038f2:	409a      	lsls	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4013      	ands	r3, r2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d043      	beq.n	8003984 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b00      	cmp	r3, #0
 8003908:	d03c      	beq.n	8003984 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390e:	2210      	movs	r2, #16
 8003910:	409a      	lsls	r2, r3
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d018      	beq.n	8003956 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d108      	bne.n	8003944 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	2b00      	cmp	r3, #0
 8003938:	d024      	beq.n	8003984 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	4798      	blx	r3
 8003942:	e01f      	b.n	8003984 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003948:	2b00      	cmp	r3, #0
 800394a:	d01b      	beq.n	8003984 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	4798      	blx	r3
 8003954:	e016      	b.n	8003984 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003960:	2b00      	cmp	r3, #0
 8003962:	d107      	bne.n	8003974 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0208 	bic.w	r2, r2, #8
 8003972:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003988:	2220      	movs	r2, #32
 800398a:	409a      	lsls	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4013      	ands	r3, r2
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 808f 	beq.w	8003ab4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0310 	and.w	r3, r3, #16
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 8087 	beq.w	8003ab4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039aa:	2220      	movs	r2, #32
 80039ac:	409a      	lsls	r2, r3
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b05      	cmp	r3, #5
 80039bc:	d136      	bne.n	8003a2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0216 	bic.w	r2, r2, #22
 80039cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	695a      	ldr	r2, [r3, #20]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d103      	bne.n	80039ee <HAL_DMA_IRQHandler+0x1da>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d007      	beq.n	80039fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0208 	bic.w	r2, r2, #8
 80039fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a02:	223f      	movs	r2, #63	; 0x3f
 8003a04:	409a      	lsls	r2, r3
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d07e      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	4798      	blx	r3
        }
        return;
 8003a2a:	e079      	b.n	8003b20 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d01d      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10d      	bne.n	8003a64 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d031      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	4798      	blx	r3
 8003a58:	e02c      	b.n	8003ab4 <HAL_DMA_IRQHandler+0x2a0>
 8003a5a:	bf00      	nop
 8003a5c:	20000064 	.word	0x20000064
 8003a60:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d023      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	4798      	blx	r3
 8003a74:	e01e      	b.n	8003ab4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10f      	bne.n	8003aa4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0210 	bic.w	r2, r2, #16
 8003a92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d032      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d022      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2205      	movs	r2, #5
 8003acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0201 	bic.w	r2, r2, #1
 8003ade:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	60bb      	str	r3, [r7, #8]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d307      	bcc.n	8003afc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1f2      	bne.n	8003ae0 <HAL_DMA_IRQHandler+0x2cc>
 8003afa:	e000      	b.n	8003afe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003afc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d005      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	4798      	blx	r3
 8003b1e:	e000      	b.n	8003b22 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b20:	bf00      	nop
    }
  }
}
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b36:	b2db      	uxtb	r3, r3
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	2b40      	cmp	r3, #64	; 0x40
 8003b70:	d108      	bne.n	8003b84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b82:	e007      	b.n	8003b94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	60da      	str	r2, [r3, #12]
}
 8003b94:	bf00      	nop
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	3b10      	subs	r3, #16
 8003bb0:	4a14      	ldr	r2, [pc, #80]	; (8003c04 <DMA_CalcBaseAndBitshift+0x64>)
 8003bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb6:	091b      	lsrs	r3, r3, #4
 8003bb8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003bba:	4a13      	ldr	r2, [pc, #76]	; (8003c08 <DMA_CalcBaseAndBitshift+0x68>)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	d909      	bls.n	8003be2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003bd6:	f023 0303 	bic.w	r3, r3, #3
 8003bda:	1d1a      	adds	r2, r3, #4
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	659a      	str	r2, [r3, #88]	; 0x58
 8003be0:	e007      	b.n	8003bf2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003bea:	f023 0303 	bic.w	r3, r3, #3
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	aaaaaaab 	.word	0xaaaaaaab
 8003c08:	08009290 	.word	0x08009290

08003c0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c14:	2300      	movs	r3, #0
 8003c16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d11f      	bne.n	8003c66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2b03      	cmp	r3, #3
 8003c2a:	d856      	bhi.n	8003cda <DMA_CheckFifoParam+0xce>
 8003c2c:	a201      	add	r2, pc, #4	; (adr r2, 8003c34 <DMA_CheckFifoParam+0x28>)
 8003c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c32:	bf00      	nop
 8003c34:	08003c45 	.word	0x08003c45
 8003c38:	08003c57 	.word	0x08003c57
 8003c3c:	08003c45 	.word	0x08003c45
 8003c40:	08003cdb 	.word	0x08003cdb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d046      	beq.n	8003cde <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c54:	e043      	b.n	8003cde <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c5e:	d140      	bne.n	8003ce2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c64:	e03d      	b.n	8003ce2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c6e:	d121      	bne.n	8003cb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b03      	cmp	r3, #3
 8003c74:	d837      	bhi.n	8003ce6 <DMA_CheckFifoParam+0xda>
 8003c76:	a201      	add	r2, pc, #4	; (adr r2, 8003c7c <DMA_CheckFifoParam+0x70>)
 8003c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c7c:	08003c8d 	.word	0x08003c8d
 8003c80:	08003c93 	.word	0x08003c93
 8003c84:	08003c8d 	.word	0x08003c8d
 8003c88:	08003ca5 	.word	0x08003ca5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c90:	e030      	b.n	8003cf4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d025      	beq.n	8003cea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ca2:	e022      	b.n	8003cea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cac:	d11f      	bne.n	8003cee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003cb2:	e01c      	b.n	8003cee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d903      	bls.n	8003cc2 <DMA_CheckFifoParam+0xb6>
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2b03      	cmp	r3, #3
 8003cbe:	d003      	beq.n	8003cc8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003cc0:	e018      	b.n	8003cf4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	73fb      	strb	r3, [r7, #15]
      break;
 8003cc6:	e015      	b.n	8003cf4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ccc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00e      	beq.n	8003cf2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8003cd8:	e00b      	b.n	8003cf2 <DMA_CheckFifoParam+0xe6>
      break;
 8003cda:	bf00      	nop
 8003cdc:	e00a      	b.n	8003cf4 <DMA_CheckFifoParam+0xe8>
      break;
 8003cde:	bf00      	nop
 8003ce0:	e008      	b.n	8003cf4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ce2:	bf00      	nop
 8003ce4:	e006      	b.n	8003cf4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ce6:	bf00      	nop
 8003ce8:	e004      	b.n	8003cf4 <DMA_CheckFifoParam+0xe8>
      break;
 8003cea:	bf00      	nop
 8003cec:	e002      	b.n	8003cf4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003cee:	bf00      	nop
 8003cf0:	e000      	b.n	8003cf4 <DMA_CheckFifoParam+0xe8>
      break;
 8003cf2:	bf00      	nop
    }
  } 
  
  return status; 
 8003cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop

08003d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b089      	sub	sp, #36	; 0x24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d16:	2300      	movs	r3, #0
 8003d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61fb      	str	r3, [r7, #28]
 8003d1e:	e165      	b.n	8003fec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d20:	2201      	movs	r2, #1
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	4013      	ands	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	f040 8154 	bne.w	8003fe6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d005      	beq.n	8003d56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d130      	bne.n	8003db8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	2203      	movs	r2, #3
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	43db      	mvns	r3, r3
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	68da      	ldr	r2, [r3, #12]
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	43db      	mvns	r3, r3
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	091b      	lsrs	r3, r3, #4
 8003da2:	f003 0201 	and.w	r2, r3, #1
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f003 0303 	and.w	r3, r3, #3
 8003dc0:	2b03      	cmp	r3, #3
 8003dc2:	d017      	beq.n	8003df4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	2203      	movs	r2, #3
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f003 0303 	and.w	r3, r3, #3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d123      	bne.n	8003e48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	08da      	lsrs	r2, r3, #3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3208      	adds	r2, #8
 8003e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	220f      	movs	r2, #15
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	4013      	ands	r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	691a      	ldr	r2, [r3, #16]
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	08da      	lsrs	r2, r3, #3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	3208      	adds	r2, #8
 8003e42:	69b9      	ldr	r1, [r7, #24]
 8003e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	2203      	movs	r2, #3
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f003 0203 	and.w	r2, r3, #3
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 80ae 	beq.w	8003fe6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	4b5d      	ldr	r3, [pc, #372]	; (8004004 <HAL_GPIO_Init+0x300>)
 8003e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e92:	4a5c      	ldr	r2, [pc, #368]	; (8004004 <HAL_GPIO_Init+0x300>)
 8003e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e98:	6453      	str	r3, [r2, #68]	; 0x44
 8003e9a:	4b5a      	ldr	r3, [pc, #360]	; (8004004 <HAL_GPIO_Init+0x300>)
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ea6:	4a58      	ldr	r2, [pc, #352]	; (8004008 <HAL_GPIO_Init+0x304>)
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	089b      	lsrs	r3, r3, #2
 8003eac:	3302      	adds	r3, #2
 8003eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	220f      	movs	r2, #15
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	43db      	mvns	r3, r3
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a4f      	ldr	r2, [pc, #316]	; (800400c <HAL_GPIO_Init+0x308>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d025      	beq.n	8003f1e <HAL_GPIO_Init+0x21a>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a4e      	ldr	r2, [pc, #312]	; (8004010 <HAL_GPIO_Init+0x30c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d01f      	beq.n	8003f1a <HAL_GPIO_Init+0x216>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a4d      	ldr	r2, [pc, #308]	; (8004014 <HAL_GPIO_Init+0x310>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d019      	beq.n	8003f16 <HAL_GPIO_Init+0x212>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a4c      	ldr	r2, [pc, #304]	; (8004018 <HAL_GPIO_Init+0x314>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d013      	beq.n	8003f12 <HAL_GPIO_Init+0x20e>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a4b      	ldr	r2, [pc, #300]	; (800401c <HAL_GPIO_Init+0x318>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d00d      	beq.n	8003f0e <HAL_GPIO_Init+0x20a>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a4a      	ldr	r2, [pc, #296]	; (8004020 <HAL_GPIO_Init+0x31c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d007      	beq.n	8003f0a <HAL_GPIO_Init+0x206>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a49      	ldr	r2, [pc, #292]	; (8004024 <HAL_GPIO_Init+0x320>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d101      	bne.n	8003f06 <HAL_GPIO_Init+0x202>
 8003f02:	2306      	movs	r3, #6
 8003f04:	e00c      	b.n	8003f20 <HAL_GPIO_Init+0x21c>
 8003f06:	2307      	movs	r3, #7
 8003f08:	e00a      	b.n	8003f20 <HAL_GPIO_Init+0x21c>
 8003f0a:	2305      	movs	r3, #5
 8003f0c:	e008      	b.n	8003f20 <HAL_GPIO_Init+0x21c>
 8003f0e:	2304      	movs	r3, #4
 8003f10:	e006      	b.n	8003f20 <HAL_GPIO_Init+0x21c>
 8003f12:	2303      	movs	r3, #3
 8003f14:	e004      	b.n	8003f20 <HAL_GPIO_Init+0x21c>
 8003f16:	2302      	movs	r3, #2
 8003f18:	e002      	b.n	8003f20 <HAL_GPIO_Init+0x21c>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e000      	b.n	8003f20 <HAL_GPIO_Init+0x21c>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	69fa      	ldr	r2, [r7, #28]
 8003f22:	f002 0203 	and.w	r2, r2, #3
 8003f26:	0092      	lsls	r2, r2, #2
 8003f28:	4093      	lsls	r3, r2
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f30:	4935      	ldr	r1, [pc, #212]	; (8004008 <HAL_GPIO_Init+0x304>)
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	089b      	lsrs	r3, r3, #2
 8003f36:	3302      	adds	r3, #2
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f3e:	4b3a      	ldr	r3, [pc, #232]	; (8004028 <HAL_GPIO_Init+0x324>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	43db      	mvns	r3, r3
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f62:	4a31      	ldr	r2, [pc, #196]	; (8004028 <HAL_GPIO_Init+0x324>)
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f68:	4b2f      	ldr	r3, [pc, #188]	; (8004028 <HAL_GPIO_Init+0x324>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	43db      	mvns	r3, r3
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	4013      	ands	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f8c:	4a26      	ldr	r2, [pc, #152]	; (8004028 <HAL_GPIO_Init+0x324>)
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f92:	4b25      	ldr	r3, [pc, #148]	; (8004028 <HAL_GPIO_Init+0x324>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	43db      	mvns	r3, r3
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fb6:	4a1c      	ldr	r2, [pc, #112]	; (8004028 <HAL_GPIO_Init+0x324>)
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fbc:	4b1a      	ldr	r3, [pc, #104]	; (8004028 <HAL_GPIO_Init+0x324>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d003      	beq.n	8003fe0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fe0:	4a11      	ldr	r2, [pc, #68]	; (8004028 <HAL_GPIO_Init+0x324>)
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	61fb      	str	r3, [r7, #28]
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	2b0f      	cmp	r3, #15
 8003ff0:	f67f ae96 	bls.w	8003d20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ff4:	bf00      	nop
 8003ff6:	bf00      	nop
 8003ff8:	3724      	adds	r7, #36	; 0x24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40023800 	.word	0x40023800
 8004008:	40013800 	.word	0x40013800
 800400c:	40020000 	.word	0x40020000
 8004010:	40020400 	.word	0x40020400
 8004014:	40020800 	.word	0x40020800
 8004018:	40020c00 	.word	0x40020c00
 800401c:	40021000 	.word	0x40021000
 8004020:	40021400 	.word	0x40021400
 8004024:	40021800 	.word	0x40021800
 8004028:	40013c00 	.word	0x40013c00

0800402c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	460b      	mov	r3, r1
 8004036:	807b      	strh	r3, [r7, #2]
 8004038:	4613      	mov	r3, r2
 800403a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800403c:	787b      	ldrb	r3, [r7, #1]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004042:	887a      	ldrh	r2, [r7, #2]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004048:	e003      	b.n	8004052 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800404a:	887b      	ldrh	r3, [r7, #2]
 800404c:	041a      	lsls	r2, r3, #16
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	619a      	str	r2, [r3, #24]
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800405e:	b480      	push	{r7}
 8004060:	b085      	sub	sp, #20
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
 8004066:	460b      	mov	r3, r1
 8004068:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004070:	887a      	ldrh	r2, [r7, #2]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	4013      	ands	r3, r2
 8004076:	041a      	lsls	r2, r3, #16
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	43d9      	mvns	r1, r3
 800407c:	887b      	ldrh	r3, [r7, #2]
 800407e:	400b      	ands	r3, r1
 8004080:	431a      	orrs	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	619a      	str	r2, [r3, #24]
}
 8004086:	bf00      	nop
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
	...

08004094 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e12b      	b.n	80042fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d106      	bne.n	80040c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7fe fed2 	bl	8002e64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2224      	movs	r2, #36	; 0x24
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0201 	bic.w	r2, r2, #1
 80040d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80040f8:	f002 f808 	bl	800610c <HAL_RCC_GetPCLK1Freq>
 80040fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	4a81      	ldr	r2, [pc, #516]	; (8004308 <HAL_I2C_Init+0x274>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d807      	bhi.n	8004118 <HAL_I2C_Init+0x84>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4a80      	ldr	r2, [pc, #512]	; (800430c <HAL_I2C_Init+0x278>)
 800410c:	4293      	cmp	r3, r2
 800410e:	bf94      	ite	ls
 8004110:	2301      	movls	r3, #1
 8004112:	2300      	movhi	r3, #0
 8004114:	b2db      	uxtb	r3, r3
 8004116:	e006      	b.n	8004126 <HAL_I2C_Init+0x92>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4a7d      	ldr	r2, [pc, #500]	; (8004310 <HAL_I2C_Init+0x27c>)
 800411c:	4293      	cmp	r3, r2
 800411e:	bf94      	ite	ls
 8004120:	2301      	movls	r3, #1
 8004122:	2300      	movhi	r3, #0
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e0e7      	b.n	80042fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	4a78      	ldr	r2, [pc, #480]	; (8004314 <HAL_I2C_Init+0x280>)
 8004132:	fba2 2303 	umull	r2, r3, r2, r3
 8004136:	0c9b      	lsrs	r3, r3, #18
 8004138:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	430a      	orrs	r2, r1
 800414c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	4a6a      	ldr	r2, [pc, #424]	; (8004308 <HAL_I2C_Init+0x274>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d802      	bhi.n	8004168 <HAL_I2C_Init+0xd4>
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	3301      	adds	r3, #1
 8004166:	e009      	b.n	800417c <HAL_I2C_Init+0xe8>
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800416e:	fb02 f303 	mul.w	r3, r2, r3
 8004172:	4a69      	ldr	r2, [pc, #420]	; (8004318 <HAL_I2C_Init+0x284>)
 8004174:	fba2 2303 	umull	r2, r3, r2, r3
 8004178:	099b      	lsrs	r3, r3, #6
 800417a:	3301      	adds	r3, #1
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	6812      	ldr	r2, [r2, #0]
 8004180:	430b      	orrs	r3, r1
 8004182:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800418e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	495c      	ldr	r1, [pc, #368]	; (8004308 <HAL_I2C_Init+0x274>)
 8004198:	428b      	cmp	r3, r1
 800419a:	d819      	bhi.n	80041d0 <HAL_I2C_Init+0x13c>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	1e59      	subs	r1, r3, #1
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80041aa:	1c59      	adds	r1, r3, #1
 80041ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80041b0:	400b      	ands	r3, r1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <HAL_I2C_Init+0x138>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	1e59      	subs	r1, r3, #1
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	005b      	lsls	r3, r3, #1
 80041c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80041c4:	3301      	adds	r3, #1
 80041c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041ca:	e051      	b.n	8004270 <HAL_I2C_Init+0x1dc>
 80041cc:	2304      	movs	r3, #4
 80041ce:	e04f      	b.n	8004270 <HAL_I2C_Init+0x1dc>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d111      	bne.n	80041fc <HAL_I2C_Init+0x168>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	1e58      	subs	r0, r3, #1
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6859      	ldr	r1, [r3, #4]
 80041e0:	460b      	mov	r3, r1
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	440b      	add	r3, r1
 80041e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ea:	3301      	adds	r3, #1
 80041ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	bf0c      	ite	eq
 80041f4:	2301      	moveq	r3, #1
 80041f6:	2300      	movne	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	e012      	b.n	8004222 <HAL_I2C_Init+0x18e>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	1e58      	subs	r0, r3, #1
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6859      	ldr	r1, [r3, #4]
 8004204:	460b      	mov	r3, r1
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	440b      	add	r3, r1
 800420a:	0099      	lsls	r1, r3, #2
 800420c:	440b      	add	r3, r1
 800420e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004212:	3301      	adds	r3, #1
 8004214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004218:	2b00      	cmp	r3, #0
 800421a:	bf0c      	ite	eq
 800421c:	2301      	moveq	r3, #1
 800421e:	2300      	movne	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <HAL_I2C_Init+0x196>
 8004226:	2301      	movs	r3, #1
 8004228:	e022      	b.n	8004270 <HAL_I2C_Init+0x1dc>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10e      	bne.n	8004250 <HAL_I2C_Init+0x1bc>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	1e58      	subs	r0, r3, #1
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6859      	ldr	r1, [r3, #4]
 800423a:	460b      	mov	r3, r1
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	440b      	add	r3, r1
 8004240:	fbb0 f3f3 	udiv	r3, r0, r3
 8004244:	3301      	adds	r3, #1
 8004246:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800424a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800424e:	e00f      	b.n	8004270 <HAL_I2C_Init+0x1dc>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	1e58      	subs	r0, r3, #1
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6859      	ldr	r1, [r3, #4]
 8004258:	460b      	mov	r3, r1
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	0099      	lsls	r1, r3, #2
 8004260:	440b      	add	r3, r1
 8004262:	fbb0 f3f3 	udiv	r3, r0, r3
 8004266:	3301      	adds	r3, #1
 8004268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800426c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004270:	6879      	ldr	r1, [r7, #4]
 8004272:	6809      	ldr	r1, [r1, #0]
 8004274:	4313      	orrs	r3, r2
 8004276:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	69da      	ldr	r2, [r3, #28]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	431a      	orrs	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	430a      	orrs	r2, r1
 8004292:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800429e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6911      	ldr	r1, [r2, #16]
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	68d2      	ldr	r2, [r2, #12]
 80042aa:	4311      	orrs	r1, r2
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6812      	ldr	r2, [r2, #0]
 80042b0:	430b      	orrs	r3, r1
 80042b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	695a      	ldr	r2, [r3, #20]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	430a      	orrs	r2, r1
 80042ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0201 	orr.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	000186a0 	.word	0x000186a0
 800430c:	001e847f 	.word	0x001e847f
 8004310:	003d08ff 	.word	0x003d08ff
 8004314:	431bde83 	.word	0x431bde83
 8004318:	10624dd3 	.word	0x10624dd3

0800431c <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	607a      	str	r2, [r7, #4]
 8004326:	461a      	mov	r2, r3
 8004328:	460b      	mov	r3, r1
 800432a:	817b      	strh	r3, [r7, #10]
 800432c:	4613      	mov	r3, r2
 800432e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004330:	2300      	movs	r3, #0
 8004332:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b20      	cmp	r3, #32
 800433e:	f040 8085 	bne.w	800444c <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004342:	4b46      	ldr	r3, [pc, #280]	; (800445c <HAL_I2C_Master_Transmit_IT+0x140>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	08db      	lsrs	r3, r3, #3
 8004348:	4a45      	ldr	r2, [pc, #276]	; (8004460 <HAL_I2C_Master_Transmit_IT+0x144>)
 800434a:	fba2 2303 	umull	r2, r3, r2, r3
 800434e:	0a1a      	lsrs	r2, r3, #8
 8004350:	4613      	mov	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	009a      	lsls	r2, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	3b01      	subs	r3, #1
 8004360:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d116      	bne.n	8004396 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2220      	movs	r2, #32
 8004372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	f043 0220 	orr.w	r2, r3, #32
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e05b      	b.n	800444e <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d0db      	beq.n	800435c <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d101      	bne.n	80043b2 <HAL_I2C_Master_Transmit_IT+0x96>
 80043ae:	2302      	movs	r3, #2
 80043b0:	e04d      	b.n	800444e <HAL_I2C_Master_Transmit_IT+0x132>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d007      	beq.n	80043d8 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0201 	orr.w	r2, r2, #1
 80043d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2221      	movs	r2, #33	; 0x21
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2210      	movs	r2, #16
 80043f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	893a      	ldrh	r2, [r7, #8]
 8004408:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440e:	b29a      	uxth	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4a13      	ldr	r2, [pc, #76]	; (8004464 <HAL_I2C_Master_Transmit_IT+0x148>)
 8004418:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800441a:	897a      	ldrh	r2, [r7, #10]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800442e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004446:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004448:	2300      	movs	r3, #0
 800444a:	e000      	b.n	800444e <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 800444c:	2302      	movs	r3, #2
  }
}
 800444e:	4618      	mov	r0, r3
 8004450:	371c      	adds	r7, #28
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	20000064 	.word	0x20000064
 8004460:	14f8b589 	.word	0x14f8b589
 8004464:	ffff0000 	.word	0xffff0000

08004468 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004468:	b480      	push	{r7}
 800446a:	b087      	sub	sp, #28
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	607a      	str	r2, [r7, #4]
 8004472:	461a      	mov	r2, r3
 8004474:	460b      	mov	r3, r1
 8004476:	817b      	strh	r3, [r7, #10]
 8004478:	4613      	mov	r3, r2
 800447a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800447c:	2300      	movs	r3, #0
 800447e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b20      	cmp	r3, #32
 800448a:	f040 808d 	bne.w	80045a8 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800448e:	4b4a      	ldr	r3, [pc, #296]	; (80045b8 <HAL_I2C_Master_Receive_IT+0x150>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	08db      	lsrs	r3, r3, #3
 8004494:	4a49      	ldr	r2, [pc, #292]	; (80045bc <HAL_I2C_Master_Receive_IT+0x154>)
 8004496:	fba2 2303 	umull	r2, r3, r2, r3
 800449a:	0a1a      	lsrs	r2, r3, #8
 800449c:	4613      	mov	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	009a      	lsls	r2, r3, #2
 80044a4:	4413      	add	r3, r2
 80044a6:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	3b01      	subs	r3, #1
 80044ac:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d116      	bne.n	80044e2 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2220      	movs	r2, #32
 80044be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	f043 0220 	orr.w	r2, r3, #32
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e063      	b.n	80045aa <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d0db      	beq.n	80044a8 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d101      	bne.n	80044fe <HAL_I2C_Master_Receive_IT+0x96>
 80044fa:	2302      	movs	r3, #2
 80044fc:	e055      	b.n	80045aa <HAL_I2C_Master_Receive_IT+0x142>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b01      	cmp	r3, #1
 8004512:	d007      	beq.n	8004524 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0201 	orr.w	r2, r2, #1
 8004522:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004532:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2222      	movs	r2, #34	; 0x22
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2210      	movs	r2, #16
 8004540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	893a      	ldrh	r2, [r7, #8]
 8004554:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4a17      	ldr	r2, [pc, #92]	; (80045c0 <HAL_I2C_Master_Receive_IT+0x158>)
 8004564:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004566:	897a      	ldrh	r2, [r7, #10]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800457a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800458a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80045a2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80045a4:	2300      	movs	r3, #0
 80045a6:	e000      	b.n	80045aa <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 80045a8:	2302      	movs	r3, #2
  }
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	371c      	adds	r7, #28
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	20000064 	.word	0x20000064
 80045bc:	14f8b589 	.word	0x14f8b589
 80045c0:	ffff0000 	.word	0xffff0000

080045c4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b088      	sub	sp, #32
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045dc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045e4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ec:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80045ee:	7bfb      	ldrb	r3, [r7, #15]
 80045f0:	2b10      	cmp	r3, #16
 80045f2:	d003      	beq.n	80045fc <HAL_I2C_EV_IRQHandler+0x38>
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
 80045f6:	2b40      	cmp	r3, #64	; 0x40
 80045f8:	f040 80bd 	bne.w	8004776 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10d      	bne.n	8004632 <HAL_I2C_EV_IRQHandler+0x6e>
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800461c:	d003      	beq.n	8004626 <HAL_I2C_EV_IRQHandler+0x62>
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004624:	d101      	bne.n	800462a <HAL_I2C_EV_IRQHandler+0x66>
 8004626:	2301      	movs	r3, #1
 8004628:	e000      	b.n	800462c <HAL_I2C_EV_IRQHandler+0x68>
 800462a:	2300      	movs	r3, #0
 800462c:	2b01      	cmp	r3, #1
 800462e:	f000 812e 	beq.w	800488e <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00c      	beq.n	8004656 <HAL_I2C_EV_IRQHandler+0x92>
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	0a5b      	lsrs	r3, r3, #9
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d006      	beq.n	8004656 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f001 fc51 	bl	8005ef0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 fd5e 	bl	8005110 <I2C_Master_SB>
 8004654:	e08e      	b.n	8004774 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	08db      	lsrs	r3, r3, #3
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d009      	beq.n	8004676 <HAL_I2C_EV_IRQHandler+0xb2>
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	0a5b      	lsrs	r3, r3, #9
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 fdd4 	bl	800521c <I2C_Master_ADD10>
 8004674:	e07e      	b.n	8004774 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	085b      	lsrs	r3, r3, #1
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	d009      	beq.n	8004696 <HAL_I2C_EV_IRQHandler+0xd2>
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	0a5b      	lsrs	r3, r3, #9
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fdee 	bl	8005270 <I2C_Master_ADDR>
 8004694:	e06e      	b.n	8004774 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	089b      	lsrs	r3, r3, #2
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d037      	beq.n	8004712 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046b0:	f000 80ef 	beq.w	8004892 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	09db      	lsrs	r3, r3, #7
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00f      	beq.n	80046e0 <HAL_I2C_EV_IRQHandler+0x11c>
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	0a9b      	lsrs	r3, r3, #10
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d009      	beq.n	80046e0 <HAL_I2C_EV_IRQHandler+0x11c>
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	089b      	lsrs	r3, r3, #2
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d103      	bne.n	80046e0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f9eb 	bl	8004ab4 <I2C_MasterTransmit_TXE>
 80046de:	e049      	b.n	8004774 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	089b      	lsrs	r3, r3, #2
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 80d2 	beq.w	8004892 <HAL_I2C_EV_IRQHandler+0x2ce>
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	0a5b      	lsrs	r3, r3, #9
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f000 80cb 	beq.w	8004892 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
 80046fe:	2b10      	cmp	r3, #16
 8004700:	d103      	bne.n	800470a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 fa72 	bl	8004bec <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004708:	e0c3      	b.n	8004892 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 fad6 	bl	8004cbc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004710:	e0bf      	b.n	8004892 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800471c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004720:	f000 80b7 	beq.w	8004892 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	099b      	lsrs	r3, r3, #6
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00f      	beq.n	8004750 <HAL_I2C_EV_IRQHandler+0x18c>
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	0a9b      	lsrs	r3, r3, #10
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d009      	beq.n	8004750 <HAL_I2C_EV_IRQHandler+0x18c>
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	089b      	lsrs	r3, r3, #2
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d103      	bne.n	8004750 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 fb46 	bl	8004dda <I2C_MasterReceive_RXNE>
 800474e:	e011      	b.n	8004774 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	089b      	lsrs	r3, r3, #2
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 809a 	beq.w	8004892 <HAL_I2C_EV_IRQHandler+0x2ce>
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	0a5b      	lsrs	r3, r3, #9
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 8093 	beq.w	8004892 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 fbe5 	bl	8004f3c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004772:	e08e      	b.n	8004892 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004774:	e08d      	b.n	8004892 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	2b00      	cmp	r3, #0
 800477c:	d004      	beq.n	8004788 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	61fb      	str	r3, [r7, #28]
 8004786:	e007      	b.n	8004798 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	085b      	lsrs	r3, r3, #1
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d012      	beq.n	80047ca <HAL_I2C_EV_IRQHandler+0x206>
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	0a5b      	lsrs	r3, r3, #9
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00c      	beq.n	80047ca <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d003      	beq.n	80047c0 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80047c0:	69b9      	ldr	r1, [r7, #24]
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 ffa3 	bl	800570e <I2C_Slave_ADDR>
 80047c8:	e066      	b.n	8004898 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	091b      	lsrs	r3, r3, #4
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d009      	beq.n	80047ea <HAL_I2C_EV_IRQHandler+0x226>
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	0a5b      	lsrs	r3, r3, #9
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 ffd8 	bl	8005798 <I2C_Slave_STOPF>
 80047e8:	e056      	b.n	8004898 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80047ea:	7bbb      	ldrb	r3, [r7, #14]
 80047ec:	2b21      	cmp	r3, #33	; 0x21
 80047ee:	d002      	beq.n	80047f6 <HAL_I2C_EV_IRQHandler+0x232>
 80047f0:	7bbb      	ldrb	r3, [r7, #14]
 80047f2:	2b29      	cmp	r3, #41	; 0x29
 80047f4:	d125      	bne.n	8004842 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	09db      	lsrs	r3, r3, #7
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00f      	beq.n	8004822 <HAL_I2C_EV_IRQHandler+0x25e>
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	0a9b      	lsrs	r3, r3, #10
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d009      	beq.n	8004822 <HAL_I2C_EV_IRQHandler+0x25e>
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	089b      	lsrs	r3, r3, #2
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d103      	bne.n	8004822 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 feb9 	bl	8005592 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004820:	e039      	b.n	8004896 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	089b      	lsrs	r3, r3, #2
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d033      	beq.n	8004896 <HAL_I2C_EV_IRQHandler+0x2d2>
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	0a5b      	lsrs	r3, r3, #9
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d02d      	beq.n	8004896 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 fee6 	bl	800560c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004840:	e029      	b.n	8004896 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	099b      	lsrs	r3, r3, #6
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00f      	beq.n	800486e <HAL_I2C_EV_IRQHandler+0x2aa>
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	0a9b      	lsrs	r3, r3, #10
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d009      	beq.n	800486e <HAL_I2C_EV_IRQHandler+0x2aa>
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	089b      	lsrs	r3, r3, #2
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d103      	bne.n	800486e <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fef1 	bl	800564e <I2C_SlaveReceive_RXNE>
 800486c:	e014      	b.n	8004898 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	089b      	lsrs	r3, r3, #2
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00e      	beq.n	8004898 <HAL_I2C_EV_IRQHandler+0x2d4>
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	0a5b      	lsrs	r3, r3, #9
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d008      	beq.n	8004898 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 ff1f 	bl	80056ca <I2C_SlaveReceive_BTF>
 800488c:	e004      	b.n	8004898 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800488e:	bf00      	nop
 8004890:	e002      	b.n	8004898 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004892:	bf00      	nop
 8004894:	e000      	b.n	8004898 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004896:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004898:	3720      	adds	r7, #32
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b08a      	sub	sp, #40	; 0x28
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80048b6:	2300      	movs	r3, #0
 80048b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048c0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80048c2:	6a3b      	ldr	r3, [r7, #32]
 80048c4:	0a1b      	lsrs	r3, r3, #8
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00e      	beq.n	80048ec <HAL_I2C_ER_IRQHandler+0x4e>
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	0a1b      	lsrs	r3, r3, #8
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d008      	beq.n	80048ec <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	f043 0301 	orr.w	r3, r3, #1
 80048e0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80048ea:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	0a5b      	lsrs	r3, r3, #9
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00e      	beq.n	8004916 <HAL_I2C_ER_IRQHandler+0x78>
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	0a1b      	lsrs	r3, r3, #8
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	2b00      	cmp	r3, #0
 8004902:	d008      	beq.n	8004916 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004906:	f043 0302 	orr.w	r3, r3, #2
 800490a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004914:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004916:	6a3b      	ldr	r3, [r7, #32]
 8004918:	0a9b      	lsrs	r3, r3, #10
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d03f      	beq.n	80049a2 <HAL_I2C_ER_IRQHandler+0x104>
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	0a1b      	lsrs	r3, r3, #8
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d039      	beq.n	80049a2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800492e:	7efb      	ldrb	r3, [r7, #27]
 8004930:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004936:	b29b      	uxth	r3, r3
 8004938:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004940:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004946:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004948:	7ebb      	ldrb	r3, [r7, #26]
 800494a:	2b20      	cmp	r3, #32
 800494c:	d112      	bne.n	8004974 <HAL_I2C_ER_IRQHandler+0xd6>
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10f      	bne.n	8004974 <HAL_I2C_ER_IRQHandler+0xd6>
 8004954:	7cfb      	ldrb	r3, [r7, #19]
 8004956:	2b21      	cmp	r3, #33	; 0x21
 8004958:	d008      	beq.n	800496c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800495a:	7cfb      	ldrb	r3, [r7, #19]
 800495c:	2b29      	cmp	r3, #41	; 0x29
 800495e:	d005      	beq.n	800496c <HAL_I2C_ER_IRQHandler+0xce>
 8004960:	7cfb      	ldrb	r3, [r7, #19]
 8004962:	2b28      	cmp	r3, #40	; 0x28
 8004964:	d106      	bne.n	8004974 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2b21      	cmp	r3, #33	; 0x21
 800496a:	d103      	bne.n	8004974 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f001 f843 	bl	80059f8 <I2C_Slave_AF>
 8004972:	e016      	b.n	80049a2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800497c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	f043 0304 	orr.w	r3, r3, #4
 8004984:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004986:	7efb      	ldrb	r3, [r7, #27]
 8004988:	2b10      	cmp	r3, #16
 800498a:	d002      	beq.n	8004992 <HAL_I2C_ER_IRQHandler+0xf4>
 800498c:	7efb      	ldrb	r3, [r7, #27]
 800498e:	2b40      	cmp	r3, #64	; 0x40
 8004990:	d107      	bne.n	80049a2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049a0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80049a2:	6a3b      	ldr	r3, [r7, #32]
 80049a4:	0adb      	lsrs	r3, r3, #11
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00e      	beq.n	80049cc <HAL_I2C_ER_IRQHandler+0x12e>
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	0a1b      	lsrs	r3, r3, #8
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d008      	beq.n	80049cc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	f043 0308 	orr.w	r3, r3, #8
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80049ca:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80049cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d008      	beq.n	80049e4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	431a      	orrs	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f001 f87a 	bl	8005ad8 <I2C_ITError>
  }
}
 80049e4:	bf00      	nop
 80049e6:	3728      	adds	r7, #40	; 0x28
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	70fb      	strb	r3, [r7, #3]
 8004a20:	4613      	mov	r3, r2
 8004a22:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a8e:	b2db      	uxtb	r3, r3
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d150      	bne.n	8004b7c <I2C_MasterTransmit_TXE+0xc8>
 8004ada:	7bfb      	ldrb	r3, [r7, #15]
 8004adc:	2b21      	cmp	r3, #33	; 0x21
 8004ade:	d14d      	bne.n	8004b7c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	2b08      	cmp	r3, #8
 8004ae4:	d01d      	beq.n	8004b22 <I2C_MasterTransmit_TXE+0x6e>
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2b20      	cmp	r3, #32
 8004aea:	d01a      	beq.n	8004b22 <I2C_MasterTransmit_TXE+0x6e>
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004af2:	d016      	beq.n	8004b22 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b02:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2211      	movs	r2, #17
 8004b08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2220      	movs	r2, #32
 8004b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7fc f804 	bl	8000b28 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b20:	e060      	b.n	8004be4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b30:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b40:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b40      	cmp	r3, #64	; 0x40
 8004b5a:	d107      	bne.n	8004b6c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f7ff ff6d 	bl	8004a44 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b6a:	e03b      	b.n	8004be4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7fb ffd7 	bl	8000b28 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b7a:	e033      	b.n	8004be4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
 8004b7e:	2b21      	cmp	r3, #33	; 0x21
 8004b80:	d005      	beq.n	8004b8e <I2C_MasterTransmit_TXE+0xda>
 8004b82:	7bbb      	ldrb	r3, [r7, #14]
 8004b84:	2b40      	cmp	r3, #64	; 0x40
 8004b86:	d12d      	bne.n	8004be4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004b88:	7bfb      	ldrb	r3, [r7, #15]
 8004b8a:	2b22      	cmp	r3, #34	; 0x22
 8004b8c:	d12a      	bne.n	8004be4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d108      	bne.n	8004baa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ba6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004ba8:	e01c      	b.n	8004be4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b40      	cmp	r3, #64	; 0x40
 8004bb4:	d103      	bne.n	8004bbe <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f880 	bl	8004cbc <I2C_MemoryTransmit_TXE_BTF>
}
 8004bbc:	e012      	b.n	8004be4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	781a      	ldrb	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004be2:	e7ff      	b.n	8004be4 <I2C_MasterTransmit_TXE+0x130>
 8004be4:	bf00      	nop
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b21      	cmp	r3, #33	; 0x21
 8004c04:	d156      	bne.n	8004cb4 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d012      	beq.n	8004c36 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	781a      	ldrb	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004c34:	e03e      	b.n	8004cb4 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	d01d      	beq.n	8004c78 <I2C_MasterTransmit_BTF+0x8c>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2b20      	cmp	r3, #32
 8004c40:	d01a      	beq.n	8004c78 <I2C_MasterTransmit_BTF+0x8c>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c48:	d016      	beq.n	8004c78 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c58:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2211      	movs	r2, #17
 8004c5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f7fb ff59 	bl	8000b28 <HAL_I2C_MasterTxCpltCallback>
}
 8004c76:	e01d      	b.n	8004cb4 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c86:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c96:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7fb ff3a 	bl	8000b28 <HAL_I2C_MasterTxCpltCallback>
}
 8004cb4:	bf00      	nop
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d11d      	bne.n	8004d10 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d10b      	bne.n	8004cf4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce0:	b2da      	uxtb	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cec:	1c9a      	adds	r2, r3, #2
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004cf2:	e06e      	b.n	8004dd2 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	121b      	asrs	r3, r3, #8
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d08:	1c5a      	adds	r2, r3, #1
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004d0e:	e060      	b.n	8004dd2 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d10b      	bne.n	8004d30 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004d2e:	e050      	b.n	8004dd2 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d14c      	bne.n	8004dd2 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
 8004d3a:	2b22      	cmp	r3, #34	; 0x22
 8004d3c:	d108      	bne.n	8004d50 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d4c:	601a      	str	r2, [r3, #0]
}
 8004d4e:	e040      	b.n	8004dd2 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d015      	beq.n	8004d86 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8004d5a:	7bfb      	ldrb	r3, [r7, #15]
 8004d5c:	2b21      	cmp	r3, #33	; 0x21
 8004d5e:	d112      	bne.n	8004d86 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	781a      	ldrb	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	1c5a      	adds	r2, r3, #1
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d84:	e025      	b.n	8004dd2 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d120      	bne.n	8004dd2 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
 8004d92:	2b21      	cmp	r3, #33	; 0x21
 8004d94:	d11d      	bne.n	8004dd2 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004da4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004db4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f7ff fe39 	bl	8004a44 <HAL_I2C_MemTxCpltCallback>
}
 8004dd2:	bf00      	nop
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b084      	sub	sp, #16
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b22      	cmp	r3, #34	; 0x22
 8004dec:	f040 80a2 	bne.w	8004f34 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2b03      	cmp	r3, #3
 8004dfc:	d921      	bls.n	8004e42 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	691a      	ldr	r2, [r3, #16]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	b2d2      	uxtb	r2, r2
 8004e0a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	2b03      	cmp	r3, #3
 8004e2c:	f040 8082 	bne.w	8004f34 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e3e:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004e40:	e078      	b.n	8004f34 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d074      	beq.n	8004f34 <I2C_MasterReceive_RXNE+0x15a>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d002      	beq.n	8004e56 <I2C_MasterReceive_RXNE+0x7c>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d16e      	bne.n	8004f34 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f001 f818 	bl	8005e8c <I2C_WaitOnSTOPRequestThroughIT>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d142      	bne.n	8004ee8 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e70:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	685a      	ldr	r2, [r3, #4]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e80:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	691a      	ldr	r2, [r3, #16]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	b2d2      	uxtb	r2, r2
 8004e8e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e94:	1c5a      	adds	r2, r3, #1
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b40      	cmp	r3, #64	; 0x40
 8004eba:	d10a      	bne.n	8004ed2 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7ff fdc4 	bl	8004a58 <HAL_I2C_MemRxCpltCallback>
}
 8004ed0:	e030      	b.n	8004f34 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2212      	movs	r2, #18
 8004ede:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f7fb fe31 	bl	8000b48 <HAL_I2C_MasterRxCpltCallback>
}
 8004ee6:	e025      	b.n	8004f34 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ef6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691a      	ldr	r2, [r3, #16]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	3b01      	subs	r3, #1
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2220      	movs	r2, #32
 8004f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7fb fe1a 	bl	8000b68 <HAL_I2C_ErrorCallback>
}
 8004f34:	bf00      	nop
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f48:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	2b04      	cmp	r3, #4
 8004f52:	d11b      	bne.n	8004f8c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f62:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691a      	ldr	r2, [r3, #16]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	b2d2      	uxtb	r2, r2
 8004f70:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	1c5a      	adds	r2, r3, #1
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	3b01      	subs	r3, #1
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004f8a:	e0bd      	b.n	8005108 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	2b03      	cmp	r3, #3
 8004f94:	d129      	bne.n	8004fea <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fa4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b04      	cmp	r3, #4
 8004faa:	d00a      	beq.n	8004fc2 <I2C_MasterReceive_BTF+0x86>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d007      	beq.n	8004fc2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fc0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	691a      	ldr	r2, [r3, #16]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	b2d2      	uxtb	r2, r2
 8004fce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	1c5a      	adds	r2, r3, #1
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004fe8:	e08e      	b.n	8005108 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d176      	bne.n	80050e2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d002      	beq.n	8005000 <I2C_MasterReceive_BTF+0xc4>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2b10      	cmp	r3, #16
 8004ffe:	d108      	bne.n	8005012 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800500e:	601a      	str	r2, [r3, #0]
 8005010:	e019      	b.n	8005046 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2b04      	cmp	r3, #4
 8005016:	d002      	beq.n	800501e <I2C_MasterReceive_BTF+0xe2>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2b02      	cmp	r3, #2
 800501c:	d108      	bne.n	8005030 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	e00a      	b.n	8005046 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2b10      	cmp	r3, #16
 8005034:	d007      	beq.n	8005046 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005044:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	691a      	ldr	r2, [r3, #16]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	b2d2      	uxtb	r2, r2
 8005052:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005062:	b29b      	uxth	r3, r3
 8005064:	3b01      	subs	r3, #1
 8005066:	b29a      	uxth	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	691a      	ldr	r2, [r3, #16]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	b2d2      	uxtb	r2, r2
 8005078:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	1c5a      	adds	r2, r3, #1
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005088:	b29b      	uxth	r3, r3
 800508a:	3b01      	subs	r3, #1
 800508c:	b29a      	uxth	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80050a0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2220      	movs	r2, #32
 80050a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b40      	cmp	r3, #64	; 0x40
 80050b4:	d10a      	bne.n	80050cc <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f7ff fcc7 	bl	8004a58 <HAL_I2C_MemRxCpltCallback>
}
 80050ca:	e01d      	b.n	8005108 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2212      	movs	r2, #18
 80050d8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7fb fd34 	bl	8000b48 <HAL_I2C_MasterRxCpltCallback>
}
 80050e0:	e012      	b.n	8005108 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	691a      	ldr	r2, [r3, #16]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	b2d2      	uxtb	r2, r2
 80050ee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fe:	b29b      	uxth	r3, r3
 8005100:	3b01      	subs	r3, #1
 8005102:	b29a      	uxth	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005108:	bf00      	nop
 800510a:	3710      	adds	r7, #16
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b40      	cmp	r3, #64	; 0x40
 8005122:	d117      	bne.n	8005154 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005128:	2b00      	cmp	r3, #0
 800512a:	d109      	bne.n	8005140 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005130:	b2db      	uxtb	r3, r3
 8005132:	461a      	mov	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800513c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800513e:	e067      	b.n	8005210 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005144:	b2db      	uxtb	r3, r3
 8005146:	f043 0301 	orr.w	r3, r3, #1
 800514a:	b2da      	uxtb	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	611a      	str	r2, [r3, #16]
}
 8005152:	e05d      	b.n	8005210 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800515c:	d133      	bne.n	80051c6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b21      	cmp	r3, #33	; 0x21
 8005168:	d109      	bne.n	800517e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516e:	b2db      	uxtb	r3, r3
 8005170:	461a      	mov	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800517a:	611a      	str	r2, [r3, #16]
 800517c:	e008      	b.n	8005190 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005182:	b2db      	uxtb	r3, r3
 8005184:	f043 0301 	orr.w	r3, r3, #1
 8005188:	b2da      	uxtb	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005194:	2b00      	cmp	r3, #0
 8005196:	d004      	beq.n	80051a2 <I2C_Master_SB+0x92>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d108      	bne.n	80051b4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d032      	beq.n	8005210 <I2C_Master_SB+0x100>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d02d      	beq.n	8005210 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051c2:	605a      	str	r2, [r3, #4]
}
 80051c4:	e024      	b.n	8005210 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10e      	bne.n	80051ec <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	11db      	asrs	r3, r3, #7
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	f003 0306 	and.w	r3, r3, #6
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	f063 030f 	orn	r3, r3, #15
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	611a      	str	r2, [r3, #16]
}
 80051ea:	e011      	b.n	8005210 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d10d      	bne.n	8005210 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	11db      	asrs	r3, r3, #7
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	f003 0306 	and.w	r3, r3, #6
 8005202:	b2db      	uxtb	r3, r3
 8005204:	f063 030e 	orn	r3, r3, #14
 8005208:	b2da      	uxtb	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	611a      	str	r2, [r3, #16]
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005228:	b2da      	uxtb	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005234:	2b00      	cmp	r3, #0
 8005236:	d004      	beq.n	8005242 <I2C_Master_ADD10+0x26>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800523e:	2b00      	cmp	r3, #0
 8005240:	d108      	bne.n	8005254 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00c      	beq.n	8005264 <I2C_Master_ADD10+0x48>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005250:	2b00      	cmp	r3, #0
 8005252:	d007      	beq.n	8005264 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005262:	605a      	str	r2, [r3, #4]
  }
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005270:	b480      	push	{r7}
 8005272:	b091      	sub	sp, #68	; 0x44
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800527e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005286:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b22      	cmp	r3, #34	; 0x22
 8005298:	f040 8169 	bne.w	800556e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10f      	bne.n	80052c4 <I2C_Master_ADDR+0x54>
 80052a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80052a8:	2b40      	cmp	r3, #64	; 0x40
 80052aa:	d10b      	bne.n	80052c4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052ac:	2300      	movs	r3, #0
 80052ae:	633b      	str	r3, [r7, #48]	; 0x30
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	633b      	str	r3, [r7, #48]	; 0x30
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	633b      	str	r3, [r7, #48]	; 0x30
 80052c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c2:	e160      	b.n	8005586 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d11d      	bne.n	8005308 <I2C_Master_ADDR+0x98>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80052d4:	d118      	bne.n	8005308 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052d6:	2300      	movs	r3, #0
 80052d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052fa:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005300:	1c5a      	adds	r2, r3, #1
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	651a      	str	r2, [r3, #80]	; 0x50
 8005306:	e13e      	b.n	8005586 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800530c:	b29b      	uxth	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d113      	bne.n	800533a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005312:	2300      	movs	r3, #0
 8005314:	62bb      	str	r3, [r7, #40]	; 0x28
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	62bb      	str	r3, [r7, #40]	; 0x28
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	62bb      	str	r3, [r7, #40]	; 0x28
 8005326:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	e115      	b.n	8005566 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800533e:	b29b      	uxth	r3, r3
 8005340:	2b01      	cmp	r3, #1
 8005342:	f040 808a 	bne.w	800545a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005348:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800534c:	d137      	bne.n	80053be <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800535c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005368:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800536c:	d113      	bne.n	8005396 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800537c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800537e:	2300      	movs	r3, #0
 8005380:	627b      	str	r3, [r7, #36]	; 0x24
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	627b      	str	r3, [r7, #36]	; 0x24
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	627b      	str	r3, [r7, #36]	; 0x24
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005394:	e0e7      	b.n	8005566 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005396:	2300      	movs	r3, #0
 8005398:	623b      	str	r3, [r7, #32]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	623b      	str	r3, [r7, #32]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	623b      	str	r3, [r7, #32]
 80053aa:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	e0d3      	b.n	8005566 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80053be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d02e      	beq.n	8005422 <I2C_Master_ADDR+0x1b2>
 80053c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c6:	2b20      	cmp	r3, #32
 80053c8:	d02b      	beq.n	8005422 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80053ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053cc:	2b12      	cmp	r3, #18
 80053ce:	d102      	bne.n	80053d6 <I2C_Master_ADDR+0x166>
 80053d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d125      	bne.n	8005422 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80053d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d8:	2b04      	cmp	r3, #4
 80053da:	d00e      	beq.n	80053fa <I2C_Master_ADDR+0x18a>
 80053dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d00b      	beq.n	80053fa <I2C_Master_ADDR+0x18a>
 80053e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e4:	2b10      	cmp	r3, #16
 80053e6:	d008      	beq.n	80053fa <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053f6:	601a      	str	r2, [r3, #0]
 80053f8:	e007      	b.n	800540a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005408:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800540a:	2300      	movs	r3, #0
 800540c:	61fb      	str	r3, [r7, #28]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	61fb      	str	r3, [r7, #28]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	61fb      	str	r3, [r7, #28]
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	e0a1      	b.n	8005566 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005430:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005432:	2300      	movs	r3, #0
 8005434:	61bb      	str	r3, [r7, #24]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	61bb      	str	r3, [r7, #24]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	61bb      	str	r3, [r7, #24]
 8005446:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005456:	601a      	str	r2, [r3, #0]
 8005458:	e085      	b.n	8005566 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800545e:	b29b      	uxth	r3, r3
 8005460:	2b02      	cmp	r3, #2
 8005462:	d14d      	bne.n	8005500 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005466:	2b04      	cmp	r3, #4
 8005468:	d016      	beq.n	8005498 <I2C_Master_ADDR+0x228>
 800546a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546c:	2b02      	cmp	r3, #2
 800546e:	d013      	beq.n	8005498 <I2C_Master_ADDR+0x228>
 8005470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005472:	2b10      	cmp	r3, #16
 8005474:	d010      	beq.n	8005498 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005484:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	e007      	b.n	80054a8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054a6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054b6:	d117      	bne.n	80054e8 <I2C_Master_ADDR+0x278>
 80054b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054be:	d00b      	beq.n	80054d8 <I2C_Master_ADDR+0x268>
 80054c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d008      	beq.n	80054d8 <I2C_Master_ADDR+0x268>
 80054c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c8:	2b08      	cmp	r3, #8
 80054ca:	d005      	beq.n	80054d8 <I2C_Master_ADDR+0x268>
 80054cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ce:	2b10      	cmp	r3, #16
 80054d0:	d002      	beq.n	80054d8 <I2C_Master_ADDR+0x268>
 80054d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d4:	2b20      	cmp	r3, #32
 80054d6:	d107      	bne.n	80054e8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80054e6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054e8:	2300      	movs	r3, #0
 80054ea:	617b      	str	r3, [r7, #20]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	617b      	str	r3, [r7, #20]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	617b      	str	r3, [r7, #20]
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	e032      	b.n	8005566 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800550e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800551a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800551e:	d117      	bne.n	8005550 <I2C_Master_ADDR+0x2e0>
 8005520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005522:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005526:	d00b      	beq.n	8005540 <I2C_Master_ADDR+0x2d0>
 8005528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552a:	2b01      	cmp	r3, #1
 800552c:	d008      	beq.n	8005540 <I2C_Master_ADDR+0x2d0>
 800552e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005530:	2b08      	cmp	r3, #8
 8005532:	d005      	beq.n	8005540 <I2C_Master_ADDR+0x2d0>
 8005534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005536:	2b10      	cmp	r3, #16
 8005538:	d002      	beq.n	8005540 <I2C_Master_ADDR+0x2d0>
 800553a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553c:	2b20      	cmp	r3, #32
 800553e:	d107      	bne.n	8005550 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800554e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005550:	2300      	movs	r3, #0
 8005552:	613b      	str	r3, [r7, #16]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	613b      	str	r3, [r7, #16]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	613b      	str	r3, [r7, #16]
 8005564:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800556c:	e00b      	b.n	8005586 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800556e:	2300      	movs	r3, #0
 8005570:	60fb      	str	r3, [r7, #12]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	60fb      	str	r3, [r7, #12]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	60fb      	str	r3, [r7, #12]
 8005582:	68fb      	ldr	r3, [r7, #12]
}
 8005584:	e7ff      	b.n	8005586 <I2C_Master_ADDR+0x316>
 8005586:	bf00      	nop
 8005588:	3744      	adds	r7, #68	; 0x44
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b084      	sub	sp, #16
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d02b      	beq.n	8005604 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b0:	781a      	ldrb	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	1c5a      	adds	r2, r3, #1
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	3b01      	subs	r3, #1
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d114      	bne.n	8005604 <I2C_SlaveTransmit_TXE+0x72>
 80055da:	7bfb      	ldrb	r3, [r7, #15]
 80055dc:	2b29      	cmp	r3, #41	; 0x29
 80055de:	d111      	bne.n	8005604 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ee:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2221      	movs	r2, #33	; 0x21
 80055f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2228      	movs	r2, #40	; 0x28
 80055fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7ff f9f4 	bl	80049ec <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005604:	bf00      	nop
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005618:	b29b      	uxth	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d011      	beq.n	8005642 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005622:	781a      	ldrb	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562e:	1c5a      	adds	r2, r3, #1
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005638:	b29b      	uxth	r3, r3
 800563a:	3b01      	subs	r3, #1
 800563c:	b29a      	uxth	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005642:	bf00      	nop
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b084      	sub	sp, #16
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800565c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005662:	b29b      	uxth	r3, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	d02c      	beq.n	80056c2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	691a      	ldr	r2, [r3, #16]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	b2d2      	uxtb	r2, r2
 8005674:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005684:	b29b      	uxth	r3, r3
 8005686:	3b01      	subs	r3, #1
 8005688:	b29a      	uxth	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005692:	b29b      	uxth	r3, r3
 8005694:	2b00      	cmp	r3, #0
 8005696:	d114      	bne.n	80056c2 <I2C_SlaveReceive_RXNE+0x74>
 8005698:	7bfb      	ldrb	r3, [r7, #15]
 800569a:	2b2a      	cmp	r3, #42	; 0x2a
 800569c:	d111      	bne.n	80056c2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ac:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2222      	movs	r2, #34	; 0x22
 80056b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2228      	movs	r2, #40	; 0x28
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7ff f99f 	bl	8004a00 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80056c2:	bf00      	nop
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d012      	beq.n	8005702 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	691a      	ldr	r2, [r3, #16]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ee:	1c5a      	adds	r2, r3, #1
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	3b01      	subs	r3, #1
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005702:	bf00      	nop
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b084      	sub	sp, #16
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
 8005716:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005718:	2300      	movs	r3, #0
 800571a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005722:	b2db      	uxtb	r3, r3
 8005724:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005728:	2b28      	cmp	r3, #40	; 0x28
 800572a:	d127      	bne.n	800577c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800573a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	089b      	lsrs	r3, r3, #2
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005748:	2301      	movs	r3, #1
 800574a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	09db      	lsrs	r3, r3, #7
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b00      	cmp	r3, #0
 8005756:	d103      	bne.n	8005760 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	81bb      	strh	r3, [r7, #12]
 800575e:	e002      	b.n	8005766 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800576e:	89ba      	ldrh	r2, [r7, #12]
 8005770:	7bfb      	ldrb	r3, [r7, #15]
 8005772:	4619      	mov	r1, r3
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7ff f94d 	bl	8004a14 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800577a:	e008      	b.n	800578e <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f06f 0202 	mvn.w	r2, #2
 8005784:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800578e:	bf00      	nop
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
	...

08005798 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057b6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80057b8:	2300      	movs	r3, #0
 80057ba:	60bb      	str	r3, [r7, #8]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	60bb      	str	r3, [r7, #8]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f042 0201 	orr.w	r2, r2, #1
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057e4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057f4:	d172      	bne.n	80058dc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80057f6:	7bfb      	ldrb	r3, [r7, #15]
 80057f8:	2b22      	cmp	r3, #34	; 0x22
 80057fa:	d002      	beq.n	8005802 <I2C_Slave_STOPF+0x6a>
 80057fc:	7bfb      	ldrb	r3, [r7, #15]
 80057fe:	2b2a      	cmp	r3, #42	; 0x2a
 8005800:	d135      	bne.n	800586e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	b29a      	uxth	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005814:	b29b      	uxth	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d005      	beq.n	8005826 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581e:	f043 0204 	orr.w	r2, r3, #4
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005834:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583a:	4618      	mov	r0, r3
 800583c:	f7fe f974 	bl	8003b28 <HAL_DMA_GetState>
 8005840:	4603      	mov	r3, r0
 8005842:	2b01      	cmp	r3, #1
 8005844:	d049      	beq.n	80058da <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584a:	4a69      	ldr	r2, [pc, #420]	; (80059f0 <I2C_Slave_STOPF+0x258>)
 800584c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005852:	4618      	mov	r0, r3
 8005854:	f7fd ffbc 	bl	80037d0 <HAL_DMA_Abort_IT>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d03d      	beq.n	80058da <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005868:	4610      	mov	r0, r2
 800586a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800586c:	e035      	b.n	80058da <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	b29a      	uxth	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005880:	b29b      	uxth	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d005      	beq.n	8005892 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588a:	f043 0204 	orr.w	r2, r3, #4
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058a0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7fe f93e 	bl	8003b28 <HAL_DMA_GetState>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d014      	beq.n	80058dc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b6:	4a4e      	ldr	r2, [pc, #312]	; (80059f0 <I2C_Slave_STOPF+0x258>)
 80058b8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058be:	4618      	mov	r0, r3
 80058c0:	f7fd ff86 	bl	80037d0 <HAL_DMA_Abort_IT>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d008      	beq.n	80058dc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058d4:	4610      	mov	r0, r2
 80058d6:	4798      	blx	r3
 80058d8:	e000      	b.n	80058dc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058da:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d03e      	beq.n	8005964 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	f003 0304 	and.w	r3, r3, #4
 80058f0:	2b04      	cmp	r3, #4
 80058f2:	d112      	bne.n	800591a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	691a      	ldr	r2, [r3, #16]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fe:	b2d2      	uxtb	r2, r2
 8005900:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	1c5a      	adds	r2, r3, #1
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005910:	b29b      	uxth	r3, r3
 8005912:	3b01      	subs	r3, #1
 8005914:	b29a      	uxth	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005924:	2b40      	cmp	r3, #64	; 0x40
 8005926:	d112      	bne.n	800594e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	691a      	ldr	r2, [r3, #16]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	b2d2      	uxtb	r2, r2
 8005934:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593a:	1c5a      	adds	r2, r3, #1
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005944:	b29b      	uxth	r3, r3
 8005946:	3b01      	subs	r3, #1
 8005948:	b29a      	uxth	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005952:	b29b      	uxth	r3, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	d005      	beq.n	8005964 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595c:	f043 0204 	orr.w	r2, r3, #4
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005968:	2b00      	cmp	r3, #0
 800596a:	d003      	beq.n	8005974 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 f8b3 	bl	8005ad8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005972:	e039      	b.n	80059e8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005974:	7bfb      	ldrb	r3, [r7, #15]
 8005976:	2b2a      	cmp	r3, #42	; 0x2a
 8005978:	d109      	bne.n	800598e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2228      	movs	r2, #40	; 0x28
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7ff f839 	bl	8004a00 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b28      	cmp	r3, #40	; 0x28
 8005998:	d111      	bne.n	80059be <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a15      	ldr	r2, [pc, #84]	; (80059f4 <I2C_Slave_STOPF+0x25c>)
 800599e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2220      	movs	r2, #32
 80059aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7ff f83a 	bl	8004a30 <HAL_I2C_ListenCpltCallback>
}
 80059bc:	e014      	b.n	80059e8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c2:	2b22      	cmp	r3, #34	; 0x22
 80059c4:	d002      	beq.n	80059cc <I2C_Slave_STOPF+0x234>
 80059c6:	7bfb      	ldrb	r3, [r7, #15]
 80059c8:	2b22      	cmp	r3, #34	; 0x22
 80059ca:	d10d      	bne.n	80059e8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2220      	movs	r2, #32
 80059d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7ff f80c 	bl	8004a00 <HAL_I2C_SlaveRxCpltCallback>
}
 80059e8:	bf00      	nop
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	08005d3d 	.word	0x08005d3d
 80059f4:	ffff0000 	.word	0xffff0000

080059f8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a06:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d002      	beq.n	8005a1a <I2C_Slave_AF+0x22>
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	2b20      	cmp	r3, #32
 8005a18:	d129      	bne.n	8005a6e <I2C_Slave_AF+0x76>
 8005a1a:	7bfb      	ldrb	r3, [r7, #15]
 8005a1c:	2b28      	cmp	r3, #40	; 0x28
 8005a1e:	d126      	bne.n	8005a6e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a2c      	ldr	r2, [pc, #176]	; (8005ad4 <I2C_Slave_AF+0xdc>)
 8005a24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a34:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a3e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a4e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f7fe ffe2 	bl	8004a30 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005a6c:	e02e      	b.n	8005acc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005a6e:	7bfb      	ldrb	r3, [r7, #15]
 8005a70:	2b21      	cmp	r3, #33	; 0x21
 8005a72:	d126      	bne.n	8005ac2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a17      	ldr	r2, [pc, #92]	; (8005ad4 <I2C_Slave_AF+0xdc>)
 8005a78:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2221      	movs	r2, #33	; 0x21
 8005a7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2220      	movs	r2, #32
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a9e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005aa8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ab8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7fe ff96 	bl	80049ec <HAL_I2C_SlaveTxCpltCallback>
}
 8005ac0:	e004      	b.n	8005acc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005aca:	615a      	str	r2, [r3, #20]
}
 8005acc:	bf00      	nop
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	ffff0000 	.word	0xffff0000

08005ad8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005aee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005af0:	7bbb      	ldrb	r3, [r7, #14]
 8005af2:	2b10      	cmp	r3, #16
 8005af4:	d002      	beq.n	8005afc <I2C_ITError+0x24>
 8005af6:	7bbb      	ldrb	r3, [r7, #14]
 8005af8:	2b40      	cmp	r3, #64	; 0x40
 8005afa:	d10a      	bne.n	8005b12 <I2C_ITError+0x3a>
 8005afc:	7bfb      	ldrb	r3, [r7, #15]
 8005afe:	2b22      	cmp	r3, #34	; 0x22
 8005b00:	d107      	bne.n	8005b12 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b10:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b12:	7bfb      	ldrb	r3, [r7, #15]
 8005b14:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b18:	2b28      	cmp	r3, #40	; 0x28
 8005b1a:	d107      	bne.n	8005b2c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2228      	movs	r2, #40	; 0x28
 8005b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b2a:	e015      	b.n	8005b58 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b3a:	d00a      	beq.n	8005b52 <I2C_ITError+0x7a>
 8005b3c:	7bfb      	ldrb	r3, [r7, #15]
 8005b3e:	2b60      	cmp	r3, #96	; 0x60
 8005b40:	d007      	beq.n	8005b52 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2220      	movs	r2, #32
 8005b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b66:	d162      	bne.n	8005c2e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b76:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d020      	beq.n	8005bc8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b8a:	4a6a      	ldr	r2, [pc, #424]	; (8005d34 <I2C_ITError+0x25c>)
 8005b8c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7fd fe1c 	bl	80037d0 <HAL_DMA_Abort_IT>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f000 8089 	beq.w	8005cb2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f022 0201 	bic.w	r2, r2, #1
 8005bae:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005bc2:	4610      	mov	r0, r2
 8005bc4:	4798      	blx	r3
 8005bc6:	e074      	b.n	8005cb2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bcc:	4a59      	ldr	r2, [pc, #356]	; (8005d34 <I2C_ITError+0x25c>)
 8005bce:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7fd fdfb 	bl	80037d0 <HAL_DMA_Abort_IT>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d068      	beq.n	8005cb2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bea:	2b40      	cmp	r3, #64	; 0x40
 8005bec:	d10b      	bne.n	8005c06 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	691a      	ldr	r2, [r3, #16]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf8:	b2d2      	uxtb	r2, r2
 8005bfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c00:	1c5a      	adds	r2, r3, #1
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f022 0201 	bic.w	r2, r2, #1
 8005c14:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c28:	4610      	mov	r0, r2
 8005c2a:	4798      	blx	r3
 8005c2c:	e041      	b.n	8005cb2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b60      	cmp	r3, #96	; 0x60
 8005c38:	d125      	bne.n	8005c86 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c52:	2b40      	cmp	r3, #64	; 0x40
 8005c54:	d10b      	bne.n	8005c6e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	691a      	ldr	r2, [r3, #16]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c60:	b2d2      	uxtb	r2, r2
 8005c62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	1c5a      	adds	r2, r3, #1
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f022 0201 	bic.w	r2, r2, #1
 8005c7c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7fe fef4 	bl	8004a6c <HAL_I2C_AbortCpltCallback>
 8005c84:	e015      	b.n	8005cb2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	695b      	ldr	r3, [r3, #20]
 8005c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c90:	2b40      	cmp	r3, #64	; 0x40
 8005c92:	d10b      	bne.n	8005cac <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	691a      	ldr	r2, [r3, #16]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9e:	b2d2      	uxtb	r2, r2
 8005ca0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca6:	1c5a      	adds	r2, r3, #1
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f7fa ff5b 	bl	8000b68 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10e      	bne.n	8005ce0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d109      	bne.n	8005ce0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d104      	bne.n	8005ce0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d007      	beq.n	8005cf0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685a      	ldr	r2, [r3, #4]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005cee:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfc:	f003 0304 	and.w	r3, r3, #4
 8005d00:	2b04      	cmp	r3, #4
 8005d02:	d113      	bne.n	8005d2c <I2C_ITError+0x254>
 8005d04:	7bfb      	ldrb	r3, [r7, #15]
 8005d06:	2b28      	cmp	r3, #40	; 0x28
 8005d08:	d110      	bne.n	8005d2c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a0a      	ldr	r2, [pc, #40]	; (8005d38 <I2C_ITError+0x260>)
 8005d0e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2220      	movs	r2, #32
 8005d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7fe fe82 	bl	8004a30 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d2c:	bf00      	nop
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	08005d3d 	.word	0x08005d3d
 8005d38:	ffff0000 	.word	0xffff0000

08005d3c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d44:	2300      	movs	r3, #0
 8005d46:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d54:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005d56:	4b4b      	ldr	r3, [pc, #300]	; (8005e84 <I2C_DMAAbort+0x148>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	08db      	lsrs	r3, r3, #3
 8005d5c:	4a4a      	ldr	r2, [pc, #296]	; (8005e88 <I2C_DMAAbort+0x14c>)
 8005d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d62:	0a1a      	lsrs	r2, r3, #8
 8005d64:	4613      	mov	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4413      	add	r3, r2
 8005d6a:	00da      	lsls	r2, r3, #3
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d106      	bne.n	8005d84 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7a:	f043 0220 	orr.w	r2, r3, #32
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005d82:	e00a      	b.n	8005d9a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	3b01      	subs	r3, #1
 8005d88:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d98:	d0ea      	beq.n	8005d70 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d003      	beq.n	8005daa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da6:	2200      	movs	r2, #0
 8005da8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d003      	beq.n	8005dba <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db6:	2200      	movs	r2, #0
 8005db8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dc8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d003      	beq.n	8005de0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ddc:	2200      	movs	r2, #0
 8005dde:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d003      	beq.n	8005df0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dec:	2200      	movs	r2, #0
 8005dee:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f022 0201 	bic.w	r2, r2, #1
 8005dfe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b60      	cmp	r3, #96	; 0x60
 8005e0a:	d10e      	bne.n	8005e2a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005e22:	6978      	ldr	r0, [r7, #20]
 8005e24:	f7fe fe22 	bl	8004a6c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e28:	e027      	b.n	8005e7a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e2a:	7cfb      	ldrb	r3, [r7, #19]
 8005e2c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005e30:	2b28      	cmp	r3, #40	; 0x28
 8005e32:	d117      	bne.n	8005e64 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f042 0201 	orr.w	r2, r2, #1
 8005e42:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e52:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	2200      	movs	r2, #0
 8005e58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2228      	movs	r2, #40	; 0x28
 8005e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005e62:	e007      	b.n	8005e74 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005e74:	6978      	ldr	r0, [r7, #20]
 8005e76:	f7fa fe77 	bl	8000b68 <HAL_I2C_ErrorCallback>
}
 8005e7a:	bf00      	nop
 8005e7c:	3718      	adds	r7, #24
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	20000064 	.word	0x20000064
 8005e88:	14f8b589 	.word	0x14f8b589

08005e8c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e98:	4b13      	ldr	r3, [pc, #76]	; (8005ee8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	08db      	lsrs	r3, r3, #3
 8005e9e:	4a13      	ldr	r2, [pc, #76]	; (8005eec <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea4:	0a1a      	lsrs	r2, r3, #8
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4413      	add	r3, r2
 8005eac:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d107      	bne.n	8005eca <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebe:	f043 0220 	orr.w	r2, r3, #32
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e008      	b.n	8005edc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ed8:	d0e9      	beq.n	8005eae <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3714      	adds	r7, #20
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	20000064 	.word	0x20000064
 8005eec:	14f8b589 	.word	0x14f8b589

08005ef0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005f00:	d103      	bne.n	8005f0a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005f08:	e007      	b.n	8005f1a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005f12:	d102      	bne.n	8005f1a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2208      	movs	r2, #8
 8005f18:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005f1a:	bf00      	nop
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
	...

08005f28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e0cc      	b.n	80060d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f3c:	4b68      	ldr	r3, [pc, #416]	; (80060e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 030f 	and.w	r3, r3, #15
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d90c      	bls.n	8005f64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f4a:	4b65      	ldr	r3, [pc, #404]	; (80060e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	b2d2      	uxtb	r2, r2
 8005f50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f52:	4b63      	ldr	r3, [pc, #396]	; (80060e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 030f 	and.w	r3, r3, #15
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d001      	beq.n	8005f64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e0b8      	b.n	80060d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0302 	and.w	r3, r3, #2
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d020      	beq.n	8005fb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0304 	and.w	r3, r3, #4
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d005      	beq.n	8005f88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f7c:	4b59      	ldr	r3, [pc, #356]	; (80060e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	4a58      	ldr	r2, [pc, #352]	; (80060e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0308 	and.w	r3, r3, #8
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d005      	beq.n	8005fa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f94:	4b53      	ldr	r3, [pc, #332]	; (80060e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	4a52      	ldr	r2, [pc, #328]	; (80060e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fa0:	4b50      	ldr	r3, [pc, #320]	; (80060e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	494d      	ldr	r1, [pc, #308]	; (80060e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d044      	beq.n	8006048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d107      	bne.n	8005fd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fc6:	4b47      	ldr	r3, [pc, #284]	; (80060e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d119      	bne.n	8006006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e07f      	b.n	80060d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d003      	beq.n	8005fe6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fe2:	2b03      	cmp	r3, #3
 8005fe4:	d107      	bne.n	8005ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fe6:	4b3f      	ldr	r3, [pc, #252]	; (80060e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d109      	bne.n	8006006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e06f      	b.n	80060d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ff6:	4b3b      	ldr	r3, [pc, #236]	; (80060e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0302 	and.w	r3, r3, #2
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e067      	b.n	80060d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006006:	4b37      	ldr	r3, [pc, #220]	; (80060e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f023 0203 	bic.w	r2, r3, #3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	4934      	ldr	r1, [pc, #208]	; (80060e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006014:	4313      	orrs	r3, r2
 8006016:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006018:	f7fd f922 	bl	8003260 <HAL_GetTick>
 800601c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800601e:	e00a      	b.n	8006036 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006020:	f7fd f91e 	bl	8003260 <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	f241 3288 	movw	r2, #5000	; 0x1388
 800602e:	4293      	cmp	r3, r2
 8006030:	d901      	bls.n	8006036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e04f      	b.n	80060d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006036:	4b2b      	ldr	r3, [pc, #172]	; (80060e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f003 020c 	and.w	r2, r3, #12
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	429a      	cmp	r2, r3
 8006046:	d1eb      	bne.n	8006020 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006048:	4b25      	ldr	r3, [pc, #148]	; (80060e0 <HAL_RCC_ClockConfig+0x1b8>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 030f 	and.w	r3, r3, #15
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	429a      	cmp	r2, r3
 8006054:	d20c      	bcs.n	8006070 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006056:	4b22      	ldr	r3, [pc, #136]	; (80060e0 <HAL_RCC_ClockConfig+0x1b8>)
 8006058:	683a      	ldr	r2, [r7, #0]
 800605a:	b2d2      	uxtb	r2, r2
 800605c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800605e:	4b20      	ldr	r3, [pc, #128]	; (80060e0 <HAL_RCC_ClockConfig+0x1b8>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 030f 	and.w	r3, r3, #15
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	429a      	cmp	r2, r3
 800606a:	d001      	beq.n	8006070 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e032      	b.n	80060d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0304 	and.w	r3, r3, #4
 8006078:	2b00      	cmp	r3, #0
 800607a:	d008      	beq.n	800608e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800607c:	4b19      	ldr	r3, [pc, #100]	; (80060e4 <HAL_RCC_ClockConfig+0x1bc>)
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	4916      	ldr	r1, [pc, #88]	; (80060e4 <HAL_RCC_ClockConfig+0x1bc>)
 800608a:	4313      	orrs	r3, r2
 800608c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0308 	and.w	r3, r3, #8
 8006096:	2b00      	cmp	r3, #0
 8006098:	d009      	beq.n	80060ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800609a:	4b12      	ldr	r3, [pc, #72]	; (80060e4 <HAL_RCC_ClockConfig+0x1bc>)
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	490e      	ldr	r1, [pc, #56]	; (80060e4 <HAL_RCC_ClockConfig+0x1bc>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80060ae:	f000 f855 	bl	800615c <HAL_RCC_GetSysClockFreq>
 80060b2:	4602      	mov	r2, r0
 80060b4:	4b0b      	ldr	r3, [pc, #44]	; (80060e4 <HAL_RCC_ClockConfig+0x1bc>)
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	091b      	lsrs	r3, r3, #4
 80060ba:	f003 030f 	and.w	r3, r3, #15
 80060be:	490a      	ldr	r1, [pc, #40]	; (80060e8 <HAL_RCC_ClockConfig+0x1c0>)
 80060c0:	5ccb      	ldrb	r3, [r1, r3]
 80060c2:	fa22 f303 	lsr.w	r3, r2, r3
 80060c6:	4a09      	ldr	r2, [pc, #36]	; (80060ec <HAL_RCC_ClockConfig+0x1c4>)
 80060c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80060ca:	4b09      	ldr	r3, [pc, #36]	; (80060f0 <HAL_RCC_ClockConfig+0x1c8>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7fd f882 	bl	80031d8 <HAL_InitTick>

  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	40023c00 	.word	0x40023c00
 80060e4:	40023800 	.word	0x40023800
 80060e8:	08009278 	.word	0x08009278
 80060ec:	20000064 	.word	0x20000064
 80060f0:	20000068 	.word	0x20000068

080060f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060f4:	b480      	push	{r7}
 80060f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060f8:	4b03      	ldr	r3, [pc, #12]	; (8006108 <HAL_RCC_GetHCLKFreq+0x14>)
 80060fa:	681b      	ldr	r3, [r3, #0]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	20000064 	.word	0x20000064

0800610c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006110:	f7ff fff0 	bl	80060f4 <HAL_RCC_GetHCLKFreq>
 8006114:	4602      	mov	r2, r0
 8006116:	4b05      	ldr	r3, [pc, #20]	; (800612c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	0a9b      	lsrs	r3, r3, #10
 800611c:	f003 0307 	and.w	r3, r3, #7
 8006120:	4903      	ldr	r1, [pc, #12]	; (8006130 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006122:	5ccb      	ldrb	r3, [r1, r3]
 8006124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006128:	4618      	mov	r0, r3
 800612a:	bd80      	pop	{r7, pc}
 800612c:	40023800 	.word	0x40023800
 8006130:	08009288 	.word	0x08009288

08006134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006138:	f7ff ffdc 	bl	80060f4 <HAL_RCC_GetHCLKFreq>
 800613c:	4602      	mov	r2, r0
 800613e:	4b05      	ldr	r3, [pc, #20]	; (8006154 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	0b5b      	lsrs	r3, r3, #13
 8006144:	f003 0307 	and.w	r3, r3, #7
 8006148:	4903      	ldr	r1, [pc, #12]	; (8006158 <HAL_RCC_GetPCLK2Freq+0x24>)
 800614a:	5ccb      	ldrb	r3, [r1, r3]
 800614c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006150:	4618      	mov	r0, r3
 8006152:	bd80      	pop	{r7, pc}
 8006154:	40023800 	.word	0x40023800
 8006158:	08009288 	.word	0x08009288

0800615c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800615c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006160:	b0ae      	sub	sp, #184	; 0xb8
 8006162:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006164:	2300      	movs	r3, #0
 8006166:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800616a:	2300      	movs	r3, #0
 800616c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8006170:	2300      	movs	r3, #0
 8006172:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800617c:	2300      	movs	r3, #0
 800617e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006182:	4bcb      	ldr	r3, [pc, #812]	; (80064b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f003 030c 	and.w	r3, r3, #12
 800618a:	2b0c      	cmp	r3, #12
 800618c:	f200 8206 	bhi.w	800659c <HAL_RCC_GetSysClockFreq+0x440>
 8006190:	a201      	add	r2, pc, #4	; (adr r2, 8006198 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006196:	bf00      	nop
 8006198:	080061cd 	.word	0x080061cd
 800619c:	0800659d 	.word	0x0800659d
 80061a0:	0800659d 	.word	0x0800659d
 80061a4:	0800659d 	.word	0x0800659d
 80061a8:	080061d5 	.word	0x080061d5
 80061ac:	0800659d 	.word	0x0800659d
 80061b0:	0800659d 	.word	0x0800659d
 80061b4:	0800659d 	.word	0x0800659d
 80061b8:	080061dd 	.word	0x080061dd
 80061bc:	0800659d 	.word	0x0800659d
 80061c0:	0800659d 	.word	0x0800659d
 80061c4:	0800659d 	.word	0x0800659d
 80061c8:	080063cd 	.word	0x080063cd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061cc:	4bb9      	ldr	r3, [pc, #740]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x358>)
 80061ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80061d2:	e1e7      	b.n	80065a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061d4:	4bb8      	ldr	r3, [pc, #736]	; (80064b8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80061d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80061da:	e1e3      	b.n	80065a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061dc:	4bb4      	ldr	r3, [pc, #720]	; (80064b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80061e8:	4bb1      	ldr	r3, [pc, #708]	; (80064b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d071      	beq.n	80062d8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061f4:	4bae      	ldr	r3, [pc, #696]	; (80064b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	099b      	lsrs	r3, r3, #6
 80061fa:	2200      	movs	r2, #0
 80061fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006200:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006204:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800620c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006210:	2300      	movs	r3, #0
 8006212:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006216:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800621a:	4622      	mov	r2, r4
 800621c:	462b      	mov	r3, r5
 800621e:	f04f 0000 	mov.w	r0, #0
 8006222:	f04f 0100 	mov.w	r1, #0
 8006226:	0159      	lsls	r1, r3, #5
 8006228:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800622c:	0150      	lsls	r0, r2, #5
 800622e:	4602      	mov	r2, r0
 8006230:	460b      	mov	r3, r1
 8006232:	4621      	mov	r1, r4
 8006234:	1a51      	subs	r1, r2, r1
 8006236:	6439      	str	r1, [r7, #64]	; 0x40
 8006238:	4629      	mov	r1, r5
 800623a:	eb63 0301 	sbc.w	r3, r3, r1
 800623e:	647b      	str	r3, [r7, #68]	; 0x44
 8006240:	f04f 0200 	mov.w	r2, #0
 8006244:	f04f 0300 	mov.w	r3, #0
 8006248:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800624c:	4649      	mov	r1, r9
 800624e:	018b      	lsls	r3, r1, #6
 8006250:	4641      	mov	r1, r8
 8006252:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006256:	4641      	mov	r1, r8
 8006258:	018a      	lsls	r2, r1, #6
 800625a:	4641      	mov	r1, r8
 800625c:	1a51      	subs	r1, r2, r1
 800625e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006260:	4649      	mov	r1, r9
 8006262:	eb63 0301 	sbc.w	r3, r3, r1
 8006266:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006268:	f04f 0200 	mov.w	r2, #0
 800626c:	f04f 0300 	mov.w	r3, #0
 8006270:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8006274:	4649      	mov	r1, r9
 8006276:	00cb      	lsls	r3, r1, #3
 8006278:	4641      	mov	r1, r8
 800627a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800627e:	4641      	mov	r1, r8
 8006280:	00ca      	lsls	r2, r1, #3
 8006282:	4610      	mov	r0, r2
 8006284:	4619      	mov	r1, r3
 8006286:	4603      	mov	r3, r0
 8006288:	4622      	mov	r2, r4
 800628a:	189b      	adds	r3, r3, r2
 800628c:	633b      	str	r3, [r7, #48]	; 0x30
 800628e:	462b      	mov	r3, r5
 8006290:	460a      	mov	r2, r1
 8006292:	eb42 0303 	adc.w	r3, r2, r3
 8006296:	637b      	str	r3, [r7, #52]	; 0x34
 8006298:	f04f 0200 	mov.w	r2, #0
 800629c:	f04f 0300 	mov.w	r3, #0
 80062a0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80062a4:	4629      	mov	r1, r5
 80062a6:	024b      	lsls	r3, r1, #9
 80062a8:	4621      	mov	r1, r4
 80062aa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80062ae:	4621      	mov	r1, r4
 80062b0:	024a      	lsls	r2, r1, #9
 80062b2:	4610      	mov	r0, r2
 80062b4:	4619      	mov	r1, r3
 80062b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062ba:	2200      	movs	r2, #0
 80062bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80062c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80062c4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80062c8:	f7f9 fff2 	bl	80002b0 <__aeabi_uldivmod>
 80062cc:	4602      	mov	r2, r0
 80062ce:	460b      	mov	r3, r1
 80062d0:	4613      	mov	r3, r2
 80062d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062d6:	e067      	b.n	80063a8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062d8:	4b75      	ldr	r3, [pc, #468]	; (80064b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	099b      	lsrs	r3, r3, #6
 80062de:	2200      	movs	r2, #0
 80062e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80062e4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80062e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80062ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80062f2:	2300      	movs	r3, #0
 80062f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80062f6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80062fa:	4622      	mov	r2, r4
 80062fc:	462b      	mov	r3, r5
 80062fe:	f04f 0000 	mov.w	r0, #0
 8006302:	f04f 0100 	mov.w	r1, #0
 8006306:	0159      	lsls	r1, r3, #5
 8006308:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800630c:	0150      	lsls	r0, r2, #5
 800630e:	4602      	mov	r2, r0
 8006310:	460b      	mov	r3, r1
 8006312:	4621      	mov	r1, r4
 8006314:	1a51      	subs	r1, r2, r1
 8006316:	62b9      	str	r1, [r7, #40]	; 0x28
 8006318:	4629      	mov	r1, r5
 800631a:	eb63 0301 	sbc.w	r3, r3, r1
 800631e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006320:	f04f 0200 	mov.w	r2, #0
 8006324:	f04f 0300 	mov.w	r3, #0
 8006328:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800632c:	4649      	mov	r1, r9
 800632e:	018b      	lsls	r3, r1, #6
 8006330:	4641      	mov	r1, r8
 8006332:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006336:	4641      	mov	r1, r8
 8006338:	018a      	lsls	r2, r1, #6
 800633a:	4641      	mov	r1, r8
 800633c:	ebb2 0a01 	subs.w	sl, r2, r1
 8006340:	4649      	mov	r1, r9
 8006342:	eb63 0b01 	sbc.w	fp, r3, r1
 8006346:	f04f 0200 	mov.w	r2, #0
 800634a:	f04f 0300 	mov.w	r3, #0
 800634e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006352:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006356:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800635a:	4692      	mov	sl, r2
 800635c:	469b      	mov	fp, r3
 800635e:	4623      	mov	r3, r4
 8006360:	eb1a 0303 	adds.w	r3, sl, r3
 8006364:	623b      	str	r3, [r7, #32]
 8006366:	462b      	mov	r3, r5
 8006368:	eb4b 0303 	adc.w	r3, fp, r3
 800636c:	627b      	str	r3, [r7, #36]	; 0x24
 800636e:	f04f 0200 	mov.w	r2, #0
 8006372:	f04f 0300 	mov.w	r3, #0
 8006376:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800637a:	4629      	mov	r1, r5
 800637c:	028b      	lsls	r3, r1, #10
 800637e:	4621      	mov	r1, r4
 8006380:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006384:	4621      	mov	r1, r4
 8006386:	028a      	lsls	r2, r1, #10
 8006388:	4610      	mov	r0, r2
 800638a:	4619      	mov	r1, r3
 800638c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006390:	2200      	movs	r2, #0
 8006392:	673b      	str	r3, [r7, #112]	; 0x70
 8006394:	677a      	str	r2, [r7, #116]	; 0x74
 8006396:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800639a:	f7f9 ff89 	bl	80002b0 <__aeabi_uldivmod>
 800639e:	4602      	mov	r2, r0
 80063a0:	460b      	mov	r3, r1
 80063a2:	4613      	mov	r3, r2
 80063a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80063a8:	4b41      	ldr	r3, [pc, #260]	; (80064b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	0c1b      	lsrs	r3, r3, #16
 80063ae:	f003 0303 	and.w	r3, r3, #3
 80063b2:	3301      	adds	r3, #1
 80063b4:	005b      	lsls	r3, r3, #1
 80063b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80063ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80063be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80063c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80063ca:	e0eb      	b.n	80065a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063cc:	4b38      	ldr	r3, [pc, #224]	; (80064b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063d8:	4b35      	ldr	r3, [pc, #212]	; (80064b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d06b      	beq.n	80064bc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063e4:	4b32      	ldr	r3, [pc, #200]	; (80064b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	099b      	lsrs	r3, r3, #6
 80063ea:	2200      	movs	r2, #0
 80063ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80063ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80063f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063f6:	663b      	str	r3, [r7, #96]	; 0x60
 80063f8:	2300      	movs	r3, #0
 80063fa:	667b      	str	r3, [r7, #100]	; 0x64
 80063fc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006400:	4622      	mov	r2, r4
 8006402:	462b      	mov	r3, r5
 8006404:	f04f 0000 	mov.w	r0, #0
 8006408:	f04f 0100 	mov.w	r1, #0
 800640c:	0159      	lsls	r1, r3, #5
 800640e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006412:	0150      	lsls	r0, r2, #5
 8006414:	4602      	mov	r2, r0
 8006416:	460b      	mov	r3, r1
 8006418:	4621      	mov	r1, r4
 800641a:	1a51      	subs	r1, r2, r1
 800641c:	61b9      	str	r1, [r7, #24]
 800641e:	4629      	mov	r1, r5
 8006420:	eb63 0301 	sbc.w	r3, r3, r1
 8006424:	61fb      	str	r3, [r7, #28]
 8006426:	f04f 0200 	mov.w	r2, #0
 800642a:	f04f 0300 	mov.w	r3, #0
 800642e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006432:	4659      	mov	r1, fp
 8006434:	018b      	lsls	r3, r1, #6
 8006436:	4651      	mov	r1, sl
 8006438:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800643c:	4651      	mov	r1, sl
 800643e:	018a      	lsls	r2, r1, #6
 8006440:	4651      	mov	r1, sl
 8006442:	ebb2 0801 	subs.w	r8, r2, r1
 8006446:	4659      	mov	r1, fp
 8006448:	eb63 0901 	sbc.w	r9, r3, r1
 800644c:	f04f 0200 	mov.w	r2, #0
 8006450:	f04f 0300 	mov.w	r3, #0
 8006454:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006458:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800645c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006460:	4690      	mov	r8, r2
 8006462:	4699      	mov	r9, r3
 8006464:	4623      	mov	r3, r4
 8006466:	eb18 0303 	adds.w	r3, r8, r3
 800646a:	613b      	str	r3, [r7, #16]
 800646c:	462b      	mov	r3, r5
 800646e:	eb49 0303 	adc.w	r3, r9, r3
 8006472:	617b      	str	r3, [r7, #20]
 8006474:	f04f 0200 	mov.w	r2, #0
 8006478:	f04f 0300 	mov.w	r3, #0
 800647c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006480:	4629      	mov	r1, r5
 8006482:	024b      	lsls	r3, r1, #9
 8006484:	4621      	mov	r1, r4
 8006486:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800648a:	4621      	mov	r1, r4
 800648c:	024a      	lsls	r2, r1, #9
 800648e:	4610      	mov	r0, r2
 8006490:	4619      	mov	r1, r3
 8006492:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006496:	2200      	movs	r2, #0
 8006498:	65bb      	str	r3, [r7, #88]	; 0x58
 800649a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800649c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80064a0:	f7f9 ff06 	bl	80002b0 <__aeabi_uldivmod>
 80064a4:	4602      	mov	r2, r0
 80064a6:	460b      	mov	r3, r1
 80064a8:	4613      	mov	r3, r2
 80064aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064ae:	e065      	b.n	800657c <HAL_RCC_GetSysClockFreq+0x420>
 80064b0:	40023800 	.word	0x40023800
 80064b4:	00f42400 	.word	0x00f42400
 80064b8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064bc:	4b3d      	ldr	r3, [pc, #244]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x458>)
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	099b      	lsrs	r3, r3, #6
 80064c2:	2200      	movs	r2, #0
 80064c4:	4618      	mov	r0, r3
 80064c6:	4611      	mov	r1, r2
 80064c8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80064cc:	653b      	str	r3, [r7, #80]	; 0x50
 80064ce:	2300      	movs	r3, #0
 80064d0:	657b      	str	r3, [r7, #84]	; 0x54
 80064d2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80064d6:	4642      	mov	r2, r8
 80064d8:	464b      	mov	r3, r9
 80064da:	f04f 0000 	mov.w	r0, #0
 80064de:	f04f 0100 	mov.w	r1, #0
 80064e2:	0159      	lsls	r1, r3, #5
 80064e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064e8:	0150      	lsls	r0, r2, #5
 80064ea:	4602      	mov	r2, r0
 80064ec:	460b      	mov	r3, r1
 80064ee:	4641      	mov	r1, r8
 80064f0:	1a51      	subs	r1, r2, r1
 80064f2:	60b9      	str	r1, [r7, #8]
 80064f4:	4649      	mov	r1, r9
 80064f6:	eb63 0301 	sbc.w	r3, r3, r1
 80064fa:	60fb      	str	r3, [r7, #12]
 80064fc:	f04f 0200 	mov.w	r2, #0
 8006500:	f04f 0300 	mov.w	r3, #0
 8006504:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006508:	4659      	mov	r1, fp
 800650a:	018b      	lsls	r3, r1, #6
 800650c:	4651      	mov	r1, sl
 800650e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006512:	4651      	mov	r1, sl
 8006514:	018a      	lsls	r2, r1, #6
 8006516:	4651      	mov	r1, sl
 8006518:	1a54      	subs	r4, r2, r1
 800651a:	4659      	mov	r1, fp
 800651c:	eb63 0501 	sbc.w	r5, r3, r1
 8006520:	f04f 0200 	mov.w	r2, #0
 8006524:	f04f 0300 	mov.w	r3, #0
 8006528:	00eb      	lsls	r3, r5, #3
 800652a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800652e:	00e2      	lsls	r2, r4, #3
 8006530:	4614      	mov	r4, r2
 8006532:	461d      	mov	r5, r3
 8006534:	4643      	mov	r3, r8
 8006536:	18e3      	adds	r3, r4, r3
 8006538:	603b      	str	r3, [r7, #0]
 800653a:	464b      	mov	r3, r9
 800653c:	eb45 0303 	adc.w	r3, r5, r3
 8006540:	607b      	str	r3, [r7, #4]
 8006542:	f04f 0200 	mov.w	r2, #0
 8006546:	f04f 0300 	mov.w	r3, #0
 800654a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800654e:	4629      	mov	r1, r5
 8006550:	028b      	lsls	r3, r1, #10
 8006552:	4621      	mov	r1, r4
 8006554:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006558:	4621      	mov	r1, r4
 800655a:	028a      	lsls	r2, r1, #10
 800655c:	4610      	mov	r0, r2
 800655e:	4619      	mov	r1, r3
 8006560:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006564:	2200      	movs	r2, #0
 8006566:	64bb      	str	r3, [r7, #72]	; 0x48
 8006568:	64fa      	str	r2, [r7, #76]	; 0x4c
 800656a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800656e:	f7f9 fe9f 	bl	80002b0 <__aeabi_uldivmod>
 8006572:	4602      	mov	r2, r0
 8006574:	460b      	mov	r3, r1
 8006576:	4613      	mov	r3, r2
 8006578:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800657c:	4b0d      	ldr	r3, [pc, #52]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x458>)
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	0f1b      	lsrs	r3, r3, #28
 8006582:	f003 0307 	and.w	r3, r3, #7
 8006586:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800658a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800658e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006592:	fbb2 f3f3 	udiv	r3, r2, r3
 8006596:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800659a:	e003      	b.n	80065a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800659c:	4b06      	ldr	r3, [pc, #24]	; (80065b8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800659e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80065a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	37b8      	adds	r7, #184	; 0xb8
 80065ac:	46bd      	mov	sp, r7
 80065ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065b2:	bf00      	nop
 80065b4:	40023800 	.word	0x40023800
 80065b8:	00f42400 	.word	0x00f42400

080065bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e28d      	b.n	8006aea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f000 8083 	beq.w	80066e2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80065dc:	4b94      	ldr	r3, [pc, #592]	; (8006830 <HAL_RCC_OscConfig+0x274>)
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	f003 030c 	and.w	r3, r3, #12
 80065e4:	2b04      	cmp	r3, #4
 80065e6:	d019      	beq.n	800661c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80065e8:	4b91      	ldr	r3, [pc, #580]	; (8006830 <HAL_RCC_OscConfig+0x274>)
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80065f0:	2b08      	cmp	r3, #8
 80065f2:	d106      	bne.n	8006602 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80065f4:	4b8e      	ldr	r3, [pc, #568]	; (8006830 <HAL_RCC_OscConfig+0x274>)
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006600:	d00c      	beq.n	800661c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006602:	4b8b      	ldr	r3, [pc, #556]	; (8006830 <HAL_RCC_OscConfig+0x274>)
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800660a:	2b0c      	cmp	r3, #12
 800660c:	d112      	bne.n	8006634 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800660e:	4b88      	ldr	r3, [pc, #544]	; (8006830 <HAL_RCC_OscConfig+0x274>)
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006616:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800661a:	d10b      	bne.n	8006634 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800661c:	4b84      	ldr	r3, [pc, #528]	; (8006830 <HAL_RCC_OscConfig+0x274>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d05b      	beq.n	80066e0 <HAL_RCC_OscConfig+0x124>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d157      	bne.n	80066e0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e25a      	b.n	8006aea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800663c:	d106      	bne.n	800664c <HAL_RCC_OscConfig+0x90>
 800663e:	4b7c      	ldr	r3, [pc, #496]	; (8006830 <HAL_RCC_OscConfig+0x274>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a7b      	ldr	r2, [pc, #492]	; (8006830 <HAL_RCC_OscConfig+0x274>)
 8006644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006648:	6013      	str	r3, [r2, #0]
 800664a:	e01d      	b.n	8006688 <HAL_RCC_OscConfig+0xcc>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006654:	d10c      	bne.n	8006670 <HAL_RCC_OscConfig+0xb4>
 8006656:	4b76      	ldr	r3, [pc, #472]	; (8006830 <HAL_RCC_OscConfig+0x274>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a75      	ldr	r2, [pc, #468]	; (8006830 <HAL_RCC_OscConfig+0x274>)
 800665c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006660:	6013      	str	r3, [r2, #0]
 8006662:	4b73      	ldr	r3, [pc, #460]	; (8006830 <HAL_RCC_OscConfig+0x274>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a72      	ldr	r2, [pc, #456]	; (8006830 <HAL_RCC_OscConfig+0x274>)
 8006668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800666c:	6013      	str	r3, [r2, #0]
 800666e:	e00b      	b.n	8006688 <HAL_RCC_OscConfig+0xcc>
 8006670:	4b6f      	ldr	r3, [pc, #444]	; (8006830 <HAL_RCC_OscConfig+0x274>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a6e      	ldr	r2, [pc, #440]	; (8006830 <HAL_RCC_OscConfig+0x274>)
 8006676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800667a:	6013      	str	r3, [r2, #0]
 800667c:	4b6c      	ldr	r3, [pc, #432]	; (8006830 <HAL_RCC_OscConfig+0x274>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a6b      	ldr	r2, [pc, #428]	; (8006830 <HAL_RCC_OscConfig+0x274>)
 8006682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006686:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d013      	beq.n	80066b8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006690:	f7fc fde6 	bl	8003260 <HAL_GetTick>
 8006694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006696:	e008      	b.n	80066aa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006698:	f7fc fde2 	bl	8003260 <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	2b64      	cmp	r3, #100	; 0x64
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e21f      	b.n	8006aea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066aa:	4b61      	ldr	r3, [pc, #388]	; (8006830 <HAL_RCC_OscConfig+0x274>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d0f0      	beq.n	8006698 <HAL_RCC_OscConfig+0xdc>
 80066b6:	e014      	b.n	80066e2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b8:	f7fc fdd2 	bl	8003260 <HAL_GetTick>
 80066bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066be:	e008      	b.n	80066d2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066c0:	f7fc fdce 	bl	8003260 <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	2b64      	cmp	r3, #100	; 0x64
 80066cc:	d901      	bls.n	80066d2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e20b      	b.n	8006aea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066d2:	4b57      	ldr	r3, [pc, #348]	; (8006830 <HAL_RCC_OscConfig+0x274>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1f0      	bne.n	80066c0 <HAL_RCC_OscConfig+0x104>
 80066de:	e000      	b.n	80066e2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d06f      	beq.n	80067ce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80066ee:	4b50      	ldr	r3, [pc, #320]	; (8006830 <HAL_RCC_OscConfig+0x274>)
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f003 030c 	and.w	r3, r3, #12
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d017      	beq.n	800672a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80066fa:	4b4d      	ldr	r3, [pc, #308]	; (8006830 <HAL_RCC_OscConfig+0x274>)
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006702:	2b08      	cmp	r3, #8
 8006704:	d105      	bne.n	8006712 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006706:	4b4a      	ldr	r3, [pc, #296]	; (8006830 <HAL_RCC_OscConfig+0x274>)
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00b      	beq.n	800672a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006712:	4b47      	ldr	r3, [pc, #284]	; (8006830 <HAL_RCC_OscConfig+0x274>)
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800671a:	2b0c      	cmp	r3, #12
 800671c:	d11c      	bne.n	8006758 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800671e:	4b44      	ldr	r3, [pc, #272]	; (8006830 <HAL_RCC_OscConfig+0x274>)
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d116      	bne.n	8006758 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800672a:	4b41      	ldr	r3, [pc, #260]	; (8006830 <HAL_RCC_OscConfig+0x274>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 0302 	and.w	r3, r3, #2
 8006732:	2b00      	cmp	r3, #0
 8006734:	d005      	beq.n	8006742 <HAL_RCC_OscConfig+0x186>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	2b01      	cmp	r3, #1
 800673c:	d001      	beq.n	8006742 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e1d3      	b.n	8006aea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006742:	4b3b      	ldr	r3, [pc, #236]	; (8006830 <HAL_RCC_OscConfig+0x274>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	00db      	lsls	r3, r3, #3
 8006750:	4937      	ldr	r1, [pc, #220]	; (8006830 <HAL_RCC_OscConfig+0x274>)
 8006752:	4313      	orrs	r3, r2
 8006754:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006756:	e03a      	b.n	80067ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d020      	beq.n	80067a2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006760:	4b34      	ldr	r3, [pc, #208]	; (8006834 <HAL_RCC_OscConfig+0x278>)
 8006762:	2201      	movs	r2, #1
 8006764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006766:	f7fc fd7b 	bl	8003260 <HAL_GetTick>
 800676a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800676c:	e008      	b.n	8006780 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800676e:	f7fc fd77 	bl	8003260 <HAL_GetTick>
 8006772:	4602      	mov	r2, r0
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	2b02      	cmp	r3, #2
 800677a:	d901      	bls.n	8006780 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	e1b4      	b.n	8006aea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006780:	4b2b      	ldr	r3, [pc, #172]	; (8006830 <HAL_RCC_OscConfig+0x274>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0302 	and.w	r3, r3, #2
 8006788:	2b00      	cmp	r3, #0
 800678a:	d0f0      	beq.n	800676e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800678c:	4b28      	ldr	r3, [pc, #160]	; (8006830 <HAL_RCC_OscConfig+0x274>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	00db      	lsls	r3, r3, #3
 800679a:	4925      	ldr	r1, [pc, #148]	; (8006830 <HAL_RCC_OscConfig+0x274>)
 800679c:	4313      	orrs	r3, r2
 800679e:	600b      	str	r3, [r1, #0]
 80067a0:	e015      	b.n	80067ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067a2:	4b24      	ldr	r3, [pc, #144]	; (8006834 <HAL_RCC_OscConfig+0x278>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a8:	f7fc fd5a 	bl	8003260 <HAL_GetTick>
 80067ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067ae:	e008      	b.n	80067c2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067b0:	f7fc fd56 	bl	8003260 <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d901      	bls.n	80067c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e193      	b.n	8006aea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067c2:	4b1b      	ldr	r3, [pc, #108]	; (8006830 <HAL_RCC_OscConfig+0x274>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0302 	and.w	r3, r3, #2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1f0      	bne.n	80067b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0308 	and.w	r3, r3, #8
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d036      	beq.n	8006848 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d016      	beq.n	8006810 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067e2:	4b15      	ldr	r3, [pc, #84]	; (8006838 <HAL_RCC_OscConfig+0x27c>)
 80067e4:	2201      	movs	r2, #1
 80067e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067e8:	f7fc fd3a 	bl	8003260 <HAL_GetTick>
 80067ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067ee:	e008      	b.n	8006802 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067f0:	f7fc fd36 	bl	8003260 <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d901      	bls.n	8006802 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e173      	b.n	8006aea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006802:	4b0b      	ldr	r3, [pc, #44]	; (8006830 <HAL_RCC_OscConfig+0x274>)
 8006804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d0f0      	beq.n	80067f0 <HAL_RCC_OscConfig+0x234>
 800680e:	e01b      	b.n	8006848 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006810:	4b09      	ldr	r3, [pc, #36]	; (8006838 <HAL_RCC_OscConfig+0x27c>)
 8006812:	2200      	movs	r2, #0
 8006814:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006816:	f7fc fd23 	bl	8003260 <HAL_GetTick>
 800681a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800681c:	e00e      	b.n	800683c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800681e:	f7fc fd1f 	bl	8003260 <HAL_GetTick>
 8006822:	4602      	mov	r2, r0
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	2b02      	cmp	r3, #2
 800682a:	d907      	bls.n	800683c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800682c:	2303      	movs	r3, #3
 800682e:	e15c      	b.n	8006aea <HAL_RCC_OscConfig+0x52e>
 8006830:	40023800 	.word	0x40023800
 8006834:	42470000 	.word	0x42470000
 8006838:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800683c:	4b8a      	ldr	r3, [pc, #552]	; (8006a68 <HAL_RCC_OscConfig+0x4ac>)
 800683e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006840:	f003 0302 	and.w	r3, r3, #2
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1ea      	bne.n	800681e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0304 	and.w	r3, r3, #4
 8006850:	2b00      	cmp	r3, #0
 8006852:	f000 8097 	beq.w	8006984 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006856:	2300      	movs	r3, #0
 8006858:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800685a:	4b83      	ldr	r3, [pc, #524]	; (8006a68 <HAL_RCC_OscConfig+0x4ac>)
 800685c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10f      	bne.n	8006886 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006866:	2300      	movs	r3, #0
 8006868:	60bb      	str	r3, [r7, #8]
 800686a:	4b7f      	ldr	r3, [pc, #508]	; (8006a68 <HAL_RCC_OscConfig+0x4ac>)
 800686c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686e:	4a7e      	ldr	r2, [pc, #504]	; (8006a68 <HAL_RCC_OscConfig+0x4ac>)
 8006870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006874:	6413      	str	r3, [r2, #64]	; 0x40
 8006876:	4b7c      	ldr	r3, [pc, #496]	; (8006a68 <HAL_RCC_OscConfig+0x4ac>)
 8006878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800687e:	60bb      	str	r3, [r7, #8]
 8006880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006882:	2301      	movs	r3, #1
 8006884:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006886:	4b79      	ldr	r3, [pc, #484]	; (8006a6c <HAL_RCC_OscConfig+0x4b0>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800688e:	2b00      	cmp	r3, #0
 8006890:	d118      	bne.n	80068c4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006892:	4b76      	ldr	r3, [pc, #472]	; (8006a6c <HAL_RCC_OscConfig+0x4b0>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a75      	ldr	r2, [pc, #468]	; (8006a6c <HAL_RCC_OscConfig+0x4b0>)
 8006898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800689c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800689e:	f7fc fcdf 	bl	8003260 <HAL_GetTick>
 80068a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068a4:	e008      	b.n	80068b8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068a6:	f7fc fcdb 	bl	8003260 <HAL_GetTick>
 80068aa:	4602      	mov	r2, r0
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d901      	bls.n	80068b8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e118      	b.n	8006aea <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068b8:	4b6c      	ldr	r3, [pc, #432]	; (8006a6c <HAL_RCC_OscConfig+0x4b0>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d0f0      	beq.n	80068a6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d106      	bne.n	80068da <HAL_RCC_OscConfig+0x31e>
 80068cc:	4b66      	ldr	r3, [pc, #408]	; (8006a68 <HAL_RCC_OscConfig+0x4ac>)
 80068ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068d0:	4a65      	ldr	r2, [pc, #404]	; (8006a68 <HAL_RCC_OscConfig+0x4ac>)
 80068d2:	f043 0301 	orr.w	r3, r3, #1
 80068d6:	6713      	str	r3, [r2, #112]	; 0x70
 80068d8:	e01c      	b.n	8006914 <HAL_RCC_OscConfig+0x358>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	2b05      	cmp	r3, #5
 80068e0:	d10c      	bne.n	80068fc <HAL_RCC_OscConfig+0x340>
 80068e2:	4b61      	ldr	r3, [pc, #388]	; (8006a68 <HAL_RCC_OscConfig+0x4ac>)
 80068e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e6:	4a60      	ldr	r2, [pc, #384]	; (8006a68 <HAL_RCC_OscConfig+0x4ac>)
 80068e8:	f043 0304 	orr.w	r3, r3, #4
 80068ec:	6713      	str	r3, [r2, #112]	; 0x70
 80068ee:	4b5e      	ldr	r3, [pc, #376]	; (8006a68 <HAL_RCC_OscConfig+0x4ac>)
 80068f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f2:	4a5d      	ldr	r2, [pc, #372]	; (8006a68 <HAL_RCC_OscConfig+0x4ac>)
 80068f4:	f043 0301 	orr.w	r3, r3, #1
 80068f8:	6713      	str	r3, [r2, #112]	; 0x70
 80068fa:	e00b      	b.n	8006914 <HAL_RCC_OscConfig+0x358>
 80068fc:	4b5a      	ldr	r3, [pc, #360]	; (8006a68 <HAL_RCC_OscConfig+0x4ac>)
 80068fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006900:	4a59      	ldr	r2, [pc, #356]	; (8006a68 <HAL_RCC_OscConfig+0x4ac>)
 8006902:	f023 0301 	bic.w	r3, r3, #1
 8006906:	6713      	str	r3, [r2, #112]	; 0x70
 8006908:	4b57      	ldr	r3, [pc, #348]	; (8006a68 <HAL_RCC_OscConfig+0x4ac>)
 800690a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800690c:	4a56      	ldr	r2, [pc, #344]	; (8006a68 <HAL_RCC_OscConfig+0x4ac>)
 800690e:	f023 0304 	bic.w	r3, r3, #4
 8006912:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d015      	beq.n	8006948 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800691c:	f7fc fca0 	bl	8003260 <HAL_GetTick>
 8006920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006922:	e00a      	b.n	800693a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006924:	f7fc fc9c 	bl	8003260 <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006932:	4293      	cmp	r3, r2
 8006934:	d901      	bls.n	800693a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e0d7      	b.n	8006aea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800693a:	4b4b      	ldr	r3, [pc, #300]	; (8006a68 <HAL_RCC_OscConfig+0x4ac>)
 800693c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800693e:	f003 0302 	and.w	r3, r3, #2
 8006942:	2b00      	cmp	r3, #0
 8006944:	d0ee      	beq.n	8006924 <HAL_RCC_OscConfig+0x368>
 8006946:	e014      	b.n	8006972 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006948:	f7fc fc8a 	bl	8003260 <HAL_GetTick>
 800694c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800694e:	e00a      	b.n	8006966 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006950:	f7fc fc86 	bl	8003260 <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	f241 3288 	movw	r2, #5000	; 0x1388
 800695e:	4293      	cmp	r3, r2
 8006960:	d901      	bls.n	8006966 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e0c1      	b.n	8006aea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006966:	4b40      	ldr	r3, [pc, #256]	; (8006a68 <HAL_RCC_OscConfig+0x4ac>)
 8006968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800696a:	f003 0302 	and.w	r3, r3, #2
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1ee      	bne.n	8006950 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006972:	7dfb      	ldrb	r3, [r7, #23]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d105      	bne.n	8006984 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006978:	4b3b      	ldr	r3, [pc, #236]	; (8006a68 <HAL_RCC_OscConfig+0x4ac>)
 800697a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697c:	4a3a      	ldr	r2, [pc, #232]	; (8006a68 <HAL_RCC_OscConfig+0x4ac>)
 800697e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006982:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 80ad 	beq.w	8006ae8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800698e:	4b36      	ldr	r3, [pc, #216]	; (8006a68 <HAL_RCC_OscConfig+0x4ac>)
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f003 030c 	and.w	r3, r3, #12
 8006996:	2b08      	cmp	r3, #8
 8006998:	d060      	beq.n	8006a5c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d145      	bne.n	8006a2e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069a2:	4b33      	ldr	r3, [pc, #204]	; (8006a70 <HAL_RCC_OscConfig+0x4b4>)
 80069a4:	2200      	movs	r2, #0
 80069a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a8:	f7fc fc5a 	bl	8003260 <HAL_GetTick>
 80069ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069ae:	e008      	b.n	80069c2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069b0:	f7fc fc56 	bl	8003260 <HAL_GetTick>
 80069b4:	4602      	mov	r2, r0
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d901      	bls.n	80069c2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e093      	b.n	8006aea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069c2:	4b29      	ldr	r3, [pc, #164]	; (8006a68 <HAL_RCC_OscConfig+0x4ac>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1f0      	bne.n	80069b0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	69da      	ldr	r2, [r3, #28]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	431a      	orrs	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069dc:	019b      	lsls	r3, r3, #6
 80069de:	431a      	orrs	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e4:	085b      	lsrs	r3, r3, #1
 80069e6:	3b01      	subs	r3, #1
 80069e8:	041b      	lsls	r3, r3, #16
 80069ea:	431a      	orrs	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f0:	061b      	lsls	r3, r3, #24
 80069f2:	431a      	orrs	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f8:	071b      	lsls	r3, r3, #28
 80069fa:	491b      	ldr	r1, [pc, #108]	; (8006a68 <HAL_RCC_OscConfig+0x4ac>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a00:	4b1b      	ldr	r3, [pc, #108]	; (8006a70 <HAL_RCC_OscConfig+0x4b4>)
 8006a02:	2201      	movs	r2, #1
 8006a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a06:	f7fc fc2b 	bl	8003260 <HAL_GetTick>
 8006a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a0c:	e008      	b.n	8006a20 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a0e:	f7fc fc27 	bl	8003260 <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d901      	bls.n	8006a20 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e064      	b.n	8006aea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a20:	4b11      	ldr	r3, [pc, #68]	; (8006a68 <HAL_RCC_OscConfig+0x4ac>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d0f0      	beq.n	8006a0e <HAL_RCC_OscConfig+0x452>
 8006a2c:	e05c      	b.n	8006ae8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a2e:	4b10      	ldr	r3, [pc, #64]	; (8006a70 <HAL_RCC_OscConfig+0x4b4>)
 8006a30:	2200      	movs	r2, #0
 8006a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a34:	f7fc fc14 	bl	8003260 <HAL_GetTick>
 8006a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a3a:	e008      	b.n	8006a4e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a3c:	f7fc fc10 	bl	8003260 <HAL_GetTick>
 8006a40:	4602      	mov	r2, r0
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d901      	bls.n	8006a4e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e04d      	b.n	8006aea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a4e:	4b06      	ldr	r3, [pc, #24]	; (8006a68 <HAL_RCC_OscConfig+0x4ac>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1f0      	bne.n	8006a3c <HAL_RCC_OscConfig+0x480>
 8006a5a:	e045      	b.n	8006ae8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d107      	bne.n	8006a74 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e040      	b.n	8006aea <HAL_RCC_OscConfig+0x52e>
 8006a68:	40023800 	.word	0x40023800
 8006a6c:	40007000 	.word	0x40007000
 8006a70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a74:	4b1f      	ldr	r3, [pc, #124]	; (8006af4 <HAL_RCC_OscConfig+0x538>)
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d030      	beq.n	8006ae4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d129      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d122      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006aaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d119      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aba:	085b      	lsrs	r3, r3, #1
 8006abc:	3b01      	subs	r3, #1
 8006abe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d10f      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ace:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d107      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ade:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d001      	beq.n	8006ae8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e000      	b.n	8006aea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3718      	adds	r7, #24
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	40023800 	.word	0x40023800

08006af8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d101      	bne.n	8006b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e03f      	b.n	8006b8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d106      	bne.n	8006b24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f7fc f91e 	bl	8002d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2224      	movs	r2, #36	; 0x24
 8006b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68da      	ldr	r2, [r3, #12]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 ffcb 	bl	8007ad8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	691a      	ldr	r2, [r3, #16]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	695a      	ldr	r2, [r3, #20]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68da      	ldr	r2, [r3, #12]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2220      	movs	r2, #32
 8006b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b08a      	sub	sp, #40	; 0x28
 8006b96:	af02      	add	r7, sp, #8
 8006b98:	60f8      	str	r0, [r7, #12]
 8006b9a:	60b9      	str	r1, [r7, #8]
 8006b9c:	603b      	str	r3, [r7, #0]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b20      	cmp	r3, #32
 8006bb0:	d17c      	bne.n	8006cac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d002      	beq.n	8006bbe <HAL_UART_Transmit+0x2c>
 8006bb8:	88fb      	ldrh	r3, [r7, #6]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e075      	b.n	8006cae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d101      	bne.n	8006bd0 <HAL_UART_Transmit+0x3e>
 8006bcc:	2302      	movs	r3, #2
 8006bce:	e06e      	b.n	8006cae <HAL_UART_Transmit+0x11c>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2221      	movs	r2, #33	; 0x21
 8006be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006be6:	f7fc fb3b 	bl	8003260 <HAL_GetTick>
 8006bea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	88fa      	ldrh	r2, [r7, #6]
 8006bf0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	88fa      	ldrh	r2, [r7, #6]
 8006bf6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c00:	d108      	bne.n	8006c14 <HAL_UART_Transmit+0x82>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d104      	bne.n	8006c14 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	61bb      	str	r3, [r7, #24]
 8006c12:	e003      	b.n	8006c1c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006c24:	e02a      	b.n	8006c7c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	9300      	str	r3, [sp, #0]
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	2180      	movs	r1, #128	; 0x80
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f000 fc83 	bl	800753c <UART_WaitOnFlagUntilTimeout>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d001      	beq.n	8006c40 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e036      	b.n	8006cae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d10b      	bne.n	8006c5e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	881b      	ldrh	r3, [r3, #0]
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	3302      	adds	r3, #2
 8006c5a:	61bb      	str	r3, [r7, #24]
 8006c5c:	e007      	b.n	8006c6e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	781a      	ldrb	r2, [r3, #0]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	3b01      	subs	r3, #1
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1cf      	bne.n	8006c26 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	2140      	movs	r1, #64	; 0x40
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f000 fc53 	bl	800753c <UART_WaitOnFlagUntilTimeout>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d001      	beq.n	8006ca0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e006      	b.n	8006cae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2220      	movs	r2, #32
 8006ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	e000      	b.n	8006cae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006cac:	2302      	movs	r3, #2
  }
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3720      	adds	r7, #32
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b084      	sub	sp, #16
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	60f8      	str	r0, [r7, #12]
 8006cbe:	60b9      	str	r1, [r7, #8]
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	2b20      	cmp	r3, #32
 8006cce:	d11d      	bne.n	8006d0c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d002      	beq.n	8006cdc <HAL_UART_Receive_DMA+0x26>
 8006cd6:	88fb      	ldrh	r3, [r7, #6]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d101      	bne.n	8006ce0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e016      	b.n	8006d0e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d101      	bne.n	8006cee <HAL_UART_Receive_DMA+0x38>
 8006cea:	2302      	movs	r3, #2
 8006cec:	e00f      	b.n	8006d0e <HAL_UART_Receive_DMA+0x58>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006cfc:	88fb      	ldrh	r3, [r7, #6]
 8006cfe:	461a      	mov	r2, r3
 8006d00:	68b9      	ldr	r1, [r7, #8]
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f000 fc88 	bl	8007618 <UART_Start_Receive_DMA>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	e000      	b.n	8006d0e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006d0c:	2302      	movs	r3, #2
  }
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b08c      	sub	sp, #48	; 0x30
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	60f8      	str	r0, [r7, #12]
 8006d1e:	60b9      	str	r1, [r7, #8]
 8006d20:	4613      	mov	r3, r2
 8006d22:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b20      	cmp	r3, #32
 8006d2e:	d152      	bne.n	8006dd6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d002      	beq.n	8006d3c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006d36:	88fb      	ldrh	r3, [r7, #6]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d101      	bne.n	8006d40 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e04b      	b.n	8006dd8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d101      	bne.n	8006d4e <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	e044      	b.n	8006dd8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006d5c:	88fb      	ldrh	r3, [r7, #6]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	68b9      	ldr	r1, [r7, #8]
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	f000 fc58 	bl	8007618 <UART_Start_Receive_DMA>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006d6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d12c      	bne.n	8006dd0 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d125      	bne.n	8006dca <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d7e:	2300      	movs	r3, #0
 8006d80:	613b      	str	r3, [r7, #16]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	613b      	str	r3, [r7, #16]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	613b      	str	r3, [r7, #16]
 8006d92:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	330c      	adds	r3, #12
 8006d9a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	e853 3f00 	ldrex	r3, [r3]
 8006da2:	617b      	str	r3, [r7, #20]
   return(result);
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	f043 0310 	orr.w	r3, r3, #16
 8006daa:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	330c      	adds	r3, #12
 8006db2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006db4:	627a      	str	r2, [r7, #36]	; 0x24
 8006db6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db8:	6a39      	ldr	r1, [r7, #32]
 8006dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dbc:	e841 2300 	strex	r3, r2, [r1]
 8006dc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1e5      	bne.n	8006d94 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8006dc8:	e002      	b.n	8006dd0 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006dd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006dd4:	e000      	b.n	8006dd8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8006dd6:	2302      	movs	r3, #2
  }
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3730      	adds	r7, #48	; 0x30
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b0ba      	sub	sp, #232	; 0xe8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006e06:	2300      	movs	r3, #0
 8006e08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e16:	f003 030f 	and.w	r3, r3, #15
 8006e1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006e1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10f      	bne.n	8006e46 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e2a:	f003 0320 	and.w	r3, r3, #32
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d009      	beq.n	8006e46 <HAL_UART_IRQHandler+0x66>
 8006e32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e36:	f003 0320 	and.w	r3, r3, #32
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d003      	beq.n	8006e46 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 fd8f 	bl	8007962 <UART_Receive_IT>
      return;
 8006e44:	e256      	b.n	80072f4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006e46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f000 80de 	beq.w	800700c <HAL_UART_IRQHandler+0x22c>
 8006e50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e54:	f003 0301 	and.w	r3, r3, #1
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d106      	bne.n	8006e6a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e60:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f000 80d1 	beq.w	800700c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00b      	beq.n	8006e8e <HAL_UART_IRQHandler+0xae>
 8006e76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d005      	beq.n	8006e8e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e86:	f043 0201 	orr.w	r2, r3, #1
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e92:	f003 0304 	and.w	r3, r3, #4
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00b      	beq.n	8006eb2 <HAL_UART_IRQHandler+0xd2>
 8006e9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d005      	beq.n	8006eb2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eaa:	f043 0202 	orr.w	r2, r3, #2
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eb6:	f003 0302 	and.w	r3, r3, #2
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00b      	beq.n	8006ed6 <HAL_UART_IRQHandler+0xf6>
 8006ebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ec2:	f003 0301 	and.w	r3, r3, #1
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d005      	beq.n	8006ed6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ece:	f043 0204 	orr.w	r2, r3, #4
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eda:	f003 0308 	and.w	r3, r3, #8
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d011      	beq.n	8006f06 <HAL_UART_IRQHandler+0x126>
 8006ee2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ee6:	f003 0320 	and.w	r3, r3, #32
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d105      	bne.n	8006efa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006eee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ef2:	f003 0301 	and.w	r3, r3, #1
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d005      	beq.n	8006f06 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efe:	f043 0208 	orr.w	r2, r3, #8
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f000 81ed 	beq.w	80072ea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f14:	f003 0320 	and.w	r3, r3, #32
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d008      	beq.n	8006f2e <HAL_UART_IRQHandler+0x14e>
 8006f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f20:	f003 0320 	and.w	r3, r3, #32
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d002      	beq.n	8006f2e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 fd1a 	bl	8007962 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	695b      	ldr	r3, [r3, #20]
 8006f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f38:	2b40      	cmp	r3, #64	; 0x40
 8006f3a:	bf0c      	ite	eq
 8006f3c:	2301      	moveq	r3, #1
 8006f3e:	2300      	movne	r3, #0
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4a:	f003 0308 	and.w	r3, r3, #8
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d103      	bne.n	8006f5a <HAL_UART_IRQHandler+0x17a>
 8006f52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d04f      	beq.n	8006ffa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fc22 	bl	80077a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	695b      	ldr	r3, [r3, #20]
 8006f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f6a:	2b40      	cmp	r3, #64	; 0x40
 8006f6c:	d141      	bne.n	8006ff2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	3314      	adds	r3, #20
 8006f74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f7c:	e853 3f00 	ldrex	r3, [r3]
 8006f80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006f84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	3314      	adds	r3, #20
 8006f96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006f9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006f9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006fa6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006faa:	e841 2300 	strex	r3, r2, [r1]
 8006fae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006fb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1d9      	bne.n	8006f6e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d013      	beq.n	8006fea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc6:	4a7d      	ldr	r2, [pc, #500]	; (80071bc <HAL_UART_IRQHandler+0x3dc>)
 8006fc8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7fc fbfe 	bl	80037d0 <HAL_DMA_Abort_IT>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d016      	beq.n	8007008 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006fe4:	4610      	mov	r0, r2
 8006fe6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fe8:	e00e      	b.n	8007008 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f9a4 	bl	8007338 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ff0:	e00a      	b.n	8007008 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f9a0 	bl	8007338 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ff8:	e006      	b.n	8007008 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f99c 	bl	8007338 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007006:	e170      	b.n	80072ea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007008:	bf00      	nop
    return;
 800700a:	e16e      	b.n	80072ea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007010:	2b01      	cmp	r3, #1
 8007012:	f040 814a 	bne.w	80072aa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800701a:	f003 0310 	and.w	r3, r3, #16
 800701e:	2b00      	cmp	r3, #0
 8007020:	f000 8143 	beq.w	80072aa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007028:	f003 0310 	and.w	r3, r3, #16
 800702c:	2b00      	cmp	r3, #0
 800702e:	f000 813c 	beq.w	80072aa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007032:	2300      	movs	r3, #0
 8007034:	60bb      	str	r3, [r7, #8]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	60bb      	str	r3, [r7, #8]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	60bb      	str	r3, [r7, #8]
 8007046:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007052:	2b40      	cmp	r3, #64	; 0x40
 8007054:	f040 80b4 	bne.w	80071c0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007064:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007068:	2b00      	cmp	r3, #0
 800706a:	f000 8140 	beq.w	80072ee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007072:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007076:	429a      	cmp	r2, r3
 8007078:	f080 8139 	bcs.w	80072ee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007082:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007088:	69db      	ldr	r3, [r3, #28]
 800708a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800708e:	f000 8088 	beq.w	80071a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	330c      	adds	r3, #12
 8007098:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80070a0:	e853 3f00 	ldrex	r3, [r3]
 80070a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80070a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	330c      	adds	r3, #12
 80070ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80070be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80070c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80070ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80070ce:	e841 2300 	strex	r3, r2, [r1]
 80070d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80070d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1d9      	bne.n	8007092 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	3314      	adds	r3, #20
 80070e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070e8:	e853 3f00 	ldrex	r3, [r3]
 80070ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80070ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070f0:	f023 0301 	bic.w	r3, r3, #1
 80070f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	3314      	adds	r3, #20
 80070fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007102:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007106:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007108:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800710a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800710e:	e841 2300 	strex	r3, r2, [r1]
 8007112:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007114:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1e1      	bne.n	80070de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	3314      	adds	r3, #20
 8007120:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007122:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007124:	e853 3f00 	ldrex	r3, [r3]
 8007128:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800712a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800712c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007130:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	3314      	adds	r3, #20
 800713a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800713e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007140:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007142:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007144:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007146:	e841 2300 	strex	r3, r2, [r1]
 800714a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800714c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800714e:	2b00      	cmp	r3, #0
 8007150:	d1e3      	bne.n	800711a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2220      	movs	r2, #32
 8007156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	330c      	adds	r3, #12
 8007166:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800716a:	e853 3f00 	ldrex	r3, [r3]
 800716e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007170:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007172:	f023 0310 	bic.w	r3, r3, #16
 8007176:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	330c      	adds	r3, #12
 8007180:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007184:	65ba      	str	r2, [r7, #88]	; 0x58
 8007186:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007188:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800718a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800718c:	e841 2300 	strex	r3, r2, [r1]
 8007190:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1e3      	bne.n	8007160 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719c:	4618      	mov	r0, r3
 800719e:	f7fc faa7 	bl	80036f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	1ad3      	subs	r3, r2, r3
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	4619      	mov	r1, r3
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f7fa f8e2 	bl	800137c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80071b8:	e099      	b.n	80072ee <HAL_UART_IRQHandler+0x50e>
 80071ba:	bf00      	nop
 80071bc:	0800786b 	.word	0x0800786b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f000 808b 	beq.w	80072f2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80071dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f000 8086 	beq.w	80072f2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	330c      	adds	r3, #12
 80071ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f0:	e853 3f00 	ldrex	r3, [r3]
 80071f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	330c      	adds	r3, #12
 8007206:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800720a:	647a      	str	r2, [r7, #68]	; 0x44
 800720c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007210:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007212:	e841 2300 	strex	r3, r2, [r1]
 8007216:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1e3      	bne.n	80071e6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	3314      	adds	r3, #20
 8007224:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007228:	e853 3f00 	ldrex	r3, [r3]
 800722c:	623b      	str	r3, [r7, #32]
   return(result);
 800722e:	6a3b      	ldr	r3, [r7, #32]
 8007230:	f023 0301 	bic.w	r3, r3, #1
 8007234:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	3314      	adds	r3, #20
 800723e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007242:	633a      	str	r2, [r7, #48]	; 0x30
 8007244:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007246:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800724a:	e841 2300 	strex	r3, r2, [r1]
 800724e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1e3      	bne.n	800721e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2220      	movs	r2, #32
 800725a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	330c      	adds	r3, #12
 800726a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	e853 3f00 	ldrex	r3, [r3]
 8007272:	60fb      	str	r3, [r7, #12]
   return(result);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f023 0310 	bic.w	r3, r3, #16
 800727a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	330c      	adds	r3, #12
 8007284:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007288:	61fa      	str	r2, [r7, #28]
 800728a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728c:	69b9      	ldr	r1, [r7, #24]
 800728e:	69fa      	ldr	r2, [r7, #28]
 8007290:	e841 2300 	strex	r3, r2, [r1]
 8007294:	617b      	str	r3, [r7, #20]
   return(result);
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1e3      	bne.n	8007264 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800729c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80072a0:	4619      	mov	r1, r3
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7fa f86a 	bl	800137c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80072a8:	e023      	b.n	80072f2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80072aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d009      	beq.n	80072ca <HAL_UART_IRQHandler+0x4ea>
 80072b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d003      	beq.n	80072ca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fae5 	bl	8007892 <UART_Transmit_IT>
    return;
 80072c8:	e014      	b.n	80072f4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80072ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00e      	beq.n	80072f4 <HAL_UART_IRQHandler+0x514>
 80072d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d008      	beq.n	80072f4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fb25 	bl	8007932 <UART_EndTransmit_IT>
    return;
 80072e8:	e004      	b.n	80072f4 <HAL_UART_IRQHandler+0x514>
    return;
 80072ea:	bf00      	nop
 80072ec:	e002      	b.n	80072f4 <HAL_UART_IRQHandler+0x514>
      return;
 80072ee:	bf00      	nop
 80072f0:	e000      	b.n	80072f4 <HAL_UART_IRQHandler+0x514>
      return;
 80072f2:	bf00      	nop
  }
}
 80072f4:	37e8      	adds	r7, #232	; 0xe8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop

080072fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b09c      	sub	sp, #112	; 0x70
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007358:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007364:	2b00      	cmp	r3, #0
 8007366:	d172      	bne.n	800744e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800736a:	2200      	movs	r2, #0
 800736c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800736e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	330c      	adds	r3, #12
 8007374:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007378:	e853 3f00 	ldrex	r3, [r3]
 800737c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800737e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007384:	66bb      	str	r3, [r7, #104]	; 0x68
 8007386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	330c      	adds	r3, #12
 800738c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800738e:	65ba      	str	r2, [r7, #88]	; 0x58
 8007390:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007392:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007394:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007396:	e841 2300 	strex	r3, r2, [r1]
 800739a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800739c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1e5      	bne.n	800736e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	3314      	adds	r3, #20
 80073a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ac:	e853 3f00 	ldrex	r3, [r3]
 80073b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80073b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073b4:	f023 0301 	bic.w	r3, r3, #1
 80073b8:	667b      	str	r3, [r7, #100]	; 0x64
 80073ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	3314      	adds	r3, #20
 80073c0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80073c2:	647a      	str	r2, [r7, #68]	; 0x44
 80073c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073ca:	e841 2300 	strex	r3, r2, [r1]
 80073ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1e5      	bne.n	80073a2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	3314      	adds	r3, #20
 80073dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e0:	e853 3f00 	ldrex	r3, [r3]
 80073e4:	623b      	str	r3, [r7, #32]
   return(result);
 80073e6:	6a3b      	ldr	r3, [r7, #32]
 80073e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073ec:	663b      	str	r3, [r7, #96]	; 0x60
 80073ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	3314      	adds	r3, #20
 80073f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80073f6:	633a      	str	r2, [r7, #48]	; 0x30
 80073f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073fe:	e841 2300 	strex	r3, r2, [r1]
 8007402:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1e5      	bne.n	80073d6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800740a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800740c:	2220      	movs	r2, #32
 800740e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007416:	2b01      	cmp	r3, #1
 8007418:	d119      	bne.n	800744e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800741a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	330c      	adds	r3, #12
 8007420:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	e853 3f00 	ldrex	r3, [r3]
 8007428:	60fb      	str	r3, [r7, #12]
   return(result);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f023 0310 	bic.w	r3, r3, #16
 8007430:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	330c      	adds	r3, #12
 8007438:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800743a:	61fa      	str	r2, [r7, #28]
 800743c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743e:	69b9      	ldr	r1, [r7, #24]
 8007440:	69fa      	ldr	r2, [r7, #28]
 8007442:	e841 2300 	strex	r3, r2, [r1]
 8007446:	617b      	str	r3, [r7, #20]
   return(result);
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1e5      	bne.n	800741a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800744e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007452:	2b01      	cmp	r3, #1
 8007454:	d106      	bne.n	8007464 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007458:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800745a:	4619      	mov	r1, r3
 800745c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800745e:	f7f9 ff8d 	bl	800137c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007462:	e002      	b.n	800746a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007464:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007466:	f7ff ff53 	bl	8007310 <HAL_UART_RxCpltCallback>
}
 800746a:	bf00      	nop
 800746c:	3770      	adds	r7, #112	; 0x70
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b084      	sub	sp, #16
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007484:	2b01      	cmp	r3, #1
 8007486:	d108      	bne.n	800749a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800748c:	085b      	lsrs	r3, r3, #1
 800748e:	b29b      	uxth	r3, r3
 8007490:	4619      	mov	r1, r3
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	f7f9 ff72 	bl	800137c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007498:	e002      	b.n	80074a0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f7ff ff42 	bl	8007324 <HAL_UART_RxHalfCpltCallback>
}
 80074a0:	bf00      	nop
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80074b0:	2300      	movs	r3, #0
 80074b2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	695b      	ldr	r3, [r3, #20]
 80074c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074c4:	2b80      	cmp	r3, #128	; 0x80
 80074c6:	bf0c      	ite	eq
 80074c8:	2301      	moveq	r3, #1
 80074ca:	2300      	movne	r3, #0
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	2b21      	cmp	r3, #33	; 0x21
 80074da:	d108      	bne.n	80074ee <UART_DMAError+0x46>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d005      	beq.n	80074ee <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	2200      	movs	r2, #0
 80074e6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80074e8:	68b8      	ldr	r0, [r7, #8]
 80074ea:	f000 f933 	bl	8007754 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	695b      	ldr	r3, [r3, #20]
 80074f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f8:	2b40      	cmp	r3, #64	; 0x40
 80074fa:	bf0c      	ite	eq
 80074fc:	2301      	moveq	r3, #1
 80074fe:	2300      	movne	r3, #0
 8007500:	b2db      	uxtb	r3, r3
 8007502:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2b22      	cmp	r3, #34	; 0x22
 800750e:	d108      	bne.n	8007522 <UART_DMAError+0x7a>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d005      	beq.n	8007522 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	2200      	movs	r2, #0
 800751a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800751c:	68b8      	ldr	r0, [r7, #8]
 800751e:	f000 f941 	bl	80077a4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007526:	f043 0210 	orr.w	r2, r3, #16
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800752e:	68b8      	ldr	r0, [r7, #8]
 8007530:	f7ff ff02 	bl	8007338 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007534:	bf00      	nop
 8007536:	3710      	adds	r7, #16
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b090      	sub	sp, #64	; 0x40
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	603b      	str	r3, [r7, #0]
 8007548:	4613      	mov	r3, r2
 800754a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800754c:	e050      	b.n	80075f0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800754e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007554:	d04c      	beq.n	80075f0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007558:	2b00      	cmp	r3, #0
 800755a:	d007      	beq.n	800756c <UART_WaitOnFlagUntilTimeout+0x30>
 800755c:	f7fb fe80 	bl	8003260 <HAL_GetTick>
 8007560:	4602      	mov	r2, r0
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	1ad3      	subs	r3, r2, r3
 8007566:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007568:	429a      	cmp	r2, r3
 800756a:	d241      	bcs.n	80075f0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	330c      	adds	r3, #12
 8007572:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007576:	e853 3f00 	ldrex	r3, [r3]
 800757a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800757c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007582:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	330c      	adds	r3, #12
 800758a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800758c:	637a      	str	r2, [r7, #52]	; 0x34
 800758e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007590:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007592:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007594:	e841 2300 	strex	r3, r2, [r1]
 8007598:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800759a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1e5      	bne.n	800756c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	3314      	adds	r3, #20
 80075a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	e853 3f00 	ldrex	r3, [r3]
 80075ae:	613b      	str	r3, [r7, #16]
   return(result);
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	f023 0301 	bic.w	r3, r3, #1
 80075b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	3314      	adds	r3, #20
 80075be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075c0:	623a      	str	r2, [r7, #32]
 80075c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c4:	69f9      	ldr	r1, [r7, #28]
 80075c6:	6a3a      	ldr	r2, [r7, #32]
 80075c8:	e841 2300 	strex	r3, r2, [r1]
 80075cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1e5      	bne.n	80075a0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2220      	movs	r2, #32
 80075d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2220      	movs	r2, #32
 80075e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80075ec:	2303      	movs	r3, #3
 80075ee:	e00f      	b.n	8007610 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	4013      	ands	r3, r2
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	bf0c      	ite	eq
 8007600:	2301      	moveq	r3, #1
 8007602:	2300      	movne	r3, #0
 8007604:	b2db      	uxtb	r3, r3
 8007606:	461a      	mov	r2, r3
 8007608:	79fb      	ldrb	r3, [r7, #7]
 800760a:	429a      	cmp	r2, r3
 800760c:	d09f      	beq.n	800754e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3740      	adds	r7, #64	; 0x40
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b098      	sub	sp, #96	; 0x60
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	4613      	mov	r3, r2
 8007624:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007626:	68ba      	ldr	r2, [r7, #8]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	88fa      	ldrh	r2, [r7, #6]
 8007630:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2222      	movs	r2, #34	; 0x22
 800763c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007644:	4a40      	ldr	r2, [pc, #256]	; (8007748 <UART_Start_Receive_DMA+0x130>)
 8007646:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764c:	4a3f      	ldr	r2, [pc, #252]	; (800774c <UART_Start_Receive_DMA+0x134>)
 800764e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007654:	4a3e      	ldr	r2, [pc, #248]	; (8007750 <UART_Start_Receive_DMA+0x138>)
 8007656:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765c:	2200      	movs	r2, #0
 800765e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007660:	f107 0308 	add.w	r3, r7, #8
 8007664:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	3304      	adds	r3, #4
 8007670:	4619      	mov	r1, r3
 8007672:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	88fb      	ldrh	r3, [r7, #6]
 8007678:	f7fb ffe2 	bl	8003640 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800767c:	2300      	movs	r3, #0
 800767e:	613b      	str	r3, [r7, #16]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	613b      	str	r3, [r7, #16]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	613b      	str	r3, [r7, #16]
 8007690:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2200      	movs	r2, #0
 8007696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d019      	beq.n	80076d6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	330c      	adds	r3, #12
 80076a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076ac:	e853 3f00 	ldrex	r3, [r3]
 80076b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	330c      	adds	r3, #12
 80076c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076c2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80076c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80076c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80076ca:	e841 2300 	strex	r3, r2, [r1]
 80076ce:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80076d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1e5      	bne.n	80076a2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	3314      	adds	r3, #20
 80076dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e0:	e853 3f00 	ldrex	r3, [r3]
 80076e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e8:	f043 0301 	orr.w	r3, r3, #1
 80076ec:	657b      	str	r3, [r7, #84]	; 0x54
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3314      	adds	r3, #20
 80076f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80076f6:	63ba      	str	r2, [r7, #56]	; 0x38
 80076f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80076fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076fe:	e841 2300 	strex	r3, r2, [r1]
 8007702:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1e5      	bne.n	80076d6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	3314      	adds	r3, #20
 8007710:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	e853 3f00 	ldrex	r3, [r3]
 8007718:	617b      	str	r3, [r7, #20]
   return(result);
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007720:	653b      	str	r3, [r7, #80]	; 0x50
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	3314      	adds	r3, #20
 8007728:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800772a:	627a      	str	r2, [r7, #36]	; 0x24
 800772c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772e:	6a39      	ldr	r1, [r7, #32]
 8007730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007732:	e841 2300 	strex	r3, r2, [r1]
 8007736:	61fb      	str	r3, [r7, #28]
   return(result);
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1e5      	bne.n	800770a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3760      	adds	r7, #96	; 0x60
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	0800734d 	.word	0x0800734d
 800774c:	08007473 	.word	0x08007473
 8007750:	080074a9 	.word	0x080074a9

08007754 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007754:	b480      	push	{r7}
 8007756:	b089      	sub	sp, #36	; 0x24
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	330c      	adds	r3, #12
 8007762:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	e853 3f00 	ldrex	r3, [r3]
 800776a:	60bb      	str	r3, [r7, #8]
   return(result);
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007772:	61fb      	str	r3, [r7, #28]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	330c      	adds	r3, #12
 800777a:	69fa      	ldr	r2, [r7, #28]
 800777c:	61ba      	str	r2, [r7, #24]
 800777e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007780:	6979      	ldr	r1, [r7, #20]
 8007782:	69ba      	ldr	r2, [r7, #24]
 8007784:	e841 2300 	strex	r3, r2, [r1]
 8007788:	613b      	str	r3, [r7, #16]
   return(result);
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1e5      	bne.n	800775c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2220      	movs	r2, #32
 8007794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007798:	bf00      	nop
 800779a:	3724      	adds	r7, #36	; 0x24
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b095      	sub	sp, #84	; 0x54
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	330c      	adds	r3, #12
 80077b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077b6:	e853 3f00 	ldrex	r3, [r3]
 80077ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	330c      	adds	r3, #12
 80077ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077cc:	643a      	str	r2, [r7, #64]	; 0x40
 80077ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077d4:	e841 2300 	strex	r3, r2, [r1]
 80077d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1e5      	bne.n	80077ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	3314      	adds	r3, #20
 80077e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e8:	6a3b      	ldr	r3, [r7, #32]
 80077ea:	e853 3f00 	ldrex	r3, [r3]
 80077ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	f023 0301 	bic.w	r3, r3, #1
 80077f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	3314      	adds	r3, #20
 80077fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007800:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007802:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007804:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007806:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007808:	e841 2300 	strex	r3, r2, [r1]
 800780c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800780e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007810:	2b00      	cmp	r3, #0
 8007812:	d1e5      	bne.n	80077e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007818:	2b01      	cmp	r3, #1
 800781a:	d119      	bne.n	8007850 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	330c      	adds	r3, #12
 8007822:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	e853 3f00 	ldrex	r3, [r3]
 800782a:	60bb      	str	r3, [r7, #8]
   return(result);
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	f023 0310 	bic.w	r3, r3, #16
 8007832:	647b      	str	r3, [r7, #68]	; 0x44
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	330c      	adds	r3, #12
 800783a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800783c:	61ba      	str	r2, [r7, #24]
 800783e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007840:	6979      	ldr	r1, [r7, #20]
 8007842:	69ba      	ldr	r2, [r7, #24]
 8007844:	e841 2300 	strex	r3, r2, [r1]
 8007848:	613b      	str	r3, [r7, #16]
   return(result);
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1e5      	bne.n	800781c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2220      	movs	r2, #32
 8007854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800785e:	bf00      	nop
 8007860:	3754      	adds	r7, #84	; 0x54
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr

0800786a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b084      	sub	sp, #16
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007876:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2200      	movs	r2, #0
 800787c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f7ff fd57 	bl	8007338 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800788a:	bf00      	nop
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007892:	b480      	push	{r7}
 8007894:	b085      	sub	sp, #20
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	2b21      	cmp	r3, #33	; 0x21
 80078a4:	d13e      	bne.n	8007924 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078ae:	d114      	bne.n	80078da <UART_Transmit_IT+0x48>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d110      	bne.n	80078da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a1b      	ldr	r3, [r3, #32]
 80078bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	881b      	ldrh	r3, [r3, #0]
 80078c2:	461a      	mov	r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a1b      	ldr	r3, [r3, #32]
 80078d2:	1c9a      	adds	r2, r3, #2
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	621a      	str	r2, [r3, #32]
 80078d8:	e008      	b.n	80078ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a1b      	ldr	r3, [r3, #32]
 80078de:	1c59      	adds	r1, r3, #1
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	6211      	str	r1, [r2, #32]
 80078e4:	781a      	ldrb	r2, [r3, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	3b01      	subs	r3, #1
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	4619      	mov	r1, r3
 80078fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d10f      	bne.n	8007920 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68da      	ldr	r2, [r3, #12]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800790e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68da      	ldr	r2, [r3, #12]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800791e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007920:	2300      	movs	r3, #0
 8007922:	e000      	b.n	8007926 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007924:	2302      	movs	r3, #2
  }
}
 8007926:	4618      	mov	r0, r3
 8007928:	3714      	adds	r7, #20
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr

08007932 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b082      	sub	sp, #8
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68da      	ldr	r2, [r3, #12]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007948:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2220      	movs	r2, #32
 800794e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f7ff fcd2 	bl	80072fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3708      	adds	r7, #8
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b08c      	sub	sp, #48	; 0x30
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007970:	b2db      	uxtb	r3, r3
 8007972:	2b22      	cmp	r3, #34	; 0x22
 8007974:	f040 80ab 	bne.w	8007ace <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007980:	d117      	bne.n	80079b2 <UART_Receive_IT+0x50>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d113      	bne.n	80079b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800798a:	2300      	movs	r3, #0
 800798c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007992:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	b29b      	uxth	r3, r3
 800799c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079aa:	1c9a      	adds	r2, r3, #2
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	629a      	str	r2, [r3, #40]	; 0x28
 80079b0:	e026      	b.n	8007a00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80079b8:	2300      	movs	r3, #0
 80079ba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079c4:	d007      	beq.n	80079d6 <UART_Receive_IT+0x74>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10a      	bne.n	80079e4 <UART_Receive_IT+0x82>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d106      	bne.n	80079e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	b2da      	uxtb	r2, r3
 80079de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e0:	701a      	strb	r2, [r3, #0]
 80079e2:	e008      	b.n	80079f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079f0:	b2da      	uxtb	r2, r3
 80079f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fa:	1c5a      	adds	r2, r3, #1
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	3b01      	subs	r3, #1
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d15a      	bne.n	8007aca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68da      	ldr	r2, [r3, #12]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f022 0220 	bic.w	r2, r2, #32
 8007a22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68da      	ldr	r2, [r3, #12]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	695a      	ldr	r2, [r3, #20]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f022 0201 	bic.w	r2, r2, #1
 8007a42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2220      	movs	r2, #32
 8007a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d135      	bne.n	8007ac0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	330c      	adds	r3, #12
 8007a60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	e853 3f00 	ldrex	r3, [r3]
 8007a68:	613b      	str	r3, [r7, #16]
   return(result);
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	f023 0310 	bic.w	r3, r3, #16
 8007a70:	627b      	str	r3, [r7, #36]	; 0x24
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	330c      	adds	r3, #12
 8007a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a7a:	623a      	str	r2, [r7, #32]
 8007a7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7e:	69f9      	ldr	r1, [r7, #28]
 8007a80:	6a3a      	ldr	r2, [r7, #32]
 8007a82:	e841 2300 	strex	r3, r2, [r1]
 8007a86:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1e5      	bne.n	8007a5a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0310 	and.w	r3, r3, #16
 8007a98:	2b10      	cmp	r3, #16
 8007a9a:	d10a      	bne.n	8007ab2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	60fb      	str	r3, [r7, #12]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	60fb      	str	r3, [r7, #12]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	60fb      	str	r3, [r7, #12]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f7f9 fc5f 	bl	800137c <HAL_UARTEx_RxEventCallback>
 8007abe:	e002      	b.n	8007ac6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f7ff fc25 	bl	8007310 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	e002      	b.n	8007ad0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007aca:	2300      	movs	r3, #0
 8007acc:	e000      	b.n	8007ad0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007ace:	2302      	movs	r3, #2
  }
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3730      	adds	r7, #48	; 0x30
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007adc:	b0c0      	sub	sp, #256	; 0x100
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007af4:	68d9      	ldr	r1, [r3, #12]
 8007af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	ea40 0301 	orr.w	r3, r0, r1
 8007b00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b06:	689a      	ldr	r2, [r3, #8]
 8007b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	431a      	orrs	r2, r3
 8007b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b14:	695b      	ldr	r3, [r3, #20]
 8007b16:	431a      	orrs	r2, r3
 8007b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b1c:	69db      	ldr	r3, [r3, #28]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007b30:	f021 010c 	bic.w	r1, r1, #12
 8007b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b3e:	430b      	orrs	r3, r1
 8007b40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	695b      	ldr	r3, [r3, #20]
 8007b4a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b52:	6999      	ldr	r1, [r3, #24]
 8007b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	ea40 0301 	orr.w	r3, r0, r1
 8007b5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	4b8f      	ldr	r3, [pc, #572]	; (8007da4 <UART_SetConfig+0x2cc>)
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d005      	beq.n	8007b78 <UART_SetConfig+0xa0>
 8007b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	4b8d      	ldr	r3, [pc, #564]	; (8007da8 <UART_SetConfig+0x2d0>)
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d104      	bne.n	8007b82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b78:	f7fe fadc 	bl	8006134 <HAL_RCC_GetPCLK2Freq>
 8007b7c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007b80:	e003      	b.n	8007b8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b82:	f7fe fac3 	bl	800610c <HAL_RCC_GetPCLK1Freq>
 8007b86:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b8e:	69db      	ldr	r3, [r3, #28]
 8007b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b94:	f040 810c 	bne.w	8007db0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007ba2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007ba6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007baa:	4622      	mov	r2, r4
 8007bac:	462b      	mov	r3, r5
 8007bae:	1891      	adds	r1, r2, r2
 8007bb0:	65b9      	str	r1, [r7, #88]	; 0x58
 8007bb2:	415b      	adcs	r3, r3
 8007bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007bba:	4621      	mov	r1, r4
 8007bbc:	eb12 0801 	adds.w	r8, r2, r1
 8007bc0:	4629      	mov	r1, r5
 8007bc2:	eb43 0901 	adc.w	r9, r3, r1
 8007bc6:	f04f 0200 	mov.w	r2, #0
 8007bca:	f04f 0300 	mov.w	r3, #0
 8007bce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007bd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007bd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007bda:	4690      	mov	r8, r2
 8007bdc:	4699      	mov	r9, r3
 8007bde:	4623      	mov	r3, r4
 8007be0:	eb18 0303 	adds.w	r3, r8, r3
 8007be4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007be8:	462b      	mov	r3, r5
 8007bea:	eb49 0303 	adc.w	r3, r9, r3
 8007bee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007bfe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007c02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007c06:	460b      	mov	r3, r1
 8007c08:	18db      	adds	r3, r3, r3
 8007c0a:	653b      	str	r3, [r7, #80]	; 0x50
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	eb42 0303 	adc.w	r3, r2, r3
 8007c12:	657b      	str	r3, [r7, #84]	; 0x54
 8007c14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007c18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007c1c:	f7f8 fb48 	bl	80002b0 <__aeabi_uldivmod>
 8007c20:	4602      	mov	r2, r0
 8007c22:	460b      	mov	r3, r1
 8007c24:	4b61      	ldr	r3, [pc, #388]	; (8007dac <UART_SetConfig+0x2d4>)
 8007c26:	fba3 2302 	umull	r2, r3, r3, r2
 8007c2a:	095b      	lsrs	r3, r3, #5
 8007c2c:	011c      	lsls	r4, r3, #4
 8007c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c32:	2200      	movs	r2, #0
 8007c34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c38:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007c3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007c40:	4642      	mov	r2, r8
 8007c42:	464b      	mov	r3, r9
 8007c44:	1891      	adds	r1, r2, r2
 8007c46:	64b9      	str	r1, [r7, #72]	; 0x48
 8007c48:	415b      	adcs	r3, r3
 8007c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007c50:	4641      	mov	r1, r8
 8007c52:	eb12 0a01 	adds.w	sl, r2, r1
 8007c56:	4649      	mov	r1, r9
 8007c58:	eb43 0b01 	adc.w	fp, r3, r1
 8007c5c:	f04f 0200 	mov.w	r2, #0
 8007c60:	f04f 0300 	mov.w	r3, #0
 8007c64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007c68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007c6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c70:	4692      	mov	sl, r2
 8007c72:	469b      	mov	fp, r3
 8007c74:	4643      	mov	r3, r8
 8007c76:	eb1a 0303 	adds.w	r3, sl, r3
 8007c7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c7e:	464b      	mov	r3, r9
 8007c80:	eb4b 0303 	adc.w	r3, fp, r3
 8007c84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c94:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007c98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	18db      	adds	r3, r3, r3
 8007ca0:	643b      	str	r3, [r7, #64]	; 0x40
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	eb42 0303 	adc.w	r3, r2, r3
 8007ca8:	647b      	str	r3, [r7, #68]	; 0x44
 8007caa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007cae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007cb2:	f7f8 fafd 	bl	80002b0 <__aeabi_uldivmod>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	460b      	mov	r3, r1
 8007cba:	4611      	mov	r1, r2
 8007cbc:	4b3b      	ldr	r3, [pc, #236]	; (8007dac <UART_SetConfig+0x2d4>)
 8007cbe:	fba3 2301 	umull	r2, r3, r3, r1
 8007cc2:	095b      	lsrs	r3, r3, #5
 8007cc4:	2264      	movs	r2, #100	; 0x64
 8007cc6:	fb02 f303 	mul.w	r3, r2, r3
 8007cca:	1acb      	subs	r3, r1, r3
 8007ccc:	00db      	lsls	r3, r3, #3
 8007cce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007cd2:	4b36      	ldr	r3, [pc, #216]	; (8007dac <UART_SetConfig+0x2d4>)
 8007cd4:	fba3 2302 	umull	r2, r3, r3, r2
 8007cd8:	095b      	lsrs	r3, r3, #5
 8007cda:	005b      	lsls	r3, r3, #1
 8007cdc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ce0:	441c      	add	r4, r3
 8007ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007cec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007cf0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007cf4:	4642      	mov	r2, r8
 8007cf6:	464b      	mov	r3, r9
 8007cf8:	1891      	adds	r1, r2, r2
 8007cfa:	63b9      	str	r1, [r7, #56]	; 0x38
 8007cfc:	415b      	adcs	r3, r3
 8007cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007d04:	4641      	mov	r1, r8
 8007d06:	1851      	adds	r1, r2, r1
 8007d08:	6339      	str	r1, [r7, #48]	; 0x30
 8007d0a:	4649      	mov	r1, r9
 8007d0c:	414b      	adcs	r3, r1
 8007d0e:	637b      	str	r3, [r7, #52]	; 0x34
 8007d10:	f04f 0200 	mov.w	r2, #0
 8007d14:	f04f 0300 	mov.w	r3, #0
 8007d18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007d1c:	4659      	mov	r1, fp
 8007d1e:	00cb      	lsls	r3, r1, #3
 8007d20:	4651      	mov	r1, sl
 8007d22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d26:	4651      	mov	r1, sl
 8007d28:	00ca      	lsls	r2, r1, #3
 8007d2a:	4610      	mov	r0, r2
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	4603      	mov	r3, r0
 8007d30:	4642      	mov	r2, r8
 8007d32:	189b      	adds	r3, r3, r2
 8007d34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d38:	464b      	mov	r3, r9
 8007d3a:	460a      	mov	r2, r1
 8007d3c:	eb42 0303 	adc.w	r3, r2, r3
 8007d40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007d50:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007d54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007d58:	460b      	mov	r3, r1
 8007d5a:	18db      	adds	r3, r3, r3
 8007d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d5e:	4613      	mov	r3, r2
 8007d60:	eb42 0303 	adc.w	r3, r2, r3
 8007d64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007d6e:	f7f8 fa9f 	bl	80002b0 <__aeabi_uldivmod>
 8007d72:	4602      	mov	r2, r0
 8007d74:	460b      	mov	r3, r1
 8007d76:	4b0d      	ldr	r3, [pc, #52]	; (8007dac <UART_SetConfig+0x2d4>)
 8007d78:	fba3 1302 	umull	r1, r3, r3, r2
 8007d7c:	095b      	lsrs	r3, r3, #5
 8007d7e:	2164      	movs	r1, #100	; 0x64
 8007d80:	fb01 f303 	mul.w	r3, r1, r3
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	00db      	lsls	r3, r3, #3
 8007d88:	3332      	adds	r3, #50	; 0x32
 8007d8a:	4a08      	ldr	r2, [pc, #32]	; (8007dac <UART_SetConfig+0x2d4>)
 8007d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d90:	095b      	lsrs	r3, r3, #5
 8007d92:	f003 0207 	and.w	r2, r3, #7
 8007d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4422      	add	r2, r4
 8007d9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007da0:	e105      	b.n	8007fae <UART_SetConfig+0x4d6>
 8007da2:	bf00      	nop
 8007da4:	40011000 	.word	0x40011000
 8007da8:	40011400 	.word	0x40011400
 8007dac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007db0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007db4:	2200      	movs	r2, #0
 8007db6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007dba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007dbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007dc2:	4642      	mov	r2, r8
 8007dc4:	464b      	mov	r3, r9
 8007dc6:	1891      	adds	r1, r2, r2
 8007dc8:	6239      	str	r1, [r7, #32]
 8007dca:	415b      	adcs	r3, r3
 8007dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8007dce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007dd2:	4641      	mov	r1, r8
 8007dd4:	1854      	adds	r4, r2, r1
 8007dd6:	4649      	mov	r1, r9
 8007dd8:	eb43 0501 	adc.w	r5, r3, r1
 8007ddc:	f04f 0200 	mov.w	r2, #0
 8007de0:	f04f 0300 	mov.w	r3, #0
 8007de4:	00eb      	lsls	r3, r5, #3
 8007de6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007dea:	00e2      	lsls	r2, r4, #3
 8007dec:	4614      	mov	r4, r2
 8007dee:	461d      	mov	r5, r3
 8007df0:	4643      	mov	r3, r8
 8007df2:	18e3      	adds	r3, r4, r3
 8007df4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007df8:	464b      	mov	r3, r9
 8007dfa:	eb45 0303 	adc.w	r3, r5, r3
 8007dfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007e0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007e12:	f04f 0200 	mov.w	r2, #0
 8007e16:	f04f 0300 	mov.w	r3, #0
 8007e1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007e1e:	4629      	mov	r1, r5
 8007e20:	008b      	lsls	r3, r1, #2
 8007e22:	4621      	mov	r1, r4
 8007e24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e28:	4621      	mov	r1, r4
 8007e2a:	008a      	lsls	r2, r1, #2
 8007e2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007e30:	f7f8 fa3e 	bl	80002b0 <__aeabi_uldivmod>
 8007e34:	4602      	mov	r2, r0
 8007e36:	460b      	mov	r3, r1
 8007e38:	4b60      	ldr	r3, [pc, #384]	; (8007fbc <UART_SetConfig+0x4e4>)
 8007e3a:	fba3 2302 	umull	r2, r3, r3, r2
 8007e3e:	095b      	lsrs	r3, r3, #5
 8007e40:	011c      	lsls	r4, r3, #4
 8007e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e46:	2200      	movs	r2, #0
 8007e48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007e4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007e50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007e54:	4642      	mov	r2, r8
 8007e56:	464b      	mov	r3, r9
 8007e58:	1891      	adds	r1, r2, r2
 8007e5a:	61b9      	str	r1, [r7, #24]
 8007e5c:	415b      	adcs	r3, r3
 8007e5e:	61fb      	str	r3, [r7, #28]
 8007e60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e64:	4641      	mov	r1, r8
 8007e66:	1851      	adds	r1, r2, r1
 8007e68:	6139      	str	r1, [r7, #16]
 8007e6a:	4649      	mov	r1, r9
 8007e6c:	414b      	adcs	r3, r1
 8007e6e:	617b      	str	r3, [r7, #20]
 8007e70:	f04f 0200 	mov.w	r2, #0
 8007e74:	f04f 0300 	mov.w	r3, #0
 8007e78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e7c:	4659      	mov	r1, fp
 8007e7e:	00cb      	lsls	r3, r1, #3
 8007e80:	4651      	mov	r1, sl
 8007e82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e86:	4651      	mov	r1, sl
 8007e88:	00ca      	lsls	r2, r1, #3
 8007e8a:	4610      	mov	r0, r2
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	4603      	mov	r3, r0
 8007e90:	4642      	mov	r2, r8
 8007e92:	189b      	adds	r3, r3, r2
 8007e94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e98:	464b      	mov	r3, r9
 8007e9a:	460a      	mov	r2, r1
 8007e9c:	eb42 0303 	adc.w	r3, r2, r3
 8007ea0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	67bb      	str	r3, [r7, #120]	; 0x78
 8007eae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007eb0:	f04f 0200 	mov.w	r2, #0
 8007eb4:	f04f 0300 	mov.w	r3, #0
 8007eb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007ebc:	4649      	mov	r1, r9
 8007ebe:	008b      	lsls	r3, r1, #2
 8007ec0:	4641      	mov	r1, r8
 8007ec2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ec6:	4641      	mov	r1, r8
 8007ec8:	008a      	lsls	r2, r1, #2
 8007eca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007ece:	f7f8 f9ef 	bl	80002b0 <__aeabi_uldivmod>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	4b39      	ldr	r3, [pc, #228]	; (8007fbc <UART_SetConfig+0x4e4>)
 8007ed8:	fba3 1302 	umull	r1, r3, r3, r2
 8007edc:	095b      	lsrs	r3, r3, #5
 8007ede:	2164      	movs	r1, #100	; 0x64
 8007ee0:	fb01 f303 	mul.w	r3, r1, r3
 8007ee4:	1ad3      	subs	r3, r2, r3
 8007ee6:	011b      	lsls	r3, r3, #4
 8007ee8:	3332      	adds	r3, #50	; 0x32
 8007eea:	4a34      	ldr	r2, [pc, #208]	; (8007fbc <UART_SetConfig+0x4e4>)
 8007eec:	fba2 2303 	umull	r2, r3, r2, r3
 8007ef0:	095b      	lsrs	r3, r3, #5
 8007ef2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ef6:	441c      	add	r4, r3
 8007ef8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007efc:	2200      	movs	r2, #0
 8007efe:	673b      	str	r3, [r7, #112]	; 0x70
 8007f00:	677a      	str	r2, [r7, #116]	; 0x74
 8007f02:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007f06:	4642      	mov	r2, r8
 8007f08:	464b      	mov	r3, r9
 8007f0a:	1891      	adds	r1, r2, r2
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	415b      	adcs	r3, r3
 8007f10:	60fb      	str	r3, [r7, #12]
 8007f12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f16:	4641      	mov	r1, r8
 8007f18:	1851      	adds	r1, r2, r1
 8007f1a:	6039      	str	r1, [r7, #0]
 8007f1c:	4649      	mov	r1, r9
 8007f1e:	414b      	adcs	r3, r1
 8007f20:	607b      	str	r3, [r7, #4]
 8007f22:	f04f 0200 	mov.w	r2, #0
 8007f26:	f04f 0300 	mov.w	r3, #0
 8007f2a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007f2e:	4659      	mov	r1, fp
 8007f30:	00cb      	lsls	r3, r1, #3
 8007f32:	4651      	mov	r1, sl
 8007f34:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f38:	4651      	mov	r1, sl
 8007f3a:	00ca      	lsls	r2, r1, #3
 8007f3c:	4610      	mov	r0, r2
 8007f3e:	4619      	mov	r1, r3
 8007f40:	4603      	mov	r3, r0
 8007f42:	4642      	mov	r2, r8
 8007f44:	189b      	adds	r3, r3, r2
 8007f46:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f48:	464b      	mov	r3, r9
 8007f4a:	460a      	mov	r2, r1
 8007f4c:	eb42 0303 	adc.w	r3, r2, r3
 8007f50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	663b      	str	r3, [r7, #96]	; 0x60
 8007f5c:	667a      	str	r2, [r7, #100]	; 0x64
 8007f5e:	f04f 0200 	mov.w	r2, #0
 8007f62:	f04f 0300 	mov.w	r3, #0
 8007f66:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007f6a:	4649      	mov	r1, r9
 8007f6c:	008b      	lsls	r3, r1, #2
 8007f6e:	4641      	mov	r1, r8
 8007f70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f74:	4641      	mov	r1, r8
 8007f76:	008a      	lsls	r2, r1, #2
 8007f78:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007f7c:	f7f8 f998 	bl	80002b0 <__aeabi_uldivmod>
 8007f80:	4602      	mov	r2, r0
 8007f82:	460b      	mov	r3, r1
 8007f84:	4b0d      	ldr	r3, [pc, #52]	; (8007fbc <UART_SetConfig+0x4e4>)
 8007f86:	fba3 1302 	umull	r1, r3, r3, r2
 8007f8a:	095b      	lsrs	r3, r3, #5
 8007f8c:	2164      	movs	r1, #100	; 0x64
 8007f8e:	fb01 f303 	mul.w	r3, r1, r3
 8007f92:	1ad3      	subs	r3, r2, r3
 8007f94:	011b      	lsls	r3, r3, #4
 8007f96:	3332      	adds	r3, #50	; 0x32
 8007f98:	4a08      	ldr	r2, [pc, #32]	; (8007fbc <UART_SetConfig+0x4e4>)
 8007f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f9e:	095b      	lsrs	r3, r3, #5
 8007fa0:	f003 020f 	and.w	r2, r3, #15
 8007fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4422      	add	r2, r4
 8007fac:	609a      	str	r2, [r3, #8]
}
 8007fae:	bf00      	nop
 8007fb0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fba:	bf00      	nop
 8007fbc:	51eb851f 	.word	0x51eb851f

08007fc0 <__errno>:
 8007fc0:	4b01      	ldr	r3, [pc, #4]	; (8007fc8 <__errno+0x8>)
 8007fc2:	6818      	ldr	r0, [r3, #0]
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	20000070 	.word	0x20000070

08007fcc <__libc_init_array>:
 8007fcc:	b570      	push	{r4, r5, r6, lr}
 8007fce:	4d0d      	ldr	r5, [pc, #52]	; (8008004 <__libc_init_array+0x38>)
 8007fd0:	4c0d      	ldr	r4, [pc, #52]	; (8008008 <__libc_init_array+0x3c>)
 8007fd2:	1b64      	subs	r4, r4, r5
 8007fd4:	10a4      	asrs	r4, r4, #2
 8007fd6:	2600      	movs	r6, #0
 8007fd8:	42a6      	cmp	r6, r4
 8007fda:	d109      	bne.n	8007ff0 <__libc_init_array+0x24>
 8007fdc:	4d0b      	ldr	r5, [pc, #44]	; (800800c <__libc_init_array+0x40>)
 8007fde:	4c0c      	ldr	r4, [pc, #48]	; (8008010 <__libc_init_array+0x44>)
 8007fe0:	f001 f842 	bl	8009068 <_init>
 8007fe4:	1b64      	subs	r4, r4, r5
 8007fe6:	10a4      	asrs	r4, r4, #2
 8007fe8:	2600      	movs	r6, #0
 8007fea:	42a6      	cmp	r6, r4
 8007fec:	d105      	bne.n	8007ffa <__libc_init_array+0x2e>
 8007fee:	bd70      	pop	{r4, r5, r6, pc}
 8007ff0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ff4:	4798      	blx	r3
 8007ff6:	3601      	adds	r6, #1
 8007ff8:	e7ee      	b.n	8007fd8 <__libc_init_array+0xc>
 8007ffa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ffe:	4798      	blx	r3
 8008000:	3601      	adds	r6, #1
 8008002:	e7f2      	b.n	8007fea <__libc_init_array+0x1e>
 8008004:	08009338 	.word	0x08009338
 8008008:	08009338 	.word	0x08009338
 800800c:	08009338 	.word	0x08009338
 8008010:	0800933c 	.word	0x0800933c

08008014 <memcmp>:
 8008014:	b510      	push	{r4, lr}
 8008016:	3901      	subs	r1, #1
 8008018:	4402      	add	r2, r0
 800801a:	4290      	cmp	r0, r2
 800801c:	d101      	bne.n	8008022 <memcmp+0xe>
 800801e:	2000      	movs	r0, #0
 8008020:	e005      	b.n	800802e <memcmp+0x1a>
 8008022:	7803      	ldrb	r3, [r0, #0]
 8008024:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008028:	42a3      	cmp	r3, r4
 800802a:	d001      	beq.n	8008030 <memcmp+0x1c>
 800802c:	1b18      	subs	r0, r3, r4
 800802e:	bd10      	pop	{r4, pc}
 8008030:	3001      	adds	r0, #1
 8008032:	e7f2      	b.n	800801a <memcmp+0x6>

08008034 <memcpy>:
 8008034:	440a      	add	r2, r1
 8008036:	4291      	cmp	r1, r2
 8008038:	f100 33ff 	add.w	r3, r0, #4294967295
 800803c:	d100      	bne.n	8008040 <memcpy+0xc>
 800803e:	4770      	bx	lr
 8008040:	b510      	push	{r4, lr}
 8008042:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008046:	f803 4f01 	strb.w	r4, [r3, #1]!
 800804a:	4291      	cmp	r1, r2
 800804c:	d1f9      	bne.n	8008042 <memcpy+0xe>
 800804e:	bd10      	pop	{r4, pc}

08008050 <memset>:
 8008050:	4402      	add	r2, r0
 8008052:	4603      	mov	r3, r0
 8008054:	4293      	cmp	r3, r2
 8008056:	d100      	bne.n	800805a <memset+0xa>
 8008058:	4770      	bx	lr
 800805a:	f803 1b01 	strb.w	r1, [r3], #1
 800805e:	e7f9      	b.n	8008054 <memset+0x4>

08008060 <iprintf>:
 8008060:	b40f      	push	{r0, r1, r2, r3}
 8008062:	4b0a      	ldr	r3, [pc, #40]	; (800808c <iprintf+0x2c>)
 8008064:	b513      	push	{r0, r1, r4, lr}
 8008066:	681c      	ldr	r4, [r3, #0]
 8008068:	b124      	cbz	r4, 8008074 <iprintf+0x14>
 800806a:	69a3      	ldr	r3, [r4, #24]
 800806c:	b913      	cbnz	r3, 8008074 <iprintf+0x14>
 800806e:	4620      	mov	r0, r4
 8008070:	f000 fa5e 	bl	8008530 <__sinit>
 8008074:	ab05      	add	r3, sp, #20
 8008076:	9a04      	ldr	r2, [sp, #16]
 8008078:	68a1      	ldr	r1, [r4, #8]
 800807a:	9301      	str	r3, [sp, #4]
 800807c:	4620      	mov	r0, r4
 800807e:	f000 fc67 	bl	8008950 <_vfiprintf_r>
 8008082:	b002      	add	sp, #8
 8008084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008088:	b004      	add	sp, #16
 800808a:	4770      	bx	lr
 800808c:	20000070 	.word	0x20000070

08008090 <_puts_r>:
 8008090:	b570      	push	{r4, r5, r6, lr}
 8008092:	460e      	mov	r6, r1
 8008094:	4605      	mov	r5, r0
 8008096:	b118      	cbz	r0, 80080a0 <_puts_r+0x10>
 8008098:	6983      	ldr	r3, [r0, #24]
 800809a:	b90b      	cbnz	r3, 80080a0 <_puts_r+0x10>
 800809c:	f000 fa48 	bl	8008530 <__sinit>
 80080a0:	69ab      	ldr	r3, [r5, #24]
 80080a2:	68ac      	ldr	r4, [r5, #8]
 80080a4:	b913      	cbnz	r3, 80080ac <_puts_r+0x1c>
 80080a6:	4628      	mov	r0, r5
 80080a8:	f000 fa42 	bl	8008530 <__sinit>
 80080ac:	4b2c      	ldr	r3, [pc, #176]	; (8008160 <_puts_r+0xd0>)
 80080ae:	429c      	cmp	r4, r3
 80080b0:	d120      	bne.n	80080f4 <_puts_r+0x64>
 80080b2:	686c      	ldr	r4, [r5, #4]
 80080b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080b6:	07db      	lsls	r3, r3, #31
 80080b8:	d405      	bmi.n	80080c6 <_puts_r+0x36>
 80080ba:	89a3      	ldrh	r3, [r4, #12]
 80080bc:	0598      	lsls	r0, r3, #22
 80080be:	d402      	bmi.n	80080c6 <_puts_r+0x36>
 80080c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080c2:	f000 fad3 	bl	800866c <__retarget_lock_acquire_recursive>
 80080c6:	89a3      	ldrh	r3, [r4, #12]
 80080c8:	0719      	lsls	r1, r3, #28
 80080ca:	d51d      	bpl.n	8008108 <_puts_r+0x78>
 80080cc:	6923      	ldr	r3, [r4, #16]
 80080ce:	b1db      	cbz	r3, 8008108 <_puts_r+0x78>
 80080d0:	3e01      	subs	r6, #1
 80080d2:	68a3      	ldr	r3, [r4, #8]
 80080d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80080d8:	3b01      	subs	r3, #1
 80080da:	60a3      	str	r3, [r4, #8]
 80080dc:	bb39      	cbnz	r1, 800812e <_puts_r+0x9e>
 80080de:	2b00      	cmp	r3, #0
 80080e0:	da38      	bge.n	8008154 <_puts_r+0xc4>
 80080e2:	4622      	mov	r2, r4
 80080e4:	210a      	movs	r1, #10
 80080e6:	4628      	mov	r0, r5
 80080e8:	f000 f848 	bl	800817c <__swbuf_r>
 80080ec:	3001      	adds	r0, #1
 80080ee:	d011      	beq.n	8008114 <_puts_r+0x84>
 80080f0:	250a      	movs	r5, #10
 80080f2:	e011      	b.n	8008118 <_puts_r+0x88>
 80080f4:	4b1b      	ldr	r3, [pc, #108]	; (8008164 <_puts_r+0xd4>)
 80080f6:	429c      	cmp	r4, r3
 80080f8:	d101      	bne.n	80080fe <_puts_r+0x6e>
 80080fa:	68ac      	ldr	r4, [r5, #8]
 80080fc:	e7da      	b.n	80080b4 <_puts_r+0x24>
 80080fe:	4b1a      	ldr	r3, [pc, #104]	; (8008168 <_puts_r+0xd8>)
 8008100:	429c      	cmp	r4, r3
 8008102:	bf08      	it	eq
 8008104:	68ec      	ldreq	r4, [r5, #12]
 8008106:	e7d5      	b.n	80080b4 <_puts_r+0x24>
 8008108:	4621      	mov	r1, r4
 800810a:	4628      	mov	r0, r5
 800810c:	f000 f888 	bl	8008220 <__swsetup_r>
 8008110:	2800      	cmp	r0, #0
 8008112:	d0dd      	beq.n	80080d0 <_puts_r+0x40>
 8008114:	f04f 35ff 	mov.w	r5, #4294967295
 8008118:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800811a:	07da      	lsls	r2, r3, #31
 800811c:	d405      	bmi.n	800812a <_puts_r+0x9a>
 800811e:	89a3      	ldrh	r3, [r4, #12]
 8008120:	059b      	lsls	r3, r3, #22
 8008122:	d402      	bmi.n	800812a <_puts_r+0x9a>
 8008124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008126:	f000 faa2 	bl	800866e <__retarget_lock_release_recursive>
 800812a:	4628      	mov	r0, r5
 800812c:	bd70      	pop	{r4, r5, r6, pc}
 800812e:	2b00      	cmp	r3, #0
 8008130:	da04      	bge.n	800813c <_puts_r+0xac>
 8008132:	69a2      	ldr	r2, [r4, #24]
 8008134:	429a      	cmp	r2, r3
 8008136:	dc06      	bgt.n	8008146 <_puts_r+0xb6>
 8008138:	290a      	cmp	r1, #10
 800813a:	d004      	beq.n	8008146 <_puts_r+0xb6>
 800813c:	6823      	ldr	r3, [r4, #0]
 800813e:	1c5a      	adds	r2, r3, #1
 8008140:	6022      	str	r2, [r4, #0]
 8008142:	7019      	strb	r1, [r3, #0]
 8008144:	e7c5      	b.n	80080d2 <_puts_r+0x42>
 8008146:	4622      	mov	r2, r4
 8008148:	4628      	mov	r0, r5
 800814a:	f000 f817 	bl	800817c <__swbuf_r>
 800814e:	3001      	adds	r0, #1
 8008150:	d1bf      	bne.n	80080d2 <_puts_r+0x42>
 8008152:	e7df      	b.n	8008114 <_puts_r+0x84>
 8008154:	6823      	ldr	r3, [r4, #0]
 8008156:	250a      	movs	r5, #10
 8008158:	1c5a      	adds	r2, r3, #1
 800815a:	6022      	str	r2, [r4, #0]
 800815c:	701d      	strb	r5, [r3, #0]
 800815e:	e7db      	b.n	8008118 <_puts_r+0x88>
 8008160:	080092bc 	.word	0x080092bc
 8008164:	080092dc 	.word	0x080092dc
 8008168:	0800929c 	.word	0x0800929c

0800816c <puts>:
 800816c:	4b02      	ldr	r3, [pc, #8]	; (8008178 <puts+0xc>)
 800816e:	4601      	mov	r1, r0
 8008170:	6818      	ldr	r0, [r3, #0]
 8008172:	f7ff bf8d 	b.w	8008090 <_puts_r>
 8008176:	bf00      	nop
 8008178:	20000070 	.word	0x20000070

0800817c <__swbuf_r>:
 800817c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817e:	460e      	mov	r6, r1
 8008180:	4614      	mov	r4, r2
 8008182:	4605      	mov	r5, r0
 8008184:	b118      	cbz	r0, 800818e <__swbuf_r+0x12>
 8008186:	6983      	ldr	r3, [r0, #24]
 8008188:	b90b      	cbnz	r3, 800818e <__swbuf_r+0x12>
 800818a:	f000 f9d1 	bl	8008530 <__sinit>
 800818e:	4b21      	ldr	r3, [pc, #132]	; (8008214 <__swbuf_r+0x98>)
 8008190:	429c      	cmp	r4, r3
 8008192:	d12b      	bne.n	80081ec <__swbuf_r+0x70>
 8008194:	686c      	ldr	r4, [r5, #4]
 8008196:	69a3      	ldr	r3, [r4, #24]
 8008198:	60a3      	str	r3, [r4, #8]
 800819a:	89a3      	ldrh	r3, [r4, #12]
 800819c:	071a      	lsls	r2, r3, #28
 800819e:	d52f      	bpl.n	8008200 <__swbuf_r+0x84>
 80081a0:	6923      	ldr	r3, [r4, #16]
 80081a2:	b36b      	cbz	r3, 8008200 <__swbuf_r+0x84>
 80081a4:	6923      	ldr	r3, [r4, #16]
 80081a6:	6820      	ldr	r0, [r4, #0]
 80081a8:	1ac0      	subs	r0, r0, r3
 80081aa:	6963      	ldr	r3, [r4, #20]
 80081ac:	b2f6      	uxtb	r6, r6
 80081ae:	4283      	cmp	r3, r0
 80081b0:	4637      	mov	r7, r6
 80081b2:	dc04      	bgt.n	80081be <__swbuf_r+0x42>
 80081b4:	4621      	mov	r1, r4
 80081b6:	4628      	mov	r0, r5
 80081b8:	f000 f926 	bl	8008408 <_fflush_r>
 80081bc:	bb30      	cbnz	r0, 800820c <__swbuf_r+0x90>
 80081be:	68a3      	ldr	r3, [r4, #8]
 80081c0:	3b01      	subs	r3, #1
 80081c2:	60a3      	str	r3, [r4, #8]
 80081c4:	6823      	ldr	r3, [r4, #0]
 80081c6:	1c5a      	adds	r2, r3, #1
 80081c8:	6022      	str	r2, [r4, #0]
 80081ca:	701e      	strb	r6, [r3, #0]
 80081cc:	6963      	ldr	r3, [r4, #20]
 80081ce:	3001      	adds	r0, #1
 80081d0:	4283      	cmp	r3, r0
 80081d2:	d004      	beq.n	80081de <__swbuf_r+0x62>
 80081d4:	89a3      	ldrh	r3, [r4, #12]
 80081d6:	07db      	lsls	r3, r3, #31
 80081d8:	d506      	bpl.n	80081e8 <__swbuf_r+0x6c>
 80081da:	2e0a      	cmp	r6, #10
 80081dc:	d104      	bne.n	80081e8 <__swbuf_r+0x6c>
 80081de:	4621      	mov	r1, r4
 80081e0:	4628      	mov	r0, r5
 80081e2:	f000 f911 	bl	8008408 <_fflush_r>
 80081e6:	b988      	cbnz	r0, 800820c <__swbuf_r+0x90>
 80081e8:	4638      	mov	r0, r7
 80081ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081ec:	4b0a      	ldr	r3, [pc, #40]	; (8008218 <__swbuf_r+0x9c>)
 80081ee:	429c      	cmp	r4, r3
 80081f0:	d101      	bne.n	80081f6 <__swbuf_r+0x7a>
 80081f2:	68ac      	ldr	r4, [r5, #8]
 80081f4:	e7cf      	b.n	8008196 <__swbuf_r+0x1a>
 80081f6:	4b09      	ldr	r3, [pc, #36]	; (800821c <__swbuf_r+0xa0>)
 80081f8:	429c      	cmp	r4, r3
 80081fa:	bf08      	it	eq
 80081fc:	68ec      	ldreq	r4, [r5, #12]
 80081fe:	e7ca      	b.n	8008196 <__swbuf_r+0x1a>
 8008200:	4621      	mov	r1, r4
 8008202:	4628      	mov	r0, r5
 8008204:	f000 f80c 	bl	8008220 <__swsetup_r>
 8008208:	2800      	cmp	r0, #0
 800820a:	d0cb      	beq.n	80081a4 <__swbuf_r+0x28>
 800820c:	f04f 37ff 	mov.w	r7, #4294967295
 8008210:	e7ea      	b.n	80081e8 <__swbuf_r+0x6c>
 8008212:	bf00      	nop
 8008214:	080092bc 	.word	0x080092bc
 8008218:	080092dc 	.word	0x080092dc
 800821c:	0800929c 	.word	0x0800929c

08008220 <__swsetup_r>:
 8008220:	4b32      	ldr	r3, [pc, #200]	; (80082ec <__swsetup_r+0xcc>)
 8008222:	b570      	push	{r4, r5, r6, lr}
 8008224:	681d      	ldr	r5, [r3, #0]
 8008226:	4606      	mov	r6, r0
 8008228:	460c      	mov	r4, r1
 800822a:	b125      	cbz	r5, 8008236 <__swsetup_r+0x16>
 800822c:	69ab      	ldr	r3, [r5, #24]
 800822e:	b913      	cbnz	r3, 8008236 <__swsetup_r+0x16>
 8008230:	4628      	mov	r0, r5
 8008232:	f000 f97d 	bl	8008530 <__sinit>
 8008236:	4b2e      	ldr	r3, [pc, #184]	; (80082f0 <__swsetup_r+0xd0>)
 8008238:	429c      	cmp	r4, r3
 800823a:	d10f      	bne.n	800825c <__swsetup_r+0x3c>
 800823c:	686c      	ldr	r4, [r5, #4]
 800823e:	89a3      	ldrh	r3, [r4, #12]
 8008240:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008244:	0719      	lsls	r1, r3, #28
 8008246:	d42c      	bmi.n	80082a2 <__swsetup_r+0x82>
 8008248:	06dd      	lsls	r5, r3, #27
 800824a:	d411      	bmi.n	8008270 <__swsetup_r+0x50>
 800824c:	2309      	movs	r3, #9
 800824e:	6033      	str	r3, [r6, #0]
 8008250:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008254:	81a3      	strh	r3, [r4, #12]
 8008256:	f04f 30ff 	mov.w	r0, #4294967295
 800825a:	e03e      	b.n	80082da <__swsetup_r+0xba>
 800825c:	4b25      	ldr	r3, [pc, #148]	; (80082f4 <__swsetup_r+0xd4>)
 800825e:	429c      	cmp	r4, r3
 8008260:	d101      	bne.n	8008266 <__swsetup_r+0x46>
 8008262:	68ac      	ldr	r4, [r5, #8]
 8008264:	e7eb      	b.n	800823e <__swsetup_r+0x1e>
 8008266:	4b24      	ldr	r3, [pc, #144]	; (80082f8 <__swsetup_r+0xd8>)
 8008268:	429c      	cmp	r4, r3
 800826a:	bf08      	it	eq
 800826c:	68ec      	ldreq	r4, [r5, #12]
 800826e:	e7e6      	b.n	800823e <__swsetup_r+0x1e>
 8008270:	0758      	lsls	r0, r3, #29
 8008272:	d512      	bpl.n	800829a <__swsetup_r+0x7a>
 8008274:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008276:	b141      	cbz	r1, 800828a <__swsetup_r+0x6a>
 8008278:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800827c:	4299      	cmp	r1, r3
 800827e:	d002      	beq.n	8008286 <__swsetup_r+0x66>
 8008280:	4630      	mov	r0, r6
 8008282:	f000 fa5b 	bl	800873c <_free_r>
 8008286:	2300      	movs	r3, #0
 8008288:	6363      	str	r3, [r4, #52]	; 0x34
 800828a:	89a3      	ldrh	r3, [r4, #12]
 800828c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008290:	81a3      	strh	r3, [r4, #12]
 8008292:	2300      	movs	r3, #0
 8008294:	6063      	str	r3, [r4, #4]
 8008296:	6923      	ldr	r3, [r4, #16]
 8008298:	6023      	str	r3, [r4, #0]
 800829a:	89a3      	ldrh	r3, [r4, #12]
 800829c:	f043 0308 	orr.w	r3, r3, #8
 80082a0:	81a3      	strh	r3, [r4, #12]
 80082a2:	6923      	ldr	r3, [r4, #16]
 80082a4:	b94b      	cbnz	r3, 80082ba <__swsetup_r+0x9a>
 80082a6:	89a3      	ldrh	r3, [r4, #12]
 80082a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80082ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082b0:	d003      	beq.n	80082ba <__swsetup_r+0x9a>
 80082b2:	4621      	mov	r1, r4
 80082b4:	4630      	mov	r0, r6
 80082b6:	f000 fa01 	bl	80086bc <__smakebuf_r>
 80082ba:	89a0      	ldrh	r0, [r4, #12]
 80082bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082c0:	f010 0301 	ands.w	r3, r0, #1
 80082c4:	d00a      	beq.n	80082dc <__swsetup_r+0xbc>
 80082c6:	2300      	movs	r3, #0
 80082c8:	60a3      	str	r3, [r4, #8]
 80082ca:	6963      	ldr	r3, [r4, #20]
 80082cc:	425b      	negs	r3, r3
 80082ce:	61a3      	str	r3, [r4, #24]
 80082d0:	6923      	ldr	r3, [r4, #16]
 80082d2:	b943      	cbnz	r3, 80082e6 <__swsetup_r+0xc6>
 80082d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80082d8:	d1ba      	bne.n	8008250 <__swsetup_r+0x30>
 80082da:	bd70      	pop	{r4, r5, r6, pc}
 80082dc:	0781      	lsls	r1, r0, #30
 80082de:	bf58      	it	pl
 80082e0:	6963      	ldrpl	r3, [r4, #20]
 80082e2:	60a3      	str	r3, [r4, #8]
 80082e4:	e7f4      	b.n	80082d0 <__swsetup_r+0xb0>
 80082e6:	2000      	movs	r0, #0
 80082e8:	e7f7      	b.n	80082da <__swsetup_r+0xba>
 80082ea:	bf00      	nop
 80082ec:	20000070 	.word	0x20000070
 80082f0:	080092bc 	.word	0x080092bc
 80082f4:	080092dc 	.word	0x080092dc
 80082f8:	0800929c 	.word	0x0800929c

080082fc <__sflush_r>:
 80082fc:	898a      	ldrh	r2, [r1, #12]
 80082fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008302:	4605      	mov	r5, r0
 8008304:	0710      	lsls	r0, r2, #28
 8008306:	460c      	mov	r4, r1
 8008308:	d458      	bmi.n	80083bc <__sflush_r+0xc0>
 800830a:	684b      	ldr	r3, [r1, #4]
 800830c:	2b00      	cmp	r3, #0
 800830e:	dc05      	bgt.n	800831c <__sflush_r+0x20>
 8008310:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008312:	2b00      	cmp	r3, #0
 8008314:	dc02      	bgt.n	800831c <__sflush_r+0x20>
 8008316:	2000      	movs	r0, #0
 8008318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800831c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800831e:	2e00      	cmp	r6, #0
 8008320:	d0f9      	beq.n	8008316 <__sflush_r+0x1a>
 8008322:	2300      	movs	r3, #0
 8008324:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008328:	682f      	ldr	r7, [r5, #0]
 800832a:	602b      	str	r3, [r5, #0]
 800832c:	d032      	beq.n	8008394 <__sflush_r+0x98>
 800832e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008330:	89a3      	ldrh	r3, [r4, #12]
 8008332:	075a      	lsls	r2, r3, #29
 8008334:	d505      	bpl.n	8008342 <__sflush_r+0x46>
 8008336:	6863      	ldr	r3, [r4, #4]
 8008338:	1ac0      	subs	r0, r0, r3
 800833a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800833c:	b10b      	cbz	r3, 8008342 <__sflush_r+0x46>
 800833e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008340:	1ac0      	subs	r0, r0, r3
 8008342:	2300      	movs	r3, #0
 8008344:	4602      	mov	r2, r0
 8008346:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008348:	6a21      	ldr	r1, [r4, #32]
 800834a:	4628      	mov	r0, r5
 800834c:	47b0      	blx	r6
 800834e:	1c43      	adds	r3, r0, #1
 8008350:	89a3      	ldrh	r3, [r4, #12]
 8008352:	d106      	bne.n	8008362 <__sflush_r+0x66>
 8008354:	6829      	ldr	r1, [r5, #0]
 8008356:	291d      	cmp	r1, #29
 8008358:	d82c      	bhi.n	80083b4 <__sflush_r+0xb8>
 800835a:	4a2a      	ldr	r2, [pc, #168]	; (8008404 <__sflush_r+0x108>)
 800835c:	40ca      	lsrs	r2, r1
 800835e:	07d6      	lsls	r6, r2, #31
 8008360:	d528      	bpl.n	80083b4 <__sflush_r+0xb8>
 8008362:	2200      	movs	r2, #0
 8008364:	6062      	str	r2, [r4, #4]
 8008366:	04d9      	lsls	r1, r3, #19
 8008368:	6922      	ldr	r2, [r4, #16]
 800836a:	6022      	str	r2, [r4, #0]
 800836c:	d504      	bpl.n	8008378 <__sflush_r+0x7c>
 800836e:	1c42      	adds	r2, r0, #1
 8008370:	d101      	bne.n	8008376 <__sflush_r+0x7a>
 8008372:	682b      	ldr	r3, [r5, #0]
 8008374:	b903      	cbnz	r3, 8008378 <__sflush_r+0x7c>
 8008376:	6560      	str	r0, [r4, #84]	; 0x54
 8008378:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800837a:	602f      	str	r7, [r5, #0]
 800837c:	2900      	cmp	r1, #0
 800837e:	d0ca      	beq.n	8008316 <__sflush_r+0x1a>
 8008380:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008384:	4299      	cmp	r1, r3
 8008386:	d002      	beq.n	800838e <__sflush_r+0x92>
 8008388:	4628      	mov	r0, r5
 800838a:	f000 f9d7 	bl	800873c <_free_r>
 800838e:	2000      	movs	r0, #0
 8008390:	6360      	str	r0, [r4, #52]	; 0x34
 8008392:	e7c1      	b.n	8008318 <__sflush_r+0x1c>
 8008394:	6a21      	ldr	r1, [r4, #32]
 8008396:	2301      	movs	r3, #1
 8008398:	4628      	mov	r0, r5
 800839a:	47b0      	blx	r6
 800839c:	1c41      	adds	r1, r0, #1
 800839e:	d1c7      	bne.n	8008330 <__sflush_r+0x34>
 80083a0:	682b      	ldr	r3, [r5, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d0c4      	beq.n	8008330 <__sflush_r+0x34>
 80083a6:	2b1d      	cmp	r3, #29
 80083a8:	d001      	beq.n	80083ae <__sflush_r+0xb2>
 80083aa:	2b16      	cmp	r3, #22
 80083ac:	d101      	bne.n	80083b2 <__sflush_r+0xb6>
 80083ae:	602f      	str	r7, [r5, #0]
 80083b0:	e7b1      	b.n	8008316 <__sflush_r+0x1a>
 80083b2:	89a3      	ldrh	r3, [r4, #12]
 80083b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083b8:	81a3      	strh	r3, [r4, #12]
 80083ba:	e7ad      	b.n	8008318 <__sflush_r+0x1c>
 80083bc:	690f      	ldr	r7, [r1, #16]
 80083be:	2f00      	cmp	r7, #0
 80083c0:	d0a9      	beq.n	8008316 <__sflush_r+0x1a>
 80083c2:	0793      	lsls	r3, r2, #30
 80083c4:	680e      	ldr	r6, [r1, #0]
 80083c6:	bf08      	it	eq
 80083c8:	694b      	ldreq	r3, [r1, #20]
 80083ca:	600f      	str	r7, [r1, #0]
 80083cc:	bf18      	it	ne
 80083ce:	2300      	movne	r3, #0
 80083d0:	eba6 0807 	sub.w	r8, r6, r7
 80083d4:	608b      	str	r3, [r1, #8]
 80083d6:	f1b8 0f00 	cmp.w	r8, #0
 80083da:	dd9c      	ble.n	8008316 <__sflush_r+0x1a>
 80083dc:	6a21      	ldr	r1, [r4, #32]
 80083de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80083e0:	4643      	mov	r3, r8
 80083e2:	463a      	mov	r2, r7
 80083e4:	4628      	mov	r0, r5
 80083e6:	47b0      	blx	r6
 80083e8:	2800      	cmp	r0, #0
 80083ea:	dc06      	bgt.n	80083fa <__sflush_r+0xfe>
 80083ec:	89a3      	ldrh	r3, [r4, #12]
 80083ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083f2:	81a3      	strh	r3, [r4, #12]
 80083f4:	f04f 30ff 	mov.w	r0, #4294967295
 80083f8:	e78e      	b.n	8008318 <__sflush_r+0x1c>
 80083fa:	4407      	add	r7, r0
 80083fc:	eba8 0800 	sub.w	r8, r8, r0
 8008400:	e7e9      	b.n	80083d6 <__sflush_r+0xda>
 8008402:	bf00      	nop
 8008404:	20400001 	.word	0x20400001

08008408 <_fflush_r>:
 8008408:	b538      	push	{r3, r4, r5, lr}
 800840a:	690b      	ldr	r3, [r1, #16]
 800840c:	4605      	mov	r5, r0
 800840e:	460c      	mov	r4, r1
 8008410:	b913      	cbnz	r3, 8008418 <_fflush_r+0x10>
 8008412:	2500      	movs	r5, #0
 8008414:	4628      	mov	r0, r5
 8008416:	bd38      	pop	{r3, r4, r5, pc}
 8008418:	b118      	cbz	r0, 8008422 <_fflush_r+0x1a>
 800841a:	6983      	ldr	r3, [r0, #24]
 800841c:	b90b      	cbnz	r3, 8008422 <_fflush_r+0x1a>
 800841e:	f000 f887 	bl	8008530 <__sinit>
 8008422:	4b14      	ldr	r3, [pc, #80]	; (8008474 <_fflush_r+0x6c>)
 8008424:	429c      	cmp	r4, r3
 8008426:	d11b      	bne.n	8008460 <_fflush_r+0x58>
 8008428:	686c      	ldr	r4, [r5, #4]
 800842a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d0ef      	beq.n	8008412 <_fflush_r+0xa>
 8008432:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008434:	07d0      	lsls	r0, r2, #31
 8008436:	d404      	bmi.n	8008442 <_fflush_r+0x3a>
 8008438:	0599      	lsls	r1, r3, #22
 800843a:	d402      	bmi.n	8008442 <_fflush_r+0x3a>
 800843c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800843e:	f000 f915 	bl	800866c <__retarget_lock_acquire_recursive>
 8008442:	4628      	mov	r0, r5
 8008444:	4621      	mov	r1, r4
 8008446:	f7ff ff59 	bl	80082fc <__sflush_r>
 800844a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800844c:	07da      	lsls	r2, r3, #31
 800844e:	4605      	mov	r5, r0
 8008450:	d4e0      	bmi.n	8008414 <_fflush_r+0xc>
 8008452:	89a3      	ldrh	r3, [r4, #12]
 8008454:	059b      	lsls	r3, r3, #22
 8008456:	d4dd      	bmi.n	8008414 <_fflush_r+0xc>
 8008458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800845a:	f000 f908 	bl	800866e <__retarget_lock_release_recursive>
 800845e:	e7d9      	b.n	8008414 <_fflush_r+0xc>
 8008460:	4b05      	ldr	r3, [pc, #20]	; (8008478 <_fflush_r+0x70>)
 8008462:	429c      	cmp	r4, r3
 8008464:	d101      	bne.n	800846a <_fflush_r+0x62>
 8008466:	68ac      	ldr	r4, [r5, #8]
 8008468:	e7df      	b.n	800842a <_fflush_r+0x22>
 800846a:	4b04      	ldr	r3, [pc, #16]	; (800847c <_fflush_r+0x74>)
 800846c:	429c      	cmp	r4, r3
 800846e:	bf08      	it	eq
 8008470:	68ec      	ldreq	r4, [r5, #12]
 8008472:	e7da      	b.n	800842a <_fflush_r+0x22>
 8008474:	080092bc 	.word	0x080092bc
 8008478:	080092dc 	.word	0x080092dc
 800847c:	0800929c 	.word	0x0800929c

08008480 <std>:
 8008480:	2300      	movs	r3, #0
 8008482:	b510      	push	{r4, lr}
 8008484:	4604      	mov	r4, r0
 8008486:	e9c0 3300 	strd	r3, r3, [r0]
 800848a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800848e:	6083      	str	r3, [r0, #8]
 8008490:	8181      	strh	r1, [r0, #12]
 8008492:	6643      	str	r3, [r0, #100]	; 0x64
 8008494:	81c2      	strh	r2, [r0, #14]
 8008496:	6183      	str	r3, [r0, #24]
 8008498:	4619      	mov	r1, r3
 800849a:	2208      	movs	r2, #8
 800849c:	305c      	adds	r0, #92	; 0x5c
 800849e:	f7ff fdd7 	bl	8008050 <memset>
 80084a2:	4b05      	ldr	r3, [pc, #20]	; (80084b8 <std+0x38>)
 80084a4:	6263      	str	r3, [r4, #36]	; 0x24
 80084a6:	4b05      	ldr	r3, [pc, #20]	; (80084bc <std+0x3c>)
 80084a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80084aa:	4b05      	ldr	r3, [pc, #20]	; (80084c0 <std+0x40>)
 80084ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084ae:	4b05      	ldr	r3, [pc, #20]	; (80084c4 <std+0x44>)
 80084b0:	6224      	str	r4, [r4, #32]
 80084b2:	6323      	str	r3, [r4, #48]	; 0x30
 80084b4:	bd10      	pop	{r4, pc}
 80084b6:	bf00      	nop
 80084b8:	08008ef9 	.word	0x08008ef9
 80084bc:	08008f1b 	.word	0x08008f1b
 80084c0:	08008f53 	.word	0x08008f53
 80084c4:	08008f77 	.word	0x08008f77

080084c8 <_cleanup_r>:
 80084c8:	4901      	ldr	r1, [pc, #4]	; (80084d0 <_cleanup_r+0x8>)
 80084ca:	f000 b8af 	b.w	800862c <_fwalk_reent>
 80084ce:	bf00      	nop
 80084d0:	08008409 	.word	0x08008409

080084d4 <__sfmoreglue>:
 80084d4:	b570      	push	{r4, r5, r6, lr}
 80084d6:	2268      	movs	r2, #104	; 0x68
 80084d8:	1e4d      	subs	r5, r1, #1
 80084da:	4355      	muls	r5, r2
 80084dc:	460e      	mov	r6, r1
 80084de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80084e2:	f000 f997 	bl	8008814 <_malloc_r>
 80084e6:	4604      	mov	r4, r0
 80084e8:	b140      	cbz	r0, 80084fc <__sfmoreglue+0x28>
 80084ea:	2100      	movs	r1, #0
 80084ec:	e9c0 1600 	strd	r1, r6, [r0]
 80084f0:	300c      	adds	r0, #12
 80084f2:	60a0      	str	r0, [r4, #8]
 80084f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80084f8:	f7ff fdaa 	bl	8008050 <memset>
 80084fc:	4620      	mov	r0, r4
 80084fe:	bd70      	pop	{r4, r5, r6, pc}

08008500 <__sfp_lock_acquire>:
 8008500:	4801      	ldr	r0, [pc, #4]	; (8008508 <__sfp_lock_acquire+0x8>)
 8008502:	f000 b8b3 	b.w	800866c <__retarget_lock_acquire_recursive>
 8008506:	bf00      	nop
 8008508:	200006dd 	.word	0x200006dd

0800850c <__sfp_lock_release>:
 800850c:	4801      	ldr	r0, [pc, #4]	; (8008514 <__sfp_lock_release+0x8>)
 800850e:	f000 b8ae 	b.w	800866e <__retarget_lock_release_recursive>
 8008512:	bf00      	nop
 8008514:	200006dd 	.word	0x200006dd

08008518 <__sinit_lock_acquire>:
 8008518:	4801      	ldr	r0, [pc, #4]	; (8008520 <__sinit_lock_acquire+0x8>)
 800851a:	f000 b8a7 	b.w	800866c <__retarget_lock_acquire_recursive>
 800851e:	bf00      	nop
 8008520:	200006de 	.word	0x200006de

08008524 <__sinit_lock_release>:
 8008524:	4801      	ldr	r0, [pc, #4]	; (800852c <__sinit_lock_release+0x8>)
 8008526:	f000 b8a2 	b.w	800866e <__retarget_lock_release_recursive>
 800852a:	bf00      	nop
 800852c:	200006de 	.word	0x200006de

08008530 <__sinit>:
 8008530:	b510      	push	{r4, lr}
 8008532:	4604      	mov	r4, r0
 8008534:	f7ff fff0 	bl	8008518 <__sinit_lock_acquire>
 8008538:	69a3      	ldr	r3, [r4, #24]
 800853a:	b11b      	cbz	r3, 8008544 <__sinit+0x14>
 800853c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008540:	f7ff bff0 	b.w	8008524 <__sinit_lock_release>
 8008544:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008548:	6523      	str	r3, [r4, #80]	; 0x50
 800854a:	4b13      	ldr	r3, [pc, #76]	; (8008598 <__sinit+0x68>)
 800854c:	4a13      	ldr	r2, [pc, #76]	; (800859c <__sinit+0x6c>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	62a2      	str	r2, [r4, #40]	; 0x28
 8008552:	42a3      	cmp	r3, r4
 8008554:	bf04      	itt	eq
 8008556:	2301      	moveq	r3, #1
 8008558:	61a3      	streq	r3, [r4, #24]
 800855a:	4620      	mov	r0, r4
 800855c:	f000 f820 	bl	80085a0 <__sfp>
 8008560:	6060      	str	r0, [r4, #4]
 8008562:	4620      	mov	r0, r4
 8008564:	f000 f81c 	bl	80085a0 <__sfp>
 8008568:	60a0      	str	r0, [r4, #8]
 800856a:	4620      	mov	r0, r4
 800856c:	f000 f818 	bl	80085a0 <__sfp>
 8008570:	2200      	movs	r2, #0
 8008572:	60e0      	str	r0, [r4, #12]
 8008574:	2104      	movs	r1, #4
 8008576:	6860      	ldr	r0, [r4, #4]
 8008578:	f7ff ff82 	bl	8008480 <std>
 800857c:	68a0      	ldr	r0, [r4, #8]
 800857e:	2201      	movs	r2, #1
 8008580:	2109      	movs	r1, #9
 8008582:	f7ff ff7d 	bl	8008480 <std>
 8008586:	68e0      	ldr	r0, [r4, #12]
 8008588:	2202      	movs	r2, #2
 800858a:	2112      	movs	r1, #18
 800858c:	f7ff ff78 	bl	8008480 <std>
 8008590:	2301      	movs	r3, #1
 8008592:	61a3      	str	r3, [r4, #24]
 8008594:	e7d2      	b.n	800853c <__sinit+0xc>
 8008596:	bf00      	nop
 8008598:	08009298 	.word	0x08009298
 800859c:	080084c9 	.word	0x080084c9

080085a0 <__sfp>:
 80085a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085a2:	4607      	mov	r7, r0
 80085a4:	f7ff ffac 	bl	8008500 <__sfp_lock_acquire>
 80085a8:	4b1e      	ldr	r3, [pc, #120]	; (8008624 <__sfp+0x84>)
 80085aa:	681e      	ldr	r6, [r3, #0]
 80085ac:	69b3      	ldr	r3, [r6, #24]
 80085ae:	b913      	cbnz	r3, 80085b6 <__sfp+0x16>
 80085b0:	4630      	mov	r0, r6
 80085b2:	f7ff ffbd 	bl	8008530 <__sinit>
 80085b6:	3648      	adds	r6, #72	; 0x48
 80085b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80085bc:	3b01      	subs	r3, #1
 80085be:	d503      	bpl.n	80085c8 <__sfp+0x28>
 80085c0:	6833      	ldr	r3, [r6, #0]
 80085c2:	b30b      	cbz	r3, 8008608 <__sfp+0x68>
 80085c4:	6836      	ldr	r6, [r6, #0]
 80085c6:	e7f7      	b.n	80085b8 <__sfp+0x18>
 80085c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80085cc:	b9d5      	cbnz	r5, 8008604 <__sfp+0x64>
 80085ce:	4b16      	ldr	r3, [pc, #88]	; (8008628 <__sfp+0x88>)
 80085d0:	60e3      	str	r3, [r4, #12]
 80085d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80085d6:	6665      	str	r5, [r4, #100]	; 0x64
 80085d8:	f000 f847 	bl	800866a <__retarget_lock_init_recursive>
 80085dc:	f7ff ff96 	bl	800850c <__sfp_lock_release>
 80085e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80085e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80085e8:	6025      	str	r5, [r4, #0]
 80085ea:	61a5      	str	r5, [r4, #24]
 80085ec:	2208      	movs	r2, #8
 80085ee:	4629      	mov	r1, r5
 80085f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80085f4:	f7ff fd2c 	bl	8008050 <memset>
 80085f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80085fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008600:	4620      	mov	r0, r4
 8008602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008604:	3468      	adds	r4, #104	; 0x68
 8008606:	e7d9      	b.n	80085bc <__sfp+0x1c>
 8008608:	2104      	movs	r1, #4
 800860a:	4638      	mov	r0, r7
 800860c:	f7ff ff62 	bl	80084d4 <__sfmoreglue>
 8008610:	4604      	mov	r4, r0
 8008612:	6030      	str	r0, [r6, #0]
 8008614:	2800      	cmp	r0, #0
 8008616:	d1d5      	bne.n	80085c4 <__sfp+0x24>
 8008618:	f7ff ff78 	bl	800850c <__sfp_lock_release>
 800861c:	230c      	movs	r3, #12
 800861e:	603b      	str	r3, [r7, #0]
 8008620:	e7ee      	b.n	8008600 <__sfp+0x60>
 8008622:	bf00      	nop
 8008624:	08009298 	.word	0x08009298
 8008628:	ffff0001 	.word	0xffff0001

0800862c <_fwalk_reent>:
 800862c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008630:	4606      	mov	r6, r0
 8008632:	4688      	mov	r8, r1
 8008634:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008638:	2700      	movs	r7, #0
 800863a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800863e:	f1b9 0901 	subs.w	r9, r9, #1
 8008642:	d505      	bpl.n	8008650 <_fwalk_reent+0x24>
 8008644:	6824      	ldr	r4, [r4, #0]
 8008646:	2c00      	cmp	r4, #0
 8008648:	d1f7      	bne.n	800863a <_fwalk_reent+0xe>
 800864a:	4638      	mov	r0, r7
 800864c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008650:	89ab      	ldrh	r3, [r5, #12]
 8008652:	2b01      	cmp	r3, #1
 8008654:	d907      	bls.n	8008666 <_fwalk_reent+0x3a>
 8008656:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800865a:	3301      	adds	r3, #1
 800865c:	d003      	beq.n	8008666 <_fwalk_reent+0x3a>
 800865e:	4629      	mov	r1, r5
 8008660:	4630      	mov	r0, r6
 8008662:	47c0      	blx	r8
 8008664:	4307      	orrs	r7, r0
 8008666:	3568      	adds	r5, #104	; 0x68
 8008668:	e7e9      	b.n	800863e <_fwalk_reent+0x12>

0800866a <__retarget_lock_init_recursive>:
 800866a:	4770      	bx	lr

0800866c <__retarget_lock_acquire_recursive>:
 800866c:	4770      	bx	lr

0800866e <__retarget_lock_release_recursive>:
 800866e:	4770      	bx	lr

08008670 <__swhatbuf_r>:
 8008670:	b570      	push	{r4, r5, r6, lr}
 8008672:	460e      	mov	r6, r1
 8008674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008678:	2900      	cmp	r1, #0
 800867a:	b096      	sub	sp, #88	; 0x58
 800867c:	4614      	mov	r4, r2
 800867e:	461d      	mov	r5, r3
 8008680:	da08      	bge.n	8008694 <__swhatbuf_r+0x24>
 8008682:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008686:	2200      	movs	r2, #0
 8008688:	602a      	str	r2, [r5, #0]
 800868a:	061a      	lsls	r2, r3, #24
 800868c:	d410      	bmi.n	80086b0 <__swhatbuf_r+0x40>
 800868e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008692:	e00e      	b.n	80086b2 <__swhatbuf_r+0x42>
 8008694:	466a      	mov	r2, sp
 8008696:	f000 fc95 	bl	8008fc4 <_fstat_r>
 800869a:	2800      	cmp	r0, #0
 800869c:	dbf1      	blt.n	8008682 <__swhatbuf_r+0x12>
 800869e:	9a01      	ldr	r2, [sp, #4]
 80086a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80086a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80086a8:	425a      	negs	r2, r3
 80086aa:	415a      	adcs	r2, r3
 80086ac:	602a      	str	r2, [r5, #0]
 80086ae:	e7ee      	b.n	800868e <__swhatbuf_r+0x1e>
 80086b0:	2340      	movs	r3, #64	; 0x40
 80086b2:	2000      	movs	r0, #0
 80086b4:	6023      	str	r3, [r4, #0]
 80086b6:	b016      	add	sp, #88	; 0x58
 80086b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080086bc <__smakebuf_r>:
 80086bc:	898b      	ldrh	r3, [r1, #12]
 80086be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80086c0:	079d      	lsls	r5, r3, #30
 80086c2:	4606      	mov	r6, r0
 80086c4:	460c      	mov	r4, r1
 80086c6:	d507      	bpl.n	80086d8 <__smakebuf_r+0x1c>
 80086c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80086cc:	6023      	str	r3, [r4, #0]
 80086ce:	6123      	str	r3, [r4, #16]
 80086d0:	2301      	movs	r3, #1
 80086d2:	6163      	str	r3, [r4, #20]
 80086d4:	b002      	add	sp, #8
 80086d6:	bd70      	pop	{r4, r5, r6, pc}
 80086d8:	ab01      	add	r3, sp, #4
 80086da:	466a      	mov	r2, sp
 80086dc:	f7ff ffc8 	bl	8008670 <__swhatbuf_r>
 80086e0:	9900      	ldr	r1, [sp, #0]
 80086e2:	4605      	mov	r5, r0
 80086e4:	4630      	mov	r0, r6
 80086e6:	f000 f895 	bl	8008814 <_malloc_r>
 80086ea:	b948      	cbnz	r0, 8008700 <__smakebuf_r+0x44>
 80086ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086f0:	059a      	lsls	r2, r3, #22
 80086f2:	d4ef      	bmi.n	80086d4 <__smakebuf_r+0x18>
 80086f4:	f023 0303 	bic.w	r3, r3, #3
 80086f8:	f043 0302 	orr.w	r3, r3, #2
 80086fc:	81a3      	strh	r3, [r4, #12]
 80086fe:	e7e3      	b.n	80086c8 <__smakebuf_r+0xc>
 8008700:	4b0d      	ldr	r3, [pc, #52]	; (8008738 <__smakebuf_r+0x7c>)
 8008702:	62b3      	str	r3, [r6, #40]	; 0x28
 8008704:	89a3      	ldrh	r3, [r4, #12]
 8008706:	6020      	str	r0, [r4, #0]
 8008708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800870c:	81a3      	strh	r3, [r4, #12]
 800870e:	9b00      	ldr	r3, [sp, #0]
 8008710:	6163      	str	r3, [r4, #20]
 8008712:	9b01      	ldr	r3, [sp, #4]
 8008714:	6120      	str	r0, [r4, #16]
 8008716:	b15b      	cbz	r3, 8008730 <__smakebuf_r+0x74>
 8008718:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800871c:	4630      	mov	r0, r6
 800871e:	f000 fc63 	bl	8008fe8 <_isatty_r>
 8008722:	b128      	cbz	r0, 8008730 <__smakebuf_r+0x74>
 8008724:	89a3      	ldrh	r3, [r4, #12]
 8008726:	f023 0303 	bic.w	r3, r3, #3
 800872a:	f043 0301 	orr.w	r3, r3, #1
 800872e:	81a3      	strh	r3, [r4, #12]
 8008730:	89a0      	ldrh	r0, [r4, #12]
 8008732:	4305      	orrs	r5, r0
 8008734:	81a5      	strh	r5, [r4, #12]
 8008736:	e7cd      	b.n	80086d4 <__smakebuf_r+0x18>
 8008738:	080084c9 	.word	0x080084c9

0800873c <_free_r>:
 800873c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800873e:	2900      	cmp	r1, #0
 8008740:	d044      	beq.n	80087cc <_free_r+0x90>
 8008742:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008746:	9001      	str	r0, [sp, #4]
 8008748:	2b00      	cmp	r3, #0
 800874a:	f1a1 0404 	sub.w	r4, r1, #4
 800874e:	bfb8      	it	lt
 8008750:	18e4      	addlt	r4, r4, r3
 8008752:	f000 fc6b 	bl	800902c <__malloc_lock>
 8008756:	4a1e      	ldr	r2, [pc, #120]	; (80087d0 <_free_r+0x94>)
 8008758:	9801      	ldr	r0, [sp, #4]
 800875a:	6813      	ldr	r3, [r2, #0]
 800875c:	b933      	cbnz	r3, 800876c <_free_r+0x30>
 800875e:	6063      	str	r3, [r4, #4]
 8008760:	6014      	str	r4, [r2, #0]
 8008762:	b003      	add	sp, #12
 8008764:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008768:	f000 bc66 	b.w	8009038 <__malloc_unlock>
 800876c:	42a3      	cmp	r3, r4
 800876e:	d908      	bls.n	8008782 <_free_r+0x46>
 8008770:	6825      	ldr	r5, [r4, #0]
 8008772:	1961      	adds	r1, r4, r5
 8008774:	428b      	cmp	r3, r1
 8008776:	bf01      	itttt	eq
 8008778:	6819      	ldreq	r1, [r3, #0]
 800877a:	685b      	ldreq	r3, [r3, #4]
 800877c:	1949      	addeq	r1, r1, r5
 800877e:	6021      	streq	r1, [r4, #0]
 8008780:	e7ed      	b.n	800875e <_free_r+0x22>
 8008782:	461a      	mov	r2, r3
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	b10b      	cbz	r3, 800878c <_free_r+0x50>
 8008788:	42a3      	cmp	r3, r4
 800878a:	d9fa      	bls.n	8008782 <_free_r+0x46>
 800878c:	6811      	ldr	r1, [r2, #0]
 800878e:	1855      	adds	r5, r2, r1
 8008790:	42a5      	cmp	r5, r4
 8008792:	d10b      	bne.n	80087ac <_free_r+0x70>
 8008794:	6824      	ldr	r4, [r4, #0]
 8008796:	4421      	add	r1, r4
 8008798:	1854      	adds	r4, r2, r1
 800879a:	42a3      	cmp	r3, r4
 800879c:	6011      	str	r1, [r2, #0]
 800879e:	d1e0      	bne.n	8008762 <_free_r+0x26>
 80087a0:	681c      	ldr	r4, [r3, #0]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	6053      	str	r3, [r2, #4]
 80087a6:	4421      	add	r1, r4
 80087a8:	6011      	str	r1, [r2, #0]
 80087aa:	e7da      	b.n	8008762 <_free_r+0x26>
 80087ac:	d902      	bls.n	80087b4 <_free_r+0x78>
 80087ae:	230c      	movs	r3, #12
 80087b0:	6003      	str	r3, [r0, #0]
 80087b2:	e7d6      	b.n	8008762 <_free_r+0x26>
 80087b4:	6825      	ldr	r5, [r4, #0]
 80087b6:	1961      	adds	r1, r4, r5
 80087b8:	428b      	cmp	r3, r1
 80087ba:	bf04      	itt	eq
 80087bc:	6819      	ldreq	r1, [r3, #0]
 80087be:	685b      	ldreq	r3, [r3, #4]
 80087c0:	6063      	str	r3, [r4, #4]
 80087c2:	bf04      	itt	eq
 80087c4:	1949      	addeq	r1, r1, r5
 80087c6:	6021      	streq	r1, [r4, #0]
 80087c8:	6054      	str	r4, [r2, #4]
 80087ca:	e7ca      	b.n	8008762 <_free_r+0x26>
 80087cc:	b003      	add	sp, #12
 80087ce:	bd30      	pop	{r4, r5, pc}
 80087d0:	200006e0 	.word	0x200006e0

080087d4 <sbrk_aligned>:
 80087d4:	b570      	push	{r4, r5, r6, lr}
 80087d6:	4e0e      	ldr	r6, [pc, #56]	; (8008810 <sbrk_aligned+0x3c>)
 80087d8:	460c      	mov	r4, r1
 80087da:	6831      	ldr	r1, [r6, #0]
 80087dc:	4605      	mov	r5, r0
 80087de:	b911      	cbnz	r1, 80087e6 <sbrk_aligned+0x12>
 80087e0:	f000 fb7a 	bl	8008ed8 <_sbrk_r>
 80087e4:	6030      	str	r0, [r6, #0]
 80087e6:	4621      	mov	r1, r4
 80087e8:	4628      	mov	r0, r5
 80087ea:	f000 fb75 	bl	8008ed8 <_sbrk_r>
 80087ee:	1c43      	adds	r3, r0, #1
 80087f0:	d00a      	beq.n	8008808 <sbrk_aligned+0x34>
 80087f2:	1cc4      	adds	r4, r0, #3
 80087f4:	f024 0403 	bic.w	r4, r4, #3
 80087f8:	42a0      	cmp	r0, r4
 80087fa:	d007      	beq.n	800880c <sbrk_aligned+0x38>
 80087fc:	1a21      	subs	r1, r4, r0
 80087fe:	4628      	mov	r0, r5
 8008800:	f000 fb6a 	bl	8008ed8 <_sbrk_r>
 8008804:	3001      	adds	r0, #1
 8008806:	d101      	bne.n	800880c <sbrk_aligned+0x38>
 8008808:	f04f 34ff 	mov.w	r4, #4294967295
 800880c:	4620      	mov	r0, r4
 800880e:	bd70      	pop	{r4, r5, r6, pc}
 8008810:	200006e4 	.word	0x200006e4

08008814 <_malloc_r>:
 8008814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008818:	1ccd      	adds	r5, r1, #3
 800881a:	f025 0503 	bic.w	r5, r5, #3
 800881e:	3508      	adds	r5, #8
 8008820:	2d0c      	cmp	r5, #12
 8008822:	bf38      	it	cc
 8008824:	250c      	movcc	r5, #12
 8008826:	2d00      	cmp	r5, #0
 8008828:	4607      	mov	r7, r0
 800882a:	db01      	blt.n	8008830 <_malloc_r+0x1c>
 800882c:	42a9      	cmp	r1, r5
 800882e:	d905      	bls.n	800883c <_malloc_r+0x28>
 8008830:	230c      	movs	r3, #12
 8008832:	603b      	str	r3, [r7, #0]
 8008834:	2600      	movs	r6, #0
 8008836:	4630      	mov	r0, r6
 8008838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800883c:	4e2e      	ldr	r6, [pc, #184]	; (80088f8 <_malloc_r+0xe4>)
 800883e:	f000 fbf5 	bl	800902c <__malloc_lock>
 8008842:	6833      	ldr	r3, [r6, #0]
 8008844:	461c      	mov	r4, r3
 8008846:	bb34      	cbnz	r4, 8008896 <_malloc_r+0x82>
 8008848:	4629      	mov	r1, r5
 800884a:	4638      	mov	r0, r7
 800884c:	f7ff ffc2 	bl	80087d4 <sbrk_aligned>
 8008850:	1c43      	adds	r3, r0, #1
 8008852:	4604      	mov	r4, r0
 8008854:	d14d      	bne.n	80088f2 <_malloc_r+0xde>
 8008856:	6834      	ldr	r4, [r6, #0]
 8008858:	4626      	mov	r6, r4
 800885a:	2e00      	cmp	r6, #0
 800885c:	d140      	bne.n	80088e0 <_malloc_r+0xcc>
 800885e:	6823      	ldr	r3, [r4, #0]
 8008860:	4631      	mov	r1, r6
 8008862:	4638      	mov	r0, r7
 8008864:	eb04 0803 	add.w	r8, r4, r3
 8008868:	f000 fb36 	bl	8008ed8 <_sbrk_r>
 800886c:	4580      	cmp	r8, r0
 800886e:	d13a      	bne.n	80088e6 <_malloc_r+0xd2>
 8008870:	6821      	ldr	r1, [r4, #0]
 8008872:	3503      	adds	r5, #3
 8008874:	1a6d      	subs	r5, r5, r1
 8008876:	f025 0503 	bic.w	r5, r5, #3
 800887a:	3508      	adds	r5, #8
 800887c:	2d0c      	cmp	r5, #12
 800887e:	bf38      	it	cc
 8008880:	250c      	movcc	r5, #12
 8008882:	4629      	mov	r1, r5
 8008884:	4638      	mov	r0, r7
 8008886:	f7ff ffa5 	bl	80087d4 <sbrk_aligned>
 800888a:	3001      	adds	r0, #1
 800888c:	d02b      	beq.n	80088e6 <_malloc_r+0xd2>
 800888e:	6823      	ldr	r3, [r4, #0]
 8008890:	442b      	add	r3, r5
 8008892:	6023      	str	r3, [r4, #0]
 8008894:	e00e      	b.n	80088b4 <_malloc_r+0xa0>
 8008896:	6822      	ldr	r2, [r4, #0]
 8008898:	1b52      	subs	r2, r2, r5
 800889a:	d41e      	bmi.n	80088da <_malloc_r+0xc6>
 800889c:	2a0b      	cmp	r2, #11
 800889e:	d916      	bls.n	80088ce <_malloc_r+0xba>
 80088a0:	1961      	adds	r1, r4, r5
 80088a2:	42a3      	cmp	r3, r4
 80088a4:	6025      	str	r5, [r4, #0]
 80088a6:	bf18      	it	ne
 80088a8:	6059      	strne	r1, [r3, #4]
 80088aa:	6863      	ldr	r3, [r4, #4]
 80088ac:	bf08      	it	eq
 80088ae:	6031      	streq	r1, [r6, #0]
 80088b0:	5162      	str	r2, [r4, r5]
 80088b2:	604b      	str	r3, [r1, #4]
 80088b4:	4638      	mov	r0, r7
 80088b6:	f104 060b 	add.w	r6, r4, #11
 80088ba:	f000 fbbd 	bl	8009038 <__malloc_unlock>
 80088be:	f026 0607 	bic.w	r6, r6, #7
 80088c2:	1d23      	adds	r3, r4, #4
 80088c4:	1af2      	subs	r2, r6, r3
 80088c6:	d0b6      	beq.n	8008836 <_malloc_r+0x22>
 80088c8:	1b9b      	subs	r3, r3, r6
 80088ca:	50a3      	str	r3, [r4, r2]
 80088cc:	e7b3      	b.n	8008836 <_malloc_r+0x22>
 80088ce:	6862      	ldr	r2, [r4, #4]
 80088d0:	42a3      	cmp	r3, r4
 80088d2:	bf0c      	ite	eq
 80088d4:	6032      	streq	r2, [r6, #0]
 80088d6:	605a      	strne	r2, [r3, #4]
 80088d8:	e7ec      	b.n	80088b4 <_malloc_r+0xa0>
 80088da:	4623      	mov	r3, r4
 80088dc:	6864      	ldr	r4, [r4, #4]
 80088de:	e7b2      	b.n	8008846 <_malloc_r+0x32>
 80088e0:	4634      	mov	r4, r6
 80088e2:	6876      	ldr	r6, [r6, #4]
 80088e4:	e7b9      	b.n	800885a <_malloc_r+0x46>
 80088e6:	230c      	movs	r3, #12
 80088e8:	603b      	str	r3, [r7, #0]
 80088ea:	4638      	mov	r0, r7
 80088ec:	f000 fba4 	bl	8009038 <__malloc_unlock>
 80088f0:	e7a1      	b.n	8008836 <_malloc_r+0x22>
 80088f2:	6025      	str	r5, [r4, #0]
 80088f4:	e7de      	b.n	80088b4 <_malloc_r+0xa0>
 80088f6:	bf00      	nop
 80088f8:	200006e0 	.word	0x200006e0

080088fc <__sfputc_r>:
 80088fc:	6893      	ldr	r3, [r2, #8]
 80088fe:	3b01      	subs	r3, #1
 8008900:	2b00      	cmp	r3, #0
 8008902:	b410      	push	{r4}
 8008904:	6093      	str	r3, [r2, #8]
 8008906:	da08      	bge.n	800891a <__sfputc_r+0x1e>
 8008908:	6994      	ldr	r4, [r2, #24]
 800890a:	42a3      	cmp	r3, r4
 800890c:	db01      	blt.n	8008912 <__sfputc_r+0x16>
 800890e:	290a      	cmp	r1, #10
 8008910:	d103      	bne.n	800891a <__sfputc_r+0x1e>
 8008912:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008916:	f7ff bc31 	b.w	800817c <__swbuf_r>
 800891a:	6813      	ldr	r3, [r2, #0]
 800891c:	1c58      	adds	r0, r3, #1
 800891e:	6010      	str	r0, [r2, #0]
 8008920:	7019      	strb	r1, [r3, #0]
 8008922:	4608      	mov	r0, r1
 8008924:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008928:	4770      	bx	lr

0800892a <__sfputs_r>:
 800892a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800892c:	4606      	mov	r6, r0
 800892e:	460f      	mov	r7, r1
 8008930:	4614      	mov	r4, r2
 8008932:	18d5      	adds	r5, r2, r3
 8008934:	42ac      	cmp	r4, r5
 8008936:	d101      	bne.n	800893c <__sfputs_r+0x12>
 8008938:	2000      	movs	r0, #0
 800893a:	e007      	b.n	800894c <__sfputs_r+0x22>
 800893c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008940:	463a      	mov	r2, r7
 8008942:	4630      	mov	r0, r6
 8008944:	f7ff ffda 	bl	80088fc <__sfputc_r>
 8008948:	1c43      	adds	r3, r0, #1
 800894a:	d1f3      	bne.n	8008934 <__sfputs_r+0xa>
 800894c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008950 <_vfiprintf_r>:
 8008950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008954:	460d      	mov	r5, r1
 8008956:	b09d      	sub	sp, #116	; 0x74
 8008958:	4614      	mov	r4, r2
 800895a:	4698      	mov	r8, r3
 800895c:	4606      	mov	r6, r0
 800895e:	b118      	cbz	r0, 8008968 <_vfiprintf_r+0x18>
 8008960:	6983      	ldr	r3, [r0, #24]
 8008962:	b90b      	cbnz	r3, 8008968 <_vfiprintf_r+0x18>
 8008964:	f7ff fde4 	bl	8008530 <__sinit>
 8008968:	4b89      	ldr	r3, [pc, #548]	; (8008b90 <_vfiprintf_r+0x240>)
 800896a:	429d      	cmp	r5, r3
 800896c:	d11b      	bne.n	80089a6 <_vfiprintf_r+0x56>
 800896e:	6875      	ldr	r5, [r6, #4]
 8008970:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008972:	07d9      	lsls	r1, r3, #31
 8008974:	d405      	bmi.n	8008982 <_vfiprintf_r+0x32>
 8008976:	89ab      	ldrh	r3, [r5, #12]
 8008978:	059a      	lsls	r2, r3, #22
 800897a:	d402      	bmi.n	8008982 <_vfiprintf_r+0x32>
 800897c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800897e:	f7ff fe75 	bl	800866c <__retarget_lock_acquire_recursive>
 8008982:	89ab      	ldrh	r3, [r5, #12]
 8008984:	071b      	lsls	r3, r3, #28
 8008986:	d501      	bpl.n	800898c <_vfiprintf_r+0x3c>
 8008988:	692b      	ldr	r3, [r5, #16]
 800898a:	b9eb      	cbnz	r3, 80089c8 <_vfiprintf_r+0x78>
 800898c:	4629      	mov	r1, r5
 800898e:	4630      	mov	r0, r6
 8008990:	f7ff fc46 	bl	8008220 <__swsetup_r>
 8008994:	b1c0      	cbz	r0, 80089c8 <_vfiprintf_r+0x78>
 8008996:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008998:	07dc      	lsls	r4, r3, #31
 800899a:	d50e      	bpl.n	80089ba <_vfiprintf_r+0x6a>
 800899c:	f04f 30ff 	mov.w	r0, #4294967295
 80089a0:	b01d      	add	sp, #116	; 0x74
 80089a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089a6:	4b7b      	ldr	r3, [pc, #492]	; (8008b94 <_vfiprintf_r+0x244>)
 80089a8:	429d      	cmp	r5, r3
 80089aa:	d101      	bne.n	80089b0 <_vfiprintf_r+0x60>
 80089ac:	68b5      	ldr	r5, [r6, #8]
 80089ae:	e7df      	b.n	8008970 <_vfiprintf_r+0x20>
 80089b0:	4b79      	ldr	r3, [pc, #484]	; (8008b98 <_vfiprintf_r+0x248>)
 80089b2:	429d      	cmp	r5, r3
 80089b4:	bf08      	it	eq
 80089b6:	68f5      	ldreq	r5, [r6, #12]
 80089b8:	e7da      	b.n	8008970 <_vfiprintf_r+0x20>
 80089ba:	89ab      	ldrh	r3, [r5, #12]
 80089bc:	0598      	lsls	r0, r3, #22
 80089be:	d4ed      	bmi.n	800899c <_vfiprintf_r+0x4c>
 80089c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089c2:	f7ff fe54 	bl	800866e <__retarget_lock_release_recursive>
 80089c6:	e7e9      	b.n	800899c <_vfiprintf_r+0x4c>
 80089c8:	2300      	movs	r3, #0
 80089ca:	9309      	str	r3, [sp, #36]	; 0x24
 80089cc:	2320      	movs	r3, #32
 80089ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80089d6:	2330      	movs	r3, #48	; 0x30
 80089d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008b9c <_vfiprintf_r+0x24c>
 80089dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089e0:	f04f 0901 	mov.w	r9, #1
 80089e4:	4623      	mov	r3, r4
 80089e6:	469a      	mov	sl, r3
 80089e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089ec:	b10a      	cbz	r2, 80089f2 <_vfiprintf_r+0xa2>
 80089ee:	2a25      	cmp	r2, #37	; 0x25
 80089f0:	d1f9      	bne.n	80089e6 <_vfiprintf_r+0x96>
 80089f2:	ebba 0b04 	subs.w	fp, sl, r4
 80089f6:	d00b      	beq.n	8008a10 <_vfiprintf_r+0xc0>
 80089f8:	465b      	mov	r3, fp
 80089fa:	4622      	mov	r2, r4
 80089fc:	4629      	mov	r1, r5
 80089fe:	4630      	mov	r0, r6
 8008a00:	f7ff ff93 	bl	800892a <__sfputs_r>
 8008a04:	3001      	adds	r0, #1
 8008a06:	f000 80aa 	beq.w	8008b5e <_vfiprintf_r+0x20e>
 8008a0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a0c:	445a      	add	r2, fp
 8008a0e:	9209      	str	r2, [sp, #36]	; 0x24
 8008a10:	f89a 3000 	ldrb.w	r3, [sl]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	f000 80a2 	beq.w	8008b5e <_vfiprintf_r+0x20e>
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a24:	f10a 0a01 	add.w	sl, sl, #1
 8008a28:	9304      	str	r3, [sp, #16]
 8008a2a:	9307      	str	r3, [sp, #28]
 8008a2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a30:	931a      	str	r3, [sp, #104]	; 0x68
 8008a32:	4654      	mov	r4, sl
 8008a34:	2205      	movs	r2, #5
 8008a36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a3a:	4858      	ldr	r0, [pc, #352]	; (8008b9c <_vfiprintf_r+0x24c>)
 8008a3c:	f7f7 fbe8 	bl	8000210 <memchr>
 8008a40:	9a04      	ldr	r2, [sp, #16]
 8008a42:	b9d8      	cbnz	r0, 8008a7c <_vfiprintf_r+0x12c>
 8008a44:	06d1      	lsls	r1, r2, #27
 8008a46:	bf44      	itt	mi
 8008a48:	2320      	movmi	r3, #32
 8008a4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a4e:	0713      	lsls	r3, r2, #28
 8008a50:	bf44      	itt	mi
 8008a52:	232b      	movmi	r3, #43	; 0x2b
 8008a54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a58:	f89a 3000 	ldrb.w	r3, [sl]
 8008a5c:	2b2a      	cmp	r3, #42	; 0x2a
 8008a5e:	d015      	beq.n	8008a8c <_vfiprintf_r+0x13c>
 8008a60:	9a07      	ldr	r2, [sp, #28]
 8008a62:	4654      	mov	r4, sl
 8008a64:	2000      	movs	r0, #0
 8008a66:	f04f 0c0a 	mov.w	ip, #10
 8008a6a:	4621      	mov	r1, r4
 8008a6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a70:	3b30      	subs	r3, #48	; 0x30
 8008a72:	2b09      	cmp	r3, #9
 8008a74:	d94e      	bls.n	8008b14 <_vfiprintf_r+0x1c4>
 8008a76:	b1b0      	cbz	r0, 8008aa6 <_vfiprintf_r+0x156>
 8008a78:	9207      	str	r2, [sp, #28]
 8008a7a:	e014      	b.n	8008aa6 <_vfiprintf_r+0x156>
 8008a7c:	eba0 0308 	sub.w	r3, r0, r8
 8008a80:	fa09 f303 	lsl.w	r3, r9, r3
 8008a84:	4313      	orrs	r3, r2
 8008a86:	9304      	str	r3, [sp, #16]
 8008a88:	46a2      	mov	sl, r4
 8008a8a:	e7d2      	b.n	8008a32 <_vfiprintf_r+0xe2>
 8008a8c:	9b03      	ldr	r3, [sp, #12]
 8008a8e:	1d19      	adds	r1, r3, #4
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	9103      	str	r1, [sp, #12]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	bfbb      	ittet	lt
 8008a98:	425b      	neglt	r3, r3
 8008a9a:	f042 0202 	orrlt.w	r2, r2, #2
 8008a9e:	9307      	strge	r3, [sp, #28]
 8008aa0:	9307      	strlt	r3, [sp, #28]
 8008aa2:	bfb8      	it	lt
 8008aa4:	9204      	strlt	r2, [sp, #16]
 8008aa6:	7823      	ldrb	r3, [r4, #0]
 8008aa8:	2b2e      	cmp	r3, #46	; 0x2e
 8008aaa:	d10c      	bne.n	8008ac6 <_vfiprintf_r+0x176>
 8008aac:	7863      	ldrb	r3, [r4, #1]
 8008aae:	2b2a      	cmp	r3, #42	; 0x2a
 8008ab0:	d135      	bne.n	8008b1e <_vfiprintf_r+0x1ce>
 8008ab2:	9b03      	ldr	r3, [sp, #12]
 8008ab4:	1d1a      	adds	r2, r3, #4
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	9203      	str	r2, [sp, #12]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	bfb8      	it	lt
 8008abe:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ac2:	3402      	adds	r4, #2
 8008ac4:	9305      	str	r3, [sp, #20]
 8008ac6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008bac <_vfiprintf_r+0x25c>
 8008aca:	7821      	ldrb	r1, [r4, #0]
 8008acc:	2203      	movs	r2, #3
 8008ace:	4650      	mov	r0, sl
 8008ad0:	f7f7 fb9e 	bl	8000210 <memchr>
 8008ad4:	b140      	cbz	r0, 8008ae8 <_vfiprintf_r+0x198>
 8008ad6:	2340      	movs	r3, #64	; 0x40
 8008ad8:	eba0 000a 	sub.w	r0, r0, sl
 8008adc:	fa03 f000 	lsl.w	r0, r3, r0
 8008ae0:	9b04      	ldr	r3, [sp, #16]
 8008ae2:	4303      	orrs	r3, r0
 8008ae4:	3401      	adds	r4, #1
 8008ae6:	9304      	str	r3, [sp, #16]
 8008ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aec:	482c      	ldr	r0, [pc, #176]	; (8008ba0 <_vfiprintf_r+0x250>)
 8008aee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008af2:	2206      	movs	r2, #6
 8008af4:	f7f7 fb8c 	bl	8000210 <memchr>
 8008af8:	2800      	cmp	r0, #0
 8008afa:	d03f      	beq.n	8008b7c <_vfiprintf_r+0x22c>
 8008afc:	4b29      	ldr	r3, [pc, #164]	; (8008ba4 <_vfiprintf_r+0x254>)
 8008afe:	bb1b      	cbnz	r3, 8008b48 <_vfiprintf_r+0x1f8>
 8008b00:	9b03      	ldr	r3, [sp, #12]
 8008b02:	3307      	adds	r3, #7
 8008b04:	f023 0307 	bic.w	r3, r3, #7
 8008b08:	3308      	adds	r3, #8
 8008b0a:	9303      	str	r3, [sp, #12]
 8008b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b0e:	443b      	add	r3, r7
 8008b10:	9309      	str	r3, [sp, #36]	; 0x24
 8008b12:	e767      	b.n	80089e4 <_vfiprintf_r+0x94>
 8008b14:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b18:	460c      	mov	r4, r1
 8008b1a:	2001      	movs	r0, #1
 8008b1c:	e7a5      	b.n	8008a6a <_vfiprintf_r+0x11a>
 8008b1e:	2300      	movs	r3, #0
 8008b20:	3401      	adds	r4, #1
 8008b22:	9305      	str	r3, [sp, #20]
 8008b24:	4619      	mov	r1, r3
 8008b26:	f04f 0c0a 	mov.w	ip, #10
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b30:	3a30      	subs	r2, #48	; 0x30
 8008b32:	2a09      	cmp	r2, #9
 8008b34:	d903      	bls.n	8008b3e <_vfiprintf_r+0x1ee>
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d0c5      	beq.n	8008ac6 <_vfiprintf_r+0x176>
 8008b3a:	9105      	str	r1, [sp, #20]
 8008b3c:	e7c3      	b.n	8008ac6 <_vfiprintf_r+0x176>
 8008b3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b42:	4604      	mov	r4, r0
 8008b44:	2301      	movs	r3, #1
 8008b46:	e7f0      	b.n	8008b2a <_vfiprintf_r+0x1da>
 8008b48:	ab03      	add	r3, sp, #12
 8008b4a:	9300      	str	r3, [sp, #0]
 8008b4c:	462a      	mov	r2, r5
 8008b4e:	4b16      	ldr	r3, [pc, #88]	; (8008ba8 <_vfiprintf_r+0x258>)
 8008b50:	a904      	add	r1, sp, #16
 8008b52:	4630      	mov	r0, r6
 8008b54:	f3af 8000 	nop.w
 8008b58:	4607      	mov	r7, r0
 8008b5a:	1c78      	adds	r0, r7, #1
 8008b5c:	d1d6      	bne.n	8008b0c <_vfiprintf_r+0x1bc>
 8008b5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b60:	07d9      	lsls	r1, r3, #31
 8008b62:	d405      	bmi.n	8008b70 <_vfiprintf_r+0x220>
 8008b64:	89ab      	ldrh	r3, [r5, #12]
 8008b66:	059a      	lsls	r2, r3, #22
 8008b68:	d402      	bmi.n	8008b70 <_vfiprintf_r+0x220>
 8008b6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b6c:	f7ff fd7f 	bl	800866e <__retarget_lock_release_recursive>
 8008b70:	89ab      	ldrh	r3, [r5, #12]
 8008b72:	065b      	lsls	r3, r3, #25
 8008b74:	f53f af12 	bmi.w	800899c <_vfiprintf_r+0x4c>
 8008b78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b7a:	e711      	b.n	80089a0 <_vfiprintf_r+0x50>
 8008b7c:	ab03      	add	r3, sp, #12
 8008b7e:	9300      	str	r3, [sp, #0]
 8008b80:	462a      	mov	r2, r5
 8008b82:	4b09      	ldr	r3, [pc, #36]	; (8008ba8 <_vfiprintf_r+0x258>)
 8008b84:	a904      	add	r1, sp, #16
 8008b86:	4630      	mov	r0, r6
 8008b88:	f000 f880 	bl	8008c8c <_printf_i>
 8008b8c:	e7e4      	b.n	8008b58 <_vfiprintf_r+0x208>
 8008b8e:	bf00      	nop
 8008b90:	080092bc 	.word	0x080092bc
 8008b94:	080092dc 	.word	0x080092dc
 8008b98:	0800929c 	.word	0x0800929c
 8008b9c:	080092fc 	.word	0x080092fc
 8008ba0:	08009306 	.word	0x08009306
 8008ba4:	00000000 	.word	0x00000000
 8008ba8:	0800892b 	.word	0x0800892b
 8008bac:	08009302 	.word	0x08009302

08008bb0 <_printf_common>:
 8008bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bb4:	4616      	mov	r6, r2
 8008bb6:	4699      	mov	r9, r3
 8008bb8:	688a      	ldr	r2, [r1, #8]
 8008bba:	690b      	ldr	r3, [r1, #16]
 8008bbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	bfb8      	it	lt
 8008bc4:	4613      	movlt	r3, r2
 8008bc6:	6033      	str	r3, [r6, #0]
 8008bc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bcc:	4607      	mov	r7, r0
 8008bce:	460c      	mov	r4, r1
 8008bd0:	b10a      	cbz	r2, 8008bd6 <_printf_common+0x26>
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	6033      	str	r3, [r6, #0]
 8008bd6:	6823      	ldr	r3, [r4, #0]
 8008bd8:	0699      	lsls	r1, r3, #26
 8008bda:	bf42      	ittt	mi
 8008bdc:	6833      	ldrmi	r3, [r6, #0]
 8008bde:	3302      	addmi	r3, #2
 8008be0:	6033      	strmi	r3, [r6, #0]
 8008be2:	6825      	ldr	r5, [r4, #0]
 8008be4:	f015 0506 	ands.w	r5, r5, #6
 8008be8:	d106      	bne.n	8008bf8 <_printf_common+0x48>
 8008bea:	f104 0a19 	add.w	sl, r4, #25
 8008bee:	68e3      	ldr	r3, [r4, #12]
 8008bf0:	6832      	ldr	r2, [r6, #0]
 8008bf2:	1a9b      	subs	r3, r3, r2
 8008bf4:	42ab      	cmp	r3, r5
 8008bf6:	dc26      	bgt.n	8008c46 <_printf_common+0x96>
 8008bf8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008bfc:	1e13      	subs	r3, r2, #0
 8008bfe:	6822      	ldr	r2, [r4, #0]
 8008c00:	bf18      	it	ne
 8008c02:	2301      	movne	r3, #1
 8008c04:	0692      	lsls	r2, r2, #26
 8008c06:	d42b      	bmi.n	8008c60 <_printf_common+0xb0>
 8008c08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c0c:	4649      	mov	r1, r9
 8008c0e:	4638      	mov	r0, r7
 8008c10:	47c0      	blx	r8
 8008c12:	3001      	adds	r0, #1
 8008c14:	d01e      	beq.n	8008c54 <_printf_common+0xa4>
 8008c16:	6823      	ldr	r3, [r4, #0]
 8008c18:	68e5      	ldr	r5, [r4, #12]
 8008c1a:	6832      	ldr	r2, [r6, #0]
 8008c1c:	f003 0306 	and.w	r3, r3, #6
 8008c20:	2b04      	cmp	r3, #4
 8008c22:	bf08      	it	eq
 8008c24:	1aad      	subeq	r5, r5, r2
 8008c26:	68a3      	ldr	r3, [r4, #8]
 8008c28:	6922      	ldr	r2, [r4, #16]
 8008c2a:	bf0c      	ite	eq
 8008c2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c30:	2500      	movne	r5, #0
 8008c32:	4293      	cmp	r3, r2
 8008c34:	bfc4      	itt	gt
 8008c36:	1a9b      	subgt	r3, r3, r2
 8008c38:	18ed      	addgt	r5, r5, r3
 8008c3a:	2600      	movs	r6, #0
 8008c3c:	341a      	adds	r4, #26
 8008c3e:	42b5      	cmp	r5, r6
 8008c40:	d11a      	bne.n	8008c78 <_printf_common+0xc8>
 8008c42:	2000      	movs	r0, #0
 8008c44:	e008      	b.n	8008c58 <_printf_common+0xa8>
 8008c46:	2301      	movs	r3, #1
 8008c48:	4652      	mov	r2, sl
 8008c4a:	4649      	mov	r1, r9
 8008c4c:	4638      	mov	r0, r7
 8008c4e:	47c0      	blx	r8
 8008c50:	3001      	adds	r0, #1
 8008c52:	d103      	bne.n	8008c5c <_printf_common+0xac>
 8008c54:	f04f 30ff 	mov.w	r0, #4294967295
 8008c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c5c:	3501      	adds	r5, #1
 8008c5e:	e7c6      	b.n	8008bee <_printf_common+0x3e>
 8008c60:	18e1      	adds	r1, r4, r3
 8008c62:	1c5a      	adds	r2, r3, #1
 8008c64:	2030      	movs	r0, #48	; 0x30
 8008c66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c6a:	4422      	add	r2, r4
 8008c6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c74:	3302      	adds	r3, #2
 8008c76:	e7c7      	b.n	8008c08 <_printf_common+0x58>
 8008c78:	2301      	movs	r3, #1
 8008c7a:	4622      	mov	r2, r4
 8008c7c:	4649      	mov	r1, r9
 8008c7e:	4638      	mov	r0, r7
 8008c80:	47c0      	blx	r8
 8008c82:	3001      	adds	r0, #1
 8008c84:	d0e6      	beq.n	8008c54 <_printf_common+0xa4>
 8008c86:	3601      	adds	r6, #1
 8008c88:	e7d9      	b.n	8008c3e <_printf_common+0x8e>
	...

08008c8c <_printf_i>:
 8008c8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c90:	7e0f      	ldrb	r7, [r1, #24]
 8008c92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c94:	2f78      	cmp	r7, #120	; 0x78
 8008c96:	4691      	mov	r9, r2
 8008c98:	4680      	mov	r8, r0
 8008c9a:	460c      	mov	r4, r1
 8008c9c:	469a      	mov	sl, r3
 8008c9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008ca2:	d807      	bhi.n	8008cb4 <_printf_i+0x28>
 8008ca4:	2f62      	cmp	r7, #98	; 0x62
 8008ca6:	d80a      	bhi.n	8008cbe <_printf_i+0x32>
 8008ca8:	2f00      	cmp	r7, #0
 8008caa:	f000 80d8 	beq.w	8008e5e <_printf_i+0x1d2>
 8008cae:	2f58      	cmp	r7, #88	; 0x58
 8008cb0:	f000 80a3 	beq.w	8008dfa <_printf_i+0x16e>
 8008cb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008cbc:	e03a      	b.n	8008d34 <_printf_i+0xa8>
 8008cbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cc2:	2b15      	cmp	r3, #21
 8008cc4:	d8f6      	bhi.n	8008cb4 <_printf_i+0x28>
 8008cc6:	a101      	add	r1, pc, #4	; (adr r1, 8008ccc <_printf_i+0x40>)
 8008cc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ccc:	08008d25 	.word	0x08008d25
 8008cd0:	08008d39 	.word	0x08008d39
 8008cd4:	08008cb5 	.word	0x08008cb5
 8008cd8:	08008cb5 	.word	0x08008cb5
 8008cdc:	08008cb5 	.word	0x08008cb5
 8008ce0:	08008cb5 	.word	0x08008cb5
 8008ce4:	08008d39 	.word	0x08008d39
 8008ce8:	08008cb5 	.word	0x08008cb5
 8008cec:	08008cb5 	.word	0x08008cb5
 8008cf0:	08008cb5 	.word	0x08008cb5
 8008cf4:	08008cb5 	.word	0x08008cb5
 8008cf8:	08008e45 	.word	0x08008e45
 8008cfc:	08008d69 	.word	0x08008d69
 8008d00:	08008e27 	.word	0x08008e27
 8008d04:	08008cb5 	.word	0x08008cb5
 8008d08:	08008cb5 	.word	0x08008cb5
 8008d0c:	08008e67 	.word	0x08008e67
 8008d10:	08008cb5 	.word	0x08008cb5
 8008d14:	08008d69 	.word	0x08008d69
 8008d18:	08008cb5 	.word	0x08008cb5
 8008d1c:	08008cb5 	.word	0x08008cb5
 8008d20:	08008e2f 	.word	0x08008e2f
 8008d24:	682b      	ldr	r3, [r5, #0]
 8008d26:	1d1a      	adds	r2, r3, #4
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	602a      	str	r2, [r5, #0]
 8008d2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d34:	2301      	movs	r3, #1
 8008d36:	e0a3      	b.n	8008e80 <_printf_i+0x1f4>
 8008d38:	6820      	ldr	r0, [r4, #0]
 8008d3a:	6829      	ldr	r1, [r5, #0]
 8008d3c:	0606      	lsls	r6, r0, #24
 8008d3e:	f101 0304 	add.w	r3, r1, #4
 8008d42:	d50a      	bpl.n	8008d5a <_printf_i+0xce>
 8008d44:	680e      	ldr	r6, [r1, #0]
 8008d46:	602b      	str	r3, [r5, #0]
 8008d48:	2e00      	cmp	r6, #0
 8008d4a:	da03      	bge.n	8008d54 <_printf_i+0xc8>
 8008d4c:	232d      	movs	r3, #45	; 0x2d
 8008d4e:	4276      	negs	r6, r6
 8008d50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d54:	485e      	ldr	r0, [pc, #376]	; (8008ed0 <_printf_i+0x244>)
 8008d56:	230a      	movs	r3, #10
 8008d58:	e019      	b.n	8008d8e <_printf_i+0x102>
 8008d5a:	680e      	ldr	r6, [r1, #0]
 8008d5c:	602b      	str	r3, [r5, #0]
 8008d5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d62:	bf18      	it	ne
 8008d64:	b236      	sxthne	r6, r6
 8008d66:	e7ef      	b.n	8008d48 <_printf_i+0xbc>
 8008d68:	682b      	ldr	r3, [r5, #0]
 8008d6a:	6820      	ldr	r0, [r4, #0]
 8008d6c:	1d19      	adds	r1, r3, #4
 8008d6e:	6029      	str	r1, [r5, #0]
 8008d70:	0601      	lsls	r1, r0, #24
 8008d72:	d501      	bpl.n	8008d78 <_printf_i+0xec>
 8008d74:	681e      	ldr	r6, [r3, #0]
 8008d76:	e002      	b.n	8008d7e <_printf_i+0xf2>
 8008d78:	0646      	lsls	r6, r0, #25
 8008d7a:	d5fb      	bpl.n	8008d74 <_printf_i+0xe8>
 8008d7c:	881e      	ldrh	r6, [r3, #0]
 8008d7e:	4854      	ldr	r0, [pc, #336]	; (8008ed0 <_printf_i+0x244>)
 8008d80:	2f6f      	cmp	r7, #111	; 0x6f
 8008d82:	bf0c      	ite	eq
 8008d84:	2308      	moveq	r3, #8
 8008d86:	230a      	movne	r3, #10
 8008d88:	2100      	movs	r1, #0
 8008d8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d8e:	6865      	ldr	r5, [r4, #4]
 8008d90:	60a5      	str	r5, [r4, #8]
 8008d92:	2d00      	cmp	r5, #0
 8008d94:	bfa2      	ittt	ge
 8008d96:	6821      	ldrge	r1, [r4, #0]
 8008d98:	f021 0104 	bicge.w	r1, r1, #4
 8008d9c:	6021      	strge	r1, [r4, #0]
 8008d9e:	b90e      	cbnz	r6, 8008da4 <_printf_i+0x118>
 8008da0:	2d00      	cmp	r5, #0
 8008da2:	d04d      	beq.n	8008e40 <_printf_i+0x1b4>
 8008da4:	4615      	mov	r5, r2
 8008da6:	fbb6 f1f3 	udiv	r1, r6, r3
 8008daa:	fb03 6711 	mls	r7, r3, r1, r6
 8008dae:	5dc7      	ldrb	r7, [r0, r7]
 8008db0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008db4:	4637      	mov	r7, r6
 8008db6:	42bb      	cmp	r3, r7
 8008db8:	460e      	mov	r6, r1
 8008dba:	d9f4      	bls.n	8008da6 <_printf_i+0x11a>
 8008dbc:	2b08      	cmp	r3, #8
 8008dbe:	d10b      	bne.n	8008dd8 <_printf_i+0x14c>
 8008dc0:	6823      	ldr	r3, [r4, #0]
 8008dc2:	07de      	lsls	r6, r3, #31
 8008dc4:	d508      	bpl.n	8008dd8 <_printf_i+0x14c>
 8008dc6:	6923      	ldr	r3, [r4, #16]
 8008dc8:	6861      	ldr	r1, [r4, #4]
 8008dca:	4299      	cmp	r1, r3
 8008dcc:	bfde      	ittt	le
 8008dce:	2330      	movle	r3, #48	; 0x30
 8008dd0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008dd4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008dd8:	1b52      	subs	r2, r2, r5
 8008dda:	6122      	str	r2, [r4, #16]
 8008ddc:	f8cd a000 	str.w	sl, [sp]
 8008de0:	464b      	mov	r3, r9
 8008de2:	aa03      	add	r2, sp, #12
 8008de4:	4621      	mov	r1, r4
 8008de6:	4640      	mov	r0, r8
 8008de8:	f7ff fee2 	bl	8008bb0 <_printf_common>
 8008dec:	3001      	adds	r0, #1
 8008dee:	d14c      	bne.n	8008e8a <_printf_i+0x1fe>
 8008df0:	f04f 30ff 	mov.w	r0, #4294967295
 8008df4:	b004      	add	sp, #16
 8008df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dfa:	4835      	ldr	r0, [pc, #212]	; (8008ed0 <_printf_i+0x244>)
 8008dfc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008e00:	6829      	ldr	r1, [r5, #0]
 8008e02:	6823      	ldr	r3, [r4, #0]
 8008e04:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e08:	6029      	str	r1, [r5, #0]
 8008e0a:	061d      	lsls	r5, r3, #24
 8008e0c:	d514      	bpl.n	8008e38 <_printf_i+0x1ac>
 8008e0e:	07df      	lsls	r7, r3, #31
 8008e10:	bf44      	itt	mi
 8008e12:	f043 0320 	orrmi.w	r3, r3, #32
 8008e16:	6023      	strmi	r3, [r4, #0]
 8008e18:	b91e      	cbnz	r6, 8008e22 <_printf_i+0x196>
 8008e1a:	6823      	ldr	r3, [r4, #0]
 8008e1c:	f023 0320 	bic.w	r3, r3, #32
 8008e20:	6023      	str	r3, [r4, #0]
 8008e22:	2310      	movs	r3, #16
 8008e24:	e7b0      	b.n	8008d88 <_printf_i+0xfc>
 8008e26:	6823      	ldr	r3, [r4, #0]
 8008e28:	f043 0320 	orr.w	r3, r3, #32
 8008e2c:	6023      	str	r3, [r4, #0]
 8008e2e:	2378      	movs	r3, #120	; 0x78
 8008e30:	4828      	ldr	r0, [pc, #160]	; (8008ed4 <_printf_i+0x248>)
 8008e32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e36:	e7e3      	b.n	8008e00 <_printf_i+0x174>
 8008e38:	0659      	lsls	r1, r3, #25
 8008e3a:	bf48      	it	mi
 8008e3c:	b2b6      	uxthmi	r6, r6
 8008e3e:	e7e6      	b.n	8008e0e <_printf_i+0x182>
 8008e40:	4615      	mov	r5, r2
 8008e42:	e7bb      	b.n	8008dbc <_printf_i+0x130>
 8008e44:	682b      	ldr	r3, [r5, #0]
 8008e46:	6826      	ldr	r6, [r4, #0]
 8008e48:	6961      	ldr	r1, [r4, #20]
 8008e4a:	1d18      	adds	r0, r3, #4
 8008e4c:	6028      	str	r0, [r5, #0]
 8008e4e:	0635      	lsls	r5, r6, #24
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	d501      	bpl.n	8008e58 <_printf_i+0x1cc>
 8008e54:	6019      	str	r1, [r3, #0]
 8008e56:	e002      	b.n	8008e5e <_printf_i+0x1d2>
 8008e58:	0670      	lsls	r0, r6, #25
 8008e5a:	d5fb      	bpl.n	8008e54 <_printf_i+0x1c8>
 8008e5c:	8019      	strh	r1, [r3, #0]
 8008e5e:	2300      	movs	r3, #0
 8008e60:	6123      	str	r3, [r4, #16]
 8008e62:	4615      	mov	r5, r2
 8008e64:	e7ba      	b.n	8008ddc <_printf_i+0x150>
 8008e66:	682b      	ldr	r3, [r5, #0]
 8008e68:	1d1a      	adds	r2, r3, #4
 8008e6a:	602a      	str	r2, [r5, #0]
 8008e6c:	681d      	ldr	r5, [r3, #0]
 8008e6e:	6862      	ldr	r2, [r4, #4]
 8008e70:	2100      	movs	r1, #0
 8008e72:	4628      	mov	r0, r5
 8008e74:	f7f7 f9cc 	bl	8000210 <memchr>
 8008e78:	b108      	cbz	r0, 8008e7e <_printf_i+0x1f2>
 8008e7a:	1b40      	subs	r0, r0, r5
 8008e7c:	6060      	str	r0, [r4, #4]
 8008e7e:	6863      	ldr	r3, [r4, #4]
 8008e80:	6123      	str	r3, [r4, #16]
 8008e82:	2300      	movs	r3, #0
 8008e84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e88:	e7a8      	b.n	8008ddc <_printf_i+0x150>
 8008e8a:	6923      	ldr	r3, [r4, #16]
 8008e8c:	462a      	mov	r2, r5
 8008e8e:	4649      	mov	r1, r9
 8008e90:	4640      	mov	r0, r8
 8008e92:	47d0      	blx	sl
 8008e94:	3001      	adds	r0, #1
 8008e96:	d0ab      	beq.n	8008df0 <_printf_i+0x164>
 8008e98:	6823      	ldr	r3, [r4, #0]
 8008e9a:	079b      	lsls	r3, r3, #30
 8008e9c:	d413      	bmi.n	8008ec6 <_printf_i+0x23a>
 8008e9e:	68e0      	ldr	r0, [r4, #12]
 8008ea0:	9b03      	ldr	r3, [sp, #12]
 8008ea2:	4298      	cmp	r0, r3
 8008ea4:	bfb8      	it	lt
 8008ea6:	4618      	movlt	r0, r3
 8008ea8:	e7a4      	b.n	8008df4 <_printf_i+0x168>
 8008eaa:	2301      	movs	r3, #1
 8008eac:	4632      	mov	r2, r6
 8008eae:	4649      	mov	r1, r9
 8008eb0:	4640      	mov	r0, r8
 8008eb2:	47d0      	blx	sl
 8008eb4:	3001      	adds	r0, #1
 8008eb6:	d09b      	beq.n	8008df0 <_printf_i+0x164>
 8008eb8:	3501      	adds	r5, #1
 8008eba:	68e3      	ldr	r3, [r4, #12]
 8008ebc:	9903      	ldr	r1, [sp, #12]
 8008ebe:	1a5b      	subs	r3, r3, r1
 8008ec0:	42ab      	cmp	r3, r5
 8008ec2:	dcf2      	bgt.n	8008eaa <_printf_i+0x21e>
 8008ec4:	e7eb      	b.n	8008e9e <_printf_i+0x212>
 8008ec6:	2500      	movs	r5, #0
 8008ec8:	f104 0619 	add.w	r6, r4, #25
 8008ecc:	e7f5      	b.n	8008eba <_printf_i+0x22e>
 8008ece:	bf00      	nop
 8008ed0:	0800930d 	.word	0x0800930d
 8008ed4:	0800931e 	.word	0x0800931e

08008ed8 <_sbrk_r>:
 8008ed8:	b538      	push	{r3, r4, r5, lr}
 8008eda:	4d06      	ldr	r5, [pc, #24]	; (8008ef4 <_sbrk_r+0x1c>)
 8008edc:	2300      	movs	r3, #0
 8008ede:	4604      	mov	r4, r0
 8008ee0:	4608      	mov	r0, r1
 8008ee2:	602b      	str	r3, [r5, #0]
 8008ee4:	f7fa f8e4 	bl	80030b0 <_sbrk>
 8008ee8:	1c43      	adds	r3, r0, #1
 8008eea:	d102      	bne.n	8008ef2 <_sbrk_r+0x1a>
 8008eec:	682b      	ldr	r3, [r5, #0]
 8008eee:	b103      	cbz	r3, 8008ef2 <_sbrk_r+0x1a>
 8008ef0:	6023      	str	r3, [r4, #0]
 8008ef2:	bd38      	pop	{r3, r4, r5, pc}
 8008ef4:	200006e8 	.word	0x200006e8

08008ef8 <__sread>:
 8008ef8:	b510      	push	{r4, lr}
 8008efa:	460c      	mov	r4, r1
 8008efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f00:	f000 f8a0 	bl	8009044 <_read_r>
 8008f04:	2800      	cmp	r0, #0
 8008f06:	bfab      	itete	ge
 8008f08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f0a:	89a3      	ldrhlt	r3, [r4, #12]
 8008f0c:	181b      	addge	r3, r3, r0
 8008f0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f12:	bfac      	ite	ge
 8008f14:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f16:	81a3      	strhlt	r3, [r4, #12]
 8008f18:	bd10      	pop	{r4, pc}

08008f1a <__swrite>:
 8008f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f1e:	461f      	mov	r7, r3
 8008f20:	898b      	ldrh	r3, [r1, #12]
 8008f22:	05db      	lsls	r3, r3, #23
 8008f24:	4605      	mov	r5, r0
 8008f26:	460c      	mov	r4, r1
 8008f28:	4616      	mov	r6, r2
 8008f2a:	d505      	bpl.n	8008f38 <__swrite+0x1e>
 8008f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f30:	2302      	movs	r3, #2
 8008f32:	2200      	movs	r2, #0
 8008f34:	f000 f868 	bl	8009008 <_lseek_r>
 8008f38:	89a3      	ldrh	r3, [r4, #12]
 8008f3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f42:	81a3      	strh	r3, [r4, #12]
 8008f44:	4632      	mov	r2, r6
 8008f46:	463b      	mov	r3, r7
 8008f48:	4628      	mov	r0, r5
 8008f4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f4e:	f000 b817 	b.w	8008f80 <_write_r>

08008f52 <__sseek>:
 8008f52:	b510      	push	{r4, lr}
 8008f54:	460c      	mov	r4, r1
 8008f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f5a:	f000 f855 	bl	8009008 <_lseek_r>
 8008f5e:	1c43      	adds	r3, r0, #1
 8008f60:	89a3      	ldrh	r3, [r4, #12]
 8008f62:	bf15      	itete	ne
 8008f64:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f6e:	81a3      	strheq	r3, [r4, #12]
 8008f70:	bf18      	it	ne
 8008f72:	81a3      	strhne	r3, [r4, #12]
 8008f74:	bd10      	pop	{r4, pc}

08008f76 <__sclose>:
 8008f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f7a:	f000 b813 	b.w	8008fa4 <_close_r>
	...

08008f80 <_write_r>:
 8008f80:	b538      	push	{r3, r4, r5, lr}
 8008f82:	4d07      	ldr	r5, [pc, #28]	; (8008fa0 <_write_r+0x20>)
 8008f84:	4604      	mov	r4, r0
 8008f86:	4608      	mov	r0, r1
 8008f88:	4611      	mov	r1, r2
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	602a      	str	r2, [r5, #0]
 8008f8e:	461a      	mov	r2, r3
 8008f90:	f7fa f83d 	bl	800300e <_write>
 8008f94:	1c43      	adds	r3, r0, #1
 8008f96:	d102      	bne.n	8008f9e <_write_r+0x1e>
 8008f98:	682b      	ldr	r3, [r5, #0]
 8008f9a:	b103      	cbz	r3, 8008f9e <_write_r+0x1e>
 8008f9c:	6023      	str	r3, [r4, #0]
 8008f9e:	bd38      	pop	{r3, r4, r5, pc}
 8008fa0:	200006e8 	.word	0x200006e8

08008fa4 <_close_r>:
 8008fa4:	b538      	push	{r3, r4, r5, lr}
 8008fa6:	4d06      	ldr	r5, [pc, #24]	; (8008fc0 <_close_r+0x1c>)
 8008fa8:	2300      	movs	r3, #0
 8008faa:	4604      	mov	r4, r0
 8008fac:	4608      	mov	r0, r1
 8008fae:	602b      	str	r3, [r5, #0]
 8008fb0:	f7fa f849 	bl	8003046 <_close>
 8008fb4:	1c43      	adds	r3, r0, #1
 8008fb6:	d102      	bne.n	8008fbe <_close_r+0x1a>
 8008fb8:	682b      	ldr	r3, [r5, #0]
 8008fba:	b103      	cbz	r3, 8008fbe <_close_r+0x1a>
 8008fbc:	6023      	str	r3, [r4, #0]
 8008fbe:	bd38      	pop	{r3, r4, r5, pc}
 8008fc0:	200006e8 	.word	0x200006e8

08008fc4 <_fstat_r>:
 8008fc4:	b538      	push	{r3, r4, r5, lr}
 8008fc6:	4d07      	ldr	r5, [pc, #28]	; (8008fe4 <_fstat_r+0x20>)
 8008fc8:	2300      	movs	r3, #0
 8008fca:	4604      	mov	r4, r0
 8008fcc:	4608      	mov	r0, r1
 8008fce:	4611      	mov	r1, r2
 8008fd0:	602b      	str	r3, [r5, #0]
 8008fd2:	f7fa f844 	bl	800305e <_fstat>
 8008fd6:	1c43      	adds	r3, r0, #1
 8008fd8:	d102      	bne.n	8008fe0 <_fstat_r+0x1c>
 8008fda:	682b      	ldr	r3, [r5, #0]
 8008fdc:	b103      	cbz	r3, 8008fe0 <_fstat_r+0x1c>
 8008fde:	6023      	str	r3, [r4, #0]
 8008fe0:	bd38      	pop	{r3, r4, r5, pc}
 8008fe2:	bf00      	nop
 8008fe4:	200006e8 	.word	0x200006e8

08008fe8 <_isatty_r>:
 8008fe8:	b538      	push	{r3, r4, r5, lr}
 8008fea:	4d06      	ldr	r5, [pc, #24]	; (8009004 <_isatty_r+0x1c>)
 8008fec:	2300      	movs	r3, #0
 8008fee:	4604      	mov	r4, r0
 8008ff0:	4608      	mov	r0, r1
 8008ff2:	602b      	str	r3, [r5, #0]
 8008ff4:	f7fa f843 	bl	800307e <_isatty>
 8008ff8:	1c43      	adds	r3, r0, #1
 8008ffa:	d102      	bne.n	8009002 <_isatty_r+0x1a>
 8008ffc:	682b      	ldr	r3, [r5, #0]
 8008ffe:	b103      	cbz	r3, 8009002 <_isatty_r+0x1a>
 8009000:	6023      	str	r3, [r4, #0]
 8009002:	bd38      	pop	{r3, r4, r5, pc}
 8009004:	200006e8 	.word	0x200006e8

08009008 <_lseek_r>:
 8009008:	b538      	push	{r3, r4, r5, lr}
 800900a:	4d07      	ldr	r5, [pc, #28]	; (8009028 <_lseek_r+0x20>)
 800900c:	4604      	mov	r4, r0
 800900e:	4608      	mov	r0, r1
 8009010:	4611      	mov	r1, r2
 8009012:	2200      	movs	r2, #0
 8009014:	602a      	str	r2, [r5, #0]
 8009016:	461a      	mov	r2, r3
 8009018:	f7fa f83c 	bl	8003094 <_lseek>
 800901c:	1c43      	adds	r3, r0, #1
 800901e:	d102      	bne.n	8009026 <_lseek_r+0x1e>
 8009020:	682b      	ldr	r3, [r5, #0]
 8009022:	b103      	cbz	r3, 8009026 <_lseek_r+0x1e>
 8009024:	6023      	str	r3, [r4, #0]
 8009026:	bd38      	pop	{r3, r4, r5, pc}
 8009028:	200006e8 	.word	0x200006e8

0800902c <__malloc_lock>:
 800902c:	4801      	ldr	r0, [pc, #4]	; (8009034 <__malloc_lock+0x8>)
 800902e:	f7ff bb1d 	b.w	800866c <__retarget_lock_acquire_recursive>
 8009032:	bf00      	nop
 8009034:	200006dc 	.word	0x200006dc

08009038 <__malloc_unlock>:
 8009038:	4801      	ldr	r0, [pc, #4]	; (8009040 <__malloc_unlock+0x8>)
 800903a:	f7ff bb18 	b.w	800866e <__retarget_lock_release_recursive>
 800903e:	bf00      	nop
 8009040:	200006dc 	.word	0x200006dc

08009044 <_read_r>:
 8009044:	b538      	push	{r3, r4, r5, lr}
 8009046:	4d07      	ldr	r5, [pc, #28]	; (8009064 <_read_r+0x20>)
 8009048:	4604      	mov	r4, r0
 800904a:	4608      	mov	r0, r1
 800904c:	4611      	mov	r1, r2
 800904e:	2200      	movs	r2, #0
 8009050:	602a      	str	r2, [r5, #0]
 8009052:	461a      	mov	r2, r3
 8009054:	f7f9 ffbe 	bl	8002fd4 <_read>
 8009058:	1c43      	adds	r3, r0, #1
 800905a:	d102      	bne.n	8009062 <_read_r+0x1e>
 800905c:	682b      	ldr	r3, [r5, #0]
 800905e:	b103      	cbz	r3, 8009062 <_read_r+0x1e>
 8009060:	6023      	str	r3, [r4, #0]
 8009062:	bd38      	pop	{r3, r4, r5, pc}
 8009064:	200006e8 	.word	0x200006e8

08009068 <_init>:
 8009068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800906a:	bf00      	nop
 800906c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800906e:	bc08      	pop	{r3}
 8009070:	469e      	mov	lr, r3
 8009072:	4770      	bx	lr

08009074 <_fini>:
 8009074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009076:	bf00      	nop
 8009078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800907a:	bc08      	pop	{r3}
 800907c:	469e      	mov	lr, r3
 800907e:	4770      	bx	lr
