
Project_23_05_30.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b430  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  0800b5e0  0800b5e0  0001b5e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b87c  0800b87c  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  0800b87c  0800b87c  0001b87c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b884  0800b884  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b884  0800b884  0001b884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b888  0800b888  0001b888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800b88c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020180  2**0
                  CONTENTS
 10 .bss          00000e10  20000180  20000180  00020180  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000f90  20000f90  00020180  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .debug_info   000182b7  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003748  00000000  00000000  00038467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001388  00000000  00000000  0003bbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001238  00000000  00000000  0003cf38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a02  00000000  00000000  0003e170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a0b2  00000000  00000000  00065b72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbaad  00000000  00000000  0007fc24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015b6d1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005bc8  00000000  00000000  0015b724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000180 	.word	0x20000180
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b5c8 	.word	0x0800b5c8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000184 	.word	0x20000184
 80001ec:	0800b5c8 	.word	0x0800b5c8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <__io_putchar>:
/******************************************************************
  * @name   PUTCHAR_PROTOTYPE
  * @brief  Retargets the C library printf function to the USART.
  *****************************************************************/
PUTCHAR_PROTOTYPE
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 800059c:	1d39      	adds	r1, r7, #4
 800059e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a2:	2201      	movs	r2, #1
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <__io_putchar+0x20>)
 80005a6:	f004 ff3d 	bl	8005424 <HAL_UART_Transmit>
    return ch;
 80005aa:	687b      	ldr	r3, [r7, #4]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	200003c8 	.word	0x200003c8

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
  HAL_Init();
 80005be:	f000 fc99 	bl	8000ef4 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80005c2:	f000 f957 	bl	8000874 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c6:	f000 f9c5 	bl	8000954 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005ca:	f008 ff91 	bl	80094f0 <MX_USB_DEVICE_Init>

  while (1)
  {

      if ((bitFlag & BFLAG_TABLE1) || (bitFlag & BFLAG_TABLE2) ||
 80005ce:	4b97      	ldr	r3, [pc, #604]	; (800082c <main+0x274>)
 80005d0:	881b      	ldrh	r3, [r3, #0]
 80005d2:	f003 0320 	and.w	r3, r3, #32
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d136      	bne.n	8000648 <main+0x90>
 80005da:	4b94      	ldr	r3, [pc, #592]	; (800082c <main+0x274>)
 80005dc:	881b      	ldrh	r3, [r3, #0]
 80005de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d130      	bne.n	8000648 <main+0x90>
    	  (bitFlag & BFLAG_TABLE3) || (bitFlag & BFLAG_TABLE4) ||
 80005e6:	4b91      	ldr	r3, [pc, #580]	; (800082c <main+0x274>)
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
      if ((bitFlag & BFLAG_TABLE1) || (bitFlag & BFLAG_TABLE2) ||
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d12a      	bne.n	8000648 <main+0x90>
    	  (bitFlag & BFLAG_TABLE3) || (bitFlag & BFLAG_TABLE4) ||
 80005f2:	4b8e      	ldr	r3, [pc, #568]	; (800082c <main+0x274>)
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d124      	bne.n	8000648 <main+0x90>
		  (bitFlag & BFLAG_TABLE5) || (bitFlag & BFLAG_TABLE6) ||
 80005fe:	4b8b      	ldr	r3, [pc, #556]	; (800082c <main+0x274>)
 8000600:	881b      	ldrh	r3, [r3, #0]
 8000602:	f403 7300 	and.w	r3, r3, #512	; 0x200
    	  (bitFlag & BFLAG_TABLE3) || (bitFlag & BFLAG_TABLE4) ||
 8000606:	2b00      	cmp	r3, #0
 8000608:	d11e      	bne.n	8000648 <main+0x90>
		  (bitFlag & BFLAG_TABLE5) || (bitFlag & BFLAG_TABLE6) ||
 800060a:	4b88      	ldr	r3, [pc, #544]	; (800082c <main+0x274>)
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000612:	2b00      	cmp	r3, #0
 8000614:	d118      	bne.n	8000648 <main+0x90>
		  (bitFlag & BFLAG_TABLE7) || (bitFlag & BFLAG_TABLE8) ||
 8000616:	4b85      	ldr	r3, [pc, #532]	; (800082c <main+0x274>)
 8000618:	881b      	ldrh	r3, [r3, #0]
 800061a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
		  (bitFlag & BFLAG_TABLE5) || (bitFlag & BFLAG_TABLE6) ||
 800061e:	2b00      	cmp	r3, #0
 8000620:	d112      	bne.n	8000648 <main+0x90>
		  (bitFlag & BFLAG_TABLE7) || (bitFlag & BFLAG_TABLE8) ||
 8000622:	4b82      	ldr	r3, [pc, #520]	; (800082c <main+0x274>)
 8000624:	881b      	ldrh	r3, [r3, #0]
 8000626:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800062a:	2b00      	cmp	r3, #0
 800062c:	d10c      	bne.n	8000648 <main+0x90>
		  (bitFlag & BFLAG_TABLE9) || (bitFlag & BFLAG_TABLE10))
 800062e:	4b7f      	ldr	r3, [pc, #508]	; (800082c <main+0x274>)
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
		  (bitFlag & BFLAG_TABLE7) || (bitFlag & BFLAG_TABLE8) ||
 8000636:	2b00      	cmp	r3, #0
 8000638:	d106      	bne.n	8000648 <main+0x90>
		  (bitFlag & BFLAG_TABLE9) || (bitFlag & BFLAG_TABLE10))
 800063a:	4b7c      	ldr	r3, [pc, #496]	; (800082c <main+0x274>)
 800063c:	881b      	ldrh	r3, [r3, #0]
 800063e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000642:	2b00      	cmp	r3, #0
 8000644:	f000 80d7 	beq.w	80007f6 <main+0x23e>
      {
    	  if (bitFlag & BFLAG_TABLE1){
 8000648:	4b78      	ldr	r3, [pc, #480]	; (800082c <main+0x274>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	f003 0320 	and.w	r3, r3, #32
 8000650:	2b00      	cmp	r3, #0
 8000652:	d00c      	beq.n	800066e <main+0xb6>
    		  u8_usbBuffer[0] = 3;
 8000654:	4b76      	ldr	r3, [pc, #472]	; (8000830 <main+0x278>)
 8000656:	2203      	movs	r2, #3
 8000658:	701a      	strb	r2, [r3, #0]
			  u8_usbBuffer[1] = 1;
 800065a:	4b75      	ldr	r3, [pc, #468]	; (8000830 <main+0x278>)
 800065c:	2201      	movs	r2, #1
 800065e:	705a      	strb	r2, [r3, #1]
			  bitFlag   &= ~BFLAG_TABLE1;
 8000660:	4b72      	ldr	r3, [pc, #456]	; (800082c <main+0x274>)
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	f023 0320 	bic.w	r3, r3, #32
 8000668:	b29a      	uxth	r2, r3
 800066a:	4b70      	ldr	r3, [pc, #448]	; (800082c <main+0x274>)
 800066c:	801a      	strh	r2, [r3, #0]
    	  }

    	  if (bitFlag & BFLAG_TABLE2){
 800066e:	4b6f      	ldr	r3, [pc, #444]	; (800082c <main+0x274>)
 8000670:	881b      	ldrh	r3, [r3, #0]
 8000672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000676:	2b00      	cmp	r3, #0
 8000678:	d00c      	beq.n	8000694 <main+0xdc>
			  u8_usbBuffer[0] = 3;
 800067a:	4b6d      	ldr	r3, [pc, #436]	; (8000830 <main+0x278>)
 800067c:	2203      	movs	r2, #3
 800067e:	701a      	strb	r2, [r3, #0]
			  u8_usbBuffer[1] = 2;
 8000680:	4b6b      	ldr	r3, [pc, #428]	; (8000830 <main+0x278>)
 8000682:	2202      	movs	r2, #2
 8000684:	705a      	strb	r2, [r3, #1]
			  bitFlag   &= ~BFLAG_TABLE2;
 8000686:	4b69      	ldr	r3, [pc, #420]	; (800082c <main+0x274>)
 8000688:	881b      	ldrh	r3, [r3, #0]
 800068a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800068e:	b29a      	uxth	r2, r3
 8000690:	4b66      	ldr	r3, [pc, #408]	; (800082c <main+0x274>)
 8000692:	801a      	strh	r2, [r3, #0]
		  }

    	  if (bitFlag & BFLAG_TABLE3){
 8000694:	4b65      	ldr	r3, [pc, #404]	; (800082c <main+0x274>)
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069c:	2b00      	cmp	r3, #0
 800069e:	d00c      	beq.n	80006ba <main+0x102>
			  u8_usbBuffer[0] = 3;
 80006a0:	4b63      	ldr	r3, [pc, #396]	; (8000830 <main+0x278>)
 80006a2:	2203      	movs	r2, #3
 80006a4:	701a      	strb	r2, [r3, #0]
			  u8_usbBuffer[1] = 3;
 80006a6:	4b62      	ldr	r3, [pc, #392]	; (8000830 <main+0x278>)
 80006a8:	2203      	movs	r2, #3
 80006aa:	705a      	strb	r2, [r3, #1]
			  bitFlag   &= ~BFLAG_TABLE3;
 80006ac:	4b5f      	ldr	r3, [pc, #380]	; (800082c <main+0x274>)
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	4b5d      	ldr	r3, [pc, #372]	; (800082c <main+0x274>)
 80006b8:	801a      	strh	r2, [r3, #0]
		  }

		  if (bitFlag & BFLAG_TABLE4){
 80006ba:	4b5c      	ldr	r3, [pc, #368]	; (800082c <main+0x274>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d00c      	beq.n	80006e0 <main+0x128>
			  u8_usbBuffer[0] = 3;
 80006c6:	4b5a      	ldr	r3, [pc, #360]	; (8000830 <main+0x278>)
 80006c8:	2203      	movs	r2, #3
 80006ca:	701a      	strb	r2, [r3, #0]
			  u8_usbBuffer[1] = 4;
 80006cc:	4b58      	ldr	r3, [pc, #352]	; (8000830 <main+0x278>)
 80006ce:	2204      	movs	r2, #4
 80006d0:	705a      	strb	r2, [r3, #1]
			  bitFlag   &= ~BFLAG_TABLE4;
 80006d2:	4b56      	ldr	r3, [pc, #344]	; (800082c <main+0x274>)
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006da:	b29a      	uxth	r2, r3
 80006dc:	4b53      	ldr	r3, [pc, #332]	; (800082c <main+0x274>)
 80006de:	801a      	strh	r2, [r3, #0]
		  }

		  if (bitFlag & BFLAG_TABLE5){
 80006e0:	4b52      	ldr	r3, [pc, #328]	; (800082c <main+0x274>)
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d00c      	beq.n	8000706 <main+0x14e>
			  u8_usbBuffer[0] = 3;
 80006ec:	4b50      	ldr	r3, [pc, #320]	; (8000830 <main+0x278>)
 80006ee:	2203      	movs	r2, #3
 80006f0:	701a      	strb	r2, [r3, #0]
			  u8_usbBuffer[1] = 5;
 80006f2:	4b4f      	ldr	r3, [pc, #316]	; (8000830 <main+0x278>)
 80006f4:	2205      	movs	r2, #5
 80006f6:	705a      	strb	r2, [r3, #1]
			  bitFlag   &= ~BFLAG_TABLE5;
 80006f8:	4b4c      	ldr	r3, [pc, #304]	; (800082c <main+0x274>)
 80006fa:	881b      	ldrh	r3, [r3, #0]
 80006fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000700:	b29a      	uxth	r2, r3
 8000702:	4b4a      	ldr	r3, [pc, #296]	; (800082c <main+0x274>)
 8000704:	801a      	strh	r2, [r3, #0]
		  }

		  if (bitFlag & BFLAG_TABLE6){
 8000706:	4b49      	ldr	r3, [pc, #292]	; (800082c <main+0x274>)
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800070e:	2b00      	cmp	r3, #0
 8000710:	d00c      	beq.n	800072c <main+0x174>
			  u8_usbBuffer[0] = 3;
 8000712:	4b47      	ldr	r3, [pc, #284]	; (8000830 <main+0x278>)
 8000714:	2203      	movs	r2, #3
 8000716:	701a      	strb	r2, [r3, #0]
			  u8_usbBuffer[1] = 6;
 8000718:	4b45      	ldr	r3, [pc, #276]	; (8000830 <main+0x278>)
 800071a:	2206      	movs	r2, #6
 800071c:	705a      	strb	r2, [r3, #1]
			  bitFlag   &= ~BFLAG_TABLE6;
 800071e:	4b43      	ldr	r3, [pc, #268]	; (800082c <main+0x274>)
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000726:	b29a      	uxth	r2, r3
 8000728:	4b40      	ldr	r3, [pc, #256]	; (800082c <main+0x274>)
 800072a:	801a      	strh	r2, [r3, #0]
		  }

		  if (bitFlag & BFLAG_TABLE7){
 800072c:	4b3f      	ldr	r3, [pc, #252]	; (800082c <main+0x274>)
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000734:	2b00      	cmp	r3, #0
 8000736:	d00c      	beq.n	8000752 <main+0x19a>
			  u8_usbBuffer[0] = 3;
 8000738:	4b3d      	ldr	r3, [pc, #244]	; (8000830 <main+0x278>)
 800073a:	2203      	movs	r2, #3
 800073c:	701a      	strb	r2, [r3, #0]
			  u8_usbBuffer[1] = 7;
 800073e:	4b3c      	ldr	r3, [pc, #240]	; (8000830 <main+0x278>)
 8000740:	2207      	movs	r2, #7
 8000742:	705a      	strb	r2, [r3, #1]
			  bitFlag   &= ~BFLAG_TABLE7;
 8000744:	4b39      	ldr	r3, [pc, #228]	; (800082c <main+0x274>)
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800074c:	b29a      	uxth	r2, r3
 800074e:	4b37      	ldr	r3, [pc, #220]	; (800082c <main+0x274>)
 8000750:	801a      	strh	r2, [r3, #0]
		  }

		  if (bitFlag & BFLAG_TABLE8){
 8000752:	4b36      	ldr	r3, [pc, #216]	; (800082c <main+0x274>)
 8000754:	881b      	ldrh	r3, [r3, #0]
 8000756:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800075a:	2b00      	cmp	r3, #0
 800075c:	d00c      	beq.n	8000778 <main+0x1c0>
			  u8_usbBuffer[0] = 3;
 800075e:	4b34      	ldr	r3, [pc, #208]	; (8000830 <main+0x278>)
 8000760:	2203      	movs	r2, #3
 8000762:	701a      	strb	r2, [r3, #0]
			  u8_usbBuffer[1] = 8;
 8000764:	4b32      	ldr	r3, [pc, #200]	; (8000830 <main+0x278>)
 8000766:	2208      	movs	r2, #8
 8000768:	705a      	strb	r2, [r3, #1]
			  bitFlag   &= ~BFLAG_TABLE8;
 800076a:	4b30      	ldr	r3, [pc, #192]	; (800082c <main+0x274>)
 800076c:	881b      	ldrh	r3, [r3, #0]
 800076e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000772:	b29a      	uxth	r2, r3
 8000774:	4b2d      	ldr	r3, [pc, #180]	; (800082c <main+0x274>)
 8000776:	801a      	strh	r2, [r3, #0]
		  }

		  if (bitFlag & BFLAG_TABLE9){
 8000778:	4b2c      	ldr	r3, [pc, #176]	; (800082c <main+0x274>)
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000780:	2b00      	cmp	r3, #0
 8000782:	d00c      	beq.n	800079e <main+0x1e6>
			  u8_usbBuffer[0] = 3;
 8000784:	4b2a      	ldr	r3, [pc, #168]	; (8000830 <main+0x278>)
 8000786:	2203      	movs	r2, #3
 8000788:	701a      	strb	r2, [r3, #0]
			  u8_usbBuffer[1] = 9;
 800078a:	4b29      	ldr	r3, [pc, #164]	; (8000830 <main+0x278>)
 800078c:	2209      	movs	r2, #9
 800078e:	705a      	strb	r2, [r3, #1]
			  bitFlag   &= ~BFLAG_TABLE9;
 8000790:	4b26      	ldr	r3, [pc, #152]	; (800082c <main+0x274>)
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000798:	b29a      	uxth	r2, r3
 800079a:	4b24      	ldr	r3, [pc, #144]	; (800082c <main+0x274>)
 800079c:	801a      	strh	r2, [r3, #0]
		  }

		  if (bitFlag & BFLAG_TABLE10){
 800079e:	4b23      	ldr	r3, [pc, #140]	; (800082c <main+0x274>)
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d00c      	beq.n	80007c4 <main+0x20c>
			  u8_usbBuffer[0] = 3;
 80007aa:	4b21      	ldr	r3, [pc, #132]	; (8000830 <main+0x278>)
 80007ac:	2203      	movs	r2, #3
 80007ae:	701a      	strb	r2, [r3, #0]
			  u8_usbBuffer[1] = 10;
 80007b0:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <main+0x278>)
 80007b2:	220a      	movs	r2, #10
 80007b4:	705a      	strb	r2, [r3, #1]
			  bitFlag   &= ~BFLAG_TABLE10;
 80007b6:	4b1d      	ldr	r3, [pc, #116]	; (800082c <main+0x274>)
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80007be:	b29a      	uxth	r2, r3
 80007c0:	4b1a      	ldr	r3, [pc, #104]	; (800082c <main+0x274>)
 80007c2:	801a      	strh	r2, [r3, #0]
		  }

		  for (uint8_t idx = 2; idx < SIZE_BYTE; idx++)
 80007c4:	2302      	movs	r3, #2
 80007c6:	71fb      	strb	r3, [r7, #7]
 80007c8:	e00e      	b.n	80007e8 <main+0x230>
		  {
			  u8_usbBuffer[idx] = rand()%256;
 80007ca:	f009 fec5 	bl	800a558 <rand>
 80007ce:	4603      	mov	r3, r0
 80007d0:	425a      	negs	r2, r3
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	b2d2      	uxtb	r2, r2
 80007d6:	bf58      	it	pl
 80007d8:	4253      	negpl	r3, r2
 80007da:	79fa      	ldrb	r2, [r7, #7]
 80007dc:	b2d9      	uxtb	r1, r3
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <main+0x278>)
 80007e0:	5499      	strb	r1, [r3, r2]
		  for (uint8_t idx = 2; idx < SIZE_BYTE; idx++)
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	3301      	adds	r3, #1
 80007e6:	71fb      	strb	r3, [r7, #7]
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	2b3f      	cmp	r3, #63	; 0x3f
 80007ec:	d9ed      	bls.n	80007ca <main+0x212>
		  }

		  sendbytesViausb(u8_usbBuffer);
 80007ee:	4810      	ldr	r0, [pc, #64]	; (8000830 <main+0x278>)
 80007f0:	f008 fe9a 	bl	8009528 <sendbytesViausb>
      {
 80007f4:	e03b      	b.n	800086e <main+0x2b6>
      }

      else if (bitFlag & BFLAG_USB)                            //Process for Change USB Out buffer.
 80007f6:	4b0d      	ldr	r3, [pc, #52]	; (800082c <main+0x274>)
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d00a      	beq.n	8000818 <main+0x260>
      {
          printf("USB Out buffer changed\r\n");
 8000802:	480c      	ldr	r0, [pc, #48]	; (8000834 <main+0x27c>)
 8000804:	f009 fea0 	bl	800a548 <puts>
          bitFlag   &= ~BFLAG_USB;
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <main+0x274>)
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000810:	b29a      	uxth	r2, r3
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <main+0x274>)
 8000814:	801a      	strh	r2, [r3, #0]
 8000816:	e6da      	b.n	80005ce <main+0x16>
      }
      else if (bitFlag & BFLAG_RND)
 8000818:	4b04      	ldr	r3, [pc, #16]	; (800082c <main+0x274>)
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	b21b      	sxth	r3, r3
 800081e:	2b00      	cmp	r3, #0
 8000820:	f6bf aed5 	bge.w	80005ce <main+0x16>
      {
    	  // Generate Random
		  for (uint8_t idx = 0; idx < SIZE_BYTE; idx++)
 8000824:	2300      	movs	r3, #0
 8000826:	71bb      	strb	r3, [r7, #6]
 8000828:	e015      	b.n	8000856 <main+0x29e>
 800082a:	bf00      	nop
 800082c:	200004ac 	.word	0x200004ac
 8000830:	2000046c 	.word	0x2000046c
 8000834:	0800b5e0 	.word	0x0800b5e0
		  {
			  u8_usbBuffer[idx] = rand()%256;
 8000838:	f009 fe8e 	bl	800a558 <rand>
 800083c:	4603      	mov	r3, r0
 800083e:	425a      	negs	r2, r3
 8000840:	b2db      	uxtb	r3, r3
 8000842:	b2d2      	uxtb	r2, r2
 8000844:	bf58      	it	pl
 8000846:	4253      	negpl	r3, r2
 8000848:	79ba      	ldrb	r2, [r7, #6]
 800084a:	b2d9      	uxtb	r1, r3
 800084c:	4b08      	ldr	r3, [pc, #32]	; (8000870 <main+0x2b8>)
 800084e:	5499      	strb	r1, [r3, r2]
		  for (uint8_t idx = 0; idx < SIZE_BYTE; idx++)
 8000850:	79bb      	ldrb	r3, [r7, #6]
 8000852:	3301      	adds	r3, #1
 8000854:	71bb      	strb	r3, [r7, #6]
 8000856:	79bb      	ldrb	r3, [r7, #6]
 8000858:	2b3f      	cmp	r3, #63	; 0x3f
 800085a:	d9ed      	bls.n	8000838 <main+0x280>
		  }

		  u8_usbBuffer[0]=4;
 800085c:	4b04      	ldr	r3, [pc, #16]	; (8000870 <main+0x2b8>)
 800085e:	2204      	movs	r2, #4
 8000860:	701a      	strb	r2, [r3, #0]
		  u8_usbBuffer[1]=2;
 8000862:	4b03      	ldr	r3, [pc, #12]	; (8000870 <main+0x2b8>)
 8000864:	2202      	movs	r2, #2
 8000866:	705a      	strb	r2, [r3, #1]

		  sendbytesViausb(u8_usbBuffer);
 8000868:	4801      	ldr	r0, [pc, #4]	; (8000870 <main+0x2b8>)
 800086a:	f008 fe5d 	bl	8009528 <sendbytesViausb>
      if ((bitFlag & BFLAG_TABLE1) || (bitFlag & BFLAG_TABLE2) ||
 800086e:	e6ae      	b.n	80005ce <main+0x16>
 8000870:	2000046c 	.word	0x2000046c

08000874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b094      	sub	sp, #80	; 0x50
 8000878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087a:	f107 0320 	add.w	r3, r7, #32
 800087e:	2230      	movs	r2, #48	; 0x30
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f009 fdd2 	bl	800a42c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000898:	2300      	movs	r3, #0
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	4b2a      	ldr	r3, [pc, #168]	; (8000948 <SystemClock_Config+0xd4>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a0:	4a29      	ldr	r2, [pc, #164]	; (8000948 <SystemClock_Config+0xd4>)
 80008a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a6:	6413      	str	r3, [r2, #64]	; 0x40
 80008a8:	4b27      	ldr	r3, [pc, #156]	; (8000948 <SystemClock_Config+0xd4>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b4:	2300      	movs	r3, #0
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	4b24      	ldr	r3, [pc, #144]	; (800094c <SystemClock_Config+0xd8>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a23      	ldr	r2, [pc, #140]	; (800094c <SystemClock_Config+0xd8>)
 80008be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008c2:	6013      	str	r3, [r2, #0]
 80008c4:	4b21      	ldr	r3, [pc, #132]	; (800094c <SystemClock_Config+0xd8>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType  = RCC_OSCILLATORTYPE_HSE;
 80008d0:	2301      	movs	r3, #1
 80008d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState        = RCC_HSE_BYPASS;
 80008d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState    = RCC_PLL_ON;
 80008da:	2302      	movs	r3, #2
 80008dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource   = RCC_PLLSOURCE_HSE;
 80008de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM        = 4;
 80008e4:	2304      	movs	r3, #4
 80008e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN        = 168;
 80008e8:	23a8      	movs	r3, #168	; 0xa8
 80008ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP        = RCC_PLLP_DIV2;
 80008ec:	2302      	movs	r3, #2
 80008ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ        = 7;
 80008f0:	2307      	movs	r3, #7
 80008f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f4:	f107 0320 	add.w	r3, r7, #32
 80008f8:	4618      	mov	r0, r3
 80008fa:	f004 f805 	bl	8004908 <HAL_RCC_OscConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d003      	beq.n	800090c <SystemClock_Config+0x98>
  {
    Error_Handler(__FILE__, __LINE__);
 8000904:	21db      	movs	r1, #219	; 0xdb
 8000906:	4812      	ldr	r0, [pc, #72]	; (8000950 <SystemClock_Config+0xdc>)
 8000908:	f000 f8d2 	bl	8000ab0 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090c:	230f      	movs	r3, #15
 800090e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource    = RCC_SYSCLKSOURCE_PLLCLK;
 8000910:	2302      	movs	r3, #2
 8000912:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider   = RCC_SYSCLK_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider  = RCC_HCLK_DIV4;
 8000918:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800091c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider  = RCC_HCLK_DIV2;
 800091e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000922:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	2105      	movs	r1, #5
 800092a:	4618      	mov	r0, r3
 800092c:	f004 fa64 	bl	8004df8 <HAL_RCC_ClockConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d003      	beq.n	800093e <SystemClock_Config+0xca>
  {
    Error_Handler(__FILE__, __LINE__);
 8000936:	21e7      	movs	r1, #231	; 0xe7
 8000938:	4805      	ldr	r0, [pc, #20]	; (8000950 <SystemClock_Config+0xdc>)
 800093a:	f000 f8b9 	bl	8000ab0 <Error_Handler>
  }
}
 800093e:	bf00      	nop
 8000940:	3750      	adds	r7, #80	; 0x50
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800
 800094c:	40007000 	.word	0x40007000
 8000950:	0800b5f8 	.word	0x0800b5f8

08000954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08c      	sub	sp, #48	; 0x30
 8000958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	61bb      	str	r3, [r7, #24]
 800096e:	4b4c      	ldr	r3, [pc, #304]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a4b      	ldr	r2, [pc, #300]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b49      	ldr	r3, [pc, #292]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0304 	and.w	r3, r3, #4
 8000982:	61bb      	str	r3, [r7, #24]
 8000984:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]
 800098a:	4b45      	ldr	r3, [pc, #276]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a44      	ldr	r2, [pc, #272]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 8000990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b42      	ldr	r3, [pc, #264]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	4b3e      	ldr	r3, [pc, #248]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a3d      	ldr	r2, [pc, #244]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b3b      	ldr	r3, [pc, #236]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	4b37      	ldr	r3, [pc, #220]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a36      	ldr	r2, [pc, #216]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b34      	ldr	r3, [pc, #208]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	4b30      	ldr	r3, [pc, #192]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a2f      	ldr	r2, [pc, #188]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 80009e4:	f043 0308 	orr.w	r3, r3, #8
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b2d      	ldr	r3, [pc, #180]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0308 	and.w	r3, r3, #8
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b29      	ldr	r3, [pc, #164]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a28      	ldr	r2, [pc, #160]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 8000a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b26      	ldr	r3, [pc, #152]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a18:	4822      	ldr	r0, [pc, #136]	; (8000aa4 <MX_GPIO_Init+0x150>)
 8000a1a:	f000 ffe9 	bl	80019f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2140      	movs	r1, #64	; 0x40
 8000a22:	4821      	ldr	r0, [pc, #132]	; (8000aa8 <MX_GPIO_Init+0x154>)
 8000a24:	f000 ffe4 	bl	80019f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin   = USER_Btn_Pin;
 8000a28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_RISING;
 8000a2e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	481b      	ldr	r0, [pc, #108]	; (8000aac <MX_GPIO_Init+0x158>)
 8000a40:	f000 fe2a 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin   = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a44:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4811      	ldr	r0, [pc, #68]	; (8000aa4 <MX_GPIO_Init+0x150>)
 8000a5e:	f000 fe1b 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin   = USB_PowerSwitchOn_Pin;
 8000a62:	2340      	movs	r3, #64	; 0x40
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8000a66:	2301      	movs	r3, #1
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	4619      	mov	r1, r3
 8000a78:	480b      	ldr	r0, [pc, #44]	; (8000aa8 <MX_GPIO_Init+0x154>)
 8000a7a:	f000 fe0d 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin   = USB_OverCurrent_Pin;
 8000a7e:	2380      	movs	r3, #128	; 0x80
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode  = GPIO_MODE_INPUT;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_GPIO_Init+0x154>)
 8000a92:	f000 fe01 	bl	8001698 <HAL_GPIO_Init>

}
 8000a96:	bf00      	nop
 8000a98:	3730      	adds	r7, #48	; 0x30
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020400 	.word	0x40020400
 8000aa8:	40021800 	.word	0x40021800
 8000aac:	40020800 	.word	0x40020800

08000ab0 <Error_Handler>:
/************************************************************
* @brief  This function is executed in case of error occurrence.
* @retval None
************************************************************/
void Error_Handler(char * file, int line)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b088      	sub	sp, #32
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aba:	b672      	cpsid	i
}
 8000abc:	bf00      	nop
__disable_irq();
printf("\r\nERROR: %s, line: %d \r\n",file,line);
 8000abe:	683a      	ldr	r2, [r7, #0]
 8000ac0:	6879      	ldr	r1, [r7, #4]
 8000ac2:	481e      	ldr	r0, [pc, #120]	; (8000b3c <Error_Handler+0x8c>)
 8000ac4:	f009 fcba 	bl	800a43c <iprintf>

// Configurable Fault Status Register, Consists of MMSR, BFSR and UFSR
volatile unsigned long  _CFSR = (*((volatile unsigned long *)(0xE000ED28)));
 8000ac8:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <Error_Handler+0x90>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	61fb      	str	r3, [r7, #28]
printf("CFSR: %lu \r\n",_CFSR);
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	481c      	ldr	r0, [pc, #112]	; (8000b44 <Error_Handler+0x94>)
 8000ad4:	f009 fcb2 	bl	800a43c <iprintf>


// Hard Fault Status Register
volatile unsigned long _HFSR = (*((volatile unsigned long *)(0xE000ED2C)));
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <Error_Handler+0x98>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	61bb      	str	r3, [r7, #24]
printf("HFSR: %lu \r\n",_HFSR);
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	481a      	ldr	r0, [pc, #104]	; (8000b4c <Error_Handler+0x9c>)
 8000ae4:	f009 fcaa 	bl	800a43c <iprintf>

// Debug Fault Status Register
volatile unsigned long _DFSR = (*((volatile unsigned long *)(0xE000ED30)));
 8000ae8:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <Error_Handler+0xa0>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	617b      	str	r3, [r7, #20]
printf("DFSR: %lu \r\n",_DFSR);
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	4619      	mov	r1, r3
 8000af2:	4818      	ldr	r0, [pc, #96]	; (8000b54 <Error_Handler+0xa4>)
 8000af4:	f009 fca2 	bl	800a43c <iprintf>

// Auxiliary Fault Status Register
volatile unsigned long _AFSR = (*((volatile unsigned long *)(0xE000ED3C)));
 8000af8:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <Error_Handler+0xa8>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	613b      	str	r3, [r7, #16]
printf("AFSR: %lu \r\n",_AFSR);
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	4619      	mov	r1, r3
 8000b02:	4816      	ldr	r0, [pc, #88]	; (8000b5c <Error_Handler+0xac>)
 8000b04:	f009 fc9a 	bl	800a43c <iprintf>

// Check BFARVALID/MMARVALID to see if they are valid values
// MemManage Fault Address Register
volatile unsigned long _MMAR = (*((volatile unsigned long *)(0xE000ED34)));
 8000b08:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <Error_Handler+0xb0>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	60fb      	str	r3, [r7, #12]
printf("MMAR: %lu \r\n",_MMAR);
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	4619      	mov	r1, r3
 8000b12:	4814      	ldr	r0, [pc, #80]	; (8000b64 <Error_Handler+0xb4>)
 8000b14:	f009 fc92 	bl	800a43c <iprintf>

// Bus Fault Address Register
volatile unsigned long _BFAR = (*((volatile unsigned long *)(0xE000ED38)));
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <Error_Handler+0xb8>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	60bb      	str	r3, [r7, #8]
printf("BFAR: %lu \r\n",_BFAR);
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	4619      	mov	r1, r3
 8000b22:	4812      	ldr	r0, [pc, #72]	; (8000b6c <Error_Handler+0xbc>)
 8000b24:	f009 fc8a 	bl	800a43c <iprintf>

//__asm("BKPT #0\n") ; // Break into the debugger

while (1)
{
      HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000b28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b2c:	4810      	ldr	r0, [pc, #64]	; (8000b70 <Error_Handler+0xc0>)
 8000b2e:	f000 ff78 	bl	8001a22 <HAL_GPIO_TogglePin>
      HAL_Delay(100);
 8000b32:	2064      	movs	r0, #100	; 0x64
 8000b34:	f000 fa50 	bl	8000fd8 <HAL_Delay>
      HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000b38:	e7f6      	b.n	8000b28 <Error_Handler+0x78>
 8000b3a:	bf00      	nop
 8000b3c:	0800b60c 	.word	0x0800b60c
 8000b40:	e000ed28 	.word	0xe000ed28
 8000b44:	0800b628 	.word	0x0800b628
 8000b48:	e000ed2c 	.word	0xe000ed2c
 8000b4c:	0800b638 	.word	0x0800b638
 8000b50:	e000ed30 	.word	0xe000ed30
 8000b54:	0800b648 	.word	0x0800b648
 8000b58:	e000ed3c 	.word	0xe000ed3c
 8000b5c:	0800b658 	.word	0x0800b658
 8000b60:	e000ed34 	.word	0xe000ed34
 8000b64:	0800b668 	.word	0x0800b668
 8000b68:	e000ed38 	.word	0xe000ed38
 8000b6c:	0800b678 	.word	0x0800b678
 8000b70:	40020400 	.word	0x40020400

08000b74 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	4a0f      	ldr	r2, [pc, #60]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b88:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	40023800 	.word	0x40023800

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <NMI_Handler+0x4>

08000bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  while (1)
 8000bce:	e7fe      	b.n	8000bce <HardFault_Handler+0x4>

08000bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <MemManage_Handler+0x4>

08000bd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  while (1)
 8000bda:	e7fe      	b.n	8000bda <BusFault_Handler+0x4>

08000bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <UsageFault_Handler+0x4>

08000be2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0

}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0

}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0

}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000c10:	f000 f9c2 	bl	8000f98 <HAL_IncTick>
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000c1c:	4802      	ldr	r0, [pc, #8]	; (8000c28 <DMA1_Stream0_IRQHandler+0x10>)
 8000c1e:	f000 fba3 	bl	8001368 <HAL_DMA_IRQHandler>
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200001f0 	.word	0x200001f0

08000c2c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000c30:	4802      	ldr	r0, [pc, #8]	; (8000c3c <DMA1_Stream1_IRQHandler+0x10>)
 8000c32:	f000 fb99 	bl	8001368 <HAL_DMA_IRQHandler>
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	2000040c 	.word	0x2000040c

08000c40 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000c44:	4802      	ldr	r0, [pc, #8]	; (8000c50 <DMA1_Stream6_IRQHandler+0x10>)
 8000c46:	f000 fb8f 	bl	8001368 <HAL_DMA_IRQHandler>
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000250 	.word	0x20000250

08000c54 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c58:	4802      	ldr	r0, [pc, #8]	; (8000c64 <I2C1_EV_IRQHandler+0x10>)
 8000c5a:	f000 ff20 	bl	8001a9e <HAL_I2C_EV_IRQHandler>
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	2000019c 	.word	0x2000019c

08000c68 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <I2C1_ER_IRQHandler+0x10>)
 8000c6e:	f001 f887 	bl	8001d80 <HAL_I2C_ER_IRQHandler>
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	2000019c 	.word	0x2000019c

08000c7c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi1);
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <SPI1_IRQHandler+0x10>)
 8000c82:	f004 fab1 	bl	80051e8 <HAL_SPI_IRQHandler>
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200002b0 	.word	0x200002b0

08000c90 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart3);
 8000c94:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <USART3_IRQHandler+0x10>)
 8000c96:	f004 fc57 	bl	8005548 <HAL_UART_IRQHandler>
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	200003c8 	.word	0x200003c8

08000ca4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000ca8:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <DMA2_Stream0_IRQHandler+0x10>)
 8000caa:	f000 fb5d 	bl	8001368 <HAL_DMA_IRQHandler>
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000308 	.word	0x20000308

08000cb8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000cbc:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <DMA2_Stream3_IRQHandler+0x10>)
 8000cbe:	f000 fb53 	bl	8001368 <HAL_DMA_IRQHandler>
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000368 	.word	0x20000368

08000ccc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000cd0:	4802      	ldr	r0, [pc, #8]	; (8000cdc <OTG_FS_IRQHandler+0x10>)
 8000cd2:	f002 fd10 	bl	80036f6 <HAL_PCD_IRQHandler>
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000a1c 	.word	0x20000a1c

08000ce0 <EXTI15_10_IRQHandler>:
  * @brief  This function handles external lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  *****************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000ce4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ce8:	f000 feb6 	bl	8001a58 <HAL_GPIO_EXTI_IRQHandler>
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
	return 1;
 8000cf4:	2301      	movs	r3, #1
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <_kill>:

int _kill(int pid, int sig)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d0a:	f009 fb65 	bl	800a3d8 <__errno>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2216      	movs	r2, #22
 8000d12:	601a      	str	r2, [r3, #0]
	return -1;
 8000d14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <_exit>:

void _exit (int status)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d28:	f04f 31ff 	mov.w	r1, #4294967295
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f7ff ffe7 	bl	8000d00 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d32:	e7fe      	b.n	8000d32 <_exit+0x12>

08000d34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	e00a      	b.n	8000d5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d46:	f3af 8000 	nop.w
 8000d4a:	4601      	mov	r1, r0
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	1c5a      	adds	r2, r3, #1
 8000d50:	60ba      	str	r2, [r7, #8]
 8000d52:	b2ca      	uxtb	r2, r1
 8000d54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	dbf0      	blt.n	8000d46 <_read+0x12>
	}

return len;
 8000d64:	687b      	ldr	r3, [r7, #4]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	60f8      	str	r0, [r7, #12]
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
 8000d7e:	e009      	b.n	8000d94 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	1c5a      	adds	r2, r3, #1
 8000d84:	60ba      	str	r2, [r7, #8]
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fc03 	bl	8000594 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	3301      	adds	r3, #1
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	dbf1      	blt.n	8000d80 <_write+0x12>
	}
	return len;
 8000d9c:	687b      	ldr	r3, [r7, #4]
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <_close>:

int _close(int file)
{
 8000da6:	b480      	push	{r7}
 8000da8:	b083      	sub	sp, #12
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
	return -1;
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
 8000dc6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dce:	605a      	str	r2, [r3, #4]
	return 0;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <_isatty>:

int _isatty(int file)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b083      	sub	sp, #12
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
	return 1;
 8000de6:	2301      	movs	r3, #1
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
	return 0;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e18:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <_sbrk+0x5c>)
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <_sbrk+0x60>)
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e24:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <_sbrk+0x64>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d102      	bne.n	8000e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <_sbrk+0x64>)
 8000e2e:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <_sbrk+0x68>)
 8000e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d207      	bcs.n	8000e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e40:	f009 faca 	bl	800a3d8 <__errno>
 8000e44:	4603      	mov	r3, r0
 8000e46:	220c      	movs	r2, #12
 8000e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4e:	e009      	b.n	8000e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <_sbrk+0x64>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <_sbrk+0x64>)
 8000e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e62:	68fb      	ldr	r3, [r7, #12]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20030000 	.word	0x20030000
 8000e70:	00000400 	.word	0x00000400
 8000e74:	200004b0 	.word	0x200004b0
 8000e78:	20000f90 	.word	0x20000f90

08000e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <SystemInit+0x20>)
 8000e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e86:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <SystemInit+0x20>)
 8000e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ea0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea4:	480d      	ldr	r0, [pc, #52]	; (8000edc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ea6:	490e      	ldr	r1, [pc, #56]	; (8000ee0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ea8:	4a0e      	ldr	r2, [pc, #56]	; (8000ee4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eac:	e002      	b.n	8000eb4 <LoopCopyDataInit>

08000eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb2:	3304      	adds	r3, #4

08000eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb8:	d3f9      	bcc.n	8000eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eba:	4a0b      	ldr	r2, [pc, #44]	; (8000ee8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ebc:	4c0b      	ldr	r4, [pc, #44]	; (8000eec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec0:	e001      	b.n	8000ec6 <LoopFillZerobss>

08000ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec4:	3204      	adds	r2, #4

08000ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec8:	d3fb      	bcc.n	8000ec2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eca:	f7ff ffd7 	bl	8000e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ece:	f009 fa89 	bl	800a3e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ed2:	f7ff fb71 	bl	80005b8 <main>
  bx  lr    
 8000ed6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ed8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee0:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000ee4:	0800b88c 	.word	0x0800b88c
  ldr r2, =_sbss
 8000ee8:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000eec:	20000f90 	.word	0x20000f90

08000ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef0:	e7fe      	b.n	8000ef0 <ADC_IRQHandler>
	...

08000ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <HAL_Init+0x40>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <HAL_Init+0x40>)
 8000efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f04:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <HAL_Init+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <HAL_Init+0x40>)
 8000f0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <HAL_Init+0x40>)
 8000f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	f000 f94f 	bl	80011c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f22:	2000      	movs	r0, #0
 8000f24:	f000 f808 	bl	8000f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f28:	f7ff fe24 	bl	8000b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40023c00 	.word	0x40023c00

08000f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_InitTick+0x54>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_InitTick+0x58>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 f967 	bl	800122a <HAL_SYSTICK_Config>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e00e      	b.n	8000f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b0f      	cmp	r3, #15
 8000f6a:	d80a      	bhi.n	8000f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	f04f 30ff 	mov.w	r0, #4294967295
 8000f74:	f000 f92f 	bl	80011d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f78:	4a06      	ldr	r2, [pc, #24]	; (8000f94 <HAL_InitTick+0x5c>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e000      	b.n	8000f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	20000008 	.word	0x20000008
 8000f94:	20000004 	.word	0x20000004

08000f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_IncTick+0x20>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_IncTick+0x24>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <HAL_IncTick+0x24>)
 8000faa:	6013      	str	r3, [r2, #0]
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000008 	.word	0x20000008
 8000fbc:	200004b4 	.word	0x200004b4

08000fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc4:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <HAL_GetTick+0x14>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	200004b4 	.word	0x200004b4

08000fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe0:	f7ff ffee 	bl	8000fc0 <HAL_GetTick>
 8000fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff0:	d005      	beq.n	8000ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_Delay+0x44>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ffe:	bf00      	nop
 8001000:	f7ff ffde 	bl	8000fc0 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	429a      	cmp	r2, r3
 800100e:	d8f7      	bhi.n	8001000 <HAL_Delay+0x28>
  {
  }
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000008 	.word	0x20000008

08001020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <__NVIC_SetPriorityGrouping+0x44>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800103c:	4013      	ands	r3, r2
 800103e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800104c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001052:	4a04      	ldr	r2, [pc, #16]	; (8001064 <__NVIC_SetPriorityGrouping+0x44>)
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	60d3      	str	r3, [r2, #12]
}
 8001058:	bf00      	nop
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <__NVIC_GetPriorityGrouping+0x18>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	0a1b      	lsrs	r3, r3, #8
 8001072:	f003 0307 	and.w	r3, r3, #7
}
 8001076:	4618      	mov	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	2b00      	cmp	r3, #0
 8001094:	db0b      	blt.n	80010ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	f003 021f 	and.w	r2, r3, #31
 800109c:	4907      	ldr	r1, [pc, #28]	; (80010bc <__NVIC_EnableIRQ+0x38>)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	095b      	lsrs	r3, r3, #5
 80010a4:	2001      	movs	r0, #1
 80010a6:	fa00 f202 	lsl.w	r2, r0, r2
 80010aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000e100 	.word	0xe000e100

080010c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	6039      	str	r1, [r7, #0]
 80010ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	db0a      	blt.n	80010ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	490c      	ldr	r1, [pc, #48]	; (800110c <__NVIC_SetPriority+0x4c>)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	0112      	lsls	r2, r2, #4
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	440b      	add	r3, r1
 80010e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e8:	e00a      	b.n	8001100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	4908      	ldr	r1, [pc, #32]	; (8001110 <__NVIC_SetPriority+0x50>)
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	f003 030f 	and.w	r3, r3, #15
 80010f6:	3b04      	subs	r3, #4
 80010f8:	0112      	lsls	r2, r2, #4
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	440b      	add	r3, r1
 80010fe:	761a      	strb	r2, [r3, #24]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000e100 	.word	0xe000e100
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001114:	b480      	push	{r7}
 8001116:	b089      	sub	sp, #36	; 0x24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f1c3 0307 	rsb	r3, r3, #7
 800112e:	2b04      	cmp	r3, #4
 8001130:	bf28      	it	cs
 8001132:	2304      	movcs	r3, #4
 8001134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3304      	adds	r3, #4
 800113a:	2b06      	cmp	r3, #6
 800113c:	d902      	bls.n	8001144 <NVIC_EncodePriority+0x30>
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3b03      	subs	r3, #3
 8001142:	e000      	b.n	8001146 <NVIC_EncodePriority+0x32>
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001148:	f04f 32ff 	mov.w	r2, #4294967295
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43da      	mvns	r2, r3
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	401a      	ands	r2, r3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800115c:	f04f 31ff 	mov.w	r1, #4294967295
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	fa01 f303 	lsl.w	r3, r1, r3
 8001166:	43d9      	mvns	r1, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116c:	4313      	orrs	r3, r2
         );
}
 800116e:	4618      	mov	r0, r3
 8001170:	3724      	adds	r7, #36	; 0x24
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800118c:	d301      	bcc.n	8001192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800118e:	2301      	movs	r3, #1
 8001190:	e00f      	b.n	80011b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001192:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <SysTick_Config+0x40>)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800119a:	210f      	movs	r1, #15
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	f7ff ff8e 	bl	80010c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <SysTick_Config+0x40>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011aa:	4b04      	ldr	r3, [pc, #16]	; (80011bc <SysTick_Config+0x40>)
 80011ac:	2207      	movs	r2, #7
 80011ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	e000e010 	.word	0xe000e010

080011c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff ff29 	bl	8001020 <__NVIC_SetPriorityGrouping>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b086      	sub	sp, #24
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
 80011e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011e8:	f7ff ff3e 	bl	8001068 <__NVIC_GetPriorityGrouping>
 80011ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	68b9      	ldr	r1, [r7, #8]
 80011f2:	6978      	ldr	r0, [r7, #20]
 80011f4:	f7ff ff8e 	bl	8001114 <NVIC_EncodePriority>
 80011f8:	4602      	mov	r2, r0
 80011fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fe:	4611      	mov	r1, r2
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff5d 	bl	80010c0 <__NVIC_SetPriority>
}
 8001206:	bf00      	nop
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	4603      	mov	r3, r0
 8001216:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff31 	bl	8001084 <__NVIC_EnableIRQ>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ffa2 	bl	800117c <SysTick_Config>
 8001238:	4603      	mov	r3, r0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b084      	sub	sp, #16
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001250:	f7ff feb6 	bl	8000fc0 <HAL_GetTick>
 8001254:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d008      	beq.n	8001274 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2280      	movs	r2, #128	; 0x80
 8001266:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e052      	b.n	800131a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 0216 	bic.w	r2, r2, #22
 8001282:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	695a      	ldr	r2, [r3, #20]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001292:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001298:	2b00      	cmp	r3, #0
 800129a:	d103      	bne.n	80012a4 <HAL_DMA_Abort+0x62>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d007      	beq.n	80012b4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 0208 	bic.w	r2, r2, #8
 80012b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 0201 	bic.w	r2, r2, #1
 80012c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012c4:	e013      	b.n	80012ee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012c6:	f7ff fe7b 	bl	8000fc0 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b05      	cmp	r3, #5
 80012d2:	d90c      	bls.n	80012ee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2220      	movs	r2, #32
 80012d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2203      	movs	r2, #3
 80012de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e015      	b.n	800131a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1e4      	bne.n	80012c6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001300:	223f      	movs	r2, #63	; 0x3f
 8001302:	409a      	lsls	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2201      	movs	r2, #1
 800130c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d004      	beq.n	8001340 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2280      	movs	r2, #128	; 0x80
 800133a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e00c      	b.n	800135a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2205      	movs	r2, #5
 8001344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0201 	bic.w	r2, r2, #1
 8001356:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001370:	2300      	movs	r3, #0
 8001372:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001374:	4b8e      	ldr	r3, [pc, #568]	; (80015b0 <HAL_DMA_IRQHandler+0x248>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a8e      	ldr	r2, [pc, #568]	; (80015b4 <HAL_DMA_IRQHandler+0x24c>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	0a9b      	lsrs	r3, r3, #10
 8001380:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001386:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001392:	2208      	movs	r2, #8
 8001394:	409a      	lsls	r2, r3
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	4013      	ands	r3, r2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d01a      	beq.n	80013d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d013      	beq.n	80013d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 0204 	bic.w	r2, r2, #4
 80013ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c0:	2208      	movs	r2, #8
 80013c2:	409a      	lsls	r2, r3
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013cc:	f043 0201 	orr.w	r2, r3, #1
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d8:	2201      	movs	r2, #1
 80013da:	409a      	lsls	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4013      	ands	r3, r2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d012      	beq.n	800140a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d00b      	beq.n	800140a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f6:	2201      	movs	r2, #1
 80013f8:	409a      	lsls	r2, r3
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001402:	f043 0202 	orr.w	r2, r3, #2
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800140e:	2204      	movs	r2, #4
 8001410:	409a      	lsls	r2, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	4013      	ands	r3, r2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d012      	beq.n	8001440 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00b      	beq.n	8001440 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800142c:	2204      	movs	r2, #4
 800142e:	409a      	lsls	r2, r3
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001438:	f043 0204 	orr.w	r2, r3, #4
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001444:	2210      	movs	r2, #16
 8001446:	409a      	lsls	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4013      	ands	r3, r2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d043      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	2b00      	cmp	r3, #0
 800145c:	d03c      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001462:	2210      	movs	r2, #16
 8001464:	409a      	lsls	r2, r3
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d018      	beq.n	80014aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d108      	bne.n	8001498 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	2b00      	cmp	r3, #0
 800148c:	d024      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	4798      	blx	r3
 8001496:	e01f      	b.n	80014d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800149c:	2b00      	cmp	r3, #0
 800149e:	d01b      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	4798      	blx	r3
 80014a8:	e016      	b.n	80014d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d107      	bne.n	80014c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0208 	bic.w	r2, r2, #8
 80014c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014dc:	2220      	movs	r2, #32
 80014de:	409a      	lsls	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4013      	ands	r3, r2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 808f 	beq.w	8001608 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0310 	and.w	r3, r3, #16
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 8087 	beq.w	8001608 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014fe:	2220      	movs	r2, #32
 8001500:	409a      	lsls	r2, r3
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b05      	cmp	r3, #5
 8001510:	d136      	bne.n	8001580 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 0216 	bic.w	r2, r2, #22
 8001520:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	695a      	ldr	r2, [r3, #20]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001530:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	2b00      	cmp	r3, #0
 8001538:	d103      	bne.n	8001542 <HAL_DMA_IRQHandler+0x1da>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800153e:	2b00      	cmp	r3, #0
 8001540:	d007      	beq.n	8001552 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 0208 	bic.w	r2, r2, #8
 8001550:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001556:	223f      	movs	r2, #63	; 0x3f
 8001558:	409a      	lsls	r2, r3
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001572:	2b00      	cmp	r3, #0
 8001574:	d07e      	beq.n	8001674 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	4798      	blx	r3
        }
        return;
 800157e:	e079      	b.n	8001674 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d01d      	beq.n	80015ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d10d      	bne.n	80015b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d031      	beq.n	8001608 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	4798      	blx	r3
 80015ac:	e02c      	b.n	8001608 <HAL_DMA_IRQHandler+0x2a0>
 80015ae:	bf00      	nop
 80015b0:	20000000 	.word	0x20000000
 80015b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d023      	beq.n	8001608 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	4798      	blx	r3
 80015c8:	e01e      	b.n	8001608 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d10f      	bne.n	80015f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 0210 	bic.w	r2, r2, #16
 80015e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160c:	2b00      	cmp	r3, #0
 800160e:	d032      	beq.n	8001676 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	2b00      	cmp	r3, #0
 800161a:	d022      	beq.n	8001662 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2205      	movs	r2, #5
 8001620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0201 	bic.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	3301      	adds	r3, #1
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	429a      	cmp	r2, r3
 800163e:	d307      	bcc.n	8001650 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f2      	bne.n	8001634 <HAL_DMA_IRQHandler+0x2cc>
 800164e:	e000      	b.n	8001652 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001650:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001666:	2b00      	cmp	r3, #0
 8001668:	d005      	beq.n	8001676 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	4798      	blx	r3
 8001672:	e000      	b.n	8001676 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001674:	bf00      	nop
    }
  }
}
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800168a:	b2db      	uxtb	r3, r3
}
 800168c:	4618      	mov	r0, r3
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001698:	b480      	push	{r7}
 800169a:	b089      	sub	sp, #36	; 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
 80016b2:	e177      	b.n	80019a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016b4:	2201      	movs	r2, #1
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	4013      	ands	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	f040 8166 	bne.w	800199e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d005      	beq.n	80016ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d130      	bne.n	800174c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	2203      	movs	r2, #3
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	68da      	ldr	r2, [r3, #12]
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4313      	orrs	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001720:	2201      	movs	r2, #1
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	091b      	lsrs	r3, r3, #4
 8001736:	f003 0201 	and.w	r2, r3, #1
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 0303 	and.w	r3, r3, #3
 8001754:	2b03      	cmp	r3, #3
 8001756:	d017      	beq.n	8001788 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	2203      	movs	r2, #3
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4013      	ands	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d123      	bne.n	80017dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	08da      	lsrs	r2, r3, #3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3208      	adds	r2, #8
 800179c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	220f      	movs	r2, #15
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	691a      	ldr	r2, [r3, #16]
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	08da      	lsrs	r2, r3, #3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3208      	adds	r2, #8
 80017d6:	69b9      	ldr	r1, [r7, #24]
 80017d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	2203      	movs	r2, #3
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 0203 	and.w	r2, r3, #3
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 80c0 	beq.w	800199e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	4b66      	ldr	r3, [pc, #408]	; (80019bc <HAL_GPIO_Init+0x324>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	4a65      	ldr	r2, [pc, #404]	; (80019bc <HAL_GPIO_Init+0x324>)
 8001828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800182c:	6453      	str	r3, [r2, #68]	; 0x44
 800182e:	4b63      	ldr	r3, [pc, #396]	; (80019bc <HAL_GPIO_Init+0x324>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800183a:	4a61      	ldr	r2, [pc, #388]	; (80019c0 <HAL_GPIO_Init+0x328>)
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	089b      	lsrs	r3, r3, #2
 8001840:	3302      	adds	r3, #2
 8001842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001846:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	220f      	movs	r2, #15
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a58      	ldr	r2, [pc, #352]	; (80019c4 <HAL_GPIO_Init+0x32c>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d037      	beq.n	80018d6 <HAL_GPIO_Init+0x23e>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a57      	ldr	r2, [pc, #348]	; (80019c8 <HAL_GPIO_Init+0x330>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d031      	beq.n	80018d2 <HAL_GPIO_Init+0x23a>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a56      	ldr	r2, [pc, #344]	; (80019cc <HAL_GPIO_Init+0x334>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d02b      	beq.n	80018ce <HAL_GPIO_Init+0x236>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a55      	ldr	r2, [pc, #340]	; (80019d0 <HAL_GPIO_Init+0x338>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d025      	beq.n	80018ca <HAL_GPIO_Init+0x232>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a54      	ldr	r2, [pc, #336]	; (80019d4 <HAL_GPIO_Init+0x33c>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d01f      	beq.n	80018c6 <HAL_GPIO_Init+0x22e>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a53      	ldr	r2, [pc, #332]	; (80019d8 <HAL_GPIO_Init+0x340>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d019      	beq.n	80018c2 <HAL_GPIO_Init+0x22a>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a52      	ldr	r2, [pc, #328]	; (80019dc <HAL_GPIO_Init+0x344>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d013      	beq.n	80018be <HAL_GPIO_Init+0x226>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a51      	ldr	r2, [pc, #324]	; (80019e0 <HAL_GPIO_Init+0x348>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d00d      	beq.n	80018ba <HAL_GPIO_Init+0x222>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a50      	ldr	r2, [pc, #320]	; (80019e4 <HAL_GPIO_Init+0x34c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d007      	beq.n	80018b6 <HAL_GPIO_Init+0x21e>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a4f      	ldr	r2, [pc, #316]	; (80019e8 <HAL_GPIO_Init+0x350>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d101      	bne.n	80018b2 <HAL_GPIO_Init+0x21a>
 80018ae:	2309      	movs	r3, #9
 80018b0:	e012      	b.n	80018d8 <HAL_GPIO_Init+0x240>
 80018b2:	230a      	movs	r3, #10
 80018b4:	e010      	b.n	80018d8 <HAL_GPIO_Init+0x240>
 80018b6:	2308      	movs	r3, #8
 80018b8:	e00e      	b.n	80018d8 <HAL_GPIO_Init+0x240>
 80018ba:	2307      	movs	r3, #7
 80018bc:	e00c      	b.n	80018d8 <HAL_GPIO_Init+0x240>
 80018be:	2306      	movs	r3, #6
 80018c0:	e00a      	b.n	80018d8 <HAL_GPIO_Init+0x240>
 80018c2:	2305      	movs	r3, #5
 80018c4:	e008      	b.n	80018d8 <HAL_GPIO_Init+0x240>
 80018c6:	2304      	movs	r3, #4
 80018c8:	e006      	b.n	80018d8 <HAL_GPIO_Init+0x240>
 80018ca:	2303      	movs	r3, #3
 80018cc:	e004      	b.n	80018d8 <HAL_GPIO_Init+0x240>
 80018ce:	2302      	movs	r3, #2
 80018d0:	e002      	b.n	80018d8 <HAL_GPIO_Init+0x240>
 80018d2:	2301      	movs	r3, #1
 80018d4:	e000      	b.n	80018d8 <HAL_GPIO_Init+0x240>
 80018d6:	2300      	movs	r3, #0
 80018d8:	69fa      	ldr	r2, [r7, #28]
 80018da:	f002 0203 	and.w	r2, r2, #3
 80018de:	0092      	lsls	r2, r2, #2
 80018e0:	4093      	lsls	r3, r2
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018e8:	4935      	ldr	r1, [pc, #212]	; (80019c0 <HAL_GPIO_Init+0x328>)
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	089b      	lsrs	r3, r3, #2
 80018ee:	3302      	adds	r3, #2
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018f6:	4b3d      	ldr	r3, [pc, #244]	; (80019ec <HAL_GPIO_Init+0x354>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	43db      	mvns	r3, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4013      	ands	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800191a:	4a34      	ldr	r2, [pc, #208]	; (80019ec <HAL_GPIO_Init+0x354>)
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001920:	4b32      	ldr	r3, [pc, #200]	; (80019ec <HAL_GPIO_Init+0x354>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001944:	4a29      	ldr	r2, [pc, #164]	; (80019ec <HAL_GPIO_Init+0x354>)
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800194a:	4b28      	ldr	r3, [pc, #160]	; (80019ec <HAL_GPIO_Init+0x354>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	43db      	mvns	r3, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4013      	ands	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800196e:	4a1f      	ldr	r2, [pc, #124]	; (80019ec <HAL_GPIO_Init+0x354>)
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001974:	4b1d      	ldr	r3, [pc, #116]	; (80019ec <HAL_GPIO_Init+0x354>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001998:	4a14      	ldr	r2, [pc, #80]	; (80019ec <HAL_GPIO_Init+0x354>)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3301      	adds	r3, #1
 80019a2:	61fb      	str	r3, [r7, #28]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	2b0f      	cmp	r3, #15
 80019a8:	f67f ae84 	bls.w	80016b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	3724      	adds	r7, #36	; 0x24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40013800 	.word	0x40013800
 80019c4:	40020000 	.word	0x40020000
 80019c8:	40020400 	.word	0x40020400
 80019cc:	40020800 	.word	0x40020800
 80019d0:	40020c00 	.word	0x40020c00
 80019d4:	40021000 	.word	0x40021000
 80019d8:	40021400 	.word	0x40021400
 80019dc:	40021800 	.word	0x40021800
 80019e0:	40021c00 	.word	0x40021c00
 80019e4:	40022000 	.word	0x40022000
 80019e8:	40022400 	.word	0x40022400
 80019ec:	40013c00 	.word	0x40013c00

080019f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	807b      	strh	r3, [r7, #2]
 80019fc:	4613      	mov	r3, r2
 80019fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a00:	787b      	ldrb	r3, [r7, #1]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a06:	887a      	ldrh	r2, [r7, #2]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a0c:	e003      	b.n	8001a16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a0e:	887b      	ldrh	r3, [r7, #2]
 8001a10:	041a      	lsls	r2, r3, #16
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	619a      	str	r2, [r3, #24]
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b085      	sub	sp, #20
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a34:	887a      	ldrh	r2, [r7, #2]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	041a      	lsls	r2, r3, #16
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	43d9      	mvns	r1, r3
 8001a40:	887b      	ldrh	r3, [r7, #2]
 8001a42:	400b      	ands	r3, r1
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	619a      	str	r2, [r3, #24]
}
 8001a4a:	bf00      	nop
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a62:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a64:	695a      	ldr	r2, [r3, #20]
 8001a66:	88fb      	ldrh	r3, [r7, #6]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d006      	beq.n	8001a7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a6e:	4a05      	ldr	r2, [pc, #20]	; (8001a84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a70:	88fb      	ldrh	r3, [r7, #6]
 8001a72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a74:	88fb      	ldrh	r3, [r7, #6]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 f806 	bl	8001a88 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40013c00 	.word	0x40013c00

08001a88 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b088      	sub	sp, #32
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab6:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001abe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac6:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	2b10      	cmp	r3, #16
 8001acc:	d003      	beq.n	8001ad6 <HAL_I2C_EV_IRQHandler+0x38>
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	2b40      	cmp	r3, #64	; 0x40
 8001ad2:	f040 80c1 	bne.w	8001c58 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d10d      	bne.n	8001b0c <HAL_I2C_EV_IRQHandler+0x6e>
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001af6:	d003      	beq.n	8001b00 <HAL_I2C_EV_IRQHandler+0x62>
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001afe:	d101      	bne.n	8001b04 <HAL_I2C_EV_IRQHandler+0x66>
 8001b00:	2301      	movs	r3, #1
 8001b02:	e000      	b.n	8001b06 <HAL_I2C_EV_IRQHandler+0x68>
 8001b04:	2300      	movs	r3, #0
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	f000 8132 	beq.w	8001d70 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00c      	beq.n	8001b30 <HAL_I2C_EV_IRQHandler+0x92>
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	0a5b      	lsrs	r3, r3, #9
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d006      	beq.n	8001b30 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f001 fc7c 	bl	8003420 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 fd83 	bl	8002634 <I2C_Master_SB>
 8001b2e:	e092      	b.n	8001c56 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	08db      	lsrs	r3, r3, #3
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d009      	beq.n	8001b50 <HAL_I2C_EV_IRQHandler+0xb2>
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	0a5b      	lsrs	r3, r3, #9
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 fdf9 	bl	8002740 <I2C_Master_ADD10>
 8001b4e:	e082      	b.n	8001c56 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	085b      	lsrs	r3, r3, #1
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d009      	beq.n	8001b70 <HAL_I2C_EV_IRQHandler+0xd2>
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	0a5b      	lsrs	r3, r3, #9
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 fe13 	bl	8002794 <I2C_Master_ADDR>
 8001b6e:	e072      	b.n	8001c56 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	089b      	lsrs	r3, r3, #2
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d03b      	beq.n	8001bf4 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b8a:	f000 80f3 	beq.w	8001d74 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	09db      	lsrs	r3, r3, #7
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00f      	beq.n	8001bba <HAL_I2C_EV_IRQHandler+0x11c>
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	0a9b      	lsrs	r3, r3, #10
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d009      	beq.n	8001bba <HAL_I2C_EV_IRQHandler+0x11c>
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	089b      	lsrs	r3, r3, #2
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d103      	bne.n	8001bba <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f9f3 	bl	8001f9e <I2C_MasterTransmit_TXE>
 8001bb8:	e04d      	b.n	8001c56 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	089b      	lsrs	r3, r3, #2
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 80d6 	beq.w	8001d74 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	0a5b      	lsrs	r3, r3, #9
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 80cf 	beq.w	8001d74 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001bd6:	7bbb      	ldrb	r3, [r7, #14]
 8001bd8:	2b21      	cmp	r3, #33	; 0x21
 8001bda:	d103      	bne.n	8001be4 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 fa7a 	bl	80020d6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001be2:	e0c7      	b.n	8001d74 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	2b40      	cmp	r3, #64	; 0x40
 8001be8:	f040 80c4 	bne.w	8001d74 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 fae8 	bl	80021c2 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bf2:	e0bf      	b.n	8001d74 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c02:	f000 80b7 	beq.w	8001d74 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	099b      	lsrs	r3, r3, #6
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00f      	beq.n	8001c32 <HAL_I2C_EV_IRQHandler+0x194>
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	0a9b      	lsrs	r3, r3, #10
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d009      	beq.n	8001c32 <HAL_I2C_EV_IRQHandler+0x194>
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	089b      	lsrs	r3, r3, #2
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d103      	bne.n	8001c32 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 fb5d 	bl	80022ea <I2C_MasterReceive_RXNE>
 8001c30:	e011      	b.n	8001c56 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	089b      	lsrs	r3, r3, #2
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 809a 	beq.w	8001d74 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	0a5b      	lsrs	r3, r3, #9
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 8093 	beq.w	8001d74 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 fc06 	bl	8002460 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c54:	e08e      	b.n	8001d74 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001c56:	e08d      	b.n	8001d74 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d004      	beq.n	8001c6a <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	61fb      	str	r3, [r7, #28]
 8001c68:	e007      	b.n	8001c7a <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	085b      	lsrs	r3, r3, #1
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d012      	beq.n	8001cac <HAL_I2C_EV_IRQHandler+0x20e>
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	0a5b      	lsrs	r3, r3, #9
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00c      	beq.n	8001cac <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001ca2:	69b9      	ldr	r1, [r7, #24]
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 ffc4 	bl	8002c32 <I2C_Slave_ADDR>
 8001caa:	e066      	b.n	8001d7a <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	091b      	lsrs	r3, r3, #4
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d009      	beq.n	8001ccc <HAL_I2C_EV_IRQHandler+0x22e>
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	0a5b      	lsrs	r3, r3, #9
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 ffff 	bl	8002cc8 <I2C_Slave_STOPF>
 8001cca:	e056      	b.n	8001d7a <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001ccc:	7bbb      	ldrb	r3, [r7, #14]
 8001cce:	2b21      	cmp	r3, #33	; 0x21
 8001cd0:	d002      	beq.n	8001cd8 <HAL_I2C_EV_IRQHandler+0x23a>
 8001cd2:	7bbb      	ldrb	r3, [r7, #14]
 8001cd4:	2b29      	cmp	r3, #41	; 0x29
 8001cd6:	d125      	bne.n	8001d24 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	09db      	lsrs	r3, r3, #7
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d00f      	beq.n	8001d04 <HAL_I2C_EV_IRQHandler+0x266>
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	0a9b      	lsrs	r3, r3, #10
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d009      	beq.n	8001d04 <HAL_I2C_EV_IRQHandler+0x266>
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	089b      	lsrs	r3, r3, #2
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d103      	bne.n	8001d04 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 feda 	bl	8002ab6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d02:	e039      	b.n	8001d78 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	089b      	lsrs	r3, r3, #2
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d033      	beq.n	8001d78 <HAL_I2C_EV_IRQHandler+0x2da>
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	0a5b      	lsrs	r3, r3, #9
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d02d      	beq.n	8001d78 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 ff07 	bl	8002b30 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d22:	e029      	b.n	8001d78 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	099b      	lsrs	r3, r3, #6
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00f      	beq.n	8001d50 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	0a9b      	lsrs	r3, r3, #10
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d009      	beq.n	8001d50 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	089b      	lsrs	r3, r3, #2
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d103      	bne.n	8001d50 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 ff12 	bl	8002b72 <I2C_SlaveReceive_RXNE>
 8001d4e:	e014      	b.n	8001d7a <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	089b      	lsrs	r3, r3, #2
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00e      	beq.n	8001d7a <HAL_I2C_EV_IRQHandler+0x2dc>
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	0a5b      	lsrs	r3, r3, #9
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d008      	beq.n	8001d7a <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 ff40 	bl	8002bee <I2C_SlaveReceive_BTF>
 8001d6e:	e004      	b.n	8001d7a <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001d70:	bf00      	nop
 8001d72:	e002      	b.n	8001d7a <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d74:	bf00      	nop
 8001d76:	e000      	b.n	8001d7a <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d78:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001d7a:	3720      	adds	r7, #32
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08a      	sub	sp, #40	; 0x28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001da2:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001da4:	6a3b      	ldr	r3, [r7, #32]
 8001da6:	0a1b      	lsrs	r3, r3, #8
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00e      	beq.n	8001dce <HAL_I2C_ER_IRQHandler+0x4e>
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	0a1b      	lsrs	r3, r3, #8
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d008      	beq.n	8001dce <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001dcc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001dce:	6a3b      	ldr	r3, [r7, #32]
 8001dd0:	0a5b      	lsrs	r3, r3, #9
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00e      	beq.n	8001df8 <HAL_I2C_ER_IRQHandler+0x78>
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	0a1b      	lsrs	r3, r3, #8
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d008      	beq.n	8001df8 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	f043 0302 	orr.w	r3, r3, #2
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001df6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001df8:	6a3b      	ldr	r3, [r7, #32]
 8001dfa:	0a9b      	lsrs	r3, r3, #10
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d03f      	beq.n	8001e84 <HAL_I2C_ER_IRQHandler+0x104>
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	0a1b      	lsrs	r3, r3, #8
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d039      	beq.n	8001e84 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8001e10:	7efb      	ldrb	r3, [r7, #27]
 8001e12:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e22:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e28:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001e2a:	7ebb      	ldrb	r3, [r7, #26]
 8001e2c:	2b20      	cmp	r3, #32
 8001e2e:	d112      	bne.n	8001e56 <HAL_I2C_ER_IRQHandler+0xd6>
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10f      	bne.n	8001e56 <HAL_I2C_ER_IRQHandler+0xd6>
 8001e36:	7cfb      	ldrb	r3, [r7, #19]
 8001e38:	2b21      	cmp	r3, #33	; 0x21
 8001e3a:	d008      	beq.n	8001e4e <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001e3c:	7cfb      	ldrb	r3, [r7, #19]
 8001e3e:	2b29      	cmp	r3, #41	; 0x29
 8001e40:	d005      	beq.n	8001e4e <HAL_I2C_ER_IRQHandler+0xce>
 8001e42:	7cfb      	ldrb	r3, [r7, #19]
 8001e44:	2b28      	cmp	r3, #40	; 0x28
 8001e46:	d106      	bne.n	8001e56 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2b21      	cmp	r3, #33	; 0x21
 8001e4c:	d103      	bne.n	8001e56 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f001 f86a 	bl	8002f28 <I2C_Slave_AF>
 8001e54:	e016      	b.n	8001e84 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e5e:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	f043 0304 	orr.w	r3, r3, #4
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001e68:	7efb      	ldrb	r3, [r7, #27]
 8001e6a:	2b10      	cmp	r3, #16
 8001e6c:	d002      	beq.n	8001e74 <HAL_I2C_ER_IRQHandler+0xf4>
 8001e6e:	7efb      	ldrb	r3, [r7, #27]
 8001e70:	2b40      	cmp	r3, #64	; 0x40
 8001e72:	d107      	bne.n	8001e84 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e82:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001e84:	6a3b      	ldr	r3, [r7, #32]
 8001e86:	0adb      	lsrs	r3, r3, #11
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00e      	beq.n	8001eae <HAL_I2C_ER_IRQHandler+0x12e>
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	0a1b      	lsrs	r3, r3, #8
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d008      	beq.n	8001eae <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	f043 0308 	orr.w	r3, r3, #8
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001eac:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d008      	beq.n	8001ec6 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f001 f8a1 	bl	8003008 <I2C_ITError>
  }
}
 8001ec6:	bf00      	nop
 8001ec8:	3728      	adds	r7, #40	; 0x28
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	460b      	mov	r3, r1
 8001f28:	70fb      	strb	r3, [r7, #3]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b084      	sub	sp, #16
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fb4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fba:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d150      	bne.n	8002066 <I2C_MasterTransmit_TXE+0xc8>
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
 8001fc6:	2b21      	cmp	r3, #33	; 0x21
 8001fc8:	d14d      	bne.n	8002066 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	d01d      	beq.n	800200c <I2C_MasterTransmit_TXE+0x6e>
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2b20      	cmp	r3, #32
 8001fd4:	d01a      	beq.n	800200c <I2C_MasterTransmit_TXE+0x6e>
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001fdc:	d016      	beq.n	800200c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001fec:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2211      	movs	r2, #17
 8001ff2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2220      	movs	r2, #32
 8002000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff ff62 	bl	8001ece <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800200a:	e060      	b.n	80020ce <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800201a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800202a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2220      	movs	r2, #32
 8002036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b40      	cmp	r3, #64	; 0x40
 8002044:	d107      	bne.n	8002056 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff ff7d 	bl	8001f4e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002054:	e03b      	b.n	80020ce <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff ff35 	bl	8001ece <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002064:	e033      	b.n	80020ce <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002066:	7bfb      	ldrb	r3, [r7, #15]
 8002068:	2b21      	cmp	r3, #33	; 0x21
 800206a:	d005      	beq.n	8002078 <I2C_MasterTransmit_TXE+0xda>
 800206c:	7bbb      	ldrb	r3, [r7, #14]
 800206e:	2b40      	cmp	r3, #64	; 0x40
 8002070:	d12d      	bne.n	80020ce <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	2b22      	cmp	r3, #34	; 0x22
 8002076:	d12a      	bne.n	80020ce <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207c:	b29b      	uxth	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d108      	bne.n	8002094 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002090:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002092:	e01c      	b.n	80020ce <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b40      	cmp	r3, #64	; 0x40
 800209e:	d103      	bne.n	80020a8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 f88e 	bl	80021c2 <I2C_MemoryTransmit_TXE_BTF>
}
 80020a6:	e012      	b.n	80020ce <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ac:	781a      	ldrb	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b8:	1c5a      	adds	r2, r3, #1
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	3b01      	subs	r3, #1
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80020cc:	e7ff      	b.n	80020ce <I2C_MasterTransmit_TXE+0x130>
 80020ce:	bf00      	nop
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b084      	sub	sp, #16
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b21      	cmp	r3, #33	; 0x21
 80020ee:	d164      	bne.n	80021ba <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d012      	beq.n	8002120 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	781a      	ldrb	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002114:	b29b      	uxth	r3, r3
 8002116:	3b01      	subs	r3, #1
 8002118:	b29a      	uxth	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800211e:	e04c      	b.n	80021ba <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2b08      	cmp	r3, #8
 8002124:	d01d      	beq.n	8002162 <I2C_MasterTransmit_BTF+0x8c>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2b20      	cmp	r3, #32
 800212a:	d01a      	beq.n	8002162 <I2C_MasterTransmit_BTF+0x8c>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002132:	d016      	beq.n	8002162 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002142:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2211      	movs	r2, #17
 8002148:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2220      	movs	r2, #32
 8002156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff feb7 	bl	8001ece <HAL_I2C_MasterTxCpltCallback>
}
 8002160:	e02b      	b.n	80021ba <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002170:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002180:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2220      	movs	r2, #32
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b40      	cmp	r3, #64	; 0x40
 800219a:	d107      	bne.n	80021ac <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7ff fed2 	bl	8001f4e <HAL_I2C_MemTxCpltCallback>
}
 80021aa:	e006      	b.n	80021ba <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff fe8a 	bl	8001ece <HAL_I2C_MasterTxCpltCallback>
}
 80021ba:	bf00      	nop
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b084      	sub	sp, #16
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d11d      	bne.n	8002216 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d10b      	bne.n	80021fa <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f2:	1c9a      	adds	r2, r3, #2
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80021f8:	e073      	b.n	80022e2 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021fe:	b29b      	uxth	r3, r3
 8002200:	121b      	asrs	r3, r3, #8
 8002202:	b2da      	uxtb	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800220e:	1c5a      	adds	r2, r3, #1
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002214:	e065      	b.n	80022e2 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800221a:	2b01      	cmp	r3, #1
 800221c:	d10b      	bne.n	8002236 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002222:	b2da      	uxtb	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002234:	e055      	b.n	80022e2 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800223a:	2b02      	cmp	r3, #2
 800223c:	d151      	bne.n	80022e2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	2b22      	cmp	r3, #34	; 0x22
 8002242:	d10d      	bne.n	8002260 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002252:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002258:	1c5a      	adds	r2, r3, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800225e:	e040      	b.n	80022e2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002264:	b29b      	uxth	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d015      	beq.n	8002296 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800226a:	7bfb      	ldrb	r3, [r7, #15]
 800226c:	2b21      	cmp	r3, #33	; 0x21
 800226e:	d112      	bne.n	8002296 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	781a      	ldrb	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	1c5a      	adds	r2, r3, #1
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228a:	b29b      	uxth	r3, r3
 800228c:	3b01      	subs	r3, #1
 800228e:	b29a      	uxth	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002294:	e025      	b.n	80022e2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229a:	b29b      	uxth	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	d120      	bne.n	80022e2 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	2b21      	cmp	r3, #33	; 0x21
 80022a4:	d11d      	bne.n	80022e2 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80022b4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022c4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2220      	movs	r2, #32
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff fe36 	bl	8001f4e <HAL_I2C_MemTxCpltCallback>
}
 80022e2:	bf00      	nop
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b084      	sub	sp, #16
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b22      	cmp	r3, #34	; 0x22
 80022fc:	f040 80ac 	bne.w	8002458 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002304:	b29b      	uxth	r3, r3
 8002306:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2b03      	cmp	r3, #3
 800230c:	d921      	bls.n	8002352 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	691a      	ldr	r2, [r3, #16]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	1c5a      	adds	r2, r3, #1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232a:	b29b      	uxth	r3, r3
 800232c:	3b01      	subs	r3, #1
 800232e:	b29a      	uxth	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002338:	b29b      	uxth	r3, r3
 800233a:	2b03      	cmp	r3, #3
 800233c:	f040 808c 	bne.w	8002458 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800234e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002350:	e082      	b.n	8002458 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002356:	2b02      	cmp	r3, #2
 8002358:	d075      	beq.n	8002446 <I2C_MasterReceive_RXNE+0x15c>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d002      	beq.n	8002366 <I2C_MasterReceive_RXNE+0x7c>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d16f      	bne.n	8002446 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f001 f828 	bl	80033bc <I2C_WaitOnSTOPRequestThroughIT>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d142      	bne.n	80023f8 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002380:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002390:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	691a      	ldr	r2, [r3, #16]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	3b01      	subs	r3, #1
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2220      	movs	r2, #32
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b40      	cmp	r3, #64	; 0x40
 80023ca:	d10a      	bne.n	80023e2 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff fdc1 	bl	8001f62 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80023e0:	e03a      	b.n	8002458 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2212      	movs	r2, #18
 80023ee:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff fd76 	bl	8001ee2 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80023f6:	e02f      	b.n	8002458 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002406:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691a      	ldr	r2, [r3, #16]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002424:	b29b      	uxth	r3, r3
 8002426:	3b01      	subs	r3, #1
 8002428:	b29a      	uxth	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2220      	movs	r2, #32
 8002432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff fd99 	bl	8001f76 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002444:	e008      	b.n	8002458 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002454:	605a      	str	r2, [r3, #4]
}
 8002456:	e7ff      	b.n	8002458 <I2C_MasterReceive_RXNE+0x16e>
 8002458:	bf00      	nop
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002472:	b29b      	uxth	r3, r3
 8002474:	2b04      	cmp	r3, #4
 8002476:	d11b      	bne.n	80024b0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002486:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691a      	ldr	r2, [r3, #16]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	3b01      	subs	r3, #1
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80024ae:	e0bd      	b.n	800262c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	d129      	bne.n	800250e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024c8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d00a      	beq.n	80024e6 <I2C_MasterReceive_BTF+0x86>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d007      	beq.n	80024e6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024e4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	691a      	ldr	r2, [r3, #16]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002502:	b29b      	uxth	r3, r3
 8002504:	3b01      	subs	r3, #1
 8002506:	b29a      	uxth	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800250c:	e08e      	b.n	800262c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002512:	b29b      	uxth	r3, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d176      	bne.n	8002606 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d002      	beq.n	8002524 <I2C_MasterReceive_BTF+0xc4>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2b10      	cmp	r3, #16
 8002522:	d108      	bne.n	8002536 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	e019      	b.n	800256a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2b04      	cmp	r3, #4
 800253a:	d002      	beq.n	8002542 <I2C_MasterReceive_BTF+0xe2>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d108      	bne.n	8002554 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	e00a      	b.n	800256a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2b10      	cmp	r3, #16
 8002558:	d007      	beq.n	800256a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002568:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002586:	b29b      	uxth	r3, r3
 8002588:	3b01      	subs	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	691a      	ldr	r2, [r3, #16]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	1c5a      	adds	r2, r3, #1
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	3b01      	subs	r3, #1
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80025c4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2220      	movs	r2, #32
 80025ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b40      	cmp	r3, #64	; 0x40
 80025d8:	d10a      	bne.n	80025f0 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff fcba 	bl	8001f62 <HAL_I2C_MemRxCpltCallback>
}
 80025ee:	e01d      	b.n	800262c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2212      	movs	r2, #18
 80025fc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7ff fc6f 	bl	8001ee2 <HAL_I2C_MasterRxCpltCallback>
}
 8002604:	e012      	b.n	800262c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	1c5a      	adds	r2, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002622:	b29b      	uxth	r3, r3
 8002624:	3b01      	subs	r3, #1
 8002626:	b29a      	uxth	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800262c:	bf00      	nop
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b40      	cmp	r3, #64	; 0x40
 8002646:	d117      	bne.n	8002678 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800264c:	2b00      	cmp	r3, #0
 800264e:	d109      	bne.n	8002664 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002654:	b2db      	uxtb	r3, r3
 8002656:	461a      	mov	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002660:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002662:	e067      	b.n	8002734 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002668:	b2db      	uxtb	r3, r3
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	b2da      	uxtb	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	611a      	str	r2, [r3, #16]
}
 8002676:	e05d      	b.n	8002734 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002680:	d133      	bne.n	80026ea <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b21      	cmp	r3, #33	; 0x21
 800268c:	d109      	bne.n	80026a2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002692:	b2db      	uxtb	r3, r3
 8002694:	461a      	mov	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800269e:	611a      	str	r2, [r3, #16]
 80026a0:	e008      	b.n	80026b4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d004      	beq.n	80026c6 <I2C_Master_SB+0x92>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d108      	bne.n	80026d8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d032      	beq.n	8002734 <I2C_Master_SB+0x100>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d02d      	beq.n	8002734 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026e6:	605a      	str	r2, [r3, #4]
}
 80026e8:	e024      	b.n	8002734 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10e      	bne.n	8002710 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	11db      	asrs	r3, r3, #7
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	f003 0306 	and.w	r3, r3, #6
 8002700:	b2db      	uxtb	r3, r3
 8002702:	f063 030f 	orn	r3, r3, #15
 8002706:	b2da      	uxtb	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	611a      	str	r2, [r3, #16]
}
 800270e:	e011      	b.n	8002734 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002714:	2b01      	cmp	r3, #1
 8002716:	d10d      	bne.n	8002734 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271c:	b29b      	uxth	r3, r3
 800271e:	11db      	asrs	r3, r3, #7
 8002720:	b2db      	uxtb	r3, r3
 8002722:	f003 0306 	and.w	r3, r3, #6
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f063 030e 	orn	r3, r3, #14
 800272c:	b2da      	uxtb	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	611a      	str	r2, [r3, #16]
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274c:	b2da      	uxtb	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002758:	2b00      	cmp	r3, #0
 800275a:	d004      	beq.n	8002766 <I2C_Master_ADD10+0x26>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002762:	2b00      	cmp	r3, #0
 8002764:	d108      	bne.n	8002778 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00c      	beq.n	8002788 <I2C_Master_ADD10+0x48>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002774:	2b00      	cmp	r3, #0
 8002776:	d007      	beq.n	8002788 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002786:	605a      	str	r2, [r3, #4]
  }
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002794:	b480      	push	{r7}
 8002796:	b091      	sub	sp, #68	; 0x44
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027aa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b22      	cmp	r3, #34	; 0x22
 80027bc:	f040 8169 	bne.w	8002a92 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10f      	bne.n	80027e8 <I2C_Master_ADDR+0x54>
 80027c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80027cc:	2b40      	cmp	r3, #64	; 0x40
 80027ce:	d10b      	bne.n	80027e8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027d0:	2300      	movs	r3, #0
 80027d2:	633b      	str	r3, [r7, #48]	; 0x30
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	633b      	str	r3, [r7, #48]	; 0x30
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	633b      	str	r3, [r7, #48]	; 0x30
 80027e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e6:	e160      	b.n	8002aaa <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d11d      	bne.n	800282c <I2C_Master_ADDR+0x98>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80027f8:	d118      	bne.n	800282c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027fa:	2300      	movs	r3, #0
 80027fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800280e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800281e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	651a      	str	r2, [r3, #80]	; 0x50
 800282a:	e13e      	b.n	8002aaa <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002830:	b29b      	uxth	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d113      	bne.n	800285e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002836:	2300      	movs	r3, #0
 8002838:	62bb      	str	r3, [r7, #40]	; 0x28
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	62bb      	str	r3, [r7, #40]	; 0x28
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	62bb      	str	r3, [r7, #40]	; 0x28
 800284a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	e115      	b.n	8002a8a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002862:	b29b      	uxth	r3, r3
 8002864:	2b01      	cmp	r3, #1
 8002866:	f040 808a 	bne.w	800297e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800286a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002870:	d137      	bne.n	80028e2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002880:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800288c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002890:	d113      	bne.n	80028ba <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028a0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a2:	2300      	movs	r3, #0
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	e0e7      	b.n	8002a8a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ba:	2300      	movs	r3, #0
 80028bc:	623b      	str	r3, [r7, #32]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	623b      	str	r3, [r7, #32]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	623b      	str	r3, [r7, #32]
 80028ce:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	e0d3      	b.n	8002a8a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80028e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	d02e      	beq.n	8002946 <I2C_Master_ADDR+0x1b2>
 80028e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ea:	2b20      	cmp	r3, #32
 80028ec:	d02b      	beq.n	8002946 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80028ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f0:	2b12      	cmp	r3, #18
 80028f2:	d102      	bne.n	80028fa <I2C_Master_ADDR+0x166>
 80028f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d125      	bne.n	8002946 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80028fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d00e      	beq.n	800291e <I2C_Master_ADDR+0x18a>
 8002900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002902:	2b02      	cmp	r3, #2
 8002904:	d00b      	beq.n	800291e <I2C_Master_ADDR+0x18a>
 8002906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002908:	2b10      	cmp	r3, #16
 800290a:	d008      	beq.n	800291e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	e007      	b.n	800292e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800292c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800292e:	2300      	movs	r3, #0
 8002930:	61fb      	str	r3, [r7, #28]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	61fb      	str	r3, [r7, #28]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	61fb      	str	r3, [r7, #28]
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	e0a1      	b.n	8002a8a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002954:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002956:	2300      	movs	r3, #0
 8002958:	61bb      	str	r3, [r7, #24]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	61bb      	str	r3, [r7, #24]
 800296a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	e085      	b.n	8002a8a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002982:	b29b      	uxth	r3, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d14d      	bne.n	8002a24 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800298a:	2b04      	cmp	r3, #4
 800298c:	d016      	beq.n	80029bc <I2C_Master_ADDR+0x228>
 800298e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002990:	2b02      	cmp	r3, #2
 8002992:	d013      	beq.n	80029bc <I2C_Master_ADDR+0x228>
 8002994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002996:	2b10      	cmp	r3, #16
 8002998:	d010      	beq.n	80029bc <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029a8:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	e007      	b.n	80029cc <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029ca:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029da:	d117      	bne.n	8002a0c <I2C_Master_ADDR+0x278>
 80029dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029e2:	d00b      	beq.n	80029fc <I2C_Master_ADDR+0x268>
 80029e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d008      	beq.n	80029fc <I2C_Master_ADDR+0x268>
 80029ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d005      	beq.n	80029fc <I2C_Master_ADDR+0x268>
 80029f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f2:	2b10      	cmp	r3, #16
 80029f4:	d002      	beq.n	80029fc <I2C_Master_ADDR+0x268>
 80029f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f8:	2b20      	cmp	r3, #32
 80029fa:	d107      	bne.n	8002a0c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a0a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	e032      	b.n	8002a8a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a32:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a42:	d117      	bne.n	8002a74 <I2C_Master_ADDR+0x2e0>
 8002a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a46:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a4a:	d00b      	beq.n	8002a64 <I2C_Master_ADDR+0x2d0>
 8002a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d008      	beq.n	8002a64 <I2C_Master_ADDR+0x2d0>
 8002a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d005      	beq.n	8002a64 <I2C_Master_ADDR+0x2d0>
 8002a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5a:	2b10      	cmp	r3, #16
 8002a5c:	d002      	beq.n	8002a64 <I2C_Master_ADDR+0x2d0>
 8002a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a60:	2b20      	cmp	r3, #32
 8002a62:	d107      	bne.n	8002a74 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a72:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a74:	2300      	movs	r3, #0
 8002a76:	613b      	str	r3, [r7, #16]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	613b      	str	r3, [r7, #16]
 8002a88:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002a90:	e00b      	b.n	8002aaa <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
}
 8002aa8:	e7ff      	b.n	8002aaa <I2C_Master_ADDR+0x316>
 8002aaa:	bf00      	nop
 8002aac:	3744      	adds	r7, #68	; 0x44
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b084      	sub	sp, #16
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d02b      	beq.n	8002b28 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	781a      	ldrb	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	1c5a      	adds	r2, r3, #1
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d114      	bne.n	8002b28 <I2C_SlaveTransmit_TXE+0x72>
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
 8002b00:	2b29      	cmp	r3, #41	; 0x29
 8002b02:	d111      	bne.n	8002b28 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b12:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2221      	movs	r2, #33	; 0x21
 8002b18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2228      	movs	r2, #40	; 0x28
 8002b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff f9e7 	bl	8001ef6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002b28:	bf00      	nop
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d011      	beq.n	8002b66 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	781a      	ldrb	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b084      	sub	sp, #16
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b80:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d02c      	beq.n	8002be6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	691a      	ldr	r2, [r3, #16]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	1c5a      	adds	r2, r3, #1
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d114      	bne.n	8002be6 <I2C_SlaveReceive_RXNE+0x74>
 8002bbc:	7bfb      	ldrb	r3, [r7, #15]
 8002bbe:	2b2a      	cmp	r3, #42	; 0x2a
 8002bc0:	d111      	bne.n	8002be6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bd0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2222      	movs	r2, #34	; 0x22
 8002bd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2228      	movs	r2, #40	; 0x28
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff f992 	bl	8001f0a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002be6:	bf00      	nop
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d012      	beq.n	8002c26 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	691a      	ldr	r2, [r3, #16]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	1c5a      	adds	r2, r3, #1
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b084      	sub	sp, #16
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c4c:	2b28      	cmp	r3, #40	; 0x28
 8002c4e:	d127      	bne.n	8002ca0 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c5e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	089b      	lsrs	r3, r3, #2
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	09db      	lsrs	r3, r3, #7
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d103      	bne.n	8002c84 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	81bb      	strh	r3, [r7, #12]
 8002c82:	e002      	b.n	8002c8a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002c92:	89ba      	ldrh	r2, [r7, #12]
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
 8002c96:	4619      	mov	r1, r3
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7ff f940 	bl	8001f1e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002c9e:	e00e      	b.n	8002cbe <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	60bb      	str	r3, [r7, #8]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	60bb      	str	r3, [r7, #8]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002cbe:	bf00      	nop
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
	...

08002cc8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ce6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60bb      	str	r3, [r7, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	60bb      	str	r3, [r7, #8]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 0201 	orr.w	r2, r2, #1
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d14:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d24:	d172      	bne.n	8002e0c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
 8002d28:	2b22      	cmp	r3, #34	; 0x22
 8002d2a:	d002      	beq.n	8002d32 <I2C_Slave_STOPF+0x6a>
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
 8002d2e:	2b2a      	cmp	r3, #42	; 0x2a
 8002d30:	d135      	bne.n	8002d9e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d005      	beq.n	8002d56 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	f043 0204 	orr.w	r2, r3, #4
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d64:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fe fc86 	bl	800167c <HAL_DMA_GetState>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d049      	beq.n	8002e0a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7a:	4a69      	ldr	r2, [pc, #420]	; (8002f20 <I2C_Slave_STOPF+0x258>)
 8002d7c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fe facd 	bl	8001322 <HAL_DMA_Abort_IT>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d03d      	beq.n	8002e0a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d98:	4610      	mov	r0, r2
 8002d9a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d9c:	e035      	b.n	8002e0a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d005      	beq.n	8002dc2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	f043 0204 	orr.w	r2, r3, #4
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dd0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fe fc50 	bl	800167c <HAL_DMA_GetState>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d014      	beq.n	8002e0c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de6:	4a4e      	ldr	r2, [pc, #312]	; (8002f20 <I2C_Slave_STOPF+0x258>)
 8002de8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fe fa97 	bl	8001322 <HAL_DMA_Abort_IT>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d008      	beq.n	8002e0c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e04:	4610      	mov	r0, r2
 8002e06:	4798      	blx	r3
 8002e08:	e000      	b.n	8002e0c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e0a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d03e      	beq.n	8002e94 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d112      	bne.n	8002e4a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	691a      	ldr	r2, [r3, #16]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e54:	2b40      	cmp	r3, #64	; 0x40
 8002e56:	d112      	bne.n	8002e7e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691a      	ldr	r2, [r3, #16]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	3b01      	subs	r3, #1
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d005      	beq.n	8002e94 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	f043 0204 	orr.w	r2, r3, #4
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f8b3 	bl	8003008 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002ea2:	e039      	b.n	8002f18 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
 8002ea6:	2b2a      	cmp	r3, #42	; 0x2a
 8002ea8:	d109      	bne.n	8002ebe <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2228      	movs	r2, #40	; 0x28
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f7ff f826 	bl	8001f0a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b28      	cmp	r3, #40	; 0x28
 8002ec8:	d111      	bne.n	8002eee <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a15      	ldr	r2, [pc, #84]	; (8002f24 <I2C_Slave_STOPF+0x25c>)
 8002ece:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7ff f827 	bl	8001f3a <HAL_I2C_ListenCpltCallback>
}
 8002eec:	e014      	b.n	8002f18 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	2b22      	cmp	r3, #34	; 0x22
 8002ef4:	d002      	beq.n	8002efc <I2C_Slave_STOPF+0x234>
 8002ef6:	7bfb      	ldrb	r3, [r7, #15]
 8002ef8:	2b22      	cmp	r3, #34	; 0x22
 8002efa:	d10d      	bne.n	8002f18 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2220      	movs	r2, #32
 8002f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7fe fff9 	bl	8001f0a <HAL_I2C_SlaveRxCpltCallback>
}
 8002f18:	bf00      	nop
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	0800326d 	.word	0x0800326d
 8002f24:	ffff0000 	.word	0xffff0000

08002f28 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f36:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d002      	beq.n	8002f4a <I2C_Slave_AF+0x22>
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2b20      	cmp	r3, #32
 8002f48:	d129      	bne.n	8002f9e <I2C_Slave_AF+0x76>
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
 8002f4c:	2b28      	cmp	r3, #40	; 0x28
 8002f4e:	d126      	bne.n	8002f9e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a2c      	ldr	r2, [pc, #176]	; (8003004 <I2C_Slave_AF+0xdc>)
 8002f54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f64:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f6e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f7e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7fe ffcf 	bl	8001f3a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002f9c:	e02e      	b.n	8002ffc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
 8002fa0:	2b21      	cmp	r3, #33	; 0x21
 8002fa2:	d126      	bne.n	8002ff2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a17      	ldr	r2, [pc, #92]	; (8003004 <I2C_Slave_AF+0xdc>)
 8002fa8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2221      	movs	r2, #33	; 0x21
 8002fae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002fce:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fd8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fe8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7fe ff83 	bl	8001ef6 <HAL_I2C_SlaveTxCpltCallback>
}
 8002ff0:	e004      	b.n	8002ffc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ffa:	615a      	str	r2, [r3, #20]
}
 8002ffc:	bf00      	nop
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	ffff0000 	.word	0xffff0000

08003008 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003016:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800301e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003020:	7bbb      	ldrb	r3, [r7, #14]
 8003022:	2b10      	cmp	r3, #16
 8003024:	d002      	beq.n	800302c <I2C_ITError+0x24>
 8003026:	7bbb      	ldrb	r3, [r7, #14]
 8003028:	2b40      	cmp	r3, #64	; 0x40
 800302a:	d10a      	bne.n	8003042 <I2C_ITError+0x3a>
 800302c:	7bfb      	ldrb	r3, [r7, #15]
 800302e:	2b22      	cmp	r3, #34	; 0x22
 8003030:	d107      	bne.n	8003042 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003040:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003048:	2b28      	cmp	r3, #40	; 0x28
 800304a:	d107      	bne.n	800305c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2228      	movs	r2, #40	; 0x28
 8003056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800305a:	e015      	b.n	8003088 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003066:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800306a:	d00a      	beq.n	8003082 <I2C_ITError+0x7a>
 800306c:	7bfb      	ldrb	r3, [r7, #15]
 800306e:	2b60      	cmp	r3, #96	; 0x60
 8003070:	d007      	beq.n	8003082 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2220      	movs	r2, #32
 8003076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003092:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003096:	d162      	bne.n	800315e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030a6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d020      	beq.n	80030f8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ba:	4a6a      	ldr	r2, [pc, #424]	; (8003264 <I2C_ITError+0x25c>)
 80030bc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fe f92d 	bl	8001322 <HAL_DMA_Abort_IT>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 8089 	beq.w	80031e2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0201 	bic.w	r2, r2, #1
 80030de:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030f2:	4610      	mov	r0, r2
 80030f4:	4798      	blx	r3
 80030f6:	e074      	b.n	80031e2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fc:	4a59      	ldr	r2, [pc, #356]	; (8003264 <I2C_ITError+0x25c>)
 80030fe:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003104:	4618      	mov	r0, r3
 8003106:	f7fe f90c 	bl	8001322 <HAL_DMA_Abort_IT>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d068      	beq.n	80031e2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311a:	2b40      	cmp	r3, #64	; 0x40
 800311c:	d10b      	bne.n	8003136 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	1c5a      	adds	r2, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0201 	bic.w	r2, r2, #1
 8003144:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003158:	4610      	mov	r0, r2
 800315a:	4798      	blx	r3
 800315c:	e041      	b.n	80031e2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b60      	cmp	r3, #96	; 0x60
 8003168:	d125      	bne.n	80031b6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2220      	movs	r2, #32
 800316e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003182:	2b40      	cmp	r3, #64	; 0x40
 8003184:	d10b      	bne.n	800319e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	691a      	ldr	r2, [r3, #16]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0201 	bic.w	r2, r2, #1
 80031ac:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7fe feeb 	bl	8001f8a <HAL_I2C_AbortCpltCallback>
 80031b4:	e015      	b.n	80031e2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c0:	2b40      	cmp	r3, #64	; 0x40
 80031c2:	d10b      	bne.n	80031dc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	691a      	ldr	r2, [r3, #16]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	1c5a      	adds	r2, r3, #1
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7fe feca 	bl	8001f76 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10e      	bne.n	8003210 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d109      	bne.n	8003210 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003202:	2b00      	cmp	r3, #0
 8003204:	d104      	bne.n	8003210 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800320c:	2b00      	cmp	r3, #0
 800320e:	d007      	beq.n	8003220 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800321e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003226:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b04      	cmp	r3, #4
 8003232:	d113      	bne.n	800325c <I2C_ITError+0x254>
 8003234:	7bfb      	ldrb	r3, [r7, #15]
 8003236:	2b28      	cmp	r3, #40	; 0x28
 8003238:	d110      	bne.n	800325c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a0a      	ldr	r2, [pc, #40]	; (8003268 <I2C_ITError+0x260>)
 800323e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2220      	movs	r2, #32
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fe fe6f 	bl	8001f3a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800325c:	bf00      	nop
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	0800326d 	.word	0x0800326d
 8003268:	ffff0000 	.word	0xffff0000

0800326c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003284:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003286:	4b4b      	ldr	r3, [pc, #300]	; (80033b4 <I2C_DMAAbort+0x148>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	08db      	lsrs	r3, r3, #3
 800328c:	4a4a      	ldr	r2, [pc, #296]	; (80033b8 <I2C_DMAAbort+0x14c>)
 800328e:	fba2 2303 	umull	r2, r3, r2, r3
 8003292:	0a1a      	lsrs	r2, r3, #8
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	00da      	lsls	r2, r3, #3
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d106      	bne.n	80032b4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	f043 0220 	orr.w	r2, r3, #32
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80032b2:	e00a      	b.n	80032ca <I2C_DMAAbort+0x5e>
    }
    count--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032c8:	d0ea      	beq.n	80032a0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d6:	2200      	movs	r2, #0
 80032d8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e6:	2200      	movs	r2, #0
 80032e8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032f8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2200      	movs	r2, #0
 80032fe:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800330c:	2200      	movs	r2, #0
 800330e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	2200      	movs	r2, #0
 800331e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0201 	bic.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b60      	cmp	r3, #96	; 0x60
 800333a:	d10e      	bne.n	800335a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	2200      	movs	r2, #0
 8003350:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003352:	6978      	ldr	r0, [r7, #20]
 8003354:	f7fe fe19 	bl	8001f8a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003358:	e027      	b.n	80033aa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800335a:	7cfb      	ldrb	r3, [r7, #19]
 800335c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003360:	2b28      	cmp	r3, #40	; 0x28
 8003362:	d117      	bne.n	8003394 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0201 	orr.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003382:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	2200      	movs	r2, #0
 8003388:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2228      	movs	r2, #40	; 0x28
 800338e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003392:	e007      	b.n	80033a4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	2220      	movs	r2, #32
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80033a4:	6978      	ldr	r0, [r7, #20]
 80033a6:	f7fe fde6 	bl	8001f76 <HAL_I2C_ErrorCallback>
}
 80033aa:	bf00      	nop
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	20000000 	.word	0x20000000
 80033b8:	14f8b589 	.word	0x14f8b589

080033bc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80033c8:	4b13      	ldr	r3, [pc, #76]	; (8003418 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	08db      	lsrs	r3, r3, #3
 80033ce:	4a13      	ldr	r2, [pc, #76]	; (800341c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80033d0:	fba2 2303 	umull	r2, r3, r2, r3
 80033d4:	0a1a      	lsrs	r2, r3, #8
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	3b01      	subs	r3, #1
 80033e2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d107      	bne.n	80033fa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	f043 0220 	orr.w	r2, r3, #32
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e008      	b.n	800340c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003408:	d0e9      	beq.n	80033de <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	20000000 	.word	0x20000000
 800341c:	14f8b589 	.word	0x14f8b589

08003420 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003430:	d103      	bne.n	800343a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003438:	e007      	b.n	800344a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003442:	d102      	bne.n	800344a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2208      	movs	r2, #8
 8003448:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003456:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003458:	b08f      	sub	sp, #60	; 0x3c
 800345a:	af0a      	add	r7, sp, #40	; 0x28
 800345c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e10f      	b.n	8003688 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d106      	bne.n	8003488 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f006 fbc4 	bl	8009c10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2203      	movs	r2, #3
 800348c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003498:	2b00      	cmp	r3, #0
 800349a:	d102      	bne.n	80034a2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f002 fe23 	bl	80060f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	603b      	str	r3, [r7, #0]
 80034b2:	687e      	ldr	r6, [r7, #4]
 80034b4:	466d      	mov	r5, sp
 80034b6:	f106 0410 	add.w	r4, r6, #16
 80034ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80034ca:	1d33      	adds	r3, r6, #4
 80034cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034ce:	6838      	ldr	r0, [r7, #0]
 80034d0:	f002 fcfa 	bl	8005ec8 <USB_CoreInit>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d005      	beq.n	80034e6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2202      	movs	r2, #2
 80034de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e0d0      	b.n	8003688 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2100      	movs	r1, #0
 80034ec:	4618      	mov	r0, r3
 80034ee:	f002 fe11 	bl	8006114 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034f2:	2300      	movs	r3, #0
 80034f4:	73fb      	strb	r3, [r7, #15]
 80034f6:	e04a      	b.n	800358e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034f8:	7bfa      	ldrb	r2, [r7, #15]
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	4613      	mov	r3, r2
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	4413      	add	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	440b      	add	r3, r1
 8003506:	333d      	adds	r3, #61	; 0x3d
 8003508:	2201      	movs	r2, #1
 800350a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800350c:	7bfa      	ldrb	r2, [r7, #15]
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	4613      	mov	r3, r2
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	4413      	add	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	333c      	adds	r3, #60	; 0x3c
 800351c:	7bfa      	ldrb	r2, [r7, #15]
 800351e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003520:	7bfa      	ldrb	r2, [r7, #15]
 8003522:	7bfb      	ldrb	r3, [r7, #15]
 8003524:	b298      	uxth	r0, r3
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	4413      	add	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	3344      	adds	r3, #68	; 0x44
 8003534:	4602      	mov	r2, r0
 8003536:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003538:	7bfa      	ldrb	r2, [r7, #15]
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	3340      	adds	r3, #64	; 0x40
 8003548:	2200      	movs	r2, #0
 800354a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800354c:	7bfa      	ldrb	r2, [r7, #15]
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	4413      	add	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	3348      	adds	r3, #72	; 0x48
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003560:	7bfa      	ldrb	r2, [r7, #15]
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	4413      	add	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	334c      	adds	r3, #76	; 0x4c
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003574:	7bfa      	ldrb	r2, [r7, #15]
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	4413      	add	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	3354      	adds	r3, #84	; 0x54
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003588:	7bfb      	ldrb	r3, [r7, #15]
 800358a:	3301      	adds	r3, #1
 800358c:	73fb      	strb	r3, [r7, #15]
 800358e:	7bfa      	ldrb	r2, [r7, #15]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	429a      	cmp	r2, r3
 8003596:	d3af      	bcc.n	80034f8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003598:	2300      	movs	r3, #0
 800359a:	73fb      	strb	r3, [r7, #15]
 800359c:	e044      	b.n	8003628 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800359e:	7bfa      	ldrb	r2, [r7, #15]
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	4413      	add	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80035b0:	2200      	movs	r2, #0
 80035b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035b4:	7bfa      	ldrb	r2, [r7, #15]
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	4613      	mov	r3, r2
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	4413      	add	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80035c6:	7bfa      	ldrb	r2, [r7, #15]
 80035c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035ca:	7bfa      	ldrb	r2, [r7, #15]
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	4613      	mov	r3, r2
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	4413      	add	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	440b      	add	r3, r1
 80035d8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80035dc:	2200      	movs	r2, #0
 80035de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035e0:	7bfa      	ldrb	r2, [r7, #15]
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	4413      	add	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035f6:	7bfa      	ldrb	r2, [r7, #15]
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	4413      	add	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	440b      	add	r3, r1
 8003604:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800360c:	7bfa      	ldrb	r2, [r7, #15]
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	4613      	mov	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003622:	7bfb      	ldrb	r3, [r7, #15]
 8003624:	3301      	adds	r3, #1
 8003626:	73fb      	strb	r3, [r7, #15]
 8003628:	7bfa      	ldrb	r2, [r7, #15]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	429a      	cmp	r2, r3
 8003630:	d3b5      	bcc.n	800359e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	603b      	str	r3, [r7, #0]
 8003638:	687e      	ldr	r6, [r7, #4]
 800363a:	466d      	mov	r5, sp
 800363c:	f106 0410 	add.w	r4, r6, #16
 8003640:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003642:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003644:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003646:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003648:	e894 0003 	ldmia.w	r4, {r0, r1}
 800364c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003650:	1d33      	adds	r3, r6, #4
 8003652:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003654:	6838      	ldr	r0, [r7, #0]
 8003656:	f002 fda9 	bl	80061ac <USB_DevInit>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e00d      	b.n	8003688 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4618      	mov	r0, r3
 8003682:	f003 fef8 	bl	8007476 <USB_DevDisconnect>

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3714      	adds	r7, #20
 800368c:	46bd      	mov	sp, r7
 800368e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003690 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_PCD_Start+0x1c>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e020      	b.n	80036ee <HAL_PCD_Start+0x5e>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d109      	bne.n	80036d0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d005      	beq.n	80036d0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f002 fcfb 	bl	80060d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f003 fea8 	bl	8007434 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80036f6:	b590      	push	{r4, r7, lr}
 80036f8:	b08d      	sub	sp, #52	; 0x34
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003704:	6a3b      	ldr	r3, [r7, #32]
 8003706:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f003 ff66 	bl	80075de <USB_GetMode>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	f040 848a 	bne.w	800402e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f003 feca 	bl	80074b8 <USB_ReadInterrupts>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 8480 	beq.w	800402c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	0a1b      	lsrs	r3, r3, #8
 8003736:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4618      	mov	r0, r3
 8003746:	f003 feb7 	bl	80074b8 <USB_ReadInterrupts>
 800374a:	4603      	mov	r3, r0
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b02      	cmp	r3, #2
 8003752:	d107      	bne.n	8003764 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695a      	ldr	r2, [r3, #20]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f002 0202 	and.w	r2, r2, #2
 8003762:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f003 fea5 	bl	80074b8 <USB_ReadInterrupts>
 800376e:	4603      	mov	r3, r0
 8003770:	f003 0310 	and.w	r3, r3, #16
 8003774:	2b10      	cmp	r3, #16
 8003776:	d161      	bne.n	800383c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699a      	ldr	r2, [r3, #24]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0210 	bic.w	r2, r2, #16
 8003786:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	f003 020f 	and.w	r2, r3, #15
 8003794:	4613      	mov	r3, r2
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	4413      	add	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	4413      	add	r3, r2
 80037a4:	3304      	adds	r3, #4
 80037a6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	0c5b      	lsrs	r3, r3, #17
 80037ac:	f003 030f 	and.w	r3, r3, #15
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d124      	bne.n	80037fe <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80037ba:	4013      	ands	r3, r2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d035      	beq.n	800382c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	091b      	lsrs	r3, r3, #4
 80037c8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	461a      	mov	r2, r3
 80037d2:	6a38      	ldr	r0, [r7, #32]
 80037d4:	f003 fcdc 	bl	8007190 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	091b      	lsrs	r3, r3, #4
 80037e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037e4:	441a      	add	r2, r3
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	6a1a      	ldr	r2, [r3, #32]
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	091b      	lsrs	r3, r3, #4
 80037f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037f6:	441a      	add	r2, r3
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	621a      	str	r2, [r3, #32]
 80037fc:	e016      	b.n	800382c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	0c5b      	lsrs	r3, r3, #17
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	2b06      	cmp	r3, #6
 8003808:	d110      	bne.n	800382c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003810:	2208      	movs	r2, #8
 8003812:	4619      	mov	r1, r3
 8003814:	6a38      	ldr	r0, [r7, #32]
 8003816:	f003 fcbb 	bl	8007190 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	6a1a      	ldr	r2, [r3, #32]
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	091b      	lsrs	r3, r3, #4
 8003822:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003826:	441a      	add	r2, r3
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	699a      	ldr	r2, [r3, #24]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0210 	orr.w	r2, r2, #16
 800383a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f003 fe39 	bl	80074b8 <USB_ReadInterrupts>
 8003846:	4603      	mov	r3, r0
 8003848:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800384c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003850:	f040 80a7 	bne.w	80039a2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f003 fe3e 	bl	80074de <USB_ReadDevAllOutEpInterrupt>
 8003862:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003864:	e099      	b.n	800399a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 808e 	beq.w	800398e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	4611      	mov	r1, r2
 800387c:	4618      	mov	r0, r3
 800387e:	f003 fe62 	bl	8007546 <USB_ReadDevOutEPInterrupt>
 8003882:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00c      	beq.n	80038a8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	015a      	lsls	r2, r3, #5
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	4413      	add	r3, r2
 8003896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800389a:	461a      	mov	r2, r3
 800389c:	2301      	movs	r3, #1
 800389e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80038a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 feaa 	bl	80045fc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00c      	beq.n	80038cc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	015a      	lsls	r2, r3, #5
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	4413      	add	r3, r2
 80038ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038be:	461a      	mov	r2, r3
 80038c0:	2308      	movs	r3, #8
 80038c2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80038c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 ff80 	bl	80047cc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f003 0310 	and.w	r3, r3, #16
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d008      	beq.n	80038e8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e2:	461a      	mov	r2, r3
 80038e4:	2310      	movs	r3, #16
 80038e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d030      	beq.n	8003954 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fa:	2b80      	cmp	r3, #128	; 0x80
 80038fc:	d109      	bne.n	8003912 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	69fa      	ldr	r2, [r7, #28]
 8003908:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800390c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003910:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003914:	4613      	mov	r3, r2
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	4413      	add	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	4413      	add	r3, r2
 8003924:	3304      	adds	r3, #4
 8003926:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	78db      	ldrb	r3, [r3, #3]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d108      	bne.n	8003942 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	2200      	movs	r2, #0
 8003934:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	b2db      	uxtb	r3, r3
 800393a:	4619      	mov	r1, r3
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f006 fa6d 	bl	8009e1c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	015a      	lsls	r2, r3, #5
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	4413      	add	r3, r2
 800394a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800394e:	461a      	mov	r2, r3
 8003950:	2302      	movs	r3, #2
 8003952:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f003 0320 	and.w	r3, r3, #32
 800395a:	2b00      	cmp	r3, #0
 800395c:	d008      	beq.n	8003970 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	015a      	lsls	r2, r3, #5
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	4413      	add	r3, r2
 8003966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800396a:	461a      	mov	r2, r3
 800396c:	2320      	movs	r3, #32
 800396e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d009      	beq.n	800398e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	015a      	lsls	r2, r3, #5
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	4413      	add	r3, r2
 8003982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003986:	461a      	mov	r2, r3
 8003988:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800398c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	3301      	adds	r3, #1
 8003992:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003996:	085b      	lsrs	r3, r3, #1
 8003998:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800399a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399c:	2b00      	cmp	r3, #0
 800399e:	f47f af62 	bne.w	8003866 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f003 fd86 	bl	80074b8 <USB_ReadInterrupts>
 80039ac:	4603      	mov	r3, r0
 80039ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039b6:	f040 80db 	bne.w	8003b70 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f003 fda7 	bl	8007512 <USB_ReadDevAllInEpInterrupt>
 80039c4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80039ca:	e0cd      	b.n	8003b68 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80039cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 80c2 	beq.w	8003b5c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	4611      	mov	r1, r2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f003 fdcd 	bl	8007582 <USB_ReadDevInEPInterrupt>
 80039e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d057      	beq.n	8003aa4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	2201      	movs	r2, #1
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	69f9      	ldr	r1, [r7, #28]
 8003a10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a14:	4013      	ands	r3, r2
 8003a16:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a24:	461a      	mov	r2, r3
 8003a26:	2301      	movs	r3, #1
 8003a28:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d132      	bne.n	8003a98 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a36:	4613      	mov	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	334c      	adds	r3, #76	; 0x4c
 8003a42:	6819      	ldr	r1, [r3, #0]
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a48:	4613      	mov	r3, r2
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	4413      	add	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4403      	add	r3, r0
 8003a52:	3348      	adds	r3, #72	; 0x48
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4419      	add	r1, r3
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	4413      	add	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4403      	add	r3, r0
 8003a66:	334c      	adds	r3, #76	; 0x4c
 8003a68:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d113      	bne.n	8003a98 <HAL_PCD_IRQHandler+0x3a2>
 8003a70:	6879      	ldr	r1, [r7, #4]
 8003a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a74:	4613      	mov	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	4413      	add	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	3354      	adds	r3, #84	; 0x54
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d108      	bne.n	8003a98 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6818      	ldr	r0, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a90:	461a      	mov	r2, r3
 8003a92:	2101      	movs	r1, #1
 8003a94:	f003 fdd4 	bl	8007640 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f006 f937 	bl	8009d12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d008      	beq.n	8003ac0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	015a      	lsls	r2, r3, #5
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aba:	461a      	mov	r2, r3
 8003abc:	2308      	movs	r3, #8
 8003abe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	f003 0310 	and.w	r3, r3, #16
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d008      	beq.n	8003adc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	015a      	lsls	r2, r3, #5
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	2310      	movs	r3, #16
 8003ada:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d008      	beq.n	8003af8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	015a      	lsls	r2, r3, #5
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af2:	461a      	mov	r2, r3
 8003af4:	2340      	movs	r3, #64	; 0x40
 8003af6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d023      	beq.n	8003b4a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003b02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b04:	6a38      	ldr	r0, [r7, #32]
 8003b06:	f002 fcb5 	bl	8006474 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	4413      	add	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	3338      	adds	r3, #56	; 0x38
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	4413      	add	r3, r2
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	78db      	ldrb	r3, [r3, #3]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d108      	bne.n	8003b38 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	4619      	mov	r1, r3
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f006 f984 	bl	8009e40 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b44:	461a      	mov	r2, r3
 8003b46:	2302      	movs	r3, #2
 8003b48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003b54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fcc3 	bl	80044e2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	3301      	adds	r3, #1
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b64:	085b      	lsrs	r3, r3, #1
 8003b66:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f47f af2e 	bne.w	80039cc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f003 fc9f 	bl	80074b8 <USB_ReadInterrupts>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b84:	d122      	bne.n	8003bcc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	69fa      	ldr	r2, [r7, #28]
 8003b90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b94:	f023 0301 	bic.w	r3, r3, #1
 8003b98:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d108      	bne.n	8003bb6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003bac:	2100      	movs	r1, #0
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f006 fbac 	bl	800a30c <HAL_PCDEx_LPM_Callback>
 8003bb4:	e002      	b.n	8003bbc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f006 f922 	bl	8009e00 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695a      	ldr	r2, [r3, #20]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003bca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f003 fc71 	bl	80074b8 <USB_ReadInterrupts>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003be0:	d112      	bne.n	8003c08 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d102      	bne.n	8003bf8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f006 f8de 	bl	8009db4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695a      	ldr	r2, [r3, #20]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003c06:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f003 fc53 	bl	80074b8 <USB_ReadInterrupts>
 8003c12:	4603      	mov	r3, r0
 8003c14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c1c:	f040 80b7 	bne.w	8003d8e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	69fa      	ldr	r2, [r7, #28]
 8003c2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c2e:	f023 0301 	bic.w	r3, r3, #1
 8003c32:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2110      	movs	r1, #16
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f002 fc1a 	bl	8006474 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c40:	2300      	movs	r3, #0
 8003c42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c44:	e046      	b.n	8003cd4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c48:	015a      	lsls	r2, r3, #5
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c52:	461a      	mov	r2, r3
 8003c54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c58:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c5c:	015a      	lsls	r2, r3, #5
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	4413      	add	r3, r2
 8003c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c6a:	0151      	lsls	r1, r2, #5
 8003c6c:	69fa      	ldr	r2, [r7, #28]
 8003c6e:	440a      	add	r2, r1
 8003c70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c78:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c86:	461a      	mov	r2, r3
 8003c88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c8c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c90:	015a      	lsls	r2, r3, #5
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	4413      	add	r3, r2
 8003c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c9e:	0151      	lsls	r1, r2, #5
 8003ca0:	69fa      	ldr	r2, [r7, #28]
 8003ca2:	440a      	add	r2, r1
 8003ca4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ca8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb0:	015a      	lsls	r2, r3, #5
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cbe:	0151      	lsls	r1, r2, #5
 8003cc0:	69fa      	ldr	r2, [r7, #28]
 8003cc2:	440a      	add	r2, r1
 8003cc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cc8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ccc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d3b3      	bcc.n	8003c46 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	69fa      	ldr	r2, [r7, #28]
 8003ce8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cec:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003cf0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d016      	beq.n	8003d28 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d04:	69fa      	ldr	r2, [r7, #28]
 8003d06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d0a:	f043 030b 	orr.w	r3, r3, #11
 8003d0e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1a:	69fa      	ldr	r2, [r7, #28]
 8003d1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d20:	f043 030b 	orr.w	r3, r3, #11
 8003d24:	6453      	str	r3, [r2, #68]	; 0x44
 8003d26:	e015      	b.n	8003d54 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	69fa      	ldr	r2, [r7, #28]
 8003d32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d3a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003d3e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	69fa      	ldr	r2, [r7, #28]
 8003d4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d4e:	f043 030b 	orr.w	r3, r3, #11
 8003d52:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	69fa      	ldr	r2, [r7, #28]
 8003d5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d62:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d66:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6818      	ldr	r0, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d78:	461a      	mov	r2, r3
 8003d7a:	f003 fc61 	bl	8007640 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695a      	ldr	r2, [r3, #20]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003d8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f003 fb90 	bl	80074b8 <USB_ReadInterrupts>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003da2:	d124      	bne.n	8003dee <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f003 fc26 	bl	80075fa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f002 fbdb 	bl	800656e <USB_GetDevSpeed>
 8003db8:	4603      	mov	r3, r0
 8003dba:	461a      	mov	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681c      	ldr	r4, [r3, #0]
 8003dc4:	f001 fa04 	bl	80051d0 <HAL_RCC_GetHCLKFreq>
 8003dc8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	4620      	mov	r0, r4
 8003dd4:	f002 f8da 	bl	8005f8c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f005 ffc2 	bl	8009d62 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695a      	ldr	r2, [r3, #20]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003dec:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f003 fb60 	bl	80074b8 <USB_ReadInterrupts>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b08      	cmp	r3, #8
 8003e00:	d10a      	bne.n	8003e18 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f005 ff9f 	bl	8009d46 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	695a      	ldr	r2, [r3, #20]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f002 0208 	and.w	r2, r2, #8
 8003e16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f003 fb4b 	bl	80074b8 <USB_ReadInterrupts>
 8003e22:	4603      	mov	r3, r0
 8003e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e28:	2b80      	cmp	r3, #128	; 0x80
 8003e2a:	d122      	bne.n	8003e72 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e38:	2301      	movs	r3, #1
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3c:	e014      	b.n	8003e68 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e42:	4613      	mov	r3, r2
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	4413      	add	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	440b      	add	r3, r1
 8003e4c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d105      	bne.n	8003e62 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 fb0f 	bl	8004480 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	3301      	adds	r3, #1
 8003e66:	627b      	str	r3, [r7, #36]	; 0x24
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d3e5      	bcc.n	8003e3e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f003 fb1e 	bl	80074b8 <USB_ReadInterrupts>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e86:	d13b      	bne.n	8003f00 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e88:	2301      	movs	r3, #1
 8003e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e8c:	e02b      	b.n	8003ee6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	015a      	lsls	r2, r3, #5
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	4413      	add	r3, r2
 8003e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	4413      	add	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	440b      	add	r3, r1
 8003eac:	3340      	adds	r3, #64	; 0x40
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d115      	bne.n	8003ee0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003eb4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	da12      	bge.n	8003ee0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	333f      	adds	r3, #63	; 0x3f
 8003eca:	2201      	movs	r2, #1
 8003ecc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	4619      	mov	r1, r3
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 fad0 	bl	8004480 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d3ce      	bcc.n	8003e8e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695a      	ldr	r2, [r3, #20]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003efe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f003 fad7 	bl	80074b8 <USB_ReadInterrupts>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f14:	d155      	bne.n	8003fc2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f16:	2301      	movs	r3, #1
 8003f18:	627b      	str	r3, [r7, #36]	; 0x24
 8003f1a:	e045      	b.n	8003fa8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f30:	4613      	mov	r3, r2
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	4413      	add	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d12e      	bne.n	8003fa2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f44:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	da2b      	bge.n	8003fa2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003f56:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d121      	bne.n	8003fa2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f62:	4613      	mov	r3, r2
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	4413      	add	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	440b      	add	r3, r1
 8003f6c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003f70:	2201      	movs	r2, #1
 8003f72:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10a      	bne.n	8003fa2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	69fa      	ldr	r2, [r7, #28]
 8003f96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f9e:	6053      	str	r3, [r2, #4]
            break;
 8003fa0:	e007      	b.n	8003fb2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d3b4      	bcc.n	8003f1c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	695a      	ldr	r2, [r3, #20]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003fc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f003 fa76 	bl	80074b8 <USB_ReadInterrupts>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd6:	d10a      	bne.n	8003fee <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f005 ff43 	bl	8009e64 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	695a      	ldr	r2, [r3, #20]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003fec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f003 fa60 	bl	80074b8 <USB_ReadInterrupts>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	f003 0304 	and.w	r3, r3, #4
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	d115      	bne.n	800402e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b00      	cmp	r3, #0
 8004012:	d002      	beq.n	800401a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f005 ff33 	bl	8009e80 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6859      	ldr	r1, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	430a      	orrs	r2, r1
 8004028:	605a      	str	r2, [r3, #4]
 800402a:	e000      	b.n	800402e <HAL_PCD_IRQHandler+0x938>
      return;
 800402c:	bf00      	nop
    }
  }
}
 800402e:	3734      	adds	r7, #52	; 0x34
 8004030:	46bd      	mov	sp, r7
 8004032:	bd90      	pop	{r4, r7, pc}

08004034 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	460b      	mov	r3, r1
 800403e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004046:	2b01      	cmp	r3, #1
 8004048:	d101      	bne.n	800404e <HAL_PCD_SetAddress+0x1a>
 800404a:	2302      	movs	r3, #2
 800404c:	e013      	b.n	8004076 <HAL_PCD_SetAddress+0x42>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	78fa      	ldrb	r2, [r7, #3]
 800405a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	78fa      	ldrb	r2, [r7, #3]
 8004064:	4611      	mov	r1, r2
 8004066:	4618      	mov	r0, r3
 8004068:	f003 f9be 	bl	80073e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b084      	sub	sp, #16
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
 8004086:	4608      	mov	r0, r1
 8004088:	4611      	mov	r1, r2
 800408a:	461a      	mov	r2, r3
 800408c:	4603      	mov	r3, r0
 800408e:	70fb      	strb	r3, [r7, #3]
 8004090:	460b      	mov	r3, r1
 8004092:	803b      	strh	r3, [r7, #0]
 8004094:	4613      	mov	r3, r2
 8004096:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004098:	2300      	movs	r3, #0
 800409a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800409c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	da0f      	bge.n	80040c4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040a4:	78fb      	ldrb	r3, [r7, #3]
 80040a6:	f003 020f 	and.w	r2, r3, #15
 80040aa:	4613      	mov	r3, r2
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	4413      	add	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	3338      	adds	r3, #56	; 0x38
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	4413      	add	r3, r2
 80040b8:	3304      	adds	r3, #4
 80040ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2201      	movs	r2, #1
 80040c0:	705a      	strb	r2, [r3, #1]
 80040c2:	e00f      	b.n	80040e4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040c4:	78fb      	ldrb	r3, [r7, #3]
 80040c6:	f003 020f 	and.w	r2, r3, #15
 80040ca:	4613      	mov	r3, r2
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	4413      	add	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	4413      	add	r3, r2
 80040da:	3304      	adds	r3, #4
 80040dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80040e4:	78fb      	ldrb	r3, [r7, #3]
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80040f0:	883a      	ldrh	r2, [r7, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	78ba      	ldrb	r2, [r7, #2]
 80040fa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	785b      	ldrb	r3, [r3, #1]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d004      	beq.n	800410e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	b29a      	uxth	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800410e:	78bb      	ldrb	r3, [r7, #2]
 8004110:	2b02      	cmp	r3, #2
 8004112:	d102      	bne.n	800411a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004120:	2b01      	cmp	r3, #1
 8004122:	d101      	bne.n	8004128 <HAL_PCD_EP_Open+0xaa>
 8004124:	2302      	movs	r3, #2
 8004126:	e00e      	b.n	8004146 <HAL_PCD_EP_Open+0xc8>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68f9      	ldr	r1, [r7, #12]
 8004136:	4618      	mov	r0, r3
 8004138:	f002 fa3e 	bl	80065b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004144:	7afb      	ldrb	r3, [r7, #11]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b084      	sub	sp, #16
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
 8004156:	460b      	mov	r3, r1
 8004158:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800415a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800415e:	2b00      	cmp	r3, #0
 8004160:	da0f      	bge.n	8004182 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004162:	78fb      	ldrb	r3, [r7, #3]
 8004164:	f003 020f 	and.w	r2, r3, #15
 8004168:	4613      	mov	r3, r2
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	4413      	add	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	3338      	adds	r3, #56	; 0x38
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	4413      	add	r3, r2
 8004176:	3304      	adds	r3, #4
 8004178:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2201      	movs	r2, #1
 800417e:	705a      	strb	r2, [r3, #1]
 8004180:	e00f      	b.n	80041a2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004182:	78fb      	ldrb	r3, [r7, #3]
 8004184:	f003 020f 	and.w	r2, r3, #15
 8004188:	4613      	mov	r3, r2
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	4413      	add	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	4413      	add	r3, r2
 8004198:	3304      	adds	r3, #4
 800419a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80041a2:	78fb      	ldrb	r3, [r7, #3]
 80041a4:	f003 030f 	and.w	r3, r3, #15
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d101      	bne.n	80041bc <HAL_PCD_EP_Close+0x6e>
 80041b8:	2302      	movs	r3, #2
 80041ba:	e00e      	b.n	80041da <HAL_PCD_EP_Close+0x8c>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68f9      	ldr	r1, [r7, #12]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f002 fa7c 	bl	80066c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b086      	sub	sp, #24
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	60f8      	str	r0, [r7, #12]
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	603b      	str	r3, [r7, #0]
 80041ee:	460b      	mov	r3, r1
 80041f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041f2:	7afb      	ldrb	r3, [r7, #11]
 80041f4:	f003 020f 	and.w	r2, r3, #15
 80041f8:	4613      	mov	r3, r2
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	4413      	add	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	4413      	add	r3, r2
 8004208:	3304      	adds	r3, #4
 800420a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	2200      	movs	r2, #0
 800421c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2200      	movs	r2, #0
 8004222:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004224:	7afb      	ldrb	r3, [r7, #11]
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	b2da      	uxtb	r2, r3
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d102      	bne.n	800423e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800423e:	7afb      	ldrb	r3, [r7, #11]
 8004240:	f003 030f 	and.w	r3, r3, #15
 8004244:	2b00      	cmp	r3, #0
 8004246:	d109      	bne.n	800425c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6818      	ldr	r0, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	b2db      	uxtb	r3, r3
 8004252:	461a      	mov	r2, r3
 8004254:	6979      	ldr	r1, [r7, #20]
 8004256:	f002 fd5b 	bl	8006d10 <USB_EP0StartXfer>
 800425a:	e008      	b.n	800426e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6818      	ldr	r0, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	b2db      	uxtb	r3, r3
 8004266:	461a      	mov	r2, r3
 8004268:	6979      	ldr	r1, [r7, #20]
 800426a:	f002 fb09 	bl	8006880 <USB_EPStartXfer>
  }

  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3718      	adds	r7, #24
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	607a      	str	r2, [r7, #4]
 8004282:	603b      	str	r3, [r7, #0]
 8004284:	460b      	mov	r3, r1
 8004286:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004288:	7afb      	ldrb	r3, [r7, #11]
 800428a:	f003 020f 	and.w	r2, r3, #15
 800428e:	4613      	mov	r3, r2
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	4413      	add	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	3338      	adds	r3, #56	; 0x38
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	4413      	add	r3, r2
 800429c:	3304      	adds	r3, #4
 800429e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	2200      	movs	r2, #0
 80042b0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2201      	movs	r2, #1
 80042b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042b8:	7afb      	ldrb	r3, [r7, #11]
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d102      	bne.n	80042d2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042d2:	7afb      	ldrb	r3, [r7, #11]
 80042d4:	f003 030f 	and.w	r3, r3, #15
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d109      	bne.n	80042f0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6818      	ldr	r0, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	461a      	mov	r2, r3
 80042e8:	6979      	ldr	r1, [r7, #20]
 80042ea:	f002 fd11 	bl	8006d10 <USB_EP0StartXfer>
 80042ee:	e008      	b.n	8004302 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6818      	ldr	r0, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	461a      	mov	r2, r3
 80042fc:	6979      	ldr	r1, [r7, #20]
 80042fe:	f002 fabf 	bl	8006880 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3718      	adds	r7, #24
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	460b      	mov	r3, r1
 8004316:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004318:	78fb      	ldrb	r3, [r7, #3]
 800431a:	f003 020f 	and.w	r2, r3, #15
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	429a      	cmp	r2, r3
 8004324:	d901      	bls.n	800432a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e050      	b.n	80043cc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800432a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800432e:	2b00      	cmp	r3, #0
 8004330:	da0f      	bge.n	8004352 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004332:	78fb      	ldrb	r3, [r7, #3]
 8004334:	f003 020f 	and.w	r2, r3, #15
 8004338:	4613      	mov	r3, r2
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	4413      	add	r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	3338      	adds	r3, #56	; 0x38
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	4413      	add	r3, r2
 8004346:	3304      	adds	r3, #4
 8004348:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2201      	movs	r2, #1
 800434e:	705a      	strb	r2, [r3, #1]
 8004350:	e00d      	b.n	800436e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004352:	78fa      	ldrb	r2, [r7, #3]
 8004354:	4613      	mov	r3, r2
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	4413      	add	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	4413      	add	r3, r2
 8004364:	3304      	adds	r3, #4
 8004366:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2201      	movs	r2, #1
 8004372:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	b2da      	uxtb	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004386:	2b01      	cmp	r3, #1
 8004388:	d101      	bne.n	800438e <HAL_PCD_EP_SetStall+0x82>
 800438a:	2302      	movs	r3, #2
 800438c:	e01e      	b.n	80043cc <HAL_PCD_EP_SetStall+0xc0>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68f9      	ldr	r1, [r7, #12]
 800439c:	4618      	mov	r0, r3
 800439e:	f002 ff4f 	bl	8007240 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043a2:	78fb      	ldrb	r3, [r7, #3]
 80043a4:	f003 030f 	and.w	r3, r3, #15
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10a      	bne.n	80043c2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6818      	ldr	r0, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	b2d9      	uxtb	r1, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043bc:	461a      	mov	r2, r3
 80043be:	f003 f93f 	bl	8007640 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	460b      	mov	r3, r1
 80043de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80043e0:	78fb      	ldrb	r3, [r7, #3]
 80043e2:	f003 020f 	and.w	r2, r3, #15
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d901      	bls.n	80043f2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e042      	b.n	8004478 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	da0f      	bge.n	800441a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043fa:	78fb      	ldrb	r3, [r7, #3]
 80043fc:	f003 020f 	and.w	r2, r3, #15
 8004400:	4613      	mov	r3, r2
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	4413      	add	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	3338      	adds	r3, #56	; 0x38
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	4413      	add	r3, r2
 800440e:	3304      	adds	r3, #4
 8004410:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2201      	movs	r2, #1
 8004416:	705a      	strb	r2, [r3, #1]
 8004418:	e00f      	b.n	800443a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800441a:	78fb      	ldrb	r3, [r7, #3]
 800441c:	f003 020f 	and.w	r2, r3, #15
 8004420:	4613      	mov	r3, r2
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	4413      	add	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	4413      	add	r3, r2
 8004430:	3304      	adds	r3, #4
 8004432:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004440:	78fb      	ldrb	r3, [r7, #3]
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	b2da      	uxtb	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004452:	2b01      	cmp	r3, #1
 8004454:	d101      	bne.n	800445a <HAL_PCD_EP_ClrStall+0x86>
 8004456:	2302      	movs	r3, #2
 8004458:	e00e      	b.n	8004478 <HAL_PCD_EP_ClrStall+0xa4>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68f9      	ldr	r1, [r7, #12]
 8004468:	4618      	mov	r0, r3
 800446a:	f002 ff57 	bl	800731c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	460b      	mov	r3, r1
 800448a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800448c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004490:	2b00      	cmp	r3, #0
 8004492:	da0c      	bge.n	80044ae <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004494:	78fb      	ldrb	r3, [r7, #3]
 8004496:	f003 020f 	and.w	r2, r3, #15
 800449a:	4613      	mov	r3, r2
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	4413      	add	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	3338      	adds	r3, #56	; 0x38
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	4413      	add	r3, r2
 80044a8:	3304      	adds	r3, #4
 80044aa:	60fb      	str	r3, [r7, #12]
 80044ac:	e00c      	b.n	80044c8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044ae:	78fb      	ldrb	r3, [r7, #3]
 80044b0:	f003 020f 	and.w	r2, r3, #15
 80044b4:	4613      	mov	r3, r2
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	4413      	add	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	4413      	add	r3, r2
 80044c4:	3304      	adds	r3, #4
 80044c6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68f9      	ldr	r1, [r7, #12]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f002 fd76 	bl	8006fc0 <USB_EPStopXfer>
 80044d4:	4603      	mov	r3, r0
 80044d6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80044d8:	7afb      	ldrb	r3, [r7, #11]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b08a      	sub	sp, #40	; 0x28
 80044e6:	af02      	add	r7, sp, #8
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	4613      	mov	r3, r2
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	4413      	add	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	3338      	adds	r3, #56	; 0x38
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	4413      	add	r3, r2
 8004506:	3304      	adds	r3, #4
 8004508:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a1a      	ldr	r2, [r3, #32]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	429a      	cmp	r2, r3
 8004514:	d901      	bls.n	800451a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e06c      	b.n	80045f4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	699a      	ldr	r2, [r3, #24]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	69fa      	ldr	r2, [r7, #28]
 800452c:	429a      	cmp	r2, r3
 800452e:	d902      	bls.n	8004536 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	3303      	adds	r3, #3
 800453a:	089b      	lsrs	r3, r3, #2
 800453c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800453e:	e02b      	b.n	8004598 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	699a      	ldr	r2, [r3, #24]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	69fa      	ldr	r2, [r7, #28]
 8004552:	429a      	cmp	r2, r3
 8004554:	d902      	bls.n	800455c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	3303      	adds	r3, #3
 8004560:	089b      	lsrs	r3, r3, #2
 8004562:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6919      	ldr	r1, [r3, #16]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	b2da      	uxtb	r2, r3
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004574:	b2db      	uxtb	r3, r3
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	4603      	mov	r3, r0
 800457a:	6978      	ldr	r0, [r7, #20]
 800457c:	f002 fdca 	bl	8007114 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	691a      	ldr	r2, [r3, #16]
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	441a      	add	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6a1a      	ldr	r2, [r3, #32]
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	441a      	add	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	015a      	lsls	r2, r3, #5
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	4413      	add	r3, r2
 80045a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d809      	bhi.n	80045c2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6a1a      	ldr	r2, [r3, #32]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d203      	bcs.n	80045c2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1be      	bne.n	8004540 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	699a      	ldr	r2, [r3, #24]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d811      	bhi.n	80045f2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	f003 030f 	and.w	r3, r3, #15
 80045d4:	2201      	movs	r2, #1
 80045d6:	fa02 f303 	lsl.w	r3, r2, r3
 80045da:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	43db      	mvns	r3, r3
 80045e8:	6939      	ldr	r1, [r7, #16]
 80045ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045ee:	4013      	ands	r3, r2
 80045f0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3720      	adds	r7, #32
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b088      	sub	sp, #32
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	333c      	adds	r3, #60	; 0x3c
 8004614:	3304      	adds	r3, #4
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	015a      	lsls	r2, r3, #5
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	4413      	add	r3, r2
 8004622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d17b      	bne.n	800472a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f003 0308 	and.w	r3, r3, #8
 8004638:	2b00      	cmp	r3, #0
 800463a:	d015      	beq.n	8004668 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	4a61      	ldr	r2, [pc, #388]	; (80047c4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004640:	4293      	cmp	r3, r2
 8004642:	f240 80b9 	bls.w	80047b8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 80b3 	beq.w	80047b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	4413      	add	r3, r2
 800465a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465e:	461a      	mov	r2, r3
 8004660:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004664:	6093      	str	r3, [r2, #8]
 8004666:	e0a7      	b.n	80047b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	f003 0320 	and.w	r3, r3, #32
 800466e:	2b00      	cmp	r3, #0
 8004670:	d009      	beq.n	8004686 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	015a      	lsls	r2, r3, #5
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	4413      	add	r3, r2
 800467a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467e:	461a      	mov	r2, r3
 8004680:	2320      	movs	r3, #32
 8004682:	6093      	str	r3, [r2, #8]
 8004684:	e098      	b.n	80047b8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800468c:	2b00      	cmp	r3, #0
 800468e:	f040 8093 	bne.w	80047b8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	4a4b      	ldr	r2, [pc, #300]	; (80047c4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d90f      	bls.n	80046ba <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	015a      	lsls	r2, r3, #5
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b0:	461a      	mov	r2, r3
 80046b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046b6:	6093      	str	r3, [r2, #8]
 80046b8:	e07e      	b.n	80047b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	4613      	mov	r3, r2
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	4413      	add	r3, r2
 80046cc:	3304      	adds	r3, #4
 80046ce:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	69da      	ldr	r2, [r3, #28]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	0159      	lsls	r1, r3, #5
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	440b      	add	r3, r1
 80046dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046e6:	1ad2      	subs	r2, r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d114      	bne.n	800471c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d109      	bne.n	800470e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6818      	ldr	r0, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004704:	461a      	mov	r2, r3
 8004706:	2101      	movs	r1, #1
 8004708:	f002 ff9a 	bl	8007640 <USB_EP0_OutStart>
 800470c:	e006      	b.n	800471c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	691a      	ldr	r2, [r3, #16]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	441a      	add	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	b2db      	uxtb	r3, r3
 8004720:	4619      	mov	r1, r3
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f005 fada 	bl	8009cdc <HAL_PCD_DataOutStageCallback>
 8004728:	e046      	b.n	80047b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	4a26      	ldr	r2, [pc, #152]	; (80047c8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d124      	bne.n	800477c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00a      	beq.n	8004752 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	015a      	lsls	r2, r3, #5
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	4413      	add	r3, r2
 8004744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004748:	461a      	mov	r2, r3
 800474a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800474e:	6093      	str	r3, [r2, #8]
 8004750:	e032      	b.n	80047b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	f003 0320 	and.w	r3, r3, #32
 8004758:	2b00      	cmp	r3, #0
 800475a:	d008      	beq.n	800476e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	4413      	add	r3, r2
 8004764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004768:	461a      	mov	r2, r3
 800476a:	2320      	movs	r3, #32
 800476c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	b2db      	uxtb	r3, r3
 8004772:	4619      	mov	r1, r3
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f005 fab1 	bl	8009cdc <HAL_PCD_DataOutStageCallback>
 800477a:	e01d      	b.n	80047b8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d114      	bne.n	80047ac <PCD_EP_OutXfrComplete_int+0x1b0>
 8004782:	6879      	ldr	r1, [r7, #4]
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	4613      	mov	r3, r2
 8004788:	00db      	lsls	r3, r3, #3
 800478a:	4413      	add	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	440b      	add	r3, r1
 8004790:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d108      	bne.n	80047ac <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80047a4:	461a      	mov	r2, r3
 80047a6:	2100      	movs	r1, #0
 80047a8:	f002 ff4a 	bl	8007640 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	4619      	mov	r1, r3
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f005 fa92 	bl	8009cdc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3720      	adds	r7, #32
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	4f54300a 	.word	0x4f54300a
 80047c8:	4f54310a 	.word	0x4f54310a

080047cc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	333c      	adds	r3, #60	; 0x3c
 80047e4:	3304      	adds	r3, #4
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	4a15      	ldr	r2, [pc, #84]	; (8004854 <PCD_EP_OutSetupPacket_int+0x88>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d90e      	bls.n	8004820 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004808:	2b00      	cmp	r3, #0
 800480a:	d009      	beq.n	8004820 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	4413      	add	r3, r2
 8004814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004818:	461a      	mov	r2, r3
 800481a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800481e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f005 fa49 	bl	8009cb8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	4a0a      	ldr	r2, [pc, #40]	; (8004854 <PCD_EP_OutSetupPacket_int+0x88>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d90c      	bls.n	8004848 <PCD_EP_OutSetupPacket_int+0x7c>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d108      	bne.n	8004848 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6818      	ldr	r0, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004840:	461a      	mov	r2, r3
 8004842:	2101      	movs	r1, #1
 8004844:	f002 fefc 	bl	8007640 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	4f54300a 	.word	0x4f54300a

08004858 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	460b      	mov	r3, r1
 8004862:	70fb      	strb	r3, [r7, #3]
 8004864:	4613      	mov	r3, r2
 8004866:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004870:	78fb      	ldrb	r3, [r7, #3]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d107      	bne.n	8004886 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004876:	883b      	ldrh	r3, [r7, #0]
 8004878:	0419      	lsls	r1, r3, #16
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	430a      	orrs	r2, r1
 8004882:	629a      	str	r2, [r3, #40]	; 0x28
 8004884:	e028      	b.n	80048d8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488c:	0c1b      	lsrs	r3, r3, #16
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	4413      	add	r3, r2
 8004892:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004894:	2300      	movs	r3, #0
 8004896:	73fb      	strb	r3, [r7, #15]
 8004898:	e00d      	b.n	80048b6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	7bfb      	ldrb	r3, [r7, #15]
 80048a0:	3340      	adds	r3, #64	; 0x40
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	0c1b      	lsrs	r3, r3, #16
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	4413      	add	r3, r2
 80048ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80048b0:	7bfb      	ldrb	r3, [r7, #15]
 80048b2:	3301      	adds	r3, #1
 80048b4:	73fb      	strb	r3, [r7, #15]
 80048b6:	7bfa      	ldrb	r2, [r7, #15]
 80048b8:	78fb      	ldrb	r3, [r7, #3]
 80048ba:	3b01      	subs	r3, #1
 80048bc:	429a      	cmp	r2, r3
 80048be:	d3ec      	bcc.n	800489a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80048c0:	883b      	ldrh	r3, [r7, #0]
 80048c2:	0418      	lsls	r0, r3, #16
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6819      	ldr	r1, [r3, #0]
 80048c8:	78fb      	ldrb	r3, [r7, #3]
 80048ca:	3b01      	subs	r3, #1
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	4302      	orrs	r2, r0
 80048d0:	3340      	adds	r3, #64	; 0x40
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	440b      	add	r3, r1
 80048d6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
 80048ee:	460b      	mov	r3, r1
 80048f0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	887a      	ldrh	r2, [r7, #2]
 80048f8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e267      	b.n	8004dea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d075      	beq.n	8004a12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004926:	4b88      	ldr	r3, [pc, #544]	; (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 030c 	and.w	r3, r3, #12
 800492e:	2b04      	cmp	r3, #4
 8004930:	d00c      	beq.n	800494c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004932:	4b85      	ldr	r3, [pc, #532]	; (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800493a:	2b08      	cmp	r3, #8
 800493c:	d112      	bne.n	8004964 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800493e:	4b82      	ldr	r3, [pc, #520]	; (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004946:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800494a:	d10b      	bne.n	8004964 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800494c:	4b7e      	ldr	r3, [pc, #504]	; (8004b48 <HAL_RCC_OscConfig+0x240>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d05b      	beq.n	8004a10 <HAL_RCC_OscConfig+0x108>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d157      	bne.n	8004a10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e242      	b.n	8004dea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800496c:	d106      	bne.n	800497c <HAL_RCC_OscConfig+0x74>
 800496e:	4b76      	ldr	r3, [pc, #472]	; (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a75      	ldr	r2, [pc, #468]	; (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004978:	6013      	str	r3, [r2, #0]
 800497a:	e01d      	b.n	80049b8 <HAL_RCC_OscConfig+0xb0>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004984:	d10c      	bne.n	80049a0 <HAL_RCC_OscConfig+0x98>
 8004986:	4b70      	ldr	r3, [pc, #448]	; (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a6f      	ldr	r2, [pc, #444]	; (8004b48 <HAL_RCC_OscConfig+0x240>)
 800498c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004990:	6013      	str	r3, [r2, #0]
 8004992:	4b6d      	ldr	r3, [pc, #436]	; (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a6c      	ldr	r2, [pc, #432]	; (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	e00b      	b.n	80049b8 <HAL_RCC_OscConfig+0xb0>
 80049a0:	4b69      	ldr	r3, [pc, #420]	; (8004b48 <HAL_RCC_OscConfig+0x240>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a68      	ldr	r2, [pc, #416]	; (8004b48 <HAL_RCC_OscConfig+0x240>)
 80049a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049aa:	6013      	str	r3, [r2, #0]
 80049ac:	4b66      	ldr	r3, [pc, #408]	; (8004b48 <HAL_RCC_OscConfig+0x240>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a65      	ldr	r2, [pc, #404]	; (8004b48 <HAL_RCC_OscConfig+0x240>)
 80049b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d013      	beq.n	80049e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c0:	f7fc fafe 	bl	8000fc0 <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049c8:	f7fc fafa 	bl	8000fc0 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b64      	cmp	r3, #100	; 0x64
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e207      	b.n	8004dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049da:	4b5b      	ldr	r3, [pc, #364]	; (8004b48 <HAL_RCC_OscConfig+0x240>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0f0      	beq.n	80049c8 <HAL_RCC_OscConfig+0xc0>
 80049e6:	e014      	b.n	8004a12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e8:	f7fc faea 	bl	8000fc0 <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049f0:	f7fc fae6 	bl	8000fc0 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b64      	cmp	r3, #100	; 0x64
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e1f3      	b.n	8004dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a02:	4b51      	ldr	r3, [pc, #324]	; (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1f0      	bne.n	80049f0 <HAL_RCC_OscConfig+0xe8>
 8004a0e:	e000      	b.n	8004a12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d063      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a1e:	4b4a      	ldr	r3, [pc, #296]	; (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 030c 	and.w	r3, r3, #12
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00b      	beq.n	8004a42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a2a:	4b47      	ldr	r3, [pc, #284]	; (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a32:	2b08      	cmp	r3, #8
 8004a34:	d11c      	bne.n	8004a70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a36:	4b44      	ldr	r3, [pc, #272]	; (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d116      	bne.n	8004a70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a42:	4b41      	ldr	r3, [pc, #260]	; (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d005      	beq.n	8004a5a <HAL_RCC_OscConfig+0x152>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d001      	beq.n	8004a5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e1c7      	b.n	8004dea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a5a:	4b3b      	ldr	r3, [pc, #236]	; (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	4937      	ldr	r1, [pc, #220]	; (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a6e:	e03a      	b.n	8004ae6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d020      	beq.n	8004aba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a78:	4b34      	ldr	r3, [pc, #208]	; (8004b4c <HAL_RCC_OscConfig+0x244>)
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a7e:	f7fc fa9f 	bl	8000fc0 <HAL_GetTick>
 8004a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a84:	e008      	b.n	8004a98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a86:	f7fc fa9b 	bl	8000fc0 <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d901      	bls.n	8004a98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e1a8      	b.n	8004dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a98:	4b2b      	ldr	r3, [pc, #172]	; (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d0f0      	beq.n	8004a86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa4:	4b28      	ldr	r3, [pc, #160]	; (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	00db      	lsls	r3, r3, #3
 8004ab2:	4925      	ldr	r1, [pc, #148]	; (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	600b      	str	r3, [r1, #0]
 8004ab8:	e015      	b.n	8004ae6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aba:	4b24      	ldr	r3, [pc, #144]	; (8004b4c <HAL_RCC_OscConfig+0x244>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac0:	f7fc fa7e 	bl	8000fc0 <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ac8:	f7fc fa7a 	bl	8000fc0 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e187      	b.n	8004dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ada:	4b1b      	ldr	r3, [pc, #108]	; (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1f0      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0308 	and.w	r3, r3, #8
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d036      	beq.n	8004b60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d016      	beq.n	8004b28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004afa:	4b15      	ldr	r3, [pc, #84]	; (8004b50 <HAL_RCC_OscConfig+0x248>)
 8004afc:	2201      	movs	r2, #1
 8004afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b00:	f7fc fa5e 	bl	8000fc0 <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b08:	f7fc fa5a 	bl	8000fc0 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e167      	b.n	8004dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b1a:	4b0b      	ldr	r3, [pc, #44]	; (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d0f0      	beq.n	8004b08 <HAL_RCC_OscConfig+0x200>
 8004b26:	e01b      	b.n	8004b60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b28:	4b09      	ldr	r3, [pc, #36]	; (8004b50 <HAL_RCC_OscConfig+0x248>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b2e:	f7fc fa47 	bl	8000fc0 <HAL_GetTick>
 8004b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b34:	e00e      	b.n	8004b54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b36:	f7fc fa43 	bl	8000fc0 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d907      	bls.n	8004b54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e150      	b.n	8004dea <HAL_RCC_OscConfig+0x4e2>
 8004b48:	40023800 	.word	0x40023800
 8004b4c:	42470000 	.word	0x42470000
 8004b50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b54:	4b88      	ldr	r3, [pc, #544]	; (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1ea      	bne.n	8004b36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 8097 	beq.w	8004c9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b72:	4b81      	ldr	r3, [pc, #516]	; (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10f      	bne.n	8004b9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60bb      	str	r3, [r7, #8]
 8004b82:	4b7d      	ldr	r3, [pc, #500]	; (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	4a7c      	ldr	r2, [pc, #496]	; (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b8e:	4b7a      	ldr	r3, [pc, #488]	; (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b96:	60bb      	str	r3, [r7, #8]
 8004b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b9e:	4b77      	ldr	r3, [pc, #476]	; (8004d7c <HAL_RCC_OscConfig+0x474>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d118      	bne.n	8004bdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004baa:	4b74      	ldr	r3, [pc, #464]	; (8004d7c <HAL_RCC_OscConfig+0x474>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a73      	ldr	r2, [pc, #460]	; (8004d7c <HAL_RCC_OscConfig+0x474>)
 8004bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bb6:	f7fc fa03 	bl	8000fc0 <HAL_GetTick>
 8004bba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bbc:	e008      	b.n	8004bd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bbe:	f7fc f9ff 	bl	8000fc0 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e10c      	b.n	8004dea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd0:	4b6a      	ldr	r3, [pc, #424]	; (8004d7c <HAL_RCC_OscConfig+0x474>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0f0      	beq.n	8004bbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d106      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x2ea>
 8004be4:	4b64      	ldr	r3, [pc, #400]	; (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be8:	4a63      	ldr	r2, [pc, #396]	; (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004bea:	f043 0301 	orr.w	r3, r3, #1
 8004bee:	6713      	str	r3, [r2, #112]	; 0x70
 8004bf0:	e01c      	b.n	8004c2c <HAL_RCC_OscConfig+0x324>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	2b05      	cmp	r3, #5
 8004bf8:	d10c      	bne.n	8004c14 <HAL_RCC_OscConfig+0x30c>
 8004bfa:	4b5f      	ldr	r3, [pc, #380]	; (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfe:	4a5e      	ldr	r2, [pc, #376]	; (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004c00:	f043 0304 	orr.w	r3, r3, #4
 8004c04:	6713      	str	r3, [r2, #112]	; 0x70
 8004c06:	4b5c      	ldr	r3, [pc, #368]	; (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0a:	4a5b      	ldr	r2, [pc, #364]	; (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004c0c:	f043 0301 	orr.w	r3, r3, #1
 8004c10:	6713      	str	r3, [r2, #112]	; 0x70
 8004c12:	e00b      	b.n	8004c2c <HAL_RCC_OscConfig+0x324>
 8004c14:	4b58      	ldr	r3, [pc, #352]	; (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c18:	4a57      	ldr	r2, [pc, #348]	; (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004c1a:	f023 0301 	bic.w	r3, r3, #1
 8004c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c20:	4b55      	ldr	r3, [pc, #340]	; (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c24:	4a54      	ldr	r2, [pc, #336]	; (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004c26:	f023 0304 	bic.w	r3, r3, #4
 8004c2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d015      	beq.n	8004c60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c34:	f7fc f9c4 	bl	8000fc0 <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c3a:	e00a      	b.n	8004c52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c3c:	f7fc f9c0 	bl	8000fc0 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e0cb      	b.n	8004dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c52:	4b49      	ldr	r3, [pc, #292]	; (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0ee      	beq.n	8004c3c <HAL_RCC_OscConfig+0x334>
 8004c5e:	e014      	b.n	8004c8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c60:	f7fc f9ae 	bl	8000fc0 <HAL_GetTick>
 8004c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c66:	e00a      	b.n	8004c7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c68:	f7fc f9aa 	bl	8000fc0 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e0b5      	b.n	8004dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c7e:	4b3e      	ldr	r3, [pc, #248]	; (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1ee      	bne.n	8004c68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c8a:	7dfb      	ldrb	r3, [r7, #23]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d105      	bne.n	8004c9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c90:	4b39      	ldr	r3, [pc, #228]	; (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	4a38      	ldr	r2, [pc, #224]	; (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004c96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 80a1 	beq.w	8004de8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ca6:	4b34      	ldr	r3, [pc, #208]	; (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 030c 	and.w	r3, r3, #12
 8004cae:	2b08      	cmp	r3, #8
 8004cb0:	d05c      	beq.n	8004d6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d141      	bne.n	8004d3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cba:	4b31      	ldr	r3, [pc, #196]	; (8004d80 <HAL_RCC_OscConfig+0x478>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc0:	f7fc f97e 	bl	8000fc0 <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cc8:	f7fc f97a 	bl	8000fc0 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e087      	b.n	8004dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cda:	4b27      	ldr	r3, [pc, #156]	; (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1f0      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	69da      	ldr	r2, [r3, #28]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	019b      	lsls	r3, r3, #6
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfc:	085b      	lsrs	r3, r3, #1
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	041b      	lsls	r3, r3, #16
 8004d02:	431a      	orrs	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d08:	061b      	lsls	r3, r3, #24
 8004d0a:	491b      	ldr	r1, [pc, #108]	; (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d10:	4b1b      	ldr	r3, [pc, #108]	; (8004d80 <HAL_RCC_OscConfig+0x478>)
 8004d12:	2201      	movs	r2, #1
 8004d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d16:	f7fc f953 	bl	8000fc0 <HAL_GetTick>
 8004d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d1c:	e008      	b.n	8004d30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d1e:	f7fc f94f 	bl	8000fc0 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d901      	bls.n	8004d30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e05c      	b.n	8004dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d30:	4b11      	ldr	r3, [pc, #68]	; (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0f0      	beq.n	8004d1e <HAL_RCC_OscConfig+0x416>
 8004d3c:	e054      	b.n	8004de8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d3e:	4b10      	ldr	r3, [pc, #64]	; (8004d80 <HAL_RCC_OscConfig+0x478>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d44:	f7fc f93c 	bl	8000fc0 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d4c:	f7fc f938 	bl	8000fc0 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e045      	b.n	8004dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d5e:	4b06      	ldr	r3, [pc, #24]	; (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1f0      	bne.n	8004d4c <HAL_RCC_OscConfig+0x444>
 8004d6a:	e03d      	b.n	8004de8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d107      	bne.n	8004d84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e038      	b.n	8004dea <HAL_RCC_OscConfig+0x4e2>
 8004d78:	40023800 	.word	0x40023800
 8004d7c:	40007000 	.word	0x40007000
 8004d80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d84:	4b1b      	ldr	r3, [pc, #108]	; (8004df4 <HAL_RCC_OscConfig+0x4ec>)
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d028      	beq.n	8004de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d121      	bne.n	8004de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d11a      	bne.n	8004de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004db4:	4013      	ands	r3, r2
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004dba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d111      	bne.n	8004de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dca:	085b      	lsrs	r3, r3, #1
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d107      	bne.n	8004de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d001      	beq.n	8004de8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e000      	b.n	8004dea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3718      	adds	r7, #24
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	40023800 	.word	0x40023800

08004df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d101      	bne.n	8004e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e0cc      	b.n	8004fa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e0c:	4b68      	ldr	r3, [pc, #416]	; (8004fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 030f 	and.w	r3, r3, #15
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d90c      	bls.n	8004e34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e1a:	4b65      	ldr	r3, [pc, #404]	; (8004fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	b2d2      	uxtb	r2, r2
 8004e20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e22:	4b63      	ldr	r3, [pc, #396]	; (8004fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 030f 	and.w	r3, r3, #15
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d001      	beq.n	8004e34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e0b8      	b.n	8004fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d020      	beq.n	8004e82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0304 	and.w	r3, r3, #4
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d005      	beq.n	8004e58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e4c:	4b59      	ldr	r3, [pc, #356]	; (8004fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	4a58      	ldr	r2, [pc, #352]	; (8004fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0308 	and.w	r3, r3, #8
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d005      	beq.n	8004e70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e64:	4b53      	ldr	r3, [pc, #332]	; (8004fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	4a52      	ldr	r2, [pc, #328]	; (8004fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e70:	4b50      	ldr	r3, [pc, #320]	; (8004fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	494d      	ldr	r1, [pc, #308]	; (8004fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d044      	beq.n	8004f18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d107      	bne.n	8004ea6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e96:	4b47      	ldr	r3, [pc, #284]	; (8004fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d119      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e07f      	b.n	8004fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d003      	beq.n	8004eb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eb2:	2b03      	cmp	r3, #3
 8004eb4:	d107      	bne.n	8004ec6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eb6:	4b3f      	ldr	r3, [pc, #252]	; (8004fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d109      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e06f      	b.n	8004fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ec6:	4b3b      	ldr	r3, [pc, #236]	; (8004fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e067      	b.n	8004fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ed6:	4b37      	ldr	r3, [pc, #220]	; (8004fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f023 0203 	bic.w	r2, r3, #3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	4934      	ldr	r1, [pc, #208]	; (8004fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ee8:	f7fc f86a 	bl	8000fc0 <HAL_GetTick>
 8004eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eee:	e00a      	b.n	8004f06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ef0:	f7fc f866 	bl	8000fc0 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e04f      	b.n	8004fa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f06:	4b2b      	ldr	r3, [pc, #172]	; (8004fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f003 020c 	and.w	r2, r3, #12
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d1eb      	bne.n	8004ef0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f18:	4b25      	ldr	r3, [pc, #148]	; (8004fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 030f 	and.w	r3, r3, #15
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d20c      	bcs.n	8004f40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f26:	4b22      	ldr	r3, [pc, #136]	; (8004fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	b2d2      	uxtb	r2, r2
 8004f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f2e:	4b20      	ldr	r3, [pc, #128]	; (8004fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 030f 	and.w	r3, r3, #15
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d001      	beq.n	8004f40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e032      	b.n	8004fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0304 	and.w	r3, r3, #4
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d008      	beq.n	8004f5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f4c:	4b19      	ldr	r3, [pc, #100]	; (8004fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	4916      	ldr	r1, [pc, #88]	; (8004fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0308 	and.w	r3, r3, #8
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d009      	beq.n	8004f7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f6a:	4b12      	ldr	r3, [pc, #72]	; (8004fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	490e      	ldr	r1, [pc, #56]	; (8004fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f7e:	f000 f821 	bl	8004fc4 <HAL_RCC_GetSysClockFreq>
 8004f82:	4602      	mov	r2, r0
 8004f84:	4b0b      	ldr	r3, [pc, #44]	; (8004fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	091b      	lsrs	r3, r3, #4
 8004f8a:	f003 030f 	and.w	r3, r3, #15
 8004f8e:	490a      	ldr	r1, [pc, #40]	; (8004fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8004f90:	5ccb      	ldrb	r3, [r1, r3]
 8004f92:	fa22 f303 	lsr.w	r3, r2, r3
 8004f96:	4a09      	ldr	r2, [pc, #36]	; (8004fbc <HAL_RCC_ClockConfig+0x1c4>)
 8004f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f9a:	4b09      	ldr	r3, [pc, #36]	; (8004fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7fb ffca 	bl	8000f38 <HAL_InitTick>

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	40023c00 	.word	0x40023c00
 8004fb4:	40023800 	.word	0x40023800
 8004fb8:	0800b724 	.word	0x0800b724
 8004fbc:	20000000 	.word	0x20000000
 8004fc0:	20000004 	.word	0x20000004

08004fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fc8:	b094      	sub	sp, #80	; 0x50
 8004fca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	647b      	str	r3, [r7, #68]	; 0x44
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fdc:	4b79      	ldr	r3, [pc, #484]	; (80051c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f003 030c 	and.w	r3, r3, #12
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	d00d      	beq.n	8005004 <HAL_RCC_GetSysClockFreq+0x40>
 8004fe8:	2b08      	cmp	r3, #8
 8004fea:	f200 80e1 	bhi.w	80051b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d002      	beq.n	8004ff8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	d003      	beq.n	8004ffe <HAL_RCC_GetSysClockFreq+0x3a>
 8004ff6:	e0db      	b.n	80051b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ff8:	4b73      	ldr	r3, [pc, #460]	; (80051c8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ffa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004ffc:	e0db      	b.n	80051b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ffe:	4b73      	ldr	r3, [pc, #460]	; (80051cc <HAL_RCC_GetSysClockFreq+0x208>)
 8005000:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005002:	e0d8      	b.n	80051b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005004:	4b6f      	ldr	r3, [pc, #444]	; (80051c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800500c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800500e:	4b6d      	ldr	r3, [pc, #436]	; (80051c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d063      	beq.n	80050e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800501a:	4b6a      	ldr	r3, [pc, #424]	; (80051c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	099b      	lsrs	r3, r3, #6
 8005020:	2200      	movs	r2, #0
 8005022:	63bb      	str	r3, [r7, #56]	; 0x38
 8005024:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800502c:	633b      	str	r3, [r7, #48]	; 0x30
 800502e:	2300      	movs	r3, #0
 8005030:	637b      	str	r3, [r7, #52]	; 0x34
 8005032:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005036:	4622      	mov	r2, r4
 8005038:	462b      	mov	r3, r5
 800503a:	f04f 0000 	mov.w	r0, #0
 800503e:	f04f 0100 	mov.w	r1, #0
 8005042:	0159      	lsls	r1, r3, #5
 8005044:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005048:	0150      	lsls	r0, r2, #5
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	4621      	mov	r1, r4
 8005050:	1a51      	subs	r1, r2, r1
 8005052:	6139      	str	r1, [r7, #16]
 8005054:	4629      	mov	r1, r5
 8005056:	eb63 0301 	sbc.w	r3, r3, r1
 800505a:	617b      	str	r3, [r7, #20]
 800505c:	f04f 0200 	mov.w	r2, #0
 8005060:	f04f 0300 	mov.w	r3, #0
 8005064:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005068:	4659      	mov	r1, fp
 800506a:	018b      	lsls	r3, r1, #6
 800506c:	4651      	mov	r1, sl
 800506e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005072:	4651      	mov	r1, sl
 8005074:	018a      	lsls	r2, r1, #6
 8005076:	4651      	mov	r1, sl
 8005078:	ebb2 0801 	subs.w	r8, r2, r1
 800507c:	4659      	mov	r1, fp
 800507e:	eb63 0901 	sbc.w	r9, r3, r1
 8005082:	f04f 0200 	mov.w	r2, #0
 8005086:	f04f 0300 	mov.w	r3, #0
 800508a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800508e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005092:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005096:	4690      	mov	r8, r2
 8005098:	4699      	mov	r9, r3
 800509a:	4623      	mov	r3, r4
 800509c:	eb18 0303 	adds.w	r3, r8, r3
 80050a0:	60bb      	str	r3, [r7, #8]
 80050a2:	462b      	mov	r3, r5
 80050a4:	eb49 0303 	adc.w	r3, r9, r3
 80050a8:	60fb      	str	r3, [r7, #12]
 80050aa:	f04f 0200 	mov.w	r2, #0
 80050ae:	f04f 0300 	mov.w	r3, #0
 80050b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80050b6:	4629      	mov	r1, r5
 80050b8:	024b      	lsls	r3, r1, #9
 80050ba:	4621      	mov	r1, r4
 80050bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80050c0:	4621      	mov	r1, r4
 80050c2:	024a      	lsls	r2, r1, #9
 80050c4:	4610      	mov	r0, r2
 80050c6:	4619      	mov	r1, r3
 80050c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050ca:	2200      	movs	r2, #0
 80050cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80050ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050d4:	f7fb f8dc 	bl	8000290 <__aeabi_uldivmod>
 80050d8:	4602      	mov	r2, r0
 80050da:	460b      	mov	r3, r1
 80050dc:	4613      	mov	r3, r2
 80050de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050e0:	e058      	b.n	8005194 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050e2:	4b38      	ldr	r3, [pc, #224]	; (80051c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	099b      	lsrs	r3, r3, #6
 80050e8:	2200      	movs	r2, #0
 80050ea:	4618      	mov	r0, r3
 80050ec:	4611      	mov	r1, r2
 80050ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80050f2:	623b      	str	r3, [r7, #32]
 80050f4:	2300      	movs	r3, #0
 80050f6:	627b      	str	r3, [r7, #36]	; 0x24
 80050f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80050fc:	4642      	mov	r2, r8
 80050fe:	464b      	mov	r3, r9
 8005100:	f04f 0000 	mov.w	r0, #0
 8005104:	f04f 0100 	mov.w	r1, #0
 8005108:	0159      	lsls	r1, r3, #5
 800510a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800510e:	0150      	lsls	r0, r2, #5
 8005110:	4602      	mov	r2, r0
 8005112:	460b      	mov	r3, r1
 8005114:	4641      	mov	r1, r8
 8005116:	ebb2 0a01 	subs.w	sl, r2, r1
 800511a:	4649      	mov	r1, r9
 800511c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005120:	f04f 0200 	mov.w	r2, #0
 8005124:	f04f 0300 	mov.w	r3, #0
 8005128:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800512c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005130:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005134:	ebb2 040a 	subs.w	r4, r2, sl
 8005138:	eb63 050b 	sbc.w	r5, r3, fp
 800513c:	f04f 0200 	mov.w	r2, #0
 8005140:	f04f 0300 	mov.w	r3, #0
 8005144:	00eb      	lsls	r3, r5, #3
 8005146:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800514a:	00e2      	lsls	r2, r4, #3
 800514c:	4614      	mov	r4, r2
 800514e:	461d      	mov	r5, r3
 8005150:	4643      	mov	r3, r8
 8005152:	18e3      	adds	r3, r4, r3
 8005154:	603b      	str	r3, [r7, #0]
 8005156:	464b      	mov	r3, r9
 8005158:	eb45 0303 	adc.w	r3, r5, r3
 800515c:	607b      	str	r3, [r7, #4]
 800515e:	f04f 0200 	mov.w	r2, #0
 8005162:	f04f 0300 	mov.w	r3, #0
 8005166:	e9d7 4500 	ldrd	r4, r5, [r7]
 800516a:	4629      	mov	r1, r5
 800516c:	028b      	lsls	r3, r1, #10
 800516e:	4621      	mov	r1, r4
 8005170:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005174:	4621      	mov	r1, r4
 8005176:	028a      	lsls	r2, r1, #10
 8005178:	4610      	mov	r0, r2
 800517a:	4619      	mov	r1, r3
 800517c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800517e:	2200      	movs	r2, #0
 8005180:	61bb      	str	r3, [r7, #24]
 8005182:	61fa      	str	r2, [r7, #28]
 8005184:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005188:	f7fb f882 	bl	8000290 <__aeabi_uldivmod>
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	4613      	mov	r3, r2
 8005192:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005194:	4b0b      	ldr	r3, [pc, #44]	; (80051c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	0c1b      	lsrs	r3, r3, #16
 800519a:	f003 0303 	and.w	r3, r3, #3
 800519e:	3301      	adds	r3, #1
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80051a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051ae:	e002      	b.n	80051b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051b0:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80051b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3750      	adds	r7, #80	; 0x50
 80051bc:	46bd      	mov	sp, r7
 80051be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051c2:	bf00      	nop
 80051c4:	40023800 	.word	0x40023800
 80051c8:	00f42400 	.word	0x00f42400
 80051cc:	007a1200 	.word	0x007a1200

080051d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051d0:	b480      	push	{r7}
 80051d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051d4:	4b03      	ldr	r3, [pc, #12]	; (80051e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80051d6:	681b      	ldr	r3, [r3, #0]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	20000000 	.word	0x20000000

080051e8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b088      	sub	sp, #32
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	099b      	lsrs	r3, r3, #6
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10f      	bne.n	800522c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00a      	beq.n	800522c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	099b      	lsrs	r3, r3, #6
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d004      	beq.n	800522c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	4798      	blx	r3
    return;
 800522a:	e0d7      	b.n	80053dc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	085b      	lsrs	r3, r3, #1
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00a      	beq.n	800524e <HAL_SPI_IRQHandler+0x66>
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	09db      	lsrs	r3, r3, #7
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b00      	cmp	r3, #0
 8005242:	d004      	beq.n	800524e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	4798      	blx	r3
    return;
 800524c:	e0c6      	b.n	80053dc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	095b      	lsrs	r3, r3, #5
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10c      	bne.n	8005274 <HAL_SPI_IRQHandler+0x8c>
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	099b      	lsrs	r3, r3, #6
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d106      	bne.n	8005274 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	0a1b      	lsrs	r3, r3, #8
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b00      	cmp	r3, #0
 8005270:	f000 80b4 	beq.w	80053dc <HAL_SPI_IRQHandler+0x1f4>
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	095b      	lsrs	r3, r3, #5
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 80ad 	beq.w	80053dc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	099b      	lsrs	r3, r3, #6
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d023      	beq.n	80052d6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b03      	cmp	r3, #3
 8005298:	d011      	beq.n	80052be <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800529e:	f043 0204 	orr.w	r2, r3, #4
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052a6:	2300      	movs	r3, #0
 80052a8:	617b      	str	r3, [r7, #20]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	617b      	str	r3, [r7, #20]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	617b      	str	r3, [r7, #20]
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	e00b      	b.n	80052d6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052be:	2300      	movs	r3, #0
 80052c0:	613b      	str	r3, [r7, #16]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	613b      	str	r3, [r7, #16]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	613b      	str	r3, [r7, #16]
 80052d2:	693b      	ldr	r3, [r7, #16]
        return;
 80052d4:	e082      	b.n	80053dc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	095b      	lsrs	r3, r3, #5
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d014      	beq.n	800530c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e6:	f043 0201 	orr.w	r2, r3, #1
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80052ee:	2300      	movs	r3, #0
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	0a1b      	lsrs	r3, r3, #8
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00c      	beq.n	8005332 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800531c:	f043 0208 	orr.w	r2, r3, #8
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005324:	2300      	movs	r3, #0
 8005326:	60bb      	str	r3, [r7, #8]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	60bb      	str	r3, [r7, #8]
 8005330:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005336:	2b00      	cmp	r3, #0
 8005338:	d04f      	beq.n	80053da <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005348:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d104      	bne.n	8005366 <HAL_SPI_IRQHandler+0x17e>
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b00      	cmp	r3, #0
 8005364:	d034      	beq.n	80053d0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f022 0203 	bic.w	r2, r2, #3
 8005374:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800537a:	2b00      	cmp	r3, #0
 800537c:	d011      	beq.n	80053a2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005382:	4a18      	ldr	r2, [pc, #96]	; (80053e4 <HAL_SPI_IRQHandler+0x1fc>)
 8005384:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800538a:	4618      	mov	r0, r3
 800538c:	f7fb ffc9 	bl	8001322 <HAL_DMA_Abort_IT>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d005      	beq.n	80053a2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800539a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d016      	beq.n	80053d8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053ae:	4a0d      	ldr	r2, [pc, #52]	; (80053e4 <HAL_SPI_IRQHandler+0x1fc>)
 80053b0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7fb ffb3 	bl	8001322 <HAL_DMA_Abort_IT>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00a      	beq.n	80053d8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80053ce:	e003      	b.n	80053d8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f809 	bl	80053e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80053d6:	e000      	b.n	80053da <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80053d8:	bf00      	nop
    return;
 80053da:	bf00      	nop
  }
}
 80053dc:	3720      	adds	r7, #32
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	080053fd 	.word	0x080053fd

080053e8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005408:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f7ff ffe6 	bl	80053e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800541c:	bf00      	nop
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b08a      	sub	sp, #40	; 0x28
 8005428:	af02      	add	r7, sp, #8
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	603b      	str	r3, [r7, #0]
 8005430:	4613      	mov	r3, r2
 8005432:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b20      	cmp	r3, #32
 8005442:	d17c      	bne.n	800553e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <HAL_UART_Transmit+0x2c>
 800544a:	88fb      	ldrh	r3, [r7, #6]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e075      	b.n	8005540 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800545a:	2b01      	cmp	r3, #1
 800545c:	d101      	bne.n	8005462 <HAL_UART_Transmit+0x3e>
 800545e:	2302      	movs	r3, #2
 8005460:	e06e      	b.n	8005540 <HAL_UART_Transmit+0x11c>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2221      	movs	r2, #33	; 0x21
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005478:	f7fb fda2 	bl	8000fc0 <HAL_GetTick>
 800547c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	88fa      	ldrh	r2, [r7, #6]
 8005482:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	88fa      	ldrh	r2, [r7, #6]
 8005488:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005492:	d108      	bne.n	80054a6 <HAL_UART_Transmit+0x82>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d104      	bne.n	80054a6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800549c:	2300      	movs	r3, #0
 800549e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	61bb      	str	r3, [r7, #24]
 80054a4:	e003      	b.n	80054ae <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054aa:	2300      	movs	r3, #0
 80054ac:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80054b6:	e02a      	b.n	800550e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	2200      	movs	r2, #0
 80054c0:	2180      	movs	r1, #128	; 0x80
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f000 faf8 	bl	8005ab8 <UART_WaitOnFlagUntilTimeout>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e036      	b.n	8005540 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10b      	bne.n	80054f0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	461a      	mov	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054e6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	3302      	adds	r3, #2
 80054ec:	61bb      	str	r3, [r7, #24]
 80054ee:	e007      	b.n	8005500 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	781a      	ldrb	r2, [r3, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	3301      	adds	r3, #1
 80054fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005504:	b29b      	uxth	r3, r3
 8005506:	3b01      	subs	r3, #1
 8005508:	b29a      	uxth	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005512:	b29b      	uxth	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1cf      	bne.n	80054b8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	2200      	movs	r2, #0
 8005520:	2140      	movs	r1, #64	; 0x40
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f000 fac8 	bl	8005ab8 <UART_WaitOnFlagUntilTimeout>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e006      	b.n	8005540 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2220      	movs	r2, #32
 8005536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800553a:	2300      	movs	r3, #0
 800553c:	e000      	b.n	8005540 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800553e:	2302      	movs	r3, #2
  }
}
 8005540:	4618      	mov	r0, r3
 8005542:	3720      	adds	r7, #32
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b0ba      	sub	sp, #232	; 0xe8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800556e:	2300      	movs	r3, #0
 8005570:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005574:	2300      	movs	r3, #0
 8005576:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800557a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800557e:	f003 030f 	and.w	r3, r3, #15
 8005582:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005586:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10f      	bne.n	80055ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800558e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005592:	f003 0320 	and.w	r3, r3, #32
 8005596:	2b00      	cmp	r3, #0
 8005598:	d009      	beq.n	80055ae <HAL_UART_IRQHandler+0x66>
 800559a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800559e:	f003 0320 	and.w	r3, r3, #32
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 fbd3 	bl	8005d52 <UART_Receive_IT>
      return;
 80055ac:	e256      	b.n	8005a5c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80055ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f000 80de 	beq.w	8005774 <HAL_UART_IRQHandler+0x22c>
 80055b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d106      	bne.n	80055d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f000 80d1 	beq.w	8005774 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00b      	beq.n	80055f6 <HAL_UART_IRQHandler+0xae>
 80055de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d005      	beq.n	80055f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	f043 0201 	orr.w	r2, r3, #1
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055fa:	f003 0304 	and.w	r3, r3, #4
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00b      	beq.n	800561a <HAL_UART_IRQHandler+0xd2>
 8005602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	2b00      	cmp	r3, #0
 800560c:	d005      	beq.n	800561a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	f043 0202 	orr.w	r2, r3, #2
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800561a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00b      	beq.n	800563e <HAL_UART_IRQHandler+0xf6>
 8005626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	d005      	beq.n	800563e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	f043 0204 	orr.w	r2, r3, #4
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800563e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005642:	f003 0308 	and.w	r3, r3, #8
 8005646:	2b00      	cmp	r3, #0
 8005648:	d011      	beq.n	800566e <HAL_UART_IRQHandler+0x126>
 800564a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800564e:	f003 0320 	and.w	r3, r3, #32
 8005652:	2b00      	cmp	r3, #0
 8005654:	d105      	bne.n	8005662 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b00      	cmp	r3, #0
 8005660:	d005      	beq.n	800566e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005666:	f043 0208 	orr.w	r2, r3, #8
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005672:	2b00      	cmp	r3, #0
 8005674:	f000 81ed 	beq.w	8005a52 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800567c:	f003 0320 	and.w	r3, r3, #32
 8005680:	2b00      	cmp	r3, #0
 8005682:	d008      	beq.n	8005696 <HAL_UART_IRQHandler+0x14e>
 8005684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005688:	f003 0320 	and.w	r3, r3, #32
 800568c:	2b00      	cmp	r3, #0
 800568e:	d002      	beq.n	8005696 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fb5e 	bl	8005d52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a0:	2b40      	cmp	r3, #64	; 0x40
 80056a2:	bf0c      	ite	eq
 80056a4:	2301      	moveq	r3, #1
 80056a6:	2300      	movne	r3, #0
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b2:	f003 0308 	and.w	r3, r3, #8
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d103      	bne.n	80056c2 <HAL_UART_IRQHandler+0x17a>
 80056ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d04f      	beq.n	8005762 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 fa66 	bl	8005b94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d2:	2b40      	cmp	r3, #64	; 0x40
 80056d4:	d141      	bne.n	800575a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3314      	adds	r3, #20
 80056dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056e4:	e853 3f00 	ldrex	r3, [r3]
 80056e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80056ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3314      	adds	r3, #20
 80056fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005702:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005706:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800570e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005712:	e841 2300 	strex	r3, r2, [r1]
 8005716:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800571a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1d9      	bne.n	80056d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005726:	2b00      	cmp	r3, #0
 8005728:	d013      	beq.n	8005752 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572e:	4a7d      	ldr	r2, [pc, #500]	; (8005924 <HAL_UART_IRQHandler+0x3dc>)
 8005730:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005736:	4618      	mov	r0, r3
 8005738:	f7fb fdf3 	bl	8001322 <HAL_DMA_Abort_IT>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d016      	beq.n	8005770 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800574c:	4610      	mov	r0, r2
 800574e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005750:	e00e      	b.n	8005770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f99a 	bl	8005a8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005758:	e00a      	b.n	8005770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f996 	bl	8005a8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005760:	e006      	b.n	8005770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f992 	bl	8005a8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800576e:	e170      	b.n	8005a52 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005770:	bf00      	nop
    return;
 8005772:	e16e      	b.n	8005a52 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005778:	2b01      	cmp	r3, #1
 800577a:	f040 814a 	bne.w	8005a12 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800577e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005782:	f003 0310 	and.w	r3, r3, #16
 8005786:	2b00      	cmp	r3, #0
 8005788:	f000 8143 	beq.w	8005a12 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800578c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005790:	f003 0310 	and.w	r3, r3, #16
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 813c 	beq.w	8005a12 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800579a:	2300      	movs	r3, #0
 800579c:	60bb      	str	r3, [r7, #8]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	60bb      	str	r3, [r7, #8]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	60bb      	str	r3, [r7, #8]
 80057ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ba:	2b40      	cmp	r3, #64	; 0x40
 80057bc:	f040 80b4 	bne.w	8005928 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 8140 	beq.w	8005a56 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057de:	429a      	cmp	r2, r3
 80057e0:	f080 8139 	bcs.w	8005a56 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f0:	69db      	ldr	r3, [r3, #28]
 80057f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057f6:	f000 8088 	beq.w	800590a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	330c      	adds	r3, #12
 8005800:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005804:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005808:	e853 3f00 	ldrex	r3, [r3]
 800580c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005810:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005818:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	330c      	adds	r3, #12
 8005822:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005826:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800582a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005832:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005836:	e841 2300 	strex	r3, r2, [r1]
 800583a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800583e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1d9      	bne.n	80057fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3314      	adds	r3, #20
 800584c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005850:	e853 3f00 	ldrex	r3, [r3]
 8005854:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005856:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005858:	f023 0301 	bic.w	r3, r3, #1
 800585c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	3314      	adds	r3, #20
 8005866:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800586a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800586e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005870:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005872:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005876:	e841 2300 	strex	r3, r2, [r1]
 800587a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800587c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1e1      	bne.n	8005846 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	3314      	adds	r3, #20
 8005888:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800588c:	e853 3f00 	ldrex	r3, [r3]
 8005890:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005894:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005898:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	3314      	adds	r3, #20
 80058a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80058a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80058a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80058ae:	e841 2300 	strex	r3, r2, [r1]
 80058b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80058b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1e3      	bne.n	8005882 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2220      	movs	r2, #32
 80058be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	330c      	adds	r3, #12
 80058ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058d2:	e853 3f00 	ldrex	r3, [r3]
 80058d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058da:	f023 0310 	bic.w	r3, r3, #16
 80058de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	330c      	adds	r3, #12
 80058e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80058ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80058ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058f4:	e841 2300 	strex	r3, r2, [r1]
 80058f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1e3      	bne.n	80058c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005904:	4618      	mov	r0, r3
 8005906:	f7fb fc9c 	bl	8001242 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005912:	b29b      	uxth	r3, r3
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	b29b      	uxth	r3, r3
 8005918:	4619      	mov	r1, r3
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f8c0 	bl	8005aa0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005920:	e099      	b.n	8005a56 <HAL_UART_IRQHandler+0x50e>
 8005922:	bf00      	nop
 8005924:	08005c5b 	.word	0x08005c5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005930:	b29b      	uxth	r3, r3
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800593c:	b29b      	uxth	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	f000 808b 	beq.w	8005a5a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005944:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 8086 	beq.w	8005a5a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	330c      	adds	r3, #12
 8005954:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005958:	e853 3f00 	ldrex	r3, [r3]
 800595c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800595e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005960:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005964:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	330c      	adds	r3, #12
 800596e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005972:	647a      	str	r2, [r7, #68]	; 0x44
 8005974:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005976:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005978:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800597a:	e841 2300 	strex	r3, r2, [r1]
 800597e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1e3      	bne.n	800594e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	3314      	adds	r3, #20
 800598c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005990:	e853 3f00 	ldrex	r3, [r3]
 8005994:	623b      	str	r3, [r7, #32]
   return(result);
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	f023 0301 	bic.w	r3, r3, #1
 800599c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	3314      	adds	r3, #20
 80059a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80059aa:	633a      	str	r2, [r7, #48]	; 0x30
 80059ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059b2:	e841 2300 	strex	r3, r2, [r1]
 80059b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1e3      	bne.n	8005986 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2220      	movs	r2, #32
 80059c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	330c      	adds	r3, #12
 80059d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	e853 3f00 	ldrex	r3, [r3]
 80059da:	60fb      	str	r3, [r7, #12]
   return(result);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 0310 	bic.w	r3, r3, #16
 80059e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	330c      	adds	r3, #12
 80059ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80059f0:	61fa      	str	r2, [r7, #28]
 80059f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f4:	69b9      	ldr	r1, [r7, #24]
 80059f6:	69fa      	ldr	r2, [r7, #28]
 80059f8:	e841 2300 	strex	r3, r2, [r1]
 80059fc:	617b      	str	r3, [r7, #20]
   return(result);
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1e3      	bne.n	80059cc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a08:	4619      	mov	r1, r3
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f848 	bl	8005aa0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a10:	e023      	b.n	8005a5a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d009      	beq.n	8005a32 <HAL_UART_IRQHandler+0x4ea>
 8005a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f929 	bl	8005c82 <UART_Transmit_IT>
    return;
 8005a30:	e014      	b.n	8005a5c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00e      	beq.n	8005a5c <HAL_UART_IRQHandler+0x514>
 8005a3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d008      	beq.n	8005a5c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f969 	bl	8005d22 <UART_EndTransmit_IT>
    return;
 8005a50:	e004      	b.n	8005a5c <HAL_UART_IRQHandler+0x514>
    return;
 8005a52:	bf00      	nop
 8005a54:	e002      	b.n	8005a5c <HAL_UART_IRQHandler+0x514>
      return;
 8005a56:	bf00      	nop
 8005a58:	e000      	b.n	8005a5c <HAL_UART_IRQHandler+0x514>
      return;
 8005a5a:	bf00      	nop
  }
}
 8005a5c:	37e8      	adds	r7, #232	; 0xe8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop

08005a64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b090      	sub	sp, #64	; 0x40
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	603b      	str	r3, [r7, #0]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ac8:	e050      	b.n	8005b6c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad0:	d04c      	beq.n	8005b6c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d007      	beq.n	8005ae8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ad8:	f7fb fa72 	bl	8000fc0 <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d241      	bcs.n	8005b6c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	330c      	adds	r3, #12
 8005aee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af2:	e853 3f00 	ldrex	r3, [r3]
 8005af6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005afe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	330c      	adds	r3, #12
 8005b06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b08:	637a      	str	r2, [r7, #52]	; 0x34
 8005b0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b10:	e841 2300 	strex	r3, r2, [r1]
 8005b14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1e5      	bne.n	8005ae8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	3314      	adds	r3, #20
 8005b22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	e853 3f00 	ldrex	r3, [r3]
 8005b2a:	613b      	str	r3, [r7, #16]
   return(result);
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	f023 0301 	bic.w	r3, r3, #1
 8005b32:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3314      	adds	r3, #20
 8005b3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b3c:	623a      	str	r2, [r7, #32]
 8005b3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b40:	69f9      	ldr	r1, [r7, #28]
 8005b42:	6a3a      	ldr	r2, [r7, #32]
 8005b44:	e841 2300 	strex	r3, r2, [r1]
 8005b48:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e5      	bne.n	8005b1c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2220      	movs	r2, #32
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e00f      	b.n	8005b8c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	4013      	ands	r3, r2
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	bf0c      	ite	eq
 8005b7c:	2301      	moveq	r3, #1
 8005b7e:	2300      	movne	r3, #0
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	461a      	mov	r2, r3
 8005b84:	79fb      	ldrb	r3, [r7, #7]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d09f      	beq.n	8005aca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3740      	adds	r7, #64	; 0x40
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b095      	sub	sp, #84	; 0x54
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	330c      	adds	r3, #12
 8005ba2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ba6:	e853 3f00 	ldrex	r3, [r3]
 8005baa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	330c      	adds	r3, #12
 8005bba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bbc:	643a      	str	r2, [r7, #64]	; 0x40
 8005bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bc4:	e841 2300 	strex	r3, r2, [r1]
 8005bc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1e5      	bne.n	8005b9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	3314      	adds	r3, #20
 8005bd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd8:	6a3b      	ldr	r3, [r7, #32]
 8005bda:	e853 3f00 	ldrex	r3, [r3]
 8005bde:	61fb      	str	r3, [r7, #28]
   return(result);
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	f023 0301 	bic.w	r3, r3, #1
 8005be6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	3314      	adds	r3, #20
 8005bee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bf0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bf2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bf8:	e841 2300 	strex	r3, r2, [r1]
 8005bfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1e5      	bne.n	8005bd0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d119      	bne.n	8005c40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	330c      	adds	r3, #12
 8005c12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	e853 3f00 	ldrex	r3, [r3]
 8005c1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f023 0310 	bic.w	r3, r3, #16
 8005c22:	647b      	str	r3, [r7, #68]	; 0x44
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	330c      	adds	r3, #12
 8005c2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c2c:	61ba      	str	r2, [r7, #24]
 8005c2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c30:	6979      	ldr	r1, [r7, #20]
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	e841 2300 	strex	r3, r2, [r1]
 8005c38:	613b      	str	r3, [r7, #16]
   return(result);
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1e5      	bne.n	8005c0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2220      	movs	r2, #32
 8005c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005c4e:	bf00      	nop
 8005c50:	3754      	adds	r7, #84	; 0x54
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b084      	sub	sp, #16
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f7ff ff09 	bl	8005a8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c7a:	bf00      	nop
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b085      	sub	sp, #20
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b21      	cmp	r3, #33	; 0x21
 8005c94:	d13e      	bne.n	8005d14 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c9e:	d114      	bne.n	8005cca <UART_Transmit_IT+0x48>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d110      	bne.n	8005cca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	881b      	ldrh	r3, [r3, #0]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cbc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	1c9a      	adds	r2, r3, #2
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	621a      	str	r2, [r3, #32]
 8005cc8:	e008      	b.n	8005cdc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	1c59      	adds	r1, r3, #1
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	6211      	str	r1, [r2, #32]
 8005cd4:	781a      	ldrb	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	4619      	mov	r1, r3
 8005cea:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10f      	bne.n	8005d10 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cfe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68da      	ldr	r2, [r3, #12]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d0e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d10:	2300      	movs	r3, #0
 8005d12:	e000      	b.n	8005d16 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d14:	2302      	movs	r3, #2
  }
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b082      	sub	sp, #8
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68da      	ldr	r2, [r3, #12]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2220      	movs	r2, #32
 8005d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f7ff fe8e 	bl	8005a64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3708      	adds	r7, #8
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b08c      	sub	sp, #48	; 0x30
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b22      	cmp	r3, #34	; 0x22
 8005d64:	f040 80ab 	bne.w	8005ebe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d70:	d117      	bne.n	8005da2 <UART_Receive_IT+0x50>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d113      	bne.n	8005da2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d82:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9a:	1c9a      	adds	r2, r3, #2
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	629a      	str	r2, [r3, #40]	; 0x28
 8005da0:	e026      	b.n	8005df0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005da8:	2300      	movs	r3, #0
 8005daa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005db4:	d007      	beq.n	8005dc6 <UART_Receive_IT+0x74>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10a      	bne.n	8005dd4 <UART_Receive_IT+0x82>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d106      	bne.n	8005dd4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	b2da      	uxtb	r2, r3
 8005dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd0:	701a      	strb	r2, [r3, #0]
 8005dd2:	e008      	b.n	8005de6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005de0:	b2da      	uxtb	r2, r3
 8005de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dea:	1c5a      	adds	r2, r3, #1
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	3b01      	subs	r3, #1
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d15a      	bne.n	8005eba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 0220 	bic.w	r2, r2, #32
 8005e12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68da      	ldr	r2, [r3, #12]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	695a      	ldr	r2, [r3, #20]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f022 0201 	bic.w	r2, r2, #1
 8005e32:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2220      	movs	r2, #32
 8005e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d135      	bne.n	8005eb0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	330c      	adds	r3, #12
 8005e50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	e853 3f00 	ldrex	r3, [r3]
 8005e58:	613b      	str	r3, [r7, #16]
   return(result);
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f023 0310 	bic.w	r3, r3, #16
 8005e60:	627b      	str	r3, [r7, #36]	; 0x24
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	330c      	adds	r3, #12
 8005e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e6a:	623a      	str	r2, [r7, #32]
 8005e6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6e:	69f9      	ldr	r1, [r7, #28]
 8005e70:	6a3a      	ldr	r2, [r7, #32]
 8005e72:	e841 2300 	strex	r3, r2, [r1]
 8005e76:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1e5      	bne.n	8005e4a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0310 	and.w	r3, r3, #16
 8005e88:	2b10      	cmp	r3, #16
 8005e8a:	d10a      	bne.n	8005ea2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	60fb      	str	r3, [r7, #12]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7ff fdf9 	bl	8005aa0 <HAL_UARTEx_RxEventCallback>
 8005eae:	e002      	b.n	8005eb6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f7ff fde1 	bl	8005a78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	e002      	b.n	8005ec0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	e000      	b.n	8005ec0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005ebe:	2302      	movs	r3, #2
  }
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3730      	adds	r7, #48	; 0x30
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ec8:	b084      	sub	sp, #16
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b084      	sub	sp, #16
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
 8005ed2:	f107 001c 	add.w	r0, r7, #28
 8005ed6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d122      	bne.n	8005f26 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d105      	bne.n	8005f1a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f001 fbee 	bl	80076fc <USB_CoreReset>
 8005f20:	4603      	mov	r3, r0
 8005f22:	73fb      	strb	r3, [r7, #15]
 8005f24:	e01a      	b.n	8005f5c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f001 fbe2 	bl	80076fc <USB_CoreReset>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d106      	bne.n	8005f50 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	639a      	str	r2, [r3, #56]	; 0x38
 8005f4e:	e005      	b.n	8005f5c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d10b      	bne.n	8005f7a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f043 0206 	orr.w	r2, r3, #6
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f043 0220 	orr.w	r2, r3, #32
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f86:	b004      	add	sp, #16
 8005f88:	4770      	bx	lr
	...

08005f8c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b087      	sub	sp, #28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	4613      	mov	r3, r2
 8005f98:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005f9a:	79fb      	ldrb	r3, [r7, #7]
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d165      	bne.n	800606c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	4a41      	ldr	r2, [pc, #260]	; (80060a8 <USB_SetTurnaroundTime+0x11c>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d906      	bls.n	8005fb6 <USB_SetTurnaroundTime+0x2a>
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	4a40      	ldr	r2, [pc, #256]	; (80060ac <USB_SetTurnaroundTime+0x120>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d202      	bcs.n	8005fb6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005fb0:	230f      	movs	r3, #15
 8005fb2:	617b      	str	r3, [r7, #20]
 8005fb4:	e062      	b.n	800607c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	4a3c      	ldr	r2, [pc, #240]	; (80060ac <USB_SetTurnaroundTime+0x120>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d306      	bcc.n	8005fcc <USB_SetTurnaroundTime+0x40>
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	4a3b      	ldr	r2, [pc, #236]	; (80060b0 <USB_SetTurnaroundTime+0x124>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d202      	bcs.n	8005fcc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005fc6:	230e      	movs	r3, #14
 8005fc8:	617b      	str	r3, [r7, #20]
 8005fca:	e057      	b.n	800607c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	4a38      	ldr	r2, [pc, #224]	; (80060b0 <USB_SetTurnaroundTime+0x124>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d306      	bcc.n	8005fe2 <USB_SetTurnaroundTime+0x56>
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	4a37      	ldr	r2, [pc, #220]	; (80060b4 <USB_SetTurnaroundTime+0x128>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d202      	bcs.n	8005fe2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005fdc:	230d      	movs	r3, #13
 8005fde:	617b      	str	r3, [r7, #20]
 8005fe0:	e04c      	b.n	800607c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	4a33      	ldr	r2, [pc, #204]	; (80060b4 <USB_SetTurnaroundTime+0x128>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d306      	bcc.n	8005ff8 <USB_SetTurnaroundTime+0x6c>
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	4a32      	ldr	r2, [pc, #200]	; (80060b8 <USB_SetTurnaroundTime+0x12c>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d802      	bhi.n	8005ff8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005ff2:	230c      	movs	r3, #12
 8005ff4:	617b      	str	r3, [r7, #20]
 8005ff6:	e041      	b.n	800607c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	4a2f      	ldr	r2, [pc, #188]	; (80060b8 <USB_SetTurnaroundTime+0x12c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d906      	bls.n	800600e <USB_SetTurnaroundTime+0x82>
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	4a2e      	ldr	r2, [pc, #184]	; (80060bc <USB_SetTurnaroundTime+0x130>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d802      	bhi.n	800600e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006008:	230b      	movs	r3, #11
 800600a:	617b      	str	r3, [r7, #20]
 800600c:	e036      	b.n	800607c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	4a2a      	ldr	r2, [pc, #168]	; (80060bc <USB_SetTurnaroundTime+0x130>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d906      	bls.n	8006024 <USB_SetTurnaroundTime+0x98>
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	4a29      	ldr	r2, [pc, #164]	; (80060c0 <USB_SetTurnaroundTime+0x134>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d802      	bhi.n	8006024 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800601e:	230a      	movs	r3, #10
 8006020:	617b      	str	r3, [r7, #20]
 8006022:	e02b      	b.n	800607c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	4a26      	ldr	r2, [pc, #152]	; (80060c0 <USB_SetTurnaroundTime+0x134>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d906      	bls.n	800603a <USB_SetTurnaroundTime+0xae>
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	4a25      	ldr	r2, [pc, #148]	; (80060c4 <USB_SetTurnaroundTime+0x138>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d202      	bcs.n	800603a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006034:	2309      	movs	r3, #9
 8006036:	617b      	str	r3, [r7, #20]
 8006038:	e020      	b.n	800607c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	4a21      	ldr	r2, [pc, #132]	; (80060c4 <USB_SetTurnaroundTime+0x138>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d306      	bcc.n	8006050 <USB_SetTurnaroundTime+0xc4>
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	4a20      	ldr	r2, [pc, #128]	; (80060c8 <USB_SetTurnaroundTime+0x13c>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d802      	bhi.n	8006050 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800604a:	2308      	movs	r3, #8
 800604c:	617b      	str	r3, [r7, #20]
 800604e:	e015      	b.n	800607c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	4a1d      	ldr	r2, [pc, #116]	; (80060c8 <USB_SetTurnaroundTime+0x13c>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d906      	bls.n	8006066 <USB_SetTurnaroundTime+0xda>
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	4a1c      	ldr	r2, [pc, #112]	; (80060cc <USB_SetTurnaroundTime+0x140>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d202      	bcs.n	8006066 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006060:	2307      	movs	r3, #7
 8006062:	617b      	str	r3, [r7, #20]
 8006064:	e00a      	b.n	800607c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006066:	2306      	movs	r3, #6
 8006068:	617b      	str	r3, [r7, #20]
 800606a:	e007      	b.n	800607c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800606c:	79fb      	ldrb	r3, [r7, #7]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d102      	bne.n	8006078 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006072:	2309      	movs	r3, #9
 8006074:	617b      	str	r3, [r7, #20]
 8006076:	e001      	b.n	800607c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006078:	2309      	movs	r3, #9
 800607a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	68da      	ldr	r2, [r3, #12]
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	029b      	lsls	r3, r3, #10
 8006090:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006094:	431a      	orrs	r2, r3
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	371c      	adds	r7, #28
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr
 80060a8:	00d8acbf 	.word	0x00d8acbf
 80060ac:	00e4e1c0 	.word	0x00e4e1c0
 80060b0:	00f42400 	.word	0x00f42400
 80060b4:	01067380 	.word	0x01067380
 80060b8:	011a499f 	.word	0x011a499f
 80060bc:	01312cff 	.word	0x01312cff
 80060c0:	014ca43f 	.word	0x014ca43f
 80060c4:	016e3600 	.word	0x016e3600
 80060c8:	01a6ab1f 	.word	0x01a6ab1f
 80060cc:	01e84800 	.word	0x01e84800

080060d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f043 0201 	orr.w	r2, r3, #1
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b083      	sub	sp, #12
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f023 0201 	bic.w	r2, r3, #1
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	460b      	mov	r3, r1
 800611e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006120:	2300      	movs	r3, #0
 8006122:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006130:	78fb      	ldrb	r3, [r7, #3]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d115      	bne.n	8006162 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006142:	2001      	movs	r0, #1
 8006144:	f7fa ff48 	bl	8000fd8 <HAL_Delay>
      ms++;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	3301      	adds	r3, #1
 800614c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f001 fa45 	bl	80075de <USB_GetMode>
 8006154:	4603      	mov	r3, r0
 8006156:	2b01      	cmp	r3, #1
 8006158:	d01e      	beq.n	8006198 <USB_SetCurrentMode+0x84>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2b31      	cmp	r3, #49	; 0x31
 800615e:	d9f0      	bls.n	8006142 <USB_SetCurrentMode+0x2e>
 8006160:	e01a      	b.n	8006198 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006162:	78fb      	ldrb	r3, [r7, #3]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d115      	bne.n	8006194 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006174:	2001      	movs	r0, #1
 8006176:	f7fa ff2f 	bl	8000fd8 <HAL_Delay>
      ms++;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	3301      	adds	r3, #1
 800617e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f001 fa2c 	bl	80075de <USB_GetMode>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d005      	beq.n	8006198 <USB_SetCurrentMode+0x84>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2b31      	cmp	r3, #49	; 0x31
 8006190:	d9f0      	bls.n	8006174 <USB_SetCurrentMode+0x60>
 8006192:	e001      	b.n	8006198 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e005      	b.n	80061a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2b32      	cmp	r3, #50	; 0x32
 800619c:	d101      	bne.n	80061a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e000      	b.n	80061a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061ac:	b084      	sub	sp, #16
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b086      	sub	sp, #24
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80061ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80061c6:	2300      	movs	r3, #0
 80061c8:	613b      	str	r3, [r7, #16]
 80061ca:	e009      	b.n	80061e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	3340      	adds	r3, #64	; 0x40
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4413      	add	r3, r2
 80061d6:	2200      	movs	r2, #0
 80061d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	3301      	adds	r3, #1
 80061de:	613b      	str	r3, [r7, #16]
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	2b0e      	cmp	r3, #14
 80061e4:	d9f2      	bls.n	80061cc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80061e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d11c      	bne.n	8006226 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061fa:	f043 0302 	orr.w	r3, r3, #2
 80061fe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006204:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006210:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	639a      	str	r2, [r3, #56]	; 0x38
 8006224:	e00b      	b.n	800623e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006236:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006244:	461a      	mov	r2, r3
 8006246:	2300      	movs	r3, #0
 8006248:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006250:	4619      	mov	r1, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006258:	461a      	mov	r2, r3
 800625a:	680b      	ldr	r3, [r1, #0]
 800625c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800625e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006260:	2b01      	cmp	r3, #1
 8006262:	d10c      	bne.n	800627e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006266:	2b00      	cmp	r3, #0
 8006268:	d104      	bne.n	8006274 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800626a:	2100      	movs	r1, #0
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 f965 	bl	800653c <USB_SetDevSpeed>
 8006272:	e008      	b.n	8006286 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006274:	2101      	movs	r1, #1
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f960 	bl	800653c <USB_SetDevSpeed>
 800627c:	e003      	b.n	8006286 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800627e:	2103      	movs	r1, #3
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 f95b 	bl	800653c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006286:	2110      	movs	r1, #16
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 f8f3 	bl	8006474 <USB_FlushTxFifo>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d001      	beq.n	8006298 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f91f 	bl	80064dc <USB_FlushRxFifo>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ae:	461a      	mov	r2, r3
 80062b0:	2300      	movs	r3, #0
 80062b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ba:	461a      	mov	r2, r3
 80062bc:	2300      	movs	r3, #0
 80062be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c6:	461a      	mov	r2, r3
 80062c8:	2300      	movs	r3, #0
 80062ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062cc:	2300      	movs	r3, #0
 80062ce:	613b      	str	r3, [r7, #16]
 80062d0:	e043      	b.n	800635a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062e8:	d118      	bne.n	800631c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10a      	bne.n	8006306 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	015a      	lsls	r2, r3, #5
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062fc:	461a      	mov	r2, r3
 80062fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006302:	6013      	str	r3, [r2, #0]
 8006304:	e013      	b.n	800632e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	4413      	add	r3, r2
 800630e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006312:	461a      	mov	r2, r3
 8006314:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006318:	6013      	str	r3, [r2, #0]
 800631a:	e008      	b.n	800632e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	4413      	add	r3, r2
 8006324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006328:	461a      	mov	r2, r3
 800632a:	2300      	movs	r3, #0
 800632c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	015a      	lsls	r2, r3, #5
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	4413      	add	r3, r2
 8006336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800633a:	461a      	mov	r2, r3
 800633c:	2300      	movs	r3, #0
 800633e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4413      	add	r3, r2
 8006348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800634c:	461a      	mov	r2, r3
 800634e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006352:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	3301      	adds	r3, #1
 8006358:	613b      	str	r3, [r7, #16]
 800635a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	429a      	cmp	r2, r3
 8006360:	d3b7      	bcc.n	80062d2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006362:	2300      	movs	r3, #0
 8006364:	613b      	str	r3, [r7, #16]
 8006366:	e043      	b.n	80063f0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800637a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800637e:	d118      	bne.n	80063b2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10a      	bne.n	800639c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	015a      	lsls	r2, r3, #5
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	4413      	add	r3, r2
 800638e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006392:	461a      	mov	r2, r3
 8006394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006398:	6013      	str	r3, [r2, #0]
 800639a:	e013      	b.n	80063c4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	015a      	lsls	r2, r3, #5
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a8:	461a      	mov	r2, r3
 80063aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80063ae:	6013      	str	r3, [r2, #0]
 80063b0:	e008      	b.n	80063c4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	015a      	lsls	r2, r3, #5
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063be:	461a      	mov	r2, r3
 80063c0:	2300      	movs	r3, #0
 80063c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	015a      	lsls	r2, r3, #5
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	4413      	add	r3, r2
 80063cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d0:	461a      	mov	r2, r3
 80063d2:	2300      	movs	r3, #0
 80063d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e2:	461a      	mov	r2, r3
 80063e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80063e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	3301      	adds	r3, #1
 80063ee:	613b      	str	r3, [r7, #16]
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d3b7      	bcc.n	8006368 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006406:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800640a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006418:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800641a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641c:	2b00      	cmp	r3, #0
 800641e:	d105      	bne.n	800642c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	f043 0210 	orr.w	r2, r3, #16
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	699a      	ldr	r2, [r3, #24]
 8006430:	4b0f      	ldr	r3, [pc, #60]	; (8006470 <USB_DevInit+0x2c4>)
 8006432:	4313      	orrs	r3, r2
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800643a:	2b00      	cmp	r3, #0
 800643c:	d005      	beq.n	800644a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	f043 0208 	orr.w	r2, r3, #8
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800644a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800644c:	2b01      	cmp	r3, #1
 800644e:	d107      	bne.n	8006460 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	699b      	ldr	r3, [r3, #24]
 8006454:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006458:	f043 0304 	orr.w	r3, r3, #4
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006460:	7dfb      	ldrb	r3, [r7, #23]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3718      	adds	r7, #24
 8006466:	46bd      	mov	sp, r7
 8006468:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800646c:	b004      	add	sp, #16
 800646e:	4770      	bx	lr
 8006470:	803c3800 	.word	0x803c3800

08006474 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800647e:	2300      	movs	r3, #0
 8006480:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	3301      	adds	r3, #1
 8006486:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	4a13      	ldr	r2, [pc, #76]	; (80064d8 <USB_FlushTxFifo+0x64>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d901      	bls.n	8006494 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e01b      	b.n	80064cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	2b00      	cmp	r3, #0
 800649a:	daf2      	bge.n	8006482 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800649c:	2300      	movs	r3, #0
 800649e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	019b      	lsls	r3, r3, #6
 80064a4:	f043 0220 	orr.w	r2, r3, #32
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	3301      	adds	r3, #1
 80064b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	4a08      	ldr	r2, [pc, #32]	; (80064d8 <USB_FlushTxFifo+0x64>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d901      	bls.n	80064be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e006      	b.n	80064cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	f003 0320 	and.w	r3, r3, #32
 80064c6:	2b20      	cmp	r3, #32
 80064c8:	d0f0      	beq.n	80064ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr
 80064d8:	00030d40 	.word	0x00030d40

080064dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064e4:	2300      	movs	r3, #0
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	3301      	adds	r3, #1
 80064ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	4a11      	ldr	r2, [pc, #68]	; (8006538 <USB_FlushRxFifo+0x5c>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d901      	bls.n	80064fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e018      	b.n	800652c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	daf2      	bge.n	80064e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006502:	2300      	movs	r3, #0
 8006504:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2210      	movs	r2, #16
 800650a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	3301      	adds	r3, #1
 8006510:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	4a08      	ldr	r2, [pc, #32]	; (8006538 <USB_FlushRxFifo+0x5c>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d901      	bls.n	800651e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e006      	b.n	800652c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	f003 0310 	and.w	r3, r3, #16
 8006526:	2b10      	cmp	r3, #16
 8006528:	d0f0      	beq.n	800650c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3714      	adds	r7, #20
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr
 8006538:	00030d40 	.word	0x00030d40

0800653c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	460b      	mov	r3, r1
 8006546:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	78fb      	ldrb	r3, [r7, #3]
 8006556:	68f9      	ldr	r1, [r7, #12]
 8006558:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800655c:	4313      	orrs	r3, r2
 800655e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3714      	adds	r7, #20
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800656e:	b480      	push	{r7}
 8006570:	b087      	sub	sp, #28
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f003 0306 	and.w	r3, r3, #6
 8006586:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d102      	bne.n	8006594 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800658e:	2300      	movs	r3, #0
 8006590:	75fb      	strb	r3, [r7, #23]
 8006592:	e00a      	b.n	80065aa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2b02      	cmp	r3, #2
 8006598:	d002      	beq.n	80065a0 <USB_GetDevSpeed+0x32>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2b06      	cmp	r3, #6
 800659e:	d102      	bne.n	80065a6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80065a0:	2302      	movs	r3, #2
 80065a2:	75fb      	strb	r3, [r7, #23]
 80065a4:	e001      	b.n	80065aa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80065a6:	230f      	movs	r3, #15
 80065a8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80065aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	371c      	adds	r7, #28
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	785b      	ldrb	r3, [r3, #1]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d13a      	bne.n	800664a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065da:	69da      	ldr	r2, [r3, #28]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	f003 030f 	and.w	r3, r3, #15
 80065e4:	2101      	movs	r1, #1
 80065e6:	fa01 f303 	lsl.w	r3, r1, r3
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	68f9      	ldr	r1, [r7, #12]
 80065ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065f2:	4313      	orrs	r3, r2
 80065f4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	015a      	lsls	r2, r3, #5
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	4413      	add	r3, r2
 80065fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d155      	bne.n	80066b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	015a      	lsls	r2, r3, #5
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	4413      	add	r3, r2
 8006614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	791b      	ldrb	r3, [r3, #4]
 8006626:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006628:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	059b      	lsls	r3, r3, #22
 800662e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006630:	4313      	orrs	r3, r2
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	0151      	lsls	r1, r2, #5
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	440a      	add	r2, r1
 800663a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800663e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006646:	6013      	str	r3, [r2, #0]
 8006648:	e036      	b.n	80066b8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006650:	69da      	ldr	r2, [r3, #28]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	f003 030f 	and.w	r3, r3, #15
 800665a:	2101      	movs	r1, #1
 800665c:	fa01 f303 	lsl.w	r3, r1, r3
 8006660:	041b      	lsls	r3, r3, #16
 8006662:	68f9      	ldr	r1, [r7, #12]
 8006664:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006668:	4313      	orrs	r3, r2
 800666a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d11a      	bne.n	80066b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	4413      	add	r3, r2
 800668a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	791b      	ldrb	r3, [r3, #4]
 800669c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800669e:	430b      	orrs	r3, r1
 80066a0:	4313      	orrs	r3, r2
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	0151      	lsls	r1, r2, #5
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	440a      	add	r2, r1
 80066aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066b6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
	...

080066c8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	785b      	ldrb	r3, [r3, #1]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d161      	bne.n	80067a8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066fa:	d11f      	bne.n	800673c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4413      	add	r3, r2
 8006704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	0151      	lsls	r1, r2, #5
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	440a      	add	r2, r1
 8006712:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006716:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800671a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	015a      	lsls	r2, r3, #5
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	4413      	add	r3, r2
 8006724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68ba      	ldr	r2, [r7, #8]
 800672c:	0151      	lsls	r1, r2, #5
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	440a      	add	r2, r1
 8006732:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006736:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800673a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006742:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	f003 030f 	and.w	r3, r3, #15
 800674c:	2101      	movs	r1, #1
 800674e:	fa01 f303 	lsl.w	r3, r1, r3
 8006752:	b29b      	uxth	r3, r3
 8006754:	43db      	mvns	r3, r3
 8006756:	68f9      	ldr	r1, [r7, #12]
 8006758:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800675c:	4013      	ands	r3, r2
 800675e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006766:	69da      	ldr	r2, [r3, #28]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	f003 030f 	and.w	r3, r3, #15
 8006770:	2101      	movs	r1, #1
 8006772:	fa01 f303 	lsl.w	r3, r1, r3
 8006776:	b29b      	uxth	r3, r3
 8006778:	43db      	mvns	r3, r3
 800677a:	68f9      	ldr	r1, [r7, #12]
 800677c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006780:	4013      	ands	r3, r2
 8006782:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	015a      	lsls	r2, r3, #5
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	4413      	add	r3, r2
 800678c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	0159      	lsls	r1, r3, #5
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	440b      	add	r3, r1
 800679a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800679e:	4619      	mov	r1, r3
 80067a0:	4b35      	ldr	r3, [pc, #212]	; (8006878 <USB_DeactivateEndpoint+0x1b0>)
 80067a2:	4013      	ands	r3, r2
 80067a4:	600b      	str	r3, [r1, #0]
 80067a6:	e060      	b.n	800686a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067be:	d11f      	bne.n	8006800 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	015a      	lsls	r2, r3, #5
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	0151      	lsls	r1, r2, #5
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	440a      	add	r2, r1
 80067d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80067de:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	015a      	lsls	r2, r3, #5
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	4413      	add	r3, r2
 80067e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	0151      	lsls	r1, r2, #5
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	440a      	add	r2, r1
 80067f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006806:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	f003 030f 	and.w	r3, r3, #15
 8006810:	2101      	movs	r1, #1
 8006812:	fa01 f303 	lsl.w	r3, r1, r3
 8006816:	041b      	lsls	r3, r3, #16
 8006818:	43db      	mvns	r3, r3
 800681a:	68f9      	ldr	r1, [r7, #12]
 800681c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006820:	4013      	ands	r3, r2
 8006822:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800682a:	69da      	ldr	r2, [r3, #28]
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	f003 030f 	and.w	r3, r3, #15
 8006834:	2101      	movs	r1, #1
 8006836:	fa01 f303 	lsl.w	r3, r1, r3
 800683a:	041b      	lsls	r3, r3, #16
 800683c:	43db      	mvns	r3, r3
 800683e:	68f9      	ldr	r1, [r7, #12]
 8006840:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006844:	4013      	ands	r3, r2
 8006846:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	0159      	lsls	r1, r3, #5
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	440b      	add	r3, r1
 800685e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006862:	4619      	mov	r1, r3
 8006864:	4b05      	ldr	r3, [pc, #20]	; (800687c <USB_DeactivateEndpoint+0x1b4>)
 8006866:	4013      	ands	r3, r2
 8006868:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3714      	adds	r7, #20
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr
 8006878:	ec337800 	.word	0xec337800
 800687c:	eff37800 	.word	0xeff37800

08006880 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b08a      	sub	sp, #40	; 0x28
 8006884:	af02      	add	r7, sp, #8
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	4613      	mov	r3, r2
 800688c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	785b      	ldrb	r3, [r3, #1]
 800689c:	2b01      	cmp	r3, #1
 800689e:	f040 815c 	bne.w	8006b5a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d132      	bne.n	8006910 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	015a      	lsls	r2, r3, #5
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	4413      	add	r3, r2
 80068b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	69ba      	ldr	r2, [r7, #24]
 80068ba:	0151      	lsls	r1, r2, #5
 80068bc:	69fa      	ldr	r2, [r7, #28]
 80068be:	440a      	add	r2, r1
 80068c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80068c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80068cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	015a      	lsls	r2, r3, #5
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	4413      	add	r3, r2
 80068d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	69ba      	ldr	r2, [r7, #24]
 80068de:	0151      	lsls	r1, r2, #5
 80068e0:	69fa      	ldr	r2, [r7, #28]
 80068e2:	440a      	add	r2, r1
 80068e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	69ba      	ldr	r2, [r7, #24]
 80068fe:	0151      	lsls	r1, r2, #5
 8006900:	69fa      	ldr	r2, [r7, #28]
 8006902:	440a      	add	r2, r1
 8006904:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006908:	0cdb      	lsrs	r3, r3, #19
 800690a:	04db      	lsls	r3, r3, #19
 800690c:	6113      	str	r3, [r2, #16]
 800690e:	e074      	b.n	80069fa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	015a      	lsls	r2, r3, #5
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	4413      	add	r3, r2
 8006918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	69ba      	ldr	r2, [r7, #24]
 8006920:	0151      	lsls	r1, r2, #5
 8006922:	69fa      	ldr	r2, [r7, #28]
 8006924:	440a      	add	r2, r1
 8006926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800692a:	0cdb      	lsrs	r3, r3, #19
 800692c:	04db      	lsls	r3, r3, #19
 800692e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	015a      	lsls	r2, r3, #5
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	4413      	add	r3, r2
 8006938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	0151      	lsls	r1, r2, #5
 8006942:	69fa      	ldr	r2, [r7, #28]
 8006944:	440a      	add	r2, r1
 8006946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800694a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800694e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006952:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	015a      	lsls	r2, r3, #5
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	4413      	add	r3, r2
 800695c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006960:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	6999      	ldr	r1, [r3, #24]
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	440b      	add	r3, r1
 800696c:	1e59      	subs	r1, r3, #1
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	fbb1 f3f3 	udiv	r3, r1, r3
 8006976:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006978:	4b9d      	ldr	r3, [pc, #628]	; (8006bf0 <USB_EPStartXfer+0x370>)
 800697a:	400b      	ands	r3, r1
 800697c:	69b9      	ldr	r1, [r7, #24]
 800697e:	0148      	lsls	r0, r1, #5
 8006980:	69f9      	ldr	r1, [r7, #28]
 8006982:	4401      	add	r1, r0
 8006984:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006988:	4313      	orrs	r3, r2
 800698a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	015a      	lsls	r2, r3, #5
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	4413      	add	r3, r2
 8006994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006998:	691a      	ldr	r2, [r3, #16]
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069a2:	69b9      	ldr	r1, [r7, #24]
 80069a4:	0148      	lsls	r0, r1, #5
 80069a6:	69f9      	ldr	r1, [r7, #28]
 80069a8:	4401      	add	r1, r0
 80069aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80069ae:	4313      	orrs	r3, r2
 80069b0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	791b      	ldrb	r3, [r3, #4]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d11f      	bne.n	80069fa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	015a      	lsls	r2, r3, #5
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	4413      	add	r3, r2
 80069c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	69ba      	ldr	r2, [r7, #24]
 80069ca:	0151      	lsls	r1, r2, #5
 80069cc:	69fa      	ldr	r2, [r7, #28]
 80069ce:	440a      	add	r2, r1
 80069d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069d4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80069d8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	015a      	lsls	r2, r3, #5
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	69ba      	ldr	r2, [r7, #24]
 80069ea:	0151      	lsls	r1, r2, #5
 80069ec:	69fa      	ldr	r2, [r7, #28]
 80069ee:	440a      	add	r2, r1
 80069f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80069f8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80069fa:	79fb      	ldrb	r3, [r7, #7]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d14b      	bne.n	8006a98 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	695b      	ldr	r3, [r3, #20]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d009      	beq.n	8006a1c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a14:	461a      	mov	r2, r3
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	791b      	ldrb	r3, [r3, #4]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d128      	bne.n	8006a76 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d110      	bne.n	8006a56 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	015a      	lsls	r2, r3, #5
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	69ba      	ldr	r2, [r7, #24]
 8006a44:	0151      	lsls	r1, r2, #5
 8006a46:	69fa      	ldr	r2, [r7, #28]
 8006a48:	440a      	add	r2, r1
 8006a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a52:	6013      	str	r3, [r2, #0]
 8006a54:	e00f      	b.n	8006a76 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	015a      	lsls	r2, r3, #5
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	69ba      	ldr	r2, [r7, #24]
 8006a66:	0151      	lsls	r1, r2, #5
 8006a68:	69fa      	ldr	r2, [r7, #28]
 8006a6a:	440a      	add	r2, r1
 8006a6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a74:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	015a      	lsls	r2, r3, #5
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	69ba      	ldr	r2, [r7, #24]
 8006a86:	0151      	lsls	r1, r2, #5
 8006a88:	69fa      	ldr	r2, [r7, #28]
 8006a8a:	440a      	add	r2, r1
 8006a8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a94:	6013      	str	r3, [r2, #0]
 8006a96:	e133      	b.n	8006d00 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	015a      	lsls	r2, r3, #5
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	69ba      	ldr	r2, [r7, #24]
 8006aa8:	0151      	lsls	r1, r2, #5
 8006aaa:	69fa      	ldr	r2, [r7, #28]
 8006aac:	440a      	add	r2, r1
 8006aae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ab2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ab6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	791b      	ldrb	r3, [r3, #4]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d015      	beq.n	8006aec <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f000 811b 	beq.w	8006d00 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	f003 030f 	and.w	r3, r3, #15
 8006ada:	2101      	movs	r1, #1
 8006adc:	fa01 f303 	lsl.w	r3, r1, r3
 8006ae0:	69f9      	ldr	r1, [r7, #28]
 8006ae2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	634b      	str	r3, [r1, #52]	; 0x34
 8006aea:	e109      	b.n	8006d00 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d110      	bne.n	8006b1e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	0151      	lsls	r1, r2, #5
 8006b0e:	69fa      	ldr	r2, [r7, #28]
 8006b10:	440a      	add	r2, r1
 8006b12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b1a:	6013      	str	r3, [r2, #0]
 8006b1c:	e00f      	b.n	8006b3e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	015a      	lsls	r2, r3, #5
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	4413      	add	r3, r2
 8006b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	69ba      	ldr	r2, [r7, #24]
 8006b2e:	0151      	lsls	r1, r2, #5
 8006b30:	69fa      	ldr	r2, [r7, #28]
 8006b32:	440a      	add	r2, r1
 8006b34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b3c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	6919      	ldr	r1, [r3, #16]
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	781a      	ldrb	r2, [r3, #0]
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	b298      	uxth	r0, r3
 8006b4c:	79fb      	ldrb	r3, [r7, #7]
 8006b4e:	9300      	str	r3, [sp, #0]
 8006b50:	4603      	mov	r3, r0
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f000 fade 	bl	8007114 <USB_WritePacket>
 8006b58:	e0d2      	b.n	8006d00 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	015a      	lsls	r2, r3, #5
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	4413      	add	r3, r2
 8006b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	69ba      	ldr	r2, [r7, #24]
 8006b6a:	0151      	lsls	r1, r2, #5
 8006b6c:	69fa      	ldr	r2, [r7, #28]
 8006b6e:	440a      	add	r2, r1
 8006b70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b74:	0cdb      	lsrs	r3, r3, #19
 8006b76:	04db      	lsls	r3, r3, #19
 8006b78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	015a      	lsls	r2, r3, #5
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	4413      	add	r3, r2
 8006b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	69ba      	ldr	r2, [r7, #24]
 8006b8a:	0151      	lsls	r1, r2, #5
 8006b8c:	69fa      	ldr	r2, [r7, #28]
 8006b8e:	440a      	add	r2, r1
 8006b90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b9c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d126      	bne.n	8006bf4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	015a      	lsls	r2, r3, #5
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	4413      	add	r3, r2
 8006bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bb2:	691a      	ldr	r2, [r3, #16]
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bbc:	69b9      	ldr	r1, [r7, #24]
 8006bbe:	0148      	lsls	r0, r1, #5
 8006bc0:	69f9      	ldr	r1, [r7, #28]
 8006bc2:	4401      	add	r1, r0
 8006bc4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	015a      	lsls	r2, r3, #5
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	69ba      	ldr	r2, [r7, #24]
 8006bdc:	0151      	lsls	r1, r2, #5
 8006bde:	69fa      	ldr	r2, [r7, #28]
 8006be0:	440a      	add	r2, r1
 8006be2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006be6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bea:	6113      	str	r3, [r2, #16]
 8006bec:	e03a      	b.n	8006c64 <USB_EPStartXfer+0x3e4>
 8006bee:	bf00      	nop
 8006bf0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	699a      	ldr	r2, [r3, #24]
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	1e5a      	subs	r2, r3, #1
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c08:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	8afa      	ldrh	r2, [r7, #22]
 8006c10:	fb03 f202 	mul.w	r2, r3, r2
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	015a      	lsls	r2, r3, #5
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	4413      	add	r3, r2
 8006c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c24:	691a      	ldr	r2, [r3, #16]
 8006c26:	8afb      	ldrh	r3, [r7, #22]
 8006c28:	04d9      	lsls	r1, r3, #19
 8006c2a:	4b38      	ldr	r3, [pc, #224]	; (8006d0c <USB_EPStartXfer+0x48c>)
 8006c2c:	400b      	ands	r3, r1
 8006c2e:	69b9      	ldr	r1, [r7, #24]
 8006c30:	0148      	lsls	r0, r1, #5
 8006c32:	69f9      	ldr	r1, [r7, #28]
 8006c34:	4401      	add	r1, r0
 8006c36:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c4a:	691a      	ldr	r2, [r3, #16]
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	69db      	ldr	r3, [r3, #28]
 8006c50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c54:	69b9      	ldr	r1, [r7, #24]
 8006c56:	0148      	lsls	r0, r1, #5
 8006c58:	69f9      	ldr	r1, [r7, #28]
 8006c5a:	4401      	add	r1, r0
 8006c5c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006c60:	4313      	orrs	r3, r2
 8006c62:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006c64:	79fb      	ldrb	r3, [r7, #7]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d10d      	bne.n	8006c86 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d009      	beq.n	8006c86 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	6919      	ldr	r1, [r3, #16]
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	015a      	lsls	r2, r3, #5
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c82:	460a      	mov	r2, r1
 8006c84:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	791b      	ldrb	r3, [r3, #4]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d128      	bne.n	8006ce0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d110      	bne.n	8006cc0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	015a      	lsls	r2, r3, #5
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	69ba      	ldr	r2, [r7, #24]
 8006cae:	0151      	lsls	r1, r2, #5
 8006cb0:	69fa      	ldr	r2, [r7, #28]
 8006cb2:	440a      	add	r2, r1
 8006cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cb8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006cbc:	6013      	str	r3, [r2, #0]
 8006cbe:	e00f      	b.n	8006ce0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	015a      	lsls	r2, r3, #5
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	69ba      	ldr	r2, [r7, #24]
 8006cd0:	0151      	lsls	r1, r2, #5
 8006cd2:	69fa      	ldr	r2, [r7, #28]
 8006cd4:	440a      	add	r2, r1
 8006cd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cde:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	015a      	lsls	r2, r3, #5
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	69ba      	ldr	r2, [r7, #24]
 8006cf0:	0151      	lsls	r1, r2, #5
 8006cf2:	69fa      	ldr	r2, [r7, #28]
 8006cf4:	440a      	add	r2, r1
 8006cf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cfa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cfe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3720      	adds	r7, #32
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	1ff80000 	.word	0x1ff80000

08006d10 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b087      	sub	sp, #28
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	785b      	ldrb	r3, [r3, #1]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	f040 80ce 	bne.w	8006ece <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d132      	bne.n	8006da0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	015a      	lsls	r2, r3, #5
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	4413      	add	r3, r2
 8006d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	0151      	lsls	r1, r2, #5
 8006d4c:	697a      	ldr	r2, [r7, #20]
 8006d4e:	440a      	add	r2, r1
 8006d50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d54:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d58:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	0151      	lsls	r1, r2, #5
 8006d70:	697a      	ldr	r2, [r7, #20]
 8006d72:	440a      	add	r2, r1
 8006d74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	015a      	lsls	r2, r3, #5
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	4413      	add	r3, r2
 8006d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	0151      	lsls	r1, r2, #5
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	440a      	add	r2, r1
 8006d94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d98:	0cdb      	lsrs	r3, r3, #19
 8006d9a:	04db      	lsls	r3, r3, #19
 8006d9c:	6113      	str	r3, [r2, #16]
 8006d9e:	e04e      	b.n	8006e3e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	015a      	lsls	r2, r3, #5
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	4413      	add	r3, r2
 8006da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	0151      	lsls	r1, r2, #5
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	440a      	add	r2, r1
 8006db6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dba:	0cdb      	lsrs	r3, r3, #19
 8006dbc:	04db      	lsls	r3, r3, #19
 8006dbe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	015a      	lsls	r2, r3, #5
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	0151      	lsls	r1, r2, #5
 8006dd2:	697a      	ldr	r2, [r7, #20]
 8006dd4:	440a      	add	r2, r1
 8006dd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dda:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006dde:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006de2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	699a      	ldr	r2, [r3, #24]
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d903      	bls.n	8006df8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	68da      	ldr	r2, [r3, #12]
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	015a      	lsls	r2, r3, #5
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	4413      	add	r3, r2
 8006e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	693a      	ldr	r2, [r7, #16]
 8006e08:	0151      	lsls	r1, r2, #5
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	440a      	add	r2, r1
 8006e0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	015a      	lsls	r2, r3, #5
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e24:	691a      	ldr	r2, [r3, #16]
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e2e:	6939      	ldr	r1, [r7, #16]
 8006e30:	0148      	lsls	r0, r1, #5
 8006e32:	6979      	ldr	r1, [r7, #20]
 8006e34:	4401      	add	r1, r0
 8006e36:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006e3e:	79fb      	ldrb	r3, [r7, #7]
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d11e      	bne.n	8006e82 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	695b      	ldr	r3, [r3, #20]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d009      	beq.n	8006e60 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	015a      	lsls	r2, r3, #5
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	4413      	add	r3, r2
 8006e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e58:	461a      	mov	r2, r3
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	0151      	lsls	r1, r2, #5
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	440a      	add	r2, r1
 8006e76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e7e:	6013      	str	r3, [r2, #0]
 8006e80:	e097      	b.n	8006fb2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	015a      	lsls	r2, r3, #5
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	4413      	add	r3, r2
 8006e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	0151      	lsls	r1, r2, #5
 8006e94:	697a      	ldr	r2, [r7, #20]
 8006e96:	440a      	add	r2, r1
 8006e98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ea0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	699b      	ldr	r3, [r3, #24]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f000 8083 	beq.w	8006fb2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	f003 030f 	and.w	r3, r3, #15
 8006ebc:	2101      	movs	r1, #1
 8006ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8006ec2:	6979      	ldr	r1, [r7, #20]
 8006ec4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	634b      	str	r3, [r1, #52]	; 0x34
 8006ecc:	e071      	b.n	8006fb2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	015a      	lsls	r2, r3, #5
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	0151      	lsls	r1, r2, #5
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	440a      	add	r2, r1
 8006ee4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ee8:	0cdb      	lsrs	r3, r3, #19
 8006eea:	04db      	lsls	r3, r3, #19
 8006eec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	0151      	lsls	r1, r2, #5
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	440a      	add	r2, r1
 8006f04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f10:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d003      	beq.n	8006f22 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	68da      	ldr	r2, [r3, #12]
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	68da      	ldr	r2, [r3, #12]
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	015a      	lsls	r2, r3, #5
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	4413      	add	r3, r2
 8006f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	693a      	ldr	r2, [r7, #16]
 8006f3a:	0151      	lsls	r1, r2, #5
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	440a      	add	r2, r1
 8006f40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f56:	691a      	ldr	r2, [r3, #16]
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	69db      	ldr	r3, [r3, #28]
 8006f5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f60:	6939      	ldr	r1, [r7, #16]
 8006f62:	0148      	lsls	r0, r1, #5
 8006f64:	6979      	ldr	r1, [r7, #20]
 8006f66:	4401      	add	r1, r0
 8006f68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006f70:	79fb      	ldrb	r3, [r7, #7]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d10d      	bne.n	8006f92 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d009      	beq.n	8006f92 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	6919      	ldr	r1, [r3, #16]
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	015a      	lsls	r2, r3, #5
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	4413      	add	r3, r2
 8006f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f8e:	460a      	mov	r2, r1
 8006f90:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	015a      	lsls	r2, r3, #5
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	4413      	add	r3, r2
 8006f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	0151      	lsls	r1, r2, #5
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	440a      	add	r2, r1
 8006fa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006fb0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	371c      	adds	r7, #28
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b087      	sub	sp, #28
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	785b      	ldrb	r3, [r3, #1]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d14a      	bne.n	8007074 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	015a      	lsls	r2, r3, #5
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ff2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ff6:	f040 8086 	bne.w	8007106 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	015a      	lsls	r2, r3, #5
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	4413      	add	r3, r2
 8007004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	7812      	ldrb	r2, [r2, #0]
 800700e:	0151      	lsls	r1, r2, #5
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	440a      	add	r2, r1
 8007014:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007018:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800701c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	015a      	lsls	r2, r3, #5
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	4413      	add	r3, r2
 8007028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	683a      	ldr	r2, [r7, #0]
 8007030:	7812      	ldrb	r2, [r2, #0]
 8007032:	0151      	lsls	r1, r2, #5
 8007034:	693a      	ldr	r2, [r7, #16]
 8007036:	440a      	add	r2, r1
 8007038:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800703c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007040:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	3301      	adds	r3, #1
 8007046:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f242 7210 	movw	r2, #10000	; 0x2710
 800704e:	4293      	cmp	r3, r2
 8007050:	d902      	bls.n	8007058 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	75fb      	strb	r3, [r7, #23]
          break;
 8007056:	e056      	b.n	8007106 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	015a      	lsls	r2, r3, #5
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	4413      	add	r3, r2
 8007062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800706c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007070:	d0e7      	beq.n	8007042 <USB_EPStopXfer+0x82>
 8007072:	e048      	b.n	8007106 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	015a      	lsls	r2, r3, #5
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	4413      	add	r3, r2
 800707e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007088:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800708c:	d13b      	bne.n	8007106 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	015a      	lsls	r2, r3, #5
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	4413      	add	r3, r2
 8007098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	7812      	ldrb	r2, [r2, #0]
 80070a2:	0151      	lsls	r1, r2, #5
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	440a      	add	r2, r1
 80070a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80070b0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	015a      	lsls	r2, r3, #5
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	4413      	add	r3, r2
 80070bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	7812      	ldrb	r2, [r2, #0]
 80070c6:	0151      	lsls	r1, r2, #5
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	440a      	add	r2, r1
 80070cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	3301      	adds	r3, #1
 80070da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f242 7210 	movw	r2, #10000	; 0x2710
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d902      	bls.n	80070ec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	75fb      	strb	r3, [r7, #23]
          break;
 80070ea:	e00c      	b.n	8007106 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	015a      	lsls	r2, r3, #5
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	4413      	add	r3, r2
 80070f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007100:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007104:	d0e7      	beq.n	80070d6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007106:	7dfb      	ldrb	r3, [r7, #23]
}
 8007108:	4618      	mov	r0, r3
 800710a:	371c      	adds	r7, #28
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007114:	b480      	push	{r7}
 8007116:	b089      	sub	sp, #36	; 0x24
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	4611      	mov	r1, r2
 8007120:	461a      	mov	r2, r3
 8007122:	460b      	mov	r3, r1
 8007124:	71fb      	strb	r3, [r7, #7]
 8007126:	4613      	mov	r3, r2
 8007128:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007132:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007136:	2b00      	cmp	r3, #0
 8007138:	d123      	bne.n	8007182 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800713a:	88bb      	ldrh	r3, [r7, #4]
 800713c:	3303      	adds	r3, #3
 800713e:	089b      	lsrs	r3, r3, #2
 8007140:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007142:	2300      	movs	r3, #0
 8007144:	61bb      	str	r3, [r7, #24]
 8007146:	e018      	b.n	800717a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007148:	79fb      	ldrb	r3, [r7, #7]
 800714a:	031a      	lsls	r2, r3, #12
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	4413      	add	r3, r2
 8007150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007154:	461a      	mov	r2, r3
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	3301      	adds	r3, #1
 8007160:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	3301      	adds	r3, #1
 8007166:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	3301      	adds	r3, #1
 800716c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	3301      	adds	r3, #1
 8007172:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	3301      	adds	r3, #1
 8007178:	61bb      	str	r3, [r7, #24]
 800717a:	69ba      	ldr	r2, [r7, #24]
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	429a      	cmp	r2, r3
 8007180:	d3e2      	bcc.n	8007148 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3724      	adds	r7, #36	; 0x24
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007190:	b480      	push	{r7}
 8007192:	b08b      	sub	sp, #44	; 0x2c
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	4613      	mov	r3, r2
 800719c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80071a6:	88fb      	ldrh	r3, [r7, #6]
 80071a8:	089b      	lsrs	r3, r3, #2
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80071ae:	88fb      	ldrh	r3, [r7, #6]
 80071b0:	f003 0303 	and.w	r3, r3, #3
 80071b4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80071b6:	2300      	movs	r3, #0
 80071b8:	623b      	str	r3, [r7, #32]
 80071ba:	e014      	b.n	80071e6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80071c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ca:	3301      	adds	r3, #1
 80071cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80071ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d0:	3301      	adds	r3, #1
 80071d2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80071d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d6:	3301      	adds	r3, #1
 80071d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80071da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071dc:	3301      	adds	r3, #1
 80071de:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80071e0:	6a3b      	ldr	r3, [r7, #32]
 80071e2:	3301      	adds	r3, #1
 80071e4:	623b      	str	r3, [r7, #32]
 80071e6:	6a3a      	ldr	r2, [r7, #32]
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d3e6      	bcc.n	80071bc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80071ee:	8bfb      	ldrh	r3, [r7, #30]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d01e      	beq.n	8007232 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80071f4:	2300      	movs	r3, #0
 80071f6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071fe:	461a      	mov	r2, r3
 8007200:	f107 0310 	add.w	r3, r7, #16
 8007204:	6812      	ldr	r2, [r2, #0]
 8007206:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	6a3b      	ldr	r3, [r7, #32]
 800720c:	b2db      	uxtb	r3, r3
 800720e:	00db      	lsls	r3, r3, #3
 8007210:	fa22 f303 	lsr.w	r3, r2, r3
 8007214:	b2da      	uxtb	r2, r3
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	701a      	strb	r2, [r3, #0]
      i++;
 800721a:	6a3b      	ldr	r3, [r7, #32]
 800721c:	3301      	adds	r3, #1
 800721e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007222:	3301      	adds	r3, #1
 8007224:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007226:	8bfb      	ldrh	r3, [r7, #30]
 8007228:	3b01      	subs	r3, #1
 800722a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800722c:	8bfb      	ldrh	r3, [r7, #30]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1ea      	bne.n	8007208 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007234:	4618      	mov	r0, r3
 8007236:	372c      	adds	r7, #44	; 0x2c
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	785b      	ldrb	r3, [r3, #1]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d12c      	bne.n	80072b6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	4413      	add	r3, r2
 8007264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	db12      	blt.n	8007294 <USB_EPSetStall+0x54>
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00f      	beq.n	8007294 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	015a      	lsls	r2, r3, #5
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	4413      	add	r3, r2
 800727c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68ba      	ldr	r2, [r7, #8]
 8007284:	0151      	lsls	r1, r2, #5
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	440a      	add	r2, r1
 800728a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800728e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007292:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	015a      	lsls	r2, r3, #5
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	4413      	add	r3, r2
 800729c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	0151      	lsls	r1, r2, #5
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	440a      	add	r2, r1
 80072aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80072b2:	6013      	str	r3, [r2, #0]
 80072b4:	e02b      	b.n	800730e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	015a      	lsls	r2, r3, #5
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	4413      	add	r3, r2
 80072be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	db12      	blt.n	80072ee <USB_EPSetStall+0xae>
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00f      	beq.n	80072ee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	0151      	lsls	r1, r2, #5
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	440a      	add	r2, r1
 80072e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80072ec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	015a      	lsls	r2, r3, #5
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	4413      	add	r3, r2
 80072f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	0151      	lsls	r1, r2, #5
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	440a      	add	r2, r1
 8007304:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007308:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800730c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3714      	adds	r7, #20
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	785b      	ldrb	r3, [r3, #1]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d128      	bne.n	800738a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	015a      	lsls	r2, r3, #5
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	4413      	add	r3, r2
 8007340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	0151      	lsls	r1, r2, #5
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	440a      	add	r2, r1
 800734e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007352:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007356:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	791b      	ldrb	r3, [r3, #4]
 800735c:	2b03      	cmp	r3, #3
 800735e:	d003      	beq.n	8007368 <USB_EPClearStall+0x4c>
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	791b      	ldrb	r3, [r3, #4]
 8007364:	2b02      	cmp	r3, #2
 8007366:	d138      	bne.n	80073da <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	015a      	lsls	r2, r3, #5
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	4413      	add	r3, r2
 8007370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68ba      	ldr	r2, [r7, #8]
 8007378:	0151      	lsls	r1, r2, #5
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	440a      	add	r2, r1
 800737e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007386:	6013      	str	r3, [r2, #0]
 8007388:	e027      	b.n	80073da <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	015a      	lsls	r2, r3, #5
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	4413      	add	r3, r2
 8007392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	0151      	lsls	r1, r2, #5
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	440a      	add	r2, r1
 80073a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073a8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	791b      	ldrb	r3, [r3, #4]
 80073ae:	2b03      	cmp	r3, #3
 80073b0:	d003      	beq.n	80073ba <USB_EPClearStall+0x9e>
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	791b      	ldrb	r3, [r3, #4]
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d10f      	bne.n	80073da <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	015a      	lsls	r2, r3, #5
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	4413      	add	r3, r2
 80073c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	0151      	lsls	r1, r2, #5
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	440a      	add	r2, r1
 80073d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073d8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3714      	adds	r7, #20
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	460b      	mov	r3, r1
 80073f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007406:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800740a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	78fb      	ldrb	r3, [r7, #3]
 8007416:	011b      	lsls	r3, r3, #4
 8007418:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800741c:	68f9      	ldr	r1, [r7, #12]
 800741e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007422:	4313      	orrs	r3, r2
 8007424:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	3714      	adds	r7, #20
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800744e:	f023 0303 	bic.w	r3, r3, #3
 8007452:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007462:	f023 0302 	bic.w	r3, r3, #2
 8007466:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3714      	adds	r7, #20
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007476:	b480      	push	{r7}
 8007478:	b085      	sub	sp, #20
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007490:	f023 0303 	bic.w	r3, r3, #3
 8007494:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074a4:	f043 0302 	orr.w	r3, r3, #2
 80074a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	695b      	ldr	r3, [r3, #20]
 80074c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	4013      	ands	r3, r2
 80074ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80074d0:	68fb      	ldr	r3, [r7, #12]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3714      	adds	r7, #20
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr

080074de <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80074de:	b480      	push	{r7}
 80074e0:	b085      	sub	sp, #20
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074fa:	69db      	ldr	r3, [r3, #28]
 80074fc:	68ba      	ldr	r2, [r7, #8]
 80074fe:	4013      	ands	r3, r2
 8007500:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	0c1b      	lsrs	r3, r3, #16
}
 8007506:	4618      	mov	r0, r3
 8007508:	3714      	adds	r7, #20
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007512:	b480      	push	{r7}
 8007514:	b085      	sub	sp, #20
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007524:	699b      	ldr	r3, [r3, #24]
 8007526:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800752e:	69db      	ldr	r3, [r3, #28]
 8007530:	68ba      	ldr	r2, [r7, #8]
 8007532:	4013      	ands	r3, r2
 8007534:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	b29b      	uxth	r3, r3
}
 800753a:	4618      	mov	r0, r3
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007546:	b480      	push	{r7}
 8007548:	b085      	sub	sp, #20
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
 800754e:	460b      	mov	r3, r1
 8007550:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007556:	78fb      	ldrb	r3, [r7, #3]
 8007558:	015a      	lsls	r2, r3, #5
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	4413      	add	r3, r2
 800755e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	4013      	ands	r3, r2
 8007572:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007574:	68bb      	ldr	r3, [r7, #8]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3714      	adds	r7, #20
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007582:	b480      	push	{r7}
 8007584:	b087      	sub	sp, #28
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
 800758a:	460b      	mov	r3, r1
 800758c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075a4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80075a6:	78fb      	ldrb	r3, [r7, #3]
 80075a8:	f003 030f 	and.w	r3, r3, #15
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	fa22 f303 	lsr.w	r3, r2, r3
 80075b2:	01db      	lsls	r3, r3, #7
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80075bc:	78fb      	ldrb	r3, [r7, #3]
 80075be:	015a      	lsls	r2, r3, #5
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	4413      	add	r3, r2
 80075c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	4013      	ands	r3, r2
 80075ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80075d0:	68bb      	ldr	r3, [r7, #8]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	371c      	adds	r7, #28
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr

080075de <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80075de:	b480      	push	{r7}
 80075e0:	b083      	sub	sp, #12
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	f003 0301 	and.w	r3, r3, #1
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80075fa:	b480      	push	{r7}
 80075fc:	b085      	sub	sp, #20
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007614:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007618:	f023 0307 	bic.w	r3, r3, #7
 800761c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800762c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007630:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3714      	adds	r7, #20
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007640:	b480      	push	{r7}
 8007642:	b087      	sub	sp, #28
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	460b      	mov	r3, r1
 800764a:	607a      	str	r2, [r7, #4]
 800764c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	333c      	adds	r3, #60	; 0x3c
 8007656:	3304      	adds	r3, #4
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	4a26      	ldr	r2, [pc, #152]	; (80076f8 <USB_EP0_OutStart+0xb8>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d90a      	bls.n	800767a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007670:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007674:	d101      	bne.n	800767a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007676:	2300      	movs	r3, #0
 8007678:	e037      	b.n	80076ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007680:	461a      	mov	r2, r3
 8007682:	2300      	movs	r3, #0
 8007684:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007694:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007698:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076a8:	f043 0318 	orr.w	r3, r3, #24
 80076ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	697a      	ldr	r2, [r7, #20]
 80076b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076bc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80076c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80076c2:	7afb      	ldrb	r3, [r7, #11]
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d10f      	bne.n	80076e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ce:	461a      	mov	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	697a      	ldr	r2, [r7, #20]
 80076de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076e2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80076e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	371c      	adds	r7, #28
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	4f54300a 	.word	0x4f54300a

080076fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007704:	2300      	movs	r3, #0
 8007706:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	3301      	adds	r3, #1
 800770c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	4a13      	ldr	r2, [pc, #76]	; (8007760 <USB_CoreReset+0x64>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d901      	bls.n	800771a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e01b      	b.n	8007752 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	daf2      	bge.n	8007708 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007722:	2300      	movs	r3, #0
 8007724:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	f043 0201 	orr.w	r2, r3, #1
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	3301      	adds	r3, #1
 8007736:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	4a09      	ldr	r2, [pc, #36]	; (8007760 <USB_CoreReset+0x64>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d901      	bls.n	8007744 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007740:	2303      	movs	r3, #3
 8007742:	e006      	b.n	8007752 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	f003 0301 	and.w	r3, r3, #1
 800774c:	2b01      	cmp	r3, #1
 800774e:	d0f0      	beq.n	8007732 <USB_CoreReset+0x36>

  return HAL_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3714      	adds	r7, #20
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	00030d40 	.word	0x00030d40

08007764 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	460b      	mov	r3, r1
 800776e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8007770:	2054      	movs	r0, #84	; 0x54
 8007772:	f002 fe19 	bl	800a3a8 <USBD_static_malloc>
 8007776:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d109      	bne.n	8007792 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	32b0      	adds	r2, #176	; 0xb0
 8007788:	2100      	movs	r1, #0
 800778a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800778e:	2302      	movs	r3, #2
 8007790:	e08b      	b.n	80078aa <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	32b0      	adds	r2, #176	; 0xb0
 800779c:	68f9      	ldr	r1, [r7, #12]
 800779e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	32b0      	adds	r2, #176	; 0xb0
 80077ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	7c1b      	ldrb	r3, [r3, #16]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d11b      	bne.n	80077f6 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80077be:	4b3d      	ldr	r3, [pc, #244]	; (80078b4 <USBD_CUSTOM_HID_Init+0x150>)
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	f003 020f 	and.w	r2, r3, #15
 80077c6:	6879      	ldr	r1, [r7, #4]
 80077c8:	4613      	mov	r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4413      	add	r3, r2
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	440b      	add	r3, r1
 80077d2:	3326      	adds	r3, #38	; 0x26
 80077d4:	220a      	movs	r2, #10
 80077d6:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80077d8:	4b37      	ldr	r3, [pc, #220]	; (80078b8 <USBD_CUSTOM_HID_Init+0x154>)
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	f003 020f 	and.w	r2, r3, #15
 80077e0:	6879      	ldr	r1, [r7, #4]
 80077e2:	4613      	mov	r3, r2
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	4413      	add	r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	440b      	add	r3, r1
 80077ec:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80077f0:	220a      	movs	r2, #10
 80077f2:	801a      	strh	r2, [r3, #0]
 80077f4:	e01a      	b.n	800782c <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80077f6:	4b2f      	ldr	r3, [pc, #188]	; (80078b4 <USBD_CUSTOM_HID_Init+0x150>)
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	f003 020f 	and.w	r2, r3, #15
 80077fe:	6879      	ldr	r1, [r7, #4]
 8007800:	4613      	mov	r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	4413      	add	r3, r2
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	440b      	add	r3, r1
 800780a:	3326      	adds	r3, #38	; 0x26
 800780c:	2205      	movs	r2, #5
 800780e:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007810:	4b29      	ldr	r3, [pc, #164]	; (80078b8 <USBD_CUSTOM_HID_Init+0x154>)
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	f003 020f 	and.w	r2, r3, #15
 8007818:	6879      	ldr	r1, [r7, #4]
 800781a:	4613      	mov	r3, r2
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	4413      	add	r3, r2
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	440b      	add	r3, r1
 8007824:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8007828:	2205      	movs	r2, #5
 800782a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 800782c:	4b21      	ldr	r3, [pc, #132]	; (80078b4 <USBD_CUSTOM_HID_Init+0x150>)
 800782e:	7819      	ldrb	r1, [r3, #0]
 8007830:	2340      	movs	r3, #64	; 0x40
 8007832:	2203      	movs	r2, #3
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f002 fbb7 	bl	8009fa8 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 800783a:	4b1e      	ldr	r3, [pc, #120]	; (80078b4 <USBD_CUSTOM_HID_Init+0x150>)
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	f003 020f 	and.w	r2, r3, #15
 8007842:	6879      	ldr	r1, [r7, #4]
 8007844:	4613      	mov	r3, r2
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	4413      	add	r3, r2
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	440b      	add	r3, r1
 800784e:	3324      	adds	r3, #36	; 0x24
 8007850:	2201      	movs	r2, #1
 8007852:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8007854:	4b18      	ldr	r3, [pc, #96]	; (80078b8 <USBD_CUSTOM_HID_Init+0x154>)
 8007856:	7819      	ldrb	r1, [r3, #0]
 8007858:	2340      	movs	r3, #64	; 0x40
 800785a:	2203      	movs	r2, #3
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f002 fba3 	bl	8009fa8 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8007862:	4b15      	ldr	r3, [pc, #84]	; (80078b8 <USBD_CUSTOM_HID_Init+0x154>)
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	f003 020f 	and.w	r2, r3, #15
 800786a:	6879      	ldr	r1, [r7, #4]
 800786c:	4613      	mov	r3, r2
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	4413      	add	r3, r2
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	440b      	add	r3, r1
 8007876:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800787a:	2201      	movs	r2, #1
 800787c:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	33b0      	adds	r3, #176	; 0xb0
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	4413      	add	r3, r2
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800789a:	4b07      	ldr	r3, [pc, #28]	; (80078b8 <USBD_CUSTOM_HID_Init+0x154>)
 800789c:	7819      	ldrb	r1, [r3, #0]
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	2340      	movs	r3, #64	; 0x40
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f002 fcfa 	bl	800a29c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	20000086 	.word	0x20000086
 80078b8:	20000087 	.word	0x20000087

080078bc <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	460b      	mov	r3, r1
 80078c6:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 80078c8:	4b37      	ldr	r3, [pc, #220]	; (80079a8 <USBD_CUSTOM_HID_DeInit+0xec>)
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	4619      	mov	r1, r3
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f002 fba8 	bl	800a024 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 80078d4:	4b34      	ldr	r3, [pc, #208]	; (80079a8 <USBD_CUSTOM_HID_DeInit+0xec>)
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	f003 020f 	and.w	r2, r3, #15
 80078dc:	6879      	ldr	r1, [r7, #4]
 80078de:	4613      	mov	r3, r2
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	4413      	add	r3, r2
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	440b      	add	r3, r1
 80078e8:	3324      	adds	r3, #36	; 0x24
 80078ea:	2200      	movs	r2, #0
 80078ec:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 80078ee:	4b2e      	ldr	r3, [pc, #184]	; (80079a8 <USBD_CUSTOM_HID_DeInit+0xec>)
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	f003 020f 	and.w	r2, r3, #15
 80078f6:	6879      	ldr	r1, [r7, #4]
 80078f8:	4613      	mov	r3, r2
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	4413      	add	r3, r2
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	440b      	add	r3, r1
 8007902:	3326      	adds	r3, #38	; 0x26
 8007904:	2200      	movs	r2, #0
 8007906:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8007908:	4b28      	ldr	r3, [pc, #160]	; (80079ac <USBD_CUSTOM_HID_DeInit+0xf0>)
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	4619      	mov	r1, r3
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f002 fb88 	bl	800a024 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8007914:	4b25      	ldr	r3, [pc, #148]	; (80079ac <USBD_CUSTOM_HID_DeInit+0xf0>)
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	f003 020f 	and.w	r2, r3, #15
 800791c:	6879      	ldr	r1, [r7, #4]
 800791e:	4613      	mov	r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	4413      	add	r3, r2
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	440b      	add	r3, r1
 8007928:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800792c:	2200      	movs	r2, #0
 800792e:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8007930:	4b1e      	ldr	r3, [pc, #120]	; (80079ac <USBD_CUSTOM_HID_DeInit+0xf0>)
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	f003 020f 	and.w	r2, r3, #15
 8007938:	6879      	ldr	r1, [r7, #4]
 800793a:	4613      	mov	r3, r2
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	4413      	add	r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	440b      	add	r3, r1
 8007944:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8007948:	2200      	movs	r2, #0
 800794a:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	32b0      	adds	r2, #176	; 0xb0
 8007956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d01f      	beq.n	800799e <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	33b0      	adds	r3, #176	; 0xb0
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4413      	add	r3, r2
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	32b0      	adds	r2, #176	; 0xb0
 800797c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007980:	4618      	mov	r0, r3
 8007982:	f002 fd1f 	bl	800a3c4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	32b0      	adds	r2, #176	; 0xb0
 8007990:	2100      	movs	r1, #0
 8007992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	20000086 	.word	0x20000086
 80079ac:	20000087 	.word	0x20000087

080079b0 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b088      	sub	sp, #32
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	32b0      	adds	r2, #176	; 0xb0
 80079c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079c8:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80079ca:	2300      	movs	r3, #0
 80079cc:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 80079ce:	2300      	movs	r3, #0
 80079d0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80079d2:	2300      	movs	r3, #0
 80079d4:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80079d6:	2300      	movs	r3, #0
 80079d8:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d101      	bne.n	80079e4 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 80079e0:	2303      	movs	r3, #3
 80079e2:	e0f8      	b.n	8007bd6 <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d056      	beq.n	8007a9e <USBD_CUSTOM_HID_Setup+0xee>
 80079f0:	2b20      	cmp	r3, #32
 80079f2:	f040 80e8 	bne.w	8007bc6 <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	785b      	ldrb	r3, [r3, #1]
 80079fa:	3b02      	subs	r3, #2
 80079fc:	2b09      	cmp	r3, #9
 80079fe:	d846      	bhi.n	8007a8e <USBD_CUSTOM_HID_Setup+0xde>
 8007a00:	a201      	add	r2, pc, #4	; (adr r2, 8007a08 <USBD_CUSTOM_HID_Setup+0x58>)
 8007a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a06:	bf00      	nop
 8007a08:	08007a61 	.word	0x08007a61
 8007a0c:	08007a3f 	.word	0x08007a3f
 8007a10:	08007a8f 	.word	0x08007a8f
 8007a14:	08007a8f 	.word	0x08007a8f
 8007a18:	08007a8f 	.word	0x08007a8f
 8007a1c:	08007a8f 	.word	0x08007a8f
 8007a20:	08007a8f 	.word	0x08007a8f
 8007a24:	08007a71 	.word	0x08007a71
 8007a28:	08007a4f 	.word	0x08007a4f
 8007a2c:	08007a31 	.word	0x08007a31
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	885b      	ldrh	r3, [r3, #2]
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	461a      	mov	r2, r3
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8007a3c:	e02e      	b.n	8007a9c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	3340      	adds	r3, #64	; 0x40
 8007a42:	2201      	movs	r2, #1
 8007a44:	4619      	mov	r1, r3
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f001 fcd2 	bl	80093f0 <USBD_CtlSendData>
          break;
 8007a4c:	e026      	b.n	8007a9c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	885b      	ldrh	r3, [r3, #2]
 8007a52:	0a1b      	lsrs	r3, r3, #8
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	461a      	mov	r2, r3
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 8007a5e:	e01d      	b.n	8007a9c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	3344      	adds	r3, #68	; 0x44
 8007a64:	2201      	movs	r2, #1
 8007a66:	4619      	mov	r1, r3
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f001 fcc1 	bl	80093f0 <USBD_CtlSendData>
          break;
 8007a6e:	e015      	b.n	8007a9c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	2201      	movs	r2, #1
 8007a74:	64da      	str	r2, [r3, #76]	; 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8007a76:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	88db      	ldrh	r3, [r3, #6]
 8007a7c:	2b40      	cmp	r3, #64	; 0x40
 8007a7e:	bf28      	it	cs
 8007a80:	2340      	movcs	r3, #64	; 0x40
 8007a82:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8007a84:	461a      	mov	r2, r3
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f001 fcde 	bl	8009448 <USBD_CtlPrepareRx>
          break;
 8007a8c:	e006      	b.n	8007a9c <USBD_CUSTOM_HID_Setup+0xec>

        default:
          USBD_CtlError(pdev, req);
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f001 fc3c 	bl	800930e <USBD_CtlError>
          ret = USBD_FAIL;
 8007a96:	2303      	movs	r3, #3
 8007a98:	75fb      	strb	r3, [r7, #23]
          break;
 8007a9a:	bf00      	nop
      }
      break;
 8007a9c:	e09a      	b.n	8007bd4 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	785b      	ldrb	r3, [r3, #1]
 8007aa2:	2b0b      	cmp	r3, #11
 8007aa4:	f200 8086 	bhi.w	8007bb4 <USBD_CUSTOM_HID_Setup+0x204>
 8007aa8:	a201      	add	r2, pc, #4	; (adr r2, 8007ab0 <USBD_CUSTOM_HID_Setup+0x100>)
 8007aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aae:	bf00      	nop
 8007ab0:	08007ae1 	.word	0x08007ae1
 8007ab4:	08007bc3 	.word	0x08007bc3
 8007ab8:	08007bb5 	.word	0x08007bb5
 8007abc:	08007bb5 	.word	0x08007bb5
 8007ac0:	08007bb5 	.word	0x08007bb5
 8007ac4:	08007bb5 	.word	0x08007bb5
 8007ac8:	08007b0b 	.word	0x08007b0b
 8007acc:	08007bb5 	.word	0x08007bb5
 8007ad0:	08007bb5 	.word	0x08007bb5
 8007ad4:	08007bb5 	.word	0x08007bb5
 8007ad8:	08007b63 	.word	0x08007b63
 8007adc:	08007b8d 	.word	0x08007b8d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	2b03      	cmp	r3, #3
 8007aea:	d107      	bne.n	8007afc <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007aec:	f107 030e 	add.w	r3, r7, #14
 8007af0:	2202      	movs	r2, #2
 8007af2:	4619      	mov	r1, r3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f001 fc7b 	bl	80093f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007afa:	e063      	b.n	8007bc4 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f001 fc05 	bl	800930e <USBD_CtlError>
            ret = USBD_FAIL;
 8007b04:	2303      	movs	r3, #3
 8007b06:	75fb      	strb	r3, [r7, #23]
          break;
 8007b08:	e05c      	b.n	8007bc4 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	885b      	ldrh	r3, [r3, #2]
 8007b0e:	0a1b      	lsrs	r3, r3, #8
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	2b22      	cmp	r3, #34	; 0x22
 8007b14:	d110      	bne.n	8007b38 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	88db      	ldrh	r3, [r3, #6]
 8007b1a:	2b21      	cmp	r3, #33	; 0x21
 8007b1c:	bf28      	it	cs
 8007b1e:	2321      	movcs	r3, #33	; 0x21
 8007b20:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	33b0      	adds	r3, #176	; 0xb0
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	4413      	add	r3, r2
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	61bb      	str	r3, [r7, #24]
 8007b36:	e00d      	b.n	8007b54 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	885b      	ldrh	r3, [r3, #2]
 8007b3c:	0a1b      	lsrs	r3, r3, #8
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	2b21      	cmp	r3, #33	; 0x21
 8007b42:	d107      	bne.n	8007b54 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8007b44:	4b26      	ldr	r3, [pc, #152]	; (8007be0 <USBD_CUSTOM_HID_Setup+0x230>)
 8007b46:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	88db      	ldrh	r3, [r3, #6]
 8007b4c:	2b09      	cmp	r3, #9
 8007b4e:	bf28      	it	cs
 8007b50:	2309      	movcs	r3, #9
 8007b52:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8007b54:	8bfb      	ldrh	r3, [r7, #30]
 8007b56:	461a      	mov	r2, r3
 8007b58:	69b9      	ldr	r1, [r7, #24]
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f001 fc48 	bl	80093f0 <USBD_CtlSendData>
          break;
 8007b60:	e030      	b.n	8007bc4 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	2b03      	cmp	r3, #3
 8007b6c:	d107      	bne.n	8007b7e <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	3348      	adds	r3, #72	; 0x48
 8007b72:	2201      	movs	r2, #1
 8007b74:	4619      	mov	r1, r3
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f001 fc3a 	bl	80093f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b7c:	e022      	b.n	8007bc4 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8007b7e:	6839      	ldr	r1, [r7, #0]
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f001 fbc4 	bl	800930e <USBD_CtlError>
            ret = USBD_FAIL;
 8007b86:	2303      	movs	r3, #3
 8007b88:	75fb      	strb	r3, [r7, #23]
          break;
 8007b8a:	e01b      	b.n	8007bc4 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	2b03      	cmp	r3, #3
 8007b96:	d106      	bne.n	8007ba6 <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	885b      	ldrh	r3, [r3, #2]
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ba4:	e00e      	b.n	8007bc4 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8007ba6:	6839      	ldr	r1, [r7, #0]
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f001 fbb0 	bl	800930e <USBD_CtlError>
            ret = USBD_FAIL;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	75fb      	strb	r3, [r7, #23]
          break;
 8007bb2:	e007      	b.n	8007bc4 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007bb4:	6839      	ldr	r1, [r7, #0]
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f001 fba9 	bl	800930e <USBD_CtlError>
          ret = USBD_FAIL;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	75fb      	strb	r3, [r7, #23]
          break;
 8007bc0:	e000      	b.n	8007bc4 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8007bc2:	bf00      	nop
      }
      break;
 8007bc4:	e006      	b.n	8007bd4 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8007bc6:	6839      	ldr	r1, [r7, #0]
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f001 fba0 	bl	800930e <USBD_CtlError>
      ret = USBD_FAIL;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	75fb      	strb	r3, [r7, #23]
      break;
 8007bd2:	bf00      	nop
  }
  return (uint8_t)ret;
 8007bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3720      	adds	r7, #32
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	20000070 	.word	0x20000070

08007be4 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	32b0      	adds	r2, #176	; 0xb0
 8007bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d101      	bne.n	8007c08 <USBD_CUSTOM_HID_SendReport+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e021      	b.n	8007c4c <USBD_CUSTOM_HID_SendReport+0x68>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	32b0      	adds	r2, #176	; 0xb0
 8007c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c16:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	2b03      	cmp	r3, #3
 8007c22:	d112      	bne.n	8007c4a <USBD_CUSTOM_HID_SendReport+0x66>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d10b      	bne.n	8007c46 <USBD_CUSTOM_HID_SendReport+0x62>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8007c36:	4b07      	ldr	r3, [pc, #28]	; (8007c54 <USBD_CUSTOM_HID_SendReport+0x70>)
 8007c38:	7819      	ldrb	r1, [r3, #0]
 8007c3a:	88fb      	ldrh	r3, [r7, #6]
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f002 faf4 	bl	800a22c <USBD_LL_Transmit>
 8007c44:	e001      	b.n	8007c4a <USBD_CUSTOM_HID_SendReport+0x66>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e000      	b.n	8007c4c <USBD_CUSTOM_HID_SendReport+0x68>
    }
  }
  return (uint8_t)USBD_OK;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3718      	adds	r7, #24
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	20000086 	.word	0x20000086

08007c58 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8007c60:	2181      	movs	r1, #129	; 0x81
 8007c62:	4815      	ldr	r0, [pc, #84]	; (8007cb8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8007c64:	f000 fcf1 	bl	800864a <USBD_GetEpDesc>
 8007c68:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8007c6a:	2101      	movs	r1, #1
 8007c6c:	4812      	ldr	r0, [pc, #72]	; (8007cb8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8007c6e:	f000 fcec 	bl	800864a <USBD_GetEpDesc>
 8007c72:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d009      	beq.n	8007c8e <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c82:	711a      	strb	r2, [r3, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2205      	movs	r2, #5
 8007c8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d009      	beq.n	8007ca8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c9c:	711a      	strb	r2, [r3, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	2205      	movs	r2, #5
 8007ca6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2229      	movs	r2, #41	; 0x29
 8007cac:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8007cae:	4b02      	ldr	r3, [pc, #8]	; (8007cb8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	20000044 	.word	0x20000044

08007cbc <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8007cc4:	2181      	movs	r1, #129	; 0x81
 8007cc6:	4815      	ldr	r0, [pc, #84]	; (8007d1c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8007cc8:	f000 fcbf 	bl	800864a <USBD_GetEpDesc>
 8007ccc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8007cce:	2101      	movs	r1, #1
 8007cd0:	4812      	ldr	r0, [pc, #72]	; (8007d1c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8007cd2:	f000 fcba 	bl	800864a <USBD_GetEpDesc>
 8007cd6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d009      	beq.n	8007cf2 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ce6:	711a      	strb	r2, [r3, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	220a      	movs	r2, #10
 8007cf0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d009      	beq.n	8007d0c <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d00:	711a      	strb	r2, [r3, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	220a      	movs	r2, #10
 8007d0a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2229      	movs	r2, #41	; 0x29
 8007d10:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8007d12:	4b02      	ldr	r3, [pc, #8]	; (8007d1c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	20000044 	.word	0x20000044

08007d20 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8007d28:	2181      	movs	r1, #129	; 0x81
 8007d2a:	4815      	ldr	r0, [pc, #84]	; (8007d80 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8007d2c:	f000 fc8d 	bl	800864a <USBD_GetEpDesc>
 8007d30:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8007d32:	2101      	movs	r1, #1
 8007d34:	4812      	ldr	r0, [pc, #72]	; (8007d80 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8007d36:	f000 fc88 	bl	800864a <USBD_GetEpDesc>
 8007d3a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d009      	beq.n	8007d56 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d4a:	711a      	strb	r2, [r3, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2205      	movs	r2, #5
 8007d54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d009      	beq.n	8007d70 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d64:	711a      	strb	r2, [r3, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	2205      	movs	r2, #5
 8007d6e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2229      	movs	r2, #41	; 0x29
 8007d74:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8007d76:	4b02      	ldr	r3, [pc, #8]	; (8007d80 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	20000044 	.word	0x20000044

08007d84 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	32b0      	adds	r2, #176	; 0xb0
 8007d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return (uint8_t)USBD_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b084      	sub	sp, #16
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
 8007dba:	460b      	mov	r3, r1
 8007dbc:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	32b0      	adds	r2, #176	; 0xb0
 8007dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d101      	bne.n	8007dd4 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	e01a      	b.n	8007e0a <USBD_CUSTOM_HID_DataOut+0x58>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	32b0      	adds	r2, #176	; 0xb0
 8007dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007de2:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	33b0      	adds	r3, #176	; 0xb0
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	4413      	add	r3, r2
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	4610      	mov	r0, r2
 8007dfa:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf,
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	2340      	movs	r3, #64	; 0x40
 8007e00:	2101      	movs	r1, #1
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f002 fa4a 	bl	800a29c <USBD_LL_PrepareReceive>
    	                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b084      	sub	sp, #16
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	32b0      	adds	r2, #176	; 0xb0
 8007e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e28:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d101      	bne.n	8007e34 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007e30:	2303      	movs	r3, #3
 8007e32:	e013      	b.n	8007e5c <USBD_CUSTOM_HID_EP0_RxReady+0x4a>
  }

  if (hhid->IsReportAvailable == 1U)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d10e      	bne.n	8007e5a <USBD_CUSTOM_HID_EP0_RxReady+0x48>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	33b0      	adds	r3, #176	; 0xb0
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	4413      	add	r3, r2
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	4610      	mov	r0, r2
 8007e52:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return (uint8_t)USBD_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	220a      	movs	r2, #10
 8007e70:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8007e72:	4b03      	ldr	r3, [pc, #12]	; (8007e80 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr
 8007e80:	2000007c 	.word	0x2000007c

08007e84 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d101      	bne.n	8007e98 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007e94:	2303      	movs	r3, #3
 8007e96:	e009      	b.n	8007eac <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	33b0      	adds	r3, #176	; 0xb0
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	4413      	add	r3, r2
 8007ea6:	683a      	ldr	r2, [r7, #0]
 8007ea8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b086      	sub	sp, #24
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d101      	bne.n	8007ed0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	e01f      	b.n	8007f10 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d003      	beq.n	8007ef6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	68ba      	ldr	r2, [r7, #8]
 8007ef2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	79fa      	ldrb	r2, [r7, #7]
 8007f02:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f001 ffc9 	bl	8009e9c <USBD_LL_Init>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3718      	adds	r7, #24
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d101      	bne.n	8007f30 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	e025      	b.n	8007f7c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	32ae      	adds	r2, #174	; 0xae
 8007f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00f      	beq.n	8007f6c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	32ae      	adds	r2, #174	; 0xae
 8007f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5c:	f107 020e 	add.w	r2, r7, #14
 8007f60:	4610      	mov	r0, r2
 8007f62:	4798      	blx	r3
 8007f64:	4602      	mov	r2, r0
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007f72:	1c5a      	adds	r2, r3, #1
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3710      	adds	r7, #16
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f001 ffd9 	bl	8009f44 <USBD_LL_Start>
 8007f92:	4603      	mov	r3, r0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3708      	adds	r7, #8
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007fa4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	370c      	adds	r7, #12
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b084      	sub	sp, #16
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
 8007fba:	460b      	mov	r3, r1
 8007fbc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d009      	beq.n	8007fe0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	78fa      	ldrb	r2, [r7, #3]
 8007fd6:	4611      	mov	r1, r2
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	4798      	blx	r3
 8007fdc:	4603      	mov	r3, r0
 8007fde:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b084      	sub	sp, #16
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	78fa      	ldrb	r2, [r7, #3]
 8008004:	4611      	mov	r1, r2
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	4798      	blx	r3
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d001      	beq.n	8008014 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008010:	2303      	movs	r3, #3
 8008012:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008014:	7bfb      	ldrb	r3, [r7, #15]
}
 8008016:	4618      	mov	r0, r3
 8008018:	3710      	adds	r7, #16
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b084      	sub	sp, #16
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
 8008026:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800802e:	6839      	ldr	r1, [r7, #0]
 8008030:	4618      	mov	r0, r3
 8008032:	f001 f932 	bl	800929a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2201      	movs	r2, #1
 800803a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008044:	461a      	mov	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008052:	f003 031f 	and.w	r3, r3, #31
 8008056:	2b02      	cmp	r3, #2
 8008058:	d01a      	beq.n	8008090 <USBD_LL_SetupStage+0x72>
 800805a:	2b02      	cmp	r3, #2
 800805c:	d822      	bhi.n	80080a4 <USBD_LL_SetupStage+0x86>
 800805e:	2b00      	cmp	r3, #0
 8008060:	d002      	beq.n	8008068 <USBD_LL_SetupStage+0x4a>
 8008062:	2b01      	cmp	r3, #1
 8008064:	d00a      	beq.n	800807c <USBD_LL_SetupStage+0x5e>
 8008066:	e01d      	b.n	80080a4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800806e:	4619      	mov	r1, r3
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fb5f 	bl	8008734 <USBD_StdDevReq>
 8008076:	4603      	mov	r3, r0
 8008078:	73fb      	strb	r3, [r7, #15]
      break;
 800807a:	e020      	b.n	80080be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fbc7 	bl	8008818 <USBD_StdItfReq>
 800808a:	4603      	mov	r3, r0
 800808c:	73fb      	strb	r3, [r7, #15]
      break;
 800808e:	e016      	b.n	80080be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 fc29 	bl	80088f0 <USBD_StdEPReq>
 800809e:	4603      	mov	r3, r0
 80080a0:	73fb      	strb	r3, [r7, #15]
      break;
 80080a2:	e00c      	b.n	80080be <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80080aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	4619      	mov	r1, r3
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f001 ffec 	bl	800a090 <USBD_LL_StallEP>
 80080b8:	4603      	mov	r3, r0
 80080ba:	73fb      	strb	r3, [r7, #15]
      break;
 80080bc:	bf00      	nop
  }

  return ret;
 80080be:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b086      	sub	sp, #24
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	460b      	mov	r3, r1
 80080d2:	607a      	str	r2, [r7, #4]
 80080d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80080d6:	2300      	movs	r3, #0
 80080d8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80080da:	7afb      	ldrb	r3, [r7, #11]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d16e      	bne.n	80081be <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80080e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080ee:	2b03      	cmp	r3, #3
 80080f0:	f040 8098 	bne.w	8008224 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	689a      	ldr	r2, [r3, #8]
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d913      	bls.n	8008128 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	689a      	ldr	r2, [r3, #8]
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	1ad2      	subs	r2, r2, r3
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	68da      	ldr	r2, [r3, #12]
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	4293      	cmp	r3, r2
 8008118:	bf28      	it	cs
 800811a:	4613      	movcs	r3, r2
 800811c:	461a      	mov	r2, r3
 800811e:	6879      	ldr	r1, [r7, #4]
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f001 f9ae 	bl	8009482 <USBD_CtlContinueRx>
 8008126:	e07d      	b.n	8008224 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800812e:	f003 031f 	and.w	r3, r3, #31
 8008132:	2b02      	cmp	r3, #2
 8008134:	d014      	beq.n	8008160 <USBD_LL_DataOutStage+0x98>
 8008136:	2b02      	cmp	r3, #2
 8008138:	d81d      	bhi.n	8008176 <USBD_LL_DataOutStage+0xae>
 800813a:	2b00      	cmp	r3, #0
 800813c:	d002      	beq.n	8008144 <USBD_LL_DataOutStage+0x7c>
 800813e:	2b01      	cmp	r3, #1
 8008140:	d003      	beq.n	800814a <USBD_LL_DataOutStage+0x82>
 8008142:	e018      	b.n	8008176 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008144:	2300      	movs	r3, #0
 8008146:	75bb      	strb	r3, [r7, #22]
            break;
 8008148:	e018      	b.n	800817c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008150:	b2db      	uxtb	r3, r3
 8008152:	4619      	mov	r1, r3
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f000 fa5e 	bl	8008616 <USBD_CoreFindIF>
 800815a:	4603      	mov	r3, r0
 800815c:	75bb      	strb	r3, [r7, #22]
            break;
 800815e:	e00d      	b.n	800817c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008166:	b2db      	uxtb	r3, r3
 8008168:	4619      	mov	r1, r3
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f000 fa60 	bl	8008630 <USBD_CoreFindEP>
 8008170:	4603      	mov	r3, r0
 8008172:	75bb      	strb	r3, [r7, #22]
            break;
 8008174:	e002      	b.n	800817c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008176:	2300      	movs	r3, #0
 8008178:	75bb      	strb	r3, [r7, #22]
            break;
 800817a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800817c:	7dbb      	ldrb	r3, [r7, #22]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d119      	bne.n	80081b6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008188:	b2db      	uxtb	r3, r3
 800818a:	2b03      	cmp	r3, #3
 800818c:	d113      	bne.n	80081b6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800818e:	7dba      	ldrb	r2, [r7, #22]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	32ae      	adds	r2, #174	; 0xae
 8008194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00b      	beq.n	80081b6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800819e:	7dba      	ldrb	r2, [r7, #22]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80081a6:	7dba      	ldrb	r2, [r7, #22]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	32ae      	adds	r2, #174	; 0xae
 80081ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	f001 f974 	bl	80094a4 <USBD_CtlSendStatus>
 80081bc:	e032      	b.n	8008224 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80081be:	7afb      	ldrb	r3, [r7, #11]
 80081c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	4619      	mov	r1, r3
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	f000 fa31 	bl	8008630 <USBD_CoreFindEP>
 80081ce:	4603      	mov	r3, r0
 80081d0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081d2:	7dbb      	ldrb	r3, [r7, #22]
 80081d4:	2bff      	cmp	r3, #255	; 0xff
 80081d6:	d025      	beq.n	8008224 <USBD_LL_DataOutStage+0x15c>
 80081d8:	7dbb      	ldrb	r3, [r7, #22]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d122      	bne.n	8008224 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	2b03      	cmp	r3, #3
 80081e8:	d117      	bne.n	800821a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80081ea:	7dba      	ldrb	r2, [r7, #22]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	32ae      	adds	r2, #174	; 0xae
 80081f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081f4:	699b      	ldr	r3, [r3, #24]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00f      	beq.n	800821a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80081fa:	7dba      	ldrb	r2, [r7, #22]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008202:	7dba      	ldrb	r2, [r7, #22]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	32ae      	adds	r2, #174	; 0xae
 8008208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	7afa      	ldrb	r2, [r7, #11]
 8008210:	4611      	mov	r1, r2
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	4798      	blx	r3
 8008216:	4603      	mov	r3, r0
 8008218:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800821a:	7dfb      	ldrb	r3, [r7, #23]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d001      	beq.n	8008224 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008220:	7dfb      	ldrb	r3, [r7, #23]
 8008222:	e000      	b.n	8008226 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3718      	adds	r7, #24
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b086      	sub	sp, #24
 8008232:	af00      	add	r7, sp, #0
 8008234:	60f8      	str	r0, [r7, #12]
 8008236:	460b      	mov	r3, r1
 8008238:	607a      	str	r2, [r7, #4]
 800823a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800823c:	7afb      	ldrb	r3, [r7, #11]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d16f      	bne.n	8008322 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	3314      	adds	r3, #20
 8008246:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800824e:	2b02      	cmp	r3, #2
 8008250:	d15a      	bne.n	8008308 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	689a      	ldr	r2, [r3, #8]
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	429a      	cmp	r2, r3
 800825c:	d914      	bls.n	8008288 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	689a      	ldr	r2, [r3, #8]
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	1ad2      	subs	r2, r2, r3
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	461a      	mov	r2, r3
 8008272:	6879      	ldr	r1, [r7, #4]
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f001 f8d6 	bl	8009426 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800827a:	2300      	movs	r3, #0
 800827c:	2200      	movs	r2, #0
 800827e:	2100      	movs	r1, #0
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f002 f80b 	bl	800a29c <USBD_LL_PrepareReceive>
 8008286:	e03f      	b.n	8008308 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	68da      	ldr	r2, [r3, #12]
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	429a      	cmp	r2, r3
 8008292:	d11c      	bne.n	80082ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	685a      	ldr	r2, [r3, #4]
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800829c:	429a      	cmp	r2, r3
 800829e:	d316      	bcc.n	80082ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	685a      	ldr	r2, [r3, #4]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d20f      	bcs.n	80082ce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80082ae:	2200      	movs	r2, #0
 80082b0:	2100      	movs	r1, #0
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f001 f8b7 	bl	8009426 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082c0:	2300      	movs	r3, #0
 80082c2:	2200      	movs	r2, #0
 80082c4:	2100      	movs	r1, #0
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f001 ffe8 	bl	800a29c <USBD_LL_PrepareReceive>
 80082cc:	e01c      	b.n	8008308 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b03      	cmp	r3, #3
 80082d8:	d10f      	bne.n	80082fa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d009      	beq.n	80082fa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80082fa:	2180      	movs	r1, #128	; 0x80
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	f001 fec7 	bl	800a090 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f001 f8e1 	bl	80094ca <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d03a      	beq.n	8008388 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f7ff fe42 	bl	8007f9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008320:	e032      	b.n	8008388 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008322:	7afb      	ldrb	r3, [r7, #11]
 8008324:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008328:	b2db      	uxtb	r3, r3
 800832a:	4619      	mov	r1, r3
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f000 f97f 	bl	8008630 <USBD_CoreFindEP>
 8008332:	4603      	mov	r3, r0
 8008334:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008336:	7dfb      	ldrb	r3, [r7, #23]
 8008338:	2bff      	cmp	r3, #255	; 0xff
 800833a:	d025      	beq.n	8008388 <USBD_LL_DataInStage+0x15a>
 800833c:	7dfb      	ldrb	r3, [r7, #23]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d122      	bne.n	8008388 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008348:	b2db      	uxtb	r3, r3
 800834a:	2b03      	cmp	r3, #3
 800834c:	d11c      	bne.n	8008388 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800834e:	7dfa      	ldrb	r2, [r7, #23]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	32ae      	adds	r2, #174	; 0xae
 8008354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008358:	695b      	ldr	r3, [r3, #20]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d014      	beq.n	8008388 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800835e:	7dfa      	ldrb	r2, [r7, #23]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008366:	7dfa      	ldrb	r2, [r7, #23]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	32ae      	adds	r2, #174	; 0xae
 800836c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008370:	695b      	ldr	r3, [r3, #20]
 8008372:	7afa      	ldrb	r2, [r7, #11]
 8008374:	4611      	mov	r1, r2
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	4798      	blx	r3
 800837a:	4603      	mov	r3, r0
 800837c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800837e:	7dbb      	ldrb	r3, [r7, #22]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d001      	beq.n	8008388 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008384:	7dbb      	ldrb	r3, [r7, #22]
 8008386:	e000      	b.n	800838a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	3718      	adds	r7, #24
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b084      	sub	sp, #16
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800839a:	2300      	movs	r3, #0
 800839c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2201      	movs	r2, #1
 80083a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d014      	beq.n	80083f8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00e      	beq.n	80083f8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	6852      	ldr	r2, [r2, #4]
 80083e6:	b2d2      	uxtb	r2, r2
 80083e8:	4611      	mov	r1, r2
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	4798      	blx	r3
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d001      	beq.n	80083f8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80083f4:	2303      	movs	r3, #3
 80083f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80083f8:	2340      	movs	r3, #64	; 0x40
 80083fa:	2200      	movs	r2, #0
 80083fc:	2100      	movs	r1, #0
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f001 fdd2 	bl	8009fa8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2240      	movs	r2, #64	; 0x40
 8008410:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008414:	2340      	movs	r3, #64	; 0x40
 8008416:	2200      	movs	r2, #0
 8008418:	2180      	movs	r1, #128	; 0x80
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f001 fdc4 	bl	8009fa8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2240      	movs	r2, #64	; 0x40
 800842a:	621a      	str	r2, [r3, #32]

  return ret;
 800842c:	7bfb      	ldrb	r3, [r7, #15]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008436:	b480      	push	{r7}
 8008438:	b083      	sub	sp, #12
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
 800843e:	460b      	mov	r3, r1
 8008440:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	78fa      	ldrb	r2, [r7, #3]
 8008446:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	370c      	adds	r7, #12
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr

08008456 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008456:	b480      	push	{r7}
 8008458:	b083      	sub	sp, #12
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008464:	b2da      	uxtb	r2, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2204      	movs	r2, #4
 8008470:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	370c      	adds	r7, #12
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008482:	b480      	push	{r7}
 8008484:	b083      	sub	sp, #12
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008490:	b2db      	uxtb	r3, r3
 8008492:	2b04      	cmp	r3, #4
 8008494:	d106      	bne.n	80084a4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800849c:	b2da      	uxtb	r2, r3
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	370c      	adds	r7, #12
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b082      	sub	sp, #8
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	2b03      	cmp	r3, #3
 80084c4:	d110      	bne.n	80084e8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00b      	beq.n	80084e8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084d6:	69db      	ldr	r3, [r3, #28]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d005      	beq.n	80084e8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084e2:	69db      	ldr	r3, [r3, #28]
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3708      	adds	r7, #8
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b082      	sub	sp, #8
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
 80084fa:	460b      	mov	r3, r1
 80084fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	32ae      	adds	r2, #174	; 0xae
 8008508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d101      	bne.n	8008514 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008510:	2303      	movs	r3, #3
 8008512:	e01c      	b.n	800854e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800851a:	b2db      	uxtb	r3, r3
 800851c:	2b03      	cmp	r3, #3
 800851e:	d115      	bne.n	800854c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	32ae      	adds	r2, #174	; 0xae
 800852a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800852e:	6a1b      	ldr	r3, [r3, #32]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00b      	beq.n	800854c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	32ae      	adds	r2, #174	; 0xae
 800853e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008542:	6a1b      	ldr	r3, [r3, #32]
 8008544:	78fa      	ldrb	r2, [r7, #3]
 8008546:	4611      	mov	r1, r2
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3708      	adds	r7, #8
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b082      	sub	sp, #8
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
 800855e:	460b      	mov	r3, r1
 8008560:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	32ae      	adds	r2, #174	; 0xae
 800856c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d101      	bne.n	8008578 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008574:	2303      	movs	r3, #3
 8008576:	e01c      	b.n	80085b2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800857e:	b2db      	uxtb	r3, r3
 8008580:	2b03      	cmp	r3, #3
 8008582:	d115      	bne.n	80085b0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	32ae      	adds	r2, #174	; 0xae
 800858e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008594:	2b00      	cmp	r3, #0
 8008596:	d00b      	beq.n	80085b0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	32ae      	adds	r2, #174	; 0xae
 80085a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a8:	78fa      	ldrb	r2, [r7, #3]
 80085aa:	4611      	mov	r1, r2
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3708      	adds	r7, #8
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80085ba:	b480      	push	{r7}
 80085bc:	b083      	sub	sp, #12
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80085d8:	2300      	movs	r3, #0
 80085da:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00e      	beq.n	800860c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	6852      	ldr	r2, [r2, #4]
 80085fa:	b2d2      	uxtb	r2, r2
 80085fc:	4611      	mov	r1, r2
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	4798      	blx	r3
 8008602:	4603      	mov	r3, r0
 8008604:	2b00      	cmp	r3, #0
 8008606:	d001      	beq.n	800860c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008608:	2303      	movs	r3, #3
 800860a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800860c:	7bfb      	ldrb	r3, [r7, #15]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008616:	b480      	push	{r7}
 8008618:	b083      	sub	sp, #12
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
 800861e:	460b      	mov	r3, r1
 8008620:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008622:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008624:	4618      	mov	r0, r3
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	460b      	mov	r3, r1
 800863a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800863c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800863e:	4618      	mov	r0, r3
 8008640:	370c      	adds	r7, #12
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr

0800864a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800864a:	b580      	push	{r7, lr}
 800864c:	b086      	sub	sp, #24
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
 8008652:	460b      	mov	r3, r1
 8008654:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800865e:	2300      	movs	r3, #0
 8008660:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	885b      	ldrh	r3, [r3, #2]
 8008666:	b29a      	uxth	r2, r3
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	b29b      	uxth	r3, r3
 800866e:	429a      	cmp	r2, r3
 8008670:	d920      	bls.n	80086b4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	b29b      	uxth	r3, r3
 8008678:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800867a:	e013      	b.n	80086a4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800867c:	f107 030a 	add.w	r3, r7, #10
 8008680:	4619      	mov	r1, r3
 8008682:	6978      	ldr	r0, [r7, #20]
 8008684:	f000 f81b 	bl	80086be <USBD_GetNextDesc>
 8008688:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	785b      	ldrb	r3, [r3, #1]
 800868e:	2b05      	cmp	r3, #5
 8008690:	d108      	bne.n	80086a4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	789b      	ldrb	r3, [r3, #2]
 800869a:	78fa      	ldrb	r2, [r7, #3]
 800869c:	429a      	cmp	r2, r3
 800869e:	d008      	beq.n	80086b2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80086a0:	2300      	movs	r3, #0
 80086a2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	885b      	ldrh	r3, [r3, #2]
 80086a8:	b29a      	uxth	r2, r3
 80086aa:	897b      	ldrh	r3, [r7, #10]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d8e5      	bhi.n	800867c <USBD_GetEpDesc+0x32>
 80086b0:	e000      	b.n	80086b4 <USBD_GetEpDesc+0x6a>
          break;
 80086b2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80086b4:	693b      	ldr	r3, [r7, #16]
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3718      	adds	r7, #24
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80086be:	b480      	push	{r7}
 80086c0:	b085      	sub	sp, #20
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
 80086c6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	881a      	ldrh	r2, [r3, #0]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	4413      	add	r3, r2
 80086d8:	b29a      	uxth	r2, r3
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	461a      	mov	r2, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4413      	add	r3, r2
 80086e8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80086ea:	68fb      	ldr	r3, [r7, #12]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3714      	adds	r7, #20
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b087      	sub	sp, #28
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	3301      	adds	r3, #1
 800870e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008716:	8a3b      	ldrh	r3, [r7, #16]
 8008718:	021b      	lsls	r3, r3, #8
 800871a:	b21a      	sxth	r2, r3
 800871c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008720:	4313      	orrs	r3, r2
 8008722:	b21b      	sxth	r3, r3
 8008724:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008726:	89fb      	ldrh	r3, [r7, #14]
}
 8008728:	4618      	mov	r0, r3
 800872a:	371c      	adds	r7, #28
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800873e:	2300      	movs	r3, #0
 8008740:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800874a:	2b40      	cmp	r3, #64	; 0x40
 800874c:	d005      	beq.n	800875a <USBD_StdDevReq+0x26>
 800874e:	2b40      	cmp	r3, #64	; 0x40
 8008750:	d857      	bhi.n	8008802 <USBD_StdDevReq+0xce>
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00f      	beq.n	8008776 <USBD_StdDevReq+0x42>
 8008756:	2b20      	cmp	r3, #32
 8008758:	d153      	bne.n	8008802 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	32ae      	adds	r2, #174	; 0xae
 8008764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	6839      	ldr	r1, [r7, #0]
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	4798      	blx	r3
 8008770:	4603      	mov	r3, r0
 8008772:	73fb      	strb	r3, [r7, #15]
      break;
 8008774:	e04a      	b.n	800880c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	785b      	ldrb	r3, [r3, #1]
 800877a:	2b09      	cmp	r3, #9
 800877c:	d83b      	bhi.n	80087f6 <USBD_StdDevReq+0xc2>
 800877e:	a201      	add	r2, pc, #4	; (adr r2, 8008784 <USBD_StdDevReq+0x50>)
 8008780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008784:	080087d9 	.word	0x080087d9
 8008788:	080087ed 	.word	0x080087ed
 800878c:	080087f7 	.word	0x080087f7
 8008790:	080087e3 	.word	0x080087e3
 8008794:	080087f7 	.word	0x080087f7
 8008798:	080087b7 	.word	0x080087b7
 800879c:	080087ad 	.word	0x080087ad
 80087a0:	080087f7 	.word	0x080087f7
 80087a4:	080087cf 	.word	0x080087cf
 80087a8:	080087c1 	.word	0x080087c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fa3c 	bl	8008c2c <USBD_GetDescriptor>
          break;
 80087b4:	e024      	b.n	8008800 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80087b6:	6839      	ldr	r1, [r7, #0]
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 fbcb 	bl	8008f54 <USBD_SetAddress>
          break;
 80087be:	e01f      	b.n	8008800 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80087c0:	6839      	ldr	r1, [r7, #0]
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 fc0a 	bl	8008fdc <USBD_SetConfig>
 80087c8:	4603      	mov	r3, r0
 80087ca:	73fb      	strb	r3, [r7, #15]
          break;
 80087cc:	e018      	b.n	8008800 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80087ce:	6839      	ldr	r1, [r7, #0]
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 fcad 	bl	8009130 <USBD_GetConfig>
          break;
 80087d6:	e013      	b.n	8008800 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80087d8:	6839      	ldr	r1, [r7, #0]
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 fcde 	bl	800919c <USBD_GetStatus>
          break;
 80087e0:	e00e      	b.n	8008800 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80087e2:	6839      	ldr	r1, [r7, #0]
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 fd0d 	bl	8009204 <USBD_SetFeature>
          break;
 80087ea:	e009      	b.n	8008800 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80087ec:	6839      	ldr	r1, [r7, #0]
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 fd31 	bl	8009256 <USBD_ClrFeature>
          break;
 80087f4:	e004      	b.n	8008800 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80087f6:	6839      	ldr	r1, [r7, #0]
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 fd88 	bl	800930e <USBD_CtlError>
          break;
 80087fe:	bf00      	nop
      }
      break;
 8008800:	e004      	b.n	800880c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008802:	6839      	ldr	r1, [r7, #0]
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 fd82 	bl	800930e <USBD_CtlError>
      break;
 800880a:	bf00      	nop
  }

  return ret;
 800880c:	7bfb      	ldrb	r3, [r7, #15]
}
 800880e:	4618      	mov	r0, r3
 8008810:	3710      	adds	r7, #16
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop

08008818 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008822:	2300      	movs	r3, #0
 8008824:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800882e:	2b40      	cmp	r3, #64	; 0x40
 8008830:	d005      	beq.n	800883e <USBD_StdItfReq+0x26>
 8008832:	2b40      	cmp	r3, #64	; 0x40
 8008834:	d852      	bhi.n	80088dc <USBD_StdItfReq+0xc4>
 8008836:	2b00      	cmp	r3, #0
 8008838:	d001      	beq.n	800883e <USBD_StdItfReq+0x26>
 800883a:	2b20      	cmp	r3, #32
 800883c:	d14e      	bne.n	80088dc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008844:	b2db      	uxtb	r3, r3
 8008846:	3b01      	subs	r3, #1
 8008848:	2b02      	cmp	r3, #2
 800884a:	d840      	bhi.n	80088ce <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	889b      	ldrh	r3, [r3, #4]
 8008850:	b2db      	uxtb	r3, r3
 8008852:	2b01      	cmp	r3, #1
 8008854:	d836      	bhi.n	80088c4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	889b      	ldrh	r3, [r3, #4]
 800885a:	b2db      	uxtb	r3, r3
 800885c:	4619      	mov	r1, r3
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f7ff fed9 	bl	8008616 <USBD_CoreFindIF>
 8008864:	4603      	mov	r3, r0
 8008866:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008868:	7bbb      	ldrb	r3, [r7, #14]
 800886a:	2bff      	cmp	r3, #255	; 0xff
 800886c:	d01d      	beq.n	80088aa <USBD_StdItfReq+0x92>
 800886e:	7bbb      	ldrb	r3, [r7, #14]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d11a      	bne.n	80088aa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008874:	7bba      	ldrb	r2, [r7, #14]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	32ae      	adds	r2, #174	; 0xae
 800887a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d00f      	beq.n	80088a4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008884:	7bba      	ldrb	r2, [r7, #14]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800888c:	7bba      	ldrb	r2, [r7, #14]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	32ae      	adds	r2, #174	; 0xae
 8008892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	6839      	ldr	r1, [r7, #0]
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	4798      	blx	r3
 800889e:	4603      	mov	r3, r0
 80088a0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80088a2:	e004      	b.n	80088ae <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80088a4:	2303      	movs	r3, #3
 80088a6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80088a8:	e001      	b.n	80088ae <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80088aa:	2303      	movs	r3, #3
 80088ac:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	88db      	ldrh	r3, [r3, #6]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d110      	bne.n	80088d8 <USBD_StdItfReq+0xc0>
 80088b6:	7bfb      	ldrb	r3, [r7, #15]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d10d      	bne.n	80088d8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 fdf1 	bl	80094a4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80088c2:	e009      	b.n	80088d8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80088c4:	6839      	ldr	r1, [r7, #0]
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fd21 	bl	800930e <USBD_CtlError>
          break;
 80088cc:	e004      	b.n	80088d8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80088ce:	6839      	ldr	r1, [r7, #0]
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 fd1c 	bl	800930e <USBD_CtlError>
          break;
 80088d6:	e000      	b.n	80088da <USBD_StdItfReq+0xc2>
          break;
 80088d8:	bf00      	nop
      }
      break;
 80088da:	e004      	b.n	80088e6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80088dc:	6839      	ldr	r1, [r7, #0]
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 fd15 	bl	800930e <USBD_CtlError>
      break;
 80088e4:	bf00      	nop
  }

  return ret;
 80088e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3710      	adds	r7, #16
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80088fa:	2300      	movs	r3, #0
 80088fc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	889b      	ldrh	r3, [r3, #4]
 8008902:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800890c:	2b40      	cmp	r3, #64	; 0x40
 800890e:	d007      	beq.n	8008920 <USBD_StdEPReq+0x30>
 8008910:	2b40      	cmp	r3, #64	; 0x40
 8008912:	f200 817f 	bhi.w	8008c14 <USBD_StdEPReq+0x324>
 8008916:	2b00      	cmp	r3, #0
 8008918:	d02a      	beq.n	8008970 <USBD_StdEPReq+0x80>
 800891a:	2b20      	cmp	r3, #32
 800891c:	f040 817a 	bne.w	8008c14 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008920:	7bbb      	ldrb	r3, [r7, #14]
 8008922:	4619      	mov	r1, r3
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f7ff fe83 	bl	8008630 <USBD_CoreFindEP>
 800892a:	4603      	mov	r3, r0
 800892c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800892e:	7b7b      	ldrb	r3, [r7, #13]
 8008930:	2bff      	cmp	r3, #255	; 0xff
 8008932:	f000 8174 	beq.w	8008c1e <USBD_StdEPReq+0x32e>
 8008936:	7b7b      	ldrb	r3, [r7, #13]
 8008938:	2b00      	cmp	r3, #0
 800893a:	f040 8170 	bne.w	8008c1e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800893e:	7b7a      	ldrb	r2, [r7, #13]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008946:	7b7a      	ldrb	r2, [r7, #13]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	32ae      	adds	r2, #174	; 0xae
 800894c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	2b00      	cmp	r3, #0
 8008954:	f000 8163 	beq.w	8008c1e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008958:	7b7a      	ldrb	r2, [r7, #13]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	32ae      	adds	r2, #174	; 0xae
 800895e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	6839      	ldr	r1, [r7, #0]
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	4798      	blx	r3
 800896a:	4603      	mov	r3, r0
 800896c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800896e:	e156      	b.n	8008c1e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	785b      	ldrb	r3, [r3, #1]
 8008974:	2b03      	cmp	r3, #3
 8008976:	d008      	beq.n	800898a <USBD_StdEPReq+0x9a>
 8008978:	2b03      	cmp	r3, #3
 800897a:	f300 8145 	bgt.w	8008c08 <USBD_StdEPReq+0x318>
 800897e:	2b00      	cmp	r3, #0
 8008980:	f000 809b 	beq.w	8008aba <USBD_StdEPReq+0x1ca>
 8008984:	2b01      	cmp	r3, #1
 8008986:	d03c      	beq.n	8008a02 <USBD_StdEPReq+0x112>
 8008988:	e13e      	b.n	8008c08 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008990:	b2db      	uxtb	r3, r3
 8008992:	2b02      	cmp	r3, #2
 8008994:	d002      	beq.n	800899c <USBD_StdEPReq+0xac>
 8008996:	2b03      	cmp	r3, #3
 8008998:	d016      	beq.n	80089c8 <USBD_StdEPReq+0xd8>
 800899a:	e02c      	b.n	80089f6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800899c:	7bbb      	ldrb	r3, [r7, #14]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00d      	beq.n	80089be <USBD_StdEPReq+0xce>
 80089a2:	7bbb      	ldrb	r3, [r7, #14]
 80089a4:	2b80      	cmp	r3, #128	; 0x80
 80089a6:	d00a      	beq.n	80089be <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80089a8:	7bbb      	ldrb	r3, [r7, #14]
 80089aa:	4619      	mov	r1, r3
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f001 fb6f 	bl	800a090 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80089b2:	2180      	movs	r1, #128	; 0x80
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f001 fb6b 	bl	800a090 <USBD_LL_StallEP>
 80089ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80089bc:	e020      	b.n	8008a00 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80089be:	6839      	ldr	r1, [r7, #0]
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 fca4 	bl	800930e <USBD_CtlError>
              break;
 80089c6:	e01b      	b.n	8008a00 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	885b      	ldrh	r3, [r3, #2]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d10e      	bne.n	80089ee <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80089d0:	7bbb      	ldrb	r3, [r7, #14]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00b      	beq.n	80089ee <USBD_StdEPReq+0xfe>
 80089d6:	7bbb      	ldrb	r3, [r7, #14]
 80089d8:	2b80      	cmp	r3, #128	; 0x80
 80089da:	d008      	beq.n	80089ee <USBD_StdEPReq+0xfe>
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	88db      	ldrh	r3, [r3, #6]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d104      	bne.n	80089ee <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80089e4:	7bbb      	ldrb	r3, [r7, #14]
 80089e6:	4619      	mov	r1, r3
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f001 fb51 	bl	800a090 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 fd58 	bl	80094a4 <USBD_CtlSendStatus>

              break;
 80089f4:	e004      	b.n	8008a00 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80089f6:	6839      	ldr	r1, [r7, #0]
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 fc88 	bl	800930e <USBD_CtlError>
              break;
 80089fe:	bf00      	nop
          }
          break;
 8008a00:	e107      	b.n	8008c12 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	2b02      	cmp	r3, #2
 8008a0c:	d002      	beq.n	8008a14 <USBD_StdEPReq+0x124>
 8008a0e:	2b03      	cmp	r3, #3
 8008a10:	d016      	beq.n	8008a40 <USBD_StdEPReq+0x150>
 8008a12:	e04b      	b.n	8008aac <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a14:	7bbb      	ldrb	r3, [r7, #14]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00d      	beq.n	8008a36 <USBD_StdEPReq+0x146>
 8008a1a:	7bbb      	ldrb	r3, [r7, #14]
 8008a1c:	2b80      	cmp	r3, #128	; 0x80
 8008a1e:	d00a      	beq.n	8008a36 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a20:	7bbb      	ldrb	r3, [r7, #14]
 8008a22:	4619      	mov	r1, r3
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f001 fb33 	bl	800a090 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a2a:	2180      	movs	r1, #128	; 0x80
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f001 fb2f 	bl	800a090 <USBD_LL_StallEP>
 8008a32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a34:	e040      	b.n	8008ab8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008a36:	6839      	ldr	r1, [r7, #0]
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 fc68 	bl	800930e <USBD_CtlError>
              break;
 8008a3e:	e03b      	b.n	8008ab8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	885b      	ldrh	r3, [r3, #2]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d136      	bne.n	8008ab6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008a48:	7bbb      	ldrb	r3, [r7, #14]
 8008a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d004      	beq.n	8008a5c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008a52:	7bbb      	ldrb	r3, [r7, #14]
 8008a54:	4619      	mov	r1, r3
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f001 fb50 	bl	800a0fc <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 fd21 	bl	80094a4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008a62:	7bbb      	ldrb	r3, [r7, #14]
 8008a64:	4619      	mov	r1, r3
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f7ff fde2 	bl	8008630 <USBD_CoreFindEP>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a70:	7b7b      	ldrb	r3, [r7, #13]
 8008a72:	2bff      	cmp	r3, #255	; 0xff
 8008a74:	d01f      	beq.n	8008ab6 <USBD_StdEPReq+0x1c6>
 8008a76:	7b7b      	ldrb	r3, [r7, #13]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d11c      	bne.n	8008ab6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008a7c:	7b7a      	ldrb	r2, [r7, #13]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008a84:	7b7a      	ldrb	r2, [r7, #13]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	32ae      	adds	r2, #174	; 0xae
 8008a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d010      	beq.n	8008ab6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008a94:	7b7a      	ldrb	r2, [r7, #13]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	32ae      	adds	r2, #174	; 0xae
 8008a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	6839      	ldr	r1, [r7, #0]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	4798      	blx	r3
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008aaa:	e004      	b.n	8008ab6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008aac:	6839      	ldr	r1, [r7, #0]
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 fc2d 	bl	800930e <USBD_CtlError>
              break;
 8008ab4:	e000      	b.n	8008ab8 <USBD_StdEPReq+0x1c8>
              break;
 8008ab6:	bf00      	nop
          }
          break;
 8008ab8:	e0ab      	b.n	8008c12 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	2b02      	cmp	r3, #2
 8008ac4:	d002      	beq.n	8008acc <USBD_StdEPReq+0x1dc>
 8008ac6:	2b03      	cmp	r3, #3
 8008ac8:	d032      	beq.n	8008b30 <USBD_StdEPReq+0x240>
 8008aca:	e097      	b.n	8008bfc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008acc:	7bbb      	ldrb	r3, [r7, #14]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d007      	beq.n	8008ae2 <USBD_StdEPReq+0x1f2>
 8008ad2:	7bbb      	ldrb	r3, [r7, #14]
 8008ad4:	2b80      	cmp	r3, #128	; 0x80
 8008ad6:	d004      	beq.n	8008ae2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008ad8:	6839      	ldr	r1, [r7, #0]
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fc17 	bl	800930e <USBD_CtlError>
                break;
 8008ae0:	e091      	b.n	8008c06 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ae2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	da0b      	bge.n	8008b02 <USBD_StdEPReq+0x212>
 8008aea:	7bbb      	ldrb	r3, [r7, #14]
 8008aec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008af0:	4613      	mov	r3, r2
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	4413      	add	r3, r2
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	3310      	adds	r3, #16
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	4413      	add	r3, r2
 8008afe:	3304      	adds	r3, #4
 8008b00:	e00b      	b.n	8008b1a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b02:	7bbb      	ldrb	r3, [r7, #14]
 8008b04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b08:	4613      	mov	r3, r2
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	4413      	add	r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	4413      	add	r3, r2
 8008b18:	3304      	adds	r3, #4
 8008b1a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	2202      	movs	r2, #2
 8008b26:	4619      	mov	r1, r3
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 fc61 	bl	80093f0 <USBD_CtlSendData>
              break;
 8008b2e:	e06a      	b.n	8008c06 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008b30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	da11      	bge.n	8008b5c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008b38:	7bbb      	ldrb	r3, [r7, #14]
 8008b3a:	f003 020f 	and.w	r2, r3, #15
 8008b3e:	6879      	ldr	r1, [r7, #4]
 8008b40:	4613      	mov	r3, r2
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	4413      	add	r3, r2
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	440b      	add	r3, r1
 8008b4a:	3324      	adds	r3, #36	; 0x24
 8008b4c:	881b      	ldrh	r3, [r3, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d117      	bne.n	8008b82 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008b52:	6839      	ldr	r1, [r7, #0]
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 fbda 	bl	800930e <USBD_CtlError>
                  break;
 8008b5a:	e054      	b.n	8008c06 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008b5c:	7bbb      	ldrb	r3, [r7, #14]
 8008b5e:	f003 020f 	and.w	r2, r3, #15
 8008b62:	6879      	ldr	r1, [r7, #4]
 8008b64:	4613      	mov	r3, r2
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	4413      	add	r3, r2
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	440b      	add	r3, r1
 8008b6e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008b72:	881b      	ldrh	r3, [r3, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d104      	bne.n	8008b82 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008b78:	6839      	ldr	r1, [r7, #0]
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 fbc7 	bl	800930e <USBD_CtlError>
                  break;
 8008b80:	e041      	b.n	8008c06 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	da0b      	bge.n	8008ba2 <USBD_StdEPReq+0x2b2>
 8008b8a:	7bbb      	ldrb	r3, [r7, #14]
 8008b8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b90:	4613      	mov	r3, r2
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	4413      	add	r3, r2
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	3310      	adds	r3, #16
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	3304      	adds	r3, #4
 8008ba0:	e00b      	b.n	8008bba <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ba2:	7bbb      	ldrb	r3, [r7, #14]
 8008ba4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ba8:	4613      	mov	r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	4413      	add	r3, r2
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	4413      	add	r3, r2
 8008bb8:	3304      	adds	r3, #4
 8008bba:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008bbc:	7bbb      	ldrb	r3, [r7, #14]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d002      	beq.n	8008bc8 <USBD_StdEPReq+0x2d8>
 8008bc2:	7bbb      	ldrb	r3, [r7, #14]
 8008bc4:	2b80      	cmp	r3, #128	; 0x80
 8008bc6:	d103      	bne.n	8008bd0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	601a      	str	r2, [r3, #0]
 8008bce:	e00e      	b.n	8008bee <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008bd0:	7bbb      	ldrb	r3, [r7, #14]
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f001 fac7 	bl	800a168 <USBD_LL_IsStallEP>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d003      	beq.n	8008be8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	2201      	movs	r2, #1
 8008be4:	601a      	str	r2, [r3, #0]
 8008be6:	e002      	b.n	8008bee <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	2200      	movs	r2, #0
 8008bec:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	2202      	movs	r2, #2
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 fbfb 	bl	80093f0 <USBD_CtlSendData>
              break;
 8008bfa:	e004      	b.n	8008c06 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008bfc:	6839      	ldr	r1, [r7, #0]
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 fb85 	bl	800930e <USBD_CtlError>
              break;
 8008c04:	bf00      	nop
          }
          break;
 8008c06:	e004      	b.n	8008c12 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008c08:	6839      	ldr	r1, [r7, #0]
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 fb7f 	bl	800930e <USBD_CtlError>
          break;
 8008c10:	bf00      	nop
      }
      break;
 8008c12:	e005      	b.n	8008c20 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008c14:	6839      	ldr	r1, [r7, #0]
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 fb79 	bl	800930e <USBD_CtlError>
      break;
 8008c1c:	e000      	b.n	8008c20 <USBD_StdEPReq+0x330>
      break;
 8008c1e:	bf00      	nop
  }

  return ret;
 8008c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
	...

08008c2c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c36:	2300      	movs	r3, #0
 8008c38:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	885b      	ldrh	r3, [r3, #2]
 8008c46:	0a1b      	lsrs	r3, r3, #8
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	3b01      	subs	r3, #1
 8008c4c:	2b0e      	cmp	r3, #14
 8008c4e:	f200 8152 	bhi.w	8008ef6 <USBD_GetDescriptor+0x2ca>
 8008c52:	a201      	add	r2, pc, #4	; (adr r2, 8008c58 <USBD_GetDescriptor+0x2c>)
 8008c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c58:	08008cc9 	.word	0x08008cc9
 8008c5c:	08008ce1 	.word	0x08008ce1
 8008c60:	08008d21 	.word	0x08008d21
 8008c64:	08008ef7 	.word	0x08008ef7
 8008c68:	08008ef7 	.word	0x08008ef7
 8008c6c:	08008e97 	.word	0x08008e97
 8008c70:	08008ec3 	.word	0x08008ec3
 8008c74:	08008ef7 	.word	0x08008ef7
 8008c78:	08008ef7 	.word	0x08008ef7
 8008c7c:	08008ef7 	.word	0x08008ef7
 8008c80:	08008ef7 	.word	0x08008ef7
 8008c84:	08008ef7 	.word	0x08008ef7
 8008c88:	08008ef7 	.word	0x08008ef7
 8008c8c:	08008ef7 	.word	0x08008ef7
 8008c90:	08008c95 	.word	0x08008c95
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c9a:	69db      	ldr	r3, [r3, #28]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00b      	beq.n	8008cb8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ca6:	69db      	ldr	r3, [r3, #28]
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	7c12      	ldrb	r2, [r2, #16]
 8008cac:	f107 0108 	add.w	r1, r7, #8
 8008cb0:	4610      	mov	r0, r2
 8008cb2:	4798      	blx	r3
 8008cb4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cb6:	e126      	b.n	8008f06 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008cb8:	6839      	ldr	r1, [r7, #0]
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 fb27 	bl	800930e <USBD_CtlError>
        err++;
 8008cc0:	7afb      	ldrb	r3, [r7, #11]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	72fb      	strb	r3, [r7, #11]
      break;
 8008cc6:	e11e      	b.n	8008f06 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	7c12      	ldrb	r2, [r2, #16]
 8008cd4:	f107 0108 	add.w	r1, r7, #8
 8008cd8:	4610      	mov	r0, r2
 8008cda:	4798      	blx	r3
 8008cdc:	60f8      	str	r0, [r7, #12]
      break;
 8008cde:	e112      	b.n	8008f06 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	7c1b      	ldrb	r3, [r3, #16]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d10d      	bne.n	8008d04 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf0:	f107 0208 	add.w	r2, r7, #8
 8008cf4:	4610      	mov	r0, r2
 8008cf6:	4798      	blx	r3
 8008cf8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	2202      	movs	r2, #2
 8008d00:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008d02:	e100      	b.n	8008f06 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0c:	f107 0208 	add.w	r2, r7, #8
 8008d10:	4610      	mov	r0, r2
 8008d12:	4798      	blx	r3
 8008d14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	2202      	movs	r2, #2
 8008d1c:	701a      	strb	r2, [r3, #0]
      break;
 8008d1e:	e0f2      	b.n	8008f06 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	885b      	ldrh	r3, [r3, #2]
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	2b05      	cmp	r3, #5
 8008d28:	f200 80ac 	bhi.w	8008e84 <USBD_GetDescriptor+0x258>
 8008d2c:	a201      	add	r2, pc, #4	; (adr r2, 8008d34 <USBD_GetDescriptor+0x108>)
 8008d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d32:	bf00      	nop
 8008d34:	08008d4d 	.word	0x08008d4d
 8008d38:	08008d81 	.word	0x08008d81
 8008d3c:	08008db5 	.word	0x08008db5
 8008d40:	08008de9 	.word	0x08008de9
 8008d44:	08008e1d 	.word	0x08008e1d
 8008d48:	08008e51 	.word	0x08008e51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d00b      	beq.n	8008d70 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	7c12      	ldrb	r2, [r2, #16]
 8008d64:	f107 0108 	add.w	r1, r7, #8
 8008d68:	4610      	mov	r0, r2
 8008d6a:	4798      	blx	r3
 8008d6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d6e:	e091      	b.n	8008e94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d70:	6839      	ldr	r1, [r7, #0]
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 facb 	bl	800930e <USBD_CtlError>
            err++;
 8008d78:	7afb      	ldrb	r3, [r7, #11]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	72fb      	strb	r3, [r7, #11]
          break;
 8008d7e:	e089      	b.n	8008e94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00b      	beq.n	8008da4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	7c12      	ldrb	r2, [r2, #16]
 8008d98:	f107 0108 	add.w	r1, r7, #8
 8008d9c:	4610      	mov	r0, r2
 8008d9e:	4798      	blx	r3
 8008da0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008da2:	e077      	b.n	8008e94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008da4:	6839      	ldr	r1, [r7, #0]
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 fab1 	bl	800930e <USBD_CtlError>
            err++;
 8008dac:	7afb      	ldrb	r3, [r7, #11]
 8008dae:	3301      	adds	r3, #1
 8008db0:	72fb      	strb	r3, [r7, #11]
          break;
 8008db2:	e06f      	b.n	8008e94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dba:	68db      	ldr	r3, [r3, #12]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00b      	beq.n	8008dd8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dc6:	68db      	ldr	r3, [r3, #12]
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	7c12      	ldrb	r2, [r2, #16]
 8008dcc:	f107 0108 	add.w	r1, r7, #8
 8008dd0:	4610      	mov	r0, r2
 8008dd2:	4798      	blx	r3
 8008dd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dd6:	e05d      	b.n	8008e94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008dd8:	6839      	ldr	r1, [r7, #0]
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 fa97 	bl	800930e <USBD_CtlError>
            err++;
 8008de0:	7afb      	ldrb	r3, [r7, #11]
 8008de2:	3301      	adds	r3, #1
 8008de4:	72fb      	strb	r3, [r7, #11]
          break;
 8008de6:	e055      	b.n	8008e94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d00b      	beq.n	8008e0c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dfa:	691b      	ldr	r3, [r3, #16]
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	7c12      	ldrb	r2, [r2, #16]
 8008e00:	f107 0108 	add.w	r1, r7, #8
 8008e04:	4610      	mov	r0, r2
 8008e06:	4798      	blx	r3
 8008e08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e0a:	e043      	b.n	8008e94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008e0c:	6839      	ldr	r1, [r7, #0]
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 fa7d 	bl	800930e <USBD_CtlError>
            err++;
 8008e14:	7afb      	ldrb	r3, [r7, #11]
 8008e16:	3301      	adds	r3, #1
 8008e18:	72fb      	strb	r3, [r7, #11]
          break;
 8008e1a:	e03b      	b.n	8008e94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e22:	695b      	ldr	r3, [r3, #20]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d00b      	beq.n	8008e40 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e2e:	695b      	ldr	r3, [r3, #20]
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	7c12      	ldrb	r2, [r2, #16]
 8008e34:	f107 0108 	add.w	r1, r7, #8
 8008e38:	4610      	mov	r0, r2
 8008e3a:	4798      	blx	r3
 8008e3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e3e:	e029      	b.n	8008e94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008e40:	6839      	ldr	r1, [r7, #0]
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 fa63 	bl	800930e <USBD_CtlError>
            err++;
 8008e48:	7afb      	ldrb	r3, [r7, #11]
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	72fb      	strb	r3, [r7, #11]
          break;
 8008e4e:	e021      	b.n	8008e94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00b      	beq.n	8008e74 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e62:	699b      	ldr	r3, [r3, #24]
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	7c12      	ldrb	r2, [r2, #16]
 8008e68:	f107 0108 	add.w	r1, r7, #8
 8008e6c:	4610      	mov	r0, r2
 8008e6e:	4798      	blx	r3
 8008e70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e72:	e00f      	b.n	8008e94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008e74:	6839      	ldr	r1, [r7, #0]
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 fa49 	bl	800930e <USBD_CtlError>
            err++;
 8008e7c:	7afb      	ldrb	r3, [r7, #11]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	72fb      	strb	r3, [r7, #11]
          break;
 8008e82:	e007      	b.n	8008e94 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008e84:	6839      	ldr	r1, [r7, #0]
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 fa41 	bl	800930e <USBD_CtlError>
          err++;
 8008e8c:	7afb      	ldrb	r3, [r7, #11]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008e92:	bf00      	nop
      }
      break;
 8008e94:	e037      	b.n	8008f06 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	7c1b      	ldrb	r3, [r3, #16]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d109      	bne.n	8008eb2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ea6:	f107 0208 	add.w	r2, r7, #8
 8008eaa:	4610      	mov	r0, r2
 8008eac:	4798      	blx	r3
 8008eae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008eb0:	e029      	b.n	8008f06 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008eb2:	6839      	ldr	r1, [r7, #0]
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 fa2a 	bl	800930e <USBD_CtlError>
        err++;
 8008eba:	7afb      	ldrb	r3, [r7, #11]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	72fb      	strb	r3, [r7, #11]
      break;
 8008ec0:	e021      	b.n	8008f06 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	7c1b      	ldrb	r3, [r3, #16]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d10d      	bne.n	8008ee6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed2:	f107 0208 	add.w	r2, r7, #8
 8008ed6:	4610      	mov	r0, r2
 8008ed8:	4798      	blx	r3
 8008eda:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	2207      	movs	r2, #7
 8008ee2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ee4:	e00f      	b.n	8008f06 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008ee6:	6839      	ldr	r1, [r7, #0]
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 fa10 	bl	800930e <USBD_CtlError>
        err++;
 8008eee:	7afb      	ldrb	r3, [r7, #11]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	72fb      	strb	r3, [r7, #11]
      break;
 8008ef4:	e007      	b.n	8008f06 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008ef6:	6839      	ldr	r1, [r7, #0]
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fa08 	bl	800930e <USBD_CtlError>
      err++;
 8008efe:	7afb      	ldrb	r3, [r7, #11]
 8008f00:	3301      	adds	r3, #1
 8008f02:	72fb      	strb	r3, [r7, #11]
      break;
 8008f04:	bf00      	nop
  }

  if (err != 0U)
 8008f06:	7afb      	ldrb	r3, [r7, #11]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d11e      	bne.n	8008f4a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	88db      	ldrh	r3, [r3, #6]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d016      	beq.n	8008f42 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008f14:	893b      	ldrh	r3, [r7, #8]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00e      	beq.n	8008f38 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	88da      	ldrh	r2, [r3, #6]
 8008f1e:	893b      	ldrh	r3, [r7, #8]
 8008f20:	4293      	cmp	r3, r2
 8008f22:	bf28      	it	cs
 8008f24:	4613      	movcs	r3, r2
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008f2a:	893b      	ldrh	r3, [r7, #8]
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	68f9      	ldr	r1, [r7, #12]
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 fa5d 	bl	80093f0 <USBD_CtlSendData>
 8008f36:	e009      	b.n	8008f4c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008f38:	6839      	ldr	r1, [r7, #0]
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 f9e7 	bl	800930e <USBD_CtlError>
 8008f40:	e004      	b.n	8008f4c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 faae 	bl	80094a4 <USBD_CtlSendStatus>
 8008f48:	e000      	b.n	8008f4c <USBD_GetDescriptor+0x320>
    return;
 8008f4a:	bf00      	nop
  }
}
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop

08008f54 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	889b      	ldrh	r3, [r3, #4]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d131      	bne.n	8008fca <USBD_SetAddress+0x76>
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	88db      	ldrh	r3, [r3, #6]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d12d      	bne.n	8008fca <USBD_SetAddress+0x76>
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	885b      	ldrh	r3, [r3, #2]
 8008f72:	2b7f      	cmp	r3, #127	; 0x7f
 8008f74:	d829      	bhi.n	8008fca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	885b      	ldrh	r3, [r3, #2]
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	2b03      	cmp	r3, #3
 8008f8c:	d104      	bne.n	8008f98 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008f8e:	6839      	ldr	r1, [r7, #0]
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 f9bc 	bl	800930e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f96:	e01d      	b.n	8008fd4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	7bfa      	ldrb	r2, [r7, #15]
 8008f9c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008fa0:	7bfb      	ldrb	r3, [r7, #15]
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f001 f90b 	bl	800a1c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 fa7a 	bl	80094a4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008fb0:	7bfb      	ldrb	r3, [r7, #15]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d004      	beq.n	8008fc0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2202      	movs	r2, #2
 8008fba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fbe:	e009      	b.n	8008fd4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fc8:	e004      	b.n	8008fd4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008fca:	6839      	ldr	r1, [r7, #0]
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 f99e 	bl	800930e <USBD_CtlError>
  }
}
 8008fd2:	bf00      	nop
 8008fd4:	bf00      	nop
 8008fd6:	3710      	adds	r7, #16
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	885b      	ldrh	r3, [r3, #2]
 8008fee:	b2da      	uxtb	r2, r3
 8008ff0:	4b4e      	ldr	r3, [pc, #312]	; (800912c <USBD_SetConfig+0x150>)
 8008ff2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008ff4:	4b4d      	ldr	r3, [pc, #308]	; (800912c <USBD_SetConfig+0x150>)
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d905      	bls.n	8009008 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008ffc:	6839      	ldr	r1, [r7, #0]
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f985 	bl	800930e <USBD_CtlError>
    return USBD_FAIL;
 8009004:	2303      	movs	r3, #3
 8009006:	e08c      	b.n	8009122 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800900e:	b2db      	uxtb	r3, r3
 8009010:	2b02      	cmp	r3, #2
 8009012:	d002      	beq.n	800901a <USBD_SetConfig+0x3e>
 8009014:	2b03      	cmp	r3, #3
 8009016:	d029      	beq.n	800906c <USBD_SetConfig+0x90>
 8009018:	e075      	b.n	8009106 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800901a:	4b44      	ldr	r3, [pc, #272]	; (800912c <USBD_SetConfig+0x150>)
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d020      	beq.n	8009064 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009022:	4b42      	ldr	r3, [pc, #264]	; (800912c <USBD_SetConfig+0x150>)
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	461a      	mov	r2, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800902c:	4b3f      	ldr	r3, [pc, #252]	; (800912c <USBD_SetConfig+0x150>)
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	4619      	mov	r1, r3
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f7fe ffbd 	bl	8007fb2 <USBD_SetClassConfig>
 8009038:	4603      	mov	r3, r0
 800903a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800903c:	7bfb      	ldrb	r3, [r7, #15]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d008      	beq.n	8009054 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009042:	6839      	ldr	r1, [r7, #0]
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 f962 	bl	800930e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2202      	movs	r2, #2
 800904e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009052:	e065      	b.n	8009120 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 fa25 	bl	80094a4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2203      	movs	r2, #3
 800905e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009062:	e05d      	b.n	8009120 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 fa1d 	bl	80094a4 <USBD_CtlSendStatus>
      break;
 800906a:	e059      	b.n	8009120 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800906c:	4b2f      	ldr	r3, [pc, #188]	; (800912c <USBD_SetConfig+0x150>)
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d112      	bne.n	800909a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2202      	movs	r2, #2
 8009078:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800907c:	4b2b      	ldr	r3, [pc, #172]	; (800912c <USBD_SetConfig+0x150>)
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	461a      	mov	r2, r3
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009086:	4b29      	ldr	r3, [pc, #164]	; (800912c <USBD_SetConfig+0x150>)
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	4619      	mov	r1, r3
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f7fe ffac 	bl	8007fea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 fa06 	bl	80094a4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009098:	e042      	b.n	8009120 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800909a:	4b24      	ldr	r3, [pc, #144]	; (800912c <USBD_SetConfig+0x150>)
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	461a      	mov	r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d02a      	beq.n	80090fe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	4619      	mov	r1, r3
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f7fe ff9a 	bl	8007fea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80090b6:	4b1d      	ldr	r3, [pc, #116]	; (800912c <USBD_SetConfig+0x150>)
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	461a      	mov	r2, r3
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80090c0:	4b1a      	ldr	r3, [pc, #104]	; (800912c <USBD_SetConfig+0x150>)
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	4619      	mov	r1, r3
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f7fe ff73 	bl	8007fb2 <USBD_SetClassConfig>
 80090cc:	4603      	mov	r3, r0
 80090ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80090d0:	7bfb      	ldrb	r3, [r7, #15]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00f      	beq.n	80090f6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80090d6:	6839      	ldr	r1, [r7, #0]
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 f918 	bl	800930e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	4619      	mov	r1, r3
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f7fe ff7f 	bl	8007fea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2202      	movs	r2, #2
 80090f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80090f4:	e014      	b.n	8009120 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 f9d4 	bl	80094a4 <USBD_CtlSendStatus>
      break;
 80090fc:	e010      	b.n	8009120 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 f9d0 	bl	80094a4 <USBD_CtlSendStatus>
      break;
 8009104:	e00c      	b.n	8009120 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009106:	6839      	ldr	r1, [r7, #0]
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 f900 	bl	800930e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800910e:	4b07      	ldr	r3, [pc, #28]	; (800912c <USBD_SetConfig+0x150>)
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	4619      	mov	r1, r3
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f7fe ff68 	bl	8007fea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800911a:	2303      	movs	r3, #3
 800911c:	73fb      	strb	r3, [r7, #15]
      break;
 800911e:	bf00      	nop
  }

  return ret;
 8009120:	7bfb      	ldrb	r3, [r7, #15]
}
 8009122:	4618      	mov	r0, r3
 8009124:	3710      	adds	r7, #16
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	200004b8 	.word	0x200004b8

08009130 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	88db      	ldrh	r3, [r3, #6]
 800913e:	2b01      	cmp	r3, #1
 8009140:	d004      	beq.n	800914c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009142:	6839      	ldr	r1, [r7, #0]
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 f8e2 	bl	800930e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800914a:	e023      	b.n	8009194 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009152:	b2db      	uxtb	r3, r3
 8009154:	2b02      	cmp	r3, #2
 8009156:	dc02      	bgt.n	800915e <USBD_GetConfig+0x2e>
 8009158:	2b00      	cmp	r3, #0
 800915a:	dc03      	bgt.n	8009164 <USBD_GetConfig+0x34>
 800915c:	e015      	b.n	800918a <USBD_GetConfig+0x5a>
 800915e:	2b03      	cmp	r3, #3
 8009160:	d00b      	beq.n	800917a <USBD_GetConfig+0x4a>
 8009162:	e012      	b.n	800918a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	3308      	adds	r3, #8
 800916e:	2201      	movs	r2, #1
 8009170:	4619      	mov	r1, r3
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 f93c 	bl	80093f0 <USBD_CtlSendData>
        break;
 8009178:	e00c      	b.n	8009194 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	3304      	adds	r3, #4
 800917e:	2201      	movs	r2, #1
 8009180:	4619      	mov	r1, r3
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 f934 	bl	80093f0 <USBD_CtlSendData>
        break;
 8009188:	e004      	b.n	8009194 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800918a:	6839      	ldr	r1, [r7, #0]
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 f8be 	bl	800930e <USBD_CtlError>
        break;
 8009192:	bf00      	nop
}
 8009194:	bf00      	nop
 8009196:	3708      	adds	r7, #8
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	3b01      	subs	r3, #1
 80091b0:	2b02      	cmp	r3, #2
 80091b2:	d81e      	bhi.n	80091f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	88db      	ldrh	r3, [r3, #6]
 80091b8:	2b02      	cmp	r3, #2
 80091ba:	d004      	beq.n	80091c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80091bc:	6839      	ldr	r1, [r7, #0]
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 f8a5 	bl	800930e <USBD_CtlError>
        break;
 80091c4:	e01a      	b.n	80091fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2201      	movs	r2, #1
 80091ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d005      	beq.n	80091e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	f043 0202 	orr.w	r2, r3, #2
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	330c      	adds	r3, #12
 80091e6:	2202      	movs	r2, #2
 80091e8:	4619      	mov	r1, r3
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 f900 	bl	80093f0 <USBD_CtlSendData>
      break;
 80091f0:	e004      	b.n	80091fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80091f2:	6839      	ldr	r1, [r7, #0]
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 f88a 	bl	800930e <USBD_CtlError>
      break;
 80091fa:	bf00      	nop
  }
}
 80091fc:	bf00      	nop
 80091fe:	3708      	adds	r7, #8
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	885b      	ldrh	r3, [r3, #2]
 8009212:	2b01      	cmp	r3, #1
 8009214:	d107      	bne.n	8009226 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2201      	movs	r2, #1
 800921a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f940 	bl	80094a4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009224:	e013      	b.n	800924e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	885b      	ldrh	r3, [r3, #2]
 800922a:	2b02      	cmp	r3, #2
 800922c:	d10b      	bne.n	8009246 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	889b      	ldrh	r3, [r3, #4]
 8009232:	0a1b      	lsrs	r3, r3, #8
 8009234:	b29b      	uxth	r3, r3
 8009236:	b2da      	uxtb	r2, r3
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f930 	bl	80094a4 <USBD_CtlSendStatus>
}
 8009244:	e003      	b.n	800924e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009246:	6839      	ldr	r1, [r7, #0]
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 f860 	bl	800930e <USBD_CtlError>
}
 800924e:	bf00      	nop
 8009250:	3708      	adds	r7, #8
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b082      	sub	sp, #8
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
 800925e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009266:	b2db      	uxtb	r3, r3
 8009268:	3b01      	subs	r3, #1
 800926a:	2b02      	cmp	r3, #2
 800926c:	d80b      	bhi.n	8009286 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	885b      	ldrh	r3, [r3, #2]
 8009272:	2b01      	cmp	r3, #1
 8009274:	d10c      	bne.n	8009290 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 f910 	bl	80094a4 <USBD_CtlSendStatus>
      }
      break;
 8009284:	e004      	b.n	8009290 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009286:	6839      	ldr	r1, [r7, #0]
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 f840 	bl	800930e <USBD_CtlError>
      break;
 800928e:	e000      	b.n	8009292 <USBD_ClrFeature+0x3c>
      break;
 8009290:	bf00      	nop
  }
}
 8009292:	bf00      	nop
 8009294:	3708      	adds	r7, #8
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b084      	sub	sp, #16
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
 80092a2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	781a      	ldrb	r2, [r3, #0]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	3301      	adds	r3, #1
 80092b4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	781a      	ldrb	r2, [r3, #0]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	3301      	adds	r3, #1
 80092c2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f7ff fa17 	bl	80086f8 <SWAPBYTE>
 80092ca:	4603      	mov	r3, r0
 80092cc:	461a      	mov	r2, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	3301      	adds	r3, #1
 80092d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	3301      	adds	r3, #1
 80092dc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f7ff fa0a 	bl	80086f8 <SWAPBYTE>
 80092e4:	4603      	mov	r3, r0
 80092e6:	461a      	mov	r2, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	3301      	adds	r3, #1
 80092f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	3301      	adds	r3, #1
 80092f6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80092f8:	68f8      	ldr	r0, [r7, #12]
 80092fa:	f7ff f9fd 	bl	80086f8 <SWAPBYTE>
 80092fe:	4603      	mov	r3, r0
 8009300:	461a      	mov	r2, r3
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	80da      	strh	r2, [r3, #6]
}
 8009306:	bf00      	nop
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b082      	sub	sp, #8
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009318:	2180      	movs	r1, #128	; 0x80
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 feb8 	bl	800a090 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009320:	2100      	movs	r1, #0
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 feb4 	bl	800a090 <USBD_LL_StallEP>
}
 8009328:	bf00      	nop
 800932a:	3708      	adds	r7, #8
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b086      	sub	sp, #24
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800933c:	2300      	movs	r3, #0
 800933e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d036      	beq.n	80093b4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800934a:	6938      	ldr	r0, [r7, #16]
 800934c:	f000 f836 	bl	80093bc <USBD_GetLen>
 8009350:	4603      	mov	r3, r0
 8009352:	3301      	adds	r3, #1
 8009354:	b29b      	uxth	r3, r3
 8009356:	005b      	lsls	r3, r3, #1
 8009358:	b29a      	uxth	r2, r3
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800935e:	7dfb      	ldrb	r3, [r7, #23]
 8009360:	68ba      	ldr	r2, [r7, #8]
 8009362:	4413      	add	r3, r2
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	7812      	ldrb	r2, [r2, #0]
 8009368:	701a      	strb	r2, [r3, #0]
  idx++;
 800936a:	7dfb      	ldrb	r3, [r7, #23]
 800936c:	3301      	adds	r3, #1
 800936e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009370:	7dfb      	ldrb	r3, [r7, #23]
 8009372:	68ba      	ldr	r2, [r7, #8]
 8009374:	4413      	add	r3, r2
 8009376:	2203      	movs	r2, #3
 8009378:	701a      	strb	r2, [r3, #0]
  idx++;
 800937a:	7dfb      	ldrb	r3, [r7, #23]
 800937c:	3301      	adds	r3, #1
 800937e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009380:	e013      	b.n	80093aa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009382:	7dfb      	ldrb	r3, [r7, #23]
 8009384:	68ba      	ldr	r2, [r7, #8]
 8009386:	4413      	add	r3, r2
 8009388:	693a      	ldr	r2, [r7, #16]
 800938a:	7812      	ldrb	r2, [r2, #0]
 800938c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	3301      	adds	r3, #1
 8009392:	613b      	str	r3, [r7, #16]
    idx++;
 8009394:	7dfb      	ldrb	r3, [r7, #23]
 8009396:	3301      	adds	r3, #1
 8009398:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800939a:	7dfb      	ldrb	r3, [r7, #23]
 800939c:	68ba      	ldr	r2, [r7, #8]
 800939e:	4413      	add	r3, r2
 80093a0:	2200      	movs	r2, #0
 80093a2:	701a      	strb	r2, [r3, #0]
    idx++;
 80093a4:	7dfb      	ldrb	r3, [r7, #23]
 80093a6:	3301      	adds	r3, #1
 80093a8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d1e7      	bne.n	8009382 <USBD_GetString+0x52>
 80093b2:	e000      	b.n	80093b6 <USBD_GetString+0x86>
    return;
 80093b4:	bf00      	nop
  }
}
 80093b6:	3718      	adds	r7, #24
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80093bc:	b480      	push	{r7}
 80093be:	b085      	sub	sp, #20
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80093c4:	2300      	movs	r3, #0
 80093c6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80093cc:	e005      	b.n	80093da <USBD_GetLen+0x1e>
  {
    len++;
 80093ce:	7bfb      	ldrb	r3, [r7, #15]
 80093d0:	3301      	adds	r3, #1
 80093d2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	3301      	adds	r3, #1
 80093d8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d1f5      	bne.n	80093ce <USBD_GetLen+0x12>
  }

  return len;
 80093e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3714      	adds	r7, #20
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	60b9      	str	r1, [r7, #8]
 80093fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2202      	movs	r2, #2
 8009400:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	68ba      	ldr	r2, [r7, #8]
 8009414:	2100      	movs	r1, #0
 8009416:	68f8      	ldr	r0, [r7, #12]
 8009418:	f000 ff08 	bl	800a22c <USBD_LL_Transmit>

  return USBD_OK;
 800941c:	2300      	movs	r3, #0
}
 800941e:	4618      	mov	r0, r3
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009426:	b580      	push	{r7, lr}
 8009428:	b084      	sub	sp, #16
 800942a:	af00      	add	r7, sp, #0
 800942c:	60f8      	str	r0, [r7, #12]
 800942e:	60b9      	str	r1, [r7, #8]
 8009430:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	68ba      	ldr	r2, [r7, #8]
 8009436:	2100      	movs	r1, #0
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f000 fef7 	bl	800a22c <USBD_LL_Transmit>

  return USBD_OK;
 800943e:	2300      	movs	r3, #0
}
 8009440:	4618      	mov	r0, r3
 8009442:	3710      	adds	r7, #16
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2203      	movs	r2, #3
 8009458:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	68ba      	ldr	r2, [r7, #8]
 8009470:	2100      	movs	r1, #0
 8009472:	68f8      	ldr	r0, [r7, #12]
 8009474:	f000 ff12 	bl	800a29c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b084      	sub	sp, #16
 8009486:	af00      	add	r7, sp, #0
 8009488:	60f8      	str	r0, [r7, #12]
 800948a:	60b9      	str	r1, [r7, #8]
 800948c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	68ba      	ldr	r2, [r7, #8]
 8009492:	2100      	movs	r1, #0
 8009494:	68f8      	ldr	r0, [r7, #12]
 8009496:	f000 ff01 	bl	800a29c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800949a:	2300      	movs	r3, #0
}
 800949c:	4618      	mov	r0, r3
 800949e:	3710      	adds	r7, #16
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2204      	movs	r2, #4
 80094b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80094b4:	2300      	movs	r3, #0
 80094b6:	2200      	movs	r2, #0
 80094b8:	2100      	movs	r1, #0
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 feb6 	bl	800a22c <USBD_LL_Transmit>

  return USBD_OK;
 80094c0:	2300      	movs	r3, #0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3708      	adds	r7, #8
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b082      	sub	sp, #8
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2205      	movs	r2, #5
 80094d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094da:	2300      	movs	r3, #0
 80094dc:	2200      	movs	r2, #0
 80094de:	2100      	movs	r1, #0
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 fedb 	bl	800a29c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094e6:	2300      	movs	r3, #0
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3708      	adds	r7, #8
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	af00      	add	r7, sp, #0
    /* Init Device Library, add supported class and start the library. */
    USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 80094f4:	2200      	movs	r2, #0
 80094f6:	4908      	ldr	r1, [pc, #32]	; (8009518 <MX_USB_DEVICE_Init+0x28>)
 80094f8:	4808      	ldr	r0, [pc, #32]	; (800951c <MX_USB_DEVICE_Init+0x2c>)
 80094fa:	f7fe fcdd 	bl	8007eb8 <USBD_Init>
    USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID);
 80094fe:	4908      	ldr	r1, [pc, #32]	; (8009520 <MX_USB_DEVICE_Init+0x30>)
 8009500:	4806      	ldr	r0, [pc, #24]	; (800951c <MX_USB_DEVICE_Init+0x2c>)
 8009502:	f7fe fd09 	bl	8007f18 <USBD_RegisterClass>
    USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS);
 8009506:	4907      	ldr	r1, [pc, #28]	; (8009524 <MX_USB_DEVICE_Init+0x34>)
 8009508:	4804      	ldr	r0, [pc, #16]	; (800951c <MX_USB_DEVICE_Init+0x2c>)
 800950a:	f7fe fcbb 	bl	8007e84 <USBD_CUSTOM_HID_RegisterInterface>
    USBD_Start(&hUsbDeviceFS);
 800950e:	4803      	ldr	r0, [pc, #12]	; (800951c <MX_USB_DEVICE_Init+0x2c>)
 8009510:	f7fe fd38 	bl	8007f84 <USBD_Start>
}
 8009514:	bf00      	nop
 8009516:	bd80      	pop	{r7, pc}
 8009518:	200000bc 	.word	0x200000bc
 800951c:	200004bc 	.word	0x200004bc
 8009520:	2000000c 	.word	0x2000000c
 8009524:	200000ac 	.word	0x200000ac

08009528 <sendbytesViausb>:

static char usbData[SIZE_BYTE] = {0};				// Size of buffer
static uint8_t usbSendReq = 0;

void sendbytesViausb(uint8_t* data)
{
 8009528:	b4f0      	push	{r4, r5, r6, r7}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
	memcpy(usbData, data, SIZE_BYTE);			// Copy 64 Datas
 8009530:	4a0c      	ldr	r2, [pc, #48]	; (8009564 <sendbytesViausb+0x3c>)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	461c      	mov	r4, r3
 8009536:	4616      	mov	r6, r2
 8009538:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 800953c:	4635      	mov	r5, r6
 800953e:	4623      	mov	r3, r4
 8009540:	6818      	ldr	r0, [r3, #0]
 8009542:	6859      	ldr	r1, [r3, #4]
 8009544:	689a      	ldr	r2, [r3, #8]
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800954a:	3410      	adds	r4, #16
 800954c:	3610      	adds	r6, #16
 800954e:	4564      	cmp	r4, ip
 8009550:	d1f4      	bne.n	800953c <sendbytesViausb+0x14>

	usbSendReq = 1;
 8009552:	4b05      	ldr	r3, [pc, #20]	; (8009568 <sendbytesViausb+0x40>)
 8009554:	2201      	movs	r2, #1
 8009556:	701a      	strb	r2, [r3, #0]
}
 8009558:	bf00      	nop
 800955a:	3708      	adds	r7, #8
 800955c:	46bd      	mov	sp, r7
 800955e:	bcf0      	pop	{r4, r5, r6, r7}
 8009560:	4770      	bx	lr
 8009562:	bf00      	nop
 8009564:	200007d8 	.word	0x200007d8
 8009568:	20000818 	.word	0x20000818

0800956c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800956c:	b480      	push	{r7}
 800956e:	af00      	add	r7, sp, #0
  return (USBD_OK);
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800957c:	b480      	push	{r7}
 800957e:	af00      	add	r7, sp, #0
  return (USBD_OK);
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t* state)
{
 800958c:	b5b0      	push	{r4, r5, r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
	printf("USB In: %s", state);
 8009594:	6879      	ldr	r1, [r7, #4]
 8009596:	485b      	ldr	r0, [pc, #364]	; (8009704 <CUSTOM_HID_OutEvent_FS+0x178>)
 8009598:	f000 ff50 	bl	800a43c <iprintf>
	for (uint16_t idx = 0; idx < 2; idx++){
 800959c:	2300      	movs	r3, #0
 800959e:	81fb      	strh	r3, [r7, #14]
 80095a0:	e00a      	b.n	80095b8 <CUSTOM_HID_OutEvent_FS+0x2c>
		printf("%d - ", state[idx]);
 80095a2:	89fb      	ldrh	r3, [r7, #14]
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	4413      	add	r3, r2
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	4619      	mov	r1, r3
 80095ac:	4856      	ldr	r0, [pc, #344]	; (8009708 <CUSTOM_HID_OutEvent_FS+0x17c>)
 80095ae:	f000 ff45 	bl	800a43c <iprintf>
	for (uint16_t idx = 0; idx < 2; idx++){
 80095b2:	89fb      	ldrh	r3, [r7, #14]
 80095b4:	3301      	adds	r3, #1
 80095b6:	81fb      	strh	r3, [r7, #14]
 80095b8:	89fb      	ldrh	r3, [r7, #14]
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d9f1      	bls.n	80095a2 <CUSTOM_HID_OutEvent_FS+0x16>
	}
	printf("\r\n\n");
 80095be:	4853      	ldr	r0, [pc, #332]	; (800970c <CUSTOM_HID_OutEvent_FS+0x180>)
 80095c0:	f000 ffc2 	bl	800a548 <puts>

	if ((state[0]==0)&&(state[1]==0))
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d10b      	bne.n	80095e4 <CUSTOM_HID_OutEvent_FS+0x58>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	3301      	adds	r3, #1
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d106      	bne.n	80095e4 <CUSTOM_HID_OutEvent_FS+0x58>
	{
		bitFlag |= BFLAG_I2C_WBA;
 80095d6:	4b4e      	ldr	r3, [pc, #312]	; (8009710 <CUSTOM_HID_OutEvent_FS+0x184>)
 80095d8:	881b      	ldrh	r3, [r3, #0]
 80095da:	f043 0302 	orr.w	r3, r3, #2
 80095de:	b29a      	uxth	r2, r3
 80095e0:	4b4b      	ldr	r3, [pc, #300]	; (8009710 <CUSTOM_HID_OutEvent_FS+0x184>)
 80095e2:	801a      	strh	r2, [r3, #0]
	}
	if (((state[0]==0)&&(state[1]==1)) ||		// {WB1}
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d104      	bne.n	80095f6 <CUSTOM_HID_OutEvent_FS+0x6a>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	3301      	adds	r3, #1
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d011      	beq.n	800961a <CUSTOM_HID_OutEvent_FS+0x8e>
		((state[0]==0)&&(state[1]==2)) ||		// {WB2}
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	781b      	ldrb	r3, [r3, #0]
	if (((state[0]==0)&&(state[1]==1)) ||		// {WB1}
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d104      	bne.n	8009608 <CUSTOM_HID_OutEvent_FS+0x7c>
		((state[0]==0)&&(state[1]==2)) ||		// {WB2}
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	3301      	adds	r3, #1
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	2b02      	cmp	r3, #2
 8009606:	d008      	beq.n	800961a <CUSTOM_HID_OutEvent_FS+0x8e>
		((state[0]==0)&&(state[1]==3)))			// {WB3}
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	781b      	ldrb	r3, [r3, #0]
		((state[0]==0)&&(state[1]==2)) ||		// {WB2}
 800960c:	2b00      	cmp	r3, #0
 800960e:	d10b      	bne.n	8009628 <CUSTOM_HID_OutEvent_FS+0x9c>
		((state[0]==0)&&(state[1]==3)))			// {WB3}
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	3301      	adds	r3, #1
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	2b03      	cmp	r3, #3
 8009618:	d106      	bne.n	8009628 <CUSTOM_HID_OutEvent_FS+0x9c>
	{
		bitFlag |= BFLAG_I2C_WBS;
 800961a:	4b3d      	ldr	r3, [pc, #244]	; (8009710 <CUSTOM_HID_OutEvent_FS+0x184>)
 800961c:	881b      	ldrh	r3, [r3, #0]
 800961e:	f043 0304 	orr.w	r3, r3, #4
 8009622:	b29a      	uxth	r2, r3
 8009624:	4b3a      	ldr	r3, [pc, #232]	; (8009710 <CUSTOM_HID_OutEvent_FS+0x184>)
 8009626:	801a      	strh	r2, [r3, #0]
	}

	if ((state[0]==1)&&(state[1]==0))
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	2b01      	cmp	r3, #1
 800962e:	d10b      	bne.n	8009648 <CUSTOM_HID_OutEvent_FS+0xbc>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	3301      	adds	r3, #1
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d106      	bne.n	8009648 <CUSTOM_HID_OutEvent_FS+0xbc>
	{
		bitFlag |= BFLAG_I2C_RBA;
 800963a:	4b35      	ldr	r3, [pc, #212]	; (8009710 <CUSTOM_HID_OutEvent_FS+0x184>)
 800963c:	881b      	ldrh	r3, [r3, #0]
 800963e:	f043 0308 	orr.w	r3, r3, #8
 8009642:	b29a      	uxth	r2, r3
 8009644:	4b32      	ldr	r3, [pc, #200]	; (8009710 <CUSTOM_HID_OutEvent_FS+0x184>)
 8009646:	801a      	strh	r2, [r3, #0]
	}
	if (((state[0]==1)&&(state[1]==1)) ||		// {RB1}
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	781b      	ldrb	r3, [r3, #0]
 800964c:	2b01      	cmp	r3, #1
 800964e:	d104      	bne.n	800965a <CUSTOM_HID_OutEvent_FS+0xce>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	3301      	adds	r3, #1
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	2b01      	cmp	r3, #1
 8009658:	d011      	beq.n	800967e <CUSTOM_HID_OutEvent_FS+0xf2>
		((state[0]==1)&&(state[1]==2)) ||		// {RB2}
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	781b      	ldrb	r3, [r3, #0]
	if (((state[0]==1)&&(state[1]==1)) ||		// {RB1}
 800965e:	2b01      	cmp	r3, #1
 8009660:	d104      	bne.n	800966c <CUSTOM_HID_OutEvent_FS+0xe0>
		((state[0]==1)&&(state[1]==2)) ||		// {RB2}
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	3301      	adds	r3, #1
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	2b02      	cmp	r3, #2
 800966a:	d008      	beq.n	800967e <CUSTOM_HID_OutEvent_FS+0xf2>
		((state[0]==1)&&(state[1]==3)))			// {RB3}
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	781b      	ldrb	r3, [r3, #0]
		((state[0]==1)&&(state[1]==2)) ||		// {RB2}
 8009670:	2b01      	cmp	r3, #1
 8009672:	d10b      	bne.n	800968c <CUSTOM_HID_OutEvent_FS+0x100>
		((state[0]==1)&&(state[1]==3)))			// {RB3}
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	3301      	adds	r3, #1
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	2b03      	cmp	r3, #3
 800967c:	d106      	bne.n	800968c <CUSTOM_HID_OutEvent_FS+0x100>
	{
		bitFlag |= BFLAG_I2C_RBS;
 800967e:	4b24      	ldr	r3, [pc, #144]	; (8009710 <CUSTOM_HID_OutEvent_FS+0x184>)
 8009680:	881b      	ldrh	r3, [r3, #0]
 8009682:	f043 0310 	orr.w	r3, r3, #16
 8009686:	b29a      	uxth	r2, r3
 8009688:	4b21      	ldr	r3, [pc, #132]	; (8009710 <CUSTOM_HID_OutEvent_FS+0x184>)
 800968a:	801a      	strh	r2, [r3, #0]
	}

	if ((state[0]==2)&&(state[1]==0))
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	2b02      	cmp	r3, #2
 8009692:	d124      	bne.n	80096de <CUSTOM_HID_OutEvent_FS+0x152>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	3301      	adds	r3, #1
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d11f      	bne.n	80096de <CUSTOM_HID_OutEvent_FS+0x152>
	{
		u8_usbBuffer[0] = 2;
 800969e:	4b1d      	ldr	r3, [pc, #116]	; (8009714 <CUSTOM_HID_OutEvent_FS+0x188>)
 80096a0:	2202      	movs	r2, #2
 80096a2:	701a      	strb	r2, [r3, #0]
		u8_usbBuffer[1] = 0;
 80096a4:	4b1b      	ldr	r3, [pc, #108]	; (8009714 <CUSTOM_HID_OutEvent_FS+0x188>)
 80096a6:	2200      	movs	r2, #0
 80096a8:	705a      	strb	r2, [r3, #1]

		for (uint8_t idx = 2; idx < SIZE_BYTE; idx++)
 80096aa:	2302      	movs	r3, #2
 80096ac:	737b      	strb	r3, [r7, #13]
 80096ae:	e010      	b.n	80096d2 <CUSTOM_HID_OutEvent_FS+0x146>
		{
			u8_usbBuffer[idx] = rand()%16;
 80096b0:	f000 ff52 	bl	800a558 <rand>
 80096b4:	4603      	mov	r3, r0
 80096b6:	425a      	negs	r2, r3
 80096b8:	f003 030f 	and.w	r3, r3, #15
 80096bc:	f002 020f 	and.w	r2, r2, #15
 80096c0:	bf58      	it	pl
 80096c2:	4253      	negpl	r3, r2
 80096c4:	7b7a      	ldrb	r2, [r7, #13]
 80096c6:	b2d9      	uxtb	r1, r3
 80096c8:	4b12      	ldr	r3, [pc, #72]	; (8009714 <CUSTOM_HID_OutEvent_FS+0x188>)
 80096ca:	5499      	strb	r1, [r3, r2]
		for (uint8_t idx = 2; idx < SIZE_BYTE; idx++)
 80096cc:	7b7b      	ldrb	r3, [r7, #13]
 80096ce:	3301      	adds	r3, #1
 80096d0:	737b      	strb	r3, [r7, #13]
 80096d2:	7b7b      	ldrb	r3, [r7, #13]
 80096d4:	2b3f      	cmp	r3, #63	; 0x3f
 80096d6:	d9eb      	bls.n	80096b0 <CUSTOM_HID_OutEvent_FS+0x124>
		}

		sendbytesViausb(u8_usbBuffer);
 80096d8:	480e      	ldr	r0, [pc, #56]	; (8009714 <CUSTOM_HID_OutEvent_FS+0x188>)
 80096da:	f7ff ff25 	bl	8009528 <sendbytesViausb>
	}
	if ((state[0]==2)&&(state[1]==1))
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	2b02      	cmp	r3, #2
 80096e4:	d136      	bne.n	8009754 <CUSTOM_HID_OutEvent_FS+0x1c8>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	3301      	adds	r3, #1
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d131      	bne.n	8009754 <CUSTOM_HID_OutEvent_FS+0x1c8>
	{
		u8_usbBuffer[0] = 2;
 80096f0:	4b08      	ldr	r3, [pc, #32]	; (8009714 <CUSTOM_HID_OutEvent_FS+0x188>)
 80096f2:	2202      	movs	r2, #2
 80096f4:	701a      	strb	r2, [r3, #0]
		u8_usbBuffer[1] = 0;
 80096f6:	4b07      	ldr	r3, [pc, #28]	; (8009714 <CUSTOM_HID_OutEvent_FS+0x188>)
 80096f8:	2200      	movs	r2, #0
 80096fa:	705a      	strb	r2, [r3, #1]

		for (uint8_t idx = 2; idx < SIZE_BYTE; idx++)
 80096fc:	2302      	movs	r3, #2
 80096fe:	733b      	strb	r3, [r7, #12]
 8009700:	e022      	b.n	8009748 <CUSTOM_HID_OutEvent_FS+0x1bc>
 8009702:	bf00      	nop
 8009704:	0800b688 	.word	0x0800b688
 8009708:	0800b694 	.word	0x0800b694
 800970c:	0800b69c 	.word	0x0800b69c
 8009710:	200004ac 	.word	0x200004ac
 8009714:	2000046c 	.word	0x2000046c
		{
			u8_usbBuffer[idx] += 1;
 8009718:	7b3b      	ldrb	r3, [r7, #12]
 800971a:	4a75      	ldr	r2, [pc, #468]	; (80098f0 <CUSTOM_HID_OutEvent_FS+0x364>)
 800971c:	5cd2      	ldrb	r2, [r2, r3]
 800971e:	7b3b      	ldrb	r3, [r7, #12]
 8009720:	3201      	adds	r2, #1
 8009722:	b2d1      	uxtb	r1, r2
 8009724:	4a72      	ldr	r2, [pc, #456]	; (80098f0 <CUSTOM_HID_OutEvent_FS+0x364>)
 8009726:	54d1      	strb	r1, [r2, r3]
			if (u8_usbBuffer[idx] > 16) {
 8009728:	7b3b      	ldrb	r3, [r7, #12]
 800972a:	4a71      	ldr	r2, [pc, #452]	; (80098f0 <CUSTOM_HID_OutEvent_FS+0x364>)
 800972c:	5cd3      	ldrb	r3, [r2, r3]
 800972e:	2b10      	cmp	r3, #16
 8009730:	d907      	bls.n	8009742 <CUSTOM_HID_OutEvent_FS+0x1b6>
				u8_usbBuffer[idx] -= 16;
 8009732:	7b3b      	ldrb	r3, [r7, #12]
 8009734:	4a6e      	ldr	r2, [pc, #440]	; (80098f0 <CUSTOM_HID_OutEvent_FS+0x364>)
 8009736:	5cd2      	ldrb	r2, [r2, r3]
 8009738:	7b3b      	ldrb	r3, [r7, #12]
 800973a:	3a10      	subs	r2, #16
 800973c:	b2d1      	uxtb	r1, r2
 800973e:	4a6c      	ldr	r2, [pc, #432]	; (80098f0 <CUSTOM_HID_OutEvent_FS+0x364>)
 8009740:	54d1      	strb	r1, [r2, r3]
		for (uint8_t idx = 2; idx < SIZE_BYTE; idx++)
 8009742:	7b3b      	ldrb	r3, [r7, #12]
 8009744:	3301      	adds	r3, #1
 8009746:	733b      	strb	r3, [r7, #12]
 8009748:	7b3b      	ldrb	r3, [r7, #12]
 800974a:	2b3f      	cmp	r3, #63	; 0x3f
 800974c:	d9e4      	bls.n	8009718 <CUSTOM_HID_OutEvent_FS+0x18c>
			}
		}

		sendbytesViausb(u8_usbBuffer);
 800974e:	4868      	ldr	r0, [pc, #416]	; (80098f0 <CUSTOM_HID_OutEvent_FS+0x364>)
 8009750:	f7ff feea 	bl	8009528 <sendbytesViausb>
	}

	// Flag setting for run table

	if ((state[0]==3)&&(state[1]==1))
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	2b03      	cmp	r3, #3
 800975a:	d10b      	bne.n	8009774 <CUSTOM_HID_OutEvent_FS+0x1e8>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	3301      	adds	r3, #1
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	2b01      	cmp	r3, #1
 8009764:	d106      	bne.n	8009774 <CUSTOM_HID_OutEvent_FS+0x1e8>
	{
		bitFlag |= BFLAG_TABLE1;
 8009766:	4b63      	ldr	r3, [pc, #396]	; (80098f4 <CUSTOM_HID_OutEvent_FS+0x368>)
 8009768:	881b      	ldrh	r3, [r3, #0]
 800976a:	f043 0320 	orr.w	r3, r3, #32
 800976e:	b29a      	uxth	r2, r3
 8009770:	4b60      	ldr	r3, [pc, #384]	; (80098f4 <CUSTOM_HID_OutEvent_FS+0x368>)
 8009772:	801a      	strh	r2, [r3, #0]
	}
	if ((state[0]==3)&&(state[1]==2))
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	2b03      	cmp	r3, #3
 800977a:	d10b      	bne.n	8009794 <CUSTOM_HID_OutEvent_FS+0x208>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	3301      	adds	r3, #1
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	2b02      	cmp	r3, #2
 8009784:	d106      	bne.n	8009794 <CUSTOM_HID_OutEvent_FS+0x208>
	{
		bitFlag |= BFLAG_TABLE2;
 8009786:	4b5b      	ldr	r3, [pc, #364]	; (80098f4 <CUSTOM_HID_OutEvent_FS+0x368>)
 8009788:	881b      	ldrh	r3, [r3, #0]
 800978a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800978e:	b29a      	uxth	r2, r3
 8009790:	4b58      	ldr	r3, [pc, #352]	; (80098f4 <CUSTOM_HID_OutEvent_FS+0x368>)
 8009792:	801a      	strh	r2, [r3, #0]
	}
	if ((state[0]==3)&&(state[1]==3))
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	2b03      	cmp	r3, #3
 800979a:	d10b      	bne.n	80097b4 <CUSTOM_HID_OutEvent_FS+0x228>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	3301      	adds	r3, #1
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	2b03      	cmp	r3, #3
 80097a4:	d106      	bne.n	80097b4 <CUSTOM_HID_OutEvent_FS+0x228>
	{
		bitFlag |= BFLAG_TABLE3;
 80097a6:	4b53      	ldr	r3, [pc, #332]	; (80098f4 <CUSTOM_HID_OutEvent_FS+0x368>)
 80097a8:	881b      	ldrh	r3, [r3, #0]
 80097aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097ae:	b29a      	uxth	r2, r3
 80097b0:	4b50      	ldr	r3, [pc, #320]	; (80098f4 <CUSTOM_HID_OutEvent_FS+0x368>)
 80097b2:	801a      	strh	r2, [r3, #0]
	}
	if ((state[0]==3)&&(state[1]==4))
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	2b03      	cmp	r3, #3
 80097ba:	d10b      	bne.n	80097d4 <CUSTOM_HID_OutEvent_FS+0x248>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	3301      	adds	r3, #1
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	2b04      	cmp	r3, #4
 80097c4:	d106      	bne.n	80097d4 <CUSTOM_HID_OutEvent_FS+0x248>
	{
		bitFlag |= BFLAG_TABLE4;
 80097c6:	4b4b      	ldr	r3, [pc, #300]	; (80098f4 <CUSTOM_HID_OutEvent_FS+0x368>)
 80097c8:	881b      	ldrh	r3, [r3, #0]
 80097ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097ce:	b29a      	uxth	r2, r3
 80097d0:	4b48      	ldr	r3, [pc, #288]	; (80098f4 <CUSTOM_HID_OutEvent_FS+0x368>)
 80097d2:	801a      	strh	r2, [r3, #0]
	}
	if ((state[0]==3)&&(state[1]==5))
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	2b03      	cmp	r3, #3
 80097da:	d10b      	bne.n	80097f4 <CUSTOM_HID_OutEvent_FS+0x268>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	3301      	adds	r3, #1
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	2b05      	cmp	r3, #5
 80097e4:	d106      	bne.n	80097f4 <CUSTOM_HID_OutEvent_FS+0x268>
	{
		bitFlag |= BFLAG_TABLE5;
 80097e6:	4b43      	ldr	r3, [pc, #268]	; (80098f4 <CUSTOM_HID_OutEvent_FS+0x368>)
 80097e8:	881b      	ldrh	r3, [r3, #0]
 80097ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80097ee:	b29a      	uxth	r2, r3
 80097f0:	4b40      	ldr	r3, [pc, #256]	; (80098f4 <CUSTOM_HID_OutEvent_FS+0x368>)
 80097f2:	801a      	strh	r2, [r3, #0]
	}
	if ((state[0]==3)&&(state[1]==6))
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	2b03      	cmp	r3, #3
 80097fa:	d10b      	bne.n	8009814 <CUSTOM_HID_OutEvent_FS+0x288>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	3301      	adds	r3, #1
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	2b06      	cmp	r3, #6
 8009804:	d106      	bne.n	8009814 <CUSTOM_HID_OutEvent_FS+0x288>
	{
		bitFlag |= BFLAG_TABLE6;
 8009806:	4b3b      	ldr	r3, [pc, #236]	; (80098f4 <CUSTOM_HID_OutEvent_FS+0x368>)
 8009808:	881b      	ldrh	r3, [r3, #0]
 800980a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800980e:	b29a      	uxth	r2, r3
 8009810:	4b38      	ldr	r3, [pc, #224]	; (80098f4 <CUSTOM_HID_OutEvent_FS+0x368>)
 8009812:	801a      	strh	r2, [r3, #0]
	}
	if ((state[0]==3)&&(state[1]==7))
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	2b03      	cmp	r3, #3
 800981a:	d10b      	bne.n	8009834 <CUSTOM_HID_OutEvent_FS+0x2a8>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	3301      	adds	r3, #1
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	2b07      	cmp	r3, #7
 8009824:	d106      	bne.n	8009834 <CUSTOM_HID_OutEvent_FS+0x2a8>
	{
		bitFlag |= BFLAG_TABLE7;
 8009826:	4b33      	ldr	r3, [pc, #204]	; (80098f4 <CUSTOM_HID_OutEvent_FS+0x368>)
 8009828:	881b      	ldrh	r3, [r3, #0]
 800982a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800982e:	b29a      	uxth	r2, r3
 8009830:	4b30      	ldr	r3, [pc, #192]	; (80098f4 <CUSTOM_HID_OutEvent_FS+0x368>)
 8009832:	801a      	strh	r2, [r3, #0]
	}
	if ((state[0]==3)&&(state[1]==8))
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	2b03      	cmp	r3, #3
 800983a:	d10b      	bne.n	8009854 <CUSTOM_HID_OutEvent_FS+0x2c8>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	3301      	adds	r3, #1
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	2b08      	cmp	r3, #8
 8009844:	d106      	bne.n	8009854 <CUSTOM_HID_OutEvent_FS+0x2c8>
	{
		bitFlag |= BFLAG_TABLE8;
 8009846:	4b2b      	ldr	r3, [pc, #172]	; (80098f4 <CUSTOM_HID_OutEvent_FS+0x368>)
 8009848:	881b      	ldrh	r3, [r3, #0]
 800984a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800984e:	b29a      	uxth	r2, r3
 8009850:	4b28      	ldr	r3, [pc, #160]	; (80098f4 <CUSTOM_HID_OutEvent_FS+0x368>)
 8009852:	801a      	strh	r2, [r3, #0]
	}
	if ((state[0]==3)&&(state[1]==9))
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	2b03      	cmp	r3, #3
 800985a:	d10b      	bne.n	8009874 <CUSTOM_HID_OutEvent_FS+0x2e8>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	3301      	adds	r3, #1
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	2b09      	cmp	r3, #9
 8009864:	d106      	bne.n	8009874 <CUSTOM_HID_OutEvent_FS+0x2e8>
	{
		bitFlag |= BFLAG_TABLE9;
 8009866:	4b23      	ldr	r3, [pc, #140]	; (80098f4 <CUSTOM_HID_OutEvent_FS+0x368>)
 8009868:	881b      	ldrh	r3, [r3, #0]
 800986a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800986e:	b29a      	uxth	r2, r3
 8009870:	4b20      	ldr	r3, [pc, #128]	; (80098f4 <CUSTOM_HID_OutEvent_FS+0x368>)
 8009872:	801a      	strh	r2, [r3, #0]
	}
	if ((state[0]==3)&&(state[1]==10))
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	2b03      	cmp	r3, #3
 800987a:	d10b      	bne.n	8009894 <CUSTOM_HID_OutEvent_FS+0x308>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	3301      	adds	r3, #1
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	2b0a      	cmp	r3, #10
 8009884:	d106      	bne.n	8009894 <CUSTOM_HID_OutEvent_FS+0x308>
	{
		bitFlag |= BFLAG_TABLE10;
 8009886:	4b1b      	ldr	r3, [pc, #108]	; (80098f4 <CUSTOM_HID_OutEvent_FS+0x368>)
 8009888:	881b      	ldrh	r3, [r3, #0]
 800988a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800988e:	b29a      	uxth	r2, r3
 8009890:	4b18      	ldr	r3, [pc, #96]	; (80098f4 <CUSTOM_HID_OutEvent_FS+0x368>)
 8009892:	801a      	strh	r2, [r3, #0]
	}

	if ((state[0]==3)&&(state[1]==10))
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	2b03      	cmp	r3, #3
 800989a:	d10b      	bne.n	80098b4 <CUSTOM_HID_OutEvent_FS+0x328>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	3301      	adds	r3, #1
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	2b0a      	cmp	r3, #10
 80098a4:	d106      	bne.n	80098b4 <CUSTOM_HID_OutEvent_FS+0x328>
	{
		bitFlag |= BFLAG_TABLE10;
 80098a6:	4b13      	ldr	r3, [pc, #76]	; (80098f4 <CUSTOM_HID_OutEvent_FS+0x368>)
 80098a8:	881b      	ldrh	r3, [r3, #0]
 80098aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80098ae:	b29a      	uxth	r2, r3
 80098b0:	4b10      	ldr	r3, [pc, #64]	; (80098f4 <CUSTOM_HID_OutEvent_FS+0x368>)
 80098b2:	801a      	strh	r2, [r3, #0]
	}

	if ((state[0]==4)&&(state[1]==0)){
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	2b04      	cmp	r3, #4
 80098ba:	d10d      	bne.n	80098d8 <CUSTOM_HID_OutEvent_FS+0x34c>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	3301      	adds	r3, #1
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d108      	bne.n	80098d8 <CUSTOM_HID_OutEvent_FS+0x34c>
		bitFlag |= BFLAG_RND;
 80098c6:	4b0b      	ldr	r3, [pc, #44]	; (80098f4 <CUSTOM_HID_OutEvent_FS+0x368>)
 80098c8:	881b      	ldrh	r3, [r3, #0]
 80098ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098d2:	b29a      	uxth	r2, r3
 80098d4:	4b07      	ldr	r3, [pc, #28]	; (80098f4 <CUSTOM_HID_OutEvent_FS+0x368>)
 80098d6:	801a      	strh	r2, [r3, #0]
	}
	if ((state[0]==4)&&(state[1]==1)){
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	2b04      	cmp	r3, #4
 80098de:	d126      	bne.n	800992e <CUSTOM_HID_OutEvent_FS+0x3a2>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	3301      	adds	r3, #1
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d121      	bne.n	800992e <CUSTOM_HID_OutEvent_FS+0x3a2>
		for (uint8_t idx = 0; idx < SIZE_BYTE; idx++)
 80098ea:	2300      	movs	r3, #0
 80098ec:	72fb      	strb	r3, [r7, #11]
 80098ee:	e012      	b.n	8009916 <CUSTOM_HID_OutEvent_FS+0x38a>
 80098f0:	2000046c 	.word	0x2000046c
 80098f4:	200004ac 	.word	0x200004ac
		{
			u8_usbBuffer[idx] = rand()%256;
 80098f8:	f000 fe2e 	bl	800a558 <rand>
 80098fc:	4603      	mov	r3, r0
 80098fe:	425a      	negs	r2, r3
 8009900:	b2db      	uxtb	r3, r3
 8009902:	b2d2      	uxtb	r2, r2
 8009904:	bf58      	it	pl
 8009906:	4253      	negpl	r3, r2
 8009908:	7afa      	ldrb	r2, [r7, #11]
 800990a:	b2d9      	uxtb	r1, r3
 800990c:	4b29      	ldr	r3, [pc, #164]	; (80099b4 <CUSTOM_HID_OutEvent_FS+0x428>)
 800990e:	5499      	strb	r1, [r3, r2]
		for (uint8_t idx = 0; idx < SIZE_BYTE; idx++)
 8009910:	7afb      	ldrb	r3, [r7, #11]
 8009912:	3301      	adds	r3, #1
 8009914:	72fb      	strb	r3, [r7, #11]
 8009916:	7afb      	ldrb	r3, [r7, #11]
 8009918:	2b3f      	cmp	r3, #63	; 0x3f
 800991a:	d9ed      	bls.n	80098f8 <CUSTOM_HID_OutEvent_FS+0x36c>
		}
		u8_usbBuffer[0] = 4;
 800991c:	4b25      	ldr	r3, [pc, #148]	; (80099b4 <CUSTOM_HID_OutEvent_FS+0x428>)
 800991e:	2204      	movs	r2, #4
 8009920:	701a      	strb	r2, [r3, #0]
		u8_usbBuffer[1] = 1;
 8009922:	4b24      	ldr	r3, [pc, #144]	; (80099b4 <CUSTOM_HID_OutEvent_FS+0x428>)
 8009924:	2201      	movs	r2, #1
 8009926:	705a      	strb	r2, [r3, #1]

		sendbytesViausb(u8_usbBuffer);
 8009928:	4822      	ldr	r0, [pc, #136]	; (80099b4 <CUSTOM_HID_OutEvent_FS+0x428>)
 800992a:	f7ff fdfd 	bl	8009528 <sendbytesViausb>
	}
	if ((state[0]==4)&&(state[1]==2)){
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	2b04      	cmp	r3, #4
 8009934:	d10d      	bne.n	8009952 <CUSTOM_HID_OutEvent_FS+0x3c6>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	3301      	adds	r3, #1
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	2b02      	cmp	r3, #2
 800993e:	d108      	bne.n	8009952 <CUSTOM_HID_OutEvent_FS+0x3c6>
		bitFlag |= BFLAG_RND;
 8009940:	4b1d      	ldr	r3, [pc, #116]	; (80099b8 <CUSTOM_HID_OutEvent_FS+0x42c>)
 8009942:	881b      	ldrh	r3, [r3, #0]
 8009944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800994c:	b29a      	uxth	r2, r3
 800994e:	4b1a      	ldr	r3, [pc, #104]	; (80099b8 <CUSTOM_HID_OutEvent_FS+0x42c>)
 8009950:	801a      	strh	r2, [r3, #0]
	}
	if ((state[0]==4)&&(state[1]==3)){
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	2b04      	cmp	r3, #4
 8009958:	d10b      	bne.n	8009972 <CUSTOM_HID_OutEvent_FS+0x3e6>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	3301      	adds	r3, #1
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	2b03      	cmp	r3, #3
 8009962:	d106      	bne.n	8009972 <CUSTOM_HID_OutEvent_FS+0x3e6>
		bitFlag &= ~BFLAG_RND;
 8009964:	4b14      	ldr	r3, [pc, #80]	; (80099b8 <CUSTOM_HID_OutEvent_FS+0x42c>)
 8009966:	881b      	ldrh	r3, [r3, #0]
 8009968:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800996c:	b29a      	uxth	r2, r3
 800996e:	4b12      	ldr	r3, [pc, #72]	; (80099b8 <CUSTOM_HID_OutEvent_FS+0x42c>)
 8009970:	801a      	strh	r2, [r3, #0]
	}


	memset(usbBuffer,0,SIZE_BYTE_HEX);       //Set send buffer out length to 64 bytes.
 8009972:	2240      	movs	r2, #64	; 0x40
 8009974:	2100      	movs	r1, #0
 8009976:	4811      	ldr	r0, [pc, #68]	; (80099bc <CUSTOM_HID_OutEvent_FS+0x430>)
 8009978:	f000 fd58 	bl	800a42c <memset>

	memcpy(&usbBuffer[0],usbData,SIZE_BYTE);
 800997c:	4a0f      	ldr	r2, [pc, #60]	; (80099bc <CUSTOM_HID_OutEvent_FS+0x430>)
 800997e:	4b10      	ldr	r3, [pc, #64]	; (80099c0 <CUSTOM_HID_OutEvent_FS+0x434>)
 8009980:	4614      	mov	r4, r2
 8009982:	461d      	mov	r5, r3
 8009984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800998a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800998c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800998e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009990:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009994:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	usbSendReq = 0;
 8009998:	4b0a      	ldr	r3, [pc, #40]	; (80099c4 <CUSTOM_HID_OutEvent_FS+0x438>)
 800999a:	2200      	movs	r2, #0
 800999c:	701a      	strb	r2, [r3, #0]

	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,(uint8_t*)usbBuffer,SIZE_BYTE_HEX);	//Bagian ini yang mengirim kan data ke USB
 800999e:	2240      	movs	r2, #64	; 0x40
 80099a0:	4906      	ldr	r1, [pc, #24]	; (80099bc <CUSTOM_HID_OutEvent_FS+0x430>)
 80099a2:	4809      	ldr	r0, [pc, #36]	; (80099c8 <CUSTOM_HID_OutEvent_FS+0x43c>)
 80099a4:	f7fe f91e 	bl	8007be4 <USBD_CUSTOM_HID_SendReport>

	return (USBD_OK);
 80099a8:	2300      	movs	r3, #0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3710      	adds	r7, #16
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bdb0      	pop	{r4, r5, r7, pc}
 80099b2:	bf00      	nop
 80099b4:	2000046c 	.word	0x2000046c
 80099b8:	200004ac 	.word	0x200004ac
 80099bc:	20000798 	.word	0x20000798
 80099c0:	200007d8 	.word	0x200007d8
 80099c4:	20000818 	.word	0x20000818
 80099c8:	200004bc 	.word	0x200004bc

080099cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	4603      	mov	r3, r0
 80099d4:	6039      	str	r1, [r7, #0]
 80099d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	2212      	movs	r2, #18
 80099dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80099de:	4b03      	ldr	r3, [pc, #12]	; (80099ec <USBD_FS_DeviceDescriptor+0x20>)
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr
 80099ec:	200000dc 	.word	0x200000dc

080099f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	4603      	mov	r3, r0
 80099f8:	6039      	str	r1, [r7, #0]
 80099fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	2204      	movs	r2, #4
 8009a00:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009a02:	4b03      	ldr	r3, [pc, #12]	; (8009a10 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	370c      	adds	r7, #12
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr
 8009a10:	200000fc 	.word	0x200000fc

08009a14 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	6039      	str	r1, [r7, #0]
 8009a1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a20:	79fb      	ldrb	r3, [r7, #7]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d105      	bne.n	8009a32 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a26:	683a      	ldr	r2, [r7, #0]
 8009a28:	4907      	ldr	r1, [pc, #28]	; (8009a48 <USBD_FS_ProductStrDescriptor+0x34>)
 8009a2a:	4808      	ldr	r0, [pc, #32]	; (8009a4c <USBD_FS_ProductStrDescriptor+0x38>)
 8009a2c:	f7ff fc80 	bl	8009330 <USBD_GetString>
 8009a30:	e004      	b.n	8009a3c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a32:	683a      	ldr	r2, [r7, #0]
 8009a34:	4904      	ldr	r1, [pc, #16]	; (8009a48 <USBD_FS_ProductStrDescriptor+0x34>)
 8009a36:	4805      	ldr	r0, [pc, #20]	; (8009a4c <USBD_FS_ProductStrDescriptor+0x38>)
 8009a38:	f7ff fc7a 	bl	8009330 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a3c:	4b02      	ldr	r3, [pc, #8]	; (8009a48 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3708      	adds	r7, #8
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	2000081c 	.word	0x2000081c
 8009a4c:	0800b6a0 	.word	0x0800b6a0

08009a50 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	4603      	mov	r3, r0
 8009a58:	6039      	str	r1, [r7, #0]
 8009a5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009a5c:	683a      	ldr	r2, [r7, #0]
 8009a5e:	4904      	ldr	r1, [pc, #16]	; (8009a70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009a60:	4804      	ldr	r0, [pc, #16]	; (8009a74 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009a62:	f7ff fc65 	bl	8009330 <USBD_GetString>
  return USBD_StrDesc;
 8009a66:	4b02      	ldr	r3, [pc, #8]	; (8009a70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3708      	adds	r7, #8
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	2000081c 	.word	0x2000081c
 8009a74:	0800b6c0 	.word	0x0800b6c0

08009a78 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	4603      	mov	r3, r0
 8009a80:	6039      	str	r1, [r7, #0]
 8009a82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	221a      	movs	r2, #26
 8009a88:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009a8a:	f000 f855 	bl	8009b38 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009a8e:	4b02      	ldr	r3, [pc, #8]	; (8009a98 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3708      	adds	r7, #8
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	20000100 	.word	0x20000100

08009a9c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	6039      	str	r1, [r7, #0]
 8009aa6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009aa8:	79fb      	ldrb	r3, [r7, #7]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d105      	bne.n	8009aba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009aae:	683a      	ldr	r2, [r7, #0]
 8009ab0:	4907      	ldr	r1, [pc, #28]	; (8009ad0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009ab2:	4808      	ldr	r0, [pc, #32]	; (8009ad4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009ab4:	f7ff fc3c 	bl	8009330 <USBD_GetString>
 8009ab8:	e004      	b.n	8009ac4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009aba:	683a      	ldr	r2, [r7, #0]
 8009abc:	4904      	ldr	r1, [pc, #16]	; (8009ad0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009abe:	4805      	ldr	r0, [pc, #20]	; (8009ad4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009ac0:	f7ff fc36 	bl	8009330 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ac4:	4b02      	ldr	r3, [pc, #8]	; (8009ad0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3708      	adds	r7, #8
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	2000081c 	.word	0x2000081c
 8009ad4:	0800b6d4 	.word	0x0800b6d4

08009ad8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b082      	sub	sp, #8
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	4603      	mov	r3, r0
 8009ae0:	6039      	str	r1, [r7, #0]
 8009ae2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ae4:	79fb      	ldrb	r3, [r7, #7]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d105      	bne.n	8009af6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009aea:	683a      	ldr	r2, [r7, #0]
 8009aec:	4907      	ldr	r1, [pc, #28]	; (8009b0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009aee:	4808      	ldr	r0, [pc, #32]	; (8009b10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009af0:	f7ff fc1e 	bl	8009330 <USBD_GetString>
 8009af4:	e004      	b.n	8009b00 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009af6:	683a      	ldr	r2, [r7, #0]
 8009af8:	4904      	ldr	r1, [pc, #16]	; (8009b0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009afa:	4805      	ldr	r0, [pc, #20]	; (8009b10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009afc:	f7ff fc18 	bl	8009330 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b00:	4b02      	ldr	r3, [pc, #8]	; (8009b0c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3708      	adds	r7, #8
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	2000081c 	.word	0x2000081c
 8009b10:	0800b6e8 	.word	0x0800b6e8

08009b14 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	6039      	str	r1, [r7, #0]
 8009b1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	220c      	movs	r2, #12
 8009b24:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009b26:	4b03      	ldr	r3, [pc, #12]	; (8009b34 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	370c      	adds	r7, #12
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr
 8009b34:	200000f0 	.word	0x200000f0

08009b38 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009b3e:	4b0f      	ldr	r3, [pc, #60]	; (8009b7c <Get_SerialNum+0x44>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009b44:	4b0e      	ldr	r3, [pc, #56]	; (8009b80 <Get_SerialNum+0x48>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009b4a:	4b0e      	ldr	r3, [pc, #56]	; (8009b84 <Get_SerialNum+0x4c>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009b50:	68fa      	ldr	r2, [r7, #12]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	4413      	add	r3, r2
 8009b56:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d009      	beq.n	8009b72 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009b5e:	2208      	movs	r2, #8
 8009b60:	4909      	ldr	r1, [pc, #36]	; (8009b88 <Get_SerialNum+0x50>)
 8009b62:	68f8      	ldr	r0, [r7, #12]
 8009b64:	f000 f814 	bl	8009b90 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009b68:	2204      	movs	r2, #4
 8009b6a:	4908      	ldr	r1, [pc, #32]	; (8009b8c <Get_SerialNum+0x54>)
 8009b6c:	68b8      	ldr	r0, [r7, #8]
 8009b6e:	f000 f80f 	bl	8009b90 <IntToUnicode>
  }
}
 8009b72:	bf00      	nop
 8009b74:	3710      	adds	r7, #16
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	1fff7a10 	.word	0x1fff7a10
 8009b80:	1fff7a14 	.word	0x1fff7a14
 8009b84:	1fff7a18 	.word	0x1fff7a18
 8009b88:	20000102 	.word	0x20000102
 8009b8c:	20000112 	.word	0x20000112

08009b90 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b087      	sub	sp, #28
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	60f8      	str	r0, [r7, #12]
 8009b98:	60b9      	str	r1, [r7, #8]
 8009b9a:	4613      	mov	r3, r2
 8009b9c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	75fb      	strb	r3, [r7, #23]
 8009ba6:	e027      	b.n	8009bf8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	0f1b      	lsrs	r3, r3, #28
 8009bac:	2b09      	cmp	r3, #9
 8009bae:	d80b      	bhi.n	8009bc8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	0f1b      	lsrs	r3, r3, #28
 8009bb4:	b2da      	uxtb	r2, r3
 8009bb6:	7dfb      	ldrb	r3, [r7, #23]
 8009bb8:	005b      	lsls	r3, r3, #1
 8009bba:	4619      	mov	r1, r3
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	440b      	add	r3, r1
 8009bc0:	3230      	adds	r2, #48	; 0x30
 8009bc2:	b2d2      	uxtb	r2, r2
 8009bc4:	701a      	strb	r2, [r3, #0]
 8009bc6:	e00a      	b.n	8009bde <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	0f1b      	lsrs	r3, r3, #28
 8009bcc:	b2da      	uxtb	r2, r3
 8009bce:	7dfb      	ldrb	r3, [r7, #23]
 8009bd0:	005b      	lsls	r3, r3, #1
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	440b      	add	r3, r1
 8009bd8:	3237      	adds	r2, #55	; 0x37
 8009bda:	b2d2      	uxtb	r2, r2
 8009bdc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	011b      	lsls	r3, r3, #4
 8009be2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009be4:	7dfb      	ldrb	r3, [r7, #23]
 8009be6:	005b      	lsls	r3, r3, #1
 8009be8:	3301      	adds	r3, #1
 8009bea:	68ba      	ldr	r2, [r7, #8]
 8009bec:	4413      	add	r3, r2
 8009bee:	2200      	movs	r2, #0
 8009bf0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009bf2:	7dfb      	ldrb	r3, [r7, #23]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	75fb      	strb	r3, [r7, #23]
 8009bf8:	7dfa      	ldrb	r2, [r7, #23]
 8009bfa:	79fb      	ldrb	r3, [r7, #7]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d3d3      	bcc.n	8009ba8 <IntToUnicode+0x18>
  }
}
 8009c00:	bf00      	nop
 8009c02:	bf00      	nop
 8009c04:	371c      	adds	r7, #28
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr
	...

08009c10 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b08a      	sub	sp, #40	; 0x28
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c18:	f107 0314 	add.w	r3, r7, #20
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	601a      	str	r2, [r3, #0]
 8009c20:	605a      	str	r2, [r3, #4]
 8009c22:	609a      	str	r2, [r3, #8]
 8009c24:	60da      	str	r2, [r3, #12]
 8009c26:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c30:	d13a      	bne.n	8009ca8 <HAL_PCD_MspInit+0x98>
  {
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c32:	2300      	movs	r3, #0
 8009c34:	613b      	str	r3, [r7, #16]
 8009c36:	4b1e      	ldr	r3, [pc, #120]	; (8009cb0 <HAL_PCD_MspInit+0xa0>)
 8009c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c3a:	4a1d      	ldr	r2, [pc, #116]	; (8009cb0 <HAL_PCD_MspInit+0xa0>)
 8009c3c:	f043 0301 	orr.w	r3, r3, #1
 8009c40:	6313      	str	r3, [r2, #48]	; 0x30
 8009c42:	4b1b      	ldr	r3, [pc, #108]	; (8009cb0 <HAL_PCD_MspInit+0xa0>)
 8009c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c46:	f003 0301 	and.w	r3, r3, #1
 8009c4a:	613b      	str	r3, [r7, #16]
 8009c4c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin         = USB_DM_Pin|USB_DP_Pin;
 8009c4e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8009c54:	2302      	movs	r3, #2
 8009c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull        = GPIO_NOPULL;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed       = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c5c:	2303      	movs	r3, #3
 8009c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate   = GPIO_AF10_OTG_FS;
 8009c60:	230a      	movs	r3, #10
 8009c62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c64:	f107 0314 	add.w	r3, r7, #20
 8009c68:	4619      	mov	r1, r3
 8009c6a:	4812      	ldr	r0, [pc, #72]	; (8009cb4 <HAL_PCD_MspInit+0xa4>)
 8009c6c:	f7f7 fd14 	bl	8001698 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009c70:	4b0f      	ldr	r3, [pc, #60]	; (8009cb0 <HAL_PCD_MspInit+0xa0>)
 8009c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c74:	4a0e      	ldr	r2, [pc, #56]	; (8009cb0 <HAL_PCD_MspInit+0xa0>)
 8009c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c7a:	6353      	str	r3, [r2, #52]	; 0x34
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	60fb      	str	r3, [r7, #12]
 8009c80:	4b0b      	ldr	r3, [pc, #44]	; (8009cb0 <HAL_PCD_MspInit+0xa0>)
 8009c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c84:	4a0a      	ldr	r2, [pc, #40]	; (8009cb0 <HAL_PCD_MspInit+0xa0>)
 8009c86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009c8a:	6453      	str	r3, [r2, #68]	; 0x44
 8009c8c:	4b08      	ldr	r3, [pc, #32]	; (8009cb0 <HAL_PCD_MspInit+0xa0>)
 8009c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c94:	60fb      	str	r3, [r7, #12]
 8009c96:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009c98:	2200      	movs	r2, #0
 8009c9a:	2100      	movs	r1, #0
 8009c9c:	2043      	movs	r0, #67	; 0x43
 8009c9e:	f7f7 fa9a 	bl	80011d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009ca2:	2043      	movs	r0, #67	; 0x43
 8009ca4:	f7f7 fab3 	bl	800120e <HAL_NVIC_EnableIRQ>
  }
}
 8009ca8:	bf00      	nop
 8009caa:	3728      	adds	r7, #40	; 0x28
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	40023800 	.word	0x40023800
 8009cb4:	40020000 	.word	0x40020000

08009cb8 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */

void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009ccc:	4619      	mov	r1, r3
 8009cce:	4610      	mov	r0, r2
 8009cd0:	f7fe f9a5 	bl	800801e <USBD_LL_SetupStage>
}
 8009cd4:	bf00      	nop
 8009cd6:	3708      	adds	r7, #8
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009cee:	78fa      	ldrb	r2, [r7, #3]
 8009cf0:	6879      	ldr	r1, [r7, #4]
 8009cf2:	4613      	mov	r3, r2
 8009cf4:	00db      	lsls	r3, r3, #3
 8009cf6:	4413      	add	r3, r2
 8009cf8:	009b      	lsls	r3, r3, #2
 8009cfa:	440b      	add	r3, r1
 8009cfc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009d00:	681a      	ldr	r2, [r3, #0]
 8009d02:	78fb      	ldrb	r3, [r7, #3]
 8009d04:	4619      	mov	r1, r3
 8009d06:	f7fe f9df 	bl	80080c8 <USBD_LL_DataOutStage>
}
 8009d0a:	bf00      	nop
 8009d0c:	3708      	adds	r7, #8
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b082      	sub	sp, #8
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
 8009d1a:	460b      	mov	r3, r1
 8009d1c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009d24:	78fa      	ldrb	r2, [r7, #3]
 8009d26:	6879      	ldr	r1, [r7, #4]
 8009d28:	4613      	mov	r3, r2
 8009d2a:	00db      	lsls	r3, r3, #3
 8009d2c:	4413      	add	r3, r2
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	440b      	add	r3, r1
 8009d32:	334c      	adds	r3, #76	; 0x4c
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	78fb      	ldrb	r3, [r7, #3]
 8009d38:	4619      	mov	r1, r3
 8009d3a:	f7fe fa78 	bl	800822e <USBD_LL_DataInStage>
}
 8009d3e:	bf00      	nop
 8009d40:	3708      	adds	r7, #8
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}

08009d46 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8009d46:	b580      	push	{r7, lr}
 8009d48:	b082      	sub	sp, #8
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d54:	4618      	mov	r0, r3
 8009d56:	f7fe fbac 	bl	80084b2 <USBD_LL_SOF>
}
 8009d5a:	bf00      	nop
 8009d5c:	3708      	adds	r7, #8
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b084      	sub	sp, #16
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d002      	beq.n	8009d7c <HAL_PCD_ResetCallback+0x1a>
 8009d76:	2b02      	cmp	r3, #2
 8009d78:	d003      	beq.n	8009d82 <HAL_PCD_ResetCallback+0x20>
 8009d7a:	e005      	b.n	8009d88 <HAL_PCD_ResetCallback+0x26>
  {
    case PCD_SPEED_HIGH:
      speed = USBD_SPEED_HIGH;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8009d80:	e005      	b.n	8009d8e <HAL_PCD_ResetCallback+0x2c>
    case PCD_SPEED_FULL:
      speed = USBD_SPEED_FULL;
 8009d82:	2301      	movs	r3, #1
 8009d84:	73fb      	strb	r3, [r7, #15]
      break;
 8009d86:	e002      	b.n	8009d8e <HAL_PCD_ResetCallback+0x2c>

    default:
      speed = USBD_SPEED_FULL;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8009d8c:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d94:	7bfa      	ldrb	r2, [r7, #15]
 8009d96:	4611      	mov	r1, r2
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f7fe fb4c 	bl	8008436 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009da4:	4618      	mov	r0, r3
 8009da6:	f7fe faf4 	bl	8008392 <USBD_LL_Reset>
}
 8009daa:	bf00      	nop
 8009dac:	3710      	adds	r7, #16
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
	...

08009db4 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7fe fb47 	bl	8008456 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	6812      	ldr	r2, [r2, #0]
 8009dd6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009dda:	f043 0301 	orr.w	r3, r3, #1
 8009dde:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6a1b      	ldr	r3, [r3, #32]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d005      	beq.n	8009df4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009de8:	4b04      	ldr	r3, [pc, #16]	; (8009dfc <HAL_PCD_SuspendCallback+0x48>)
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	4a03      	ldr	r2, [pc, #12]	; (8009dfc <HAL_PCD_SuspendCallback+0x48>)
 8009dee:	f043 0306 	orr.w	r3, r3, #6
 8009df2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009df4:	bf00      	nop
 8009df6:	3708      	adds	r7, #8
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	e000ed00 	.word	0xe000ed00

08009e00 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f7fe fb37 	bl	8008482 <USBD_LL_Resume>
}
 8009e14:	bf00      	nop
 8009e16:	3708      	adds	r7, #8
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	460b      	mov	r3, r1
 8009e26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e2e:	78fa      	ldrb	r2, [r7, #3]
 8009e30:	4611      	mov	r1, r2
 8009e32:	4618      	mov	r0, r3
 8009e34:	f7fe fb8f 	bl	8008556 <USBD_LL_IsoOUTIncomplete>
}
 8009e38:	bf00      	nop
 8009e3a:	3708      	adds	r7, #8
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	460b      	mov	r3, r1
 8009e4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e52:	78fa      	ldrb	r2, [r7, #3]
 8009e54:	4611      	mov	r1, r2
 8009e56:	4618      	mov	r0, r3
 8009e58:	f7fe fb4b 	bl	80084f2 <USBD_LL_IsoINIncomplete>
}
 8009e5c:	bf00      	nop
 8009e5e:	3708      	adds	r7, #8
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <HAL_PCD_ConnectCallback>:
  * @brief  Connect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b082      	sub	sp, #8
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7fe fba1 	bl	80085ba <USBD_LL_DevConnected>
}
 8009e78:	bf00      	nop
 8009e7a:	3708      	adds	r7, #8
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7fe fb9e 	bl	80085d0 <USBD_LL_DevDisconnected>
}
 8009e94:	bf00      	nop
 8009e96:	3708      	adds	r7, #8
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d142      	bne.n	8009f32 <USBD_LL_Init+0x96>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009eac:	4a23      	ldr	r2, [pc, #140]	; (8009f3c <USBD_LL_Init+0xa0>)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	4a21      	ldr	r2, [pc, #132]	; (8009f3c <USBD_LL_Init+0xa0>)
 8009eb8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance              = USB_OTG_FS;
 8009ebc:	4b1f      	ldr	r3, [pc, #124]	; (8009f3c <USBD_LL_Init+0xa0>)
 8009ebe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009ec2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints    = 6;
 8009ec4:	4b1d      	ldr	r3, [pc, #116]	; (8009f3c <USBD_LL_Init+0xa0>)
 8009ec6:	2206      	movs	r2, #6
 8009ec8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed            = PCD_SPEED_FULL;
 8009eca:	4b1c      	ldr	r3, [pc, #112]	; (8009f3c <USBD_LL_Init+0xa0>)
 8009ecc:	2202      	movs	r2, #2
 8009ece:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable       = DISABLE;
 8009ed0:	4b1a      	ldr	r3, [pc, #104]	; (8009f3c <USBD_LL_Init+0xa0>)
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps          = EP_MPS_64;
 8009ed6:	4b19      	ldr	r3, [pc, #100]	; (8009f3c <USBD_LL_Init+0xa0>)
 8009ed8:	2200      	movs	r2, #0
 8009eda:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface       = PCD_PHY_EMBEDDED;
 8009edc:	4b17      	ldr	r3, [pc, #92]	; (8009f3c <USBD_LL_Init+0xa0>)
 8009ede:	2202      	movs	r2, #2
 8009ee0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable       = DISABLE;
 8009ee2:	4b16      	ldr	r3, [pc, #88]	; (8009f3c <USBD_LL_Init+0xa0>)
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009ee8:	4b14      	ldr	r3, [pc, #80]	; (8009f3c <USBD_LL_Init+0xa0>)
 8009eea:	2200      	movs	r2, #0
 8009eec:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable       = DISABLE;
 8009eee:	4b13      	ldr	r3, [pc, #76]	; (8009f3c <USBD_LL_Init+0xa0>)
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable  = ENABLE;
 8009ef4:	4b11      	ldr	r3, [pc, #68]	; (8009f3c <USBD_LL_Init+0xa0>)
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1    = DISABLE;
 8009efa:	4b10      	ldr	r3, [pc, #64]	; (8009f3c <USBD_LL_Init+0xa0>)
 8009efc:	2200      	movs	r2, #0
 8009efe:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009f00:	480e      	ldr	r0, [pc, #56]	; (8009f3c <USBD_LL_Init+0xa0>)
 8009f02:	f7f9 faa8 	bl	8003456 <HAL_PCD_Init>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d004      	beq.n	8009f16 <USBD_LL_Init+0x7a>
  {
      Error_Handler(__FILE__, __LINE__);
 8009f0c:	f240 1121 	movw	r1, #289	; 0x121
 8009f10:	480b      	ldr	r0, [pc, #44]	; (8009f40 <USBD_LL_Init+0xa4>)
 8009f12:	f7f6 fdcd 	bl	8000ab0 <Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009f16:	2180      	movs	r1, #128	; 0x80
 8009f18:	4808      	ldr	r0, [pc, #32]	; (8009f3c <USBD_LL_Init+0xa0>)
 8009f1a:	f7fa fce4 	bl	80048e6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009f1e:	2240      	movs	r2, #64	; 0x40
 8009f20:	2100      	movs	r1, #0
 8009f22:	4806      	ldr	r0, [pc, #24]	; (8009f3c <USBD_LL_Init+0xa0>)
 8009f24:	f7fa fc98 	bl	8004858 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009f28:	2280      	movs	r2, #128	; 0x80
 8009f2a:	2101      	movs	r1, #1
 8009f2c:	4803      	ldr	r0, [pc, #12]	; (8009f3c <USBD_LL_Init+0xa0>)
 8009f2e:	f7fa fc93 	bl	8004858 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009f32:	2300      	movs	r3, #0
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3708      	adds	r7, #8
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}
 8009f3c:	20000a1c 	.word	0x20000a1c
 8009f40:	0800b700 	.word	0x0800b700

08009f44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f50:	2300      	movs	r3, #0
 8009f52:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7f9 fb98 	bl	8003690 <HAL_PCD_Start>
 8009f60:	4603      	mov	r3, r0
 8009f62:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009f64:	7bbb      	ldrb	r3, [r7, #14]
 8009f66:	2b03      	cmp	r3, #3
 8009f68:	d816      	bhi.n	8009f98 <USBD_LL_Start+0x54>
 8009f6a:	a201      	add	r2, pc, #4	; (adr r2, 8009f70 <USBD_LL_Start+0x2c>)
 8009f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f70:	08009f81 	.word	0x08009f81
 8009f74:	08009f87 	.word	0x08009f87
 8009f78:	08009f8d 	.word	0x08009f8d
 8009f7c:	08009f93 	.word	0x08009f93
      case HAL_OK :
        usb_status = USBD_OK;
 8009f80:	2300      	movs	r3, #0
 8009f82:	73fb      	strb	r3, [r7, #15]
      break;
 8009f84:	e00b      	b.n	8009f9e <USBD_LL_Start+0x5a>
      case HAL_ERROR :
        usb_status = USBD_FAIL;
 8009f86:	2303      	movs	r3, #3
 8009f88:	73fb      	strb	r3, [r7, #15]
      break;
 8009f8a:	e008      	b.n	8009f9e <USBD_LL_Start+0x5a>
      case HAL_BUSY :
        usb_status = USBD_BUSY;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8009f90:	e005      	b.n	8009f9e <USBD_LL_Start+0x5a>
      case HAL_TIMEOUT :
        usb_status = USBD_FAIL;
 8009f92:	2303      	movs	r3, #3
 8009f94:	73fb      	strb	r3, [r7, #15]
      break;
 8009f96:	e002      	b.n	8009f9e <USBD_LL_Start+0x5a>
      default :
        usb_status = USBD_FAIL;
 8009f98:	2303      	movs	r3, #3
 8009f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8009f9c:	bf00      	nop
    }
  return usb_status;
 8009f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3710      	adds	r7, #16
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b084      	sub	sp, #16
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	4608      	mov	r0, r1
 8009fb2:	4611      	mov	r1, r2
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	70fb      	strb	r3, [r7, #3]
 8009fba:	460b      	mov	r3, r1
 8009fbc:	70bb      	strb	r3, [r7, #2]
 8009fbe:	4613      	mov	r3, r2
 8009fc0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009fd0:	78bb      	ldrb	r3, [r7, #2]
 8009fd2:	883a      	ldrh	r2, [r7, #0]
 8009fd4:	78f9      	ldrb	r1, [r7, #3]
 8009fd6:	f7fa f852 	bl	800407e <HAL_PCD_EP_Open>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009fde:	7bbb      	ldrb	r3, [r7, #14]
 8009fe0:	2b03      	cmp	r3, #3
 8009fe2:	d817      	bhi.n	800a014 <USBD_LL_OpenEP+0x6c>
 8009fe4:	a201      	add	r2, pc, #4	; (adr r2, 8009fec <USBD_LL_OpenEP+0x44>)
 8009fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fea:	bf00      	nop
 8009fec:	08009ffd 	.word	0x08009ffd
 8009ff0:	0800a003 	.word	0x0800a003
 8009ff4:	0800a009 	.word	0x0800a009
 8009ff8:	0800a00f 	.word	0x0800a00f
      case HAL_OK :
        usb_status = USBD_OK;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	73fb      	strb	r3, [r7, #15]
      break;
 800a000:	e00b      	b.n	800a01a <USBD_LL_OpenEP+0x72>
      case HAL_ERROR :
        usb_status = USBD_FAIL;
 800a002:	2303      	movs	r3, #3
 800a004:	73fb      	strb	r3, [r7, #15]
      break;
 800a006:	e008      	b.n	800a01a <USBD_LL_OpenEP+0x72>
      case HAL_BUSY :
        usb_status = USBD_BUSY;
 800a008:	2301      	movs	r3, #1
 800a00a:	73fb      	strb	r3, [r7, #15]
      break;
 800a00c:	e005      	b.n	800a01a <USBD_LL_OpenEP+0x72>
      case HAL_TIMEOUT :
        usb_status = USBD_FAIL;
 800a00e:	2303      	movs	r3, #3
 800a010:	73fb      	strb	r3, [r7, #15]
      break;
 800a012:	e002      	b.n	800a01a <USBD_LL_OpenEP+0x72>
      default :
        usb_status = USBD_FAIL;
 800a014:	2303      	movs	r3, #3
 800a016:	73fb      	strb	r3, [r7, #15]
      break;
 800a018:	bf00      	nop
    }
    return usb_status;
 800a01a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3710      	adds	r7, #16
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	460b      	mov	r3, r1
 800a02e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a030:	2300      	movs	r3, #0
 800a032:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a034:	2300      	movs	r3, #0
 800a036:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a03e:	78fa      	ldrb	r2, [r7, #3]
 800a040:	4611      	mov	r1, r2
 800a042:	4618      	mov	r0, r3
 800a044:	f7fa f883 	bl	800414e <HAL_PCD_EP_Close>
 800a048:	4603      	mov	r3, r0
 800a04a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a04c:	7bbb      	ldrb	r3, [r7, #14]
 800a04e:	2b03      	cmp	r3, #3
 800a050:	d816      	bhi.n	800a080 <USBD_LL_CloseEP+0x5c>
 800a052:	a201      	add	r2, pc, #4	; (adr r2, 800a058 <USBD_LL_CloseEP+0x34>)
 800a054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a058:	0800a069 	.word	0x0800a069
 800a05c:	0800a06f 	.word	0x0800a06f
 800a060:	0800a075 	.word	0x0800a075
 800a064:	0800a07b 	.word	0x0800a07b
      case HAL_OK :
        usb_status = USBD_OK;
 800a068:	2300      	movs	r3, #0
 800a06a:	73fb      	strb	r3, [r7, #15]
      break;
 800a06c:	e00b      	b.n	800a086 <USBD_LL_CloseEP+0x62>
      case HAL_ERROR :
        usb_status = USBD_FAIL;
 800a06e:	2303      	movs	r3, #3
 800a070:	73fb      	strb	r3, [r7, #15]
      break;
 800a072:	e008      	b.n	800a086 <USBD_LL_CloseEP+0x62>
      case HAL_BUSY :
        usb_status = USBD_BUSY;
 800a074:	2301      	movs	r3, #1
 800a076:	73fb      	strb	r3, [r7, #15]
      break;
 800a078:	e005      	b.n	800a086 <USBD_LL_CloseEP+0x62>
      case HAL_TIMEOUT :
        usb_status = USBD_FAIL;
 800a07a:	2303      	movs	r3, #3
 800a07c:	73fb      	strb	r3, [r7, #15]
      break;
 800a07e:	e002      	b.n	800a086 <USBD_LL_CloseEP+0x62>
      default :
        usb_status = USBD_FAIL;
 800a080:	2303      	movs	r3, #3
 800a082:	73fb      	strb	r3, [r7, #15]
      break;
 800a084:	bf00      	nop
    }
    return usb_status;
 800a086:	7bfb      	ldrb	r3, [r7, #15]
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3710      	adds	r7, #16
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	460b      	mov	r3, r1
 800a09a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a09c:	2300      	movs	r3, #0
 800a09e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a0aa:	78fa      	ldrb	r2, [r7, #3]
 800a0ac:	4611      	mov	r1, r2
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7fa f92c 	bl	800430c <HAL_PCD_EP_SetStall>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a0b8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ba:	2b03      	cmp	r3, #3
 800a0bc:	d816      	bhi.n	800a0ec <USBD_LL_StallEP+0x5c>
 800a0be:	a201      	add	r2, pc, #4	; (adr r2, 800a0c4 <USBD_LL_StallEP+0x34>)
 800a0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c4:	0800a0d5 	.word	0x0800a0d5
 800a0c8:	0800a0db 	.word	0x0800a0db
 800a0cc:	0800a0e1 	.word	0x0800a0e1
 800a0d0:	0800a0e7 	.word	0x0800a0e7
      case HAL_OK :
        usb_status = USBD_OK;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	73fb      	strb	r3, [r7, #15]
      break;
 800a0d8:	e00b      	b.n	800a0f2 <USBD_LL_StallEP+0x62>
      case HAL_ERROR :
        usb_status = USBD_FAIL;
 800a0da:	2303      	movs	r3, #3
 800a0dc:	73fb      	strb	r3, [r7, #15]
      break;
 800a0de:	e008      	b.n	800a0f2 <USBD_LL_StallEP+0x62>
      case HAL_BUSY :
        usb_status = USBD_BUSY;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	73fb      	strb	r3, [r7, #15]
      break;
 800a0e4:	e005      	b.n	800a0f2 <USBD_LL_StallEP+0x62>
      case HAL_TIMEOUT :
        usb_status = USBD_FAIL;
 800a0e6:	2303      	movs	r3, #3
 800a0e8:	73fb      	strb	r3, [r7, #15]
      break;
 800a0ea:	e002      	b.n	800a0f2 <USBD_LL_StallEP+0x62>
      default :
        usb_status = USBD_FAIL;
 800a0ec:	2303      	movs	r3, #3
 800a0ee:	73fb      	strb	r3, [r7, #15]
      break;
 800a0f0:	bf00      	nop
    }
    return usb_status;
 800a0f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3710      	adds	r7, #16
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b084      	sub	sp, #16
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	460b      	mov	r3, r1
 800a106:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a108:	2300      	movs	r3, #0
 800a10a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a10c:	2300      	movs	r3, #0
 800a10e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a116:	78fa      	ldrb	r2, [r7, #3]
 800a118:	4611      	mov	r1, r2
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7fa f95a 	bl	80043d4 <HAL_PCD_EP_ClrStall>
 800a120:	4603      	mov	r3, r0
 800a122:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a124:	7bbb      	ldrb	r3, [r7, #14]
 800a126:	2b03      	cmp	r3, #3
 800a128:	d816      	bhi.n	800a158 <USBD_LL_ClearStallEP+0x5c>
 800a12a:	a201      	add	r2, pc, #4	; (adr r2, 800a130 <USBD_LL_ClearStallEP+0x34>)
 800a12c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a130:	0800a141 	.word	0x0800a141
 800a134:	0800a147 	.word	0x0800a147
 800a138:	0800a14d 	.word	0x0800a14d
 800a13c:	0800a153 	.word	0x0800a153
      case HAL_OK :
        usb_status = USBD_OK;
 800a140:	2300      	movs	r3, #0
 800a142:	73fb      	strb	r3, [r7, #15]
      break;
 800a144:	e00b      	b.n	800a15e <USBD_LL_ClearStallEP+0x62>
      case HAL_ERROR :
        usb_status = USBD_FAIL;
 800a146:	2303      	movs	r3, #3
 800a148:	73fb      	strb	r3, [r7, #15]
      break;
 800a14a:	e008      	b.n	800a15e <USBD_LL_ClearStallEP+0x62>
      case HAL_BUSY :
        usb_status = USBD_BUSY;
 800a14c:	2301      	movs	r3, #1
 800a14e:	73fb      	strb	r3, [r7, #15]
      break;
 800a150:	e005      	b.n	800a15e <USBD_LL_ClearStallEP+0x62>
      case HAL_TIMEOUT :
        usb_status = USBD_FAIL;
 800a152:	2303      	movs	r3, #3
 800a154:	73fb      	strb	r3, [r7, #15]
      break;
 800a156:	e002      	b.n	800a15e <USBD_LL_ClearStallEP+0x62>
      default :
        usb_status = USBD_FAIL;
 800a158:	2303      	movs	r3, #3
 800a15a:	73fb      	strb	r3, [r7, #15]
      break;
 800a15c:	bf00      	nop
    }
    return usb_status;
 800a15e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a160:	4618      	mov	r0, r3
 800a162:	3710      	adds	r7, #16
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a168:	b480      	push	{r7}
 800a16a:	b085      	sub	sp, #20
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	460b      	mov	r3, r1
 800a172:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a17a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a17c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a180:	2b00      	cmp	r3, #0
 800a182:	da0b      	bge.n	800a19c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a184:	78fb      	ldrb	r3, [r7, #3]
 800a186:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a18a:	68f9      	ldr	r1, [r7, #12]
 800a18c:	4613      	mov	r3, r2
 800a18e:	00db      	lsls	r3, r3, #3
 800a190:	4413      	add	r3, r2
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	440b      	add	r3, r1
 800a196:	333e      	adds	r3, #62	; 0x3e
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	e00b      	b.n	800a1b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a19c:	78fb      	ldrb	r3, [r7, #3]
 800a19e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1a2:	68f9      	ldr	r1, [r7, #12]
 800a1a4:	4613      	mov	r3, r2
 800a1a6:	00db      	lsls	r3, r3, #3
 800a1a8:	4413      	add	r3, r2
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	440b      	add	r3, r1
 800a1ae:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a1b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3714      	adds	r7, #20
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1da:	78fa      	ldrb	r2, [r7, #3]
 800a1dc:	4611      	mov	r1, r2
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f7f9 ff28 	bl	8004034 <HAL_PCD_SetAddress>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a1e8:	7bbb      	ldrb	r3, [r7, #14]
 800a1ea:	2b03      	cmp	r3, #3
 800a1ec:	d816      	bhi.n	800a21c <USBD_LL_SetUSBAddress+0x5c>
 800a1ee:	a201      	add	r2, pc, #4	; (adr r2, 800a1f4 <USBD_LL_SetUSBAddress+0x34>)
 800a1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f4:	0800a205 	.word	0x0800a205
 800a1f8:	0800a20b 	.word	0x0800a20b
 800a1fc:	0800a211 	.word	0x0800a211
 800a200:	0800a217 	.word	0x0800a217
      case HAL_OK :
        usb_status = USBD_OK;
 800a204:	2300      	movs	r3, #0
 800a206:	73fb      	strb	r3, [r7, #15]
      break;
 800a208:	e00b      	b.n	800a222 <USBD_LL_SetUSBAddress+0x62>
      case HAL_ERROR :
        usb_status = USBD_FAIL;
 800a20a:	2303      	movs	r3, #3
 800a20c:	73fb      	strb	r3, [r7, #15]
      break;
 800a20e:	e008      	b.n	800a222 <USBD_LL_SetUSBAddress+0x62>
      case HAL_BUSY :
        usb_status = USBD_BUSY;
 800a210:	2301      	movs	r3, #1
 800a212:	73fb      	strb	r3, [r7, #15]
      break;
 800a214:	e005      	b.n	800a222 <USBD_LL_SetUSBAddress+0x62>
      case HAL_TIMEOUT :
        usb_status = USBD_FAIL;
 800a216:	2303      	movs	r3, #3
 800a218:	73fb      	strb	r3, [r7, #15]
      break;
 800a21a:	e002      	b.n	800a222 <USBD_LL_SetUSBAddress+0x62>
      default :
        usb_status = USBD_FAIL;
 800a21c:	2303      	movs	r3, #3
 800a21e:	73fb      	strb	r3, [r7, #15]
      break;
 800a220:	bf00      	nop
    }
    return usb_status;
 800a222:	7bfb      	ldrb	r3, [r7, #15]
}
 800a224:	4618      	mov	r0, r3
 800a226:	3710      	adds	r7, #16
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b086      	sub	sp, #24
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	607a      	str	r2, [r7, #4]
 800a236:	603b      	str	r3, [r7, #0]
 800a238:	460b      	mov	r3, r1
 800a23a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a23c:	2300      	movs	r3, #0
 800a23e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a240:	2300      	movs	r3, #0
 800a242:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a24a:	7af9      	ldrb	r1, [r7, #11]
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	f7fa f812 	bl	8004278 <HAL_PCD_EP_Transmit>
 800a254:	4603      	mov	r3, r0
 800a256:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800a258:	7dbb      	ldrb	r3, [r7, #22]
 800a25a:	2b03      	cmp	r3, #3
 800a25c:	d816      	bhi.n	800a28c <USBD_LL_Transmit+0x60>
 800a25e:	a201      	add	r2, pc, #4	; (adr r2, 800a264 <USBD_LL_Transmit+0x38>)
 800a260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a264:	0800a275 	.word	0x0800a275
 800a268:	0800a27b 	.word	0x0800a27b
 800a26c:	0800a281 	.word	0x0800a281
 800a270:	0800a287 	.word	0x0800a287
      case HAL_OK :
        usb_status = USBD_OK;
 800a274:	2300      	movs	r3, #0
 800a276:	75fb      	strb	r3, [r7, #23]
      break;
 800a278:	e00b      	b.n	800a292 <USBD_LL_Transmit+0x66>
      case HAL_ERROR :
        usb_status = USBD_FAIL;
 800a27a:	2303      	movs	r3, #3
 800a27c:	75fb      	strb	r3, [r7, #23]
      break;
 800a27e:	e008      	b.n	800a292 <USBD_LL_Transmit+0x66>
      case HAL_BUSY :
        usb_status = USBD_BUSY;
 800a280:	2301      	movs	r3, #1
 800a282:	75fb      	strb	r3, [r7, #23]
      break;
 800a284:	e005      	b.n	800a292 <USBD_LL_Transmit+0x66>
      case HAL_TIMEOUT :
        usb_status = USBD_FAIL;
 800a286:	2303      	movs	r3, #3
 800a288:	75fb      	strb	r3, [r7, #23]
      break;
 800a28a:	e002      	b.n	800a292 <USBD_LL_Transmit+0x66>
      default :
        usb_status = USBD_FAIL;
 800a28c:	2303      	movs	r3, #3
 800a28e:	75fb      	strb	r3, [r7, #23]
      break;
 800a290:	bf00      	nop
    }
    return usb_status;
 800a292:	7dfb      	ldrb	r3, [r7, #23]
}
 800a294:	4618      	mov	r0, r3
 800a296:	3718      	adds	r7, #24
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b086      	sub	sp, #24
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	607a      	str	r2, [r7, #4]
 800a2a6:	603b      	str	r3, [r7, #0]
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a2ba:	7af9      	ldrb	r1, [r7, #11]
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	f7f9 ff8f 	bl	80041e2 <HAL_PCD_EP_Receive>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800a2c8:	7dbb      	ldrb	r3, [r7, #22]
 800a2ca:	2b03      	cmp	r3, #3
 800a2cc:	d816      	bhi.n	800a2fc <USBD_LL_PrepareReceive+0x60>
 800a2ce:	a201      	add	r2, pc, #4	; (adr r2, 800a2d4 <USBD_LL_PrepareReceive+0x38>)
 800a2d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d4:	0800a2e5 	.word	0x0800a2e5
 800a2d8:	0800a2eb 	.word	0x0800a2eb
 800a2dc:	0800a2f1 	.word	0x0800a2f1
 800a2e0:	0800a2f7 	.word	0x0800a2f7
      case HAL_OK :
        usb_status = USBD_OK;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	75fb      	strb	r3, [r7, #23]
      break;
 800a2e8:	e00b      	b.n	800a302 <USBD_LL_PrepareReceive+0x66>
      case HAL_ERROR :
        usb_status = USBD_FAIL;
 800a2ea:	2303      	movs	r3, #3
 800a2ec:	75fb      	strb	r3, [r7, #23]
      break;
 800a2ee:	e008      	b.n	800a302 <USBD_LL_PrepareReceive+0x66>
      case HAL_BUSY :
        usb_status = USBD_BUSY;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	75fb      	strb	r3, [r7, #23]
      break;
 800a2f4:	e005      	b.n	800a302 <USBD_LL_PrepareReceive+0x66>
      case HAL_TIMEOUT :
        usb_status = USBD_FAIL;
 800a2f6:	2303      	movs	r3, #3
 800a2f8:	75fb      	strb	r3, [r7, #23]
      break;
 800a2fa:	e002      	b.n	800a302 <USBD_LL_PrepareReceive+0x66>
      default :
        usb_status = USBD_FAIL;
 800a2fc:	2303      	movs	r3, #3
 800a2fe:	75fb      	strb	r3, [r7, #23]
      break;
 800a300:	bf00      	nop
    }
    return usb_status;
 800a302:	7dfb      	ldrb	r3, [r7, #23]
}
 800a304:	4618      	mov	r0, r3
 800a306:	3718      	adds	r7, #24
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	460b      	mov	r3, r1
 800a316:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a318:	78fb      	ldrb	r3, [r7, #3]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d002      	beq.n	800a324 <HAL_PCDEx_LPM_Callback+0x18>
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d01f      	beq.n	800a362 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a322:	e03b      	b.n	800a39c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6a1b      	ldr	r3, [r3, #32]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d007      	beq.n	800a33c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800a32c:	f7f6 faa2 	bl	8000874 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a330:	4b1c      	ldr	r3, [pc, #112]	; (800a3a4 <HAL_PCDEx_LPM_Callback+0x98>)
 800a332:	691b      	ldr	r3, [r3, #16]
 800a334:	4a1b      	ldr	r2, [pc, #108]	; (800a3a4 <HAL_PCDEx_LPM_Callback+0x98>)
 800a336:	f023 0306 	bic.w	r3, r3, #6
 800a33a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	687a      	ldr	r2, [r7, #4]
 800a348:	6812      	ldr	r2, [r2, #0]
 800a34a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a34e:	f023 0301 	bic.w	r3, r3, #1
 800a352:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7fe f891 	bl	8008482 <USBD_LL_Resume>
    break;
 800a360:	e01c      	b.n	800a39c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	6812      	ldr	r2, [r2, #0]
 800a370:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a374:	f043 0301 	orr.w	r3, r3, #1
 800a378:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a380:	4618      	mov	r0, r3
 800a382:	f7fe f868 	bl	8008456 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6a1b      	ldr	r3, [r3, #32]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d005      	beq.n	800a39a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a38e:	4b05      	ldr	r3, [pc, #20]	; (800a3a4 <HAL_PCDEx_LPM_Callback+0x98>)
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	4a04      	ldr	r2, [pc, #16]	; (800a3a4 <HAL_PCDEx_LPM_Callback+0x98>)
 800a394:	f043 0306 	orr.w	r3, r3, #6
 800a398:	6113      	str	r3, [r2, #16]
    break;
 800a39a:	bf00      	nop
}
 800a39c:	bf00      	nop
 800a39e:	3708      	adds	r7, #8
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	e000ed00 	.word	0xe000ed00

0800a3a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
    static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
    return mem;
 800a3b0:	4b03      	ldr	r3, [pc, #12]	; (800a3c0 <USBD_static_malloc+0x18>)
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	370c      	adds	r7, #12
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr
 800a3be:	bf00      	nop
 800a3c0:	20000f28 	.word	0x20000f28

0800a3c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]

}
 800a3cc:	bf00      	nop
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <__errno>:
 800a3d8:	4b01      	ldr	r3, [pc, #4]	; (800a3e0 <__errno+0x8>)
 800a3da:	6818      	ldr	r0, [r3, #0]
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	2000011c 	.word	0x2000011c

0800a3e4 <__libc_init_array>:
 800a3e4:	b570      	push	{r4, r5, r6, lr}
 800a3e6:	4d0d      	ldr	r5, [pc, #52]	; (800a41c <__libc_init_array+0x38>)
 800a3e8:	4c0d      	ldr	r4, [pc, #52]	; (800a420 <__libc_init_array+0x3c>)
 800a3ea:	1b64      	subs	r4, r4, r5
 800a3ec:	10a4      	asrs	r4, r4, #2
 800a3ee:	2600      	movs	r6, #0
 800a3f0:	42a6      	cmp	r6, r4
 800a3f2:	d109      	bne.n	800a408 <__libc_init_array+0x24>
 800a3f4:	4d0b      	ldr	r5, [pc, #44]	; (800a424 <__libc_init_array+0x40>)
 800a3f6:	4c0c      	ldr	r4, [pc, #48]	; (800a428 <__libc_init_array+0x44>)
 800a3f8:	f001 f8e6 	bl	800b5c8 <_init>
 800a3fc:	1b64      	subs	r4, r4, r5
 800a3fe:	10a4      	asrs	r4, r4, #2
 800a400:	2600      	movs	r6, #0
 800a402:	42a6      	cmp	r6, r4
 800a404:	d105      	bne.n	800a412 <__libc_init_array+0x2e>
 800a406:	bd70      	pop	{r4, r5, r6, pc}
 800a408:	f855 3b04 	ldr.w	r3, [r5], #4
 800a40c:	4798      	blx	r3
 800a40e:	3601      	adds	r6, #1
 800a410:	e7ee      	b.n	800a3f0 <__libc_init_array+0xc>
 800a412:	f855 3b04 	ldr.w	r3, [r5], #4
 800a416:	4798      	blx	r3
 800a418:	3601      	adds	r6, #1
 800a41a:	e7f2      	b.n	800a402 <__libc_init_array+0x1e>
 800a41c:	0800b884 	.word	0x0800b884
 800a420:	0800b884 	.word	0x0800b884
 800a424:	0800b884 	.word	0x0800b884
 800a428:	0800b888 	.word	0x0800b888

0800a42c <memset>:
 800a42c:	4402      	add	r2, r0
 800a42e:	4603      	mov	r3, r0
 800a430:	4293      	cmp	r3, r2
 800a432:	d100      	bne.n	800a436 <memset+0xa>
 800a434:	4770      	bx	lr
 800a436:	f803 1b01 	strb.w	r1, [r3], #1
 800a43a:	e7f9      	b.n	800a430 <memset+0x4>

0800a43c <iprintf>:
 800a43c:	b40f      	push	{r0, r1, r2, r3}
 800a43e:	4b0a      	ldr	r3, [pc, #40]	; (800a468 <iprintf+0x2c>)
 800a440:	b513      	push	{r0, r1, r4, lr}
 800a442:	681c      	ldr	r4, [r3, #0]
 800a444:	b124      	cbz	r4, 800a450 <iprintf+0x14>
 800a446:	69a3      	ldr	r3, [r4, #24]
 800a448:	b913      	cbnz	r3, 800a450 <iprintf+0x14>
 800a44a:	4620      	mov	r0, r4
 800a44c:	f000 faba 	bl	800a9c4 <__sinit>
 800a450:	ab05      	add	r3, sp, #20
 800a452:	9a04      	ldr	r2, [sp, #16]
 800a454:	68a1      	ldr	r1, [r4, #8]
 800a456:	9301      	str	r3, [sp, #4]
 800a458:	4620      	mov	r0, r4
 800a45a:	f000 fcdd 	bl	800ae18 <_vfiprintf_r>
 800a45e:	b002      	add	sp, #8
 800a460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a464:	b004      	add	sp, #16
 800a466:	4770      	bx	lr
 800a468:	2000011c 	.word	0x2000011c

0800a46c <_puts_r>:
 800a46c:	b570      	push	{r4, r5, r6, lr}
 800a46e:	460e      	mov	r6, r1
 800a470:	4605      	mov	r5, r0
 800a472:	b118      	cbz	r0, 800a47c <_puts_r+0x10>
 800a474:	6983      	ldr	r3, [r0, #24]
 800a476:	b90b      	cbnz	r3, 800a47c <_puts_r+0x10>
 800a478:	f000 faa4 	bl	800a9c4 <__sinit>
 800a47c:	69ab      	ldr	r3, [r5, #24]
 800a47e:	68ac      	ldr	r4, [r5, #8]
 800a480:	b913      	cbnz	r3, 800a488 <_puts_r+0x1c>
 800a482:	4628      	mov	r0, r5
 800a484:	f000 fa9e 	bl	800a9c4 <__sinit>
 800a488:	4b2c      	ldr	r3, [pc, #176]	; (800a53c <_puts_r+0xd0>)
 800a48a:	429c      	cmp	r4, r3
 800a48c:	d120      	bne.n	800a4d0 <_puts_r+0x64>
 800a48e:	686c      	ldr	r4, [r5, #4]
 800a490:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a492:	07db      	lsls	r3, r3, #31
 800a494:	d405      	bmi.n	800a4a2 <_puts_r+0x36>
 800a496:	89a3      	ldrh	r3, [r4, #12]
 800a498:	0598      	lsls	r0, r3, #22
 800a49a:	d402      	bmi.n	800a4a2 <_puts_r+0x36>
 800a49c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a49e:	f000 fb41 	bl	800ab24 <__retarget_lock_acquire_recursive>
 800a4a2:	89a3      	ldrh	r3, [r4, #12]
 800a4a4:	0719      	lsls	r1, r3, #28
 800a4a6:	d51d      	bpl.n	800a4e4 <_puts_r+0x78>
 800a4a8:	6923      	ldr	r3, [r4, #16]
 800a4aa:	b1db      	cbz	r3, 800a4e4 <_puts_r+0x78>
 800a4ac:	3e01      	subs	r6, #1
 800a4ae:	68a3      	ldr	r3, [r4, #8]
 800a4b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a4b4:	3b01      	subs	r3, #1
 800a4b6:	60a3      	str	r3, [r4, #8]
 800a4b8:	bb39      	cbnz	r1, 800a50a <_puts_r+0x9e>
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	da38      	bge.n	800a530 <_puts_r+0xc4>
 800a4be:	4622      	mov	r2, r4
 800a4c0:	210a      	movs	r1, #10
 800a4c2:	4628      	mov	r0, r5
 800a4c4:	f000 f886 	bl	800a5d4 <__swbuf_r>
 800a4c8:	3001      	adds	r0, #1
 800a4ca:	d011      	beq.n	800a4f0 <_puts_r+0x84>
 800a4cc:	250a      	movs	r5, #10
 800a4ce:	e011      	b.n	800a4f4 <_puts_r+0x88>
 800a4d0:	4b1b      	ldr	r3, [pc, #108]	; (800a540 <_puts_r+0xd4>)
 800a4d2:	429c      	cmp	r4, r3
 800a4d4:	d101      	bne.n	800a4da <_puts_r+0x6e>
 800a4d6:	68ac      	ldr	r4, [r5, #8]
 800a4d8:	e7da      	b.n	800a490 <_puts_r+0x24>
 800a4da:	4b1a      	ldr	r3, [pc, #104]	; (800a544 <_puts_r+0xd8>)
 800a4dc:	429c      	cmp	r4, r3
 800a4de:	bf08      	it	eq
 800a4e0:	68ec      	ldreq	r4, [r5, #12]
 800a4e2:	e7d5      	b.n	800a490 <_puts_r+0x24>
 800a4e4:	4621      	mov	r1, r4
 800a4e6:	4628      	mov	r0, r5
 800a4e8:	f000 f8c6 	bl	800a678 <__swsetup_r>
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	d0dd      	beq.n	800a4ac <_puts_r+0x40>
 800a4f0:	f04f 35ff 	mov.w	r5, #4294967295
 800a4f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4f6:	07da      	lsls	r2, r3, #31
 800a4f8:	d405      	bmi.n	800a506 <_puts_r+0x9a>
 800a4fa:	89a3      	ldrh	r3, [r4, #12]
 800a4fc:	059b      	lsls	r3, r3, #22
 800a4fe:	d402      	bmi.n	800a506 <_puts_r+0x9a>
 800a500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a502:	f000 fb10 	bl	800ab26 <__retarget_lock_release_recursive>
 800a506:	4628      	mov	r0, r5
 800a508:	bd70      	pop	{r4, r5, r6, pc}
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	da04      	bge.n	800a518 <_puts_r+0xac>
 800a50e:	69a2      	ldr	r2, [r4, #24]
 800a510:	429a      	cmp	r2, r3
 800a512:	dc06      	bgt.n	800a522 <_puts_r+0xb6>
 800a514:	290a      	cmp	r1, #10
 800a516:	d004      	beq.n	800a522 <_puts_r+0xb6>
 800a518:	6823      	ldr	r3, [r4, #0]
 800a51a:	1c5a      	adds	r2, r3, #1
 800a51c:	6022      	str	r2, [r4, #0]
 800a51e:	7019      	strb	r1, [r3, #0]
 800a520:	e7c5      	b.n	800a4ae <_puts_r+0x42>
 800a522:	4622      	mov	r2, r4
 800a524:	4628      	mov	r0, r5
 800a526:	f000 f855 	bl	800a5d4 <__swbuf_r>
 800a52a:	3001      	adds	r0, #1
 800a52c:	d1bf      	bne.n	800a4ae <_puts_r+0x42>
 800a52e:	e7df      	b.n	800a4f0 <_puts_r+0x84>
 800a530:	6823      	ldr	r3, [r4, #0]
 800a532:	250a      	movs	r5, #10
 800a534:	1c5a      	adds	r2, r3, #1
 800a536:	6022      	str	r2, [r4, #0]
 800a538:	701d      	strb	r5, [r3, #0]
 800a53a:	e7db      	b.n	800a4f4 <_puts_r+0x88>
 800a53c:	0800b808 	.word	0x0800b808
 800a540:	0800b828 	.word	0x0800b828
 800a544:	0800b7e8 	.word	0x0800b7e8

0800a548 <puts>:
 800a548:	4b02      	ldr	r3, [pc, #8]	; (800a554 <puts+0xc>)
 800a54a:	4601      	mov	r1, r0
 800a54c:	6818      	ldr	r0, [r3, #0]
 800a54e:	f7ff bf8d 	b.w	800a46c <_puts_r>
 800a552:	bf00      	nop
 800a554:	2000011c 	.word	0x2000011c

0800a558 <rand>:
 800a558:	4b16      	ldr	r3, [pc, #88]	; (800a5b4 <rand+0x5c>)
 800a55a:	b510      	push	{r4, lr}
 800a55c:	681c      	ldr	r4, [r3, #0]
 800a55e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a560:	b9b3      	cbnz	r3, 800a590 <rand+0x38>
 800a562:	2018      	movs	r0, #24
 800a564:	f000 fb46 	bl	800abf4 <malloc>
 800a568:	63a0      	str	r0, [r4, #56]	; 0x38
 800a56a:	b928      	cbnz	r0, 800a578 <rand+0x20>
 800a56c:	4602      	mov	r2, r0
 800a56e:	4b12      	ldr	r3, [pc, #72]	; (800a5b8 <rand+0x60>)
 800a570:	4812      	ldr	r0, [pc, #72]	; (800a5bc <rand+0x64>)
 800a572:	214e      	movs	r1, #78	; 0x4e
 800a574:	f000 f8ee 	bl	800a754 <__assert_func>
 800a578:	4a11      	ldr	r2, [pc, #68]	; (800a5c0 <rand+0x68>)
 800a57a:	4b12      	ldr	r3, [pc, #72]	; (800a5c4 <rand+0x6c>)
 800a57c:	e9c0 2300 	strd	r2, r3, [r0]
 800a580:	4b11      	ldr	r3, [pc, #68]	; (800a5c8 <rand+0x70>)
 800a582:	6083      	str	r3, [r0, #8]
 800a584:	230b      	movs	r3, #11
 800a586:	8183      	strh	r3, [r0, #12]
 800a588:	2201      	movs	r2, #1
 800a58a:	2300      	movs	r3, #0
 800a58c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800a590:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800a592:	4a0e      	ldr	r2, [pc, #56]	; (800a5cc <rand+0x74>)
 800a594:	6920      	ldr	r0, [r4, #16]
 800a596:	6963      	ldr	r3, [r4, #20]
 800a598:	490d      	ldr	r1, [pc, #52]	; (800a5d0 <rand+0x78>)
 800a59a:	4342      	muls	r2, r0
 800a59c:	fb01 2203 	mla	r2, r1, r3, r2
 800a5a0:	fba0 0101 	umull	r0, r1, r0, r1
 800a5a4:	1c43      	adds	r3, r0, #1
 800a5a6:	eb42 0001 	adc.w	r0, r2, r1
 800a5aa:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800a5ae:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a5b2:	bd10      	pop	{r4, pc}
 800a5b4:	2000011c 	.word	0x2000011c
 800a5b8:	0800b738 	.word	0x0800b738
 800a5bc:	0800b74f 	.word	0x0800b74f
 800a5c0:	abcd330e 	.word	0xabcd330e
 800a5c4:	e66d1234 	.word	0xe66d1234
 800a5c8:	0005deec 	.word	0x0005deec
 800a5cc:	5851f42d 	.word	0x5851f42d
 800a5d0:	4c957f2d 	.word	0x4c957f2d

0800a5d4 <__swbuf_r>:
 800a5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5d6:	460e      	mov	r6, r1
 800a5d8:	4614      	mov	r4, r2
 800a5da:	4605      	mov	r5, r0
 800a5dc:	b118      	cbz	r0, 800a5e6 <__swbuf_r+0x12>
 800a5de:	6983      	ldr	r3, [r0, #24]
 800a5e0:	b90b      	cbnz	r3, 800a5e6 <__swbuf_r+0x12>
 800a5e2:	f000 f9ef 	bl	800a9c4 <__sinit>
 800a5e6:	4b21      	ldr	r3, [pc, #132]	; (800a66c <__swbuf_r+0x98>)
 800a5e8:	429c      	cmp	r4, r3
 800a5ea:	d12b      	bne.n	800a644 <__swbuf_r+0x70>
 800a5ec:	686c      	ldr	r4, [r5, #4]
 800a5ee:	69a3      	ldr	r3, [r4, #24]
 800a5f0:	60a3      	str	r3, [r4, #8]
 800a5f2:	89a3      	ldrh	r3, [r4, #12]
 800a5f4:	071a      	lsls	r2, r3, #28
 800a5f6:	d52f      	bpl.n	800a658 <__swbuf_r+0x84>
 800a5f8:	6923      	ldr	r3, [r4, #16]
 800a5fa:	b36b      	cbz	r3, 800a658 <__swbuf_r+0x84>
 800a5fc:	6923      	ldr	r3, [r4, #16]
 800a5fe:	6820      	ldr	r0, [r4, #0]
 800a600:	1ac0      	subs	r0, r0, r3
 800a602:	6963      	ldr	r3, [r4, #20]
 800a604:	b2f6      	uxtb	r6, r6
 800a606:	4283      	cmp	r3, r0
 800a608:	4637      	mov	r7, r6
 800a60a:	dc04      	bgt.n	800a616 <__swbuf_r+0x42>
 800a60c:	4621      	mov	r1, r4
 800a60e:	4628      	mov	r0, r5
 800a610:	f000 f944 	bl	800a89c <_fflush_r>
 800a614:	bb30      	cbnz	r0, 800a664 <__swbuf_r+0x90>
 800a616:	68a3      	ldr	r3, [r4, #8]
 800a618:	3b01      	subs	r3, #1
 800a61a:	60a3      	str	r3, [r4, #8]
 800a61c:	6823      	ldr	r3, [r4, #0]
 800a61e:	1c5a      	adds	r2, r3, #1
 800a620:	6022      	str	r2, [r4, #0]
 800a622:	701e      	strb	r6, [r3, #0]
 800a624:	6963      	ldr	r3, [r4, #20]
 800a626:	3001      	adds	r0, #1
 800a628:	4283      	cmp	r3, r0
 800a62a:	d004      	beq.n	800a636 <__swbuf_r+0x62>
 800a62c:	89a3      	ldrh	r3, [r4, #12]
 800a62e:	07db      	lsls	r3, r3, #31
 800a630:	d506      	bpl.n	800a640 <__swbuf_r+0x6c>
 800a632:	2e0a      	cmp	r6, #10
 800a634:	d104      	bne.n	800a640 <__swbuf_r+0x6c>
 800a636:	4621      	mov	r1, r4
 800a638:	4628      	mov	r0, r5
 800a63a:	f000 f92f 	bl	800a89c <_fflush_r>
 800a63e:	b988      	cbnz	r0, 800a664 <__swbuf_r+0x90>
 800a640:	4638      	mov	r0, r7
 800a642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a644:	4b0a      	ldr	r3, [pc, #40]	; (800a670 <__swbuf_r+0x9c>)
 800a646:	429c      	cmp	r4, r3
 800a648:	d101      	bne.n	800a64e <__swbuf_r+0x7a>
 800a64a:	68ac      	ldr	r4, [r5, #8]
 800a64c:	e7cf      	b.n	800a5ee <__swbuf_r+0x1a>
 800a64e:	4b09      	ldr	r3, [pc, #36]	; (800a674 <__swbuf_r+0xa0>)
 800a650:	429c      	cmp	r4, r3
 800a652:	bf08      	it	eq
 800a654:	68ec      	ldreq	r4, [r5, #12]
 800a656:	e7ca      	b.n	800a5ee <__swbuf_r+0x1a>
 800a658:	4621      	mov	r1, r4
 800a65a:	4628      	mov	r0, r5
 800a65c:	f000 f80c 	bl	800a678 <__swsetup_r>
 800a660:	2800      	cmp	r0, #0
 800a662:	d0cb      	beq.n	800a5fc <__swbuf_r+0x28>
 800a664:	f04f 37ff 	mov.w	r7, #4294967295
 800a668:	e7ea      	b.n	800a640 <__swbuf_r+0x6c>
 800a66a:	bf00      	nop
 800a66c:	0800b808 	.word	0x0800b808
 800a670:	0800b828 	.word	0x0800b828
 800a674:	0800b7e8 	.word	0x0800b7e8

0800a678 <__swsetup_r>:
 800a678:	4b32      	ldr	r3, [pc, #200]	; (800a744 <__swsetup_r+0xcc>)
 800a67a:	b570      	push	{r4, r5, r6, lr}
 800a67c:	681d      	ldr	r5, [r3, #0]
 800a67e:	4606      	mov	r6, r0
 800a680:	460c      	mov	r4, r1
 800a682:	b125      	cbz	r5, 800a68e <__swsetup_r+0x16>
 800a684:	69ab      	ldr	r3, [r5, #24]
 800a686:	b913      	cbnz	r3, 800a68e <__swsetup_r+0x16>
 800a688:	4628      	mov	r0, r5
 800a68a:	f000 f99b 	bl	800a9c4 <__sinit>
 800a68e:	4b2e      	ldr	r3, [pc, #184]	; (800a748 <__swsetup_r+0xd0>)
 800a690:	429c      	cmp	r4, r3
 800a692:	d10f      	bne.n	800a6b4 <__swsetup_r+0x3c>
 800a694:	686c      	ldr	r4, [r5, #4]
 800a696:	89a3      	ldrh	r3, [r4, #12]
 800a698:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a69c:	0719      	lsls	r1, r3, #28
 800a69e:	d42c      	bmi.n	800a6fa <__swsetup_r+0x82>
 800a6a0:	06dd      	lsls	r5, r3, #27
 800a6a2:	d411      	bmi.n	800a6c8 <__swsetup_r+0x50>
 800a6a4:	2309      	movs	r3, #9
 800a6a6:	6033      	str	r3, [r6, #0]
 800a6a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a6ac:	81a3      	strh	r3, [r4, #12]
 800a6ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a6b2:	e03e      	b.n	800a732 <__swsetup_r+0xba>
 800a6b4:	4b25      	ldr	r3, [pc, #148]	; (800a74c <__swsetup_r+0xd4>)
 800a6b6:	429c      	cmp	r4, r3
 800a6b8:	d101      	bne.n	800a6be <__swsetup_r+0x46>
 800a6ba:	68ac      	ldr	r4, [r5, #8]
 800a6bc:	e7eb      	b.n	800a696 <__swsetup_r+0x1e>
 800a6be:	4b24      	ldr	r3, [pc, #144]	; (800a750 <__swsetup_r+0xd8>)
 800a6c0:	429c      	cmp	r4, r3
 800a6c2:	bf08      	it	eq
 800a6c4:	68ec      	ldreq	r4, [r5, #12]
 800a6c6:	e7e6      	b.n	800a696 <__swsetup_r+0x1e>
 800a6c8:	0758      	lsls	r0, r3, #29
 800a6ca:	d512      	bpl.n	800a6f2 <__swsetup_r+0x7a>
 800a6cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6ce:	b141      	cbz	r1, 800a6e2 <__swsetup_r+0x6a>
 800a6d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6d4:	4299      	cmp	r1, r3
 800a6d6:	d002      	beq.n	800a6de <__swsetup_r+0x66>
 800a6d8:	4630      	mov	r0, r6
 800a6da:	f000 fa93 	bl	800ac04 <_free_r>
 800a6de:	2300      	movs	r3, #0
 800a6e0:	6363      	str	r3, [r4, #52]	; 0x34
 800a6e2:	89a3      	ldrh	r3, [r4, #12]
 800a6e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a6e8:	81a3      	strh	r3, [r4, #12]
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	6063      	str	r3, [r4, #4]
 800a6ee:	6923      	ldr	r3, [r4, #16]
 800a6f0:	6023      	str	r3, [r4, #0]
 800a6f2:	89a3      	ldrh	r3, [r4, #12]
 800a6f4:	f043 0308 	orr.w	r3, r3, #8
 800a6f8:	81a3      	strh	r3, [r4, #12]
 800a6fa:	6923      	ldr	r3, [r4, #16]
 800a6fc:	b94b      	cbnz	r3, 800a712 <__swsetup_r+0x9a>
 800a6fe:	89a3      	ldrh	r3, [r4, #12]
 800a700:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a708:	d003      	beq.n	800a712 <__swsetup_r+0x9a>
 800a70a:	4621      	mov	r1, r4
 800a70c:	4630      	mov	r0, r6
 800a70e:	f000 fa31 	bl	800ab74 <__smakebuf_r>
 800a712:	89a0      	ldrh	r0, [r4, #12]
 800a714:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a718:	f010 0301 	ands.w	r3, r0, #1
 800a71c:	d00a      	beq.n	800a734 <__swsetup_r+0xbc>
 800a71e:	2300      	movs	r3, #0
 800a720:	60a3      	str	r3, [r4, #8]
 800a722:	6963      	ldr	r3, [r4, #20]
 800a724:	425b      	negs	r3, r3
 800a726:	61a3      	str	r3, [r4, #24]
 800a728:	6923      	ldr	r3, [r4, #16]
 800a72a:	b943      	cbnz	r3, 800a73e <__swsetup_r+0xc6>
 800a72c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a730:	d1ba      	bne.n	800a6a8 <__swsetup_r+0x30>
 800a732:	bd70      	pop	{r4, r5, r6, pc}
 800a734:	0781      	lsls	r1, r0, #30
 800a736:	bf58      	it	pl
 800a738:	6963      	ldrpl	r3, [r4, #20]
 800a73a:	60a3      	str	r3, [r4, #8]
 800a73c:	e7f4      	b.n	800a728 <__swsetup_r+0xb0>
 800a73e:	2000      	movs	r0, #0
 800a740:	e7f7      	b.n	800a732 <__swsetup_r+0xba>
 800a742:	bf00      	nop
 800a744:	2000011c 	.word	0x2000011c
 800a748:	0800b808 	.word	0x0800b808
 800a74c:	0800b828 	.word	0x0800b828
 800a750:	0800b7e8 	.word	0x0800b7e8

0800a754 <__assert_func>:
 800a754:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a756:	4614      	mov	r4, r2
 800a758:	461a      	mov	r2, r3
 800a75a:	4b09      	ldr	r3, [pc, #36]	; (800a780 <__assert_func+0x2c>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4605      	mov	r5, r0
 800a760:	68d8      	ldr	r0, [r3, #12]
 800a762:	b14c      	cbz	r4, 800a778 <__assert_func+0x24>
 800a764:	4b07      	ldr	r3, [pc, #28]	; (800a784 <__assert_func+0x30>)
 800a766:	9100      	str	r1, [sp, #0]
 800a768:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a76c:	4906      	ldr	r1, [pc, #24]	; (800a788 <__assert_func+0x34>)
 800a76e:	462b      	mov	r3, r5
 800a770:	f000 f9a6 	bl	800aac0 <fiprintf>
 800a774:	f000 fe7a 	bl	800b46c <abort>
 800a778:	4b04      	ldr	r3, [pc, #16]	; (800a78c <__assert_func+0x38>)
 800a77a:	461c      	mov	r4, r3
 800a77c:	e7f3      	b.n	800a766 <__assert_func+0x12>
 800a77e:	bf00      	nop
 800a780:	2000011c 	.word	0x2000011c
 800a784:	0800b7aa 	.word	0x0800b7aa
 800a788:	0800b7b7 	.word	0x0800b7b7
 800a78c:	0800b7e5 	.word	0x0800b7e5

0800a790 <__sflush_r>:
 800a790:	898a      	ldrh	r2, [r1, #12]
 800a792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a796:	4605      	mov	r5, r0
 800a798:	0710      	lsls	r0, r2, #28
 800a79a:	460c      	mov	r4, r1
 800a79c:	d458      	bmi.n	800a850 <__sflush_r+0xc0>
 800a79e:	684b      	ldr	r3, [r1, #4]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	dc05      	bgt.n	800a7b0 <__sflush_r+0x20>
 800a7a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	dc02      	bgt.n	800a7b0 <__sflush_r+0x20>
 800a7aa:	2000      	movs	r0, #0
 800a7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7b2:	2e00      	cmp	r6, #0
 800a7b4:	d0f9      	beq.n	800a7aa <__sflush_r+0x1a>
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a7bc:	682f      	ldr	r7, [r5, #0]
 800a7be:	602b      	str	r3, [r5, #0]
 800a7c0:	d032      	beq.n	800a828 <__sflush_r+0x98>
 800a7c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a7c4:	89a3      	ldrh	r3, [r4, #12]
 800a7c6:	075a      	lsls	r2, r3, #29
 800a7c8:	d505      	bpl.n	800a7d6 <__sflush_r+0x46>
 800a7ca:	6863      	ldr	r3, [r4, #4]
 800a7cc:	1ac0      	subs	r0, r0, r3
 800a7ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a7d0:	b10b      	cbz	r3, 800a7d6 <__sflush_r+0x46>
 800a7d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a7d4:	1ac0      	subs	r0, r0, r3
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	4602      	mov	r2, r0
 800a7da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7dc:	6a21      	ldr	r1, [r4, #32]
 800a7de:	4628      	mov	r0, r5
 800a7e0:	47b0      	blx	r6
 800a7e2:	1c43      	adds	r3, r0, #1
 800a7e4:	89a3      	ldrh	r3, [r4, #12]
 800a7e6:	d106      	bne.n	800a7f6 <__sflush_r+0x66>
 800a7e8:	6829      	ldr	r1, [r5, #0]
 800a7ea:	291d      	cmp	r1, #29
 800a7ec:	d82c      	bhi.n	800a848 <__sflush_r+0xb8>
 800a7ee:	4a2a      	ldr	r2, [pc, #168]	; (800a898 <__sflush_r+0x108>)
 800a7f0:	40ca      	lsrs	r2, r1
 800a7f2:	07d6      	lsls	r6, r2, #31
 800a7f4:	d528      	bpl.n	800a848 <__sflush_r+0xb8>
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	6062      	str	r2, [r4, #4]
 800a7fa:	04d9      	lsls	r1, r3, #19
 800a7fc:	6922      	ldr	r2, [r4, #16]
 800a7fe:	6022      	str	r2, [r4, #0]
 800a800:	d504      	bpl.n	800a80c <__sflush_r+0x7c>
 800a802:	1c42      	adds	r2, r0, #1
 800a804:	d101      	bne.n	800a80a <__sflush_r+0x7a>
 800a806:	682b      	ldr	r3, [r5, #0]
 800a808:	b903      	cbnz	r3, 800a80c <__sflush_r+0x7c>
 800a80a:	6560      	str	r0, [r4, #84]	; 0x54
 800a80c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a80e:	602f      	str	r7, [r5, #0]
 800a810:	2900      	cmp	r1, #0
 800a812:	d0ca      	beq.n	800a7aa <__sflush_r+0x1a>
 800a814:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a818:	4299      	cmp	r1, r3
 800a81a:	d002      	beq.n	800a822 <__sflush_r+0x92>
 800a81c:	4628      	mov	r0, r5
 800a81e:	f000 f9f1 	bl	800ac04 <_free_r>
 800a822:	2000      	movs	r0, #0
 800a824:	6360      	str	r0, [r4, #52]	; 0x34
 800a826:	e7c1      	b.n	800a7ac <__sflush_r+0x1c>
 800a828:	6a21      	ldr	r1, [r4, #32]
 800a82a:	2301      	movs	r3, #1
 800a82c:	4628      	mov	r0, r5
 800a82e:	47b0      	blx	r6
 800a830:	1c41      	adds	r1, r0, #1
 800a832:	d1c7      	bne.n	800a7c4 <__sflush_r+0x34>
 800a834:	682b      	ldr	r3, [r5, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d0c4      	beq.n	800a7c4 <__sflush_r+0x34>
 800a83a:	2b1d      	cmp	r3, #29
 800a83c:	d001      	beq.n	800a842 <__sflush_r+0xb2>
 800a83e:	2b16      	cmp	r3, #22
 800a840:	d101      	bne.n	800a846 <__sflush_r+0xb6>
 800a842:	602f      	str	r7, [r5, #0]
 800a844:	e7b1      	b.n	800a7aa <__sflush_r+0x1a>
 800a846:	89a3      	ldrh	r3, [r4, #12]
 800a848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a84c:	81a3      	strh	r3, [r4, #12]
 800a84e:	e7ad      	b.n	800a7ac <__sflush_r+0x1c>
 800a850:	690f      	ldr	r7, [r1, #16]
 800a852:	2f00      	cmp	r7, #0
 800a854:	d0a9      	beq.n	800a7aa <__sflush_r+0x1a>
 800a856:	0793      	lsls	r3, r2, #30
 800a858:	680e      	ldr	r6, [r1, #0]
 800a85a:	bf08      	it	eq
 800a85c:	694b      	ldreq	r3, [r1, #20]
 800a85e:	600f      	str	r7, [r1, #0]
 800a860:	bf18      	it	ne
 800a862:	2300      	movne	r3, #0
 800a864:	eba6 0807 	sub.w	r8, r6, r7
 800a868:	608b      	str	r3, [r1, #8]
 800a86a:	f1b8 0f00 	cmp.w	r8, #0
 800a86e:	dd9c      	ble.n	800a7aa <__sflush_r+0x1a>
 800a870:	6a21      	ldr	r1, [r4, #32]
 800a872:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a874:	4643      	mov	r3, r8
 800a876:	463a      	mov	r2, r7
 800a878:	4628      	mov	r0, r5
 800a87a:	47b0      	blx	r6
 800a87c:	2800      	cmp	r0, #0
 800a87e:	dc06      	bgt.n	800a88e <__sflush_r+0xfe>
 800a880:	89a3      	ldrh	r3, [r4, #12]
 800a882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a886:	81a3      	strh	r3, [r4, #12]
 800a888:	f04f 30ff 	mov.w	r0, #4294967295
 800a88c:	e78e      	b.n	800a7ac <__sflush_r+0x1c>
 800a88e:	4407      	add	r7, r0
 800a890:	eba8 0800 	sub.w	r8, r8, r0
 800a894:	e7e9      	b.n	800a86a <__sflush_r+0xda>
 800a896:	bf00      	nop
 800a898:	20400001 	.word	0x20400001

0800a89c <_fflush_r>:
 800a89c:	b538      	push	{r3, r4, r5, lr}
 800a89e:	690b      	ldr	r3, [r1, #16]
 800a8a0:	4605      	mov	r5, r0
 800a8a2:	460c      	mov	r4, r1
 800a8a4:	b913      	cbnz	r3, 800a8ac <_fflush_r+0x10>
 800a8a6:	2500      	movs	r5, #0
 800a8a8:	4628      	mov	r0, r5
 800a8aa:	bd38      	pop	{r3, r4, r5, pc}
 800a8ac:	b118      	cbz	r0, 800a8b6 <_fflush_r+0x1a>
 800a8ae:	6983      	ldr	r3, [r0, #24]
 800a8b0:	b90b      	cbnz	r3, 800a8b6 <_fflush_r+0x1a>
 800a8b2:	f000 f887 	bl	800a9c4 <__sinit>
 800a8b6:	4b14      	ldr	r3, [pc, #80]	; (800a908 <_fflush_r+0x6c>)
 800a8b8:	429c      	cmp	r4, r3
 800a8ba:	d11b      	bne.n	800a8f4 <_fflush_r+0x58>
 800a8bc:	686c      	ldr	r4, [r5, #4]
 800a8be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d0ef      	beq.n	800a8a6 <_fflush_r+0xa>
 800a8c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a8c8:	07d0      	lsls	r0, r2, #31
 800a8ca:	d404      	bmi.n	800a8d6 <_fflush_r+0x3a>
 800a8cc:	0599      	lsls	r1, r3, #22
 800a8ce:	d402      	bmi.n	800a8d6 <_fflush_r+0x3a>
 800a8d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8d2:	f000 f927 	bl	800ab24 <__retarget_lock_acquire_recursive>
 800a8d6:	4628      	mov	r0, r5
 800a8d8:	4621      	mov	r1, r4
 800a8da:	f7ff ff59 	bl	800a790 <__sflush_r>
 800a8de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8e0:	07da      	lsls	r2, r3, #31
 800a8e2:	4605      	mov	r5, r0
 800a8e4:	d4e0      	bmi.n	800a8a8 <_fflush_r+0xc>
 800a8e6:	89a3      	ldrh	r3, [r4, #12]
 800a8e8:	059b      	lsls	r3, r3, #22
 800a8ea:	d4dd      	bmi.n	800a8a8 <_fflush_r+0xc>
 800a8ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8ee:	f000 f91a 	bl	800ab26 <__retarget_lock_release_recursive>
 800a8f2:	e7d9      	b.n	800a8a8 <_fflush_r+0xc>
 800a8f4:	4b05      	ldr	r3, [pc, #20]	; (800a90c <_fflush_r+0x70>)
 800a8f6:	429c      	cmp	r4, r3
 800a8f8:	d101      	bne.n	800a8fe <_fflush_r+0x62>
 800a8fa:	68ac      	ldr	r4, [r5, #8]
 800a8fc:	e7df      	b.n	800a8be <_fflush_r+0x22>
 800a8fe:	4b04      	ldr	r3, [pc, #16]	; (800a910 <_fflush_r+0x74>)
 800a900:	429c      	cmp	r4, r3
 800a902:	bf08      	it	eq
 800a904:	68ec      	ldreq	r4, [r5, #12]
 800a906:	e7da      	b.n	800a8be <_fflush_r+0x22>
 800a908:	0800b808 	.word	0x0800b808
 800a90c:	0800b828 	.word	0x0800b828
 800a910:	0800b7e8 	.word	0x0800b7e8

0800a914 <std>:
 800a914:	2300      	movs	r3, #0
 800a916:	b510      	push	{r4, lr}
 800a918:	4604      	mov	r4, r0
 800a91a:	e9c0 3300 	strd	r3, r3, [r0]
 800a91e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a922:	6083      	str	r3, [r0, #8]
 800a924:	8181      	strh	r1, [r0, #12]
 800a926:	6643      	str	r3, [r0, #100]	; 0x64
 800a928:	81c2      	strh	r2, [r0, #14]
 800a92a:	6183      	str	r3, [r0, #24]
 800a92c:	4619      	mov	r1, r3
 800a92e:	2208      	movs	r2, #8
 800a930:	305c      	adds	r0, #92	; 0x5c
 800a932:	f7ff fd7b 	bl	800a42c <memset>
 800a936:	4b05      	ldr	r3, [pc, #20]	; (800a94c <std+0x38>)
 800a938:	6263      	str	r3, [r4, #36]	; 0x24
 800a93a:	4b05      	ldr	r3, [pc, #20]	; (800a950 <std+0x3c>)
 800a93c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a93e:	4b05      	ldr	r3, [pc, #20]	; (800a954 <std+0x40>)
 800a940:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a942:	4b05      	ldr	r3, [pc, #20]	; (800a958 <std+0x44>)
 800a944:	6224      	str	r4, [r4, #32]
 800a946:	6323      	str	r3, [r4, #48]	; 0x30
 800a948:	bd10      	pop	{r4, pc}
 800a94a:	bf00      	nop
 800a94c:	0800b3c1 	.word	0x0800b3c1
 800a950:	0800b3e3 	.word	0x0800b3e3
 800a954:	0800b41b 	.word	0x0800b41b
 800a958:	0800b43f 	.word	0x0800b43f

0800a95c <_cleanup_r>:
 800a95c:	4901      	ldr	r1, [pc, #4]	; (800a964 <_cleanup_r+0x8>)
 800a95e:	f000 b8c1 	b.w	800aae4 <_fwalk_reent>
 800a962:	bf00      	nop
 800a964:	0800a89d 	.word	0x0800a89d

0800a968 <__sfmoreglue>:
 800a968:	b570      	push	{r4, r5, r6, lr}
 800a96a:	2268      	movs	r2, #104	; 0x68
 800a96c:	1e4d      	subs	r5, r1, #1
 800a96e:	4355      	muls	r5, r2
 800a970:	460e      	mov	r6, r1
 800a972:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a976:	f000 f9b1 	bl	800acdc <_malloc_r>
 800a97a:	4604      	mov	r4, r0
 800a97c:	b140      	cbz	r0, 800a990 <__sfmoreglue+0x28>
 800a97e:	2100      	movs	r1, #0
 800a980:	e9c0 1600 	strd	r1, r6, [r0]
 800a984:	300c      	adds	r0, #12
 800a986:	60a0      	str	r0, [r4, #8]
 800a988:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a98c:	f7ff fd4e 	bl	800a42c <memset>
 800a990:	4620      	mov	r0, r4
 800a992:	bd70      	pop	{r4, r5, r6, pc}

0800a994 <__sfp_lock_acquire>:
 800a994:	4801      	ldr	r0, [pc, #4]	; (800a99c <__sfp_lock_acquire+0x8>)
 800a996:	f000 b8c5 	b.w	800ab24 <__retarget_lock_acquire_recursive>
 800a99a:	bf00      	nop
 800a99c:	20000f81 	.word	0x20000f81

0800a9a0 <__sfp_lock_release>:
 800a9a0:	4801      	ldr	r0, [pc, #4]	; (800a9a8 <__sfp_lock_release+0x8>)
 800a9a2:	f000 b8c0 	b.w	800ab26 <__retarget_lock_release_recursive>
 800a9a6:	bf00      	nop
 800a9a8:	20000f81 	.word	0x20000f81

0800a9ac <__sinit_lock_acquire>:
 800a9ac:	4801      	ldr	r0, [pc, #4]	; (800a9b4 <__sinit_lock_acquire+0x8>)
 800a9ae:	f000 b8b9 	b.w	800ab24 <__retarget_lock_acquire_recursive>
 800a9b2:	bf00      	nop
 800a9b4:	20000f82 	.word	0x20000f82

0800a9b8 <__sinit_lock_release>:
 800a9b8:	4801      	ldr	r0, [pc, #4]	; (800a9c0 <__sinit_lock_release+0x8>)
 800a9ba:	f000 b8b4 	b.w	800ab26 <__retarget_lock_release_recursive>
 800a9be:	bf00      	nop
 800a9c0:	20000f82 	.word	0x20000f82

0800a9c4 <__sinit>:
 800a9c4:	b510      	push	{r4, lr}
 800a9c6:	4604      	mov	r4, r0
 800a9c8:	f7ff fff0 	bl	800a9ac <__sinit_lock_acquire>
 800a9cc:	69a3      	ldr	r3, [r4, #24]
 800a9ce:	b11b      	cbz	r3, 800a9d8 <__sinit+0x14>
 800a9d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9d4:	f7ff bff0 	b.w	800a9b8 <__sinit_lock_release>
 800a9d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a9dc:	6523      	str	r3, [r4, #80]	; 0x50
 800a9de:	4b13      	ldr	r3, [pc, #76]	; (800aa2c <__sinit+0x68>)
 800a9e0:	4a13      	ldr	r2, [pc, #76]	; (800aa30 <__sinit+0x6c>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a9e6:	42a3      	cmp	r3, r4
 800a9e8:	bf04      	itt	eq
 800a9ea:	2301      	moveq	r3, #1
 800a9ec:	61a3      	streq	r3, [r4, #24]
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	f000 f820 	bl	800aa34 <__sfp>
 800a9f4:	6060      	str	r0, [r4, #4]
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	f000 f81c 	bl	800aa34 <__sfp>
 800a9fc:	60a0      	str	r0, [r4, #8]
 800a9fe:	4620      	mov	r0, r4
 800aa00:	f000 f818 	bl	800aa34 <__sfp>
 800aa04:	2200      	movs	r2, #0
 800aa06:	60e0      	str	r0, [r4, #12]
 800aa08:	2104      	movs	r1, #4
 800aa0a:	6860      	ldr	r0, [r4, #4]
 800aa0c:	f7ff ff82 	bl	800a914 <std>
 800aa10:	68a0      	ldr	r0, [r4, #8]
 800aa12:	2201      	movs	r2, #1
 800aa14:	2109      	movs	r1, #9
 800aa16:	f7ff ff7d 	bl	800a914 <std>
 800aa1a:	68e0      	ldr	r0, [r4, #12]
 800aa1c:	2202      	movs	r2, #2
 800aa1e:	2112      	movs	r1, #18
 800aa20:	f7ff ff78 	bl	800a914 <std>
 800aa24:	2301      	movs	r3, #1
 800aa26:	61a3      	str	r3, [r4, #24]
 800aa28:	e7d2      	b.n	800a9d0 <__sinit+0xc>
 800aa2a:	bf00      	nop
 800aa2c:	0800b734 	.word	0x0800b734
 800aa30:	0800a95d 	.word	0x0800a95d

0800aa34 <__sfp>:
 800aa34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa36:	4607      	mov	r7, r0
 800aa38:	f7ff ffac 	bl	800a994 <__sfp_lock_acquire>
 800aa3c:	4b1e      	ldr	r3, [pc, #120]	; (800aab8 <__sfp+0x84>)
 800aa3e:	681e      	ldr	r6, [r3, #0]
 800aa40:	69b3      	ldr	r3, [r6, #24]
 800aa42:	b913      	cbnz	r3, 800aa4a <__sfp+0x16>
 800aa44:	4630      	mov	r0, r6
 800aa46:	f7ff ffbd 	bl	800a9c4 <__sinit>
 800aa4a:	3648      	adds	r6, #72	; 0x48
 800aa4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aa50:	3b01      	subs	r3, #1
 800aa52:	d503      	bpl.n	800aa5c <__sfp+0x28>
 800aa54:	6833      	ldr	r3, [r6, #0]
 800aa56:	b30b      	cbz	r3, 800aa9c <__sfp+0x68>
 800aa58:	6836      	ldr	r6, [r6, #0]
 800aa5a:	e7f7      	b.n	800aa4c <__sfp+0x18>
 800aa5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aa60:	b9d5      	cbnz	r5, 800aa98 <__sfp+0x64>
 800aa62:	4b16      	ldr	r3, [pc, #88]	; (800aabc <__sfp+0x88>)
 800aa64:	60e3      	str	r3, [r4, #12]
 800aa66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aa6a:	6665      	str	r5, [r4, #100]	; 0x64
 800aa6c:	f000 f859 	bl	800ab22 <__retarget_lock_init_recursive>
 800aa70:	f7ff ff96 	bl	800a9a0 <__sfp_lock_release>
 800aa74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aa78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aa7c:	6025      	str	r5, [r4, #0]
 800aa7e:	61a5      	str	r5, [r4, #24]
 800aa80:	2208      	movs	r2, #8
 800aa82:	4629      	mov	r1, r5
 800aa84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aa88:	f7ff fcd0 	bl	800a42c <memset>
 800aa8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aa90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aa94:	4620      	mov	r0, r4
 800aa96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa98:	3468      	adds	r4, #104	; 0x68
 800aa9a:	e7d9      	b.n	800aa50 <__sfp+0x1c>
 800aa9c:	2104      	movs	r1, #4
 800aa9e:	4638      	mov	r0, r7
 800aaa0:	f7ff ff62 	bl	800a968 <__sfmoreglue>
 800aaa4:	4604      	mov	r4, r0
 800aaa6:	6030      	str	r0, [r6, #0]
 800aaa8:	2800      	cmp	r0, #0
 800aaaa:	d1d5      	bne.n	800aa58 <__sfp+0x24>
 800aaac:	f7ff ff78 	bl	800a9a0 <__sfp_lock_release>
 800aab0:	230c      	movs	r3, #12
 800aab2:	603b      	str	r3, [r7, #0]
 800aab4:	e7ee      	b.n	800aa94 <__sfp+0x60>
 800aab6:	bf00      	nop
 800aab8:	0800b734 	.word	0x0800b734
 800aabc:	ffff0001 	.word	0xffff0001

0800aac0 <fiprintf>:
 800aac0:	b40e      	push	{r1, r2, r3}
 800aac2:	b503      	push	{r0, r1, lr}
 800aac4:	4601      	mov	r1, r0
 800aac6:	ab03      	add	r3, sp, #12
 800aac8:	4805      	ldr	r0, [pc, #20]	; (800aae0 <fiprintf+0x20>)
 800aaca:	f853 2b04 	ldr.w	r2, [r3], #4
 800aace:	6800      	ldr	r0, [r0, #0]
 800aad0:	9301      	str	r3, [sp, #4]
 800aad2:	f000 f9a1 	bl	800ae18 <_vfiprintf_r>
 800aad6:	b002      	add	sp, #8
 800aad8:	f85d eb04 	ldr.w	lr, [sp], #4
 800aadc:	b003      	add	sp, #12
 800aade:	4770      	bx	lr
 800aae0:	2000011c 	.word	0x2000011c

0800aae4 <_fwalk_reent>:
 800aae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aae8:	4606      	mov	r6, r0
 800aaea:	4688      	mov	r8, r1
 800aaec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aaf0:	2700      	movs	r7, #0
 800aaf2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aaf6:	f1b9 0901 	subs.w	r9, r9, #1
 800aafa:	d505      	bpl.n	800ab08 <_fwalk_reent+0x24>
 800aafc:	6824      	ldr	r4, [r4, #0]
 800aafe:	2c00      	cmp	r4, #0
 800ab00:	d1f7      	bne.n	800aaf2 <_fwalk_reent+0xe>
 800ab02:	4638      	mov	r0, r7
 800ab04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab08:	89ab      	ldrh	r3, [r5, #12]
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d907      	bls.n	800ab1e <_fwalk_reent+0x3a>
 800ab0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab12:	3301      	adds	r3, #1
 800ab14:	d003      	beq.n	800ab1e <_fwalk_reent+0x3a>
 800ab16:	4629      	mov	r1, r5
 800ab18:	4630      	mov	r0, r6
 800ab1a:	47c0      	blx	r8
 800ab1c:	4307      	orrs	r7, r0
 800ab1e:	3568      	adds	r5, #104	; 0x68
 800ab20:	e7e9      	b.n	800aaf6 <_fwalk_reent+0x12>

0800ab22 <__retarget_lock_init_recursive>:
 800ab22:	4770      	bx	lr

0800ab24 <__retarget_lock_acquire_recursive>:
 800ab24:	4770      	bx	lr

0800ab26 <__retarget_lock_release_recursive>:
 800ab26:	4770      	bx	lr

0800ab28 <__swhatbuf_r>:
 800ab28:	b570      	push	{r4, r5, r6, lr}
 800ab2a:	460e      	mov	r6, r1
 800ab2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab30:	2900      	cmp	r1, #0
 800ab32:	b096      	sub	sp, #88	; 0x58
 800ab34:	4614      	mov	r4, r2
 800ab36:	461d      	mov	r5, r3
 800ab38:	da08      	bge.n	800ab4c <__swhatbuf_r+0x24>
 800ab3a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	602a      	str	r2, [r5, #0]
 800ab42:	061a      	lsls	r2, r3, #24
 800ab44:	d410      	bmi.n	800ab68 <__swhatbuf_r+0x40>
 800ab46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab4a:	e00e      	b.n	800ab6a <__swhatbuf_r+0x42>
 800ab4c:	466a      	mov	r2, sp
 800ab4e:	f000 fca5 	bl	800b49c <_fstat_r>
 800ab52:	2800      	cmp	r0, #0
 800ab54:	dbf1      	blt.n	800ab3a <__swhatbuf_r+0x12>
 800ab56:	9a01      	ldr	r2, [sp, #4]
 800ab58:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ab5c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ab60:	425a      	negs	r2, r3
 800ab62:	415a      	adcs	r2, r3
 800ab64:	602a      	str	r2, [r5, #0]
 800ab66:	e7ee      	b.n	800ab46 <__swhatbuf_r+0x1e>
 800ab68:	2340      	movs	r3, #64	; 0x40
 800ab6a:	2000      	movs	r0, #0
 800ab6c:	6023      	str	r3, [r4, #0]
 800ab6e:	b016      	add	sp, #88	; 0x58
 800ab70:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ab74 <__smakebuf_r>:
 800ab74:	898b      	ldrh	r3, [r1, #12]
 800ab76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab78:	079d      	lsls	r5, r3, #30
 800ab7a:	4606      	mov	r6, r0
 800ab7c:	460c      	mov	r4, r1
 800ab7e:	d507      	bpl.n	800ab90 <__smakebuf_r+0x1c>
 800ab80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab84:	6023      	str	r3, [r4, #0]
 800ab86:	6123      	str	r3, [r4, #16]
 800ab88:	2301      	movs	r3, #1
 800ab8a:	6163      	str	r3, [r4, #20]
 800ab8c:	b002      	add	sp, #8
 800ab8e:	bd70      	pop	{r4, r5, r6, pc}
 800ab90:	ab01      	add	r3, sp, #4
 800ab92:	466a      	mov	r2, sp
 800ab94:	f7ff ffc8 	bl	800ab28 <__swhatbuf_r>
 800ab98:	9900      	ldr	r1, [sp, #0]
 800ab9a:	4605      	mov	r5, r0
 800ab9c:	4630      	mov	r0, r6
 800ab9e:	f000 f89d 	bl	800acdc <_malloc_r>
 800aba2:	b948      	cbnz	r0, 800abb8 <__smakebuf_r+0x44>
 800aba4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aba8:	059a      	lsls	r2, r3, #22
 800abaa:	d4ef      	bmi.n	800ab8c <__smakebuf_r+0x18>
 800abac:	f023 0303 	bic.w	r3, r3, #3
 800abb0:	f043 0302 	orr.w	r3, r3, #2
 800abb4:	81a3      	strh	r3, [r4, #12]
 800abb6:	e7e3      	b.n	800ab80 <__smakebuf_r+0xc>
 800abb8:	4b0d      	ldr	r3, [pc, #52]	; (800abf0 <__smakebuf_r+0x7c>)
 800abba:	62b3      	str	r3, [r6, #40]	; 0x28
 800abbc:	89a3      	ldrh	r3, [r4, #12]
 800abbe:	6020      	str	r0, [r4, #0]
 800abc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abc4:	81a3      	strh	r3, [r4, #12]
 800abc6:	9b00      	ldr	r3, [sp, #0]
 800abc8:	6163      	str	r3, [r4, #20]
 800abca:	9b01      	ldr	r3, [sp, #4]
 800abcc:	6120      	str	r0, [r4, #16]
 800abce:	b15b      	cbz	r3, 800abe8 <__smakebuf_r+0x74>
 800abd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abd4:	4630      	mov	r0, r6
 800abd6:	f000 fc73 	bl	800b4c0 <_isatty_r>
 800abda:	b128      	cbz	r0, 800abe8 <__smakebuf_r+0x74>
 800abdc:	89a3      	ldrh	r3, [r4, #12]
 800abde:	f023 0303 	bic.w	r3, r3, #3
 800abe2:	f043 0301 	orr.w	r3, r3, #1
 800abe6:	81a3      	strh	r3, [r4, #12]
 800abe8:	89a0      	ldrh	r0, [r4, #12]
 800abea:	4305      	orrs	r5, r0
 800abec:	81a5      	strh	r5, [r4, #12]
 800abee:	e7cd      	b.n	800ab8c <__smakebuf_r+0x18>
 800abf0:	0800a95d 	.word	0x0800a95d

0800abf4 <malloc>:
 800abf4:	4b02      	ldr	r3, [pc, #8]	; (800ac00 <malloc+0xc>)
 800abf6:	4601      	mov	r1, r0
 800abf8:	6818      	ldr	r0, [r3, #0]
 800abfa:	f000 b86f 	b.w	800acdc <_malloc_r>
 800abfe:	bf00      	nop
 800ac00:	2000011c 	.word	0x2000011c

0800ac04 <_free_r>:
 800ac04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac06:	2900      	cmp	r1, #0
 800ac08:	d044      	beq.n	800ac94 <_free_r+0x90>
 800ac0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac0e:	9001      	str	r0, [sp, #4]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	f1a1 0404 	sub.w	r4, r1, #4
 800ac16:	bfb8      	it	lt
 800ac18:	18e4      	addlt	r4, r4, r3
 800ac1a:	f000 fc73 	bl	800b504 <__malloc_lock>
 800ac1e:	4a1e      	ldr	r2, [pc, #120]	; (800ac98 <_free_r+0x94>)
 800ac20:	9801      	ldr	r0, [sp, #4]
 800ac22:	6813      	ldr	r3, [r2, #0]
 800ac24:	b933      	cbnz	r3, 800ac34 <_free_r+0x30>
 800ac26:	6063      	str	r3, [r4, #4]
 800ac28:	6014      	str	r4, [r2, #0]
 800ac2a:	b003      	add	sp, #12
 800ac2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac30:	f000 bc6e 	b.w	800b510 <__malloc_unlock>
 800ac34:	42a3      	cmp	r3, r4
 800ac36:	d908      	bls.n	800ac4a <_free_r+0x46>
 800ac38:	6825      	ldr	r5, [r4, #0]
 800ac3a:	1961      	adds	r1, r4, r5
 800ac3c:	428b      	cmp	r3, r1
 800ac3e:	bf01      	itttt	eq
 800ac40:	6819      	ldreq	r1, [r3, #0]
 800ac42:	685b      	ldreq	r3, [r3, #4]
 800ac44:	1949      	addeq	r1, r1, r5
 800ac46:	6021      	streq	r1, [r4, #0]
 800ac48:	e7ed      	b.n	800ac26 <_free_r+0x22>
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	b10b      	cbz	r3, 800ac54 <_free_r+0x50>
 800ac50:	42a3      	cmp	r3, r4
 800ac52:	d9fa      	bls.n	800ac4a <_free_r+0x46>
 800ac54:	6811      	ldr	r1, [r2, #0]
 800ac56:	1855      	adds	r5, r2, r1
 800ac58:	42a5      	cmp	r5, r4
 800ac5a:	d10b      	bne.n	800ac74 <_free_r+0x70>
 800ac5c:	6824      	ldr	r4, [r4, #0]
 800ac5e:	4421      	add	r1, r4
 800ac60:	1854      	adds	r4, r2, r1
 800ac62:	42a3      	cmp	r3, r4
 800ac64:	6011      	str	r1, [r2, #0]
 800ac66:	d1e0      	bne.n	800ac2a <_free_r+0x26>
 800ac68:	681c      	ldr	r4, [r3, #0]
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	6053      	str	r3, [r2, #4]
 800ac6e:	4421      	add	r1, r4
 800ac70:	6011      	str	r1, [r2, #0]
 800ac72:	e7da      	b.n	800ac2a <_free_r+0x26>
 800ac74:	d902      	bls.n	800ac7c <_free_r+0x78>
 800ac76:	230c      	movs	r3, #12
 800ac78:	6003      	str	r3, [r0, #0]
 800ac7a:	e7d6      	b.n	800ac2a <_free_r+0x26>
 800ac7c:	6825      	ldr	r5, [r4, #0]
 800ac7e:	1961      	adds	r1, r4, r5
 800ac80:	428b      	cmp	r3, r1
 800ac82:	bf04      	itt	eq
 800ac84:	6819      	ldreq	r1, [r3, #0]
 800ac86:	685b      	ldreq	r3, [r3, #4]
 800ac88:	6063      	str	r3, [r4, #4]
 800ac8a:	bf04      	itt	eq
 800ac8c:	1949      	addeq	r1, r1, r5
 800ac8e:	6021      	streq	r1, [r4, #0]
 800ac90:	6054      	str	r4, [r2, #4]
 800ac92:	e7ca      	b.n	800ac2a <_free_r+0x26>
 800ac94:	b003      	add	sp, #12
 800ac96:	bd30      	pop	{r4, r5, pc}
 800ac98:	20000f84 	.word	0x20000f84

0800ac9c <sbrk_aligned>:
 800ac9c:	b570      	push	{r4, r5, r6, lr}
 800ac9e:	4e0e      	ldr	r6, [pc, #56]	; (800acd8 <sbrk_aligned+0x3c>)
 800aca0:	460c      	mov	r4, r1
 800aca2:	6831      	ldr	r1, [r6, #0]
 800aca4:	4605      	mov	r5, r0
 800aca6:	b911      	cbnz	r1, 800acae <sbrk_aligned+0x12>
 800aca8:	f000 fb7a 	bl	800b3a0 <_sbrk_r>
 800acac:	6030      	str	r0, [r6, #0]
 800acae:	4621      	mov	r1, r4
 800acb0:	4628      	mov	r0, r5
 800acb2:	f000 fb75 	bl	800b3a0 <_sbrk_r>
 800acb6:	1c43      	adds	r3, r0, #1
 800acb8:	d00a      	beq.n	800acd0 <sbrk_aligned+0x34>
 800acba:	1cc4      	adds	r4, r0, #3
 800acbc:	f024 0403 	bic.w	r4, r4, #3
 800acc0:	42a0      	cmp	r0, r4
 800acc2:	d007      	beq.n	800acd4 <sbrk_aligned+0x38>
 800acc4:	1a21      	subs	r1, r4, r0
 800acc6:	4628      	mov	r0, r5
 800acc8:	f000 fb6a 	bl	800b3a0 <_sbrk_r>
 800accc:	3001      	adds	r0, #1
 800acce:	d101      	bne.n	800acd4 <sbrk_aligned+0x38>
 800acd0:	f04f 34ff 	mov.w	r4, #4294967295
 800acd4:	4620      	mov	r0, r4
 800acd6:	bd70      	pop	{r4, r5, r6, pc}
 800acd8:	20000f88 	.word	0x20000f88

0800acdc <_malloc_r>:
 800acdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ace0:	1ccd      	adds	r5, r1, #3
 800ace2:	f025 0503 	bic.w	r5, r5, #3
 800ace6:	3508      	adds	r5, #8
 800ace8:	2d0c      	cmp	r5, #12
 800acea:	bf38      	it	cc
 800acec:	250c      	movcc	r5, #12
 800acee:	2d00      	cmp	r5, #0
 800acf0:	4607      	mov	r7, r0
 800acf2:	db01      	blt.n	800acf8 <_malloc_r+0x1c>
 800acf4:	42a9      	cmp	r1, r5
 800acf6:	d905      	bls.n	800ad04 <_malloc_r+0x28>
 800acf8:	230c      	movs	r3, #12
 800acfa:	603b      	str	r3, [r7, #0]
 800acfc:	2600      	movs	r6, #0
 800acfe:	4630      	mov	r0, r6
 800ad00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad04:	4e2e      	ldr	r6, [pc, #184]	; (800adc0 <_malloc_r+0xe4>)
 800ad06:	f000 fbfd 	bl	800b504 <__malloc_lock>
 800ad0a:	6833      	ldr	r3, [r6, #0]
 800ad0c:	461c      	mov	r4, r3
 800ad0e:	bb34      	cbnz	r4, 800ad5e <_malloc_r+0x82>
 800ad10:	4629      	mov	r1, r5
 800ad12:	4638      	mov	r0, r7
 800ad14:	f7ff ffc2 	bl	800ac9c <sbrk_aligned>
 800ad18:	1c43      	adds	r3, r0, #1
 800ad1a:	4604      	mov	r4, r0
 800ad1c:	d14d      	bne.n	800adba <_malloc_r+0xde>
 800ad1e:	6834      	ldr	r4, [r6, #0]
 800ad20:	4626      	mov	r6, r4
 800ad22:	2e00      	cmp	r6, #0
 800ad24:	d140      	bne.n	800ada8 <_malloc_r+0xcc>
 800ad26:	6823      	ldr	r3, [r4, #0]
 800ad28:	4631      	mov	r1, r6
 800ad2a:	4638      	mov	r0, r7
 800ad2c:	eb04 0803 	add.w	r8, r4, r3
 800ad30:	f000 fb36 	bl	800b3a0 <_sbrk_r>
 800ad34:	4580      	cmp	r8, r0
 800ad36:	d13a      	bne.n	800adae <_malloc_r+0xd2>
 800ad38:	6821      	ldr	r1, [r4, #0]
 800ad3a:	3503      	adds	r5, #3
 800ad3c:	1a6d      	subs	r5, r5, r1
 800ad3e:	f025 0503 	bic.w	r5, r5, #3
 800ad42:	3508      	adds	r5, #8
 800ad44:	2d0c      	cmp	r5, #12
 800ad46:	bf38      	it	cc
 800ad48:	250c      	movcc	r5, #12
 800ad4a:	4629      	mov	r1, r5
 800ad4c:	4638      	mov	r0, r7
 800ad4e:	f7ff ffa5 	bl	800ac9c <sbrk_aligned>
 800ad52:	3001      	adds	r0, #1
 800ad54:	d02b      	beq.n	800adae <_malloc_r+0xd2>
 800ad56:	6823      	ldr	r3, [r4, #0]
 800ad58:	442b      	add	r3, r5
 800ad5a:	6023      	str	r3, [r4, #0]
 800ad5c:	e00e      	b.n	800ad7c <_malloc_r+0xa0>
 800ad5e:	6822      	ldr	r2, [r4, #0]
 800ad60:	1b52      	subs	r2, r2, r5
 800ad62:	d41e      	bmi.n	800ada2 <_malloc_r+0xc6>
 800ad64:	2a0b      	cmp	r2, #11
 800ad66:	d916      	bls.n	800ad96 <_malloc_r+0xba>
 800ad68:	1961      	adds	r1, r4, r5
 800ad6a:	42a3      	cmp	r3, r4
 800ad6c:	6025      	str	r5, [r4, #0]
 800ad6e:	bf18      	it	ne
 800ad70:	6059      	strne	r1, [r3, #4]
 800ad72:	6863      	ldr	r3, [r4, #4]
 800ad74:	bf08      	it	eq
 800ad76:	6031      	streq	r1, [r6, #0]
 800ad78:	5162      	str	r2, [r4, r5]
 800ad7a:	604b      	str	r3, [r1, #4]
 800ad7c:	4638      	mov	r0, r7
 800ad7e:	f104 060b 	add.w	r6, r4, #11
 800ad82:	f000 fbc5 	bl	800b510 <__malloc_unlock>
 800ad86:	f026 0607 	bic.w	r6, r6, #7
 800ad8a:	1d23      	adds	r3, r4, #4
 800ad8c:	1af2      	subs	r2, r6, r3
 800ad8e:	d0b6      	beq.n	800acfe <_malloc_r+0x22>
 800ad90:	1b9b      	subs	r3, r3, r6
 800ad92:	50a3      	str	r3, [r4, r2]
 800ad94:	e7b3      	b.n	800acfe <_malloc_r+0x22>
 800ad96:	6862      	ldr	r2, [r4, #4]
 800ad98:	42a3      	cmp	r3, r4
 800ad9a:	bf0c      	ite	eq
 800ad9c:	6032      	streq	r2, [r6, #0]
 800ad9e:	605a      	strne	r2, [r3, #4]
 800ada0:	e7ec      	b.n	800ad7c <_malloc_r+0xa0>
 800ada2:	4623      	mov	r3, r4
 800ada4:	6864      	ldr	r4, [r4, #4]
 800ada6:	e7b2      	b.n	800ad0e <_malloc_r+0x32>
 800ada8:	4634      	mov	r4, r6
 800adaa:	6876      	ldr	r6, [r6, #4]
 800adac:	e7b9      	b.n	800ad22 <_malloc_r+0x46>
 800adae:	230c      	movs	r3, #12
 800adb0:	603b      	str	r3, [r7, #0]
 800adb2:	4638      	mov	r0, r7
 800adb4:	f000 fbac 	bl	800b510 <__malloc_unlock>
 800adb8:	e7a1      	b.n	800acfe <_malloc_r+0x22>
 800adba:	6025      	str	r5, [r4, #0]
 800adbc:	e7de      	b.n	800ad7c <_malloc_r+0xa0>
 800adbe:	bf00      	nop
 800adc0:	20000f84 	.word	0x20000f84

0800adc4 <__sfputc_r>:
 800adc4:	6893      	ldr	r3, [r2, #8]
 800adc6:	3b01      	subs	r3, #1
 800adc8:	2b00      	cmp	r3, #0
 800adca:	b410      	push	{r4}
 800adcc:	6093      	str	r3, [r2, #8]
 800adce:	da08      	bge.n	800ade2 <__sfputc_r+0x1e>
 800add0:	6994      	ldr	r4, [r2, #24]
 800add2:	42a3      	cmp	r3, r4
 800add4:	db01      	blt.n	800adda <__sfputc_r+0x16>
 800add6:	290a      	cmp	r1, #10
 800add8:	d103      	bne.n	800ade2 <__sfputc_r+0x1e>
 800adda:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adde:	f7ff bbf9 	b.w	800a5d4 <__swbuf_r>
 800ade2:	6813      	ldr	r3, [r2, #0]
 800ade4:	1c58      	adds	r0, r3, #1
 800ade6:	6010      	str	r0, [r2, #0]
 800ade8:	7019      	strb	r1, [r3, #0]
 800adea:	4608      	mov	r0, r1
 800adec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adf0:	4770      	bx	lr

0800adf2 <__sfputs_r>:
 800adf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adf4:	4606      	mov	r6, r0
 800adf6:	460f      	mov	r7, r1
 800adf8:	4614      	mov	r4, r2
 800adfa:	18d5      	adds	r5, r2, r3
 800adfc:	42ac      	cmp	r4, r5
 800adfe:	d101      	bne.n	800ae04 <__sfputs_r+0x12>
 800ae00:	2000      	movs	r0, #0
 800ae02:	e007      	b.n	800ae14 <__sfputs_r+0x22>
 800ae04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae08:	463a      	mov	r2, r7
 800ae0a:	4630      	mov	r0, r6
 800ae0c:	f7ff ffda 	bl	800adc4 <__sfputc_r>
 800ae10:	1c43      	adds	r3, r0, #1
 800ae12:	d1f3      	bne.n	800adfc <__sfputs_r+0xa>
 800ae14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ae18 <_vfiprintf_r>:
 800ae18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae1c:	460d      	mov	r5, r1
 800ae1e:	b09d      	sub	sp, #116	; 0x74
 800ae20:	4614      	mov	r4, r2
 800ae22:	4698      	mov	r8, r3
 800ae24:	4606      	mov	r6, r0
 800ae26:	b118      	cbz	r0, 800ae30 <_vfiprintf_r+0x18>
 800ae28:	6983      	ldr	r3, [r0, #24]
 800ae2a:	b90b      	cbnz	r3, 800ae30 <_vfiprintf_r+0x18>
 800ae2c:	f7ff fdca 	bl	800a9c4 <__sinit>
 800ae30:	4b89      	ldr	r3, [pc, #548]	; (800b058 <_vfiprintf_r+0x240>)
 800ae32:	429d      	cmp	r5, r3
 800ae34:	d11b      	bne.n	800ae6e <_vfiprintf_r+0x56>
 800ae36:	6875      	ldr	r5, [r6, #4]
 800ae38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae3a:	07d9      	lsls	r1, r3, #31
 800ae3c:	d405      	bmi.n	800ae4a <_vfiprintf_r+0x32>
 800ae3e:	89ab      	ldrh	r3, [r5, #12]
 800ae40:	059a      	lsls	r2, r3, #22
 800ae42:	d402      	bmi.n	800ae4a <_vfiprintf_r+0x32>
 800ae44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae46:	f7ff fe6d 	bl	800ab24 <__retarget_lock_acquire_recursive>
 800ae4a:	89ab      	ldrh	r3, [r5, #12]
 800ae4c:	071b      	lsls	r3, r3, #28
 800ae4e:	d501      	bpl.n	800ae54 <_vfiprintf_r+0x3c>
 800ae50:	692b      	ldr	r3, [r5, #16]
 800ae52:	b9eb      	cbnz	r3, 800ae90 <_vfiprintf_r+0x78>
 800ae54:	4629      	mov	r1, r5
 800ae56:	4630      	mov	r0, r6
 800ae58:	f7ff fc0e 	bl	800a678 <__swsetup_r>
 800ae5c:	b1c0      	cbz	r0, 800ae90 <_vfiprintf_r+0x78>
 800ae5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae60:	07dc      	lsls	r4, r3, #31
 800ae62:	d50e      	bpl.n	800ae82 <_vfiprintf_r+0x6a>
 800ae64:	f04f 30ff 	mov.w	r0, #4294967295
 800ae68:	b01d      	add	sp, #116	; 0x74
 800ae6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae6e:	4b7b      	ldr	r3, [pc, #492]	; (800b05c <_vfiprintf_r+0x244>)
 800ae70:	429d      	cmp	r5, r3
 800ae72:	d101      	bne.n	800ae78 <_vfiprintf_r+0x60>
 800ae74:	68b5      	ldr	r5, [r6, #8]
 800ae76:	e7df      	b.n	800ae38 <_vfiprintf_r+0x20>
 800ae78:	4b79      	ldr	r3, [pc, #484]	; (800b060 <_vfiprintf_r+0x248>)
 800ae7a:	429d      	cmp	r5, r3
 800ae7c:	bf08      	it	eq
 800ae7e:	68f5      	ldreq	r5, [r6, #12]
 800ae80:	e7da      	b.n	800ae38 <_vfiprintf_r+0x20>
 800ae82:	89ab      	ldrh	r3, [r5, #12]
 800ae84:	0598      	lsls	r0, r3, #22
 800ae86:	d4ed      	bmi.n	800ae64 <_vfiprintf_r+0x4c>
 800ae88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae8a:	f7ff fe4c 	bl	800ab26 <__retarget_lock_release_recursive>
 800ae8e:	e7e9      	b.n	800ae64 <_vfiprintf_r+0x4c>
 800ae90:	2300      	movs	r3, #0
 800ae92:	9309      	str	r3, [sp, #36]	; 0x24
 800ae94:	2320      	movs	r3, #32
 800ae96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae9a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae9e:	2330      	movs	r3, #48	; 0x30
 800aea0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b064 <_vfiprintf_r+0x24c>
 800aea4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aea8:	f04f 0901 	mov.w	r9, #1
 800aeac:	4623      	mov	r3, r4
 800aeae:	469a      	mov	sl, r3
 800aeb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aeb4:	b10a      	cbz	r2, 800aeba <_vfiprintf_r+0xa2>
 800aeb6:	2a25      	cmp	r2, #37	; 0x25
 800aeb8:	d1f9      	bne.n	800aeae <_vfiprintf_r+0x96>
 800aeba:	ebba 0b04 	subs.w	fp, sl, r4
 800aebe:	d00b      	beq.n	800aed8 <_vfiprintf_r+0xc0>
 800aec0:	465b      	mov	r3, fp
 800aec2:	4622      	mov	r2, r4
 800aec4:	4629      	mov	r1, r5
 800aec6:	4630      	mov	r0, r6
 800aec8:	f7ff ff93 	bl	800adf2 <__sfputs_r>
 800aecc:	3001      	adds	r0, #1
 800aece:	f000 80aa 	beq.w	800b026 <_vfiprintf_r+0x20e>
 800aed2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aed4:	445a      	add	r2, fp
 800aed6:	9209      	str	r2, [sp, #36]	; 0x24
 800aed8:	f89a 3000 	ldrb.w	r3, [sl]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	f000 80a2 	beq.w	800b026 <_vfiprintf_r+0x20e>
 800aee2:	2300      	movs	r3, #0
 800aee4:	f04f 32ff 	mov.w	r2, #4294967295
 800aee8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aeec:	f10a 0a01 	add.w	sl, sl, #1
 800aef0:	9304      	str	r3, [sp, #16]
 800aef2:	9307      	str	r3, [sp, #28]
 800aef4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aef8:	931a      	str	r3, [sp, #104]	; 0x68
 800aefa:	4654      	mov	r4, sl
 800aefc:	2205      	movs	r2, #5
 800aefe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af02:	4858      	ldr	r0, [pc, #352]	; (800b064 <_vfiprintf_r+0x24c>)
 800af04:	f7f5 f974 	bl	80001f0 <memchr>
 800af08:	9a04      	ldr	r2, [sp, #16]
 800af0a:	b9d8      	cbnz	r0, 800af44 <_vfiprintf_r+0x12c>
 800af0c:	06d1      	lsls	r1, r2, #27
 800af0e:	bf44      	itt	mi
 800af10:	2320      	movmi	r3, #32
 800af12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af16:	0713      	lsls	r3, r2, #28
 800af18:	bf44      	itt	mi
 800af1a:	232b      	movmi	r3, #43	; 0x2b
 800af1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af20:	f89a 3000 	ldrb.w	r3, [sl]
 800af24:	2b2a      	cmp	r3, #42	; 0x2a
 800af26:	d015      	beq.n	800af54 <_vfiprintf_r+0x13c>
 800af28:	9a07      	ldr	r2, [sp, #28]
 800af2a:	4654      	mov	r4, sl
 800af2c:	2000      	movs	r0, #0
 800af2e:	f04f 0c0a 	mov.w	ip, #10
 800af32:	4621      	mov	r1, r4
 800af34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af38:	3b30      	subs	r3, #48	; 0x30
 800af3a:	2b09      	cmp	r3, #9
 800af3c:	d94e      	bls.n	800afdc <_vfiprintf_r+0x1c4>
 800af3e:	b1b0      	cbz	r0, 800af6e <_vfiprintf_r+0x156>
 800af40:	9207      	str	r2, [sp, #28]
 800af42:	e014      	b.n	800af6e <_vfiprintf_r+0x156>
 800af44:	eba0 0308 	sub.w	r3, r0, r8
 800af48:	fa09 f303 	lsl.w	r3, r9, r3
 800af4c:	4313      	orrs	r3, r2
 800af4e:	9304      	str	r3, [sp, #16]
 800af50:	46a2      	mov	sl, r4
 800af52:	e7d2      	b.n	800aefa <_vfiprintf_r+0xe2>
 800af54:	9b03      	ldr	r3, [sp, #12]
 800af56:	1d19      	adds	r1, r3, #4
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	9103      	str	r1, [sp, #12]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	bfbb      	ittet	lt
 800af60:	425b      	neglt	r3, r3
 800af62:	f042 0202 	orrlt.w	r2, r2, #2
 800af66:	9307      	strge	r3, [sp, #28]
 800af68:	9307      	strlt	r3, [sp, #28]
 800af6a:	bfb8      	it	lt
 800af6c:	9204      	strlt	r2, [sp, #16]
 800af6e:	7823      	ldrb	r3, [r4, #0]
 800af70:	2b2e      	cmp	r3, #46	; 0x2e
 800af72:	d10c      	bne.n	800af8e <_vfiprintf_r+0x176>
 800af74:	7863      	ldrb	r3, [r4, #1]
 800af76:	2b2a      	cmp	r3, #42	; 0x2a
 800af78:	d135      	bne.n	800afe6 <_vfiprintf_r+0x1ce>
 800af7a:	9b03      	ldr	r3, [sp, #12]
 800af7c:	1d1a      	adds	r2, r3, #4
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	9203      	str	r2, [sp, #12]
 800af82:	2b00      	cmp	r3, #0
 800af84:	bfb8      	it	lt
 800af86:	f04f 33ff 	movlt.w	r3, #4294967295
 800af8a:	3402      	adds	r4, #2
 800af8c:	9305      	str	r3, [sp, #20]
 800af8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b074 <_vfiprintf_r+0x25c>
 800af92:	7821      	ldrb	r1, [r4, #0]
 800af94:	2203      	movs	r2, #3
 800af96:	4650      	mov	r0, sl
 800af98:	f7f5 f92a 	bl	80001f0 <memchr>
 800af9c:	b140      	cbz	r0, 800afb0 <_vfiprintf_r+0x198>
 800af9e:	2340      	movs	r3, #64	; 0x40
 800afa0:	eba0 000a 	sub.w	r0, r0, sl
 800afa4:	fa03 f000 	lsl.w	r0, r3, r0
 800afa8:	9b04      	ldr	r3, [sp, #16]
 800afaa:	4303      	orrs	r3, r0
 800afac:	3401      	adds	r4, #1
 800afae:	9304      	str	r3, [sp, #16]
 800afb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afb4:	482c      	ldr	r0, [pc, #176]	; (800b068 <_vfiprintf_r+0x250>)
 800afb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afba:	2206      	movs	r2, #6
 800afbc:	f7f5 f918 	bl	80001f0 <memchr>
 800afc0:	2800      	cmp	r0, #0
 800afc2:	d03f      	beq.n	800b044 <_vfiprintf_r+0x22c>
 800afc4:	4b29      	ldr	r3, [pc, #164]	; (800b06c <_vfiprintf_r+0x254>)
 800afc6:	bb1b      	cbnz	r3, 800b010 <_vfiprintf_r+0x1f8>
 800afc8:	9b03      	ldr	r3, [sp, #12]
 800afca:	3307      	adds	r3, #7
 800afcc:	f023 0307 	bic.w	r3, r3, #7
 800afd0:	3308      	adds	r3, #8
 800afd2:	9303      	str	r3, [sp, #12]
 800afd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afd6:	443b      	add	r3, r7
 800afd8:	9309      	str	r3, [sp, #36]	; 0x24
 800afda:	e767      	b.n	800aeac <_vfiprintf_r+0x94>
 800afdc:	fb0c 3202 	mla	r2, ip, r2, r3
 800afe0:	460c      	mov	r4, r1
 800afe2:	2001      	movs	r0, #1
 800afe4:	e7a5      	b.n	800af32 <_vfiprintf_r+0x11a>
 800afe6:	2300      	movs	r3, #0
 800afe8:	3401      	adds	r4, #1
 800afea:	9305      	str	r3, [sp, #20]
 800afec:	4619      	mov	r1, r3
 800afee:	f04f 0c0a 	mov.w	ip, #10
 800aff2:	4620      	mov	r0, r4
 800aff4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aff8:	3a30      	subs	r2, #48	; 0x30
 800affa:	2a09      	cmp	r2, #9
 800affc:	d903      	bls.n	800b006 <_vfiprintf_r+0x1ee>
 800affe:	2b00      	cmp	r3, #0
 800b000:	d0c5      	beq.n	800af8e <_vfiprintf_r+0x176>
 800b002:	9105      	str	r1, [sp, #20]
 800b004:	e7c3      	b.n	800af8e <_vfiprintf_r+0x176>
 800b006:	fb0c 2101 	mla	r1, ip, r1, r2
 800b00a:	4604      	mov	r4, r0
 800b00c:	2301      	movs	r3, #1
 800b00e:	e7f0      	b.n	800aff2 <_vfiprintf_r+0x1da>
 800b010:	ab03      	add	r3, sp, #12
 800b012:	9300      	str	r3, [sp, #0]
 800b014:	462a      	mov	r2, r5
 800b016:	4b16      	ldr	r3, [pc, #88]	; (800b070 <_vfiprintf_r+0x258>)
 800b018:	a904      	add	r1, sp, #16
 800b01a:	4630      	mov	r0, r6
 800b01c:	f3af 8000 	nop.w
 800b020:	4607      	mov	r7, r0
 800b022:	1c78      	adds	r0, r7, #1
 800b024:	d1d6      	bne.n	800afd4 <_vfiprintf_r+0x1bc>
 800b026:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b028:	07d9      	lsls	r1, r3, #31
 800b02a:	d405      	bmi.n	800b038 <_vfiprintf_r+0x220>
 800b02c:	89ab      	ldrh	r3, [r5, #12]
 800b02e:	059a      	lsls	r2, r3, #22
 800b030:	d402      	bmi.n	800b038 <_vfiprintf_r+0x220>
 800b032:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b034:	f7ff fd77 	bl	800ab26 <__retarget_lock_release_recursive>
 800b038:	89ab      	ldrh	r3, [r5, #12]
 800b03a:	065b      	lsls	r3, r3, #25
 800b03c:	f53f af12 	bmi.w	800ae64 <_vfiprintf_r+0x4c>
 800b040:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b042:	e711      	b.n	800ae68 <_vfiprintf_r+0x50>
 800b044:	ab03      	add	r3, sp, #12
 800b046:	9300      	str	r3, [sp, #0]
 800b048:	462a      	mov	r2, r5
 800b04a:	4b09      	ldr	r3, [pc, #36]	; (800b070 <_vfiprintf_r+0x258>)
 800b04c:	a904      	add	r1, sp, #16
 800b04e:	4630      	mov	r0, r6
 800b050:	f000 f880 	bl	800b154 <_printf_i>
 800b054:	e7e4      	b.n	800b020 <_vfiprintf_r+0x208>
 800b056:	bf00      	nop
 800b058:	0800b808 	.word	0x0800b808
 800b05c:	0800b828 	.word	0x0800b828
 800b060:	0800b7e8 	.word	0x0800b7e8
 800b064:	0800b848 	.word	0x0800b848
 800b068:	0800b852 	.word	0x0800b852
 800b06c:	00000000 	.word	0x00000000
 800b070:	0800adf3 	.word	0x0800adf3
 800b074:	0800b84e 	.word	0x0800b84e

0800b078 <_printf_common>:
 800b078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b07c:	4616      	mov	r6, r2
 800b07e:	4699      	mov	r9, r3
 800b080:	688a      	ldr	r2, [r1, #8]
 800b082:	690b      	ldr	r3, [r1, #16]
 800b084:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b088:	4293      	cmp	r3, r2
 800b08a:	bfb8      	it	lt
 800b08c:	4613      	movlt	r3, r2
 800b08e:	6033      	str	r3, [r6, #0]
 800b090:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b094:	4607      	mov	r7, r0
 800b096:	460c      	mov	r4, r1
 800b098:	b10a      	cbz	r2, 800b09e <_printf_common+0x26>
 800b09a:	3301      	adds	r3, #1
 800b09c:	6033      	str	r3, [r6, #0]
 800b09e:	6823      	ldr	r3, [r4, #0]
 800b0a0:	0699      	lsls	r1, r3, #26
 800b0a2:	bf42      	ittt	mi
 800b0a4:	6833      	ldrmi	r3, [r6, #0]
 800b0a6:	3302      	addmi	r3, #2
 800b0a8:	6033      	strmi	r3, [r6, #0]
 800b0aa:	6825      	ldr	r5, [r4, #0]
 800b0ac:	f015 0506 	ands.w	r5, r5, #6
 800b0b0:	d106      	bne.n	800b0c0 <_printf_common+0x48>
 800b0b2:	f104 0a19 	add.w	sl, r4, #25
 800b0b6:	68e3      	ldr	r3, [r4, #12]
 800b0b8:	6832      	ldr	r2, [r6, #0]
 800b0ba:	1a9b      	subs	r3, r3, r2
 800b0bc:	42ab      	cmp	r3, r5
 800b0be:	dc26      	bgt.n	800b10e <_printf_common+0x96>
 800b0c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b0c4:	1e13      	subs	r3, r2, #0
 800b0c6:	6822      	ldr	r2, [r4, #0]
 800b0c8:	bf18      	it	ne
 800b0ca:	2301      	movne	r3, #1
 800b0cc:	0692      	lsls	r2, r2, #26
 800b0ce:	d42b      	bmi.n	800b128 <_printf_common+0xb0>
 800b0d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b0d4:	4649      	mov	r1, r9
 800b0d6:	4638      	mov	r0, r7
 800b0d8:	47c0      	blx	r8
 800b0da:	3001      	adds	r0, #1
 800b0dc:	d01e      	beq.n	800b11c <_printf_common+0xa4>
 800b0de:	6823      	ldr	r3, [r4, #0]
 800b0e0:	68e5      	ldr	r5, [r4, #12]
 800b0e2:	6832      	ldr	r2, [r6, #0]
 800b0e4:	f003 0306 	and.w	r3, r3, #6
 800b0e8:	2b04      	cmp	r3, #4
 800b0ea:	bf08      	it	eq
 800b0ec:	1aad      	subeq	r5, r5, r2
 800b0ee:	68a3      	ldr	r3, [r4, #8]
 800b0f0:	6922      	ldr	r2, [r4, #16]
 800b0f2:	bf0c      	ite	eq
 800b0f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0f8:	2500      	movne	r5, #0
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	bfc4      	itt	gt
 800b0fe:	1a9b      	subgt	r3, r3, r2
 800b100:	18ed      	addgt	r5, r5, r3
 800b102:	2600      	movs	r6, #0
 800b104:	341a      	adds	r4, #26
 800b106:	42b5      	cmp	r5, r6
 800b108:	d11a      	bne.n	800b140 <_printf_common+0xc8>
 800b10a:	2000      	movs	r0, #0
 800b10c:	e008      	b.n	800b120 <_printf_common+0xa8>
 800b10e:	2301      	movs	r3, #1
 800b110:	4652      	mov	r2, sl
 800b112:	4649      	mov	r1, r9
 800b114:	4638      	mov	r0, r7
 800b116:	47c0      	blx	r8
 800b118:	3001      	adds	r0, #1
 800b11a:	d103      	bne.n	800b124 <_printf_common+0xac>
 800b11c:	f04f 30ff 	mov.w	r0, #4294967295
 800b120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b124:	3501      	adds	r5, #1
 800b126:	e7c6      	b.n	800b0b6 <_printf_common+0x3e>
 800b128:	18e1      	adds	r1, r4, r3
 800b12a:	1c5a      	adds	r2, r3, #1
 800b12c:	2030      	movs	r0, #48	; 0x30
 800b12e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b132:	4422      	add	r2, r4
 800b134:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b138:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b13c:	3302      	adds	r3, #2
 800b13e:	e7c7      	b.n	800b0d0 <_printf_common+0x58>
 800b140:	2301      	movs	r3, #1
 800b142:	4622      	mov	r2, r4
 800b144:	4649      	mov	r1, r9
 800b146:	4638      	mov	r0, r7
 800b148:	47c0      	blx	r8
 800b14a:	3001      	adds	r0, #1
 800b14c:	d0e6      	beq.n	800b11c <_printf_common+0xa4>
 800b14e:	3601      	adds	r6, #1
 800b150:	e7d9      	b.n	800b106 <_printf_common+0x8e>
	...

0800b154 <_printf_i>:
 800b154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b158:	7e0f      	ldrb	r7, [r1, #24]
 800b15a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b15c:	2f78      	cmp	r7, #120	; 0x78
 800b15e:	4691      	mov	r9, r2
 800b160:	4680      	mov	r8, r0
 800b162:	460c      	mov	r4, r1
 800b164:	469a      	mov	sl, r3
 800b166:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b16a:	d807      	bhi.n	800b17c <_printf_i+0x28>
 800b16c:	2f62      	cmp	r7, #98	; 0x62
 800b16e:	d80a      	bhi.n	800b186 <_printf_i+0x32>
 800b170:	2f00      	cmp	r7, #0
 800b172:	f000 80d8 	beq.w	800b326 <_printf_i+0x1d2>
 800b176:	2f58      	cmp	r7, #88	; 0x58
 800b178:	f000 80a3 	beq.w	800b2c2 <_printf_i+0x16e>
 800b17c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b180:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b184:	e03a      	b.n	800b1fc <_printf_i+0xa8>
 800b186:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b18a:	2b15      	cmp	r3, #21
 800b18c:	d8f6      	bhi.n	800b17c <_printf_i+0x28>
 800b18e:	a101      	add	r1, pc, #4	; (adr r1, 800b194 <_printf_i+0x40>)
 800b190:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b194:	0800b1ed 	.word	0x0800b1ed
 800b198:	0800b201 	.word	0x0800b201
 800b19c:	0800b17d 	.word	0x0800b17d
 800b1a0:	0800b17d 	.word	0x0800b17d
 800b1a4:	0800b17d 	.word	0x0800b17d
 800b1a8:	0800b17d 	.word	0x0800b17d
 800b1ac:	0800b201 	.word	0x0800b201
 800b1b0:	0800b17d 	.word	0x0800b17d
 800b1b4:	0800b17d 	.word	0x0800b17d
 800b1b8:	0800b17d 	.word	0x0800b17d
 800b1bc:	0800b17d 	.word	0x0800b17d
 800b1c0:	0800b30d 	.word	0x0800b30d
 800b1c4:	0800b231 	.word	0x0800b231
 800b1c8:	0800b2ef 	.word	0x0800b2ef
 800b1cc:	0800b17d 	.word	0x0800b17d
 800b1d0:	0800b17d 	.word	0x0800b17d
 800b1d4:	0800b32f 	.word	0x0800b32f
 800b1d8:	0800b17d 	.word	0x0800b17d
 800b1dc:	0800b231 	.word	0x0800b231
 800b1e0:	0800b17d 	.word	0x0800b17d
 800b1e4:	0800b17d 	.word	0x0800b17d
 800b1e8:	0800b2f7 	.word	0x0800b2f7
 800b1ec:	682b      	ldr	r3, [r5, #0]
 800b1ee:	1d1a      	adds	r2, r3, #4
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	602a      	str	r2, [r5, #0]
 800b1f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	e0a3      	b.n	800b348 <_printf_i+0x1f4>
 800b200:	6820      	ldr	r0, [r4, #0]
 800b202:	6829      	ldr	r1, [r5, #0]
 800b204:	0606      	lsls	r6, r0, #24
 800b206:	f101 0304 	add.w	r3, r1, #4
 800b20a:	d50a      	bpl.n	800b222 <_printf_i+0xce>
 800b20c:	680e      	ldr	r6, [r1, #0]
 800b20e:	602b      	str	r3, [r5, #0]
 800b210:	2e00      	cmp	r6, #0
 800b212:	da03      	bge.n	800b21c <_printf_i+0xc8>
 800b214:	232d      	movs	r3, #45	; 0x2d
 800b216:	4276      	negs	r6, r6
 800b218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b21c:	485e      	ldr	r0, [pc, #376]	; (800b398 <_printf_i+0x244>)
 800b21e:	230a      	movs	r3, #10
 800b220:	e019      	b.n	800b256 <_printf_i+0x102>
 800b222:	680e      	ldr	r6, [r1, #0]
 800b224:	602b      	str	r3, [r5, #0]
 800b226:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b22a:	bf18      	it	ne
 800b22c:	b236      	sxthne	r6, r6
 800b22e:	e7ef      	b.n	800b210 <_printf_i+0xbc>
 800b230:	682b      	ldr	r3, [r5, #0]
 800b232:	6820      	ldr	r0, [r4, #0]
 800b234:	1d19      	adds	r1, r3, #4
 800b236:	6029      	str	r1, [r5, #0]
 800b238:	0601      	lsls	r1, r0, #24
 800b23a:	d501      	bpl.n	800b240 <_printf_i+0xec>
 800b23c:	681e      	ldr	r6, [r3, #0]
 800b23e:	e002      	b.n	800b246 <_printf_i+0xf2>
 800b240:	0646      	lsls	r6, r0, #25
 800b242:	d5fb      	bpl.n	800b23c <_printf_i+0xe8>
 800b244:	881e      	ldrh	r6, [r3, #0]
 800b246:	4854      	ldr	r0, [pc, #336]	; (800b398 <_printf_i+0x244>)
 800b248:	2f6f      	cmp	r7, #111	; 0x6f
 800b24a:	bf0c      	ite	eq
 800b24c:	2308      	moveq	r3, #8
 800b24e:	230a      	movne	r3, #10
 800b250:	2100      	movs	r1, #0
 800b252:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b256:	6865      	ldr	r5, [r4, #4]
 800b258:	60a5      	str	r5, [r4, #8]
 800b25a:	2d00      	cmp	r5, #0
 800b25c:	bfa2      	ittt	ge
 800b25e:	6821      	ldrge	r1, [r4, #0]
 800b260:	f021 0104 	bicge.w	r1, r1, #4
 800b264:	6021      	strge	r1, [r4, #0]
 800b266:	b90e      	cbnz	r6, 800b26c <_printf_i+0x118>
 800b268:	2d00      	cmp	r5, #0
 800b26a:	d04d      	beq.n	800b308 <_printf_i+0x1b4>
 800b26c:	4615      	mov	r5, r2
 800b26e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b272:	fb03 6711 	mls	r7, r3, r1, r6
 800b276:	5dc7      	ldrb	r7, [r0, r7]
 800b278:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b27c:	4637      	mov	r7, r6
 800b27e:	42bb      	cmp	r3, r7
 800b280:	460e      	mov	r6, r1
 800b282:	d9f4      	bls.n	800b26e <_printf_i+0x11a>
 800b284:	2b08      	cmp	r3, #8
 800b286:	d10b      	bne.n	800b2a0 <_printf_i+0x14c>
 800b288:	6823      	ldr	r3, [r4, #0]
 800b28a:	07de      	lsls	r6, r3, #31
 800b28c:	d508      	bpl.n	800b2a0 <_printf_i+0x14c>
 800b28e:	6923      	ldr	r3, [r4, #16]
 800b290:	6861      	ldr	r1, [r4, #4]
 800b292:	4299      	cmp	r1, r3
 800b294:	bfde      	ittt	le
 800b296:	2330      	movle	r3, #48	; 0x30
 800b298:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b29c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b2a0:	1b52      	subs	r2, r2, r5
 800b2a2:	6122      	str	r2, [r4, #16]
 800b2a4:	f8cd a000 	str.w	sl, [sp]
 800b2a8:	464b      	mov	r3, r9
 800b2aa:	aa03      	add	r2, sp, #12
 800b2ac:	4621      	mov	r1, r4
 800b2ae:	4640      	mov	r0, r8
 800b2b0:	f7ff fee2 	bl	800b078 <_printf_common>
 800b2b4:	3001      	adds	r0, #1
 800b2b6:	d14c      	bne.n	800b352 <_printf_i+0x1fe>
 800b2b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2bc:	b004      	add	sp, #16
 800b2be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2c2:	4835      	ldr	r0, [pc, #212]	; (800b398 <_printf_i+0x244>)
 800b2c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b2c8:	6829      	ldr	r1, [r5, #0]
 800b2ca:	6823      	ldr	r3, [r4, #0]
 800b2cc:	f851 6b04 	ldr.w	r6, [r1], #4
 800b2d0:	6029      	str	r1, [r5, #0]
 800b2d2:	061d      	lsls	r5, r3, #24
 800b2d4:	d514      	bpl.n	800b300 <_printf_i+0x1ac>
 800b2d6:	07df      	lsls	r7, r3, #31
 800b2d8:	bf44      	itt	mi
 800b2da:	f043 0320 	orrmi.w	r3, r3, #32
 800b2de:	6023      	strmi	r3, [r4, #0]
 800b2e0:	b91e      	cbnz	r6, 800b2ea <_printf_i+0x196>
 800b2e2:	6823      	ldr	r3, [r4, #0]
 800b2e4:	f023 0320 	bic.w	r3, r3, #32
 800b2e8:	6023      	str	r3, [r4, #0]
 800b2ea:	2310      	movs	r3, #16
 800b2ec:	e7b0      	b.n	800b250 <_printf_i+0xfc>
 800b2ee:	6823      	ldr	r3, [r4, #0]
 800b2f0:	f043 0320 	orr.w	r3, r3, #32
 800b2f4:	6023      	str	r3, [r4, #0]
 800b2f6:	2378      	movs	r3, #120	; 0x78
 800b2f8:	4828      	ldr	r0, [pc, #160]	; (800b39c <_printf_i+0x248>)
 800b2fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b2fe:	e7e3      	b.n	800b2c8 <_printf_i+0x174>
 800b300:	0659      	lsls	r1, r3, #25
 800b302:	bf48      	it	mi
 800b304:	b2b6      	uxthmi	r6, r6
 800b306:	e7e6      	b.n	800b2d6 <_printf_i+0x182>
 800b308:	4615      	mov	r5, r2
 800b30a:	e7bb      	b.n	800b284 <_printf_i+0x130>
 800b30c:	682b      	ldr	r3, [r5, #0]
 800b30e:	6826      	ldr	r6, [r4, #0]
 800b310:	6961      	ldr	r1, [r4, #20]
 800b312:	1d18      	adds	r0, r3, #4
 800b314:	6028      	str	r0, [r5, #0]
 800b316:	0635      	lsls	r5, r6, #24
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	d501      	bpl.n	800b320 <_printf_i+0x1cc>
 800b31c:	6019      	str	r1, [r3, #0]
 800b31e:	e002      	b.n	800b326 <_printf_i+0x1d2>
 800b320:	0670      	lsls	r0, r6, #25
 800b322:	d5fb      	bpl.n	800b31c <_printf_i+0x1c8>
 800b324:	8019      	strh	r1, [r3, #0]
 800b326:	2300      	movs	r3, #0
 800b328:	6123      	str	r3, [r4, #16]
 800b32a:	4615      	mov	r5, r2
 800b32c:	e7ba      	b.n	800b2a4 <_printf_i+0x150>
 800b32e:	682b      	ldr	r3, [r5, #0]
 800b330:	1d1a      	adds	r2, r3, #4
 800b332:	602a      	str	r2, [r5, #0]
 800b334:	681d      	ldr	r5, [r3, #0]
 800b336:	6862      	ldr	r2, [r4, #4]
 800b338:	2100      	movs	r1, #0
 800b33a:	4628      	mov	r0, r5
 800b33c:	f7f4 ff58 	bl	80001f0 <memchr>
 800b340:	b108      	cbz	r0, 800b346 <_printf_i+0x1f2>
 800b342:	1b40      	subs	r0, r0, r5
 800b344:	6060      	str	r0, [r4, #4]
 800b346:	6863      	ldr	r3, [r4, #4]
 800b348:	6123      	str	r3, [r4, #16]
 800b34a:	2300      	movs	r3, #0
 800b34c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b350:	e7a8      	b.n	800b2a4 <_printf_i+0x150>
 800b352:	6923      	ldr	r3, [r4, #16]
 800b354:	462a      	mov	r2, r5
 800b356:	4649      	mov	r1, r9
 800b358:	4640      	mov	r0, r8
 800b35a:	47d0      	blx	sl
 800b35c:	3001      	adds	r0, #1
 800b35e:	d0ab      	beq.n	800b2b8 <_printf_i+0x164>
 800b360:	6823      	ldr	r3, [r4, #0]
 800b362:	079b      	lsls	r3, r3, #30
 800b364:	d413      	bmi.n	800b38e <_printf_i+0x23a>
 800b366:	68e0      	ldr	r0, [r4, #12]
 800b368:	9b03      	ldr	r3, [sp, #12]
 800b36a:	4298      	cmp	r0, r3
 800b36c:	bfb8      	it	lt
 800b36e:	4618      	movlt	r0, r3
 800b370:	e7a4      	b.n	800b2bc <_printf_i+0x168>
 800b372:	2301      	movs	r3, #1
 800b374:	4632      	mov	r2, r6
 800b376:	4649      	mov	r1, r9
 800b378:	4640      	mov	r0, r8
 800b37a:	47d0      	blx	sl
 800b37c:	3001      	adds	r0, #1
 800b37e:	d09b      	beq.n	800b2b8 <_printf_i+0x164>
 800b380:	3501      	adds	r5, #1
 800b382:	68e3      	ldr	r3, [r4, #12]
 800b384:	9903      	ldr	r1, [sp, #12]
 800b386:	1a5b      	subs	r3, r3, r1
 800b388:	42ab      	cmp	r3, r5
 800b38a:	dcf2      	bgt.n	800b372 <_printf_i+0x21e>
 800b38c:	e7eb      	b.n	800b366 <_printf_i+0x212>
 800b38e:	2500      	movs	r5, #0
 800b390:	f104 0619 	add.w	r6, r4, #25
 800b394:	e7f5      	b.n	800b382 <_printf_i+0x22e>
 800b396:	bf00      	nop
 800b398:	0800b859 	.word	0x0800b859
 800b39c:	0800b86a 	.word	0x0800b86a

0800b3a0 <_sbrk_r>:
 800b3a0:	b538      	push	{r3, r4, r5, lr}
 800b3a2:	4d06      	ldr	r5, [pc, #24]	; (800b3bc <_sbrk_r+0x1c>)
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	4604      	mov	r4, r0
 800b3a8:	4608      	mov	r0, r1
 800b3aa:	602b      	str	r3, [r5, #0]
 800b3ac:	f7f5 fd30 	bl	8000e10 <_sbrk>
 800b3b0:	1c43      	adds	r3, r0, #1
 800b3b2:	d102      	bne.n	800b3ba <_sbrk_r+0x1a>
 800b3b4:	682b      	ldr	r3, [r5, #0]
 800b3b6:	b103      	cbz	r3, 800b3ba <_sbrk_r+0x1a>
 800b3b8:	6023      	str	r3, [r4, #0]
 800b3ba:	bd38      	pop	{r3, r4, r5, pc}
 800b3bc:	20000f8c 	.word	0x20000f8c

0800b3c0 <__sread>:
 800b3c0:	b510      	push	{r4, lr}
 800b3c2:	460c      	mov	r4, r1
 800b3c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3c8:	f000 f8a8 	bl	800b51c <_read_r>
 800b3cc:	2800      	cmp	r0, #0
 800b3ce:	bfab      	itete	ge
 800b3d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b3d2:	89a3      	ldrhlt	r3, [r4, #12]
 800b3d4:	181b      	addge	r3, r3, r0
 800b3d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b3da:	bfac      	ite	ge
 800b3dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800b3de:	81a3      	strhlt	r3, [r4, #12]
 800b3e0:	bd10      	pop	{r4, pc}

0800b3e2 <__swrite>:
 800b3e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3e6:	461f      	mov	r7, r3
 800b3e8:	898b      	ldrh	r3, [r1, #12]
 800b3ea:	05db      	lsls	r3, r3, #23
 800b3ec:	4605      	mov	r5, r0
 800b3ee:	460c      	mov	r4, r1
 800b3f0:	4616      	mov	r6, r2
 800b3f2:	d505      	bpl.n	800b400 <__swrite+0x1e>
 800b3f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3f8:	2302      	movs	r3, #2
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	f000 f870 	bl	800b4e0 <_lseek_r>
 800b400:	89a3      	ldrh	r3, [r4, #12]
 800b402:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b406:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b40a:	81a3      	strh	r3, [r4, #12]
 800b40c:	4632      	mov	r2, r6
 800b40e:	463b      	mov	r3, r7
 800b410:	4628      	mov	r0, r5
 800b412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b416:	f000 b817 	b.w	800b448 <_write_r>

0800b41a <__sseek>:
 800b41a:	b510      	push	{r4, lr}
 800b41c:	460c      	mov	r4, r1
 800b41e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b422:	f000 f85d 	bl	800b4e0 <_lseek_r>
 800b426:	1c43      	adds	r3, r0, #1
 800b428:	89a3      	ldrh	r3, [r4, #12]
 800b42a:	bf15      	itete	ne
 800b42c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b42e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b432:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b436:	81a3      	strheq	r3, [r4, #12]
 800b438:	bf18      	it	ne
 800b43a:	81a3      	strhne	r3, [r4, #12]
 800b43c:	bd10      	pop	{r4, pc}

0800b43e <__sclose>:
 800b43e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b442:	f000 b81b 	b.w	800b47c <_close_r>
	...

0800b448 <_write_r>:
 800b448:	b538      	push	{r3, r4, r5, lr}
 800b44a:	4d07      	ldr	r5, [pc, #28]	; (800b468 <_write_r+0x20>)
 800b44c:	4604      	mov	r4, r0
 800b44e:	4608      	mov	r0, r1
 800b450:	4611      	mov	r1, r2
 800b452:	2200      	movs	r2, #0
 800b454:	602a      	str	r2, [r5, #0]
 800b456:	461a      	mov	r2, r3
 800b458:	f7f5 fc89 	bl	8000d6e <_write>
 800b45c:	1c43      	adds	r3, r0, #1
 800b45e:	d102      	bne.n	800b466 <_write_r+0x1e>
 800b460:	682b      	ldr	r3, [r5, #0]
 800b462:	b103      	cbz	r3, 800b466 <_write_r+0x1e>
 800b464:	6023      	str	r3, [r4, #0]
 800b466:	bd38      	pop	{r3, r4, r5, pc}
 800b468:	20000f8c 	.word	0x20000f8c

0800b46c <abort>:
 800b46c:	b508      	push	{r3, lr}
 800b46e:	2006      	movs	r0, #6
 800b470:	f000 f88e 	bl	800b590 <raise>
 800b474:	2001      	movs	r0, #1
 800b476:	f7f5 fc53 	bl	8000d20 <_exit>
	...

0800b47c <_close_r>:
 800b47c:	b538      	push	{r3, r4, r5, lr}
 800b47e:	4d06      	ldr	r5, [pc, #24]	; (800b498 <_close_r+0x1c>)
 800b480:	2300      	movs	r3, #0
 800b482:	4604      	mov	r4, r0
 800b484:	4608      	mov	r0, r1
 800b486:	602b      	str	r3, [r5, #0]
 800b488:	f7f5 fc8d 	bl	8000da6 <_close>
 800b48c:	1c43      	adds	r3, r0, #1
 800b48e:	d102      	bne.n	800b496 <_close_r+0x1a>
 800b490:	682b      	ldr	r3, [r5, #0]
 800b492:	b103      	cbz	r3, 800b496 <_close_r+0x1a>
 800b494:	6023      	str	r3, [r4, #0]
 800b496:	bd38      	pop	{r3, r4, r5, pc}
 800b498:	20000f8c 	.word	0x20000f8c

0800b49c <_fstat_r>:
 800b49c:	b538      	push	{r3, r4, r5, lr}
 800b49e:	4d07      	ldr	r5, [pc, #28]	; (800b4bc <_fstat_r+0x20>)
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	4604      	mov	r4, r0
 800b4a4:	4608      	mov	r0, r1
 800b4a6:	4611      	mov	r1, r2
 800b4a8:	602b      	str	r3, [r5, #0]
 800b4aa:	f7f5 fc88 	bl	8000dbe <_fstat>
 800b4ae:	1c43      	adds	r3, r0, #1
 800b4b0:	d102      	bne.n	800b4b8 <_fstat_r+0x1c>
 800b4b2:	682b      	ldr	r3, [r5, #0]
 800b4b4:	b103      	cbz	r3, 800b4b8 <_fstat_r+0x1c>
 800b4b6:	6023      	str	r3, [r4, #0]
 800b4b8:	bd38      	pop	{r3, r4, r5, pc}
 800b4ba:	bf00      	nop
 800b4bc:	20000f8c 	.word	0x20000f8c

0800b4c0 <_isatty_r>:
 800b4c0:	b538      	push	{r3, r4, r5, lr}
 800b4c2:	4d06      	ldr	r5, [pc, #24]	; (800b4dc <_isatty_r+0x1c>)
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	4604      	mov	r4, r0
 800b4c8:	4608      	mov	r0, r1
 800b4ca:	602b      	str	r3, [r5, #0]
 800b4cc:	f7f5 fc87 	bl	8000dde <_isatty>
 800b4d0:	1c43      	adds	r3, r0, #1
 800b4d2:	d102      	bne.n	800b4da <_isatty_r+0x1a>
 800b4d4:	682b      	ldr	r3, [r5, #0]
 800b4d6:	b103      	cbz	r3, 800b4da <_isatty_r+0x1a>
 800b4d8:	6023      	str	r3, [r4, #0]
 800b4da:	bd38      	pop	{r3, r4, r5, pc}
 800b4dc:	20000f8c 	.word	0x20000f8c

0800b4e0 <_lseek_r>:
 800b4e0:	b538      	push	{r3, r4, r5, lr}
 800b4e2:	4d07      	ldr	r5, [pc, #28]	; (800b500 <_lseek_r+0x20>)
 800b4e4:	4604      	mov	r4, r0
 800b4e6:	4608      	mov	r0, r1
 800b4e8:	4611      	mov	r1, r2
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	602a      	str	r2, [r5, #0]
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	f7f5 fc80 	bl	8000df4 <_lseek>
 800b4f4:	1c43      	adds	r3, r0, #1
 800b4f6:	d102      	bne.n	800b4fe <_lseek_r+0x1e>
 800b4f8:	682b      	ldr	r3, [r5, #0]
 800b4fa:	b103      	cbz	r3, 800b4fe <_lseek_r+0x1e>
 800b4fc:	6023      	str	r3, [r4, #0]
 800b4fe:	bd38      	pop	{r3, r4, r5, pc}
 800b500:	20000f8c 	.word	0x20000f8c

0800b504 <__malloc_lock>:
 800b504:	4801      	ldr	r0, [pc, #4]	; (800b50c <__malloc_lock+0x8>)
 800b506:	f7ff bb0d 	b.w	800ab24 <__retarget_lock_acquire_recursive>
 800b50a:	bf00      	nop
 800b50c:	20000f80 	.word	0x20000f80

0800b510 <__malloc_unlock>:
 800b510:	4801      	ldr	r0, [pc, #4]	; (800b518 <__malloc_unlock+0x8>)
 800b512:	f7ff bb08 	b.w	800ab26 <__retarget_lock_release_recursive>
 800b516:	bf00      	nop
 800b518:	20000f80 	.word	0x20000f80

0800b51c <_read_r>:
 800b51c:	b538      	push	{r3, r4, r5, lr}
 800b51e:	4d07      	ldr	r5, [pc, #28]	; (800b53c <_read_r+0x20>)
 800b520:	4604      	mov	r4, r0
 800b522:	4608      	mov	r0, r1
 800b524:	4611      	mov	r1, r2
 800b526:	2200      	movs	r2, #0
 800b528:	602a      	str	r2, [r5, #0]
 800b52a:	461a      	mov	r2, r3
 800b52c:	f7f5 fc02 	bl	8000d34 <_read>
 800b530:	1c43      	adds	r3, r0, #1
 800b532:	d102      	bne.n	800b53a <_read_r+0x1e>
 800b534:	682b      	ldr	r3, [r5, #0]
 800b536:	b103      	cbz	r3, 800b53a <_read_r+0x1e>
 800b538:	6023      	str	r3, [r4, #0]
 800b53a:	bd38      	pop	{r3, r4, r5, pc}
 800b53c:	20000f8c 	.word	0x20000f8c

0800b540 <_raise_r>:
 800b540:	291f      	cmp	r1, #31
 800b542:	b538      	push	{r3, r4, r5, lr}
 800b544:	4604      	mov	r4, r0
 800b546:	460d      	mov	r5, r1
 800b548:	d904      	bls.n	800b554 <_raise_r+0x14>
 800b54a:	2316      	movs	r3, #22
 800b54c:	6003      	str	r3, [r0, #0]
 800b54e:	f04f 30ff 	mov.w	r0, #4294967295
 800b552:	bd38      	pop	{r3, r4, r5, pc}
 800b554:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b556:	b112      	cbz	r2, 800b55e <_raise_r+0x1e>
 800b558:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b55c:	b94b      	cbnz	r3, 800b572 <_raise_r+0x32>
 800b55e:	4620      	mov	r0, r4
 800b560:	f000 f830 	bl	800b5c4 <_getpid_r>
 800b564:	462a      	mov	r2, r5
 800b566:	4601      	mov	r1, r0
 800b568:	4620      	mov	r0, r4
 800b56a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b56e:	f000 b817 	b.w	800b5a0 <_kill_r>
 800b572:	2b01      	cmp	r3, #1
 800b574:	d00a      	beq.n	800b58c <_raise_r+0x4c>
 800b576:	1c59      	adds	r1, r3, #1
 800b578:	d103      	bne.n	800b582 <_raise_r+0x42>
 800b57a:	2316      	movs	r3, #22
 800b57c:	6003      	str	r3, [r0, #0]
 800b57e:	2001      	movs	r0, #1
 800b580:	e7e7      	b.n	800b552 <_raise_r+0x12>
 800b582:	2400      	movs	r4, #0
 800b584:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b588:	4628      	mov	r0, r5
 800b58a:	4798      	blx	r3
 800b58c:	2000      	movs	r0, #0
 800b58e:	e7e0      	b.n	800b552 <_raise_r+0x12>

0800b590 <raise>:
 800b590:	4b02      	ldr	r3, [pc, #8]	; (800b59c <raise+0xc>)
 800b592:	4601      	mov	r1, r0
 800b594:	6818      	ldr	r0, [r3, #0]
 800b596:	f7ff bfd3 	b.w	800b540 <_raise_r>
 800b59a:	bf00      	nop
 800b59c:	2000011c 	.word	0x2000011c

0800b5a0 <_kill_r>:
 800b5a0:	b538      	push	{r3, r4, r5, lr}
 800b5a2:	4d07      	ldr	r5, [pc, #28]	; (800b5c0 <_kill_r+0x20>)
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	4604      	mov	r4, r0
 800b5a8:	4608      	mov	r0, r1
 800b5aa:	4611      	mov	r1, r2
 800b5ac:	602b      	str	r3, [r5, #0]
 800b5ae:	f7f5 fba7 	bl	8000d00 <_kill>
 800b5b2:	1c43      	adds	r3, r0, #1
 800b5b4:	d102      	bne.n	800b5bc <_kill_r+0x1c>
 800b5b6:	682b      	ldr	r3, [r5, #0]
 800b5b8:	b103      	cbz	r3, 800b5bc <_kill_r+0x1c>
 800b5ba:	6023      	str	r3, [r4, #0]
 800b5bc:	bd38      	pop	{r3, r4, r5, pc}
 800b5be:	bf00      	nop
 800b5c0:	20000f8c 	.word	0x20000f8c

0800b5c4 <_getpid_r>:
 800b5c4:	f7f5 bb94 	b.w	8000cf0 <_getpid>

0800b5c8 <_init>:
 800b5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ca:	bf00      	nop
 800b5cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5ce:	bc08      	pop	{r3}
 800b5d0:	469e      	mov	lr, r3
 800b5d2:	4770      	bx	lr

0800b5d4 <_fini>:
 800b5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5d6:	bf00      	nop
 800b5d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5da:	bc08      	pop	{r3}
 800b5dc:	469e      	mov	lr, r3
 800b5de:	4770      	bx	lr
