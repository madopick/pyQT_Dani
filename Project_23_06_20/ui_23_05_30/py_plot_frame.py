# -*- coding: utf-8 -*-

# Sub program to handle table in UI handling plot frame
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import random
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import matplotlib.pyplot as plt

plot_color = ['#00d65d', "#007332", "#00b0aa", "#5ce0dc", "#005fe3",
              "#9f53e6", "#f2ef13", "#e3a32d", "#f57f4c", "#d95755"]

# Variable to save coordinate from 10 fingers
# datax = [[finger1 (10)], [finger2 (10)], [finger3 (10)], [finger4 (10)], ... , [finger9 (10)], [finger10 (10)]]
plot_x_data = [[], [], [], [], [], [], [], [], [], []]
plot_y_data = [[], [], [], [], [], [], [], [], [], []]

# This datas are random (to start 10 start dot plot)
plot_data_rand = [random.randint(0, 16) for i in range(22)]

###########################################################################################################
# Prepare Plot Canvas
###########################################################################################################
class MplCanvas(FigureCanvas):
    def __init__(self, parent=None, width=5, height=4, dpi=100):
        fig = Figure(figsize=(width, height), dpi=dpi)
        self.axes = fig.add_subplot(111)
        super(MplCanvas, self).__init__(fig)

###########################################################################################################
# QT Main
###########################################################################################################
def plot_start(ui, plot_maxValueX: int, plot_maxValueY: int) -> None : ...
def plot_stop(ui) -> None : ...
def updatePlot(ui, plot_maxValueX: int, plot_maxValueY: int, plot_limit_history: int) -> None : ...


def plot_start(ui, plot_maxValueX, plot_maxValueY): # real signature unknown; start draw the plot
    # Setting the UI
    ui.xAxisInput.setDisabled(True)
    ui.yAxisInput.setDisabled(True)
    ui.historyInput.setDisabled(True)
    ui.fingerInput.setDisabled(True)
    ui.plotRunButton.setText("Stop")
    # Setting the UI ### END

    # Make canvas at UI
    ui.canvas = MplCanvas(ui, width=5, height=4, dpi=100)

    if (ui.plotFrame.itemAt(0) != None):
        widget = ui.plotFrame.itemAt(0).widget()
        widget.deleteLater()

    ui.plotFrame.insertWidget(0, ui.canvas)

    # Setting the default view (grid, minimum and maximum margin)
    ui.canvas.axes.plot(plot_maxValueX, plot_maxValueY)
    ui.canvas.axes.plot(-1, -1)
    ui.canvas.axes.grid(color='grey', linestyle='--')

def plot_stop(ui): # real signature unknown; stop/end draw the plot
    # Setting the UI
    ui.xAxisInput.setDisabled(False)
    ui.yAxisInput.setDisabled(False)
    ui.historyInput.setDisabled(False)
    ui.fingerInput.setDisabled(False)
    ui.plotRunButton.setText("Start")

def updatePlot(ui, plot_maxValueX, plot_limit_history, value, finger): # real signature unknown; update the plot dot
    # Reset the first data (pop the oldest and append new)
    if (len(plot_x_data[0]) > plot_limit_history):
        for i in range(finger):
            plot_x_data[i].pop(0)
            plot_y_data[i].pop(0)
    # Reset ### END


    # Move data random
    for i in range(finger):
        plot_x_data[i].append(value[i * 2 + 2])
        plot_y_data[i].append(value[i * 2 + 3])
    # Move data random ### END


    ui.canvas.axes.cla()  # Clear the canvas.

    # Draw the plot
    for i in range(finger):      # Range can change to 1 to 10
        ui.canvas.axes.plot(plot_x_data[i], plot_y_data[i], color=plot_color[i], linestyle='-', marker='o')

    # Setting the default view (grid, minimum and maximum margin)
    ui.canvas.axes.grid(color='grey', linestyle='--')
    ui.canvas.axes.plot(-1, -1)
    ui.canvas.axes.plot(plot_maxValueX, plot_maxValueX)

    # Trigger the canvas to update and redraw.
    ui.canvas.draw()