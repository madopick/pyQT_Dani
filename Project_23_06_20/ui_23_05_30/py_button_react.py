# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'pyqt.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import random
import sys, os, serial, serial.tools.list_ports, warnings
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtGui import QColor
import time
from PyQt5.QtWidgets import *
from PyQt5.uic import loadUi
from PyQt5.QtGui import QIntValidator
import serial.tools.list_ports as port_list
import argparse
import pandas as pd
import csv
import pathlib
import numpy as np
#import resources

import hid
import datetime, threading

###########################################################################################################
# Convert integer to byte(2)
###########################################################################################################
def integer_to_byte(num):
    data = [0, 0]
    if (num > 0):
        data = [(num % 256), int(num / 256) % 128]
    elif (num < 0):
        temp = abs(num) - 1
        data = [255 - (temp % 256), 128 - int(temp / 256) % 128 + 127]

    return data


###########################################################################################################
# QT Main
###########################################################################################################
def clear_output_history(ui):
    """
    Clear the output history
    :param ui: qt
    :return:
    """
    ui.output.setText('')

def clear_input_config(ui):
    """
    Clear all config
    :param ui: qt
    :return:
    """
    for i in range(10):
        ui.input1[i].setText('')
        ui.input2[i].setText('')
        ui.input3[i].setText('')

def save_output_history_as_txt(ui, text):
    """
    Save history as .txt
    :param ui: qt
    :param text: str
    :return:
    """
    try:
        # Popup dialog box to show save folder target
        fileName, _ = QFileDialog.getSaveFileName(ui.output, 'Select location to Log', "", '*.txt')

        if fileName != "":
            with open(fileName, 'w') as f:
                f.write(text)       # Save file in folder target
                ui.output.append("Log Saved in :" + fileName + "\r\n")
    except:
        return

def save_form_as_csv(ui):
    """
    Save config as .csv file
    :param ui: qt
    :return:
    """
    try:
        # Make header for table
        header = ["form", "input1", "input2", "input3", "input4", "input5", "input6", "input7", "input8",
                  "input9", "input10"]
        data = np.empty([3, 11], dtype=int)

        # Collect all input config and convert to pandas DataFrame
        for i in range(10):
            data[0][i] = int(ui.input1[i].text())
            data[1][i] = int(ui.input2[i].text())
            data[2][i] = int(ui.input3[i].text())

        df = pd.DataFrame(data, columns=header)

        # Popup dialog box to show save folder target
        fileName, _ = QFileDialog.getSaveFileName(ui.output, 'Select location to Log', "", '*.csv')

        if fileName != "":
            df.to_csv("{}".format(fileName, index=False))       # Save file in folder target
            ui.output.append("Log Saved in :" + fileName + "\r\n")
    except:
        return

def save_form_as_excel(ui):
    """
    Save config as .excel file
    :param ui: qt
    :return:
    """
    try:
        # Make header for table
        header = ["input1", "input2", "input3", "input4", "input5", "input6", "input7", "input8", "input9",
                  "input10"]
        data = np.empty([3, 10], dtype=int)

        # Collect all input config and convert to pandas DataFrame
        for i in range(10):
            data[0][i] = int(ui.input1[i].text())
            data[1][i] = int(ui.input2[i].text())
            data[2][i] = int(ui.input3[i].text())

        df = pd.DataFrame(data, columns=header)

        # Popup dialog box to show save folder target
        fileName, _ = QFileDialog.getSaveFileName(ui.output, 'Select location to Log', "", '*.xlsx')

        if fileName != "":
            df.to_excel("{}".format(fileName, index=False))     # Save file in folder target
            ui.output.append("Log Saved in :" + fileName + "\r\n")
    except:
        return

def open_csv(ui, fileName):
    """
    Open file external from csv and put it in to config
    :param ui: qt
    :param fileName: str (name folder and file target)
    :return:
    """
    df = pd.read_csv(fileName, sep=',')

    try:
        for i in range(10):
            value1 = str(df.values[0][i + 1])
            ui.input1[i].setText(value1)
            value2 = str(df.values[1][i + 1])
            ui.input2[i].setText(value2)
            value3 = str(df.values[2][i + 1])
            ui.input3[i].setText(value3)
    except:
        msgBox = QMessageBox()
        msgBox.setWindowTitle("Load Data Error!")
        msgBox.setIcon(QMessageBox.Warning)
        msgBox.setText("The file you load is not correct.")
        msgBox.exec()
        return

def open_excel(ui, fileName):
    """
    Open file external from excel and put it in to config
    :param ui: qt
    :param fileName: str (name folder and file target)
    :return:
    """
    df = pd.read_excel(fileName)

    try:
        for i in range(10):
            ui.input1[i].setText(str(df._get_value(0, "input{}".format(i + 1))))
            ui.input2[i].setText(str(df._get_value(1, "input{}".format(i + 1))))
            ui.input3[i].setText(str(df._get_value(2, "input{}".format(i + 1))))
    except:
        msgBox = QMessageBox()
        msgBox.setWindowTitle("Load Data Error!")
        msgBox.setIcon(QMessageBox.Warning)
        msgBox.setText("The file you load is not correct.")
        msgBox.exec()
        return


###########################################################################################################
# QT Main handling I2C by Serial
###########################################################################################################
def serial_send(ui, massage, status, serial):
    """
    Send byte to trigger MCU by serial
    :param ui: qt
    :param massage: int[]
    :param status: str
    :param serial: Serial
    :return:
    """
    serial.write(massage)

    ui.command_value.setText(status)

def serial_send_config(ui, header, config, status, serial):
    """
    Send byte of trigger and value to MCU by serial
    :param ui: qt
    :param header: int[]
    :config: qt.QTextEdit[]
    :param status: str
    :param serial: Serial
    :return:
    """
    mytext_byte = header

    for i in range(len(config)):        # Take values of input pointed config and convert it as byte [2]
        data = integer_to_byte(int(config[i].text()))
        for j in range(2):
            mytext_byte.append(data[j])

    mytext_byte.append(125)
    mytext_byte.append(13)
    mytext_byte.append(10)

    # Call serial_send function and send arrange array
    serial_send(ui, mytext_byte, status, serial)

def serial_send_all_config(ui, config1, config2, config3, status, serial):
    """
    Send byte of trigger and value to MCU by serial
    :param ui: qt
    :config1,2,3: qt.QTextEdit[]
    :param status: str
    :param serial: Serial
    :return:
    """
    mytext_byte = [123, 87, 66, 65, 58]     # {WBA:

    for i in range(len(config1)):           # Take values of input config1 and convert it as byte [2]
        data = integer_to_byte(int(config1[i].text()))
        for j in range(2):
            mytext_byte.append(data[j])
    for i in range(len(config2)):           # Take values of input config2 and convert it as byte [2]
        data = integer_to_byte(int(config2[i].text()))
        for j in range(2):
            mytext_byte.append(data[j])
    for i in range(len(config3)):           # Take values of input config3 and convert it as byte [2]
        data = integer_to_byte(int(config3[i].text()))
        for j in range(2):
            mytext_byte.append(data[j])

    mytext_byte.append(125)
    mytext_byte.append(13)
    mytext_byte.append(10)

    # Call serial_send function and send arrange array
    serial_send(ui, mytext_byte, status, serial)

