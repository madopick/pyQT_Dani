
Project_23_05_26.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c6c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08006e30  08006e30  00016e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fa4  08006fa4  000200ec  2**0
                  CONTENTS
  4 .ARM          00000008  08006fa4  08006fa4  00016fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fac  08006fac  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fac  08006fac  00016fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fb0  08006fb0  00016fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08006fb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000688  200000ec  080070a0  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000774  080070a0  00020774  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e025  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002026  00000000  00000000  0002e141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  00030168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab0  00000000  00000000  00030ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022eb1  00000000  00000000  00031758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010074  00000000  00000000  00054609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccaef  00000000  00000000  0006467d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013116c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003498  00000000  00000000  001311bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200000ec 	.word	0x200000ec
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08006e18 	.word	0x08006e18

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200000f0 	.word	0x200000f0
 8000200:	08006e18 	.word	0x08006e18

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <Buffercmp_Byte>:
  * @param  BufferLength: buffer's length
  * @retval 0  : pBuffer1 identical to pBuffer2
  *         >0 : pBuffer1 differs from pBuffer2
  */

uint16_t Buffercmp_Byte(int16_t pBuffer1[], int16_t pBuffer2[], uint8_t length){
 8000508:	b5b0      	push	{r4, r5, r7, lr}
 800050a:	b096      	sub	sp, #88	; 0x58
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	4613      	mov	r3, r2
 8000514:	71fb      	strb	r3, [r7, #7]
	char send[] = {0x14, 0x15,
 8000516:	4b2e      	ldr	r3, [pc, #184]	; (80005d0 <Buffercmp_Byte+0xc8>)
 8000518:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800051c:	461d      	mov	r5, r3
 800051e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000522:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000526:	6020      	str	r0, [r4, #0]
 8000528:	3404      	adds	r4, #4
 800052a:	7021      	strb	r1, [r4, #0]
			'C','o','m','p','a','r','e',' ','p','r','o','c','e','s','s','.','.',0x0d,0x0a};
	HAL_UART_Transmit(&huart2, (uint8_t *)send, 21, 0xFFFF);
 800052c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000530:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000534:	2215      	movs	r2, #21
 8000536:	4827      	ldr	r0, [pc, #156]	; (80005d4 <Buffercmp_Byte+0xcc>)
 8000538:	f004 fd39 	bl	8004fae <HAL_UART_Transmit>
	for (uint8_t i = 0; i < length; i++){
 800053c:	2300      	movs	r3, #0
 800053e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000542:	e02b      	b.n	800059c <Buffercmp_Byte+0x94>
		if (pBuffer1[i]!=pBuffer2[i]){
 8000544:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	68fa      	ldr	r2, [r7, #12]
 800054c:	4413      	add	r3, r2
 800054e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000552:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	68b9      	ldr	r1, [r7, #8]
 800055a:	440b      	add	r3, r1
 800055c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000560:	429a      	cmp	r2, r3
 8000562:	d016      	beq.n	8000592 <Buffercmp_Byte+0x8a>
			char comp[] = {0x14, 0x15,
 8000564:	4b1c      	ldr	r3, [pc, #112]	; (80005d8 <Buffercmp_Byte+0xd0>)
 8000566:	f107 0414 	add.w	r4, r7, #20
 800056a:	461d      	mov	r5, r3
 800056c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800056e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000570:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000574:	6020      	str	r0, [r4, #0]
 8000576:	3404      	adds	r4, #4
 8000578:	8021      	strh	r1, [r4, #0]
					'B','u','f','f','e','r',' ','D','i','f','f','e','r','e','n','t','!','!',0x0d,0x0a};
			HAL_UART_Transmit(&huart2, (uint8_t *)comp, 22, 0xFFFF);
 800057a:	f107 0114 	add.w	r1, r7, #20
 800057e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000582:	2216      	movs	r2, #22
 8000584:	4813      	ldr	r0, [pc, #76]	; (80005d4 <Buffercmp_Byte+0xcc>)
 8000586:	f004 fd12 	bl	8004fae <HAL_UART_Transmit>
			return i;
 800058a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800058e:	b29b      	uxth	r3, r3
 8000590:	e01a      	b.n	80005c8 <Buffercmp_Byte+0xc0>
	for (uint8_t i = 0; i < length; i++){
 8000592:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000596:	3301      	adds	r3, #1
 8000598:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800059c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d3ce      	bcc.n	8000544 <Buffercmp_Byte+0x3c>
		}
	}

	char comp[] = {0x14, 0x15,
 80005a6:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <Buffercmp_Byte+0xd4>)
 80005a8:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80005ac:	461d      	mov	r5, r3
 80005ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b2:	682b      	ldr	r3, [r5, #0]
 80005b4:	7023      	strb	r3, [r4, #0]
		'B','u','f','f','e','r',' ','s','a','m','e','!','!',0x0d,0x0a};
	HAL_UART_Transmit(&huart2, (uint8_t *)comp, 17, 0xFFFF);
 80005b6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80005ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005be:	2211      	movs	r2, #17
 80005c0:	4804      	ldr	r0, [pc, #16]	; (80005d4 <Buffercmp_Byte+0xcc>)
 80005c2:	f004 fcf4 	bl	8004fae <HAL_UART_Transmit>
	return 0;
 80005c6:	2300      	movs	r3, #0
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3758      	adds	r7, #88	; 0x58
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bdb0      	pop	{r4, r5, r7, pc}
 80005d0:	08006e30 	.word	0x08006e30
 80005d4:	20000108 	.word	0x20000108
 80005d8:	08006e48 	.word	0x08006e48
 80005dc:	08006e60 	.word	0x08006e60

080005e0 <I2C_Master_Transmit>:

void I2C_Master_Transmit() {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	do
	{
		if(HAL_I2C_Master_Transmit_IT(&I2cHandle, (uint16_t)I2C_ADDRESS, (uint8_t*)aTxBuffer, TXBUFFERSIZE)!= HAL_OK)
 80005e4:	2364      	movs	r3, #100	; 0x64
 80005e6:	4a0d      	ldr	r2, [pc, #52]	; (800061c <I2C_Master_Transmit+0x3c>)
 80005e8:	f240 310f 	movw	r1, #783	; 0x30f
 80005ec:	480c      	ldr	r0, [pc, #48]	; (8000620 <I2C_Master_Transmit+0x40>)
 80005ee:	f002 f88f 	bl	8002710 <HAL_I2C_Master_Transmit_IT>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <I2C_Master_Transmit+0x1c>
		{Error_Handler();}
 80005f8:	f000 fc6a 	bl	8000ed0 <Error_Handler>

		// Wait transfer data successful
		while (HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY)
 80005fc:	bf00      	nop
 80005fe:	4808      	ldr	r0, [pc, #32]	; (8000620 <I2C_Master_Transmit+0x40>)
 8000600:	f002 fc4c 	bl	8002e9c <HAL_I2C_GetState>
 8000604:	4603      	mov	r3, r0
 8000606:	2b20      	cmp	r3, #32
 8000608:	d1f9      	bne.n	80005fe <I2C_Master_Transmit+0x1e>
		{}
	} while(HAL_I2C_GetError(&I2cHandle) == HAL_I2C_ERROR_AF);
 800060a:	4805      	ldr	r0, [pc, #20]	; (8000620 <I2C_Master_Transmit+0x40>)
 800060c:	f002 fc54 	bl	8002eb8 <HAL_I2C_GetError>
 8000610:	4603      	mov	r3, r0
 8000612:	2b04      	cmp	r3, #4
 8000614:	d0e6      	beq.n	80005e4 <I2C_Master_Transmit+0x4>
}
 8000616:	bf00      	nop
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000000 	.word	0x20000000
 8000620:	200001ac 	.word	0x200001ac

08000624 <I2C_Master_Receive>:

void I2C_Master_Receive() {
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	do
	{
		if(HAL_I2C_Master_Receive_IT(&I2cHandle, (uint16_t)I2C_ADDRESS, (uint8_t *)aRxBuffer, RXBUFFERSIZE) != HAL_OK) {Error_Handler();}
 8000628:	2364      	movs	r3, #100	; 0x64
 800062a:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <I2C_Master_Receive+0x3c>)
 800062c:	f240 310f 	movw	r1, #783	; 0x30f
 8000630:	480c      	ldr	r0, [pc, #48]	; (8000664 <I2C_Master_Receive+0x40>)
 8000632:	f002 f913 	bl	800285c <HAL_I2C_Master_Receive_IT>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <I2C_Master_Receive+0x1c>
 800063c:	f000 fc48 	bl	8000ed0 <Error_Handler>

		/* Saat Acknowledge failure (Slave tidak mengakui alamatnya) Master memulai ulang komunikasi */
	} while (HAL_I2C_GetError(&I2cHandle) == HAL_I2C_ERROR_AF);
 8000640:	4808      	ldr	r0, [pc, #32]	; (8000664 <I2C_Master_Receive+0x40>)
 8000642:	f002 fc39 	bl	8002eb8 <HAL_I2C_GetError>
 8000646:	4603      	mov	r3, r0
 8000648:	2b04      	cmp	r3, #4
 800064a:	d0ed      	beq.n	8000628 <I2C_Master_Receive+0x4>

	// Wait transfer data successful
	while (HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY)
 800064c:	bf00      	nop
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <I2C_Master_Receive+0x40>)
 8000650:	f002 fc24 	bl	8002e9c <HAL_I2C_GetState>
 8000654:	4603      	mov	r3, r0
 8000656:	2b20      	cmp	r3, #32
 8000658:	d1f9      	bne.n	800064e <I2C_Master_Receive+0x2a>
	{}
}
 800065a:	bf00      	nop
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000708 	.word	0x20000708
 8000664:	200001ac 	.word	0x200001ac

08000668 <Set_aTxBuffer>:
	// Wait for the end of the transfer
	while (HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY)
	{}
}

void Set_aTxBuffer(int16_t idx0, int16_t target[], uint16_t idx_target, uint16_t size){
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	60b9      	str	r1, [r7, #8]
 8000670:	4611      	mov	r1, r2
 8000672:	461a      	mov	r2, r3
 8000674:	4603      	mov	r3, r0
 8000676:	81fb      	strh	r3, [r7, #14]
 8000678:	460b      	mov	r3, r1
 800067a:	81bb      	strh	r3, [r7, #12]
 800067c:	4613      	mov	r3, r2
 800067e:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i=0; i<10; i++){
 8000680:	2300      	movs	r3, #0
 8000682:	75fb      	strb	r3, [r7, #23]
 8000684:	e008      	b.n	8000698 <Set_aTxBuffer+0x30>
		aTxBuffer[i+1] = 0;
 8000686:	7dfb      	ldrb	r3, [r7, #23]
 8000688:	3301      	adds	r3, #1
 800068a:	4a0d      	ldr	r2, [pc, #52]	; (80006c0 <Set_aTxBuffer+0x58>)
 800068c:	2100      	movs	r1, #0
 800068e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i=0; i<10; i++){
 8000692:	7dfb      	ldrb	r3, [r7, #23]
 8000694:	3301      	adds	r3, #1
 8000696:	75fb      	strb	r3, [r7, #23]
 8000698:	7dfb      	ldrb	r3, [r7, #23]
 800069a:	2b09      	cmp	r3, #9
 800069c:	d9f3      	bls.n	8000686 <Set_aTxBuffer+0x1e>
	}
	memcpy(&aTxBuffer[1], &target[idx_target], size);
 800069e:	89bb      	ldrh	r3, [r7, #12]
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	68ba      	ldr	r2, [r7, #8]
 80006a4:	4413      	add	r3, r2
 80006a6:	88fa      	ldrh	r2, [r7, #6]
 80006a8:	4619      	mov	r1, r3
 80006aa:	4806      	ldr	r0, [pc, #24]	; (80006c4 <Set_aTxBuffer+0x5c>)
 80006ac:	f005 fea0 	bl	80063f0 <memcpy>
	aTxBuffer[0]=idx0;
 80006b0:	4a03      	ldr	r2, [pc, #12]	; (80006c0 <Set_aTxBuffer+0x58>)
 80006b2:	89fb      	ldrh	r3, [r7, #14]
 80006b4:	8013      	strh	r3, [r2, #0]
}
 80006b6:	bf00      	nop
 80006b8:	3718      	adds	r7, #24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000000 	.word	0x20000000
 80006c4:	20000002 	.word	0x20000002

080006c8 <__io_putchar>:

static uint16_t u16_oldPos = 0;
static uint16_t u16_lenCnt = 0;

/* @brief  Retargets the C library printf function to the USART. */
PUTCHAR_PROTOTYPE {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80006d0:	1d39      	adds	r1, r7, #4
 80006d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006d6:	2201      	movs	r2, #1
 80006d8:	4803      	ldr	r0, [pc, #12]	; (80006e8 <__io_putchar+0x20>)
 80006da:	f004 fc68 	bl	8004fae <HAL_UART_Transmit>
  return ch;
 80006de:	687b      	ldr	r3, [r7, #4]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000108 	.word	0x20000108

080006ec <main>:

int16_t temp[30];


int main(void)
{
 80006ec:	b5b0      	push	{r4, r5, r7, lr}
 80006ee:	b0a0      	sub	sp, #128	; 0x80
 80006f0:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f2:	f000 ff49 	bl	8001588 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80006f6:	f000 fa13 	bl	8000b20 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fa:	f000 fad1 	bl	8000ca0 <MX_GPIO_Init>
  MX_DMA_Init();
 80006fe:	f000 faaf 	bl	8000c60 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000702:	f000 fa7b 	bl	8000bfc <MX_USART2_UART_Init>

  /*##-1- Configure the I2C peripheral ######################################*/
  I2cHandle.Instance             = I2Cx;
 8000706:	4b3e      	ldr	r3, [pc, #248]	; (8000800 <main+0x114>)
 8000708:	4a3e      	ldr	r2, [pc, #248]	; (8000804 <main+0x118>)
 800070a:	601a      	str	r2, [r3, #0]
  I2cHandle.Init.AddressingMode  = I2C_ADDRESSINGMODE_10BIT;
 800070c:	4b3c      	ldr	r3, [pc, #240]	; (8000800 <main+0x114>)
 800070e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000712:	611a      	str	r2, [r3, #16]
  I2cHandle.Init.ClockSpeed      = 400000;
 8000714:	4b3a      	ldr	r3, [pc, #232]	; (8000800 <main+0x114>)
 8000716:	4a3c      	ldr	r2, [pc, #240]	; (8000808 <main+0x11c>)
 8000718:	605a      	str	r2, [r3, #4]
  I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800071a:	4b39      	ldr	r3, [pc, #228]	; (8000800 <main+0x114>)
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
  I2cHandle.Init.DutyCycle       = I2C_DUTYCYCLE_16_9;
 8000720:	4b37      	ldr	r3, [pc, #220]	; (8000800 <main+0x114>)
 8000722:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000726:	609a      	str	r2, [r3, #8]
  I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000728:	4b35      	ldr	r3, [pc, #212]	; (8000800 <main+0x114>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 800072e:	4b34      	ldr	r3, [pc, #208]	; (8000800 <main+0x114>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  I2cHandle.Init.OwnAddress1     = I2C_ADDRESS;
 8000734:	4b32      	ldr	r3, [pc, #200]	; (8000800 <main+0x114>)
 8000736:	f240 320f 	movw	r2, #783	; 0x30f
 800073a:	60da      	str	r2, [r3, #12]
  I2cHandle.Init.OwnAddress2     = 0xFE;
 800073c:	4b30      	ldr	r3, [pc, #192]	; (8000800 <main+0x114>)
 800073e:	22fe      	movs	r2, #254	; 0xfe
 8000740:	619a      	str	r2, [r3, #24]

  if(HAL_I2C_Init(&I2cHandle) != HAL_OK){ Error_Handler(); }
 8000742:	482f      	ldr	r0, [pc, #188]	; (8000800 <main+0x114>)
 8000744:	f001 fea0 	bl	8002488 <HAL_I2C_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <main+0x66>
 800074e:	f000 fbbf 	bl	8000ed0 <Error_Handler>

  #ifdef MASTER_BOARD
  	  printf("Init OK\r\n");
 8000752:	482e      	ldr	r0, [pc, #184]	; (800080c <main+0x120>)
 8000754:	f005 fed0 	bl	80064f8 <puts>
  #endif

  /****************** MAIN **********************/
  while (1)
  {
  	  if (bitFlag & BFLAG_UART_RCV) {			/* UART Processing*/
 8000758:	4b2d      	ldr	r3, [pc, #180]	; (8000810 <main+0x124>)
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	f003 0301 	and.w	r3, r3, #1
 8000760:	2b00      	cmp	r3, #0
 8000762:	d017      	beq.n	8000794 <main+0xa8>
  		  uartProcessing (u8arr_uartEvent, u16_lenCnt - 2); // remove \r & \n
 8000764:	4b2b      	ldr	r3, [pc, #172]	; (8000814 <main+0x128>)
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	3b02      	subs	r3, #2
 800076a:	b29b      	uxth	r3, r3
 800076c:	4619      	mov	r1, r3
 800076e:	482a      	ldr	r0, [pc, #168]	; (8000818 <main+0x12c>)
 8000770:	f000 fb04 	bl	8000d7c <uartProcessing>
  		  memset(u8arr_uartEvent, 0, UART_BUF_SZ);
 8000774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000778:	2100      	movs	r1, #0
 800077a:	4827      	ldr	r0, [pc, #156]	; (8000818 <main+0x12c>)
 800077c:	f005 fe46 	bl	800640c <memset>
  		  u16_lenCnt = 0;
 8000780:	4b24      	ldr	r3, [pc, #144]	; (8000814 <main+0x128>)
 8000782:	2200      	movs	r2, #0
 8000784:	801a      	strh	r2, [r3, #0]

  		  bitFlag 	&= ~BFLAG_UART_RCV;
 8000786:	4b22      	ldr	r3, [pc, #136]	; (8000810 <main+0x124>)
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	f023 0301 	bic.w	r3, r3, #1
 800078e:	b29a      	uxth	r2, r3
 8000790:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <main+0x124>)
 8000792:	801a      	strh	r2, [r3, #0]
  	  }

  	  // Trigger default input at form
  	  if (bitFlag & BFLAG_I2C_RBA) {			//Read Byte All (Trigger once at the first time)
 8000794:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <main+0x124>)
 8000796:	881b      	ldrh	r3, [r3, #0]
 8000798:	f003 0302 	and.w	r3, r3, #2
 800079c:	2b00      	cmp	r3, #0
 800079e:	d06a      	beq.n	8000876 <main+0x18a>
	  	  #ifdef MASTER_BOARD
  		  memset (sendStr, 0, STRLENMAX);
 80007a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007a4:	2100      	movs	r1, #0
 80007a6:	481d      	ldr	r0, [pc, #116]	; (800081c <main+0x130>)
 80007a8:	f005 fe30 	bl	800640c <memset>
		  sendStr[0] = 0x10;
 80007ac:	4b1b      	ldr	r3, [pc, #108]	; (800081c <main+0x130>)
 80007ae:	2210      	movs	r2, #16
 80007b0:	701a      	strb	r2, [r3, #0]
		  sendStr[1] = 0x11;
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <main+0x130>)
 80007b4:	2211      	movs	r2, #17
 80007b6:	705a      	strb	r2, [r3, #1]
		  for (uint8_t i=4; i<=6; i++){
 80007b8:	2304      	movs	r3, #4
 80007ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80007be:	e048      	b.n	8000852 <main+0x166>
			  aTxBuffer[0] = i;
 80007c0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80007c4:	b21a      	sxth	r2, r3
 80007c6:	4b16      	ldr	r3, [pc, #88]	; (8000820 <main+0x134>)
 80007c8:	801a      	strh	r2, [r3, #0]

			  I2C_Master_Transmit();
 80007ca:	f7ff ff09 	bl	80005e0 <I2C_Master_Transmit>

			  I2C_Master_Receive();
 80007ce:	f7ff ff29 	bl	8000624 <I2C_Master_Receive>

			  if (aRxBuffer[0]==4){
 80007d2:	4b14      	ldr	r3, [pc, #80]	; (8000824 <main+0x138>)
 80007d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007d8:	2b04      	cmp	r3, #4
 80007da:	d105      	bne.n	80007e8 <main+0xfc>
				  memcpy(&sendStr[2], &aRxBuffer[1], CFG_LENGTH * sizeof(&aRxBuffer[1]));
 80007dc:	2228      	movs	r2, #40	; 0x28
 80007de:	4912      	ldr	r1, [pc, #72]	; (8000828 <main+0x13c>)
 80007e0:	4812      	ldr	r0, [pc, #72]	; (800082c <main+0x140>)
 80007e2:	f005 fe05 	bl	80063f0 <memcpy>
 80007e6:	e02f      	b.n	8000848 <main+0x15c>
			  }
			  else if (aRxBuffer[0]==5){
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <main+0x138>)
 80007ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007ee:	2b05      	cmp	r3, #5
 80007f0:	d120      	bne.n	8000834 <main+0x148>
				  memcpy(&sendStr[22], &aRxBuffer[1], CFG_LENGTH * sizeof(&aRxBuffer[1]));
 80007f2:	2228      	movs	r2, #40	; 0x28
 80007f4:	490c      	ldr	r1, [pc, #48]	; (8000828 <main+0x13c>)
 80007f6:	480e      	ldr	r0, [pc, #56]	; (8000830 <main+0x144>)
 80007f8:	f005 fdfa 	bl	80063f0 <memcpy>
 80007fc:	e024      	b.n	8000848 <main+0x15c>
 80007fe:	bf00      	nop
 8000800:	200001ac 	.word	0x200001ac
 8000804:	40005400 	.word	0x40005400
 8000808:	00061a80 	.word	0x00061a80
 800080c:	08006e74 	.word	0x08006e74
 8000810:	20000704 	.word	0x20000704
 8000814:	20000602 	.word	0x20000602
 8000818:	20000400 	.word	0x20000400
 800081c:	20000604 	.word	0x20000604
 8000820:	20000000 	.word	0x20000000
 8000824:	20000708 	.word	0x20000708
 8000828:	2000070a 	.word	0x2000070a
 800082c:	20000606 	.word	0x20000606
 8000830:	2000061a 	.word	0x2000061a
			  }
			  else if (aRxBuffer[0]==6){
 8000834:	4ba0      	ldr	r3, [pc, #640]	; (8000ab8 <main+0x3cc>)
 8000836:	f9b3 3000 	ldrsh.w	r3, [r3]
 800083a:	2b06      	cmp	r3, #6
 800083c:	d104      	bne.n	8000848 <main+0x15c>
				  memcpy(&sendStr[42], &aRxBuffer[1], CFG_LENGTH * sizeof(&aRxBuffer[1]));
 800083e:	2228      	movs	r2, #40	; 0x28
 8000840:	499e      	ldr	r1, [pc, #632]	; (8000abc <main+0x3d0>)
 8000842:	489f      	ldr	r0, [pc, #636]	; (8000ac0 <main+0x3d4>)
 8000844:	f005 fdd4 	bl	80063f0 <memcpy>
		  for (uint8_t i=4; i<=6; i++){
 8000848:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800084c:	3301      	adds	r3, #1
 800084e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8000852:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000856:	2b06      	cmp	r3, #6
 8000858:	d9b2      	bls.n	80007c0 <main+0xd4>
			  }
		  }

		  HAL_UART_Transmit(&huart2, (uint8_t *)sendStr, 62, 0xFFFF);
 800085a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800085e:	223e      	movs	r2, #62	; 0x3e
 8000860:	4998      	ldr	r1, [pc, #608]	; (8000ac4 <main+0x3d8>)
 8000862:	4899      	ldr	r0, [pc, #612]	; (8000ac8 <main+0x3dc>)
 8000864:	f004 fba3 	bl	8004fae <HAL_UART_Transmit>

		  bitFlag &= ~BFLAG_I2C_RBA;
 8000868:	4b98      	ldr	r3, [pc, #608]	; (8000acc <main+0x3e0>)
 800086a:	881b      	ldrh	r3, [r3, #0]
 800086c:	f023 0302 	bic.w	r3, r3, #2
 8000870:	b29a      	uxth	r2, r3
 8000872:	4b96      	ldr	r3, [pc, #600]	; (8000acc <main+0x3e0>)
 8000874:	801a      	strh	r2, [r3, #0]
		  #endif
  	  }

  	 if((bitFlag & BFLAG_I2C_WBS) || (bitFlag & BFLAG_I2C_WBA))
 8000876:	4b95      	ldr	r3, [pc, #596]	; (8000acc <main+0x3e0>)
 8000878:	881b      	ldrh	r3, [r3, #0]
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	2b00      	cmp	r3, #0
 8000880:	d105      	bne.n	800088e <main+0x1a2>
 8000882:	4b92      	ldr	r3, [pc, #584]	; (8000acc <main+0x3e0>)
 8000884:	881b      	ldrh	r3, [r3, #0]
 8000886:	f003 0310 	and.w	r3, r3, #16
 800088a:	2b00      	cmp	r3, #0
 800088c:	d008      	beq.n	80008a0 <main+0x1b4>
  	 {
		 #ifdef MASTER_BOARD

  		 I2C_Master_Transmit();
 800088e:	f7ff fea7 	bl	80005e0 <I2C_Master_Transmit>

  		 bitFlag |= BFLAG_I2C_RBS;
 8000892:	4b8e      	ldr	r3, [pc, #568]	; (8000acc <main+0x3e0>)
 8000894:	881b      	ldrh	r3, [r3, #0]
 8000896:	f043 0308 	orr.w	r3, r3, #8
 800089a:	b29a      	uxth	r2, r3
 800089c:	4b8b      	ldr	r3, [pc, #556]	; (8000acc <main+0x3e0>)
 800089e:	801a      	strh	r2, [r3, #0]
 	 	 #endif
  	 }

  	 if (bitFlag & BFLAG_I2C_RBS)
 80008a0:	4b8a      	ldr	r3, [pc, #552]	; (8000acc <main+0x3e0>)
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	f003 0308 	and.w	r3, r3, #8
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	f43f af55 	beq.w	8000758 <main+0x6c>
	 {
  		 #ifdef MASTER_BOARD

  		 I2C_Master_Receive();
 80008ae:	f7ff feb9 	bl	8000624 <I2C_Master_Receive>

		 // BFLAG_I2C_WAS		WRITE SLAVE
		 if (aRxBuffer[0]==1)				//WR1
 80008b2:	4b81      	ldr	r3, [pc, #516]	; (8000ab8 <main+0x3cc>)
 80008b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d10d      	bne.n	80008d8 <main+0x1ec>
		 {
			 char send[] = {0x14, 0x15,
 80008bc:	4b84      	ldr	r3, [pc, #528]	; (8000ad0 <main+0x3e4>)
 80008be:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80008c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008c4:	c407      	stmia	r4!, {r0, r1, r2}
 80008c6:	8023      	strh	r3, [r4, #0]
				  'S', 'E', 'N', 'D', ' ', 'R', 'E', 'S', '1', ':', 0x0d, 0x0a};
			 HAL_UART_Transmit(&huart2, (uint8_t *)send, 14, 0xFFFF);
 80008c8:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80008cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008d0:	220e      	movs	r2, #14
 80008d2:	487d      	ldr	r0, [pc, #500]	; (8000ac8 <main+0x3dc>)
 80008d4:	f004 fb6b 	bl	8004fae <HAL_UART_Transmit>
		 }
		 if (aRxBuffer[0]==2)				//WR2
 80008d8:	4b77      	ldr	r3, [pc, #476]	; (8000ab8 <main+0x3cc>)
 80008da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d10d      	bne.n	80008fe <main+0x212>
		 {
			 char send[] = {0x14, 0x15,
 80008e2:	4b7c      	ldr	r3, [pc, #496]	; (8000ad4 <main+0x3e8>)
 80008e4:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80008e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008ea:	c407      	stmia	r4!, {r0, r1, r2}
 80008ec:	8023      	strh	r3, [r4, #0]
				  'S', 'E', 'N', 'D', ' ', 'R', 'E', 'S', '2', ':', 0x0d, 0x0a};
			 HAL_UART_Transmit(&huart2, (uint8_t *)send, 14, 0xFFFF);
 80008ee:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80008f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008f6:	220e      	movs	r2, #14
 80008f8:	4873      	ldr	r0, [pc, #460]	; (8000ac8 <main+0x3dc>)
 80008fa:	f004 fb58 	bl	8004fae <HAL_UART_Transmit>
		 }
		 if (aRxBuffer[0]==3)				//WR3
 80008fe:	4b6e      	ldr	r3, [pc, #440]	; (8000ab8 <main+0x3cc>)
 8000900:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000904:	2b03      	cmp	r3, #3
 8000906:	d10d      	bne.n	8000924 <main+0x238>
		 {
			 char send[] = {0x14, 0x15,
 8000908:	4b73      	ldr	r3, [pc, #460]	; (8000ad8 <main+0x3ec>)
 800090a:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800090e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000910:	c407      	stmia	r4!, {r0, r1, r2}
 8000912:	8023      	strh	r3, [r4, #0]
				  'S', 'E', 'N', 'D', ' ', 'R', 'E', 'S', '3', ':', 0x0d, 0x0a};
			 HAL_UART_Transmit(&huart2, (uint8_t *)send, 14, 0xFFFF);
 8000914:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000918:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800091c:	220e      	movs	r2, #14
 800091e:	486a      	ldr	r0, [pc, #424]	; (8000ac8 <main+0x3dc>)
 8000920:	f004 fb45 	bl	8004fae <HAL_UART_Transmit>
		 }

		 if (aRxBuffer[0]<4)				// Compare TxBuffer and Rx Buffer
 8000924:	4b64      	ldr	r3, [pc, #400]	; (8000ab8 <main+0x3cc>)
 8000926:	f9b3 3000 	ldrsh.w	r3, [r3]
 800092a:	2b03      	cmp	r3, #3
 800092c:	dc20      	bgt.n	8000970 <main+0x284>
		 {
			 //##-6- Compare the sent and received buffers ##############################
			 if(Buffercmp_Byte(aTxBuffer,aRxBuffer, 11)){
 800092e:	220b      	movs	r2, #11
 8000930:	4961      	ldr	r1, [pc, #388]	; (8000ab8 <main+0x3cc>)
 8000932:	486a      	ldr	r0, [pc, #424]	; (8000adc <main+0x3f0>)
 8000934:	f7ff fde8 	bl	8000508 <Buffercmp_Byte>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d011      	beq.n	8000962 <main+0x276>
				 char send[] = {0x14, 0x15,
 800093e:	4b68      	ldr	r3, [pc, #416]	; (8000ae0 <main+0x3f4>)
 8000940:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000944:	461d      	mov	r5, r3
 8000946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800094a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800094e:	c403      	stmia	r4!, {r0, r1}
 8000950:	7022      	strb	r2, [r4, #0]
						 'B','u','f','f','e','r',' ','C','o','m','p','a','r','e',' ','F','a','i','l','!','!',0x0d, 0x0a};
				 HAL_UART_Transmit(&huart2, (uint8_t *)send, 25, 0xFFFF);
 8000952:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000956:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800095a:	2219      	movs	r2, #25
 800095c:	485a      	ldr	r0, [pc, #360]	; (8000ac8 <main+0x3dc>)
 800095e:	f004 fb26 	bl	8004fae <HAL_UART_Transmit>
			 }
			 bitFlag 	&= ~BFLAG_I2C_WBS;
 8000962:	4b5a      	ldr	r3, [pc, #360]	; (8000acc <main+0x3e0>)
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	f023 0304 	bic.w	r3, r3, #4
 800096a:	b29a      	uxth	r2, r3
 800096c:	4b57      	ldr	r3, [pc, #348]	; (8000acc <main+0x3e0>)
 800096e:	801a      	strh	r2, [r3, #0]
		 }

		 // BFLAG_I2C_RAS		READ SLAVE
		 if (aRxBuffer[0]==4)				//RD1
 8000970:	4b51      	ldr	r3, [pc, #324]	; (8000ab8 <main+0x3cc>)
 8000972:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000976:	2b04      	cmp	r3, #4
 8000978:	d10d      	bne.n	8000996 <main+0x2aa>
		 {
			 char send[] = {0x14, 0x15,
 800097a:	4b5a      	ldr	r3, [pc, #360]	; (8000ae4 <main+0x3f8>)
 800097c:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000980:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000982:	c407      	stmia	r4!, {r0, r1, r2}
 8000984:	8023      	strh	r3, [r4, #0]
				  'R', 'E', 'A', 'D', ' ', 'R', 'E', 'S', '1', ':', 0x0d, 0x0a};
			 HAL_UART_Transmit(&huart2, (uint8_t *)send, 14, 0xFFFF);
 8000986:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800098a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800098e:	220e      	movs	r2, #14
 8000990:	484d      	ldr	r0, [pc, #308]	; (8000ac8 <main+0x3dc>)
 8000992:	f004 fb0c 	bl	8004fae <HAL_UART_Transmit>
		 }
		 if (aRxBuffer[0]==5)				//RD2
 8000996:	4b48      	ldr	r3, [pc, #288]	; (8000ab8 <main+0x3cc>)
 8000998:	f9b3 3000 	ldrsh.w	r3, [r3]
 800099c:	2b05      	cmp	r3, #5
 800099e:	d10d      	bne.n	80009bc <main+0x2d0>
		 {
			 char send[] = {0x14, 0x15,
 80009a0:	4b51      	ldr	r3, [pc, #324]	; (8000ae8 <main+0x3fc>)
 80009a2:	f107 0414 	add.w	r4, r7, #20
 80009a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009a8:	c407      	stmia	r4!, {r0, r1, r2}
 80009aa:	8023      	strh	r3, [r4, #0]
				  'R', 'E', 'A', 'D', ' ', 'R', 'E', 'S', '2', ':', 0x0d, 0x0a};
			 HAL_UART_Transmit(&huart2, (uint8_t *)send, 14, 0xFFFF);
 80009ac:	f107 0114 	add.w	r1, r7, #20
 80009b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009b4:	220e      	movs	r2, #14
 80009b6:	4844      	ldr	r0, [pc, #272]	; (8000ac8 <main+0x3dc>)
 80009b8:	f004 faf9 	bl	8004fae <HAL_UART_Transmit>
		 }
		 if (aRxBuffer[0]==6)				//RD3
 80009bc:	4b3e      	ldr	r3, [pc, #248]	; (8000ab8 <main+0x3cc>)
 80009be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009c2:	2b06      	cmp	r3, #6
 80009c4:	d10b      	bne.n	80009de <main+0x2f2>
		 {
			 char send[] = {0x14, 0x15,
 80009c6:	4b49      	ldr	r3, [pc, #292]	; (8000aec <main+0x400>)
 80009c8:	1d3c      	adds	r4, r7, #4
 80009ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009cc:	c407      	stmia	r4!, {r0, r1, r2}
 80009ce:	8023      	strh	r3, [r4, #0]
				  'R', 'E', 'A', 'D', ' ', 'R', 'E', 'S', '3', ':', 0x0d, 0x0a};
			 HAL_UART_Transmit(&huart2, (uint8_t *)send, 14, 0xFFFF);
 80009d0:	1d39      	adds	r1, r7, #4
 80009d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009d6:	220e      	movs	r2, #14
 80009d8:	483b      	ldr	r0, [pc, #236]	; (8000ac8 <main+0x3dc>)
 80009da:	f004 fae8 	bl	8004fae <HAL_UART_Transmit>
		 }

		 if ((aRxBuffer[0]>=4) && (aRxBuffer[0]<=6)){				// Print the variable value
 80009de:	4b36      	ldr	r3, [pc, #216]	; (8000ab8 <main+0x3cc>)
 80009e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009e4:	2b03      	cmp	r3, #3
 80009e6:	dd29      	ble.n	8000a3c <main+0x350>
 80009e8:	4b33      	ldr	r3, [pc, #204]	; (8000ab8 <main+0x3cc>)
 80009ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ee:	2b06      	cmp	r3, #6
 80009f0:	dc24      	bgt.n	8000a3c <main+0x350>
			 memset (sendStr, 0, STRLENMAX);
 80009f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009f6:	2100      	movs	r1, #0
 80009f8:	4832      	ldr	r0, [pc, #200]	; (8000ac4 <main+0x3d8>)
 80009fa:	f005 fd07 	bl	800640c <memset>
			 sendStr[0] = 0x12;
 80009fe:	4b31      	ldr	r3, [pc, #196]	; (8000ac4 <main+0x3d8>)
 8000a00:	2212      	movs	r2, #18
 8000a02:	701a      	strb	r2, [r3, #0]
			 sendStr[1] = 0x13;
 8000a04:	4b2f      	ldr	r3, [pc, #188]	; (8000ac4 <main+0x3d8>)
 8000a06:	2213      	movs	r2, #19
 8000a08:	705a      	strb	r2, [r3, #1]

			 memcpy(&sendStr[2], &aRxBuffer[1], CFG_LENGTH * sizeof(aRxBuffer[0]));
 8000a0a:	2214      	movs	r2, #20
 8000a0c:	492b      	ldr	r1, [pc, #172]	; (8000abc <main+0x3d0>)
 8000a0e:	4838      	ldr	r0, [pc, #224]	; (8000af0 <main+0x404>)
 8000a10:	f005 fcee 	bl	80063f0 <memcpy>

			 sendStr[22] = 0x0d;
 8000a14:	4b2b      	ldr	r3, [pc, #172]	; (8000ac4 <main+0x3d8>)
 8000a16:	220d      	movs	r2, #13
 8000a18:	759a      	strb	r2, [r3, #22]
			 sendStr[23] = 0x0a;
 8000a1a:	4b2a      	ldr	r3, [pc, #168]	; (8000ac4 <main+0x3d8>)
 8000a1c:	220a      	movs	r2, #10
 8000a1e:	75da      	strb	r2, [r3, #23]

			 HAL_UART_Transmit(&huart2, (uint8_t *)sendStr, 24, 0xFFFF);
 8000a20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a24:	2218      	movs	r2, #24
 8000a26:	4927      	ldr	r1, [pc, #156]	; (8000ac4 <main+0x3d8>)
 8000a28:	4827      	ldr	r0, [pc, #156]	; (8000ac8 <main+0x3dc>)
 8000a2a:	f004 fac0 	bl	8004fae <HAL_UART_Transmit>

			 bitFlag 	&= ~BFLAG_I2C_WBS;
 8000a2e:	4b27      	ldr	r3, [pc, #156]	; (8000acc <main+0x3e0>)
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	f023 0304 	bic.w	r3, r3, #4
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	4b24      	ldr	r3, [pc, #144]	; (8000acc <main+0x3e0>)
 8000a3a:	801a      	strh	r2, [r3, #0]
		 }

		 // BFLAG_I2C_RBA			Trigger default input at form
		 if (aRxBuffer[0]==7)				//WRA
 8000a3c:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <main+0x3cc>)
 8000a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a42:	2b07      	cmp	r3, #7
 8000a44:	d105      	bne.n	8000a52 <main+0x366>
		 {
			 Set_aTxBuffer(8, temp, 10, CFG_LENGTH*sizeof(temp[0]));
 8000a46:	2314      	movs	r3, #20
 8000a48:	220a      	movs	r2, #10
 8000a4a:	492a      	ldr	r1, [pc, #168]	; (8000af4 <main+0x408>)
 8000a4c:	2008      	movs	r0, #8
 8000a4e:	f7ff fe0b 	bl	8000668 <Set_aTxBuffer>
		 }
		 if (aRxBuffer[0]==8)
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <main+0x3cc>)
 8000a54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a58:	2b08      	cmp	r3, #8
 8000a5a:	d105      	bne.n	8000a68 <main+0x37c>
		 {
			 Set_aTxBuffer(9, temp, 20, CFG_LENGTH*sizeof(temp[0]));
 8000a5c:	2314      	movs	r3, #20
 8000a5e:	2214      	movs	r2, #20
 8000a60:	4924      	ldr	r1, [pc, #144]	; (8000af4 <main+0x408>)
 8000a62:	2009      	movs	r0, #9
 8000a64:	f7ff fe00 	bl	8000668 <Set_aTxBuffer>
		 }
		 if (aRxBuffer[0]==9)
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <main+0x3cc>)
 8000a6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a6e:	2b09      	cmp	r3, #9
 8000a70:	d119      	bne.n	8000aa6 <main+0x3ba>
		 {
			 sendStr[0] = 0x10;
 8000a72:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <main+0x3d8>)
 8000a74:	2210      	movs	r2, #16
 8000a76:	701a      	strb	r2, [r3, #0]
			 sendStr[1] = 0x12;
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <main+0x3d8>)
 8000a7a:	2212      	movs	r2, #18
 8000a7c:	705a      	strb	r2, [r3, #1]

			 HAL_UART_Transmit(&huart2, (uint8_t *)sendStr, 2, 0xFFFF);
 8000a7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a82:	2202      	movs	r2, #2
 8000a84:	490f      	ldr	r1, [pc, #60]	; (8000ac4 <main+0x3d8>)
 8000a86:	4810      	ldr	r0, [pc, #64]	; (8000ac8 <main+0x3dc>)
 8000a88:	f004 fa91 	bl	8004fae <HAL_UART_Transmit>
			 if(bitFlag & ~BFLAG_I2C_WBA){
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <main+0x3e0>)
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	f023 0310 	bic.w	r3, r3, #16
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d006      	beq.n	8000aa6 <main+0x3ba>
				 bitFlag &= ~BFLAG_I2C_WBA;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <main+0x3e0>)
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	f023 0310 	bic.w	r3, r3, #16
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <main+0x3e0>)
 8000aa4:	801a      	strh	r2, [r3, #0]
			 }
		 }

		 /* Reset bit 1 bitflag */
		 bitFlag 	&= ~BFLAG_I2C_RBS;
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <main+0x3e0>)
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	f023 0308 	bic.w	r3, r3, #8
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <main+0x3e0>)
 8000ab2:	801a      	strh	r2, [r3, #0]
  	  if (bitFlag & BFLAG_UART_RCV) {			/* UART Processing*/
 8000ab4:	e650      	b.n	8000758 <main+0x6c>
 8000ab6:	bf00      	nop
 8000ab8:	20000708 	.word	0x20000708
 8000abc:	2000070a 	.word	0x2000070a
 8000ac0:	2000062e 	.word	0x2000062e
 8000ac4:	20000604 	.word	0x20000604
 8000ac8:	20000108 	.word	0x20000108
 8000acc:	20000704 	.word	0x20000704
 8000ad0:	08006e80 	.word	0x08006e80
 8000ad4:	08006e90 	.word	0x08006e90
 8000ad8:	08006ea0 	.word	0x08006ea0
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	08006eb0 	.word	0x08006eb0
 8000ae4:	08006ecc 	.word	0x08006ecc
 8000ae8:	08006edc 	.word	0x08006edc
 8000aec:	08006eec 	.word	0x08006eec
 8000af0:	20000606 	.word	0x20000606
 8000af4:	20000720 	.word	0x20000720

08000af8 <HAL_I2C_ErrorCallback>:



/* @brief  I2C error callbacks
   @param  I2cHandle: I2C handle */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	printf("\r\nI2C ERROR \r\n\n");
 8000b00:	4805      	ldr	r0, [pc, #20]	; (8000b18 <HAL_I2C_ErrorCallback+0x20>)
 8000b02:	f005 fcf9 	bl	80064f8 <puts>
	while(1) {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b06:	2120      	movs	r1, #32
 8000b08:	4804      	ldr	r0, [pc, #16]	; (8000b1c <HAL_I2C_ErrorCallback+0x24>)
 8000b0a:	f001 fca2 	bl	8002452 <HAL_GPIO_TogglePin>
		HAL_Delay(20);
 8000b0e:	2014      	movs	r0, #20
 8000b10:	f000 fdac 	bl	800166c <HAL_Delay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b14:	e7f7      	b.n	8000b06 <HAL_I2C_ErrorCallback+0xe>
 8000b16:	bf00      	nop
 8000b18:	08006efc 	.word	0x08006efc
 8000b1c:	40020000 	.word	0x40020000

08000b20 <SystemClock_Config>:
	}
}

/* @brief System Clock Configuration */
void SystemClock_Config(void) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b094      	sub	sp, #80	; 0x50
 8000b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	2234      	movs	r2, #52	; 0x34
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f005 fc6c 	bl	800640c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b34:	f107 0308 	add.w	r3, r7, #8
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b44:	2300      	movs	r3, #0
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	4b2a      	ldr	r3, [pc, #168]	; (8000bf4 <SystemClock_Config+0xd4>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4c:	4a29      	ldr	r2, [pc, #164]	; (8000bf4 <SystemClock_Config+0xd4>)
 8000b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b52:	6413      	str	r3, [r2, #64]	; 0x40
 8000b54:	4b27      	ldr	r3, [pc, #156]	; (8000bf4 <SystemClock_Config+0xd4>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b60:	2300      	movs	r3, #0
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	4b24      	ldr	r3, [pc, #144]	; (8000bf8 <SystemClock_Config+0xd8>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b6c:	4a22      	ldr	r2, [pc, #136]	; (8000bf8 <SystemClock_Config+0xd8>)
 8000b6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b72:	6013      	str	r3, [r2, #0]
 8000b74:	4b20      	ldr	r3, [pc, #128]	; (8000bf8 <SystemClock_Config+0xd8>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b7c:	603b      	str	r3, [r7, #0]
 8000b7e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.*/
  RCC_OscInitStruct.OscillatorType 		= RCC_OSCILLATORTYPE_HSI;
 8000b80:	2302      	movs	r3, #2
 8000b82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState 			= RCC_HSI_ON;
 8000b84:	2301      	movs	r3, #1
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b88:	2310      	movs	r3, #16
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState 		= RCC_PLL_ON;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource 		= RCC_PLLSOURCE_HSI;
 8000b90:	2300      	movs	r3, #0
 8000b92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM 			= 16;
 8000b94:	2310      	movs	r3, #16
 8000b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN 			= 336;
 8000b98:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b9c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP 			= RCC_PLLP_DIV4;
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ 			= 2;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR 			= 2;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f003 ff12 	bl	80049d8 <HAL_RCC_OscConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000bba:	f000 f989 	bl	8000ed0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bbe:	230f      	movs	r3, #15
 8000bc0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK){
 8000bd4:	f107 0308 	add.w	r3, r7, #8
 8000bd8:	2105      	movs	r1, #5
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f003 fbb2 	bl	8004344 <HAL_RCC_ClockConfig>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <SystemClock_Config+0xca>
    Error_Handler();
 8000be6:	f000 f973 	bl	8000ed0 <Error_Handler>
  }
}
 8000bea:	bf00      	nop
 8000bec:	3750      	adds	r7, #80	; 0x50
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40007000 	.word	0x40007000

08000bfc <MX_USART2_UART_Init>:

/* @brief USART2 Initialization Function*/
static void MX_USART2_UART_Init(void) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  huart2.Instance 			= USART2;
 8000c00:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <MX_USART2_UART_Init+0x58>)
 8000c02:	4a15      	ldr	r2, [pc, #84]	; (8000c58 <MX_USART2_UART_Init+0x5c>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate 		= 115200;
 8000c06:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <MX_USART2_UART_Init+0x58>)
 8000c08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength 	= UART_WORDLENGTH_8B;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <MX_USART2_UART_Init+0x58>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits 		= UART_STOPBITS_1;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <MX_USART2_UART_Init+0x58>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity 		= UART_PARITY_NONE;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <MX_USART2_UART_Init+0x58>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode 			= UART_MODE_TX_RX;
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <MX_USART2_UART_Init+0x58>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl 	= UART_HWCONTROL_NONE;
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <MX_USART2_UART_Init+0x58>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling 	= UART_OVERSAMPLING_16;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <MX_USART2_UART_Init+0x58>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart2) != HAL_OK){
 8000c32:	4808      	ldr	r0, [pc, #32]	; (8000c54 <MX_USART2_UART_Init+0x58>)
 8000c34:	f004 f96e 	bl	8004f14 <HAL_UART_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART2_UART_Init+0x46>
    Error_Handler();
 8000c3e:	f000 f947 	bl	8000ed0 <Error_Handler>
  }

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, u8arr_eventBuff, UART_BUF_SZ);
 8000c42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c46:	4905      	ldr	r1, [pc, #20]	; (8000c5c <MX_USART2_UART_Init+0x60>)
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <MX_USART2_UART_Init+0x58>)
 8000c4a:	f004 fa42 	bl	80050d2 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000108 	.word	0x20000108
 8000c58:	40004400 	.word	0x40004400
 8000c5c:	20000200 	.word	0x20000200

08000c60 <MX_DMA_Init>:


static void MX_DMA_Init(void) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <MX_DMA_Init+0x3c>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a0b      	ldr	r2, [pc, #44]	; (8000c9c <MX_DMA_Init+0x3c>)
 8000c70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <MX_DMA_Init+0x3c>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2100      	movs	r1, #0
 8000c86:	2010      	movs	r0, #16
 8000c88:	f000 fdef 	bl	800186a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c8c:	2010      	movs	r0, #16
 8000c8e:	f000 fe08 	bl	80018a2 <HAL_NVIC_EnableIRQ>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40023800 	.word	0x40023800

08000ca0 <MX_GPIO_Init>:

/* @brief GPIO Initialization Function*/
static void MX_GPIO_Init(void) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	; 0x28
 8000ca4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
 8000cb4:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
 8000cba:	4b2d      	ldr	r3, [pc, #180]	; (8000d70 <MX_GPIO_Init+0xd0>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a2c      	ldr	r2, [pc, #176]	; (8000d70 <MX_GPIO_Init+0xd0>)
 8000cc0:	f043 0304 	orr.w	r3, r3, #4
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b2a      	ldr	r3, [pc, #168]	; (8000d70 <MX_GPIO_Init+0xd0>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0304 	and.w	r3, r3, #4
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <MX_GPIO_Init+0xd0>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a25      	ldr	r2, [pc, #148]	; (8000d70 <MX_GPIO_Init+0xd0>)
 8000cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b23      	ldr	r3, [pc, #140]	; (8000d70 <MX_GPIO_Init+0xd0>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	4b1f      	ldr	r3, [pc, #124]	; (8000d70 <MX_GPIO_Init+0xd0>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a1e      	ldr	r2, [pc, #120]	; (8000d70 <MX_GPIO_Init+0xd0>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <MX_GPIO_Init+0xd0>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <MX_GPIO_Init+0xd0>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a17      	ldr	r2, [pc, #92]	; (8000d70 <MX_GPIO_Init+0xd0>)
 8000d14:	f043 0302 	orr.w	r3, r3, #2
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <MX_GPIO_Init+0xd0>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2120      	movs	r1, #32
 8000d2a:	4812      	ldr	r0, [pc, #72]	; (8000d74 <MX_GPIO_Init+0xd4>)
 8000d2c:	f001 fb78 	bl	8002420 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin 		= B1_Pin;
 8000d30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 8000d36:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4619      	mov	r1, r3
 8000d46:	480c      	ldr	r0, [pc, #48]	; (8000d78 <MX_GPIO_Init+0xd8>)
 8000d48:	f001 f9d6 	bl	80020f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin 		= LD2_Pin;
 8000d4c:	2320      	movs	r3, #32
 8000d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode 		= GPIO_MODE_OUTPUT_PP;
 8000d50:	2301      	movs	r3, #1
 8000d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed 	= GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4619      	mov	r1, r3
 8000d62:	4804      	ldr	r0, [pc, #16]	; (8000d74 <MX_GPIO_Init+0xd4>)
 8000d64:	f001 f9c8 	bl	80020f8 <HAL_GPIO_Init>
}
 8000d68:	bf00      	nop
 8000d6a:	3728      	adds	r7, #40	; 0x28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020000 	.word	0x40020000
 8000d78:	40020800 	.word	0x40020800

08000d7c <uartProcessing>:


void uartProcessing (uint8_t *u8p_buffer, uint16_t u16_size){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	807b      	strh	r3, [r7, #2]
	vShell_cmdParse((char*)u8p_buffer);
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f000 fac9 	bl	8001320 <vShell_cmdParse>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <vUAFE_uart_handle>:
/*****************************************************************
 * @name 	vUAFE_uart_handle
 * @brief	handle afe uart data copy
 ****************************************************************/
static void vUAFE_uart_handle(uint16_t Size)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	80fb      	strh	r3, [r7, #6]
	uint16_t u16_numData;

	/* Check if number of received data in reception buffer has changed */
	if (Size != u16_oldPos)
 8000da2:	4b36      	ldr	r3, [pc, #216]	; (8000e7c <vUAFE_uart_handle+0xe4>)
 8000da4:	881b      	ldrh	r3, [r3, #0]
 8000da6:	88fa      	ldrh	r2, [r7, #6]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d05f      	beq.n	8000e6c <vUAFE_uart_handle+0xd4>
	{
		if (Size > u16_oldPos)
 8000dac:	4b33      	ldr	r3, [pc, #204]	; (8000e7c <vUAFE_uart_handle+0xe4>)
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	88fa      	ldrh	r2, [r7, #6]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d91a      	bls.n	8000dec <vUAFE_uart_handle+0x54>
		{
			/* Current position is higher than previous one */
			u16_numData = Size - u16_oldPos;
 8000db6:	4b31      	ldr	r3, [pc, #196]	; (8000e7c <vUAFE_uart_handle+0xe4>)
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	88fa      	ldrh	r2, [r7, #6]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	81fb      	strh	r3, [r7, #14]
			memcpy(&u8arr_uartEvent[u16_lenCnt],&u8arr_eventBuff[u16_oldPos],u16_numData);
 8000dc0:	4b2f      	ldr	r3, [pc, #188]	; (8000e80 <vUAFE_uart_handle+0xe8>)
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b2f      	ldr	r3, [pc, #188]	; (8000e84 <vUAFE_uart_handle+0xec>)
 8000dc8:	4413      	add	r3, r2
 8000dca:	4a2c      	ldr	r2, [pc, #176]	; (8000e7c <vUAFE_uart_handle+0xe4>)
 8000dcc:	8812      	ldrh	r2, [r2, #0]
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4a2d      	ldr	r2, [pc, #180]	; (8000e88 <vUAFE_uart_handle+0xf0>)
 8000dd2:	4411      	add	r1, r2
 8000dd4:	89fa      	ldrh	r2, [r7, #14]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f005 fb0a 	bl	80063f0 <memcpy>
			u16_lenCnt += u16_numData;
 8000ddc:	4b28      	ldr	r3, [pc, #160]	; (8000e80 <vUAFE_uart_handle+0xe8>)
 8000dde:	881a      	ldrh	r2, [r3, #0]
 8000de0:	89fb      	ldrh	r3, [r7, #14]
 8000de2:	4413      	add	r3, r2
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <vUAFE_uart_handle+0xe8>)
 8000de8:	801a      	strh	r2, [r3, #0]
 8000dea:	e02a      	b.n	8000e42 <vUAFE_uart_handle+0xaa>
		}
		else
		{
			/* End of buffer has been reached */
			u16_numData = UART_BUF_SZ - u16_oldPos;
 8000dec:	4b23      	ldr	r3, [pc, #140]	; (8000e7c <vUAFE_uart_handle+0xe4>)
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8000df4:	81fb      	strh	r3, [r7, #14]

			memcpy (&u8arr_uartEvent[u16_lenCnt], 			// copy data in that remaining space
 8000df6:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <vUAFE_uart_handle+0xe8>)
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	4b21      	ldr	r3, [pc, #132]	; (8000e84 <vUAFE_uart_handle+0xec>)
 8000dfe:	4413      	add	r3, r2
					&u8arr_eventBuff[u16_oldPos],
 8000e00:	4a1e      	ldr	r2, [pc, #120]	; (8000e7c <vUAFE_uart_handle+0xe4>)
 8000e02:	8812      	ldrh	r2, [r2, #0]
 8000e04:	4611      	mov	r1, r2
 8000e06:	4a20      	ldr	r2, [pc, #128]	; (8000e88 <vUAFE_uart_handle+0xf0>)
 8000e08:	4411      	add	r1, r2
			memcpy (&u8arr_uartEvent[u16_lenCnt], 			// copy data in that remaining space
 8000e0a:	89fa      	ldrh	r2, [r7, #14]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f005 faef 	bl	80063f0 <memcpy>
					u16_numData);

			u16_lenCnt += u16_numData;
 8000e12:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <vUAFE_uart_handle+0xe8>)
 8000e14:	881a      	ldrh	r2, [r3, #0]
 8000e16:	89fb      	ldrh	r3, [r7, #14]
 8000e18:	4413      	add	r3, r2
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <vUAFE_uart_handle+0xe8>)
 8000e1e:	801a      	strh	r2, [r3, #0]

			memcpy (&u8arr_uartEvent[u16_lenCnt], 			// copy the remaining data
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <vUAFE_uart_handle+0xe8>)
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <vUAFE_uart_handle+0xec>)
 8000e28:	4413      	add	r3, r2
 8000e2a:	88fa      	ldrh	r2, [r7, #6]
 8000e2c:	4916      	ldr	r1, [pc, #88]	; (8000e88 <vUAFE_uart_handle+0xf0>)
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f005 fade 	bl	80063f0 <memcpy>
					&u8arr_eventBuff[0],
					Size);

			u16_lenCnt += Size;
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <vUAFE_uart_handle+0xe8>)
 8000e36:	881a      	ldrh	r2, [r3, #0]
 8000e38:	88fb      	ldrh	r3, [r7, #6]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <vUAFE_uart_handle+0xe8>)
 8000e40:	801a      	strh	r2, [r3, #0]
		}

		/* Check for ready to process */
		if((u8arr_uartEvent[u16_lenCnt - 1] == '\n')&&(u8arr_uartEvent[u16_lenCnt - 2]== '\r'))
 8000e42:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <vUAFE_uart_handle+0xe8>)
 8000e44:	881b      	ldrh	r3, [r3, #0]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	4a0e      	ldr	r2, [pc, #56]	; (8000e84 <vUAFE_uart_handle+0xec>)
 8000e4a:	5cd3      	ldrb	r3, [r2, r3]
 8000e4c:	2b0a      	cmp	r3, #10
 8000e4e:	d10d      	bne.n	8000e6c <vUAFE_uart_handle+0xd4>
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <vUAFE_uart_handle+0xe8>)
 8000e52:	881b      	ldrh	r3, [r3, #0]
 8000e54:	3b02      	subs	r3, #2
 8000e56:	4a0b      	ldr	r2, [pc, #44]	; (8000e84 <vUAFE_uart_handle+0xec>)
 8000e58:	5cd3      	ldrb	r3, [r2, r3]
 8000e5a:	2b0d      	cmp	r3, #13
 8000e5c:	d106      	bne.n	8000e6c <vUAFE_uart_handle+0xd4>
		{
			bitFlag |= BFLAG_UART_RCV;
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <vUAFE_uart_handle+0xf4>)
 8000e60:	881b      	ldrh	r3, [r3, #0]
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <vUAFE_uart_handle+0xf4>)
 8000e6a:	801a      	strh	r2, [r3, #0]
		}

	}

	u16_oldPos = Size;
 8000e6c:	4a03      	ldr	r2, [pc, #12]	; (8000e7c <vUAFE_uart_handle+0xe4>)
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	8013      	strh	r3, [r2, #0]
}
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000600 	.word	0x20000600
 8000e80:	20000602 	.word	0x20000602
 8000e84:	20000400 	.word	0x20000400
 8000e88:	20000200 	.word	0x20000200
 8000e8c:	20000704 	.word	0x20000704

08000e90 <HAL_UARTEx_RxEventCallback>:
/*****************************************************************
 * @name HAL_UARTEx_RxEventCallback
 * @brief
 ****************************************************************/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	807b      	strh	r3, [r7, #2]
	#ifdef RX_EVENT_CB
		if (huart->Instance == USART2)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a08      	ldr	r2, [pc, #32]	; (8000ec4 <HAL_UARTEx_RxEventCallback+0x34>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d109      	bne.n	8000eba <HAL_UARTEx_RxEventCallback+0x2a>
		{
			vUAFE_uart_handle(Size);
 8000ea6:	887b      	ldrh	r3, [r7, #2]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff75 	bl	8000d98 <vUAFE_uart_handle>
			HAL_UARTEx_ReceiveToIdle_DMA(&huart2, u8arr_eventBuff, UART_BUF_SZ);
 8000eae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb2:	4905      	ldr	r1, [pc, #20]	; (8000ec8 <HAL_UARTEx_RxEventCallback+0x38>)
 8000eb4:	4805      	ldr	r0, [pc, #20]	; (8000ecc <HAL_UARTEx_RxEventCallback+0x3c>)
 8000eb6:	f004 f90c 	bl	80050d2 <HAL_UARTEx_ReceiveToIdle_DMA>
		}
	#endif
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40004400 	.word	0x40004400
 8000ec8:	20000200 	.word	0x20000200
 8000ecc:	20000108 	.word	0x20000108

08000ed0 <Error_Handler>:


/*******************************************************************
  * @brief  This function is executed in case of error occurrence.
  ******************************************************************/
void Error_Handler(void) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  printf("\r\nerror handler!!!\r\n");
 8000ed4:	4806      	ldr	r0, [pc, #24]	; (8000ef0 <Error_Handler+0x20>)
 8000ed6:	f005 fb0f 	bl	80064f8 <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eda:	b672      	cpsid	i
}
 8000edc:	bf00      	nop
  __disable_irq();

  while (1) {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000ede:	2120      	movs	r1, #32
 8000ee0:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <Error_Handler+0x24>)
 8000ee2:	f001 fab6 	bl	8002452 <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 8000ee6:	2032      	movs	r0, #50	; 0x32
 8000ee8:	f000 fbc0 	bl	800166c <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000eec:	e7f7      	b.n	8000ede <Error_Handler+0xe>
 8000eee:	bf00      	nop
 8000ef0:	08006f0c 	.word	0x08006f0c
 8000ef4:	40020000 	.word	0x40020000

08000ef8 <HAL_MspInit>:

extern DMA_HandleTypeDef hdma_usart2_rx;


void HAL_MspInit(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <HAL_MspInit+0x4c>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	4a0f      	ldr	r2, [pc, #60]	; (8000f44 <HAL_MspInit+0x4c>)
 8000f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <HAL_MspInit+0x4c>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	603b      	str	r3, [r7, #0]
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <HAL_MspInit+0x4c>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	4a08      	ldr	r2, [pc, #32]	; (8000f44 <HAL_MspInit+0x4c>)
 8000f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f28:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_MspInit+0x4c>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f32:	603b      	str	r3, [r7, #0]
 8000f34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f36:	2007      	movs	r0, #7
 8000f38:	f000 fc8c 	bl	8001854 <HAL_NVIC_SetPriorityGrouping>
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40023800 	.word	0x40023800

08000f48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	; 0x28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a34      	ldr	r2, [pc, #208]	; (8001038 <HAL_UART_MspInit+0xf0>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d162      	bne.n	8001030 <HAL_UART_MspInit+0xe8>
  {
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	4b33      	ldr	r3, [pc, #204]	; (800103c <HAL_UART_MspInit+0xf4>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	4a32      	ldr	r2, [pc, #200]	; (800103c <HAL_UART_MspInit+0xf4>)
 8000f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f78:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7a:	4b30      	ldr	r3, [pc, #192]	; (800103c <HAL_UART_MspInit+0xf4>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b2c      	ldr	r3, [pc, #176]	; (800103c <HAL_UART_MspInit+0xf4>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a2b      	ldr	r2, [pc, #172]	; (800103c <HAL_UART_MspInit+0xf4>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b29      	ldr	r3, [pc, #164]	; (800103c <HAL_UART_MspInit+0xf4>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin 		= USART_TX_Pin|USART_RX_Pin;
 8000fa2:	230c      	movs	r3, #12
 8000fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate 	= GPIO_AF7_USART2;
 8000fb2:	2307      	movs	r3, #7
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4820      	ldr	r0, [pc, #128]	; (8001040 <HAL_UART_MspInit+0xf8>)
 8000fbe:	f001 f89b 	bl	80020f8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance 				= DMA1_Stream5;
 8000fc2:	4b20      	ldr	r3, [pc, #128]	; (8001044 <HAL_UART_MspInit+0xfc>)
 8000fc4:	4a20      	ldr	r2, [pc, #128]	; (8001048 <HAL_UART_MspInit+0x100>)
 8000fc6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel 			= DMA_CHANNEL_4;
 8000fc8:	4b1e      	ldr	r3, [pc, #120]	; (8001044 <HAL_UART_MspInit+0xfc>)
 8000fca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fce:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction 			= DMA_PERIPH_TO_MEMORY;
 8000fd0:	4b1c      	ldr	r3, [pc, #112]	; (8001044 <HAL_UART_MspInit+0xfc>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8000fd6:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <HAL_UART_MspInit+0xfc>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8000fdc:	4b19      	ldr	r3, [pc, #100]	; (8001044 <HAL_UART_MspInit+0xfc>)
 8000fde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fe2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fe4:	4b17      	ldr	r3, [pc, #92]	; (8001044 <HAL_UART_MspInit+0xfc>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8000fea:	4b16      	ldr	r3, [pc, #88]	; (8001044 <HAL_UART_MspInit+0xfc>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode 				= DMA_CIRCULAR;
 8000ff0:	4b14      	ldr	r3, [pc, #80]	; (8001044 <HAL_UART_MspInit+0xfc>)
 8000ff2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ff6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority 			= DMA_PRIORITY_LOW;
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_UART_MspInit+0xfc>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <HAL_UART_MspInit+0xfc>)
 8001000:	2200      	movs	r2, #0
 8001002:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001004:	480f      	ldr	r0, [pc, #60]	; (8001044 <HAL_UART_MspInit+0xfc>)
 8001006:	f000 fc67 	bl	80018d8 <HAL_DMA_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001010:	f7ff ff5e 	bl	8000ed0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <HAL_UART_MspInit+0xfc>)
 8001018:	639a      	str	r2, [r3, #56]	; 0x38
 800101a:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <HAL_UART_MspInit+0xfc>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001020:	2200      	movs	r2, #0
 8001022:	2100      	movs	r1, #0
 8001024:	2026      	movs	r0, #38	; 0x26
 8001026:	f000 fc20 	bl	800186a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800102a:	2026      	movs	r0, #38	; 0x26
 800102c:	f000 fc39 	bl	80018a2 <HAL_NVIC_EnableIRQ>
  }

}
 8001030:	bf00      	nop
 8001032:	3728      	adds	r7, #40	; 0x28
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40004400 	.word	0x40004400
 800103c:	40023800 	.word	0x40023800
 8001040:	40020000 	.word	0x40020000
 8001044:	2000014c 	.word	0x2000014c
 8001048:	40026088 	.word	0x40026088

0800104c <HAL_I2C_MspInit>:
  *           - NVIC configuration for DMA interrupt request enable
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08a      	sub	sp, #40	; 0x28
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /*##-1- Enable GPIO Clocks #################################################*/
  /* Enable GPIO TX/RX clock */
  I2Cx_SCL_GPIO_CLK_ENABLE();
 8001054:	2300      	movs	r3, #0
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	4b2b      	ldr	r3, [pc, #172]	; (8001108 <HAL_I2C_MspInit+0xbc>)
 800105a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105c:	4a2a      	ldr	r2, [pc, #168]	; (8001108 <HAL_I2C_MspInit+0xbc>)
 800105e:	f043 0302 	orr.w	r3, r3, #2
 8001062:	6313      	str	r3, [r2, #48]	; 0x30
 8001064:	4b28      	ldr	r3, [pc, #160]	; (8001108 <HAL_I2C_MspInit+0xbc>)
 8001066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001068:	f003 0302 	and.w	r3, r3, #2
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	693b      	ldr	r3, [r7, #16]
  I2Cx_SDA_GPIO_CLK_ENABLE();
 8001070:	2300      	movs	r3, #0
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	4b24      	ldr	r3, [pc, #144]	; (8001108 <HAL_I2C_MspInit+0xbc>)
 8001076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001078:	4a23      	ldr	r2, [pc, #140]	; (8001108 <HAL_I2C_MspInit+0xbc>)
 800107a:	f043 0302 	orr.w	r3, r3, #2
 800107e:	6313      	str	r3, [r2, #48]	; 0x30
 8001080:	4b21      	ldr	r3, [pc, #132]	; (8001108 <HAL_I2C_MspInit+0xbc>)
 8001082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* I2C TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
 800108c:	2340      	movs	r3, #64	; 0x40
 800108e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8001090:	2312      	movs	r3, #18
 8001092:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001094:	2301      	movs	r3, #1
 8001096:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8001098:	2302      	movs	r3, #2
 800109a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
 800109c:	2304      	movs	r3, #4
 800109e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4619      	mov	r1, r3
 80010a6:	4819      	ldr	r0, [pc, #100]	; (800110c <HAL_I2C_MspInit+0xc0>)
 80010a8:	f001 f826 	bl	80020f8 <HAL_GPIO_Init>

  /* I2C RX GPIO pin configuration  */
  GPIO_InitStruct.Pin 		= I2Cx_SDA_PIN;
 80010ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = I2Cx_SDA_AF;
 80010b2:	2304      	movs	r3, #4
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	4619      	mov	r1, r3
 80010bc:	4813      	ldr	r0, [pc, #76]	; (800110c <HAL_I2C_MspInit+0xc0>)
 80010be:	f001 f81b 	bl	80020f8 <HAL_GPIO_Init>

  /*##-3- Enable I2C peripheral Clock ########################################*/
  /* Enable I2C1 clock */
  I2Cx_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <HAL_I2C_MspInit+0xbc>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	4a0f      	ldr	r2, [pc, #60]	; (8001108 <HAL_I2C_MspInit+0xbc>)
 80010cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010d0:	6413      	str	r3, [r2, #64]	; 0x40
 80010d2:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <HAL_I2C_MspInit+0xbc>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]

  /*##-4- Configure the NVIC for I2C #########################################*/
  /* NVIC for I2C1 */
  HAL_NVIC_SetPriority(I2Cx_ER_IRQn, 1, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2101      	movs	r1, #1
 80010e2:	2020      	movs	r0, #32
 80010e4:	f000 fbc1 	bl	800186a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2Cx_ER_IRQn);
 80010e8:	2020      	movs	r0, #32
 80010ea:	f000 fbda 	bl	80018a2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(I2Cx_EV_IRQn, 2, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2102      	movs	r1, #2
 80010f2:	201f      	movs	r0, #31
 80010f4:	f000 fbb9 	bl	800186a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2Cx_EV_IRQn);
 80010f8:	201f      	movs	r0, #31
 80010fa:	f000 fbd2 	bl	80018a2 <HAL_NVIC_EnableIRQ>
}
 80010fe:	bf00      	nop
 8001100:	3728      	adds	r7, #40	; 0x28
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800
 800110c:	40020400 	.word	0x40020400

08001110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  while (1)
 8001114:	e7fe      	b.n	8001114 <NMI_Handler+0x4>

08001116 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0
  while (1)
 800111a:	e7fe      	b.n	800111a <HardFault_Handler+0x4>

0800111c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  while (1)
 8001120:	e7fe      	b.n	8001120 <MemManage_Handler+0x4>

08001122 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0
  while (1)
 8001126:	e7fe      	b.n	8001126 <BusFault_Handler+0x4>

08001128 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  while (1)
 800112c:	e7fe      	b.n	800112c <UsageFault_Handler+0x4>

0800112e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0

}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0

}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0

}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800115c:	f000 fa66 	bl	800162c <HAL_IncTick>
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}

08001164 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001168:	4802      	ldr	r0, [pc, #8]	; (8001174 <DMA1_Stream5_IRQHandler+0x10>)
 800116a:	f000 fd4d 	bl	8001c08 <HAL_DMA_IRQHandler>
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	2000014c 	.word	0x2000014c

08001178 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 800117c:	4802      	ldr	r0, [pc, #8]	; (8001188 <USART2_IRQHandler+0x10>)
 800117e:	f004 f80d 	bl	800519c <HAL_UART_IRQHandler>
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000108 	.word	0x20000108

0800118c <I2C1_EV_IRQHandler>:
  * @param  None
  * @retval None
  * @Note   This function is redefined in "main.h" and related to I2C data transmission
  */
void I2Cx_EV_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(& I2cHandle);
 8001190:	4802      	ldr	r0, [pc, #8]	; (800119c <I2C1_EV_IRQHandler+0x10>)
 8001192:	f001 fc11 	bl	80029b8 <HAL_I2C_EV_IRQHandler>
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200001ac 	.word	0x200001ac

080011a0 <I2C1_ER_IRQHandler>:
  * @param  None
  * @retval None
  * @Note   This function is redefined in "main.h" and related to I2C error
  */
void I2Cx_ER_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(& I2cHandle);
 80011a4:	4802      	ldr	r0, [pc, #8]	; (80011b0 <I2C1_ER_IRQHandler+0x10>)
 80011a6:	f001 fd74 	bl	8002c92 <HAL_I2C_ER_IRQHandler>
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200001ac 	.word	0x200001ac

080011b4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
 80011c4:	e00a      	b.n	80011dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011c6:	f3af 8000 	nop.w
 80011ca:	4601      	mov	r1, r0
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	1c5a      	adds	r2, r3, #1
 80011d0:	60ba      	str	r2, [r7, #8]
 80011d2:	b2ca      	uxtb	r2, r1
 80011d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	3301      	adds	r3, #1
 80011da:	617b      	str	r3, [r7, #20]
 80011dc:	697a      	ldr	r2, [r7, #20]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	dbf0      	blt.n	80011c6 <_read+0x12>
	}

return len;
 80011e4:	687b      	ldr	r3, [r7, #4]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b086      	sub	sp, #24
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	60f8      	str	r0, [r7, #12]
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
 80011fe:	e009      	b.n	8001214 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	1c5a      	adds	r2, r3, #1
 8001204:	60ba      	str	r2, [r7, #8]
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fa5d 	bl	80006c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	3301      	adds	r3, #1
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	429a      	cmp	r2, r3
 800121a:	dbf1      	blt.n	8001200 <_write+0x12>
	}
	return len;
 800121c:	687b      	ldr	r3, [r7, #4]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <_close>:

int _close(int file)
{
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
	return -1;
 800122e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001232:	4618      	mov	r0, r3
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
 8001246:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800124e:	605a      	str	r2, [r3, #4]
	return 0;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <_isatty>:

int _isatty(int file)
{
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
	return 1;
 8001266:	2301      	movs	r3, #1
}
 8001268:	4618      	mov	r0, r3
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
	return 0;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001298:	4a14      	ldr	r2, [pc, #80]	; (80012ec <_sbrk+0x5c>)
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <_sbrk+0x60>)
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <_sbrk+0x64>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d102      	bne.n	80012b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <_sbrk+0x64>)
 80012ae:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <_sbrk+0x68>)
 80012b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <_sbrk+0x64>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d207      	bcs.n	80012d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c0:	f005 f85c 	bl	800637c <__errno>
 80012c4:	4603      	mov	r3, r0
 80012c6:	220c      	movs	r2, #12
 80012c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
 80012ce:	e009      	b.n	80012e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <_sbrk+0x64>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012d6:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <_sbrk+0x64>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4413      	add	r3, r2
 80012de:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <_sbrk+0x64>)
 80012e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012e2:	68fb      	ldr	r3, [r7, #12]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20020000 	.word	0x20020000
 80012f0:	00000400 	.word	0x00000400
 80012f4:	2000075c 	.word	0x2000075c
 80012f8:	20000778 	.word	0x20000778

080012fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <SystemInit+0x20>)
 8001302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001306:	4a05      	ldr	r2, [pc, #20]	; (800131c <SystemInit+0x20>)
 8001308:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800130c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <vShell_cmdParse>:

/* Public functions definitions */
/********************************************************
 * 	Parsing incoming message						   	*
 ********************************************************/
void vShell_cmdParse(char *input) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	for(uint8_t u8_idx = 0; u8_idx < CFG_HEADER_NUM; u8_idx++) {
 8001328:	2300      	movs	r3, #0
 800132a:	77fb      	strb	r3, [r7, #31]
 800132c:	e0f1      	b.n	8001512 <vShell_cmdParse+0x1f2>
		if(!memcmp(input,(char*)&str_cfg_header[u8_idx][0], CFG_HEADER_LEN)) {
 800132e:	7ffa      	ldrb	r2, [r7, #31]
 8001330:	4613      	mov	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	4a7b      	ldr	r2, [pc, #492]	; (8001524 <vShell_cmdParse+0x204>)
 8001338:	4413      	add	r3, r2
 800133a:	2205      	movs	r2, #5
 800133c:	4619      	mov	r1, r3
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f005 f846 	bl	80063d0 <memcmp>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	f040 80e0 	bne.w	800150c <vShell_cmdParse+0x1ec>
			if (u8_idx==1) {					//{RBA}
 800134c:	7ffb      	ldrb	r3, [r7, #31]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d107      	bne.n	8001362 <vShell_cmdParse+0x42>
				bitFlag |= BFLAG_I2C_RBA;
 8001352:	4b75      	ldr	r3, [pc, #468]	; (8001528 <vShell_cmdParse+0x208>)
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	f043 0302 	orr.w	r3, r3, #2
 800135a:	b29a      	uxth	r2, r3
 800135c:	4b72      	ldr	r3, [pc, #456]	; (8001528 <vShell_cmdParse+0x208>)
 800135e:	801a      	strh	r2, [r3, #0]
 8001360:	e0d4      	b.n	800150c <vShell_cmdParse+0x1ec>
			}

			else if (u8_idx>=2 && u8_idx<=4) {	//{WB1: {WB2: {WB3:
 8001362:	7ffb      	ldrb	r3, [r7, #31]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d95a      	bls.n	800141e <vShell_cmdParse+0xfe>
 8001368:	7ffb      	ldrb	r3, [r7, #31]
 800136a:	2b04      	cmp	r3, #4
 800136c:	d857      	bhi.n	800141e <vShell_cmdParse+0xfe>
				bitFlag |= BFLAG_I2C_WBS;
 800136e:	4b6e      	ldr	r3, [pc, #440]	; (8001528 <vShell_cmdParse+0x208>)
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	f043 0304 	orr.w	r3, r3, #4
 8001376:	b29a      	uxth	r2, r3
 8001378:	4b6b      	ldr	r3, [pc, #428]	; (8001528 <vShell_cmdParse+0x208>)
 800137a:	801a      	strh	r2, [r3, #0]

				uint32_t num = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	61bb      	str	r3, [r7, #24]
				uint8_t start = 5;
 8001380:	2305      	movs	r3, #5
 8001382:	75fb      	strb	r3, [r7, #23]

			    for (uint8_t j = 0; j<CFG_LENGTH; j++)
 8001384:	2300      	movs	r3, #0
 8001386:	75bb      	strb	r3, [r7, #22]
 8001388:	e031      	b.n	80013ee <vShell_cmdParse+0xce>
			    {
			    	if(input[start+1]<128)
 800138a:	7dfb      	ldrb	r3, [r7, #23]
 800138c:	3301      	adds	r3, #1
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	b25b      	sxtb	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	db0d      	blt.n	80013b6 <vShell_cmdParse+0x96>
			    	{
			    		num = input[start]+(input[start+1]*256);
 800139a:	7dfb      	ldrb	r3, [r7, #23]
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	4413      	add	r3, r2
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	4619      	mov	r1, r3
 80013a4:	7dfb      	ldrb	r3, [r7, #23]
 80013a6:	3301      	adds	r3, #1
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	4413      	add	r3, r2
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	021b      	lsls	r3, r3, #8
 80013b0:	440b      	add	r3, r1
 80013b2:	61bb      	str	r3, [r7, #24]
 80013b4:	e00e      	b.n	80013d4 <vShell_cmdParse+0xb4>
			    	}
			    	else
			    	{
			    		num = (input[start]+(input[start+1]*256))-65536;
 80013b6:	7dfb      	ldrb	r3, [r7, #23]
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	4413      	add	r3, r2
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	4619      	mov	r1, r3
 80013c0:	7dfb      	ldrb	r3, [r7, #23]
 80013c2:	3301      	adds	r3, #1
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	4413      	add	r3, r2
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	021b      	lsls	r3, r3, #8
 80013cc:	440b      	add	r3, r1
 80013ce:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80013d2:	61bb      	str	r3, [r7, #24]
			    	}
			    	aTxBuffer[j+1] = num;
 80013d4:	7dbb      	ldrb	r3, [r7, #22]
 80013d6:	3301      	adds	r3, #1
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	b211      	sxth	r1, r2
 80013dc:	4a53      	ldr	r2, [pc, #332]	; (800152c <vShell_cmdParse+0x20c>)
 80013de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			    	start+=2;
 80013e2:	7dfb      	ldrb	r3, [r7, #23]
 80013e4:	3302      	adds	r3, #2
 80013e6:	75fb      	strb	r3, [r7, #23]
			    for (uint8_t j = 0; j<CFG_LENGTH; j++)
 80013e8:	7dbb      	ldrb	r3, [r7, #22]
 80013ea:	3301      	adds	r3, #1
 80013ec:	75bb      	strb	r3, [r7, #22]
 80013ee:	7dbb      	ldrb	r3, [r7, #22]
 80013f0:	2b09      	cmp	r3, #9
 80013f2:	d9ca      	bls.n	800138a <vShell_cmdParse+0x6a>
			    }
			    if(u8_idx==2){aTxBuffer[0] = 1;}
 80013f4:	7ffb      	ldrb	r3, [r7, #31]
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d103      	bne.n	8001402 <vShell_cmdParse+0xe2>
 80013fa:	4b4c      	ldr	r3, [pc, #304]	; (800152c <vShell_cmdParse+0x20c>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	801a      	strh	r2, [r3, #0]
			else if (u8_idx>=2 && u8_idx<=4) {	//{WB1: {WB2: {WB3:
 8001400:	e083      	b.n	800150a <vShell_cmdParse+0x1ea>
			    else if(u8_idx==3){aTxBuffer[0] = 2;}
 8001402:	7ffb      	ldrb	r3, [r7, #31]
 8001404:	2b03      	cmp	r3, #3
 8001406:	d103      	bne.n	8001410 <vShell_cmdParse+0xf0>
 8001408:	4b48      	ldr	r3, [pc, #288]	; (800152c <vShell_cmdParse+0x20c>)
 800140a:	2202      	movs	r2, #2
 800140c:	801a      	strh	r2, [r3, #0]
			else if (u8_idx>=2 && u8_idx<=4) {	//{WB1: {WB2: {WB3:
 800140e:	e07c      	b.n	800150a <vShell_cmdParse+0x1ea>
			    else if(u8_idx==4){aTxBuffer[0] = 3;}
 8001410:	7ffb      	ldrb	r3, [r7, #31]
 8001412:	2b04      	cmp	r3, #4
 8001414:	d179      	bne.n	800150a <vShell_cmdParse+0x1ea>
 8001416:	4b45      	ldr	r3, [pc, #276]	; (800152c <vShell_cmdParse+0x20c>)
 8001418:	2203      	movs	r2, #3
 800141a:	801a      	strh	r2, [r3, #0]
			else if (u8_idx>=2 && u8_idx<=4) {	//{WB1: {WB2: {WB3:
 800141c:	e075      	b.n	800150a <vShell_cmdParse+0x1ea>
			}

			else if (u8_idx==5) {					//{RB1}
 800141e:	7ffb      	ldrb	r3, [r7, #31]
 8001420:	2b05      	cmp	r3, #5
 8001422:	d10a      	bne.n	800143a <vShell_cmdParse+0x11a>
				bitFlag |= BFLAG_I2C_WBS;
 8001424:	4b40      	ldr	r3, [pc, #256]	; (8001528 <vShell_cmdParse+0x208>)
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	b29a      	uxth	r2, r3
 800142e:	4b3e      	ldr	r3, [pc, #248]	; (8001528 <vShell_cmdParse+0x208>)
 8001430:	801a      	strh	r2, [r3, #0]
				aTxBuffer[0] = 4;
 8001432:	4b3e      	ldr	r3, [pc, #248]	; (800152c <vShell_cmdParse+0x20c>)
 8001434:	2204      	movs	r2, #4
 8001436:	801a      	strh	r2, [r3, #0]
 8001438:	e068      	b.n	800150c <vShell_cmdParse+0x1ec>
			}

			else if (u8_idx==6) {					//{RB2}
 800143a:	7ffb      	ldrb	r3, [r7, #31]
 800143c:	2b06      	cmp	r3, #6
 800143e:	d10a      	bne.n	8001456 <vShell_cmdParse+0x136>
				bitFlag |= BFLAG_I2C_WBS;
 8001440:	4b39      	ldr	r3, [pc, #228]	; (8001528 <vShell_cmdParse+0x208>)
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	b29a      	uxth	r2, r3
 800144a:	4b37      	ldr	r3, [pc, #220]	; (8001528 <vShell_cmdParse+0x208>)
 800144c:	801a      	strh	r2, [r3, #0]
				aTxBuffer[0] = 5;
 800144e:	4b37      	ldr	r3, [pc, #220]	; (800152c <vShell_cmdParse+0x20c>)
 8001450:	2205      	movs	r2, #5
 8001452:	801a      	strh	r2, [r3, #0]
 8001454:	e05a      	b.n	800150c <vShell_cmdParse+0x1ec>
			}

			else if (u8_idx==7) {					//{RB3}
 8001456:	7ffb      	ldrb	r3, [r7, #31]
 8001458:	2b07      	cmp	r3, #7
 800145a:	d10a      	bne.n	8001472 <vShell_cmdParse+0x152>
				bitFlag |= BFLAG_I2C_WBS;
 800145c:	4b32      	ldr	r3, [pc, #200]	; (8001528 <vShell_cmdParse+0x208>)
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	f043 0304 	orr.w	r3, r3, #4
 8001464:	b29a      	uxth	r2, r3
 8001466:	4b30      	ldr	r3, [pc, #192]	; (8001528 <vShell_cmdParse+0x208>)
 8001468:	801a      	strh	r2, [r3, #0]
				aTxBuffer[0] = 6;
 800146a:	4b30      	ldr	r3, [pc, #192]	; (800152c <vShell_cmdParse+0x20c>)
 800146c:	2206      	movs	r2, #6
 800146e:	801a      	strh	r2, [r3, #0]
 8001470:	e04c      	b.n	800150c <vShell_cmdParse+0x1ec>
			}

			else if (u8_idx==8) {					//{WBA:
 8001472:	7ffb      	ldrb	r3, [r7, #31]
 8001474:	2b08      	cmp	r3, #8
 8001476:	d149      	bne.n	800150c <vShell_cmdParse+0x1ec>
				bitFlag |= BFLAG_I2C_WBA;
 8001478:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <vShell_cmdParse+0x208>)
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	f043 0310 	orr.w	r3, r3, #16
 8001480:	b29a      	uxth	r2, r3
 8001482:	4b29      	ldr	r3, [pc, #164]	; (8001528 <vShell_cmdParse+0x208>)
 8001484:	801a      	strh	r2, [r3, #0]

				uint32_t num = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
				uint8_t start = 5;
 800148a:	2305      	movs	r3, #5
 800148c:	73fb      	strb	r3, [r7, #15]

				for (uint8_t j = 0; j<CFG_LENGTH*3; j++)
 800148e:	2300      	movs	r3, #0
 8001490:	73bb      	strb	r3, [r7, #14]
 8001492:	e030      	b.n	80014f6 <vShell_cmdParse+0x1d6>
				{
					if(input[start+1]<128)
 8001494:	7bfb      	ldrb	r3, [r7, #15]
 8001496:	3301      	adds	r3, #1
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	4413      	add	r3, r2
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	b25b      	sxtb	r3, r3
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	db0d      	blt.n	80014c0 <vShell_cmdParse+0x1a0>
					{
						num = input[start]+(input[start+1]*256);
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	4619      	mov	r1, r3
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
 80014b0:	3301      	adds	r3, #1
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	021b      	lsls	r3, r3, #8
 80014ba:	440b      	add	r3, r1
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	e00e      	b.n	80014de <vShell_cmdParse+0x1be>
					}
					else
					{
						num = (input[start]+(input[start+1]*256))-65536;
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	3301      	adds	r3, #1
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	021b      	lsls	r3, r3, #8
 80014d6:	440b      	add	r3, r1
 80014d8:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80014dc:	613b      	str	r3, [r7, #16]
					}
					temp[j] = num;
 80014de:	7bbb      	ldrb	r3, [r7, #14]
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	b211      	sxth	r1, r2
 80014e4:	4a12      	ldr	r2, [pc, #72]	; (8001530 <vShell_cmdParse+0x210>)
 80014e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					start+=2;
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	3302      	adds	r3, #2
 80014ee:	73fb      	strb	r3, [r7, #15]
				for (uint8_t j = 0; j<CFG_LENGTH*3; j++)
 80014f0:	7bbb      	ldrb	r3, [r7, #14]
 80014f2:	3301      	adds	r3, #1
 80014f4:	73bb      	strb	r3, [r7, #14]
 80014f6:	7bbb      	ldrb	r3, [r7, #14]
 80014f8:	2b1d      	cmp	r3, #29
 80014fa:	d9cb      	bls.n	8001494 <vShell_cmdParse+0x174>
				}
				Set_aTxBuffer(7, temp, 0, CFG_LENGTH*sizeof(temp[0]));
 80014fc:	2314      	movs	r3, #20
 80014fe:	2200      	movs	r2, #0
 8001500:	490b      	ldr	r1, [pc, #44]	; (8001530 <vShell_cmdParse+0x210>)
 8001502:	2007      	movs	r0, #7
 8001504:	f7ff f8b0 	bl	8000668 <Set_aTxBuffer>
 8001508:	e000      	b.n	800150c <vShell_cmdParse+0x1ec>
			else if (u8_idx>=2 && u8_idx<=4) {	//{WB1: {WB2: {WB3:
 800150a:	bf00      	nop
	for(uint8_t u8_idx = 0; u8_idx < CFG_HEADER_NUM; u8_idx++) {
 800150c:	7ffb      	ldrb	r3, [r7, #31]
 800150e:	3301      	adds	r3, #1
 8001510:	77fb      	strb	r3, [r7, #31]
 8001512:	7ffb      	ldrb	r3, [r7, #31]
 8001514:	2b13      	cmp	r3, #19
 8001516:	f67f af0a 	bls.w	800132e <vShell_cmdParse+0xe>
			}
		}
	}
}
 800151a:	bf00      	nop
 800151c:	bf00      	nop
 800151e:	3720      	adds	r7, #32
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	2000001c 	.word	0x2000001c
 8001528:	20000704 	.word	0x20000704
 800152c:	20000000 	.word	0x20000000
 8001530:	20000720 	.word	0x20000720

08001534 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001534:	f8df d034 	ldr.w	sp, [pc, #52]	; 800156c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001538:	480d      	ldr	r0, [pc, #52]	; (8001570 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800153a:	490e      	ldr	r1, [pc, #56]	; (8001574 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800153c:	4a0e      	ldr	r2, [pc, #56]	; (8001578 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800153e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001540:	e002      	b.n	8001548 <LoopCopyDataInit>

08001542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001546:	3304      	adds	r3, #4

08001548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800154a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800154c:	d3f9      	bcc.n	8001542 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800154e:	4a0b      	ldr	r2, [pc, #44]	; (800157c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001550:	4c0b      	ldr	r4, [pc, #44]	; (8001580 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001554:	e001      	b.n	800155a <LoopFillZerobss>

08001556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001558:	3204      	adds	r2, #4

0800155a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800155a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800155c:	d3fb      	bcc.n	8001556 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800155e:	f7ff fecd 	bl	80012fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001562:	f004 ff11 	bl	8006388 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001566:	f7ff f8c1 	bl	80006ec <main>
  bx  lr    
 800156a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800156c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001574:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8001578:	08006fb4 	.word	0x08006fb4
  ldr r2, =_sbss
 800157c:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8001580:	20000774 	.word	0x20000774

08001584 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001584:	e7fe      	b.n	8001584 <ADC_IRQHandler>
	...

08001588 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800158c:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <HAL_Init+0x40>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a0d      	ldr	r2, [pc, #52]	; (80015c8 <HAL_Init+0x40>)
 8001592:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001596:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <HAL_Init+0x40>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0a      	ldr	r2, [pc, #40]	; (80015c8 <HAL_Init+0x40>)
 800159e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <HAL_Init+0x40>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a07      	ldr	r2, [pc, #28]	; (80015c8 <HAL_Init+0x40>)
 80015aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b0:	2003      	movs	r0, #3
 80015b2:	f000 f94f 	bl	8001854 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015b6:	2000      	movs	r0, #0
 80015b8:	f000 f808 	bl	80015cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015bc:	f7ff fc9c 	bl	8000ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40023c00 	.word	0x40023c00

080015cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <HAL_InitTick+0x54>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <HAL_InitTick+0x58>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f967 	bl	80018be <HAL_SYSTICK_Config>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e00e      	b.n	8001618 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b0f      	cmp	r3, #15
 80015fe:	d80a      	bhi.n	8001616 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001600:	2200      	movs	r2, #0
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	f04f 30ff 	mov.w	r0, #4294967295
 8001608:	f000 f92f 	bl	800186a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800160c:	4a06      	ldr	r2, [pc, #24]	; (8001628 <HAL_InitTick+0x5c>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	e000      	b.n	8001618 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000018 	.word	0x20000018
 8001624:	20000084 	.word	0x20000084
 8001628:	20000080 	.word	0x20000080

0800162c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_IncTick+0x20>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	461a      	mov	r2, r3
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <HAL_IncTick+0x24>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4413      	add	r3, r2
 800163c:	4a04      	ldr	r2, [pc, #16]	; (8001650 <HAL_IncTick+0x24>)
 800163e:	6013      	str	r3, [r2, #0]
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20000084 	.word	0x20000084
 8001650:	20000760 	.word	0x20000760

08001654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return uwTick;
 8001658:	4b03      	ldr	r3, [pc, #12]	; (8001668 <HAL_GetTick+0x14>)
 800165a:	681b      	ldr	r3, [r3, #0]
}
 800165c:	4618      	mov	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	20000760 	.word	0x20000760

0800166c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001674:	f7ff ffee 	bl	8001654 <HAL_GetTick>
 8001678:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001684:	d005      	beq.n	8001692 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001686:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <HAL_Delay+0x44>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	461a      	mov	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4413      	add	r3, r2
 8001690:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001692:	bf00      	nop
 8001694:	f7ff ffde 	bl	8001654 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d8f7      	bhi.n	8001694 <HAL_Delay+0x28>
  {
  }
}
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000084 	.word	0x20000084

080016b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <__NVIC_SetPriorityGrouping+0x44>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016d0:	4013      	ands	r3, r2
 80016d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016e6:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <__NVIC_SetPriorityGrouping+0x44>)
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	60d3      	str	r3, [r2, #12]
}
 80016ec:	bf00      	nop
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001700:	4b04      	ldr	r3, [pc, #16]	; (8001714 <__NVIC_GetPriorityGrouping+0x18>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	0a1b      	lsrs	r3, r3, #8
 8001706:	f003 0307 	and.w	r3, r3, #7
}
 800170a:	4618      	mov	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	2b00      	cmp	r3, #0
 8001728:	db0b      	blt.n	8001742 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	f003 021f 	and.w	r2, r3, #31
 8001730:	4907      	ldr	r1, [pc, #28]	; (8001750 <__NVIC_EnableIRQ+0x38>)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	095b      	lsrs	r3, r3, #5
 8001738:	2001      	movs	r0, #1
 800173a:	fa00 f202 	lsl.w	r2, r0, r2
 800173e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000e100 	.word	0xe000e100

08001754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	6039      	str	r1, [r7, #0]
 800175e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001764:	2b00      	cmp	r3, #0
 8001766:	db0a      	blt.n	800177e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	b2da      	uxtb	r2, r3
 800176c:	490c      	ldr	r1, [pc, #48]	; (80017a0 <__NVIC_SetPriority+0x4c>)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	0112      	lsls	r2, r2, #4
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	440b      	add	r3, r1
 8001778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800177c:	e00a      	b.n	8001794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4908      	ldr	r1, [pc, #32]	; (80017a4 <__NVIC_SetPriority+0x50>)
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	3b04      	subs	r3, #4
 800178c:	0112      	lsls	r2, r2, #4
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	440b      	add	r3, r1
 8001792:	761a      	strb	r2, [r3, #24]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000e100 	.word	0xe000e100
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b089      	sub	sp, #36	; 0x24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f1c3 0307 	rsb	r3, r3, #7
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	bf28      	it	cs
 80017c6:	2304      	movcs	r3, #4
 80017c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3304      	adds	r3, #4
 80017ce:	2b06      	cmp	r3, #6
 80017d0:	d902      	bls.n	80017d8 <NVIC_EncodePriority+0x30>
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3b03      	subs	r3, #3
 80017d6:	e000      	b.n	80017da <NVIC_EncodePriority+0x32>
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017dc:	f04f 32ff 	mov.w	r2, #4294967295
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43da      	mvns	r2, r3
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	401a      	ands	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f0:	f04f 31ff 	mov.w	r1, #4294967295
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	fa01 f303 	lsl.w	r3, r1, r3
 80017fa:	43d9      	mvns	r1, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	4313      	orrs	r3, r2
         );
}
 8001802:	4618      	mov	r0, r3
 8001804:	3724      	adds	r7, #36	; 0x24
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
	...

08001810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3b01      	subs	r3, #1
 800181c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001820:	d301      	bcc.n	8001826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001822:	2301      	movs	r3, #1
 8001824:	e00f      	b.n	8001846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001826:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <SysTick_Config+0x40>)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3b01      	subs	r3, #1
 800182c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800182e:	210f      	movs	r1, #15
 8001830:	f04f 30ff 	mov.w	r0, #4294967295
 8001834:	f7ff ff8e 	bl	8001754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001838:	4b05      	ldr	r3, [pc, #20]	; (8001850 <SysTick_Config+0x40>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800183e:	4b04      	ldr	r3, [pc, #16]	; (8001850 <SysTick_Config+0x40>)
 8001840:	2207      	movs	r2, #7
 8001842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	e000e010 	.word	0xe000e010

08001854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff ff29 	bl	80016b4 <__NVIC_SetPriorityGrouping>
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800186a:	b580      	push	{r7, lr}
 800186c:	b086      	sub	sp, #24
 800186e:	af00      	add	r7, sp, #0
 8001870:	4603      	mov	r3, r0
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
 8001876:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800187c:	f7ff ff3e 	bl	80016fc <__NVIC_GetPriorityGrouping>
 8001880:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	68b9      	ldr	r1, [r7, #8]
 8001886:	6978      	ldr	r0, [r7, #20]
 8001888:	f7ff ff8e 	bl	80017a8 <NVIC_EncodePriority>
 800188c:	4602      	mov	r2, r0
 800188e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001892:	4611      	mov	r1, r2
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff5d 	bl	8001754 <__NVIC_SetPriority>
}
 800189a:	bf00      	nop
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	4603      	mov	r3, r0
 80018aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff31 	bl	8001718 <__NVIC_EnableIRQ>
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff ffa2 	bl	8001810 <SysTick_Config>
 80018cc:	4603      	mov	r3, r0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018e4:	f7ff feb6 	bl	8001654 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d101      	bne.n	80018f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e099      	b.n	8001a28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2202      	movs	r2, #2
 80018f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0201 	bic.w	r2, r2, #1
 8001912:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001914:	e00f      	b.n	8001936 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001916:	f7ff fe9d 	bl	8001654 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b05      	cmp	r3, #5
 8001922:	d908      	bls.n	8001936 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2220      	movs	r2, #32
 8001928:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2203      	movs	r2, #3
 800192e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e078      	b.n	8001a28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1e8      	bne.n	8001916 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	4b38      	ldr	r3, [pc, #224]	; (8001a30 <HAL_DMA_Init+0x158>)
 8001950:	4013      	ands	r3, r2
 8001952:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001962:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800196e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800197a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	4313      	orrs	r3, r2
 8001986:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198c:	2b04      	cmp	r3, #4
 800198e:	d107      	bne.n	80019a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001998:	4313      	orrs	r3, r2
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	4313      	orrs	r3, r2
 800199e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f023 0307 	bic.w	r3, r3, #7
 80019b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	4313      	orrs	r3, r2
 80019c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	d117      	bne.n	80019fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00e      	beq.n	80019fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 fb0f 	bl	8002000 <DMA_CheckFifoParam>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d008      	beq.n	80019fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2240      	movs	r2, #64	; 0x40
 80019ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019f6:	2301      	movs	r3, #1
 80019f8:	e016      	b.n	8001a28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 fac6 	bl	8001f94 <DMA_CalcBaseAndBitshift>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a10:	223f      	movs	r2, #63	; 0x3f
 8001a12:	409a      	lsls	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	f010803f 	.word	0xf010803f

08001a34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
 8001a40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d101      	bne.n	8001a5a <HAL_DMA_Start_IT+0x26>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e040      	b.n	8001adc <HAL_DMA_Start_IT+0xa8>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d12f      	bne.n	8001ace <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2202      	movs	r2, #2
 8001a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	68b9      	ldr	r1, [r7, #8]
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f000 fa58 	bl	8001f38 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8c:	223f      	movs	r2, #63	; 0x3f
 8001a8e:	409a      	lsls	r2, r3
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 0216 	orr.w	r2, r2, #22
 8001aa2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d007      	beq.n	8001abc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 0208 	orr.w	r2, r2, #8
 8001aba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 0201 	orr.w	r2, r2, #1
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	e005      	b.n	8001ada <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001af2:	f7ff fdaf 	bl	8001654 <HAL_GetTick>
 8001af6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d008      	beq.n	8001b16 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2280      	movs	r2, #128	; 0x80
 8001b08:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e052      	b.n	8001bbc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0216 	bic.w	r2, r2, #22
 8001b24:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	695a      	ldr	r2, [r3, #20]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b34:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d103      	bne.n	8001b46 <HAL_DMA_Abort+0x62>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d007      	beq.n	8001b56 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0208 	bic.w	r2, r2, #8
 8001b54:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 0201 	bic.w	r2, r2, #1
 8001b64:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b66:	e013      	b.n	8001b90 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b68:	f7ff fd74 	bl	8001654 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b05      	cmp	r3, #5
 8001b74:	d90c      	bls.n	8001b90 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2220      	movs	r2, #32
 8001b7a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2203      	movs	r2, #3
 8001b80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e015      	b.n	8001bbc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1e4      	bne.n	8001b68 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba2:	223f      	movs	r2, #63	; 0x3f
 8001ba4:	409a      	lsls	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d004      	beq.n	8001be2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2280      	movs	r2, #128	; 0x80
 8001bdc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e00c      	b.n	8001bfc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2205      	movs	r2, #5
 8001be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0201 	bic.w	r2, r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c14:	4b8e      	ldr	r3, [pc, #568]	; (8001e50 <HAL_DMA_IRQHandler+0x248>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a8e      	ldr	r2, [pc, #568]	; (8001e54 <HAL_DMA_IRQHandler+0x24c>)
 8001c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1e:	0a9b      	lsrs	r3, r3, #10
 8001c20:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c26:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c32:	2208      	movs	r2, #8
 8001c34:	409a      	lsls	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d01a      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d013      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 0204 	bic.w	r2, r2, #4
 8001c5a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c60:	2208      	movs	r2, #8
 8001c62:	409a      	lsls	r2, r3
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6c:	f043 0201 	orr.w	r2, r3, #1
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c78:	2201      	movs	r2, #1
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d012      	beq.n	8001caa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00b      	beq.n	8001caa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c96:	2201      	movs	r2, #1
 8001c98:	409a      	lsls	r2, r3
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca2:	f043 0202 	orr.w	r2, r3, #2
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cae:	2204      	movs	r2, #4
 8001cb0:	409a      	lsls	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d012      	beq.n	8001ce0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d00b      	beq.n	8001ce0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ccc:	2204      	movs	r2, #4
 8001cce:	409a      	lsls	r2, r3
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd8:	f043 0204 	orr.w	r2, r3, #4
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce4:	2210      	movs	r2, #16
 8001ce6:	409a      	lsls	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4013      	ands	r3, r2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d043      	beq.n	8001d78 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d03c      	beq.n	8001d78 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d02:	2210      	movs	r2, #16
 8001d04:	409a      	lsls	r2, r3
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d018      	beq.n	8001d4a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d108      	bne.n	8001d38 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d024      	beq.n	8001d78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	4798      	blx	r3
 8001d36:	e01f      	b.n	8001d78 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d01b      	beq.n	8001d78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	4798      	blx	r3
 8001d48:	e016      	b.n	8001d78 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d107      	bne.n	8001d68 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0208 	bic.w	r2, r2, #8
 8001d66:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7c:	2220      	movs	r2, #32
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4013      	ands	r3, r2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 808f 	beq.w	8001ea8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0310 	and.w	r3, r3, #16
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 8087 	beq.w	8001ea8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9e:	2220      	movs	r2, #32
 8001da0:	409a      	lsls	r2, r3
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b05      	cmp	r3, #5
 8001db0:	d136      	bne.n	8001e20 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 0216 	bic.w	r2, r2, #22
 8001dc0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	695a      	ldr	r2, [r3, #20]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dd0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d103      	bne.n	8001de2 <HAL_DMA_IRQHandler+0x1da>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d007      	beq.n	8001df2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 0208 	bic.w	r2, r2, #8
 8001df0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df6:	223f      	movs	r2, #63	; 0x3f
 8001df8:	409a      	lsls	r2, r3
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d07e      	beq.n	8001f14 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	4798      	blx	r3
        }
        return;
 8001e1e:	e079      	b.n	8001f14 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d01d      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d10d      	bne.n	8001e58 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d031      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	4798      	blx	r3
 8001e4c:	e02c      	b.n	8001ea8 <HAL_DMA_IRQHandler+0x2a0>
 8001e4e:	bf00      	nop
 8001e50:	20000018 	.word	0x20000018
 8001e54:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d023      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	4798      	blx	r3
 8001e68:	e01e      	b.n	8001ea8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d10f      	bne.n	8001e98 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 0210 	bic.w	r2, r2, #16
 8001e86:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d032      	beq.n	8001f16 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d022      	beq.n	8001f02 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2205      	movs	r2, #5
 8001ec0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0201 	bic.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d307      	bcc.n	8001ef0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f2      	bne.n	8001ed4 <HAL_DMA_IRQHandler+0x2cc>
 8001eee:	e000      	b.n	8001ef2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ef0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d005      	beq.n	8001f16 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	4798      	blx	r3
 8001f12:	e000      	b.n	8001f16 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f14:	bf00      	nop
    }
  }
}
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f2a:	b2db      	uxtb	r3, r3
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
 8001f44:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f54:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	2b40      	cmp	r3, #64	; 0x40
 8001f64:	d108      	bne.n	8001f78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f76:	e007      	b.n	8001f88 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68ba      	ldr	r2, [r7, #8]
 8001f7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	60da      	str	r2, [r3, #12]
}
 8001f88:	bf00      	nop
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	3b10      	subs	r3, #16
 8001fa4:	4a14      	ldr	r2, [pc, #80]	; (8001ff8 <DMA_CalcBaseAndBitshift+0x64>)
 8001fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001faa:	091b      	lsrs	r3, r3, #4
 8001fac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fae:	4a13      	ldr	r2, [pc, #76]	; (8001ffc <DMA_CalcBaseAndBitshift+0x68>)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2b03      	cmp	r3, #3
 8001fc0:	d909      	bls.n	8001fd6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fca:	f023 0303 	bic.w	r3, r3, #3
 8001fce:	1d1a      	adds	r2, r3, #4
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	659a      	str	r2, [r3, #88]	; 0x58
 8001fd4:	e007      	b.n	8001fe6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fde:	f023 0303 	bic.w	r3, r3, #3
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	aaaaaaab 	.word	0xaaaaaaab
 8001ffc:	08006f38 	.word	0x08006f38

08002000 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002008:	2300      	movs	r3, #0
 800200a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002010:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d11f      	bne.n	800205a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2b03      	cmp	r3, #3
 800201e:	d856      	bhi.n	80020ce <DMA_CheckFifoParam+0xce>
 8002020:	a201      	add	r2, pc, #4	; (adr r2, 8002028 <DMA_CheckFifoParam+0x28>)
 8002022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002026:	bf00      	nop
 8002028:	08002039 	.word	0x08002039
 800202c:	0800204b 	.word	0x0800204b
 8002030:	08002039 	.word	0x08002039
 8002034:	080020cf 	.word	0x080020cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d046      	beq.n	80020d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002048:	e043      	b.n	80020d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002052:	d140      	bne.n	80020d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002058:	e03d      	b.n	80020d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002062:	d121      	bne.n	80020a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	2b03      	cmp	r3, #3
 8002068:	d837      	bhi.n	80020da <DMA_CheckFifoParam+0xda>
 800206a:	a201      	add	r2, pc, #4	; (adr r2, 8002070 <DMA_CheckFifoParam+0x70>)
 800206c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002070:	08002081 	.word	0x08002081
 8002074:	08002087 	.word	0x08002087
 8002078:	08002081 	.word	0x08002081
 800207c:	08002099 	.word	0x08002099
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	73fb      	strb	r3, [r7, #15]
      break;
 8002084:	e030      	b.n	80020e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d025      	beq.n	80020de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002096:	e022      	b.n	80020de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020a0:	d11f      	bne.n	80020e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020a6:	e01c      	b.n	80020e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d903      	bls.n	80020b6 <DMA_CheckFifoParam+0xb6>
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d003      	beq.n	80020bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020b4:	e018      	b.n	80020e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	73fb      	strb	r3, [r7, #15]
      break;
 80020ba:	e015      	b.n	80020e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00e      	beq.n	80020e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	73fb      	strb	r3, [r7, #15]
      break;
 80020cc:	e00b      	b.n	80020e6 <DMA_CheckFifoParam+0xe6>
      break;
 80020ce:	bf00      	nop
 80020d0:	e00a      	b.n	80020e8 <DMA_CheckFifoParam+0xe8>
      break;
 80020d2:	bf00      	nop
 80020d4:	e008      	b.n	80020e8 <DMA_CheckFifoParam+0xe8>
      break;
 80020d6:	bf00      	nop
 80020d8:	e006      	b.n	80020e8 <DMA_CheckFifoParam+0xe8>
      break;
 80020da:	bf00      	nop
 80020dc:	e004      	b.n	80020e8 <DMA_CheckFifoParam+0xe8>
      break;
 80020de:	bf00      	nop
 80020e0:	e002      	b.n	80020e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80020e2:	bf00      	nop
 80020e4:	e000      	b.n	80020e8 <DMA_CheckFifoParam+0xe8>
      break;
 80020e6:	bf00      	nop
    }
  } 
  
  return status; 
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop

080020f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b089      	sub	sp, #36	; 0x24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002106:	2300      	movs	r3, #0
 8002108:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800210a:	2300      	movs	r3, #0
 800210c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
 8002112:	e165      	b.n	80023e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002114:	2201      	movs	r2, #1
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	4013      	ands	r3, r2
 8002126:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	429a      	cmp	r2, r3
 800212e:	f040 8154 	bne.w	80023da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	2b01      	cmp	r3, #1
 800213c:	d005      	beq.n	800214a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002146:	2b02      	cmp	r3, #2
 8002148:	d130      	bne.n	80021ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	2203      	movs	r2, #3
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002180:	2201      	movs	r2, #1
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	091b      	lsrs	r3, r3, #4
 8002196:	f003 0201 	and.w	r2, r3, #1
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	d017      	beq.n	80021e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	2203      	movs	r2, #3
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4313      	orrs	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d123      	bne.n	800223c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	08da      	lsrs	r2, r3, #3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3208      	adds	r2, #8
 80021fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002200:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	220f      	movs	r2, #15
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	08da      	lsrs	r2, r3, #3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3208      	adds	r2, #8
 8002236:	69b9      	ldr	r1, [r7, #24]
 8002238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	2203      	movs	r2, #3
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 0203 	and.w	r2, r3, #3
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 80ae 	beq.w	80023da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	4b5d      	ldr	r3, [pc, #372]	; (80023f8 <HAL_GPIO_Init+0x300>)
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	4a5c      	ldr	r2, [pc, #368]	; (80023f8 <HAL_GPIO_Init+0x300>)
 8002288:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800228c:	6453      	str	r3, [r2, #68]	; 0x44
 800228e:	4b5a      	ldr	r3, [pc, #360]	; (80023f8 <HAL_GPIO_Init+0x300>)
 8002290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800229a:	4a58      	ldr	r2, [pc, #352]	; (80023fc <HAL_GPIO_Init+0x304>)
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	089b      	lsrs	r3, r3, #2
 80022a0:	3302      	adds	r3, #2
 80022a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	220f      	movs	r2, #15
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43db      	mvns	r3, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4013      	ands	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a4f      	ldr	r2, [pc, #316]	; (8002400 <HAL_GPIO_Init+0x308>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d025      	beq.n	8002312 <HAL_GPIO_Init+0x21a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a4e      	ldr	r2, [pc, #312]	; (8002404 <HAL_GPIO_Init+0x30c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d01f      	beq.n	800230e <HAL_GPIO_Init+0x216>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a4d      	ldr	r2, [pc, #308]	; (8002408 <HAL_GPIO_Init+0x310>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d019      	beq.n	800230a <HAL_GPIO_Init+0x212>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a4c      	ldr	r2, [pc, #304]	; (800240c <HAL_GPIO_Init+0x314>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d013      	beq.n	8002306 <HAL_GPIO_Init+0x20e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a4b      	ldr	r2, [pc, #300]	; (8002410 <HAL_GPIO_Init+0x318>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d00d      	beq.n	8002302 <HAL_GPIO_Init+0x20a>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a4a      	ldr	r2, [pc, #296]	; (8002414 <HAL_GPIO_Init+0x31c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d007      	beq.n	80022fe <HAL_GPIO_Init+0x206>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a49      	ldr	r2, [pc, #292]	; (8002418 <HAL_GPIO_Init+0x320>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d101      	bne.n	80022fa <HAL_GPIO_Init+0x202>
 80022f6:	2306      	movs	r3, #6
 80022f8:	e00c      	b.n	8002314 <HAL_GPIO_Init+0x21c>
 80022fa:	2307      	movs	r3, #7
 80022fc:	e00a      	b.n	8002314 <HAL_GPIO_Init+0x21c>
 80022fe:	2305      	movs	r3, #5
 8002300:	e008      	b.n	8002314 <HAL_GPIO_Init+0x21c>
 8002302:	2304      	movs	r3, #4
 8002304:	e006      	b.n	8002314 <HAL_GPIO_Init+0x21c>
 8002306:	2303      	movs	r3, #3
 8002308:	e004      	b.n	8002314 <HAL_GPIO_Init+0x21c>
 800230a:	2302      	movs	r3, #2
 800230c:	e002      	b.n	8002314 <HAL_GPIO_Init+0x21c>
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <HAL_GPIO_Init+0x21c>
 8002312:	2300      	movs	r3, #0
 8002314:	69fa      	ldr	r2, [r7, #28]
 8002316:	f002 0203 	and.w	r2, r2, #3
 800231a:	0092      	lsls	r2, r2, #2
 800231c:	4093      	lsls	r3, r2
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4313      	orrs	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002324:	4935      	ldr	r1, [pc, #212]	; (80023fc <HAL_GPIO_Init+0x304>)
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	089b      	lsrs	r3, r3, #2
 800232a:	3302      	adds	r3, #2
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002332:	4b3a      	ldr	r3, [pc, #232]	; (800241c <HAL_GPIO_Init+0x324>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	43db      	mvns	r3, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4013      	ands	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002356:	4a31      	ldr	r2, [pc, #196]	; (800241c <HAL_GPIO_Init+0x324>)
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800235c:	4b2f      	ldr	r3, [pc, #188]	; (800241c <HAL_GPIO_Init+0x324>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	43db      	mvns	r3, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002380:	4a26      	ldr	r2, [pc, #152]	; (800241c <HAL_GPIO_Init+0x324>)
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002386:	4b25      	ldr	r3, [pc, #148]	; (800241c <HAL_GPIO_Init+0x324>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023aa:	4a1c      	ldr	r2, [pc, #112]	; (800241c <HAL_GPIO_Init+0x324>)
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023b0:	4b1a      	ldr	r3, [pc, #104]	; (800241c <HAL_GPIO_Init+0x324>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023d4:	4a11      	ldr	r2, [pc, #68]	; (800241c <HAL_GPIO_Init+0x324>)
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3301      	adds	r3, #1
 80023de:	61fb      	str	r3, [r7, #28]
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	2b0f      	cmp	r3, #15
 80023e4:	f67f ae96 	bls.w	8002114 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023e8:	bf00      	nop
 80023ea:	bf00      	nop
 80023ec:	3724      	adds	r7, #36	; 0x24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40013800 	.word	0x40013800
 8002400:	40020000 	.word	0x40020000
 8002404:	40020400 	.word	0x40020400
 8002408:	40020800 	.word	0x40020800
 800240c:	40020c00 	.word	0x40020c00
 8002410:	40021000 	.word	0x40021000
 8002414:	40021400 	.word	0x40021400
 8002418:	40021800 	.word	0x40021800
 800241c:	40013c00 	.word	0x40013c00

08002420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	460b      	mov	r3, r1
 800242a:	807b      	strh	r3, [r7, #2]
 800242c:	4613      	mov	r3, r2
 800242e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002430:	787b      	ldrb	r3, [r7, #1]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002436:	887a      	ldrh	r2, [r7, #2]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800243c:	e003      	b.n	8002446 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800243e:	887b      	ldrh	r3, [r7, #2]
 8002440:	041a      	lsls	r2, r3, #16
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	619a      	str	r2, [r3, #24]
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002452:	b480      	push	{r7}
 8002454:	b085      	sub	sp, #20
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	460b      	mov	r3, r1
 800245c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002464:	887a      	ldrh	r2, [r7, #2]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	4013      	ands	r3, r2
 800246a:	041a      	lsls	r2, r3, #16
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	43d9      	mvns	r1, r3
 8002470:	887b      	ldrh	r3, [r7, #2]
 8002472:	400b      	ands	r3, r1
 8002474:	431a      	orrs	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	619a      	str	r2, [r3, #24]
}
 800247a:	bf00      	nop
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e12b      	b.n	80026f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d106      	bne.n	80024b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7fe fdcc 	bl	800104c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2224      	movs	r2, #36	; 0x24
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0201 	bic.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024ec:	f002 f81c 	bl	8004528 <HAL_RCC_GetPCLK1Freq>
 80024f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	4a81      	ldr	r2, [pc, #516]	; (80026fc <HAL_I2C_Init+0x274>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d807      	bhi.n	800250c <HAL_I2C_Init+0x84>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4a80      	ldr	r2, [pc, #512]	; (8002700 <HAL_I2C_Init+0x278>)
 8002500:	4293      	cmp	r3, r2
 8002502:	bf94      	ite	ls
 8002504:	2301      	movls	r3, #1
 8002506:	2300      	movhi	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	e006      	b.n	800251a <HAL_I2C_Init+0x92>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4a7d      	ldr	r2, [pc, #500]	; (8002704 <HAL_I2C_Init+0x27c>)
 8002510:	4293      	cmp	r3, r2
 8002512:	bf94      	ite	ls
 8002514:	2301      	movls	r3, #1
 8002516:	2300      	movhi	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e0e7      	b.n	80026f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4a78      	ldr	r2, [pc, #480]	; (8002708 <HAL_I2C_Init+0x280>)
 8002526:	fba2 2303 	umull	r2, r3, r2, r3
 800252a:	0c9b      	lsrs	r3, r3, #18
 800252c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	430a      	orrs	r2, r1
 8002540:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	4a6a      	ldr	r2, [pc, #424]	; (80026fc <HAL_I2C_Init+0x274>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d802      	bhi.n	800255c <HAL_I2C_Init+0xd4>
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	3301      	adds	r3, #1
 800255a:	e009      	b.n	8002570 <HAL_I2C_Init+0xe8>
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002562:	fb02 f303 	mul.w	r3, r2, r3
 8002566:	4a69      	ldr	r2, [pc, #420]	; (800270c <HAL_I2C_Init+0x284>)
 8002568:	fba2 2303 	umull	r2, r3, r2, r3
 800256c:	099b      	lsrs	r3, r3, #6
 800256e:	3301      	adds	r3, #1
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	430b      	orrs	r3, r1
 8002576:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002582:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	495c      	ldr	r1, [pc, #368]	; (80026fc <HAL_I2C_Init+0x274>)
 800258c:	428b      	cmp	r3, r1
 800258e:	d819      	bhi.n	80025c4 <HAL_I2C_Init+0x13c>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	1e59      	subs	r1, r3, #1
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	fbb1 f3f3 	udiv	r3, r1, r3
 800259e:	1c59      	adds	r1, r3, #1
 80025a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025a4:	400b      	ands	r3, r1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00a      	beq.n	80025c0 <HAL_I2C_Init+0x138>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1e59      	subs	r1, r3, #1
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80025b8:	3301      	adds	r3, #1
 80025ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025be:	e051      	b.n	8002664 <HAL_I2C_Init+0x1dc>
 80025c0:	2304      	movs	r3, #4
 80025c2:	e04f      	b.n	8002664 <HAL_I2C_Init+0x1dc>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d111      	bne.n	80025f0 <HAL_I2C_Init+0x168>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	1e58      	subs	r0, r3, #1
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6859      	ldr	r1, [r3, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	440b      	add	r3, r1
 80025da:	fbb0 f3f3 	udiv	r3, r0, r3
 80025de:	3301      	adds	r3, #1
 80025e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	bf0c      	ite	eq
 80025e8:	2301      	moveq	r3, #1
 80025ea:	2300      	movne	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	e012      	b.n	8002616 <HAL_I2C_Init+0x18e>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	1e58      	subs	r0, r3, #1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6859      	ldr	r1, [r3, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	0099      	lsls	r1, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	fbb0 f3f3 	udiv	r3, r0, r3
 8002606:	3301      	adds	r3, #1
 8002608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800260c:	2b00      	cmp	r3, #0
 800260e:	bf0c      	ite	eq
 8002610:	2301      	moveq	r3, #1
 8002612:	2300      	movne	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <HAL_I2C_Init+0x196>
 800261a:	2301      	movs	r3, #1
 800261c:	e022      	b.n	8002664 <HAL_I2C_Init+0x1dc>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10e      	bne.n	8002644 <HAL_I2C_Init+0x1bc>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	1e58      	subs	r0, r3, #1
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6859      	ldr	r1, [r3, #4]
 800262e:	460b      	mov	r3, r1
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	440b      	add	r3, r1
 8002634:	fbb0 f3f3 	udiv	r3, r0, r3
 8002638:	3301      	adds	r3, #1
 800263a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800263e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002642:	e00f      	b.n	8002664 <HAL_I2C_Init+0x1dc>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	1e58      	subs	r0, r3, #1
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6859      	ldr	r1, [r3, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	0099      	lsls	r1, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	fbb0 f3f3 	udiv	r3, r0, r3
 800265a:	3301      	adds	r3, #1
 800265c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002660:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	6809      	ldr	r1, [r1, #0]
 8002668:	4313      	orrs	r3, r2
 800266a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69da      	ldr	r2, [r3, #28]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002692:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6911      	ldr	r1, [r2, #16]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	68d2      	ldr	r2, [r2, #12]
 800269e:	4311      	orrs	r1, r2
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6812      	ldr	r2, [r2, #0]
 80026a4:	430b      	orrs	r3, r1
 80026a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	695a      	ldr	r2, [r3, #20]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0201 	orr.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2220      	movs	r2, #32
 80026de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	000186a0 	.word	0x000186a0
 8002700:	001e847f 	.word	0x001e847f
 8002704:	003d08ff 	.word	0x003d08ff
 8002708:	431bde83 	.word	0x431bde83
 800270c:	10624dd3 	.word	0x10624dd3

08002710 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002710:	b480      	push	{r7}
 8002712:	b087      	sub	sp, #28
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	607a      	str	r2, [r7, #4]
 800271a:	461a      	mov	r2, r3
 800271c:	460b      	mov	r3, r1
 800271e:	817b      	strh	r3, [r7, #10]
 8002720:	4613      	mov	r3, r2
 8002722:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b20      	cmp	r3, #32
 8002732:	f040 8085 	bne.w	8002840 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002736:	4b46      	ldr	r3, [pc, #280]	; (8002850 <HAL_I2C_Master_Transmit_IT+0x140>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	08db      	lsrs	r3, r3, #3
 800273c:	4a45      	ldr	r2, [pc, #276]	; (8002854 <HAL_I2C_Master_Transmit_IT+0x144>)
 800273e:	fba2 2303 	umull	r2, r3, r2, r3
 8002742:	0a1a      	lsrs	r2, r3, #8
 8002744:	4613      	mov	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	009a      	lsls	r2, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	3b01      	subs	r3, #1
 8002754:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d116      	bne.n	800278a <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2220      	movs	r2, #32
 8002766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	f043 0220 	orr.w	r2, r3, #32
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e05b      	b.n	8002842 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b02      	cmp	r3, #2
 8002796:	d0db      	beq.n	8002750 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d101      	bne.n	80027a6 <HAL_I2C_Master_Transmit_IT+0x96>
 80027a2:	2302      	movs	r3, #2
 80027a4:	e04d      	b.n	8002842 <HAL_I2C_Master_Transmit_IT+0x132>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d007      	beq.n	80027cc <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0201 	orr.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2221      	movs	r2, #33	; 0x21
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2210      	movs	r2, #16
 80027e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	893a      	ldrh	r2, [r7, #8]
 80027fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002802:	b29a      	uxth	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4a13      	ldr	r2, [pc, #76]	; (8002858 <HAL_I2C_Master_Transmit_IT+0x148>)
 800280c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800280e:	897a      	ldrh	r2, [r7, #10]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002822:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800283a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800283c:	2300      	movs	r3, #0
 800283e:	e000      	b.n	8002842 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8002840:	2302      	movs	r3, #2
  }
}
 8002842:	4618      	mov	r0, r3
 8002844:	371c      	adds	r7, #28
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	20000018 	.word	0x20000018
 8002854:	14f8b589 	.word	0x14f8b589
 8002858:	ffff0000 	.word	0xffff0000

0800285c <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	607a      	str	r2, [r7, #4]
 8002866:	461a      	mov	r2, r3
 8002868:	460b      	mov	r3, r1
 800286a:	817b      	strh	r3, [r7, #10]
 800286c:	4613      	mov	r3, r2
 800286e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b20      	cmp	r3, #32
 800287e:	f040 808d 	bne.w	800299c <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002882:	4b4a      	ldr	r3, [pc, #296]	; (80029ac <HAL_I2C_Master_Receive_IT+0x150>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	08db      	lsrs	r3, r3, #3
 8002888:	4a49      	ldr	r2, [pc, #292]	; (80029b0 <HAL_I2C_Master_Receive_IT+0x154>)
 800288a:	fba2 2303 	umull	r2, r3, r2, r3
 800288e:	0a1a      	lsrs	r2, r3, #8
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	009a      	lsls	r2, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	3b01      	subs	r3, #1
 80028a0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d116      	bne.n	80028d6 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2220      	movs	r2, #32
 80028b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	f043 0220 	orr.w	r2, r3, #32
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e063      	b.n	800299e <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d0db      	beq.n	800289c <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d101      	bne.n	80028f2 <HAL_I2C_Master_Receive_IT+0x96>
 80028ee:	2302      	movs	r3, #2
 80028f0:	e055      	b.n	800299e <HAL_I2C_Master_Receive_IT+0x142>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b01      	cmp	r3, #1
 8002906:	d007      	beq.n	8002918 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0201 	orr.w	r2, r2, #1
 8002916:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002926:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2222      	movs	r2, #34	; 0x22
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2210      	movs	r2, #16
 8002934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	893a      	ldrh	r2, [r7, #8]
 8002948:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294e:	b29a      	uxth	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4a17      	ldr	r2, [pc, #92]	; (80029b4 <HAL_I2C_Master_Receive_IT+0x158>)
 8002958:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800295a:	897a      	ldrh	r2, [r7, #10]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800296e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800297e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002996:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002998:	2300      	movs	r3, #0
 800299a:	e000      	b.n	800299e <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 800299c:	2302      	movs	r3, #2
  }
}
 800299e:	4618      	mov	r0, r3
 80029a0:	371c      	adds	r7, #28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	20000018 	.word	0x20000018
 80029b0:	14f8b589 	.word	0x14f8b589
 80029b4:	ffff0000 	.word	0xffff0000

080029b8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b088      	sub	sp, #32
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029d8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
 80029e4:	2b10      	cmp	r3, #16
 80029e6:	d003      	beq.n	80029f0 <HAL_I2C_EV_IRQHandler+0x38>
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
 80029ea:	2b40      	cmp	r3, #64	; 0x40
 80029ec:	f040 80bd 	bne.w	8002b6a <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10d      	bne.n	8002a26 <HAL_I2C_EV_IRQHandler+0x6e>
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002a10:	d003      	beq.n	8002a1a <HAL_I2C_EV_IRQHandler+0x62>
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002a18:	d101      	bne.n	8002a1e <HAL_I2C_EV_IRQHandler+0x66>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e000      	b.n	8002a20 <HAL_I2C_EV_IRQHandler+0x68>
 8002a1e:	2300      	movs	r3, #0
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	f000 812e 	beq.w	8002c82 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00c      	beq.n	8002a4a <HAL_I2C_EV_IRQHandler+0x92>
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	0a5b      	lsrs	r3, r3, #9
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d006      	beq.n	8002a4a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f001 fc65 	bl	800430c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 fd72 	bl	800352c <I2C_Master_SB>
 8002a48:	e08e      	b.n	8002b68 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	08db      	lsrs	r3, r3, #3
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d009      	beq.n	8002a6a <HAL_I2C_EV_IRQHandler+0xb2>
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	0a5b      	lsrs	r3, r3, #9
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 fde8 	bl	8003638 <I2C_Master_ADD10>
 8002a68:	e07e      	b.n	8002b68 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	085b      	lsrs	r3, r3, #1
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d009      	beq.n	8002a8a <HAL_I2C_EV_IRQHandler+0xd2>
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	0a5b      	lsrs	r3, r3, #9
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 fe02 	bl	800368c <I2C_Master_ADDR>
 8002a88:	e06e      	b.n	8002b68 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	089b      	lsrs	r3, r3, #2
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d037      	beq.n	8002b06 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aa4:	f000 80ef 	beq.w	8002c86 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	09db      	lsrs	r3, r3, #7
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00f      	beq.n	8002ad4 <HAL_I2C_EV_IRQHandler+0x11c>
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	0a9b      	lsrs	r3, r3, #10
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d009      	beq.n	8002ad4 <HAL_I2C_EV_IRQHandler+0x11c>
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	089b      	lsrs	r3, r3, #2
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d103      	bne.n	8002ad4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f9ff 	bl	8002ed0 <I2C_MasterTransmit_TXE>
 8002ad2:	e049      	b.n	8002b68 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	089b      	lsrs	r3, r3, #2
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 80d2 	beq.w	8002c86 <HAL_I2C_EV_IRQHandler+0x2ce>
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	0a5b      	lsrs	r3, r3, #9
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 80cb 	beq.w	8002c86 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
 8002af2:	2b10      	cmp	r3, #16
 8002af4:	d103      	bne.n	8002afe <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 fa86 	bl	8003008 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002afc:	e0c3      	b.n	8002c86 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 faea 	bl	80030d8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b04:	e0bf      	b.n	8002c86 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b14:	f000 80b7 	beq.w	8002c86 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	099b      	lsrs	r3, r3, #6
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00f      	beq.n	8002b44 <HAL_I2C_EV_IRQHandler+0x18c>
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	0a9b      	lsrs	r3, r3, #10
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d009      	beq.n	8002b44 <HAL_I2C_EV_IRQHandler+0x18c>
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	089b      	lsrs	r3, r3, #2
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d103      	bne.n	8002b44 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 fb5a 	bl	80031f6 <I2C_MasterReceive_RXNE>
 8002b42:	e011      	b.n	8002b68 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	089b      	lsrs	r3, r3, #2
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 809a 	beq.w	8002c86 <HAL_I2C_EV_IRQHandler+0x2ce>
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	0a5b      	lsrs	r3, r3, #9
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 8093 	beq.w	8002c86 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 fbf9 	bl	8003358 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b66:	e08e      	b.n	8002c86 <HAL_I2C_EV_IRQHandler+0x2ce>
 8002b68:	e08d      	b.n	8002c86 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d004      	beq.n	8002b7c <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	61fb      	str	r3, [r7, #28]
 8002b7a:	e007      	b.n	8002b8c <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	085b      	lsrs	r3, r3, #1
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d012      	beq.n	8002bbe <HAL_I2C_EV_IRQHandler+0x206>
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	0a5b      	lsrs	r3, r3, #9
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00c      	beq.n	8002bbe <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002bb4:	69b9      	ldr	r1, [r7, #24]
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 ffb7 	bl	8003b2a <I2C_Slave_ADDR>
 8002bbc:	e066      	b.n	8002c8c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d009      	beq.n	8002bde <HAL_I2C_EV_IRQHandler+0x226>
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	0a5b      	lsrs	r3, r3, #9
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 ffec 	bl	8003bb4 <I2C_Slave_STOPF>
 8002bdc:	e056      	b.n	8002c8c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002bde:	7bbb      	ldrb	r3, [r7, #14]
 8002be0:	2b21      	cmp	r3, #33	; 0x21
 8002be2:	d002      	beq.n	8002bea <HAL_I2C_EV_IRQHandler+0x232>
 8002be4:	7bbb      	ldrb	r3, [r7, #14]
 8002be6:	2b29      	cmp	r3, #41	; 0x29
 8002be8:	d125      	bne.n	8002c36 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	09db      	lsrs	r3, r3, #7
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00f      	beq.n	8002c16 <HAL_I2C_EV_IRQHandler+0x25e>
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	0a9b      	lsrs	r3, r3, #10
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d009      	beq.n	8002c16 <HAL_I2C_EV_IRQHandler+0x25e>
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	089b      	lsrs	r3, r3, #2
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d103      	bne.n	8002c16 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 fecd 	bl	80039ae <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c14:	e039      	b.n	8002c8a <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	089b      	lsrs	r3, r3, #2
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d033      	beq.n	8002c8a <HAL_I2C_EV_IRQHandler+0x2d2>
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	0a5b      	lsrs	r3, r3, #9
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d02d      	beq.n	8002c8a <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 fefa 	bl	8003a28 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c34:	e029      	b.n	8002c8a <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	099b      	lsrs	r3, r3, #6
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00f      	beq.n	8002c62 <HAL_I2C_EV_IRQHandler+0x2aa>
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	0a9b      	lsrs	r3, r3, #10
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d009      	beq.n	8002c62 <HAL_I2C_EV_IRQHandler+0x2aa>
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	089b      	lsrs	r3, r3, #2
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d103      	bne.n	8002c62 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 ff05 	bl	8003a6a <I2C_SlaveReceive_RXNE>
 8002c60:	e014      	b.n	8002c8c <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	089b      	lsrs	r3, r3, #2
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00e      	beq.n	8002c8c <HAL_I2C_EV_IRQHandler+0x2d4>
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	0a5b      	lsrs	r3, r3, #9
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d008      	beq.n	8002c8c <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 ff33 	bl	8003ae6 <I2C_SlaveReceive_BTF>
 8002c80:	e004      	b.n	8002c8c <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8002c82:	bf00      	nop
 8002c84:	e002      	b.n	8002c8c <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c86:	bf00      	nop
 8002c88:	e000      	b.n	8002c8c <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c8a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002c8c:	3720      	adds	r7, #32
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b08a      	sub	sp, #40	; 0x28
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002caa:	2300      	movs	r3, #0
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cb4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	0a1b      	lsrs	r3, r3, #8
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00e      	beq.n	8002ce0 <HAL_I2C_ER_IRQHandler+0x4e>
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	0a1b      	lsrs	r3, r3, #8
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d008      	beq.n	8002ce0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002cde:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	0a5b      	lsrs	r3, r3, #9
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00e      	beq.n	8002d0a <HAL_I2C_ER_IRQHandler+0x78>
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	0a1b      	lsrs	r3, r3, #8
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d008      	beq.n	8002d0a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	f043 0302 	orr.w	r3, r3, #2
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002d08:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	0a9b      	lsrs	r3, r3, #10
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d03f      	beq.n	8002d96 <HAL_I2C_ER_IRQHandler+0x104>
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	0a1b      	lsrs	r3, r3, #8
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d039      	beq.n	8002d96 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002d22:	7efb      	ldrb	r3, [r7, #27]
 8002d24:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d34:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002d3c:	7ebb      	ldrb	r3, [r7, #26]
 8002d3e:	2b20      	cmp	r3, #32
 8002d40:	d112      	bne.n	8002d68 <HAL_I2C_ER_IRQHandler+0xd6>
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10f      	bne.n	8002d68 <HAL_I2C_ER_IRQHandler+0xd6>
 8002d48:	7cfb      	ldrb	r3, [r7, #19]
 8002d4a:	2b21      	cmp	r3, #33	; 0x21
 8002d4c:	d008      	beq.n	8002d60 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002d4e:	7cfb      	ldrb	r3, [r7, #19]
 8002d50:	2b29      	cmp	r3, #41	; 0x29
 8002d52:	d005      	beq.n	8002d60 <HAL_I2C_ER_IRQHandler+0xce>
 8002d54:	7cfb      	ldrb	r3, [r7, #19]
 8002d56:	2b28      	cmp	r3, #40	; 0x28
 8002d58:	d106      	bne.n	8002d68 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2b21      	cmp	r3, #33	; 0x21
 8002d5e:	d103      	bne.n	8002d68 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f001 f857 	bl	8003e14 <I2C_Slave_AF>
 8002d66:	e016      	b.n	8002d96 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d70:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	f043 0304 	orr.w	r3, r3, #4
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002d7a:	7efb      	ldrb	r3, [r7, #27]
 8002d7c:	2b10      	cmp	r3, #16
 8002d7e:	d002      	beq.n	8002d86 <HAL_I2C_ER_IRQHandler+0xf4>
 8002d80:	7efb      	ldrb	r3, [r7, #27]
 8002d82:	2b40      	cmp	r3, #64	; 0x40
 8002d84:	d107      	bne.n	8002d96 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d94:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	0adb      	lsrs	r3, r3, #11
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00e      	beq.n	8002dc0 <HAL_I2C_ER_IRQHandler+0x12e>
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	0a1b      	lsrs	r3, r3, #8
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d008      	beq.n	8002dc0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	f043 0308 	orr.w	r3, r3, #8
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002dbe:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d008      	beq.n	8002dd8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f001 f88e 	bl	8003ef4 <I2C_ITError>
  }
}
 8002dd8:	bf00      	nop
 8002dda:	3728      	adds	r7, #40	; 0x28
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	70fb      	strb	r3, [r7, #3]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eaa:	b2db      	uxtb	r3, r3
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ede:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ee6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d150      	bne.n	8002f98 <I2C_MasterTransmit_TXE+0xc8>
 8002ef6:	7bfb      	ldrb	r3, [r7, #15]
 8002ef8:	2b21      	cmp	r3, #33	; 0x21
 8002efa:	d14d      	bne.n	8002f98 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	2b08      	cmp	r3, #8
 8002f00:	d01d      	beq.n	8002f3e <I2C_MasterTransmit_TXE+0x6e>
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	2b20      	cmp	r3, #32
 8002f06:	d01a      	beq.n	8002f3e <I2C_MasterTransmit_TXE+0x6e>
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f0e:	d016      	beq.n	8002f3e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f1e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2211      	movs	r2, #17
 8002f24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2220      	movs	r2, #32
 8002f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7ff ff52 	bl	8002de0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f3c:	e060      	b.n	8003000 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f4c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f5c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b40      	cmp	r3, #64	; 0x40
 8002f76:	d107      	bne.n	8002f88 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7ff ff6d 	bl	8002e60 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f86:	e03b      	b.n	8003000 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff ff25 	bl	8002de0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f96:	e033      	b.n	8003000 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
 8002f9a:	2b21      	cmp	r3, #33	; 0x21
 8002f9c:	d005      	beq.n	8002faa <I2C_MasterTransmit_TXE+0xda>
 8002f9e:	7bbb      	ldrb	r3, [r7, #14]
 8002fa0:	2b40      	cmp	r3, #64	; 0x40
 8002fa2:	d12d      	bne.n	8003000 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
 8002fa6:	2b22      	cmp	r3, #34	; 0x22
 8002fa8:	d12a      	bne.n	8003000 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d108      	bne.n	8002fc6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fc2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002fc4:	e01c      	b.n	8003000 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b40      	cmp	r3, #64	; 0x40
 8002fd0:	d103      	bne.n	8002fda <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f880 	bl	80030d8 <I2C_MemoryTransmit_TXE_BTF>
}
 8002fd8:	e012      	b.n	8003000 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	781a      	ldrb	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	1c5a      	adds	r2, r3, #1
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002ffe:	e7ff      	b.n	8003000 <I2C_MasterTransmit_TXE+0x130>
 8003000:	bf00      	nop
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b21      	cmp	r3, #33	; 0x21
 8003020:	d156      	bne.n	80030d0 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003026:	b29b      	uxth	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	d012      	beq.n	8003052 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	781a      	ldrb	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	1c5a      	adds	r2, r3, #1
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003046:	b29b      	uxth	r3, r3
 8003048:	3b01      	subs	r3, #1
 800304a:	b29a      	uxth	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003050:	e03e      	b.n	80030d0 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2b08      	cmp	r3, #8
 8003056:	d01d      	beq.n	8003094 <I2C_MasterTransmit_BTF+0x8c>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2b20      	cmp	r3, #32
 800305c:	d01a      	beq.n	8003094 <I2C_MasterTransmit_BTF+0x8c>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003064:	d016      	beq.n	8003094 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003074:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2211      	movs	r2, #17
 800307a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2220      	movs	r2, #32
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7ff fea7 	bl	8002de0 <HAL_I2C_MasterTxCpltCallback>
}
 8003092:	e01d      	b.n	80030d0 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030a2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2220      	movs	r2, #32
 80030be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7ff fe88 	bl	8002de0 <HAL_I2C_MasterTxCpltCallback>
}
 80030d0:	bf00      	nop
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d11d      	bne.n	800312c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d10b      	bne.n	8003110 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003108:	1c9a      	adds	r2, r3, #2
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800310e:	e06e      	b.n	80031ee <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003114:	b29b      	uxth	r3, r3
 8003116:	121b      	asrs	r3, r3, #8
 8003118:	b2da      	uxtb	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	651a      	str	r2, [r3, #80]	; 0x50
}
 800312a:	e060      	b.n	80031ee <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003130:	2b01      	cmp	r3, #1
 8003132:	d10b      	bne.n	800314c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003138:	b2da      	uxtb	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	651a      	str	r2, [r3, #80]	; 0x50
}
 800314a:	e050      	b.n	80031ee <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003150:	2b02      	cmp	r3, #2
 8003152:	d14c      	bne.n	80031ee <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003154:	7bfb      	ldrb	r3, [r7, #15]
 8003156:	2b22      	cmp	r3, #34	; 0x22
 8003158:	d108      	bne.n	800316c <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003168:	601a      	str	r2, [r3, #0]
}
 800316a:	e040      	b.n	80031ee <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d015      	beq.n	80031a2 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8003176:	7bfb      	ldrb	r3, [r7, #15]
 8003178:	2b21      	cmp	r3, #33	; 0x21
 800317a:	d112      	bne.n	80031a2 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	781a      	ldrb	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003196:	b29b      	uxth	r3, r3
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80031a0:	e025      	b.n	80031ee <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d120      	bne.n	80031ee <I2C_MemoryTransmit_TXE_BTF+0x116>
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
 80031ae:	2b21      	cmp	r3, #33	; 0x21
 80031b0:	d11d      	bne.n	80031ee <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031c0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031d0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f7ff fe39 	bl	8002e60 <HAL_I2C_MemTxCpltCallback>
}
 80031ee:	bf00      	nop
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b084      	sub	sp, #16
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b22      	cmp	r3, #34	; 0x22
 8003208:	f040 80a2 	bne.w	8003350 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003210:	b29b      	uxth	r3, r3
 8003212:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2b03      	cmp	r3, #3
 8003218:	d921      	bls.n	800325e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	691a      	ldr	r2, [r3, #16]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003236:	b29b      	uxth	r3, r3
 8003238:	3b01      	subs	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003244:	b29b      	uxth	r3, r3
 8003246:	2b03      	cmp	r3, #3
 8003248:	f040 8082 	bne.w	8003350 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800325a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800325c:	e078      	b.n	8003350 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003262:	2b02      	cmp	r3, #2
 8003264:	d074      	beq.n	8003350 <I2C_MasterReceive_RXNE+0x15a>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d002      	beq.n	8003272 <I2C_MasterReceive_RXNE+0x7c>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d16e      	bne.n	8003350 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f001 f818 	bl	80042a8 <I2C_WaitOnSTOPRequestThroughIT>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d142      	bne.n	8003304 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800328c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800329c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	3b01      	subs	r3, #1
 80032be:	b29a      	uxth	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2220      	movs	r2, #32
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b40      	cmp	r3, #64	; 0x40
 80032d6:	d10a      	bne.n	80032ee <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7ff fdc4 	bl	8002e74 <HAL_I2C_MemRxCpltCallback>
}
 80032ec:	e030      	b.n	8003350 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2212      	movs	r2, #18
 80032fa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7ff fd79 	bl	8002df4 <HAL_I2C_MasterRxCpltCallback>
}
 8003302:	e025      	b.n	8003350 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003312:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	691a      	ldr	r2, [r3, #16]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	1c5a      	adds	r2, r3, #1
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003330:	b29b      	uxth	r3, r3
 8003332:	3b01      	subs	r3, #1
 8003334:	b29a      	uxth	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2220      	movs	r2, #32
 800333e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7fd fbd4 	bl	8000af8 <HAL_I2C_ErrorCallback>
}
 8003350:	bf00      	nop
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003364:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336a:	b29b      	uxth	r3, r3
 800336c:	2b04      	cmp	r3, #4
 800336e:	d11b      	bne.n	80033a8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800337e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	691a      	ldr	r2, [r3, #16]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339c:	b29b      	uxth	r3, r3
 800339e:	3b01      	subs	r3, #1
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80033a6:	e0bd      	b.n	8003524 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	d129      	bne.n	8003406 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033c0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d00a      	beq.n	80033de <I2C_MasterReceive_BTF+0x86>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d007      	beq.n	80033de <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033dc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003404:	e08e      	b.n	8003524 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340a:	b29b      	uxth	r3, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d176      	bne.n	80034fe <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d002      	beq.n	800341c <I2C_MasterReceive_BTF+0xc4>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2b10      	cmp	r3, #16
 800341a:	d108      	bne.n	800342e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	e019      	b.n	8003462 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2b04      	cmp	r3, #4
 8003432:	d002      	beq.n	800343a <I2C_MasterReceive_BTF+0xe2>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d108      	bne.n	800344c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	e00a      	b.n	8003462 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2b10      	cmp	r3, #16
 8003450:	d007      	beq.n	8003462 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003460:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347e:	b29b      	uxth	r3, r3
 8003480:	3b01      	subs	r3, #1
 8003482:	b29a      	uxth	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	691a      	ldr	r2, [r3, #16]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	1c5a      	adds	r2, r3, #1
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	3b01      	subs	r3, #1
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80034bc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2220      	movs	r2, #32
 80034c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b40      	cmp	r3, #64	; 0x40
 80034d0:	d10a      	bne.n	80034e8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f7ff fcc7 	bl	8002e74 <HAL_I2C_MemRxCpltCallback>
}
 80034e6:	e01d      	b.n	8003524 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2212      	movs	r2, #18
 80034f4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff fc7c 	bl	8002df4 <HAL_I2C_MasterRxCpltCallback>
}
 80034fc:	e012      	b.n	8003524 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	691a      	ldr	r2, [r3, #16]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	1c5a      	adds	r2, r3, #1
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351a:	b29b      	uxth	r3, r3
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003524:	bf00      	nop
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b40      	cmp	r3, #64	; 0x40
 800353e:	d117      	bne.n	8003570 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003544:	2b00      	cmp	r3, #0
 8003546:	d109      	bne.n	800355c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354c:	b2db      	uxtb	r3, r3
 800354e:	461a      	mov	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003558:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800355a:	e067      	b.n	800362c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003560:	b2db      	uxtb	r3, r3
 8003562:	f043 0301 	orr.w	r3, r3, #1
 8003566:	b2da      	uxtb	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	611a      	str	r2, [r3, #16]
}
 800356e:	e05d      	b.n	800362c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003578:	d133      	bne.n	80035e2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b21      	cmp	r3, #33	; 0x21
 8003584:	d109      	bne.n	800359a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358a:	b2db      	uxtb	r3, r3
 800358c:	461a      	mov	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003596:	611a      	str	r2, [r3, #16]
 8003598:	e008      	b.n	80035ac <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	f043 0301 	orr.w	r3, r3, #1
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d004      	beq.n	80035be <I2C_Master_SB+0x92>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d108      	bne.n	80035d0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d032      	beq.n	800362c <I2C_Master_SB+0x100>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d02d      	beq.n	800362c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035de:	605a      	str	r2, [r3, #4]
}
 80035e0:	e024      	b.n	800362c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10e      	bne.n	8003608 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	11db      	asrs	r3, r3, #7
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	f003 0306 	and.w	r3, r3, #6
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	f063 030f 	orn	r3, r3, #15
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	611a      	str	r2, [r3, #16]
}
 8003606:	e011      	b.n	800362c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800360c:	2b01      	cmp	r3, #1
 800360e:	d10d      	bne.n	800362c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003614:	b29b      	uxth	r3, r3
 8003616:	11db      	asrs	r3, r3, #7
 8003618:	b2db      	uxtb	r3, r3
 800361a:	f003 0306 	and.w	r3, r3, #6
 800361e:	b2db      	uxtb	r3, r3
 8003620:	f063 030e 	orn	r3, r3, #14
 8003624:	b2da      	uxtb	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	611a      	str	r2, [r3, #16]
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003644:	b2da      	uxtb	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003650:	2b00      	cmp	r3, #0
 8003652:	d004      	beq.n	800365e <I2C_Master_ADD10+0x26>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365a:	2b00      	cmp	r3, #0
 800365c:	d108      	bne.n	8003670 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00c      	beq.n	8003680 <I2C_Master_ADD10+0x48>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366c:	2b00      	cmp	r3, #0
 800366e:	d007      	beq.n	8003680 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800367e:	605a      	str	r2, [r3, #4]
  }
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800368c:	b480      	push	{r7}
 800368e:	b091      	sub	sp, #68	; 0x44
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800369a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b22      	cmp	r3, #34	; 0x22
 80036b4:	f040 8169 	bne.w	800398a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10f      	bne.n	80036e0 <I2C_Master_ADDR+0x54>
 80036c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80036c4:	2b40      	cmp	r3, #64	; 0x40
 80036c6:	d10b      	bne.n	80036e0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036c8:	2300      	movs	r3, #0
 80036ca:	633b      	str	r3, [r7, #48]	; 0x30
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	633b      	str	r3, [r7, #48]	; 0x30
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	633b      	str	r3, [r7, #48]	; 0x30
 80036dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036de:	e160      	b.n	80039a2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d11d      	bne.n	8003724 <I2C_Master_ADDR+0x98>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80036f0:	d118      	bne.n	8003724 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036f2:	2300      	movs	r3, #0
 80036f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003706:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003716:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	651a      	str	r2, [r3, #80]	; 0x50
 8003722:	e13e      	b.n	80039a2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003728:	b29b      	uxth	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d113      	bne.n	8003756 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800372e:	2300      	movs	r3, #0
 8003730:	62bb      	str	r3, [r7, #40]	; 0x28
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	62bb      	str	r3, [r7, #40]	; 0x28
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	62bb      	str	r3, [r7, #40]	; 0x28
 8003742:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	e115      	b.n	8003982 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375a:	b29b      	uxth	r3, r3
 800375c:	2b01      	cmp	r3, #1
 800375e:	f040 808a 	bne.w	8003876 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003764:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003768:	d137      	bne.n	80037da <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003778:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003784:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003788:	d113      	bne.n	80037b2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003798:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800379a:	2300      	movs	r3, #0
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
 80037ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b0:	e0e7      	b.n	8003982 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037b2:	2300      	movs	r3, #0
 80037b4:	623b      	str	r3, [r7, #32]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	623b      	str	r3, [r7, #32]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	623b      	str	r3, [r7, #32]
 80037c6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	e0d3      	b.n	8003982 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80037da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d02e      	beq.n	800383e <I2C_Master_ADDR+0x1b2>
 80037e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e2:	2b20      	cmp	r3, #32
 80037e4:	d02b      	beq.n	800383e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80037e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e8:	2b12      	cmp	r3, #18
 80037ea:	d102      	bne.n	80037f2 <I2C_Master_ADDR+0x166>
 80037ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d125      	bne.n	800383e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80037f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d00e      	beq.n	8003816 <I2C_Master_ADDR+0x18a>
 80037f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d00b      	beq.n	8003816 <I2C_Master_ADDR+0x18a>
 80037fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003800:	2b10      	cmp	r3, #16
 8003802:	d008      	beq.n	8003816 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	e007      	b.n	8003826 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003824:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003826:	2300      	movs	r3, #0
 8003828:	61fb      	str	r3, [r7, #28]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	61fb      	str	r3, [r7, #28]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	61fb      	str	r3, [r7, #28]
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	e0a1      	b.n	8003982 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800384c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800384e:	2300      	movs	r3, #0
 8003850:	61bb      	str	r3, [r7, #24]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	61bb      	str	r3, [r7, #24]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	61bb      	str	r3, [r7, #24]
 8003862:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	e085      	b.n	8003982 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387a:	b29b      	uxth	r3, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d14d      	bne.n	800391c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003882:	2b04      	cmp	r3, #4
 8003884:	d016      	beq.n	80038b4 <I2C_Master_ADDR+0x228>
 8003886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003888:	2b02      	cmp	r3, #2
 800388a:	d013      	beq.n	80038b4 <I2C_Master_ADDR+0x228>
 800388c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388e:	2b10      	cmp	r3, #16
 8003890:	d010      	beq.n	80038b4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038a0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	e007      	b.n	80038c4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038c2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038d2:	d117      	bne.n	8003904 <I2C_Master_ADDR+0x278>
 80038d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038da:	d00b      	beq.n	80038f4 <I2C_Master_ADDR+0x268>
 80038dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d008      	beq.n	80038f4 <I2C_Master_ADDR+0x268>
 80038e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d005      	beq.n	80038f4 <I2C_Master_ADDR+0x268>
 80038e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ea:	2b10      	cmp	r3, #16
 80038ec:	d002      	beq.n	80038f4 <I2C_Master_ADDR+0x268>
 80038ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f0:	2b20      	cmp	r3, #32
 80038f2:	d107      	bne.n	8003904 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003902:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003904:	2300      	movs	r3, #0
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	617b      	str	r3, [r7, #20]
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	e032      	b.n	8003982 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800392a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003936:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800393a:	d117      	bne.n	800396c <I2C_Master_ADDR+0x2e0>
 800393c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003942:	d00b      	beq.n	800395c <I2C_Master_ADDR+0x2d0>
 8003944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003946:	2b01      	cmp	r3, #1
 8003948:	d008      	beq.n	800395c <I2C_Master_ADDR+0x2d0>
 800394a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394c:	2b08      	cmp	r3, #8
 800394e:	d005      	beq.n	800395c <I2C_Master_ADDR+0x2d0>
 8003950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003952:	2b10      	cmp	r3, #16
 8003954:	d002      	beq.n	800395c <I2C_Master_ADDR+0x2d0>
 8003956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003958:	2b20      	cmp	r3, #32
 800395a:	d107      	bne.n	800396c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800396a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800396c:	2300      	movs	r3, #0
 800396e:	613b      	str	r3, [r7, #16]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	613b      	str	r3, [r7, #16]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	613b      	str	r3, [r7, #16]
 8003980:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003988:	e00b      	b.n	80039a2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	60fb      	str	r3, [r7, #12]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	68fb      	ldr	r3, [r7, #12]
}
 80039a0:	e7ff      	b.n	80039a2 <I2C_Master_ADDR+0x316>
 80039a2:	bf00      	nop
 80039a4:	3744      	adds	r7, #68	; 0x44
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b084      	sub	sp, #16
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039bc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d02b      	beq.n	8003a20 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	781a      	ldrb	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	1c5a      	adds	r2, r3, #1
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d114      	bne.n	8003a20 <I2C_SlaveTransmit_TXE+0x72>
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
 80039f8:	2b29      	cmp	r3, #41	; 0x29
 80039fa:	d111      	bne.n	8003a20 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a0a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2221      	movs	r2, #33	; 0x21
 8003a10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2228      	movs	r2, #40	; 0x28
 8003a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7ff f9f4 	bl	8002e08 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003a20:	bf00      	nop
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d011      	beq.n	8003a5e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	781a      	ldrb	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b084      	sub	sp, #16
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a78:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d02c      	beq.n	8003ade <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691a      	ldr	r2, [r3, #16]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d114      	bne.n	8003ade <I2C_SlaveReceive_RXNE+0x74>
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
 8003ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8003ab8:	d111      	bne.n	8003ade <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ac8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2222      	movs	r2, #34	; 0x22
 8003ace:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2228      	movs	r2, #40	; 0x28
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7ff f99f 	bl	8002e1c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003ade:	bf00      	nop
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d012      	beq.n	8003b1e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	691a      	ldr	r2, [r3, #16]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b084      	sub	sp, #16
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
 8003b32:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003b34:	2300      	movs	r3, #0
 8003b36:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b44:	2b28      	cmp	r3, #40	; 0x28
 8003b46:	d127      	bne.n	8003b98 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b56:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	089b      	lsrs	r3, r3, #2
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003b64:	2301      	movs	r3, #1
 8003b66:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	09db      	lsrs	r3, r3, #7
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d103      	bne.n	8003b7c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	81bb      	strh	r3, [r7, #12]
 8003b7a:	e002      	b.n	8003b82 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003b8a:	89ba      	ldrh	r2, [r7, #12]
 8003b8c:	7bfb      	ldrb	r3, [r7, #15]
 8003b8e:	4619      	mov	r1, r3
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7ff f94d 	bl	8002e30 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003b96:	e008      	b.n	8003baa <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f06f 0202 	mvn.w	r2, #2
 8003ba0:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003baa:	bf00      	nop
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bd2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	60bb      	str	r3, [r7, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	60bb      	str	r3, [r7, #8]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0201 	orr.w	r2, r2, #1
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c00:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c10:	d172      	bne.n	8003cf8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
 8003c14:	2b22      	cmp	r3, #34	; 0x22
 8003c16:	d002      	beq.n	8003c1e <I2C_Slave_STOPF+0x6a>
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
 8003c1a:	2b2a      	cmp	r3, #42	; 0x2a
 8003c1c:	d135      	bne.n	8003c8a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d005      	beq.n	8003c42 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	f043 0204 	orr.w	r2, r3, #4
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c50:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7fe f960 	bl	8001f1c <HAL_DMA_GetState>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d049      	beq.n	8003cf6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c66:	4a69      	ldr	r2, [pc, #420]	; (8003e0c <I2C_Slave_STOPF+0x258>)
 8003c68:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fd ffa8 	bl	8001bc4 <HAL_DMA_Abort_IT>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d03d      	beq.n	8003cf6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c84:	4610      	mov	r0, r2
 8003c86:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c88:	e035      	b.n	8003cf6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d005      	beq.n	8003cae <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	f043 0204 	orr.w	r2, r3, #4
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cbc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fe f92a 	bl	8001f1c <HAL_DMA_GetState>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d014      	beq.n	8003cf8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd2:	4a4e      	ldr	r2, [pc, #312]	; (8003e0c <I2C_Slave_STOPF+0x258>)
 8003cd4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fd ff72 	bl	8001bc4 <HAL_DMA_Abort_IT>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d008      	beq.n	8003cf8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	4798      	blx	r3
 8003cf4:	e000      	b.n	8003cf8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cf6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d03e      	beq.n	8003d80 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	d112      	bne.n	8003d36 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691a      	ldr	r2, [r3, #16]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	b2d2      	uxtb	r2, r2
 8003d1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d40:	2b40      	cmp	r3, #64	; 0x40
 8003d42:	d112      	bne.n	8003d6a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	691a      	ldr	r2, [r3, #16]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	1c5a      	adds	r2, r3, #1
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	3b01      	subs	r3, #1
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d005      	beq.n	8003d80 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d78:	f043 0204 	orr.w	r2, r3, #4
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f8b3 	bl	8003ef4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003d8e:	e039      	b.n	8003e04 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
 8003d92:	2b2a      	cmp	r3, #42	; 0x2a
 8003d94:	d109      	bne.n	8003daa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2228      	movs	r2, #40	; 0x28
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7ff f839 	bl	8002e1c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b28      	cmp	r3, #40	; 0x28
 8003db4:	d111      	bne.n	8003dda <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a15      	ldr	r2, [pc, #84]	; (8003e10 <I2C_Slave_STOPF+0x25c>)
 8003dba:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7ff f83a 	bl	8002e4c <HAL_I2C_ListenCpltCallback>
}
 8003dd8:	e014      	b.n	8003e04 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dde:	2b22      	cmp	r3, #34	; 0x22
 8003de0:	d002      	beq.n	8003de8 <I2C_Slave_STOPF+0x234>
 8003de2:	7bfb      	ldrb	r3, [r7, #15]
 8003de4:	2b22      	cmp	r3, #34	; 0x22
 8003de6:	d10d      	bne.n	8003e04 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2220      	movs	r2, #32
 8003df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7ff f80c 	bl	8002e1c <HAL_I2C_SlaveRxCpltCallback>
}
 8003e04:	bf00      	nop
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	08004159 	.word	0x08004159
 8003e10:	ffff0000 	.word	0xffff0000

08003e14 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e22:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d002      	beq.n	8003e36 <I2C_Slave_AF+0x22>
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2b20      	cmp	r3, #32
 8003e34:	d129      	bne.n	8003e8a <I2C_Slave_AF+0x76>
 8003e36:	7bfb      	ldrb	r3, [r7, #15]
 8003e38:	2b28      	cmp	r3, #40	; 0x28
 8003e3a:	d126      	bne.n	8003e8a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a2c      	ldr	r2, [pc, #176]	; (8003ef0 <I2C_Slave_AF+0xdc>)
 8003e40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e50:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e5a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e6a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7fe ffe2 	bl	8002e4c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003e88:	e02e      	b.n	8003ee8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
 8003e8c:	2b21      	cmp	r3, #33	; 0x21
 8003e8e:	d126      	bne.n	8003ede <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a17      	ldr	r2, [pc, #92]	; (8003ef0 <I2C_Slave_AF+0xdc>)
 8003e94:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2221      	movs	r2, #33	; 0x21
 8003e9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003eba:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ec4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ed4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7fe ff96 	bl	8002e08 <HAL_I2C_SlaveTxCpltCallback>
}
 8003edc:	e004      	b.n	8003ee8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ee6:	615a      	str	r2, [r3, #20]
}
 8003ee8:	bf00      	nop
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	ffff0000 	.word	0xffff0000

08003ef4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f02:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f0a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003f0c:	7bbb      	ldrb	r3, [r7, #14]
 8003f0e:	2b10      	cmp	r3, #16
 8003f10:	d002      	beq.n	8003f18 <I2C_ITError+0x24>
 8003f12:	7bbb      	ldrb	r3, [r7, #14]
 8003f14:	2b40      	cmp	r3, #64	; 0x40
 8003f16:	d10a      	bne.n	8003f2e <I2C_ITError+0x3a>
 8003f18:	7bfb      	ldrb	r3, [r7, #15]
 8003f1a:	2b22      	cmp	r3, #34	; 0x22
 8003f1c:	d107      	bne.n	8003f2e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f2c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
 8003f30:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f34:	2b28      	cmp	r3, #40	; 0x28
 8003f36:	d107      	bne.n	8003f48 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2228      	movs	r2, #40	; 0x28
 8003f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003f46:	e015      	b.n	8003f74 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f56:	d00a      	beq.n	8003f6e <I2C_ITError+0x7a>
 8003f58:	7bfb      	ldrb	r3, [r7, #15]
 8003f5a:	2b60      	cmp	r3, #96	; 0x60
 8003f5c:	d007      	beq.n	8003f6e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2220      	movs	r2, #32
 8003f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f82:	d162      	bne.n	800404a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f92:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d020      	beq.n	8003fe4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa6:	4a6a      	ldr	r2, [pc, #424]	; (8004150 <I2C_ITError+0x25c>)
 8003fa8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fd fe08 	bl	8001bc4 <HAL_DMA_Abort_IT>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 8089 	beq.w	80040ce <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0201 	bic.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003fde:	4610      	mov	r0, r2
 8003fe0:	4798      	blx	r3
 8003fe2:	e074      	b.n	80040ce <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe8:	4a59      	ldr	r2, [pc, #356]	; (8004150 <I2C_ITError+0x25c>)
 8003fea:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7fd fde7 	bl	8001bc4 <HAL_DMA_Abort_IT>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d068      	beq.n	80040ce <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004006:	2b40      	cmp	r3, #64	; 0x40
 8004008:	d10b      	bne.n	8004022 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	691a      	ldr	r2, [r3, #16]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	b2d2      	uxtb	r2, r2
 8004016:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 0201 	bic.w	r2, r2, #1
 8004030:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2220      	movs	r2, #32
 8004036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004044:	4610      	mov	r0, r2
 8004046:	4798      	blx	r3
 8004048:	e041      	b.n	80040ce <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b60      	cmp	r3, #96	; 0x60
 8004054:	d125      	bne.n	80040a2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2220      	movs	r2, #32
 800405a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406e:	2b40      	cmp	r3, #64	; 0x40
 8004070:	d10b      	bne.n	800408a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	691a      	ldr	r2, [r3, #16]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0201 	bic.w	r2, r2, #1
 8004098:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7fe fef4 	bl	8002e88 <HAL_I2C_AbortCpltCallback>
 80040a0:	e015      	b.n	80040ce <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ac:	2b40      	cmp	r3, #64	; 0x40
 80040ae:	d10b      	bne.n	80040c8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691a      	ldr	r2, [r3, #16]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7fc fd15 	bl	8000af8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10e      	bne.n	80040fc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d109      	bne.n	80040fc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d104      	bne.n	80040fc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d007      	beq.n	800410c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800410a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004112:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b04      	cmp	r3, #4
 800411e:	d113      	bne.n	8004148 <I2C_ITError+0x254>
 8004120:	7bfb      	ldrb	r3, [r7, #15]
 8004122:	2b28      	cmp	r3, #40	; 0x28
 8004124:	d110      	bne.n	8004148 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a0a      	ldr	r2, [pc, #40]	; (8004154 <I2C_ITError+0x260>)
 800412a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2220      	movs	r2, #32
 8004136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7fe fe82 	bl	8002e4c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004148:	bf00      	nop
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	08004159 	.word	0x08004159
 8004154:	ffff0000 	.word	0xffff0000

08004158 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004160:	2300      	movs	r3, #0
 8004162:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004168:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004170:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004172:	4b4b      	ldr	r3, [pc, #300]	; (80042a0 <I2C_DMAAbort+0x148>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	08db      	lsrs	r3, r3, #3
 8004178:	4a4a      	ldr	r2, [pc, #296]	; (80042a4 <I2C_DMAAbort+0x14c>)
 800417a:	fba2 2303 	umull	r2, r3, r2, r3
 800417e:	0a1a      	lsrs	r2, r3, #8
 8004180:	4613      	mov	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	00da      	lsls	r2, r3, #3
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d106      	bne.n	80041a0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	f043 0220 	orr.w	r2, r3, #32
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800419e:	e00a      	b.n	80041b6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	3b01      	subs	r3, #1
 80041a4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041b4:	d0ea      	beq.n	800418c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c2:	2200      	movs	r2, #0
 80041c4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d2:	2200      	movs	r2, #0
 80041d4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041e4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2200      	movs	r2, #0
 80041ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d003      	beq.n	80041fc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f8:	2200      	movs	r2, #0
 80041fa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004208:	2200      	movs	r2, #0
 800420a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0201 	bic.w	r2, r2, #1
 800421a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b60      	cmp	r3, #96	; 0x60
 8004226:	d10e      	bne.n	8004246 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	2200      	movs	r2, #0
 800423c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800423e:	6978      	ldr	r0, [r7, #20]
 8004240:	f7fe fe22 	bl	8002e88 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004244:	e027      	b.n	8004296 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004246:	7cfb      	ldrb	r3, [r7, #19]
 8004248:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800424c:	2b28      	cmp	r3, #40	; 0x28
 800424e:	d117      	bne.n	8004280 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0201 	orr.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800426e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	2200      	movs	r2, #0
 8004274:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2228      	movs	r2, #40	; 0x28
 800427a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800427e:	e007      	b.n	8004290 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004290:	6978      	ldr	r0, [r7, #20]
 8004292:	f7fc fc31 	bl	8000af8 <HAL_I2C_ErrorCallback>
}
 8004296:	bf00      	nop
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	20000018 	.word	0x20000018
 80042a4:	14f8b589 	.word	0x14f8b589

080042a8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80042b4:	4b13      	ldr	r3, [pc, #76]	; (8004304 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	08db      	lsrs	r3, r3, #3
 80042ba:	4a13      	ldr	r2, [pc, #76]	; (8004308 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80042bc:	fba2 2303 	umull	r2, r3, r2, r3
 80042c0:	0a1a      	lsrs	r2, r3, #8
 80042c2:	4613      	mov	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4413      	add	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	3b01      	subs	r3, #1
 80042ce:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d107      	bne.n	80042e6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	f043 0220 	orr.w	r2, r3, #32
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e008      	b.n	80042f8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042f4:	d0e9      	beq.n	80042ca <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	20000018 	.word	0x20000018
 8004308:	14f8b589 	.word	0x14f8b589

0800430c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800431c:	d103      	bne.n	8004326 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004324:	e007      	b.n	8004336 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800432e:	d102      	bne.n	8004336 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2208      	movs	r2, #8
 8004334:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
	...

08004344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e0cc      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004358:	4b68      	ldr	r3, [pc, #416]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 030f 	and.w	r3, r3, #15
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d90c      	bls.n	8004380 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004366:	4b65      	ldr	r3, [pc, #404]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800436e:	4b63      	ldr	r3, [pc, #396]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d001      	beq.n	8004380 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e0b8      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d020      	beq.n	80043ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b00      	cmp	r3, #0
 8004396:	d005      	beq.n	80043a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004398:	4b59      	ldr	r3, [pc, #356]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	4a58      	ldr	r2, [pc, #352]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 800439e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0308 	and.w	r3, r3, #8
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d005      	beq.n	80043bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043b0:	4b53      	ldr	r3, [pc, #332]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	4a52      	ldr	r2, [pc, #328]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043bc:	4b50      	ldr	r3, [pc, #320]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	494d      	ldr	r1, [pc, #308]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d044      	beq.n	8004464 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d107      	bne.n	80043f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e2:	4b47      	ldr	r3, [pc, #284]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d119      	bne.n	8004422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e07f      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d003      	beq.n	8004402 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d107      	bne.n	8004412 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004402:	4b3f      	ldr	r3, [pc, #252]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d109      	bne.n	8004422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e06f      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004412:	4b3b      	ldr	r3, [pc, #236]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e067      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004422:	4b37      	ldr	r3, [pc, #220]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f023 0203 	bic.w	r2, r3, #3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	4934      	ldr	r1, [pc, #208]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 8004430:	4313      	orrs	r3, r2
 8004432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004434:	f7fd f90e 	bl	8001654 <HAL_GetTick>
 8004438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800443a:	e00a      	b.n	8004452 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800443c:	f7fd f90a 	bl	8001654 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	f241 3288 	movw	r2, #5000	; 0x1388
 800444a:	4293      	cmp	r3, r2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e04f      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004452:	4b2b      	ldr	r3, [pc, #172]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 020c 	and.w	r2, r3, #12
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	429a      	cmp	r2, r3
 8004462:	d1eb      	bne.n	800443c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004464:	4b25      	ldr	r3, [pc, #148]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 030f 	and.w	r3, r3, #15
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	429a      	cmp	r2, r3
 8004470:	d20c      	bcs.n	800448c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004472:	4b22      	ldr	r3, [pc, #136]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800447a:	4b20      	ldr	r3, [pc, #128]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	429a      	cmp	r2, r3
 8004486:	d001      	beq.n	800448c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e032      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b00      	cmp	r3, #0
 8004496:	d008      	beq.n	80044aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004498:	4b19      	ldr	r3, [pc, #100]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	4916      	ldr	r1, [pc, #88]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0308 	and.w	r3, r3, #8
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d009      	beq.n	80044ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044b6:	4b12      	ldr	r3, [pc, #72]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	490e      	ldr	r1, [pc, #56]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044ca:	f000 f855 	bl	8004578 <HAL_RCC_GetSysClockFreq>
 80044ce:	4602      	mov	r2, r0
 80044d0:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	091b      	lsrs	r3, r3, #4
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	490a      	ldr	r1, [pc, #40]	; (8004504 <HAL_RCC_ClockConfig+0x1c0>)
 80044dc:	5ccb      	ldrb	r3, [r1, r3]
 80044de:	fa22 f303 	lsr.w	r3, r2, r3
 80044e2:	4a09      	ldr	r2, [pc, #36]	; (8004508 <HAL_RCC_ClockConfig+0x1c4>)
 80044e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044e6:	4b09      	ldr	r3, [pc, #36]	; (800450c <HAL_RCC_ClockConfig+0x1c8>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fd f86e 	bl	80015cc <HAL_InitTick>

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	40023c00 	.word	0x40023c00
 8004500:	40023800 	.word	0x40023800
 8004504:	08006f20 	.word	0x08006f20
 8004508:	20000018 	.word	0x20000018
 800450c:	20000080 	.word	0x20000080

08004510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004514:	4b03      	ldr	r3, [pc, #12]	; (8004524 <HAL_RCC_GetHCLKFreq+0x14>)
 8004516:	681b      	ldr	r3, [r3, #0]
}
 8004518:	4618      	mov	r0, r3
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	20000018 	.word	0x20000018

08004528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800452c:	f7ff fff0 	bl	8004510 <HAL_RCC_GetHCLKFreq>
 8004530:	4602      	mov	r2, r0
 8004532:	4b05      	ldr	r3, [pc, #20]	; (8004548 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	0a9b      	lsrs	r3, r3, #10
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	4903      	ldr	r1, [pc, #12]	; (800454c <HAL_RCC_GetPCLK1Freq+0x24>)
 800453e:	5ccb      	ldrb	r3, [r1, r3]
 8004540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004544:	4618      	mov	r0, r3
 8004546:	bd80      	pop	{r7, pc}
 8004548:	40023800 	.word	0x40023800
 800454c:	08006f30 	.word	0x08006f30

08004550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004554:	f7ff ffdc 	bl	8004510 <HAL_RCC_GetHCLKFreq>
 8004558:	4602      	mov	r2, r0
 800455a:	4b05      	ldr	r3, [pc, #20]	; (8004570 <HAL_RCC_GetPCLK2Freq+0x20>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	0b5b      	lsrs	r3, r3, #13
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	4903      	ldr	r1, [pc, #12]	; (8004574 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004566:	5ccb      	ldrb	r3, [r1, r3]
 8004568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800456c:	4618      	mov	r0, r3
 800456e:	bd80      	pop	{r7, pc}
 8004570:	40023800 	.word	0x40023800
 8004574:	08006f30 	.word	0x08006f30

08004578 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800457c:	b0ae      	sub	sp, #184	; 0xb8
 800457e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004586:	2300      	movs	r3, #0
 8004588:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004592:	2300      	movs	r3, #0
 8004594:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800459e:	4bcb      	ldr	r3, [pc, #812]	; (80048cc <HAL_RCC_GetSysClockFreq+0x354>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 030c 	and.w	r3, r3, #12
 80045a6:	2b0c      	cmp	r3, #12
 80045a8:	f200 8206 	bhi.w	80049b8 <HAL_RCC_GetSysClockFreq+0x440>
 80045ac:	a201      	add	r2, pc, #4	; (adr r2, 80045b4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80045ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b2:	bf00      	nop
 80045b4:	080045e9 	.word	0x080045e9
 80045b8:	080049b9 	.word	0x080049b9
 80045bc:	080049b9 	.word	0x080049b9
 80045c0:	080049b9 	.word	0x080049b9
 80045c4:	080045f1 	.word	0x080045f1
 80045c8:	080049b9 	.word	0x080049b9
 80045cc:	080049b9 	.word	0x080049b9
 80045d0:	080049b9 	.word	0x080049b9
 80045d4:	080045f9 	.word	0x080045f9
 80045d8:	080049b9 	.word	0x080049b9
 80045dc:	080049b9 	.word	0x080049b9
 80045e0:	080049b9 	.word	0x080049b9
 80045e4:	080047e9 	.word	0x080047e9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045e8:	4bb9      	ldr	r3, [pc, #740]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x358>)
 80045ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80045ee:	e1e7      	b.n	80049c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045f0:	4bb8      	ldr	r3, [pc, #736]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80045f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80045f6:	e1e3      	b.n	80049c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045f8:	4bb4      	ldr	r3, [pc, #720]	; (80048cc <HAL_RCC_GetSysClockFreq+0x354>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004600:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004604:	4bb1      	ldr	r3, [pc, #708]	; (80048cc <HAL_RCC_GetSysClockFreq+0x354>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d071      	beq.n	80046f4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004610:	4bae      	ldr	r3, [pc, #696]	; (80048cc <HAL_RCC_GetSysClockFreq+0x354>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	099b      	lsrs	r3, r3, #6
 8004616:	2200      	movs	r2, #0
 8004618:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800461c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004620:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004628:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800462c:	2300      	movs	r3, #0
 800462e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004632:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004636:	4622      	mov	r2, r4
 8004638:	462b      	mov	r3, r5
 800463a:	f04f 0000 	mov.w	r0, #0
 800463e:	f04f 0100 	mov.w	r1, #0
 8004642:	0159      	lsls	r1, r3, #5
 8004644:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004648:	0150      	lsls	r0, r2, #5
 800464a:	4602      	mov	r2, r0
 800464c:	460b      	mov	r3, r1
 800464e:	4621      	mov	r1, r4
 8004650:	1a51      	subs	r1, r2, r1
 8004652:	6439      	str	r1, [r7, #64]	; 0x40
 8004654:	4629      	mov	r1, r5
 8004656:	eb63 0301 	sbc.w	r3, r3, r1
 800465a:	647b      	str	r3, [r7, #68]	; 0x44
 800465c:	f04f 0200 	mov.w	r2, #0
 8004660:	f04f 0300 	mov.w	r3, #0
 8004664:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004668:	4649      	mov	r1, r9
 800466a:	018b      	lsls	r3, r1, #6
 800466c:	4641      	mov	r1, r8
 800466e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004672:	4641      	mov	r1, r8
 8004674:	018a      	lsls	r2, r1, #6
 8004676:	4641      	mov	r1, r8
 8004678:	1a51      	subs	r1, r2, r1
 800467a:	63b9      	str	r1, [r7, #56]	; 0x38
 800467c:	4649      	mov	r1, r9
 800467e:	eb63 0301 	sbc.w	r3, r3, r1
 8004682:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	f04f 0300 	mov.w	r3, #0
 800468c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004690:	4649      	mov	r1, r9
 8004692:	00cb      	lsls	r3, r1, #3
 8004694:	4641      	mov	r1, r8
 8004696:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800469a:	4641      	mov	r1, r8
 800469c:	00ca      	lsls	r2, r1, #3
 800469e:	4610      	mov	r0, r2
 80046a0:	4619      	mov	r1, r3
 80046a2:	4603      	mov	r3, r0
 80046a4:	4622      	mov	r2, r4
 80046a6:	189b      	adds	r3, r3, r2
 80046a8:	633b      	str	r3, [r7, #48]	; 0x30
 80046aa:	462b      	mov	r3, r5
 80046ac:	460a      	mov	r2, r1
 80046ae:	eb42 0303 	adc.w	r3, r2, r3
 80046b2:	637b      	str	r3, [r7, #52]	; 0x34
 80046b4:	f04f 0200 	mov.w	r2, #0
 80046b8:	f04f 0300 	mov.w	r3, #0
 80046bc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80046c0:	4629      	mov	r1, r5
 80046c2:	024b      	lsls	r3, r1, #9
 80046c4:	4621      	mov	r1, r4
 80046c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046ca:	4621      	mov	r1, r4
 80046cc:	024a      	lsls	r2, r1, #9
 80046ce:	4610      	mov	r0, r2
 80046d0:	4619      	mov	r1, r3
 80046d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046d6:	2200      	movs	r2, #0
 80046d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80046dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80046e0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80046e4:	f7fb fd8e 	bl	8000204 <__aeabi_uldivmod>
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	4613      	mov	r3, r2
 80046ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046f2:	e067      	b.n	80047c4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046f4:	4b75      	ldr	r3, [pc, #468]	; (80048cc <HAL_RCC_GetSysClockFreq+0x354>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	099b      	lsrs	r3, r3, #6
 80046fa:	2200      	movs	r2, #0
 80046fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004700:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004704:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800470c:	67bb      	str	r3, [r7, #120]	; 0x78
 800470e:	2300      	movs	r3, #0
 8004710:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004712:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004716:	4622      	mov	r2, r4
 8004718:	462b      	mov	r3, r5
 800471a:	f04f 0000 	mov.w	r0, #0
 800471e:	f04f 0100 	mov.w	r1, #0
 8004722:	0159      	lsls	r1, r3, #5
 8004724:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004728:	0150      	lsls	r0, r2, #5
 800472a:	4602      	mov	r2, r0
 800472c:	460b      	mov	r3, r1
 800472e:	4621      	mov	r1, r4
 8004730:	1a51      	subs	r1, r2, r1
 8004732:	62b9      	str	r1, [r7, #40]	; 0x28
 8004734:	4629      	mov	r1, r5
 8004736:	eb63 0301 	sbc.w	r3, r3, r1
 800473a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800473c:	f04f 0200 	mov.w	r2, #0
 8004740:	f04f 0300 	mov.w	r3, #0
 8004744:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004748:	4649      	mov	r1, r9
 800474a:	018b      	lsls	r3, r1, #6
 800474c:	4641      	mov	r1, r8
 800474e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004752:	4641      	mov	r1, r8
 8004754:	018a      	lsls	r2, r1, #6
 8004756:	4641      	mov	r1, r8
 8004758:	ebb2 0a01 	subs.w	sl, r2, r1
 800475c:	4649      	mov	r1, r9
 800475e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	f04f 0300 	mov.w	r3, #0
 800476a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800476e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004772:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004776:	4692      	mov	sl, r2
 8004778:	469b      	mov	fp, r3
 800477a:	4623      	mov	r3, r4
 800477c:	eb1a 0303 	adds.w	r3, sl, r3
 8004780:	623b      	str	r3, [r7, #32]
 8004782:	462b      	mov	r3, r5
 8004784:	eb4b 0303 	adc.w	r3, fp, r3
 8004788:	627b      	str	r3, [r7, #36]	; 0x24
 800478a:	f04f 0200 	mov.w	r2, #0
 800478e:	f04f 0300 	mov.w	r3, #0
 8004792:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004796:	4629      	mov	r1, r5
 8004798:	028b      	lsls	r3, r1, #10
 800479a:	4621      	mov	r1, r4
 800479c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047a0:	4621      	mov	r1, r4
 80047a2:	028a      	lsls	r2, r1, #10
 80047a4:	4610      	mov	r0, r2
 80047a6:	4619      	mov	r1, r3
 80047a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047ac:	2200      	movs	r2, #0
 80047ae:	673b      	str	r3, [r7, #112]	; 0x70
 80047b0:	677a      	str	r2, [r7, #116]	; 0x74
 80047b2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80047b6:	f7fb fd25 	bl	8000204 <__aeabi_uldivmod>
 80047ba:	4602      	mov	r2, r0
 80047bc:	460b      	mov	r3, r1
 80047be:	4613      	mov	r3, r2
 80047c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047c4:	4b41      	ldr	r3, [pc, #260]	; (80048cc <HAL_RCC_GetSysClockFreq+0x354>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	0c1b      	lsrs	r3, r3, #16
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	3301      	adds	r3, #1
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80047d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80047da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80047de:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80047e6:	e0eb      	b.n	80049c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047e8:	4b38      	ldr	r3, [pc, #224]	; (80048cc <HAL_RCC_GetSysClockFreq+0x354>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047f4:	4b35      	ldr	r3, [pc, #212]	; (80048cc <HAL_RCC_GetSysClockFreq+0x354>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d06b      	beq.n	80048d8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004800:	4b32      	ldr	r3, [pc, #200]	; (80048cc <HAL_RCC_GetSysClockFreq+0x354>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	099b      	lsrs	r3, r3, #6
 8004806:	2200      	movs	r2, #0
 8004808:	66bb      	str	r3, [r7, #104]	; 0x68
 800480a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800480c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800480e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004812:	663b      	str	r3, [r7, #96]	; 0x60
 8004814:	2300      	movs	r3, #0
 8004816:	667b      	str	r3, [r7, #100]	; 0x64
 8004818:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800481c:	4622      	mov	r2, r4
 800481e:	462b      	mov	r3, r5
 8004820:	f04f 0000 	mov.w	r0, #0
 8004824:	f04f 0100 	mov.w	r1, #0
 8004828:	0159      	lsls	r1, r3, #5
 800482a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800482e:	0150      	lsls	r0, r2, #5
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	4621      	mov	r1, r4
 8004836:	1a51      	subs	r1, r2, r1
 8004838:	61b9      	str	r1, [r7, #24]
 800483a:	4629      	mov	r1, r5
 800483c:	eb63 0301 	sbc.w	r3, r3, r1
 8004840:	61fb      	str	r3, [r7, #28]
 8004842:	f04f 0200 	mov.w	r2, #0
 8004846:	f04f 0300 	mov.w	r3, #0
 800484a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800484e:	4659      	mov	r1, fp
 8004850:	018b      	lsls	r3, r1, #6
 8004852:	4651      	mov	r1, sl
 8004854:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004858:	4651      	mov	r1, sl
 800485a:	018a      	lsls	r2, r1, #6
 800485c:	4651      	mov	r1, sl
 800485e:	ebb2 0801 	subs.w	r8, r2, r1
 8004862:	4659      	mov	r1, fp
 8004864:	eb63 0901 	sbc.w	r9, r3, r1
 8004868:	f04f 0200 	mov.w	r2, #0
 800486c:	f04f 0300 	mov.w	r3, #0
 8004870:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004874:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004878:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800487c:	4690      	mov	r8, r2
 800487e:	4699      	mov	r9, r3
 8004880:	4623      	mov	r3, r4
 8004882:	eb18 0303 	adds.w	r3, r8, r3
 8004886:	613b      	str	r3, [r7, #16]
 8004888:	462b      	mov	r3, r5
 800488a:	eb49 0303 	adc.w	r3, r9, r3
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	f04f 0200 	mov.w	r2, #0
 8004894:	f04f 0300 	mov.w	r3, #0
 8004898:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800489c:	4629      	mov	r1, r5
 800489e:	024b      	lsls	r3, r1, #9
 80048a0:	4621      	mov	r1, r4
 80048a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048a6:	4621      	mov	r1, r4
 80048a8:	024a      	lsls	r2, r1, #9
 80048aa:	4610      	mov	r0, r2
 80048ac:	4619      	mov	r1, r3
 80048ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048b2:	2200      	movs	r2, #0
 80048b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80048b6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80048b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80048bc:	f7fb fca2 	bl	8000204 <__aeabi_uldivmod>
 80048c0:	4602      	mov	r2, r0
 80048c2:	460b      	mov	r3, r1
 80048c4:	4613      	mov	r3, r2
 80048c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048ca:	e065      	b.n	8004998 <HAL_RCC_GetSysClockFreq+0x420>
 80048cc:	40023800 	.word	0x40023800
 80048d0:	00f42400 	.word	0x00f42400
 80048d4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048d8:	4b3d      	ldr	r3, [pc, #244]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x458>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	099b      	lsrs	r3, r3, #6
 80048de:	2200      	movs	r2, #0
 80048e0:	4618      	mov	r0, r3
 80048e2:	4611      	mov	r1, r2
 80048e4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048e8:	653b      	str	r3, [r7, #80]	; 0x50
 80048ea:	2300      	movs	r3, #0
 80048ec:	657b      	str	r3, [r7, #84]	; 0x54
 80048ee:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80048f2:	4642      	mov	r2, r8
 80048f4:	464b      	mov	r3, r9
 80048f6:	f04f 0000 	mov.w	r0, #0
 80048fa:	f04f 0100 	mov.w	r1, #0
 80048fe:	0159      	lsls	r1, r3, #5
 8004900:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004904:	0150      	lsls	r0, r2, #5
 8004906:	4602      	mov	r2, r0
 8004908:	460b      	mov	r3, r1
 800490a:	4641      	mov	r1, r8
 800490c:	1a51      	subs	r1, r2, r1
 800490e:	60b9      	str	r1, [r7, #8]
 8004910:	4649      	mov	r1, r9
 8004912:	eb63 0301 	sbc.w	r3, r3, r1
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	f04f 0200 	mov.w	r2, #0
 800491c:	f04f 0300 	mov.w	r3, #0
 8004920:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004924:	4659      	mov	r1, fp
 8004926:	018b      	lsls	r3, r1, #6
 8004928:	4651      	mov	r1, sl
 800492a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800492e:	4651      	mov	r1, sl
 8004930:	018a      	lsls	r2, r1, #6
 8004932:	4651      	mov	r1, sl
 8004934:	1a54      	subs	r4, r2, r1
 8004936:	4659      	mov	r1, fp
 8004938:	eb63 0501 	sbc.w	r5, r3, r1
 800493c:	f04f 0200 	mov.w	r2, #0
 8004940:	f04f 0300 	mov.w	r3, #0
 8004944:	00eb      	lsls	r3, r5, #3
 8004946:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800494a:	00e2      	lsls	r2, r4, #3
 800494c:	4614      	mov	r4, r2
 800494e:	461d      	mov	r5, r3
 8004950:	4643      	mov	r3, r8
 8004952:	18e3      	adds	r3, r4, r3
 8004954:	603b      	str	r3, [r7, #0]
 8004956:	464b      	mov	r3, r9
 8004958:	eb45 0303 	adc.w	r3, r5, r3
 800495c:	607b      	str	r3, [r7, #4]
 800495e:	f04f 0200 	mov.w	r2, #0
 8004962:	f04f 0300 	mov.w	r3, #0
 8004966:	e9d7 4500 	ldrd	r4, r5, [r7]
 800496a:	4629      	mov	r1, r5
 800496c:	028b      	lsls	r3, r1, #10
 800496e:	4621      	mov	r1, r4
 8004970:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004974:	4621      	mov	r1, r4
 8004976:	028a      	lsls	r2, r1, #10
 8004978:	4610      	mov	r0, r2
 800497a:	4619      	mov	r1, r3
 800497c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004980:	2200      	movs	r2, #0
 8004982:	64bb      	str	r3, [r7, #72]	; 0x48
 8004984:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004986:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800498a:	f7fb fc3b 	bl	8000204 <__aeabi_uldivmod>
 800498e:	4602      	mov	r2, r0
 8004990:	460b      	mov	r3, r1
 8004992:	4613      	mov	r3, r2
 8004994:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004998:	4b0d      	ldr	r3, [pc, #52]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x458>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	0f1b      	lsrs	r3, r3, #28
 800499e:	f003 0307 	and.w	r3, r3, #7
 80049a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80049a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80049ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80049b6:	e003      	b.n	80049c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049b8:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80049ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80049be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	37b8      	adds	r7, #184	; 0xb8
 80049c8:	46bd      	mov	sp, r7
 80049ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049ce:	bf00      	nop
 80049d0:	40023800 	.word	0x40023800
 80049d4:	00f42400 	.word	0x00f42400

080049d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e28d      	b.n	8004f06 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 8083 	beq.w	8004afe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80049f8:	4b94      	ldr	r3, [pc, #592]	; (8004c4c <HAL_RCC_OscConfig+0x274>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f003 030c 	and.w	r3, r3, #12
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d019      	beq.n	8004a38 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a04:	4b91      	ldr	r3, [pc, #580]	; (8004c4c <HAL_RCC_OscConfig+0x274>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	d106      	bne.n	8004a1e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a10:	4b8e      	ldr	r3, [pc, #568]	; (8004c4c <HAL_RCC_OscConfig+0x274>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a1c:	d00c      	beq.n	8004a38 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a1e:	4b8b      	ldr	r3, [pc, #556]	; (8004c4c <HAL_RCC_OscConfig+0x274>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a26:	2b0c      	cmp	r3, #12
 8004a28:	d112      	bne.n	8004a50 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a2a:	4b88      	ldr	r3, [pc, #544]	; (8004c4c <HAL_RCC_OscConfig+0x274>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a36:	d10b      	bne.n	8004a50 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a38:	4b84      	ldr	r3, [pc, #528]	; (8004c4c <HAL_RCC_OscConfig+0x274>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d05b      	beq.n	8004afc <HAL_RCC_OscConfig+0x124>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d157      	bne.n	8004afc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e25a      	b.n	8004f06 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a58:	d106      	bne.n	8004a68 <HAL_RCC_OscConfig+0x90>
 8004a5a:	4b7c      	ldr	r3, [pc, #496]	; (8004c4c <HAL_RCC_OscConfig+0x274>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a7b      	ldr	r2, [pc, #492]	; (8004c4c <HAL_RCC_OscConfig+0x274>)
 8004a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a64:	6013      	str	r3, [r2, #0]
 8004a66:	e01d      	b.n	8004aa4 <HAL_RCC_OscConfig+0xcc>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a70:	d10c      	bne.n	8004a8c <HAL_RCC_OscConfig+0xb4>
 8004a72:	4b76      	ldr	r3, [pc, #472]	; (8004c4c <HAL_RCC_OscConfig+0x274>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a75      	ldr	r2, [pc, #468]	; (8004c4c <HAL_RCC_OscConfig+0x274>)
 8004a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	4b73      	ldr	r3, [pc, #460]	; (8004c4c <HAL_RCC_OscConfig+0x274>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a72      	ldr	r2, [pc, #456]	; (8004c4c <HAL_RCC_OscConfig+0x274>)
 8004a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a88:	6013      	str	r3, [r2, #0]
 8004a8a:	e00b      	b.n	8004aa4 <HAL_RCC_OscConfig+0xcc>
 8004a8c:	4b6f      	ldr	r3, [pc, #444]	; (8004c4c <HAL_RCC_OscConfig+0x274>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a6e      	ldr	r2, [pc, #440]	; (8004c4c <HAL_RCC_OscConfig+0x274>)
 8004a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a96:	6013      	str	r3, [r2, #0]
 8004a98:	4b6c      	ldr	r3, [pc, #432]	; (8004c4c <HAL_RCC_OscConfig+0x274>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a6b      	ldr	r2, [pc, #428]	; (8004c4c <HAL_RCC_OscConfig+0x274>)
 8004a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d013      	beq.n	8004ad4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aac:	f7fc fdd2 	bl	8001654 <HAL_GetTick>
 8004ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ab4:	f7fc fdce 	bl	8001654 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b64      	cmp	r3, #100	; 0x64
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e21f      	b.n	8004f06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ac6:	4b61      	ldr	r3, [pc, #388]	; (8004c4c <HAL_RCC_OscConfig+0x274>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0f0      	beq.n	8004ab4 <HAL_RCC_OscConfig+0xdc>
 8004ad2:	e014      	b.n	8004afe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad4:	f7fc fdbe 	bl	8001654 <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ada:	e008      	b.n	8004aee <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004adc:	f7fc fdba 	bl	8001654 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b64      	cmp	r3, #100	; 0x64
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e20b      	b.n	8004f06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aee:	4b57      	ldr	r3, [pc, #348]	; (8004c4c <HAL_RCC_OscConfig+0x274>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1f0      	bne.n	8004adc <HAL_RCC_OscConfig+0x104>
 8004afa:	e000      	b.n	8004afe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004afc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d06f      	beq.n	8004bea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004b0a:	4b50      	ldr	r3, [pc, #320]	; (8004c4c <HAL_RCC_OscConfig+0x274>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 030c 	and.w	r3, r3, #12
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d017      	beq.n	8004b46 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b16:	4b4d      	ldr	r3, [pc, #308]	; (8004c4c <HAL_RCC_OscConfig+0x274>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004b1e:	2b08      	cmp	r3, #8
 8004b20:	d105      	bne.n	8004b2e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b22:	4b4a      	ldr	r3, [pc, #296]	; (8004c4c <HAL_RCC_OscConfig+0x274>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00b      	beq.n	8004b46 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b2e:	4b47      	ldr	r3, [pc, #284]	; (8004c4c <HAL_RCC_OscConfig+0x274>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b36:	2b0c      	cmp	r3, #12
 8004b38:	d11c      	bne.n	8004b74 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b3a:	4b44      	ldr	r3, [pc, #272]	; (8004c4c <HAL_RCC_OscConfig+0x274>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d116      	bne.n	8004b74 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b46:	4b41      	ldr	r3, [pc, #260]	; (8004c4c <HAL_RCC_OscConfig+0x274>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d005      	beq.n	8004b5e <HAL_RCC_OscConfig+0x186>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d001      	beq.n	8004b5e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e1d3      	b.n	8004f06 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b5e:	4b3b      	ldr	r3, [pc, #236]	; (8004c4c <HAL_RCC_OscConfig+0x274>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	4937      	ldr	r1, [pc, #220]	; (8004c4c <HAL_RCC_OscConfig+0x274>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b72:	e03a      	b.n	8004bea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d020      	beq.n	8004bbe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b7c:	4b34      	ldr	r3, [pc, #208]	; (8004c50 <HAL_RCC_OscConfig+0x278>)
 8004b7e:	2201      	movs	r2, #1
 8004b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b82:	f7fc fd67 	bl	8001654 <HAL_GetTick>
 8004b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b88:	e008      	b.n	8004b9c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b8a:	f7fc fd63 	bl	8001654 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d901      	bls.n	8004b9c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e1b4      	b.n	8004f06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b9c:	4b2b      	ldr	r3, [pc, #172]	; (8004c4c <HAL_RCC_OscConfig+0x274>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0f0      	beq.n	8004b8a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba8:	4b28      	ldr	r3, [pc, #160]	; (8004c4c <HAL_RCC_OscConfig+0x274>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	00db      	lsls	r3, r3, #3
 8004bb6:	4925      	ldr	r1, [pc, #148]	; (8004c4c <HAL_RCC_OscConfig+0x274>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	600b      	str	r3, [r1, #0]
 8004bbc:	e015      	b.n	8004bea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bbe:	4b24      	ldr	r3, [pc, #144]	; (8004c50 <HAL_RCC_OscConfig+0x278>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc4:	f7fc fd46 	bl	8001654 <HAL_GetTick>
 8004bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bcc:	f7fc fd42 	bl	8001654 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e193      	b.n	8004f06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bde:	4b1b      	ldr	r3, [pc, #108]	; (8004c4c <HAL_RCC_OscConfig+0x274>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1f0      	bne.n	8004bcc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0308 	and.w	r3, r3, #8
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d036      	beq.n	8004c64 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d016      	beq.n	8004c2c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bfe:	4b15      	ldr	r3, [pc, #84]	; (8004c54 <HAL_RCC_OscConfig+0x27c>)
 8004c00:	2201      	movs	r2, #1
 8004c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c04:	f7fc fd26 	bl	8001654 <HAL_GetTick>
 8004c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c0a:	e008      	b.n	8004c1e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c0c:	f7fc fd22 	bl	8001654 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e173      	b.n	8004f06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c1e:	4b0b      	ldr	r3, [pc, #44]	; (8004c4c <HAL_RCC_OscConfig+0x274>)
 8004c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0f0      	beq.n	8004c0c <HAL_RCC_OscConfig+0x234>
 8004c2a:	e01b      	b.n	8004c64 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c2c:	4b09      	ldr	r3, [pc, #36]	; (8004c54 <HAL_RCC_OscConfig+0x27c>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c32:	f7fc fd0f 	bl	8001654 <HAL_GetTick>
 8004c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c38:	e00e      	b.n	8004c58 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c3a:	f7fc fd0b 	bl	8001654 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d907      	bls.n	8004c58 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e15c      	b.n	8004f06 <HAL_RCC_OscConfig+0x52e>
 8004c4c:	40023800 	.word	0x40023800
 8004c50:	42470000 	.word	0x42470000
 8004c54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c58:	4b8a      	ldr	r3, [pc, #552]	; (8004e84 <HAL_RCC_OscConfig+0x4ac>)
 8004c5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1ea      	bne.n	8004c3a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 8097 	beq.w	8004da0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c72:	2300      	movs	r3, #0
 8004c74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c76:	4b83      	ldr	r3, [pc, #524]	; (8004e84 <HAL_RCC_OscConfig+0x4ac>)
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10f      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c82:	2300      	movs	r3, #0
 8004c84:	60bb      	str	r3, [r7, #8]
 8004c86:	4b7f      	ldr	r3, [pc, #508]	; (8004e84 <HAL_RCC_OscConfig+0x4ac>)
 8004c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8a:	4a7e      	ldr	r2, [pc, #504]	; (8004e84 <HAL_RCC_OscConfig+0x4ac>)
 8004c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c90:	6413      	str	r3, [r2, #64]	; 0x40
 8004c92:	4b7c      	ldr	r3, [pc, #496]	; (8004e84 <HAL_RCC_OscConfig+0x4ac>)
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c9a:	60bb      	str	r3, [r7, #8]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca2:	4b79      	ldr	r3, [pc, #484]	; (8004e88 <HAL_RCC_OscConfig+0x4b0>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d118      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cae:	4b76      	ldr	r3, [pc, #472]	; (8004e88 <HAL_RCC_OscConfig+0x4b0>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a75      	ldr	r2, [pc, #468]	; (8004e88 <HAL_RCC_OscConfig+0x4b0>)
 8004cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cba:	f7fc fccb 	bl	8001654 <HAL_GetTick>
 8004cbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cc2:	f7fc fcc7 	bl	8001654 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e118      	b.n	8004f06 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd4:	4b6c      	ldr	r3, [pc, #432]	; (8004e88 <HAL_RCC_OscConfig+0x4b0>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0f0      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d106      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x31e>
 8004ce8:	4b66      	ldr	r3, [pc, #408]	; (8004e84 <HAL_RCC_OscConfig+0x4ac>)
 8004cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cec:	4a65      	ldr	r2, [pc, #404]	; (8004e84 <HAL_RCC_OscConfig+0x4ac>)
 8004cee:	f043 0301 	orr.w	r3, r3, #1
 8004cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8004cf4:	e01c      	b.n	8004d30 <HAL_RCC_OscConfig+0x358>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	2b05      	cmp	r3, #5
 8004cfc:	d10c      	bne.n	8004d18 <HAL_RCC_OscConfig+0x340>
 8004cfe:	4b61      	ldr	r3, [pc, #388]	; (8004e84 <HAL_RCC_OscConfig+0x4ac>)
 8004d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d02:	4a60      	ldr	r2, [pc, #384]	; (8004e84 <HAL_RCC_OscConfig+0x4ac>)
 8004d04:	f043 0304 	orr.w	r3, r3, #4
 8004d08:	6713      	str	r3, [r2, #112]	; 0x70
 8004d0a:	4b5e      	ldr	r3, [pc, #376]	; (8004e84 <HAL_RCC_OscConfig+0x4ac>)
 8004d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0e:	4a5d      	ldr	r2, [pc, #372]	; (8004e84 <HAL_RCC_OscConfig+0x4ac>)
 8004d10:	f043 0301 	orr.w	r3, r3, #1
 8004d14:	6713      	str	r3, [r2, #112]	; 0x70
 8004d16:	e00b      	b.n	8004d30 <HAL_RCC_OscConfig+0x358>
 8004d18:	4b5a      	ldr	r3, [pc, #360]	; (8004e84 <HAL_RCC_OscConfig+0x4ac>)
 8004d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1c:	4a59      	ldr	r2, [pc, #356]	; (8004e84 <HAL_RCC_OscConfig+0x4ac>)
 8004d1e:	f023 0301 	bic.w	r3, r3, #1
 8004d22:	6713      	str	r3, [r2, #112]	; 0x70
 8004d24:	4b57      	ldr	r3, [pc, #348]	; (8004e84 <HAL_RCC_OscConfig+0x4ac>)
 8004d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d28:	4a56      	ldr	r2, [pc, #344]	; (8004e84 <HAL_RCC_OscConfig+0x4ac>)
 8004d2a:	f023 0304 	bic.w	r3, r3, #4
 8004d2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d015      	beq.n	8004d64 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d38:	f7fc fc8c 	bl	8001654 <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d3e:	e00a      	b.n	8004d56 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d40:	f7fc fc88 	bl	8001654 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e0d7      	b.n	8004f06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d56:	4b4b      	ldr	r3, [pc, #300]	; (8004e84 <HAL_RCC_OscConfig+0x4ac>)
 8004d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0ee      	beq.n	8004d40 <HAL_RCC_OscConfig+0x368>
 8004d62:	e014      	b.n	8004d8e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d64:	f7fc fc76 	bl	8001654 <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d6a:	e00a      	b.n	8004d82 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d6c:	f7fc fc72 	bl	8001654 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e0c1      	b.n	8004f06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d82:	4b40      	ldr	r3, [pc, #256]	; (8004e84 <HAL_RCC_OscConfig+0x4ac>)
 8004d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1ee      	bne.n	8004d6c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d8e:	7dfb      	ldrb	r3, [r7, #23]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d105      	bne.n	8004da0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d94:	4b3b      	ldr	r3, [pc, #236]	; (8004e84 <HAL_RCC_OscConfig+0x4ac>)
 8004d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d98:	4a3a      	ldr	r2, [pc, #232]	; (8004e84 <HAL_RCC_OscConfig+0x4ac>)
 8004d9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 80ad 	beq.w	8004f04 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004daa:	4b36      	ldr	r3, [pc, #216]	; (8004e84 <HAL_RCC_OscConfig+0x4ac>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f003 030c 	and.w	r3, r3, #12
 8004db2:	2b08      	cmp	r3, #8
 8004db4:	d060      	beq.n	8004e78 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d145      	bne.n	8004e4a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dbe:	4b33      	ldr	r3, [pc, #204]	; (8004e8c <HAL_RCC_OscConfig+0x4b4>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc4:	f7fc fc46 	bl	8001654 <HAL_GetTick>
 8004dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dca:	e008      	b.n	8004dde <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dcc:	f7fc fc42 	bl	8001654 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e093      	b.n	8004f06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dde:	4b29      	ldr	r3, [pc, #164]	; (8004e84 <HAL_RCC_OscConfig+0x4ac>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1f0      	bne.n	8004dcc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	69da      	ldr	r2, [r3, #28]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	019b      	lsls	r3, r3, #6
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e00:	085b      	lsrs	r3, r3, #1
 8004e02:	3b01      	subs	r3, #1
 8004e04:	041b      	lsls	r3, r3, #16
 8004e06:	431a      	orrs	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0c:	061b      	lsls	r3, r3, #24
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e14:	071b      	lsls	r3, r3, #28
 8004e16:	491b      	ldr	r1, [pc, #108]	; (8004e84 <HAL_RCC_OscConfig+0x4ac>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e1c:	4b1b      	ldr	r3, [pc, #108]	; (8004e8c <HAL_RCC_OscConfig+0x4b4>)
 8004e1e:	2201      	movs	r2, #1
 8004e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e22:	f7fc fc17 	bl	8001654 <HAL_GetTick>
 8004e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e28:	e008      	b.n	8004e3c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e2a:	f7fc fc13 	bl	8001654 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e064      	b.n	8004f06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e3c:	4b11      	ldr	r3, [pc, #68]	; (8004e84 <HAL_RCC_OscConfig+0x4ac>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0f0      	beq.n	8004e2a <HAL_RCC_OscConfig+0x452>
 8004e48:	e05c      	b.n	8004f04 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e4a:	4b10      	ldr	r3, [pc, #64]	; (8004e8c <HAL_RCC_OscConfig+0x4b4>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e50:	f7fc fc00 	bl	8001654 <HAL_GetTick>
 8004e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e58:	f7fc fbfc 	bl	8001654 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e04d      	b.n	8004f06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e6a:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <HAL_RCC_OscConfig+0x4ac>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1f0      	bne.n	8004e58 <HAL_RCC_OscConfig+0x480>
 8004e76:	e045      	b.n	8004f04 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d107      	bne.n	8004e90 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e040      	b.n	8004f06 <HAL_RCC_OscConfig+0x52e>
 8004e84:	40023800 	.word	0x40023800
 8004e88:	40007000 	.word	0x40007000
 8004e8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e90:	4b1f      	ldr	r3, [pc, #124]	; (8004f10 <HAL_RCC_OscConfig+0x538>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d030      	beq.n	8004f00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d129      	bne.n	8004f00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d122      	bne.n	8004f00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ec6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d119      	bne.n	8004f00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed6:	085b      	lsrs	r3, r3, #1
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d10f      	bne.n	8004f00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d107      	bne.n	8004f00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d001      	beq.n	8004f04 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e000      	b.n	8004f06 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3718      	adds	r7, #24
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	40023800 	.word	0x40023800

08004f14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e03f      	b.n	8004fa6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d106      	bne.n	8004f40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7fc f804 	bl	8000f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2224      	movs	r2, #36	; 0x24
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 ff9b 	bl	8005e94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	691a      	ldr	r2, [r3, #16]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	695a      	ldr	r2, [r3, #20]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b08a      	sub	sp, #40	; 0x28
 8004fb2:	af02      	add	r7, sp, #8
 8004fb4:	60f8      	str	r0, [r7, #12]
 8004fb6:	60b9      	str	r1, [r7, #8]
 8004fb8:	603b      	str	r3, [r7, #0]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b20      	cmp	r3, #32
 8004fcc:	d17c      	bne.n	80050c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <HAL_UART_Transmit+0x2c>
 8004fd4:	88fb      	ldrh	r3, [r7, #6]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e075      	b.n	80050ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d101      	bne.n	8004fec <HAL_UART_Transmit+0x3e>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	e06e      	b.n	80050ca <HAL_UART_Transmit+0x11c>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2221      	movs	r2, #33	; 0x21
 8004ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005002:	f7fc fb27 	bl	8001654 <HAL_GetTick>
 8005006:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	88fa      	ldrh	r2, [r7, #6]
 800500c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	88fa      	ldrh	r2, [r7, #6]
 8005012:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800501c:	d108      	bne.n	8005030 <HAL_UART_Transmit+0x82>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d104      	bne.n	8005030 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005026:	2300      	movs	r3, #0
 8005028:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	61bb      	str	r3, [r7, #24]
 800502e:	e003      	b.n	8005038 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005034:	2300      	movs	r3, #0
 8005036:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005040:	e02a      	b.n	8005098 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	2200      	movs	r2, #0
 800504a:	2180      	movs	r1, #128	; 0x80
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 fc53 	bl	80058f8 <UART_WaitOnFlagUntilTimeout>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e036      	b.n	80050ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10b      	bne.n	800507a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005070:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	3302      	adds	r3, #2
 8005076:	61bb      	str	r3, [r7, #24]
 8005078:	e007      	b.n	800508a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	781a      	ldrb	r2, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	3301      	adds	r3, #1
 8005088:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800508e:	b29b      	uxth	r3, r3
 8005090:	3b01      	subs	r3, #1
 8005092:	b29a      	uxth	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800509c:	b29b      	uxth	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1cf      	bne.n	8005042 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2200      	movs	r2, #0
 80050aa:	2140      	movs	r1, #64	; 0x40
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 fc23 	bl	80058f8 <UART_WaitOnFlagUntilTimeout>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d001      	beq.n	80050bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e006      	b.n	80050ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2220      	movs	r2, #32
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80050c4:	2300      	movs	r3, #0
 80050c6:	e000      	b.n	80050ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80050c8:	2302      	movs	r3, #2
  }
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3720      	adds	r7, #32
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b08c      	sub	sp, #48	; 0x30
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	60f8      	str	r0, [r7, #12]
 80050da:	60b9      	str	r1, [r7, #8]
 80050dc:	4613      	mov	r3, r2
 80050de:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b20      	cmp	r3, #32
 80050ea:	d152      	bne.n	8005192 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d002      	beq.n	80050f8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80050f2:	88fb      	ldrh	r3, [r7, #6]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e04b      	b.n	8005194 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005102:	2b01      	cmp	r3, #1
 8005104:	d101      	bne.n	800510a <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8005106:	2302      	movs	r3, #2
 8005108:	e044      	b.n	8005194 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2201      	movs	r2, #1
 8005116:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005118:	88fb      	ldrh	r3, [r7, #6]
 800511a:	461a      	mov	r2, r3
 800511c:	68b9      	ldr	r1, [r7, #8]
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 fc58 	bl	80059d4 <UART_Start_Receive_DMA>
 8005124:	4603      	mov	r3, r0
 8005126:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800512a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800512e:	2b00      	cmp	r3, #0
 8005130:	d12c      	bne.n	800518c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005136:	2b01      	cmp	r3, #1
 8005138:	d125      	bne.n	8005186 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800513a:	2300      	movs	r3, #0
 800513c:	613b      	str	r3, [r7, #16]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	613b      	str	r3, [r7, #16]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	613b      	str	r3, [r7, #16]
 800514e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	330c      	adds	r3, #12
 8005156:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	e853 3f00 	ldrex	r3, [r3]
 800515e:	617b      	str	r3, [r7, #20]
   return(result);
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f043 0310 	orr.w	r3, r3, #16
 8005166:	62bb      	str	r3, [r7, #40]	; 0x28
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	330c      	adds	r3, #12
 800516e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005170:	627a      	str	r2, [r7, #36]	; 0x24
 8005172:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005174:	6a39      	ldr	r1, [r7, #32]
 8005176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005178:	e841 2300 	strex	r3, r2, [r1]
 800517c:	61fb      	str	r3, [r7, #28]
   return(result);
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1e5      	bne.n	8005150 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8005184:	e002      	b.n	800518c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800518c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005190:	e000      	b.n	8005194 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8005192:	2302      	movs	r3, #2
  }
}
 8005194:	4618      	mov	r0, r3
 8005196:	3730      	adds	r7, #48	; 0x30
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b0ba      	sub	sp, #232	; 0xe8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80051c2:	2300      	movs	r3, #0
 80051c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80051ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051d2:	f003 030f 	and.w	r3, r3, #15
 80051d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80051da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10f      	bne.n	8005202 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051e6:	f003 0320 	and.w	r3, r3, #32
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d009      	beq.n	8005202 <HAL_UART_IRQHandler+0x66>
 80051ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051f2:	f003 0320 	and.w	r3, r3, #32
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 fd8f 	bl	8005d1e <UART_Receive_IT>
      return;
 8005200:	e256      	b.n	80056b0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005202:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 80de 	beq.w	80053c8 <HAL_UART_IRQHandler+0x22c>
 800520c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	2b00      	cmp	r3, #0
 8005216:	d106      	bne.n	8005226 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800521c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 80d1 	beq.w	80053c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00b      	beq.n	800524a <HAL_UART_IRQHandler+0xae>
 8005232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800523a:	2b00      	cmp	r3, #0
 800523c:	d005      	beq.n	800524a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005242:	f043 0201 	orr.w	r2, r3, #1
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800524a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800524e:	f003 0304 	and.w	r3, r3, #4
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00b      	beq.n	800526e <HAL_UART_IRQHandler+0xd2>
 8005256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d005      	beq.n	800526e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	f043 0202 	orr.w	r2, r3, #2
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800526e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00b      	beq.n	8005292 <HAL_UART_IRQHandler+0xf6>
 800527a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b00      	cmp	r3, #0
 8005284:	d005      	beq.n	8005292 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	f043 0204 	orr.w	r2, r3, #4
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005296:	f003 0308 	and.w	r3, r3, #8
 800529a:	2b00      	cmp	r3, #0
 800529c:	d011      	beq.n	80052c2 <HAL_UART_IRQHandler+0x126>
 800529e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052a2:	f003 0320 	and.w	r3, r3, #32
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d105      	bne.n	80052b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80052aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d005      	beq.n	80052c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ba:	f043 0208 	orr.w	r2, r3, #8
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	f000 81ed 	beq.w	80056a6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052d0:	f003 0320 	and.w	r3, r3, #32
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d008      	beq.n	80052ea <HAL_UART_IRQHandler+0x14e>
 80052d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052dc:	f003 0320 	and.w	r3, r3, #32
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d002      	beq.n	80052ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 fd1a 	bl	8005d1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	695b      	ldr	r3, [r3, #20]
 80052f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f4:	2b40      	cmp	r3, #64	; 0x40
 80052f6:	bf0c      	ite	eq
 80052f8:	2301      	moveq	r3, #1
 80052fa:	2300      	movne	r3, #0
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	f003 0308 	and.w	r3, r3, #8
 800530a:	2b00      	cmp	r3, #0
 800530c:	d103      	bne.n	8005316 <HAL_UART_IRQHandler+0x17a>
 800530e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005312:	2b00      	cmp	r3, #0
 8005314:	d04f      	beq.n	80053b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fc22 	bl	8005b60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005326:	2b40      	cmp	r3, #64	; 0x40
 8005328:	d141      	bne.n	80053ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3314      	adds	r3, #20
 8005330:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005334:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005338:	e853 3f00 	ldrex	r3, [r3]
 800533c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005340:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005348:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	3314      	adds	r3, #20
 8005352:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005356:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800535a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005362:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005366:	e841 2300 	strex	r3, r2, [r1]
 800536a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800536e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1d9      	bne.n	800532a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537a:	2b00      	cmp	r3, #0
 800537c:	d013      	beq.n	80053a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005382:	4a7d      	ldr	r2, [pc, #500]	; (8005578 <HAL_UART_IRQHandler+0x3dc>)
 8005384:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538a:	4618      	mov	r0, r3
 800538c:	f7fc fc1a 	bl	8001bc4 <HAL_DMA_Abort_IT>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d016      	beq.n	80053c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053a0:	4610      	mov	r0, r2
 80053a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a4:	e00e      	b.n	80053c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f9a4 	bl	80056f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ac:	e00a      	b.n	80053c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f9a0 	bl	80056f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053b4:	e006      	b.n	80053c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f99c 	bl	80056f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80053c2:	e170      	b.n	80056a6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053c4:	bf00      	nop
    return;
 80053c6:	e16e      	b.n	80056a6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	f040 814a 	bne.w	8005666 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80053d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d6:	f003 0310 	and.w	r3, r3, #16
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f000 8143 	beq.w	8005666 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80053e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053e4:	f003 0310 	and.w	r3, r3, #16
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 813c 	beq.w	8005666 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053ee:	2300      	movs	r3, #0
 80053f0:	60bb      	str	r3, [r7, #8]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	60bb      	str	r3, [r7, #8]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	60bb      	str	r3, [r7, #8]
 8005402:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540e:	2b40      	cmp	r3, #64	; 0x40
 8005410:	f040 80b4 	bne.w	800557c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005420:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 8140 	beq.w	80056aa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800542e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005432:	429a      	cmp	r2, r3
 8005434:	f080 8139 	bcs.w	80056aa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800543e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800544a:	f000 8088 	beq.w	800555e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	330c      	adds	r3, #12
 8005454:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005458:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800545c:	e853 3f00 	ldrex	r3, [r3]
 8005460:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005464:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800546c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	330c      	adds	r3, #12
 8005476:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800547a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800547e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005482:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005486:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800548a:	e841 2300 	strex	r3, r2, [r1]
 800548e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005492:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1d9      	bne.n	800544e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	3314      	adds	r3, #20
 80054a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054a4:	e853 3f00 	ldrex	r3, [r3]
 80054a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80054aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054ac:	f023 0301 	bic.w	r3, r3, #1
 80054b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	3314      	adds	r3, #20
 80054ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80054be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80054c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80054c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054ca:	e841 2300 	strex	r3, r2, [r1]
 80054ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80054d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1e1      	bne.n	800549a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	3314      	adds	r3, #20
 80054dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054e0:	e853 3f00 	ldrex	r3, [r3]
 80054e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80054e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3314      	adds	r3, #20
 80054f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80054fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80054fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005500:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005502:	e841 2300 	strex	r3, r2, [r1]
 8005506:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1e3      	bne.n	80054d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2220      	movs	r2, #32
 8005512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	330c      	adds	r3, #12
 8005522:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005526:	e853 3f00 	ldrex	r3, [r3]
 800552a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800552c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800552e:	f023 0310 	bic.w	r3, r3, #16
 8005532:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	330c      	adds	r3, #12
 800553c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005540:	65ba      	str	r2, [r7, #88]	; 0x58
 8005542:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005544:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005546:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005548:	e841 2300 	strex	r3, r2, [r1]
 800554c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800554e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1e3      	bne.n	800551c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005558:	4618      	mov	r0, r3
 800555a:	f7fc fac3 	bl	8001ae4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005566:	b29b      	uxth	r3, r3
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	b29b      	uxth	r3, r3
 800556c:	4619      	mov	r1, r3
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7fb fc8e 	bl	8000e90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005574:	e099      	b.n	80056aa <HAL_UART_IRQHandler+0x50e>
 8005576:	bf00      	nop
 8005578:	08005c27 	.word	0x08005c27
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005584:	b29b      	uxth	r3, r3
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005590:	b29b      	uxth	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	f000 808b 	beq.w	80056ae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005598:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 8086 	beq.w	80056ae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	330c      	adds	r3, #12
 80055a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ac:	e853 3f00 	ldrex	r3, [r3]
 80055b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	330c      	adds	r3, #12
 80055c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80055c6:	647a      	str	r2, [r7, #68]	; 0x44
 80055c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055ce:	e841 2300 	strex	r3, r2, [r1]
 80055d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1e3      	bne.n	80055a2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	3314      	adds	r3, #20
 80055e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e4:	e853 3f00 	ldrex	r3, [r3]
 80055e8:	623b      	str	r3, [r7, #32]
   return(result);
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	f023 0301 	bic.w	r3, r3, #1
 80055f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	3314      	adds	r3, #20
 80055fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80055fe:	633a      	str	r2, [r7, #48]	; 0x30
 8005600:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005602:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005606:	e841 2300 	strex	r3, r2, [r1]
 800560a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800560c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1e3      	bne.n	80055da <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2220      	movs	r2, #32
 8005616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	330c      	adds	r3, #12
 8005626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	e853 3f00 	ldrex	r3, [r3]
 800562e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 0310 	bic.w	r3, r3, #16
 8005636:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	330c      	adds	r3, #12
 8005640:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005644:	61fa      	str	r2, [r7, #28]
 8005646:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005648:	69b9      	ldr	r1, [r7, #24]
 800564a:	69fa      	ldr	r2, [r7, #28]
 800564c:	e841 2300 	strex	r3, r2, [r1]
 8005650:	617b      	str	r3, [r7, #20]
   return(result);
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1e3      	bne.n	8005620 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005658:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800565c:	4619      	mov	r1, r3
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7fb fc16 	bl	8000e90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005664:	e023      	b.n	80056ae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800566a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800566e:	2b00      	cmp	r3, #0
 8005670:	d009      	beq.n	8005686 <HAL_UART_IRQHandler+0x4ea>
 8005672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800567a:	2b00      	cmp	r3, #0
 800567c:	d003      	beq.n	8005686 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 fae5 	bl	8005c4e <UART_Transmit_IT>
    return;
 8005684:	e014      	b.n	80056b0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800568a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00e      	beq.n	80056b0 <HAL_UART_IRQHandler+0x514>
 8005692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569a:	2b00      	cmp	r3, #0
 800569c:	d008      	beq.n	80056b0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fb25 	bl	8005cee <UART_EndTransmit_IT>
    return;
 80056a4:	e004      	b.n	80056b0 <HAL_UART_IRQHandler+0x514>
    return;
 80056a6:	bf00      	nop
 80056a8:	e002      	b.n	80056b0 <HAL_UART_IRQHandler+0x514>
      return;
 80056aa:	bf00      	nop
 80056ac:	e000      	b.n	80056b0 <HAL_UART_IRQHandler+0x514>
      return;
 80056ae:	bf00      	nop
  }
}
 80056b0:	37e8      	adds	r7, #232	; 0xe8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop

080056b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b09c      	sub	sp, #112	; 0x70
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005714:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005720:	2b00      	cmp	r3, #0
 8005722:	d172      	bne.n	800580a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005726:	2200      	movs	r2, #0
 8005728:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800572a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	330c      	adds	r3, #12
 8005730:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005734:	e853 3f00 	ldrex	r3, [r3]
 8005738:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800573a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800573c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005740:	66bb      	str	r3, [r7, #104]	; 0x68
 8005742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	330c      	adds	r3, #12
 8005748:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800574a:	65ba      	str	r2, [r7, #88]	; 0x58
 800574c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005750:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005752:	e841 2300 	strex	r3, r2, [r1]
 8005756:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1e5      	bne.n	800572a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800575e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	3314      	adds	r3, #20
 8005764:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005768:	e853 3f00 	ldrex	r3, [r3]
 800576c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800576e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005770:	f023 0301 	bic.w	r3, r3, #1
 8005774:	667b      	str	r3, [r7, #100]	; 0x64
 8005776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	3314      	adds	r3, #20
 800577c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800577e:	647a      	str	r2, [r7, #68]	; 0x44
 8005780:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005782:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005784:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005786:	e841 2300 	strex	r3, r2, [r1]
 800578a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800578c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1e5      	bne.n	800575e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	3314      	adds	r3, #20
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	e853 3f00 	ldrex	r3, [r3]
 80057a0:	623b      	str	r3, [r7, #32]
   return(result);
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057a8:	663b      	str	r3, [r7, #96]	; 0x60
 80057aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	3314      	adds	r3, #20
 80057b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80057b2:	633a      	str	r2, [r7, #48]	; 0x30
 80057b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ba:	e841 2300 	strex	r3, r2, [r1]
 80057be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1e5      	bne.n	8005792 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80057c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057c8:	2220      	movs	r2, #32
 80057ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d119      	bne.n	800580a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	330c      	adds	r3, #12
 80057dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	e853 3f00 	ldrex	r3, [r3]
 80057e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f023 0310 	bic.w	r3, r3, #16
 80057ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	330c      	adds	r3, #12
 80057f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80057f6:	61fa      	str	r2, [r7, #28]
 80057f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fa:	69b9      	ldr	r1, [r7, #24]
 80057fc:	69fa      	ldr	r2, [r7, #28]
 80057fe:	e841 2300 	strex	r3, r2, [r1]
 8005802:	617b      	str	r3, [r7, #20]
   return(result);
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1e5      	bne.n	80057d6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800580a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800580c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580e:	2b01      	cmp	r3, #1
 8005810:	d106      	bne.n	8005820 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005814:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005816:	4619      	mov	r1, r3
 8005818:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800581a:	f7fb fb39 	bl	8000e90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800581e:	e002      	b.n	8005826 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005820:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005822:	f7ff ff53 	bl	80056cc <HAL_UART_RxCpltCallback>
}
 8005826:	bf00      	nop
 8005828:	3770      	adds	r7, #112	; 0x70
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800582e:	b580      	push	{r7, lr}
 8005830:	b084      	sub	sp, #16
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005840:	2b01      	cmp	r3, #1
 8005842:	d108      	bne.n	8005856 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005848:	085b      	lsrs	r3, r3, #1
 800584a:	b29b      	uxth	r3, r3
 800584c:	4619      	mov	r1, r3
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f7fb fb1e 	bl	8000e90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005854:	e002      	b.n	800585c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f7ff ff42 	bl	80056e0 <HAL_UART_RxHalfCpltCallback>
}
 800585c:	bf00      	nop
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800586c:	2300      	movs	r3, #0
 800586e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005874:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005880:	2b80      	cmp	r3, #128	; 0x80
 8005882:	bf0c      	ite	eq
 8005884:	2301      	moveq	r3, #1
 8005886:	2300      	movne	r3, #0
 8005888:	b2db      	uxtb	r3, r3
 800588a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b21      	cmp	r3, #33	; 0x21
 8005896:	d108      	bne.n	80058aa <UART_DMAError+0x46>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d005      	beq.n	80058aa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	2200      	movs	r2, #0
 80058a2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80058a4:	68b8      	ldr	r0, [r7, #8]
 80058a6:	f000 f933 	bl	8005b10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b4:	2b40      	cmp	r3, #64	; 0x40
 80058b6:	bf0c      	ite	eq
 80058b8:	2301      	moveq	r3, #1
 80058ba:	2300      	movne	r3, #0
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b22      	cmp	r3, #34	; 0x22
 80058ca:	d108      	bne.n	80058de <UART_DMAError+0x7a>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d005      	beq.n	80058de <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	2200      	movs	r2, #0
 80058d6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80058d8:	68b8      	ldr	r0, [r7, #8]
 80058da:	f000 f941 	bl	8005b60 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e2:	f043 0210 	orr.w	r2, r3, #16
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058ea:	68b8      	ldr	r0, [r7, #8]
 80058ec:	f7ff ff02 	bl	80056f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058f0:	bf00      	nop
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b090      	sub	sp, #64	; 0x40
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	603b      	str	r3, [r7, #0]
 8005904:	4613      	mov	r3, r2
 8005906:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005908:	e050      	b.n	80059ac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800590a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800590c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005910:	d04c      	beq.n	80059ac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005914:	2b00      	cmp	r3, #0
 8005916:	d007      	beq.n	8005928 <UART_WaitOnFlagUntilTimeout+0x30>
 8005918:	f7fb fe9c 	bl	8001654 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005924:	429a      	cmp	r2, r3
 8005926:	d241      	bcs.n	80059ac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	330c      	adds	r3, #12
 800592e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005932:	e853 3f00 	ldrex	r3, [r3]
 8005936:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800593e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	330c      	adds	r3, #12
 8005946:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005948:	637a      	str	r2, [r7, #52]	; 0x34
 800594a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800594e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005950:	e841 2300 	strex	r3, r2, [r1]
 8005954:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1e5      	bne.n	8005928 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	3314      	adds	r3, #20
 8005962:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	e853 3f00 	ldrex	r3, [r3]
 800596a:	613b      	str	r3, [r7, #16]
   return(result);
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	f023 0301 	bic.w	r3, r3, #1
 8005972:	63bb      	str	r3, [r7, #56]	; 0x38
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	3314      	adds	r3, #20
 800597a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800597c:	623a      	str	r2, [r7, #32]
 800597e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005980:	69f9      	ldr	r1, [r7, #28]
 8005982:	6a3a      	ldr	r2, [r7, #32]
 8005984:	e841 2300 	strex	r3, r2, [r1]
 8005988:	61bb      	str	r3, [r7, #24]
   return(result);
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1e5      	bne.n	800595c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2220      	movs	r2, #32
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2220      	movs	r2, #32
 800599c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e00f      	b.n	80059cc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	4013      	ands	r3, r2
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	bf0c      	ite	eq
 80059bc:	2301      	moveq	r3, #1
 80059be:	2300      	movne	r3, #0
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	461a      	mov	r2, r3
 80059c4:	79fb      	ldrb	r3, [r7, #7]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d09f      	beq.n	800590a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3740      	adds	r7, #64	; 0x40
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b098      	sub	sp, #96	; 0x60
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	4613      	mov	r3, r2
 80059e0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	88fa      	ldrh	r2, [r7, #6]
 80059ec:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2222      	movs	r2, #34	; 0x22
 80059f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a00:	4a40      	ldr	r2, [pc, #256]	; (8005b04 <UART_Start_Receive_DMA+0x130>)
 8005a02:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a08:	4a3f      	ldr	r2, [pc, #252]	; (8005b08 <UART_Start_Receive_DMA+0x134>)
 8005a0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a10:	4a3e      	ldr	r2, [pc, #248]	; (8005b0c <UART_Start_Receive_DMA+0x138>)
 8005a12:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a18:	2200      	movs	r2, #0
 8005a1a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005a1c:	f107 0308 	add.w	r3, r7, #8
 8005a20:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	88fb      	ldrh	r3, [r7, #6]
 8005a34:	f7fb fffe 	bl	8001a34 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005a38:	2300      	movs	r3, #0
 8005a3a:	613b      	str	r3, [r7, #16]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	613b      	str	r3, [r7, #16]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	613b      	str	r3, [r7, #16]
 8005a4c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d019      	beq.n	8005a92 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	330c      	adds	r3, #12
 8005a64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a68:	e853 3f00 	ldrex	r3, [r3]
 8005a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a74:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	330c      	adds	r3, #12
 8005a7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a7e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005a80:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a82:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005a84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a86:	e841 2300 	strex	r3, r2, [r1]
 8005a8a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1e5      	bne.n	8005a5e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3314      	adds	r3, #20
 8005a98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9c:	e853 3f00 	ldrex	r3, [r3]
 8005aa0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa4:	f043 0301 	orr.w	r3, r3, #1
 8005aa8:	657b      	str	r3, [r7, #84]	; 0x54
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	3314      	adds	r3, #20
 8005ab0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005ab2:	63ba      	str	r2, [r7, #56]	; 0x38
 8005ab4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005ab8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005aba:	e841 2300 	strex	r3, r2, [r1]
 8005abe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1e5      	bne.n	8005a92 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	3314      	adds	r3, #20
 8005acc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	e853 3f00 	ldrex	r3, [r3]
 8005ad4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005adc:	653b      	str	r3, [r7, #80]	; 0x50
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	3314      	adds	r3, #20
 8005ae4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ae6:	627a      	str	r2, [r7, #36]	; 0x24
 8005ae8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aea:	6a39      	ldr	r1, [r7, #32]
 8005aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aee:	e841 2300 	strex	r3, r2, [r1]
 8005af2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1e5      	bne.n	8005ac6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3760      	adds	r7, #96	; 0x60
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	08005709 	.word	0x08005709
 8005b08:	0800582f 	.word	0x0800582f
 8005b0c:	08005865 	.word	0x08005865

08005b10 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b089      	sub	sp, #36	; 0x24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	330c      	adds	r3, #12
 8005b1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	e853 3f00 	ldrex	r3, [r3]
 8005b26:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005b2e:	61fb      	str	r3, [r7, #28]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	330c      	adds	r3, #12
 8005b36:	69fa      	ldr	r2, [r7, #28]
 8005b38:	61ba      	str	r2, [r7, #24]
 8005b3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3c:	6979      	ldr	r1, [r7, #20]
 8005b3e:	69ba      	ldr	r2, [r7, #24]
 8005b40:	e841 2300 	strex	r3, r2, [r1]
 8005b44:	613b      	str	r3, [r7, #16]
   return(result);
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1e5      	bne.n	8005b18 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005b54:	bf00      	nop
 8005b56:	3724      	adds	r7, #36	; 0x24
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b095      	sub	sp, #84	; 0x54
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	330c      	adds	r3, #12
 8005b6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b72:	e853 3f00 	ldrex	r3, [r3]
 8005b76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	330c      	adds	r3, #12
 8005b86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b88:	643a      	str	r2, [r7, #64]	; 0x40
 8005b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b90:	e841 2300 	strex	r3, r2, [r1]
 8005b94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1e5      	bne.n	8005b68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	3314      	adds	r3, #20
 8005ba2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
 8005ba6:	e853 3f00 	ldrex	r3, [r3]
 8005baa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	f023 0301 	bic.w	r3, r3, #1
 8005bb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	3314      	adds	r3, #20
 8005bba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bc4:	e841 2300 	strex	r3, r2, [r1]
 8005bc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1e5      	bne.n	8005b9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d119      	bne.n	8005c0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	330c      	adds	r3, #12
 8005bde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	e853 3f00 	ldrex	r3, [r3]
 8005be6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	f023 0310 	bic.w	r3, r3, #16
 8005bee:	647b      	str	r3, [r7, #68]	; 0x44
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	330c      	adds	r3, #12
 8005bf6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bf8:	61ba      	str	r2, [r7, #24]
 8005bfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfc:	6979      	ldr	r1, [r7, #20]
 8005bfe:	69ba      	ldr	r2, [r7, #24]
 8005c00:	e841 2300 	strex	r3, r2, [r1]
 8005c04:	613b      	str	r3, [r7, #16]
   return(result);
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1e5      	bne.n	8005bd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005c1a:	bf00      	nop
 8005c1c:	3754      	adds	r7, #84	; 0x54
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b084      	sub	sp, #16
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f7ff fd57 	bl	80056f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c46:	bf00      	nop
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b085      	sub	sp, #20
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b21      	cmp	r3, #33	; 0x21
 8005c60:	d13e      	bne.n	8005ce0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c6a:	d114      	bne.n	8005c96 <UART_Transmit_IT+0x48>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d110      	bne.n	8005c96 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	461a      	mov	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c88:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	1c9a      	adds	r2, r3, #2
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	621a      	str	r2, [r3, #32]
 8005c94:	e008      	b.n	8005ca8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	1c59      	adds	r1, r3, #1
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	6211      	str	r1, [r2, #32]
 8005ca0:	781a      	ldrb	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10f      	bne.n	8005cdc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68da      	ldr	r2, [r3, #12]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68da      	ldr	r2, [r3, #12]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cda:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	e000      	b.n	8005ce2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ce0:	2302      	movs	r3, #2
  }
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b082      	sub	sp, #8
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68da      	ldr	r2, [r3, #12]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7ff fcd2 	bl	80056b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3708      	adds	r7, #8
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b08c      	sub	sp, #48	; 0x30
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b22      	cmp	r3, #34	; 0x22
 8005d30:	f040 80ab 	bne.w	8005e8a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d3c:	d117      	bne.n	8005d6e <UART_Receive_IT+0x50>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d113      	bne.n	8005d6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005d46:	2300      	movs	r3, #0
 8005d48:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d66:	1c9a      	adds	r2, r3, #2
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	629a      	str	r2, [r3, #40]	; 0x28
 8005d6c:	e026      	b.n	8005dbc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d72:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005d74:	2300      	movs	r3, #0
 8005d76:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d80:	d007      	beq.n	8005d92 <UART_Receive_IT+0x74>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10a      	bne.n	8005da0 <UART_Receive_IT+0x82>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d106      	bne.n	8005da0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9c:	701a      	strb	r2, [r3, #0]
 8005d9e:	e008      	b.n	8005db2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db6:	1c5a      	adds	r2, r3, #1
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	4619      	mov	r1, r3
 8005dca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d15a      	bne.n	8005e86 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68da      	ldr	r2, [r3, #12]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f022 0220 	bic.w	r2, r2, #32
 8005dde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68da      	ldr	r2, [r3, #12]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005dee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	695a      	ldr	r2, [r3, #20]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f022 0201 	bic.w	r2, r2, #1
 8005dfe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2220      	movs	r2, #32
 8005e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d135      	bne.n	8005e7c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	330c      	adds	r3, #12
 8005e1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	e853 3f00 	ldrex	r3, [r3]
 8005e24:	613b      	str	r3, [r7, #16]
   return(result);
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	f023 0310 	bic.w	r3, r3, #16
 8005e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	330c      	adds	r3, #12
 8005e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e36:	623a      	str	r2, [r7, #32]
 8005e38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3a:	69f9      	ldr	r1, [r7, #28]
 8005e3c:	6a3a      	ldr	r2, [r7, #32]
 8005e3e:	e841 2300 	strex	r3, r2, [r1]
 8005e42:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1e5      	bne.n	8005e16 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0310 	and.w	r3, r3, #16
 8005e54:	2b10      	cmp	r3, #16
 8005e56:	d10a      	bne.n	8005e6e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	60fb      	str	r3, [r7, #12]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e72:	4619      	mov	r1, r3
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f7fb f80b 	bl	8000e90 <HAL_UARTEx_RxEventCallback>
 8005e7a:	e002      	b.n	8005e82 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f7ff fc25 	bl	80056cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e82:	2300      	movs	r3, #0
 8005e84:	e002      	b.n	8005e8c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	e000      	b.n	8005e8c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005e8a:	2302      	movs	r3, #2
  }
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3730      	adds	r7, #48	; 0x30
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e98:	b0c0      	sub	sp, #256	; 0x100
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb0:	68d9      	ldr	r1, [r3, #12]
 8005eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	ea40 0301 	orr.w	r3, r0, r1
 8005ebc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec2:	689a      	ldr	r2, [r3, #8]
 8005ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	431a      	orrs	r2, r3
 8005ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005eec:	f021 010c 	bic.w	r1, r1, #12
 8005ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005efa:	430b      	orrs	r3, r1
 8005efc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f0e:	6999      	ldr	r1, [r3, #24]
 8005f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	ea40 0301 	orr.w	r3, r0, r1
 8005f1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	4b8f      	ldr	r3, [pc, #572]	; (8006160 <UART_SetConfig+0x2cc>)
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d005      	beq.n	8005f34 <UART_SetConfig+0xa0>
 8005f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	4b8d      	ldr	r3, [pc, #564]	; (8006164 <UART_SetConfig+0x2d0>)
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d104      	bne.n	8005f3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f34:	f7fe fb0c 	bl	8004550 <HAL_RCC_GetPCLK2Freq>
 8005f38:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005f3c:	e003      	b.n	8005f46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f3e:	f7fe faf3 	bl	8004528 <HAL_RCC_GetPCLK1Freq>
 8005f42:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f4a:	69db      	ldr	r3, [r3, #28]
 8005f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f50:	f040 810c 	bne.w	800616c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f5e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005f62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005f66:	4622      	mov	r2, r4
 8005f68:	462b      	mov	r3, r5
 8005f6a:	1891      	adds	r1, r2, r2
 8005f6c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f6e:	415b      	adcs	r3, r3
 8005f70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005f76:	4621      	mov	r1, r4
 8005f78:	eb12 0801 	adds.w	r8, r2, r1
 8005f7c:	4629      	mov	r1, r5
 8005f7e:	eb43 0901 	adc.w	r9, r3, r1
 8005f82:	f04f 0200 	mov.w	r2, #0
 8005f86:	f04f 0300 	mov.w	r3, #0
 8005f8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f96:	4690      	mov	r8, r2
 8005f98:	4699      	mov	r9, r3
 8005f9a:	4623      	mov	r3, r4
 8005f9c:	eb18 0303 	adds.w	r3, r8, r3
 8005fa0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fa4:	462b      	mov	r3, r5
 8005fa6:	eb49 0303 	adc.w	r3, r9, r3
 8005faa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005fba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005fbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	18db      	adds	r3, r3, r3
 8005fc6:	653b      	str	r3, [r7, #80]	; 0x50
 8005fc8:	4613      	mov	r3, r2
 8005fca:	eb42 0303 	adc.w	r3, r2, r3
 8005fce:	657b      	str	r3, [r7, #84]	; 0x54
 8005fd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005fd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005fd8:	f7fa f914 	bl	8000204 <__aeabi_uldivmod>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	460b      	mov	r3, r1
 8005fe0:	4b61      	ldr	r3, [pc, #388]	; (8006168 <UART_SetConfig+0x2d4>)
 8005fe2:	fba3 2302 	umull	r2, r3, r3, r2
 8005fe6:	095b      	lsrs	r3, r3, #5
 8005fe8:	011c      	lsls	r4, r3, #4
 8005fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ff4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005ff8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005ffc:	4642      	mov	r2, r8
 8005ffe:	464b      	mov	r3, r9
 8006000:	1891      	adds	r1, r2, r2
 8006002:	64b9      	str	r1, [r7, #72]	; 0x48
 8006004:	415b      	adcs	r3, r3
 8006006:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006008:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800600c:	4641      	mov	r1, r8
 800600e:	eb12 0a01 	adds.w	sl, r2, r1
 8006012:	4649      	mov	r1, r9
 8006014:	eb43 0b01 	adc.w	fp, r3, r1
 8006018:	f04f 0200 	mov.w	r2, #0
 800601c:	f04f 0300 	mov.w	r3, #0
 8006020:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006024:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006028:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800602c:	4692      	mov	sl, r2
 800602e:	469b      	mov	fp, r3
 8006030:	4643      	mov	r3, r8
 8006032:	eb1a 0303 	adds.w	r3, sl, r3
 8006036:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800603a:	464b      	mov	r3, r9
 800603c:	eb4b 0303 	adc.w	r3, fp, r3
 8006040:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006050:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006054:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006058:	460b      	mov	r3, r1
 800605a:	18db      	adds	r3, r3, r3
 800605c:	643b      	str	r3, [r7, #64]	; 0x40
 800605e:	4613      	mov	r3, r2
 8006060:	eb42 0303 	adc.w	r3, r2, r3
 8006064:	647b      	str	r3, [r7, #68]	; 0x44
 8006066:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800606a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800606e:	f7fa f8c9 	bl	8000204 <__aeabi_uldivmod>
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	4611      	mov	r1, r2
 8006078:	4b3b      	ldr	r3, [pc, #236]	; (8006168 <UART_SetConfig+0x2d4>)
 800607a:	fba3 2301 	umull	r2, r3, r3, r1
 800607e:	095b      	lsrs	r3, r3, #5
 8006080:	2264      	movs	r2, #100	; 0x64
 8006082:	fb02 f303 	mul.w	r3, r2, r3
 8006086:	1acb      	subs	r3, r1, r3
 8006088:	00db      	lsls	r3, r3, #3
 800608a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800608e:	4b36      	ldr	r3, [pc, #216]	; (8006168 <UART_SetConfig+0x2d4>)
 8006090:	fba3 2302 	umull	r2, r3, r3, r2
 8006094:	095b      	lsrs	r3, r3, #5
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800609c:	441c      	add	r4, r3
 800609e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060a2:	2200      	movs	r2, #0
 80060a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80060ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80060b0:	4642      	mov	r2, r8
 80060b2:	464b      	mov	r3, r9
 80060b4:	1891      	adds	r1, r2, r2
 80060b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80060b8:	415b      	adcs	r3, r3
 80060ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80060c0:	4641      	mov	r1, r8
 80060c2:	1851      	adds	r1, r2, r1
 80060c4:	6339      	str	r1, [r7, #48]	; 0x30
 80060c6:	4649      	mov	r1, r9
 80060c8:	414b      	adcs	r3, r1
 80060ca:	637b      	str	r3, [r7, #52]	; 0x34
 80060cc:	f04f 0200 	mov.w	r2, #0
 80060d0:	f04f 0300 	mov.w	r3, #0
 80060d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80060d8:	4659      	mov	r1, fp
 80060da:	00cb      	lsls	r3, r1, #3
 80060dc:	4651      	mov	r1, sl
 80060de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060e2:	4651      	mov	r1, sl
 80060e4:	00ca      	lsls	r2, r1, #3
 80060e6:	4610      	mov	r0, r2
 80060e8:	4619      	mov	r1, r3
 80060ea:	4603      	mov	r3, r0
 80060ec:	4642      	mov	r2, r8
 80060ee:	189b      	adds	r3, r3, r2
 80060f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060f4:	464b      	mov	r3, r9
 80060f6:	460a      	mov	r2, r1
 80060f8:	eb42 0303 	adc.w	r3, r2, r3
 80060fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800610c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006110:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006114:	460b      	mov	r3, r1
 8006116:	18db      	adds	r3, r3, r3
 8006118:	62bb      	str	r3, [r7, #40]	; 0x28
 800611a:	4613      	mov	r3, r2
 800611c:	eb42 0303 	adc.w	r3, r2, r3
 8006120:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006122:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006126:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800612a:	f7fa f86b 	bl	8000204 <__aeabi_uldivmod>
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	4b0d      	ldr	r3, [pc, #52]	; (8006168 <UART_SetConfig+0x2d4>)
 8006134:	fba3 1302 	umull	r1, r3, r3, r2
 8006138:	095b      	lsrs	r3, r3, #5
 800613a:	2164      	movs	r1, #100	; 0x64
 800613c:	fb01 f303 	mul.w	r3, r1, r3
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	00db      	lsls	r3, r3, #3
 8006144:	3332      	adds	r3, #50	; 0x32
 8006146:	4a08      	ldr	r2, [pc, #32]	; (8006168 <UART_SetConfig+0x2d4>)
 8006148:	fba2 2303 	umull	r2, r3, r2, r3
 800614c:	095b      	lsrs	r3, r3, #5
 800614e:	f003 0207 	and.w	r2, r3, #7
 8006152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4422      	add	r2, r4
 800615a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800615c:	e105      	b.n	800636a <UART_SetConfig+0x4d6>
 800615e:	bf00      	nop
 8006160:	40011000 	.word	0x40011000
 8006164:	40011400 	.word	0x40011400
 8006168:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800616c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006170:	2200      	movs	r2, #0
 8006172:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006176:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800617a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800617e:	4642      	mov	r2, r8
 8006180:	464b      	mov	r3, r9
 8006182:	1891      	adds	r1, r2, r2
 8006184:	6239      	str	r1, [r7, #32]
 8006186:	415b      	adcs	r3, r3
 8006188:	627b      	str	r3, [r7, #36]	; 0x24
 800618a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800618e:	4641      	mov	r1, r8
 8006190:	1854      	adds	r4, r2, r1
 8006192:	4649      	mov	r1, r9
 8006194:	eb43 0501 	adc.w	r5, r3, r1
 8006198:	f04f 0200 	mov.w	r2, #0
 800619c:	f04f 0300 	mov.w	r3, #0
 80061a0:	00eb      	lsls	r3, r5, #3
 80061a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061a6:	00e2      	lsls	r2, r4, #3
 80061a8:	4614      	mov	r4, r2
 80061aa:	461d      	mov	r5, r3
 80061ac:	4643      	mov	r3, r8
 80061ae:	18e3      	adds	r3, r4, r3
 80061b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80061b4:	464b      	mov	r3, r9
 80061b6:	eb45 0303 	adc.w	r3, r5, r3
 80061ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80061ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80061ce:	f04f 0200 	mov.w	r2, #0
 80061d2:	f04f 0300 	mov.w	r3, #0
 80061d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80061da:	4629      	mov	r1, r5
 80061dc:	008b      	lsls	r3, r1, #2
 80061de:	4621      	mov	r1, r4
 80061e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061e4:	4621      	mov	r1, r4
 80061e6:	008a      	lsls	r2, r1, #2
 80061e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80061ec:	f7fa f80a 	bl	8000204 <__aeabi_uldivmod>
 80061f0:	4602      	mov	r2, r0
 80061f2:	460b      	mov	r3, r1
 80061f4:	4b60      	ldr	r3, [pc, #384]	; (8006378 <UART_SetConfig+0x4e4>)
 80061f6:	fba3 2302 	umull	r2, r3, r3, r2
 80061fa:	095b      	lsrs	r3, r3, #5
 80061fc:	011c      	lsls	r4, r3, #4
 80061fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006202:	2200      	movs	r2, #0
 8006204:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006208:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800620c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006210:	4642      	mov	r2, r8
 8006212:	464b      	mov	r3, r9
 8006214:	1891      	adds	r1, r2, r2
 8006216:	61b9      	str	r1, [r7, #24]
 8006218:	415b      	adcs	r3, r3
 800621a:	61fb      	str	r3, [r7, #28]
 800621c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006220:	4641      	mov	r1, r8
 8006222:	1851      	adds	r1, r2, r1
 8006224:	6139      	str	r1, [r7, #16]
 8006226:	4649      	mov	r1, r9
 8006228:	414b      	adcs	r3, r1
 800622a:	617b      	str	r3, [r7, #20]
 800622c:	f04f 0200 	mov.w	r2, #0
 8006230:	f04f 0300 	mov.w	r3, #0
 8006234:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006238:	4659      	mov	r1, fp
 800623a:	00cb      	lsls	r3, r1, #3
 800623c:	4651      	mov	r1, sl
 800623e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006242:	4651      	mov	r1, sl
 8006244:	00ca      	lsls	r2, r1, #3
 8006246:	4610      	mov	r0, r2
 8006248:	4619      	mov	r1, r3
 800624a:	4603      	mov	r3, r0
 800624c:	4642      	mov	r2, r8
 800624e:	189b      	adds	r3, r3, r2
 8006250:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006254:	464b      	mov	r3, r9
 8006256:	460a      	mov	r2, r1
 8006258:	eb42 0303 	adc.w	r3, r2, r3
 800625c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	67bb      	str	r3, [r7, #120]	; 0x78
 800626a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800626c:	f04f 0200 	mov.w	r2, #0
 8006270:	f04f 0300 	mov.w	r3, #0
 8006274:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006278:	4649      	mov	r1, r9
 800627a:	008b      	lsls	r3, r1, #2
 800627c:	4641      	mov	r1, r8
 800627e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006282:	4641      	mov	r1, r8
 8006284:	008a      	lsls	r2, r1, #2
 8006286:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800628a:	f7f9 ffbb 	bl	8000204 <__aeabi_uldivmod>
 800628e:	4602      	mov	r2, r0
 8006290:	460b      	mov	r3, r1
 8006292:	4b39      	ldr	r3, [pc, #228]	; (8006378 <UART_SetConfig+0x4e4>)
 8006294:	fba3 1302 	umull	r1, r3, r3, r2
 8006298:	095b      	lsrs	r3, r3, #5
 800629a:	2164      	movs	r1, #100	; 0x64
 800629c:	fb01 f303 	mul.w	r3, r1, r3
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	011b      	lsls	r3, r3, #4
 80062a4:	3332      	adds	r3, #50	; 0x32
 80062a6:	4a34      	ldr	r2, [pc, #208]	; (8006378 <UART_SetConfig+0x4e4>)
 80062a8:	fba2 2303 	umull	r2, r3, r2, r3
 80062ac:	095b      	lsrs	r3, r3, #5
 80062ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062b2:	441c      	add	r4, r3
 80062b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062b8:	2200      	movs	r2, #0
 80062ba:	673b      	str	r3, [r7, #112]	; 0x70
 80062bc:	677a      	str	r2, [r7, #116]	; 0x74
 80062be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80062c2:	4642      	mov	r2, r8
 80062c4:	464b      	mov	r3, r9
 80062c6:	1891      	adds	r1, r2, r2
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	415b      	adcs	r3, r3
 80062cc:	60fb      	str	r3, [r7, #12]
 80062ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062d2:	4641      	mov	r1, r8
 80062d4:	1851      	adds	r1, r2, r1
 80062d6:	6039      	str	r1, [r7, #0]
 80062d8:	4649      	mov	r1, r9
 80062da:	414b      	adcs	r3, r1
 80062dc:	607b      	str	r3, [r7, #4]
 80062de:	f04f 0200 	mov.w	r2, #0
 80062e2:	f04f 0300 	mov.w	r3, #0
 80062e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80062ea:	4659      	mov	r1, fp
 80062ec:	00cb      	lsls	r3, r1, #3
 80062ee:	4651      	mov	r1, sl
 80062f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062f4:	4651      	mov	r1, sl
 80062f6:	00ca      	lsls	r2, r1, #3
 80062f8:	4610      	mov	r0, r2
 80062fa:	4619      	mov	r1, r3
 80062fc:	4603      	mov	r3, r0
 80062fe:	4642      	mov	r2, r8
 8006300:	189b      	adds	r3, r3, r2
 8006302:	66bb      	str	r3, [r7, #104]	; 0x68
 8006304:	464b      	mov	r3, r9
 8006306:	460a      	mov	r2, r1
 8006308:	eb42 0303 	adc.w	r3, r2, r3
 800630c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800630e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	663b      	str	r3, [r7, #96]	; 0x60
 8006318:	667a      	str	r2, [r7, #100]	; 0x64
 800631a:	f04f 0200 	mov.w	r2, #0
 800631e:	f04f 0300 	mov.w	r3, #0
 8006322:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006326:	4649      	mov	r1, r9
 8006328:	008b      	lsls	r3, r1, #2
 800632a:	4641      	mov	r1, r8
 800632c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006330:	4641      	mov	r1, r8
 8006332:	008a      	lsls	r2, r1, #2
 8006334:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006338:	f7f9 ff64 	bl	8000204 <__aeabi_uldivmod>
 800633c:	4602      	mov	r2, r0
 800633e:	460b      	mov	r3, r1
 8006340:	4b0d      	ldr	r3, [pc, #52]	; (8006378 <UART_SetConfig+0x4e4>)
 8006342:	fba3 1302 	umull	r1, r3, r3, r2
 8006346:	095b      	lsrs	r3, r3, #5
 8006348:	2164      	movs	r1, #100	; 0x64
 800634a:	fb01 f303 	mul.w	r3, r1, r3
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	011b      	lsls	r3, r3, #4
 8006352:	3332      	adds	r3, #50	; 0x32
 8006354:	4a08      	ldr	r2, [pc, #32]	; (8006378 <UART_SetConfig+0x4e4>)
 8006356:	fba2 2303 	umull	r2, r3, r2, r3
 800635a:	095b      	lsrs	r3, r3, #5
 800635c:	f003 020f 	and.w	r2, r3, #15
 8006360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4422      	add	r2, r4
 8006368:	609a      	str	r2, [r3, #8]
}
 800636a:	bf00      	nop
 800636c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006370:	46bd      	mov	sp, r7
 8006372:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006376:	bf00      	nop
 8006378:	51eb851f 	.word	0x51eb851f

0800637c <__errno>:
 800637c:	4b01      	ldr	r3, [pc, #4]	; (8006384 <__errno+0x8>)
 800637e:	6818      	ldr	r0, [r3, #0]
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	20000088 	.word	0x20000088

08006388 <__libc_init_array>:
 8006388:	b570      	push	{r4, r5, r6, lr}
 800638a:	4d0d      	ldr	r5, [pc, #52]	; (80063c0 <__libc_init_array+0x38>)
 800638c:	4c0d      	ldr	r4, [pc, #52]	; (80063c4 <__libc_init_array+0x3c>)
 800638e:	1b64      	subs	r4, r4, r5
 8006390:	10a4      	asrs	r4, r4, #2
 8006392:	2600      	movs	r6, #0
 8006394:	42a6      	cmp	r6, r4
 8006396:	d109      	bne.n	80063ac <__libc_init_array+0x24>
 8006398:	4d0b      	ldr	r5, [pc, #44]	; (80063c8 <__libc_init_array+0x40>)
 800639a:	4c0c      	ldr	r4, [pc, #48]	; (80063cc <__libc_init_array+0x44>)
 800639c:	f000 fd3c 	bl	8006e18 <_init>
 80063a0:	1b64      	subs	r4, r4, r5
 80063a2:	10a4      	asrs	r4, r4, #2
 80063a4:	2600      	movs	r6, #0
 80063a6:	42a6      	cmp	r6, r4
 80063a8:	d105      	bne.n	80063b6 <__libc_init_array+0x2e>
 80063aa:	bd70      	pop	{r4, r5, r6, pc}
 80063ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80063b0:	4798      	blx	r3
 80063b2:	3601      	adds	r6, #1
 80063b4:	e7ee      	b.n	8006394 <__libc_init_array+0xc>
 80063b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ba:	4798      	blx	r3
 80063bc:	3601      	adds	r6, #1
 80063be:	e7f2      	b.n	80063a6 <__libc_init_array+0x1e>
 80063c0:	08006fac 	.word	0x08006fac
 80063c4:	08006fac 	.word	0x08006fac
 80063c8:	08006fac 	.word	0x08006fac
 80063cc:	08006fb0 	.word	0x08006fb0

080063d0 <memcmp>:
 80063d0:	b510      	push	{r4, lr}
 80063d2:	3901      	subs	r1, #1
 80063d4:	4402      	add	r2, r0
 80063d6:	4290      	cmp	r0, r2
 80063d8:	d101      	bne.n	80063de <memcmp+0xe>
 80063da:	2000      	movs	r0, #0
 80063dc:	e005      	b.n	80063ea <memcmp+0x1a>
 80063de:	7803      	ldrb	r3, [r0, #0]
 80063e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80063e4:	42a3      	cmp	r3, r4
 80063e6:	d001      	beq.n	80063ec <memcmp+0x1c>
 80063e8:	1b18      	subs	r0, r3, r4
 80063ea:	bd10      	pop	{r4, pc}
 80063ec:	3001      	adds	r0, #1
 80063ee:	e7f2      	b.n	80063d6 <memcmp+0x6>

080063f0 <memcpy>:
 80063f0:	440a      	add	r2, r1
 80063f2:	4291      	cmp	r1, r2
 80063f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80063f8:	d100      	bne.n	80063fc <memcpy+0xc>
 80063fa:	4770      	bx	lr
 80063fc:	b510      	push	{r4, lr}
 80063fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006402:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006406:	4291      	cmp	r1, r2
 8006408:	d1f9      	bne.n	80063fe <memcpy+0xe>
 800640a:	bd10      	pop	{r4, pc}

0800640c <memset>:
 800640c:	4402      	add	r2, r0
 800640e:	4603      	mov	r3, r0
 8006410:	4293      	cmp	r3, r2
 8006412:	d100      	bne.n	8006416 <memset+0xa>
 8006414:	4770      	bx	lr
 8006416:	f803 1b01 	strb.w	r1, [r3], #1
 800641a:	e7f9      	b.n	8006410 <memset+0x4>

0800641c <_puts_r>:
 800641c:	b570      	push	{r4, r5, r6, lr}
 800641e:	460e      	mov	r6, r1
 8006420:	4605      	mov	r5, r0
 8006422:	b118      	cbz	r0, 800642c <_puts_r+0x10>
 8006424:	6983      	ldr	r3, [r0, #24]
 8006426:	b90b      	cbnz	r3, 800642c <_puts_r+0x10>
 8006428:	f000 fa48 	bl	80068bc <__sinit>
 800642c:	69ab      	ldr	r3, [r5, #24]
 800642e:	68ac      	ldr	r4, [r5, #8]
 8006430:	b913      	cbnz	r3, 8006438 <_puts_r+0x1c>
 8006432:	4628      	mov	r0, r5
 8006434:	f000 fa42 	bl	80068bc <__sinit>
 8006438:	4b2c      	ldr	r3, [pc, #176]	; (80064ec <_puts_r+0xd0>)
 800643a:	429c      	cmp	r4, r3
 800643c:	d120      	bne.n	8006480 <_puts_r+0x64>
 800643e:	686c      	ldr	r4, [r5, #4]
 8006440:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006442:	07db      	lsls	r3, r3, #31
 8006444:	d405      	bmi.n	8006452 <_puts_r+0x36>
 8006446:	89a3      	ldrh	r3, [r4, #12]
 8006448:	0598      	lsls	r0, r3, #22
 800644a:	d402      	bmi.n	8006452 <_puts_r+0x36>
 800644c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800644e:	f000 fad3 	bl	80069f8 <__retarget_lock_acquire_recursive>
 8006452:	89a3      	ldrh	r3, [r4, #12]
 8006454:	0719      	lsls	r1, r3, #28
 8006456:	d51d      	bpl.n	8006494 <_puts_r+0x78>
 8006458:	6923      	ldr	r3, [r4, #16]
 800645a:	b1db      	cbz	r3, 8006494 <_puts_r+0x78>
 800645c:	3e01      	subs	r6, #1
 800645e:	68a3      	ldr	r3, [r4, #8]
 8006460:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006464:	3b01      	subs	r3, #1
 8006466:	60a3      	str	r3, [r4, #8]
 8006468:	bb39      	cbnz	r1, 80064ba <_puts_r+0x9e>
 800646a:	2b00      	cmp	r3, #0
 800646c:	da38      	bge.n	80064e0 <_puts_r+0xc4>
 800646e:	4622      	mov	r2, r4
 8006470:	210a      	movs	r1, #10
 8006472:	4628      	mov	r0, r5
 8006474:	f000 f848 	bl	8006508 <__swbuf_r>
 8006478:	3001      	adds	r0, #1
 800647a:	d011      	beq.n	80064a0 <_puts_r+0x84>
 800647c:	250a      	movs	r5, #10
 800647e:	e011      	b.n	80064a4 <_puts_r+0x88>
 8006480:	4b1b      	ldr	r3, [pc, #108]	; (80064f0 <_puts_r+0xd4>)
 8006482:	429c      	cmp	r4, r3
 8006484:	d101      	bne.n	800648a <_puts_r+0x6e>
 8006486:	68ac      	ldr	r4, [r5, #8]
 8006488:	e7da      	b.n	8006440 <_puts_r+0x24>
 800648a:	4b1a      	ldr	r3, [pc, #104]	; (80064f4 <_puts_r+0xd8>)
 800648c:	429c      	cmp	r4, r3
 800648e:	bf08      	it	eq
 8006490:	68ec      	ldreq	r4, [r5, #12]
 8006492:	e7d5      	b.n	8006440 <_puts_r+0x24>
 8006494:	4621      	mov	r1, r4
 8006496:	4628      	mov	r0, r5
 8006498:	f000 f888 	bl	80065ac <__swsetup_r>
 800649c:	2800      	cmp	r0, #0
 800649e:	d0dd      	beq.n	800645c <_puts_r+0x40>
 80064a0:	f04f 35ff 	mov.w	r5, #4294967295
 80064a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064a6:	07da      	lsls	r2, r3, #31
 80064a8:	d405      	bmi.n	80064b6 <_puts_r+0x9a>
 80064aa:	89a3      	ldrh	r3, [r4, #12]
 80064ac:	059b      	lsls	r3, r3, #22
 80064ae:	d402      	bmi.n	80064b6 <_puts_r+0x9a>
 80064b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064b2:	f000 faa2 	bl	80069fa <__retarget_lock_release_recursive>
 80064b6:	4628      	mov	r0, r5
 80064b8:	bd70      	pop	{r4, r5, r6, pc}
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	da04      	bge.n	80064c8 <_puts_r+0xac>
 80064be:	69a2      	ldr	r2, [r4, #24]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	dc06      	bgt.n	80064d2 <_puts_r+0xb6>
 80064c4:	290a      	cmp	r1, #10
 80064c6:	d004      	beq.n	80064d2 <_puts_r+0xb6>
 80064c8:	6823      	ldr	r3, [r4, #0]
 80064ca:	1c5a      	adds	r2, r3, #1
 80064cc:	6022      	str	r2, [r4, #0]
 80064ce:	7019      	strb	r1, [r3, #0]
 80064d0:	e7c5      	b.n	800645e <_puts_r+0x42>
 80064d2:	4622      	mov	r2, r4
 80064d4:	4628      	mov	r0, r5
 80064d6:	f000 f817 	bl	8006508 <__swbuf_r>
 80064da:	3001      	adds	r0, #1
 80064dc:	d1bf      	bne.n	800645e <_puts_r+0x42>
 80064de:	e7df      	b.n	80064a0 <_puts_r+0x84>
 80064e0:	6823      	ldr	r3, [r4, #0]
 80064e2:	250a      	movs	r5, #10
 80064e4:	1c5a      	adds	r2, r3, #1
 80064e6:	6022      	str	r2, [r4, #0]
 80064e8:	701d      	strb	r5, [r3, #0]
 80064ea:	e7db      	b.n	80064a4 <_puts_r+0x88>
 80064ec:	08006f64 	.word	0x08006f64
 80064f0:	08006f84 	.word	0x08006f84
 80064f4:	08006f44 	.word	0x08006f44

080064f8 <puts>:
 80064f8:	4b02      	ldr	r3, [pc, #8]	; (8006504 <puts+0xc>)
 80064fa:	4601      	mov	r1, r0
 80064fc:	6818      	ldr	r0, [r3, #0]
 80064fe:	f7ff bf8d 	b.w	800641c <_puts_r>
 8006502:	bf00      	nop
 8006504:	20000088 	.word	0x20000088

08006508 <__swbuf_r>:
 8006508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800650a:	460e      	mov	r6, r1
 800650c:	4614      	mov	r4, r2
 800650e:	4605      	mov	r5, r0
 8006510:	b118      	cbz	r0, 800651a <__swbuf_r+0x12>
 8006512:	6983      	ldr	r3, [r0, #24]
 8006514:	b90b      	cbnz	r3, 800651a <__swbuf_r+0x12>
 8006516:	f000 f9d1 	bl	80068bc <__sinit>
 800651a:	4b21      	ldr	r3, [pc, #132]	; (80065a0 <__swbuf_r+0x98>)
 800651c:	429c      	cmp	r4, r3
 800651e:	d12b      	bne.n	8006578 <__swbuf_r+0x70>
 8006520:	686c      	ldr	r4, [r5, #4]
 8006522:	69a3      	ldr	r3, [r4, #24]
 8006524:	60a3      	str	r3, [r4, #8]
 8006526:	89a3      	ldrh	r3, [r4, #12]
 8006528:	071a      	lsls	r2, r3, #28
 800652a:	d52f      	bpl.n	800658c <__swbuf_r+0x84>
 800652c:	6923      	ldr	r3, [r4, #16]
 800652e:	b36b      	cbz	r3, 800658c <__swbuf_r+0x84>
 8006530:	6923      	ldr	r3, [r4, #16]
 8006532:	6820      	ldr	r0, [r4, #0]
 8006534:	1ac0      	subs	r0, r0, r3
 8006536:	6963      	ldr	r3, [r4, #20]
 8006538:	b2f6      	uxtb	r6, r6
 800653a:	4283      	cmp	r3, r0
 800653c:	4637      	mov	r7, r6
 800653e:	dc04      	bgt.n	800654a <__swbuf_r+0x42>
 8006540:	4621      	mov	r1, r4
 8006542:	4628      	mov	r0, r5
 8006544:	f000 f926 	bl	8006794 <_fflush_r>
 8006548:	bb30      	cbnz	r0, 8006598 <__swbuf_r+0x90>
 800654a:	68a3      	ldr	r3, [r4, #8]
 800654c:	3b01      	subs	r3, #1
 800654e:	60a3      	str	r3, [r4, #8]
 8006550:	6823      	ldr	r3, [r4, #0]
 8006552:	1c5a      	adds	r2, r3, #1
 8006554:	6022      	str	r2, [r4, #0]
 8006556:	701e      	strb	r6, [r3, #0]
 8006558:	6963      	ldr	r3, [r4, #20]
 800655a:	3001      	adds	r0, #1
 800655c:	4283      	cmp	r3, r0
 800655e:	d004      	beq.n	800656a <__swbuf_r+0x62>
 8006560:	89a3      	ldrh	r3, [r4, #12]
 8006562:	07db      	lsls	r3, r3, #31
 8006564:	d506      	bpl.n	8006574 <__swbuf_r+0x6c>
 8006566:	2e0a      	cmp	r6, #10
 8006568:	d104      	bne.n	8006574 <__swbuf_r+0x6c>
 800656a:	4621      	mov	r1, r4
 800656c:	4628      	mov	r0, r5
 800656e:	f000 f911 	bl	8006794 <_fflush_r>
 8006572:	b988      	cbnz	r0, 8006598 <__swbuf_r+0x90>
 8006574:	4638      	mov	r0, r7
 8006576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006578:	4b0a      	ldr	r3, [pc, #40]	; (80065a4 <__swbuf_r+0x9c>)
 800657a:	429c      	cmp	r4, r3
 800657c:	d101      	bne.n	8006582 <__swbuf_r+0x7a>
 800657e:	68ac      	ldr	r4, [r5, #8]
 8006580:	e7cf      	b.n	8006522 <__swbuf_r+0x1a>
 8006582:	4b09      	ldr	r3, [pc, #36]	; (80065a8 <__swbuf_r+0xa0>)
 8006584:	429c      	cmp	r4, r3
 8006586:	bf08      	it	eq
 8006588:	68ec      	ldreq	r4, [r5, #12]
 800658a:	e7ca      	b.n	8006522 <__swbuf_r+0x1a>
 800658c:	4621      	mov	r1, r4
 800658e:	4628      	mov	r0, r5
 8006590:	f000 f80c 	bl	80065ac <__swsetup_r>
 8006594:	2800      	cmp	r0, #0
 8006596:	d0cb      	beq.n	8006530 <__swbuf_r+0x28>
 8006598:	f04f 37ff 	mov.w	r7, #4294967295
 800659c:	e7ea      	b.n	8006574 <__swbuf_r+0x6c>
 800659e:	bf00      	nop
 80065a0:	08006f64 	.word	0x08006f64
 80065a4:	08006f84 	.word	0x08006f84
 80065a8:	08006f44 	.word	0x08006f44

080065ac <__swsetup_r>:
 80065ac:	4b32      	ldr	r3, [pc, #200]	; (8006678 <__swsetup_r+0xcc>)
 80065ae:	b570      	push	{r4, r5, r6, lr}
 80065b0:	681d      	ldr	r5, [r3, #0]
 80065b2:	4606      	mov	r6, r0
 80065b4:	460c      	mov	r4, r1
 80065b6:	b125      	cbz	r5, 80065c2 <__swsetup_r+0x16>
 80065b8:	69ab      	ldr	r3, [r5, #24]
 80065ba:	b913      	cbnz	r3, 80065c2 <__swsetup_r+0x16>
 80065bc:	4628      	mov	r0, r5
 80065be:	f000 f97d 	bl	80068bc <__sinit>
 80065c2:	4b2e      	ldr	r3, [pc, #184]	; (800667c <__swsetup_r+0xd0>)
 80065c4:	429c      	cmp	r4, r3
 80065c6:	d10f      	bne.n	80065e8 <__swsetup_r+0x3c>
 80065c8:	686c      	ldr	r4, [r5, #4]
 80065ca:	89a3      	ldrh	r3, [r4, #12]
 80065cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065d0:	0719      	lsls	r1, r3, #28
 80065d2:	d42c      	bmi.n	800662e <__swsetup_r+0x82>
 80065d4:	06dd      	lsls	r5, r3, #27
 80065d6:	d411      	bmi.n	80065fc <__swsetup_r+0x50>
 80065d8:	2309      	movs	r3, #9
 80065da:	6033      	str	r3, [r6, #0]
 80065dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80065e0:	81a3      	strh	r3, [r4, #12]
 80065e2:	f04f 30ff 	mov.w	r0, #4294967295
 80065e6:	e03e      	b.n	8006666 <__swsetup_r+0xba>
 80065e8:	4b25      	ldr	r3, [pc, #148]	; (8006680 <__swsetup_r+0xd4>)
 80065ea:	429c      	cmp	r4, r3
 80065ec:	d101      	bne.n	80065f2 <__swsetup_r+0x46>
 80065ee:	68ac      	ldr	r4, [r5, #8]
 80065f0:	e7eb      	b.n	80065ca <__swsetup_r+0x1e>
 80065f2:	4b24      	ldr	r3, [pc, #144]	; (8006684 <__swsetup_r+0xd8>)
 80065f4:	429c      	cmp	r4, r3
 80065f6:	bf08      	it	eq
 80065f8:	68ec      	ldreq	r4, [r5, #12]
 80065fa:	e7e6      	b.n	80065ca <__swsetup_r+0x1e>
 80065fc:	0758      	lsls	r0, r3, #29
 80065fe:	d512      	bpl.n	8006626 <__swsetup_r+0x7a>
 8006600:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006602:	b141      	cbz	r1, 8006616 <__swsetup_r+0x6a>
 8006604:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006608:	4299      	cmp	r1, r3
 800660a:	d002      	beq.n	8006612 <__swsetup_r+0x66>
 800660c:	4630      	mov	r0, r6
 800660e:	f000 fa5b 	bl	8006ac8 <_free_r>
 8006612:	2300      	movs	r3, #0
 8006614:	6363      	str	r3, [r4, #52]	; 0x34
 8006616:	89a3      	ldrh	r3, [r4, #12]
 8006618:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800661c:	81a3      	strh	r3, [r4, #12]
 800661e:	2300      	movs	r3, #0
 8006620:	6063      	str	r3, [r4, #4]
 8006622:	6923      	ldr	r3, [r4, #16]
 8006624:	6023      	str	r3, [r4, #0]
 8006626:	89a3      	ldrh	r3, [r4, #12]
 8006628:	f043 0308 	orr.w	r3, r3, #8
 800662c:	81a3      	strh	r3, [r4, #12]
 800662e:	6923      	ldr	r3, [r4, #16]
 8006630:	b94b      	cbnz	r3, 8006646 <__swsetup_r+0x9a>
 8006632:	89a3      	ldrh	r3, [r4, #12]
 8006634:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800663c:	d003      	beq.n	8006646 <__swsetup_r+0x9a>
 800663e:	4621      	mov	r1, r4
 8006640:	4630      	mov	r0, r6
 8006642:	f000 fa01 	bl	8006a48 <__smakebuf_r>
 8006646:	89a0      	ldrh	r0, [r4, #12]
 8006648:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800664c:	f010 0301 	ands.w	r3, r0, #1
 8006650:	d00a      	beq.n	8006668 <__swsetup_r+0xbc>
 8006652:	2300      	movs	r3, #0
 8006654:	60a3      	str	r3, [r4, #8]
 8006656:	6963      	ldr	r3, [r4, #20]
 8006658:	425b      	negs	r3, r3
 800665a:	61a3      	str	r3, [r4, #24]
 800665c:	6923      	ldr	r3, [r4, #16]
 800665e:	b943      	cbnz	r3, 8006672 <__swsetup_r+0xc6>
 8006660:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006664:	d1ba      	bne.n	80065dc <__swsetup_r+0x30>
 8006666:	bd70      	pop	{r4, r5, r6, pc}
 8006668:	0781      	lsls	r1, r0, #30
 800666a:	bf58      	it	pl
 800666c:	6963      	ldrpl	r3, [r4, #20]
 800666e:	60a3      	str	r3, [r4, #8]
 8006670:	e7f4      	b.n	800665c <__swsetup_r+0xb0>
 8006672:	2000      	movs	r0, #0
 8006674:	e7f7      	b.n	8006666 <__swsetup_r+0xba>
 8006676:	bf00      	nop
 8006678:	20000088 	.word	0x20000088
 800667c:	08006f64 	.word	0x08006f64
 8006680:	08006f84 	.word	0x08006f84
 8006684:	08006f44 	.word	0x08006f44

08006688 <__sflush_r>:
 8006688:	898a      	ldrh	r2, [r1, #12]
 800668a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800668e:	4605      	mov	r5, r0
 8006690:	0710      	lsls	r0, r2, #28
 8006692:	460c      	mov	r4, r1
 8006694:	d458      	bmi.n	8006748 <__sflush_r+0xc0>
 8006696:	684b      	ldr	r3, [r1, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	dc05      	bgt.n	80066a8 <__sflush_r+0x20>
 800669c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800669e:	2b00      	cmp	r3, #0
 80066a0:	dc02      	bgt.n	80066a8 <__sflush_r+0x20>
 80066a2:	2000      	movs	r0, #0
 80066a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066aa:	2e00      	cmp	r6, #0
 80066ac:	d0f9      	beq.n	80066a2 <__sflush_r+0x1a>
 80066ae:	2300      	movs	r3, #0
 80066b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80066b4:	682f      	ldr	r7, [r5, #0]
 80066b6:	602b      	str	r3, [r5, #0]
 80066b8:	d032      	beq.n	8006720 <__sflush_r+0x98>
 80066ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066bc:	89a3      	ldrh	r3, [r4, #12]
 80066be:	075a      	lsls	r2, r3, #29
 80066c0:	d505      	bpl.n	80066ce <__sflush_r+0x46>
 80066c2:	6863      	ldr	r3, [r4, #4]
 80066c4:	1ac0      	subs	r0, r0, r3
 80066c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066c8:	b10b      	cbz	r3, 80066ce <__sflush_r+0x46>
 80066ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066cc:	1ac0      	subs	r0, r0, r3
 80066ce:	2300      	movs	r3, #0
 80066d0:	4602      	mov	r2, r0
 80066d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066d4:	6a21      	ldr	r1, [r4, #32]
 80066d6:	4628      	mov	r0, r5
 80066d8:	47b0      	blx	r6
 80066da:	1c43      	adds	r3, r0, #1
 80066dc:	89a3      	ldrh	r3, [r4, #12]
 80066de:	d106      	bne.n	80066ee <__sflush_r+0x66>
 80066e0:	6829      	ldr	r1, [r5, #0]
 80066e2:	291d      	cmp	r1, #29
 80066e4:	d82c      	bhi.n	8006740 <__sflush_r+0xb8>
 80066e6:	4a2a      	ldr	r2, [pc, #168]	; (8006790 <__sflush_r+0x108>)
 80066e8:	40ca      	lsrs	r2, r1
 80066ea:	07d6      	lsls	r6, r2, #31
 80066ec:	d528      	bpl.n	8006740 <__sflush_r+0xb8>
 80066ee:	2200      	movs	r2, #0
 80066f0:	6062      	str	r2, [r4, #4]
 80066f2:	04d9      	lsls	r1, r3, #19
 80066f4:	6922      	ldr	r2, [r4, #16]
 80066f6:	6022      	str	r2, [r4, #0]
 80066f8:	d504      	bpl.n	8006704 <__sflush_r+0x7c>
 80066fa:	1c42      	adds	r2, r0, #1
 80066fc:	d101      	bne.n	8006702 <__sflush_r+0x7a>
 80066fe:	682b      	ldr	r3, [r5, #0]
 8006700:	b903      	cbnz	r3, 8006704 <__sflush_r+0x7c>
 8006702:	6560      	str	r0, [r4, #84]	; 0x54
 8006704:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006706:	602f      	str	r7, [r5, #0]
 8006708:	2900      	cmp	r1, #0
 800670a:	d0ca      	beq.n	80066a2 <__sflush_r+0x1a>
 800670c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006710:	4299      	cmp	r1, r3
 8006712:	d002      	beq.n	800671a <__sflush_r+0x92>
 8006714:	4628      	mov	r0, r5
 8006716:	f000 f9d7 	bl	8006ac8 <_free_r>
 800671a:	2000      	movs	r0, #0
 800671c:	6360      	str	r0, [r4, #52]	; 0x34
 800671e:	e7c1      	b.n	80066a4 <__sflush_r+0x1c>
 8006720:	6a21      	ldr	r1, [r4, #32]
 8006722:	2301      	movs	r3, #1
 8006724:	4628      	mov	r0, r5
 8006726:	47b0      	blx	r6
 8006728:	1c41      	adds	r1, r0, #1
 800672a:	d1c7      	bne.n	80066bc <__sflush_r+0x34>
 800672c:	682b      	ldr	r3, [r5, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d0c4      	beq.n	80066bc <__sflush_r+0x34>
 8006732:	2b1d      	cmp	r3, #29
 8006734:	d001      	beq.n	800673a <__sflush_r+0xb2>
 8006736:	2b16      	cmp	r3, #22
 8006738:	d101      	bne.n	800673e <__sflush_r+0xb6>
 800673a:	602f      	str	r7, [r5, #0]
 800673c:	e7b1      	b.n	80066a2 <__sflush_r+0x1a>
 800673e:	89a3      	ldrh	r3, [r4, #12]
 8006740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006744:	81a3      	strh	r3, [r4, #12]
 8006746:	e7ad      	b.n	80066a4 <__sflush_r+0x1c>
 8006748:	690f      	ldr	r7, [r1, #16]
 800674a:	2f00      	cmp	r7, #0
 800674c:	d0a9      	beq.n	80066a2 <__sflush_r+0x1a>
 800674e:	0793      	lsls	r3, r2, #30
 8006750:	680e      	ldr	r6, [r1, #0]
 8006752:	bf08      	it	eq
 8006754:	694b      	ldreq	r3, [r1, #20]
 8006756:	600f      	str	r7, [r1, #0]
 8006758:	bf18      	it	ne
 800675a:	2300      	movne	r3, #0
 800675c:	eba6 0807 	sub.w	r8, r6, r7
 8006760:	608b      	str	r3, [r1, #8]
 8006762:	f1b8 0f00 	cmp.w	r8, #0
 8006766:	dd9c      	ble.n	80066a2 <__sflush_r+0x1a>
 8006768:	6a21      	ldr	r1, [r4, #32]
 800676a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800676c:	4643      	mov	r3, r8
 800676e:	463a      	mov	r2, r7
 8006770:	4628      	mov	r0, r5
 8006772:	47b0      	blx	r6
 8006774:	2800      	cmp	r0, #0
 8006776:	dc06      	bgt.n	8006786 <__sflush_r+0xfe>
 8006778:	89a3      	ldrh	r3, [r4, #12]
 800677a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800677e:	81a3      	strh	r3, [r4, #12]
 8006780:	f04f 30ff 	mov.w	r0, #4294967295
 8006784:	e78e      	b.n	80066a4 <__sflush_r+0x1c>
 8006786:	4407      	add	r7, r0
 8006788:	eba8 0800 	sub.w	r8, r8, r0
 800678c:	e7e9      	b.n	8006762 <__sflush_r+0xda>
 800678e:	bf00      	nop
 8006790:	20400001 	.word	0x20400001

08006794 <_fflush_r>:
 8006794:	b538      	push	{r3, r4, r5, lr}
 8006796:	690b      	ldr	r3, [r1, #16]
 8006798:	4605      	mov	r5, r0
 800679a:	460c      	mov	r4, r1
 800679c:	b913      	cbnz	r3, 80067a4 <_fflush_r+0x10>
 800679e:	2500      	movs	r5, #0
 80067a0:	4628      	mov	r0, r5
 80067a2:	bd38      	pop	{r3, r4, r5, pc}
 80067a4:	b118      	cbz	r0, 80067ae <_fflush_r+0x1a>
 80067a6:	6983      	ldr	r3, [r0, #24]
 80067a8:	b90b      	cbnz	r3, 80067ae <_fflush_r+0x1a>
 80067aa:	f000 f887 	bl	80068bc <__sinit>
 80067ae:	4b14      	ldr	r3, [pc, #80]	; (8006800 <_fflush_r+0x6c>)
 80067b0:	429c      	cmp	r4, r3
 80067b2:	d11b      	bne.n	80067ec <_fflush_r+0x58>
 80067b4:	686c      	ldr	r4, [r5, #4]
 80067b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d0ef      	beq.n	800679e <_fflush_r+0xa>
 80067be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80067c0:	07d0      	lsls	r0, r2, #31
 80067c2:	d404      	bmi.n	80067ce <_fflush_r+0x3a>
 80067c4:	0599      	lsls	r1, r3, #22
 80067c6:	d402      	bmi.n	80067ce <_fflush_r+0x3a>
 80067c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067ca:	f000 f915 	bl	80069f8 <__retarget_lock_acquire_recursive>
 80067ce:	4628      	mov	r0, r5
 80067d0:	4621      	mov	r1, r4
 80067d2:	f7ff ff59 	bl	8006688 <__sflush_r>
 80067d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067d8:	07da      	lsls	r2, r3, #31
 80067da:	4605      	mov	r5, r0
 80067dc:	d4e0      	bmi.n	80067a0 <_fflush_r+0xc>
 80067de:	89a3      	ldrh	r3, [r4, #12]
 80067e0:	059b      	lsls	r3, r3, #22
 80067e2:	d4dd      	bmi.n	80067a0 <_fflush_r+0xc>
 80067e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067e6:	f000 f908 	bl	80069fa <__retarget_lock_release_recursive>
 80067ea:	e7d9      	b.n	80067a0 <_fflush_r+0xc>
 80067ec:	4b05      	ldr	r3, [pc, #20]	; (8006804 <_fflush_r+0x70>)
 80067ee:	429c      	cmp	r4, r3
 80067f0:	d101      	bne.n	80067f6 <_fflush_r+0x62>
 80067f2:	68ac      	ldr	r4, [r5, #8]
 80067f4:	e7df      	b.n	80067b6 <_fflush_r+0x22>
 80067f6:	4b04      	ldr	r3, [pc, #16]	; (8006808 <_fflush_r+0x74>)
 80067f8:	429c      	cmp	r4, r3
 80067fa:	bf08      	it	eq
 80067fc:	68ec      	ldreq	r4, [r5, #12]
 80067fe:	e7da      	b.n	80067b6 <_fflush_r+0x22>
 8006800:	08006f64 	.word	0x08006f64
 8006804:	08006f84 	.word	0x08006f84
 8006808:	08006f44 	.word	0x08006f44

0800680c <std>:
 800680c:	2300      	movs	r3, #0
 800680e:	b510      	push	{r4, lr}
 8006810:	4604      	mov	r4, r0
 8006812:	e9c0 3300 	strd	r3, r3, [r0]
 8006816:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800681a:	6083      	str	r3, [r0, #8]
 800681c:	8181      	strh	r1, [r0, #12]
 800681e:	6643      	str	r3, [r0, #100]	; 0x64
 8006820:	81c2      	strh	r2, [r0, #14]
 8006822:	6183      	str	r3, [r0, #24]
 8006824:	4619      	mov	r1, r3
 8006826:	2208      	movs	r2, #8
 8006828:	305c      	adds	r0, #92	; 0x5c
 800682a:	f7ff fdef 	bl	800640c <memset>
 800682e:	4b05      	ldr	r3, [pc, #20]	; (8006844 <std+0x38>)
 8006830:	6263      	str	r3, [r4, #36]	; 0x24
 8006832:	4b05      	ldr	r3, [pc, #20]	; (8006848 <std+0x3c>)
 8006834:	62a3      	str	r3, [r4, #40]	; 0x28
 8006836:	4b05      	ldr	r3, [pc, #20]	; (800684c <std+0x40>)
 8006838:	62e3      	str	r3, [r4, #44]	; 0x2c
 800683a:	4b05      	ldr	r3, [pc, #20]	; (8006850 <std+0x44>)
 800683c:	6224      	str	r4, [r4, #32]
 800683e:	6323      	str	r3, [r4, #48]	; 0x30
 8006840:	bd10      	pop	{r4, pc}
 8006842:	bf00      	nop
 8006844:	08006ca9 	.word	0x08006ca9
 8006848:	08006ccb 	.word	0x08006ccb
 800684c:	08006d03 	.word	0x08006d03
 8006850:	08006d27 	.word	0x08006d27

08006854 <_cleanup_r>:
 8006854:	4901      	ldr	r1, [pc, #4]	; (800685c <_cleanup_r+0x8>)
 8006856:	f000 b8af 	b.w	80069b8 <_fwalk_reent>
 800685a:	bf00      	nop
 800685c:	08006795 	.word	0x08006795

08006860 <__sfmoreglue>:
 8006860:	b570      	push	{r4, r5, r6, lr}
 8006862:	2268      	movs	r2, #104	; 0x68
 8006864:	1e4d      	subs	r5, r1, #1
 8006866:	4355      	muls	r5, r2
 8006868:	460e      	mov	r6, r1
 800686a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800686e:	f000 f997 	bl	8006ba0 <_malloc_r>
 8006872:	4604      	mov	r4, r0
 8006874:	b140      	cbz	r0, 8006888 <__sfmoreglue+0x28>
 8006876:	2100      	movs	r1, #0
 8006878:	e9c0 1600 	strd	r1, r6, [r0]
 800687c:	300c      	adds	r0, #12
 800687e:	60a0      	str	r0, [r4, #8]
 8006880:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006884:	f7ff fdc2 	bl	800640c <memset>
 8006888:	4620      	mov	r0, r4
 800688a:	bd70      	pop	{r4, r5, r6, pc}

0800688c <__sfp_lock_acquire>:
 800688c:	4801      	ldr	r0, [pc, #4]	; (8006894 <__sfp_lock_acquire+0x8>)
 800688e:	f000 b8b3 	b.w	80069f8 <__retarget_lock_acquire_recursive>
 8006892:	bf00      	nop
 8006894:	20000765 	.word	0x20000765

08006898 <__sfp_lock_release>:
 8006898:	4801      	ldr	r0, [pc, #4]	; (80068a0 <__sfp_lock_release+0x8>)
 800689a:	f000 b8ae 	b.w	80069fa <__retarget_lock_release_recursive>
 800689e:	bf00      	nop
 80068a0:	20000765 	.word	0x20000765

080068a4 <__sinit_lock_acquire>:
 80068a4:	4801      	ldr	r0, [pc, #4]	; (80068ac <__sinit_lock_acquire+0x8>)
 80068a6:	f000 b8a7 	b.w	80069f8 <__retarget_lock_acquire_recursive>
 80068aa:	bf00      	nop
 80068ac:	20000766 	.word	0x20000766

080068b0 <__sinit_lock_release>:
 80068b0:	4801      	ldr	r0, [pc, #4]	; (80068b8 <__sinit_lock_release+0x8>)
 80068b2:	f000 b8a2 	b.w	80069fa <__retarget_lock_release_recursive>
 80068b6:	bf00      	nop
 80068b8:	20000766 	.word	0x20000766

080068bc <__sinit>:
 80068bc:	b510      	push	{r4, lr}
 80068be:	4604      	mov	r4, r0
 80068c0:	f7ff fff0 	bl	80068a4 <__sinit_lock_acquire>
 80068c4:	69a3      	ldr	r3, [r4, #24]
 80068c6:	b11b      	cbz	r3, 80068d0 <__sinit+0x14>
 80068c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068cc:	f7ff bff0 	b.w	80068b0 <__sinit_lock_release>
 80068d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80068d4:	6523      	str	r3, [r4, #80]	; 0x50
 80068d6:	4b13      	ldr	r3, [pc, #76]	; (8006924 <__sinit+0x68>)
 80068d8:	4a13      	ldr	r2, [pc, #76]	; (8006928 <__sinit+0x6c>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80068de:	42a3      	cmp	r3, r4
 80068e0:	bf04      	itt	eq
 80068e2:	2301      	moveq	r3, #1
 80068e4:	61a3      	streq	r3, [r4, #24]
 80068e6:	4620      	mov	r0, r4
 80068e8:	f000 f820 	bl	800692c <__sfp>
 80068ec:	6060      	str	r0, [r4, #4]
 80068ee:	4620      	mov	r0, r4
 80068f0:	f000 f81c 	bl	800692c <__sfp>
 80068f4:	60a0      	str	r0, [r4, #8]
 80068f6:	4620      	mov	r0, r4
 80068f8:	f000 f818 	bl	800692c <__sfp>
 80068fc:	2200      	movs	r2, #0
 80068fe:	60e0      	str	r0, [r4, #12]
 8006900:	2104      	movs	r1, #4
 8006902:	6860      	ldr	r0, [r4, #4]
 8006904:	f7ff ff82 	bl	800680c <std>
 8006908:	68a0      	ldr	r0, [r4, #8]
 800690a:	2201      	movs	r2, #1
 800690c:	2109      	movs	r1, #9
 800690e:	f7ff ff7d 	bl	800680c <std>
 8006912:	68e0      	ldr	r0, [r4, #12]
 8006914:	2202      	movs	r2, #2
 8006916:	2112      	movs	r1, #18
 8006918:	f7ff ff78 	bl	800680c <std>
 800691c:	2301      	movs	r3, #1
 800691e:	61a3      	str	r3, [r4, #24]
 8006920:	e7d2      	b.n	80068c8 <__sinit+0xc>
 8006922:	bf00      	nop
 8006924:	08006f40 	.word	0x08006f40
 8006928:	08006855 	.word	0x08006855

0800692c <__sfp>:
 800692c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800692e:	4607      	mov	r7, r0
 8006930:	f7ff ffac 	bl	800688c <__sfp_lock_acquire>
 8006934:	4b1e      	ldr	r3, [pc, #120]	; (80069b0 <__sfp+0x84>)
 8006936:	681e      	ldr	r6, [r3, #0]
 8006938:	69b3      	ldr	r3, [r6, #24]
 800693a:	b913      	cbnz	r3, 8006942 <__sfp+0x16>
 800693c:	4630      	mov	r0, r6
 800693e:	f7ff ffbd 	bl	80068bc <__sinit>
 8006942:	3648      	adds	r6, #72	; 0x48
 8006944:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006948:	3b01      	subs	r3, #1
 800694a:	d503      	bpl.n	8006954 <__sfp+0x28>
 800694c:	6833      	ldr	r3, [r6, #0]
 800694e:	b30b      	cbz	r3, 8006994 <__sfp+0x68>
 8006950:	6836      	ldr	r6, [r6, #0]
 8006952:	e7f7      	b.n	8006944 <__sfp+0x18>
 8006954:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006958:	b9d5      	cbnz	r5, 8006990 <__sfp+0x64>
 800695a:	4b16      	ldr	r3, [pc, #88]	; (80069b4 <__sfp+0x88>)
 800695c:	60e3      	str	r3, [r4, #12]
 800695e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006962:	6665      	str	r5, [r4, #100]	; 0x64
 8006964:	f000 f847 	bl	80069f6 <__retarget_lock_init_recursive>
 8006968:	f7ff ff96 	bl	8006898 <__sfp_lock_release>
 800696c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006970:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006974:	6025      	str	r5, [r4, #0]
 8006976:	61a5      	str	r5, [r4, #24]
 8006978:	2208      	movs	r2, #8
 800697a:	4629      	mov	r1, r5
 800697c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006980:	f7ff fd44 	bl	800640c <memset>
 8006984:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006988:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800698c:	4620      	mov	r0, r4
 800698e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006990:	3468      	adds	r4, #104	; 0x68
 8006992:	e7d9      	b.n	8006948 <__sfp+0x1c>
 8006994:	2104      	movs	r1, #4
 8006996:	4638      	mov	r0, r7
 8006998:	f7ff ff62 	bl	8006860 <__sfmoreglue>
 800699c:	4604      	mov	r4, r0
 800699e:	6030      	str	r0, [r6, #0]
 80069a0:	2800      	cmp	r0, #0
 80069a2:	d1d5      	bne.n	8006950 <__sfp+0x24>
 80069a4:	f7ff ff78 	bl	8006898 <__sfp_lock_release>
 80069a8:	230c      	movs	r3, #12
 80069aa:	603b      	str	r3, [r7, #0]
 80069ac:	e7ee      	b.n	800698c <__sfp+0x60>
 80069ae:	bf00      	nop
 80069b0:	08006f40 	.word	0x08006f40
 80069b4:	ffff0001 	.word	0xffff0001

080069b8 <_fwalk_reent>:
 80069b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069bc:	4606      	mov	r6, r0
 80069be:	4688      	mov	r8, r1
 80069c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80069c4:	2700      	movs	r7, #0
 80069c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069ca:	f1b9 0901 	subs.w	r9, r9, #1
 80069ce:	d505      	bpl.n	80069dc <_fwalk_reent+0x24>
 80069d0:	6824      	ldr	r4, [r4, #0]
 80069d2:	2c00      	cmp	r4, #0
 80069d4:	d1f7      	bne.n	80069c6 <_fwalk_reent+0xe>
 80069d6:	4638      	mov	r0, r7
 80069d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069dc:	89ab      	ldrh	r3, [r5, #12]
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d907      	bls.n	80069f2 <_fwalk_reent+0x3a>
 80069e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069e6:	3301      	adds	r3, #1
 80069e8:	d003      	beq.n	80069f2 <_fwalk_reent+0x3a>
 80069ea:	4629      	mov	r1, r5
 80069ec:	4630      	mov	r0, r6
 80069ee:	47c0      	blx	r8
 80069f0:	4307      	orrs	r7, r0
 80069f2:	3568      	adds	r5, #104	; 0x68
 80069f4:	e7e9      	b.n	80069ca <_fwalk_reent+0x12>

080069f6 <__retarget_lock_init_recursive>:
 80069f6:	4770      	bx	lr

080069f8 <__retarget_lock_acquire_recursive>:
 80069f8:	4770      	bx	lr

080069fa <__retarget_lock_release_recursive>:
 80069fa:	4770      	bx	lr

080069fc <__swhatbuf_r>:
 80069fc:	b570      	push	{r4, r5, r6, lr}
 80069fe:	460e      	mov	r6, r1
 8006a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a04:	2900      	cmp	r1, #0
 8006a06:	b096      	sub	sp, #88	; 0x58
 8006a08:	4614      	mov	r4, r2
 8006a0a:	461d      	mov	r5, r3
 8006a0c:	da08      	bge.n	8006a20 <__swhatbuf_r+0x24>
 8006a0e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	602a      	str	r2, [r5, #0]
 8006a16:	061a      	lsls	r2, r3, #24
 8006a18:	d410      	bmi.n	8006a3c <__swhatbuf_r+0x40>
 8006a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a1e:	e00e      	b.n	8006a3e <__swhatbuf_r+0x42>
 8006a20:	466a      	mov	r2, sp
 8006a22:	f000 f9a7 	bl	8006d74 <_fstat_r>
 8006a26:	2800      	cmp	r0, #0
 8006a28:	dbf1      	blt.n	8006a0e <__swhatbuf_r+0x12>
 8006a2a:	9a01      	ldr	r2, [sp, #4]
 8006a2c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a30:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006a34:	425a      	negs	r2, r3
 8006a36:	415a      	adcs	r2, r3
 8006a38:	602a      	str	r2, [r5, #0]
 8006a3a:	e7ee      	b.n	8006a1a <__swhatbuf_r+0x1e>
 8006a3c:	2340      	movs	r3, #64	; 0x40
 8006a3e:	2000      	movs	r0, #0
 8006a40:	6023      	str	r3, [r4, #0]
 8006a42:	b016      	add	sp, #88	; 0x58
 8006a44:	bd70      	pop	{r4, r5, r6, pc}
	...

08006a48 <__smakebuf_r>:
 8006a48:	898b      	ldrh	r3, [r1, #12]
 8006a4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a4c:	079d      	lsls	r5, r3, #30
 8006a4e:	4606      	mov	r6, r0
 8006a50:	460c      	mov	r4, r1
 8006a52:	d507      	bpl.n	8006a64 <__smakebuf_r+0x1c>
 8006a54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a58:	6023      	str	r3, [r4, #0]
 8006a5a:	6123      	str	r3, [r4, #16]
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	6163      	str	r3, [r4, #20]
 8006a60:	b002      	add	sp, #8
 8006a62:	bd70      	pop	{r4, r5, r6, pc}
 8006a64:	ab01      	add	r3, sp, #4
 8006a66:	466a      	mov	r2, sp
 8006a68:	f7ff ffc8 	bl	80069fc <__swhatbuf_r>
 8006a6c:	9900      	ldr	r1, [sp, #0]
 8006a6e:	4605      	mov	r5, r0
 8006a70:	4630      	mov	r0, r6
 8006a72:	f000 f895 	bl	8006ba0 <_malloc_r>
 8006a76:	b948      	cbnz	r0, 8006a8c <__smakebuf_r+0x44>
 8006a78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a7c:	059a      	lsls	r2, r3, #22
 8006a7e:	d4ef      	bmi.n	8006a60 <__smakebuf_r+0x18>
 8006a80:	f023 0303 	bic.w	r3, r3, #3
 8006a84:	f043 0302 	orr.w	r3, r3, #2
 8006a88:	81a3      	strh	r3, [r4, #12]
 8006a8a:	e7e3      	b.n	8006a54 <__smakebuf_r+0xc>
 8006a8c:	4b0d      	ldr	r3, [pc, #52]	; (8006ac4 <__smakebuf_r+0x7c>)
 8006a8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006a90:	89a3      	ldrh	r3, [r4, #12]
 8006a92:	6020      	str	r0, [r4, #0]
 8006a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a98:	81a3      	strh	r3, [r4, #12]
 8006a9a:	9b00      	ldr	r3, [sp, #0]
 8006a9c:	6163      	str	r3, [r4, #20]
 8006a9e:	9b01      	ldr	r3, [sp, #4]
 8006aa0:	6120      	str	r0, [r4, #16]
 8006aa2:	b15b      	cbz	r3, 8006abc <__smakebuf_r+0x74>
 8006aa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006aa8:	4630      	mov	r0, r6
 8006aaa:	f000 f975 	bl	8006d98 <_isatty_r>
 8006aae:	b128      	cbz	r0, 8006abc <__smakebuf_r+0x74>
 8006ab0:	89a3      	ldrh	r3, [r4, #12]
 8006ab2:	f023 0303 	bic.w	r3, r3, #3
 8006ab6:	f043 0301 	orr.w	r3, r3, #1
 8006aba:	81a3      	strh	r3, [r4, #12]
 8006abc:	89a0      	ldrh	r0, [r4, #12]
 8006abe:	4305      	orrs	r5, r0
 8006ac0:	81a5      	strh	r5, [r4, #12]
 8006ac2:	e7cd      	b.n	8006a60 <__smakebuf_r+0x18>
 8006ac4:	08006855 	.word	0x08006855

08006ac8 <_free_r>:
 8006ac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006aca:	2900      	cmp	r1, #0
 8006acc:	d044      	beq.n	8006b58 <_free_r+0x90>
 8006ace:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ad2:	9001      	str	r0, [sp, #4]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f1a1 0404 	sub.w	r4, r1, #4
 8006ada:	bfb8      	it	lt
 8006adc:	18e4      	addlt	r4, r4, r3
 8006ade:	f000 f97d 	bl	8006ddc <__malloc_lock>
 8006ae2:	4a1e      	ldr	r2, [pc, #120]	; (8006b5c <_free_r+0x94>)
 8006ae4:	9801      	ldr	r0, [sp, #4]
 8006ae6:	6813      	ldr	r3, [r2, #0]
 8006ae8:	b933      	cbnz	r3, 8006af8 <_free_r+0x30>
 8006aea:	6063      	str	r3, [r4, #4]
 8006aec:	6014      	str	r4, [r2, #0]
 8006aee:	b003      	add	sp, #12
 8006af0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006af4:	f000 b978 	b.w	8006de8 <__malloc_unlock>
 8006af8:	42a3      	cmp	r3, r4
 8006afa:	d908      	bls.n	8006b0e <_free_r+0x46>
 8006afc:	6825      	ldr	r5, [r4, #0]
 8006afe:	1961      	adds	r1, r4, r5
 8006b00:	428b      	cmp	r3, r1
 8006b02:	bf01      	itttt	eq
 8006b04:	6819      	ldreq	r1, [r3, #0]
 8006b06:	685b      	ldreq	r3, [r3, #4]
 8006b08:	1949      	addeq	r1, r1, r5
 8006b0a:	6021      	streq	r1, [r4, #0]
 8006b0c:	e7ed      	b.n	8006aea <_free_r+0x22>
 8006b0e:	461a      	mov	r2, r3
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	b10b      	cbz	r3, 8006b18 <_free_r+0x50>
 8006b14:	42a3      	cmp	r3, r4
 8006b16:	d9fa      	bls.n	8006b0e <_free_r+0x46>
 8006b18:	6811      	ldr	r1, [r2, #0]
 8006b1a:	1855      	adds	r5, r2, r1
 8006b1c:	42a5      	cmp	r5, r4
 8006b1e:	d10b      	bne.n	8006b38 <_free_r+0x70>
 8006b20:	6824      	ldr	r4, [r4, #0]
 8006b22:	4421      	add	r1, r4
 8006b24:	1854      	adds	r4, r2, r1
 8006b26:	42a3      	cmp	r3, r4
 8006b28:	6011      	str	r1, [r2, #0]
 8006b2a:	d1e0      	bne.n	8006aee <_free_r+0x26>
 8006b2c:	681c      	ldr	r4, [r3, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	6053      	str	r3, [r2, #4]
 8006b32:	4421      	add	r1, r4
 8006b34:	6011      	str	r1, [r2, #0]
 8006b36:	e7da      	b.n	8006aee <_free_r+0x26>
 8006b38:	d902      	bls.n	8006b40 <_free_r+0x78>
 8006b3a:	230c      	movs	r3, #12
 8006b3c:	6003      	str	r3, [r0, #0]
 8006b3e:	e7d6      	b.n	8006aee <_free_r+0x26>
 8006b40:	6825      	ldr	r5, [r4, #0]
 8006b42:	1961      	adds	r1, r4, r5
 8006b44:	428b      	cmp	r3, r1
 8006b46:	bf04      	itt	eq
 8006b48:	6819      	ldreq	r1, [r3, #0]
 8006b4a:	685b      	ldreq	r3, [r3, #4]
 8006b4c:	6063      	str	r3, [r4, #4]
 8006b4e:	bf04      	itt	eq
 8006b50:	1949      	addeq	r1, r1, r5
 8006b52:	6021      	streq	r1, [r4, #0]
 8006b54:	6054      	str	r4, [r2, #4]
 8006b56:	e7ca      	b.n	8006aee <_free_r+0x26>
 8006b58:	b003      	add	sp, #12
 8006b5a:	bd30      	pop	{r4, r5, pc}
 8006b5c:	20000768 	.word	0x20000768

08006b60 <sbrk_aligned>:
 8006b60:	b570      	push	{r4, r5, r6, lr}
 8006b62:	4e0e      	ldr	r6, [pc, #56]	; (8006b9c <sbrk_aligned+0x3c>)
 8006b64:	460c      	mov	r4, r1
 8006b66:	6831      	ldr	r1, [r6, #0]
 8006b68:	4605      	mov	r5, r0
 8006b6a:	b911      	cbnz	r1, 8006b72 <sbrk_aligned+0x12>
 8006b6c:	f000 f88c 	bl	8006c88 <_sbrk_r>
 8006b70:	6030      	str	r0, [r6, #0]
 8006b72:	4621      	mov	r1, r4
 8006b74:	4628      	mov	r0, r5
 8006b76:	f000 f887 	bl	8006c88 <_sbrk_r>
 8006b7a:	1c43      	adds	r3, r0, #1
 8006b7c:	d00a      	beq.n	8006b94 <sbrk_aligned+0x34>
 8006b7e:	1cc4      	adds	r4, r0, #3
 8006b80:	f024 0403 	bic.w	r4, r4, #3
 8006b84:	42a0      	cmp	r0, r4
 8006b86:	d007      	beq.n	8006b98 <sbrk_aligned+0x38>
 8006b88:	1a21      	subs	r1, r4, r0
 8006b8a:	4628      	mov	r0, r5
 8006b8c:	f000 f87c 	bl	8006c88 <_sbrk_r>
 8006b90:	3001      	adds	r0, #1
 8006b92:	d101      	bne.n	8006b98 <sbrk_aligned+0x38>
 8006b94:	f04f 34ff 	mov.w	r4, #4294967295
 8006b98:	4620      	mov	r0, r4
 8006b9a:	bd70      	pop	{r4, r5, r6, pc}
 8006b9c:	2000076c 	.word	0x2000076c

08006ba0 <_malloc_r>:
 8006ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ba4:	1ccd      	adds	r5, r1, #3
 8006ba6:	f025 0503 	bic.w	r5, r5, #3
 8006baa:	3508      	adds	r5, #8
 8006bac:	2d0c      	cmp	r5, #12
 8006bae:	bf38      	it	cc
 8006bb0:	250c      	movcc	r5, #12
 8006bb2:	2d00      	cmp	r5, #0
 8006bb4:	4607      	mov	r7, r0
 8006bb6:	db01      	blt.n	8006bbc <_malloc_r+0x1c>
 8006bb8:	42a9      	cmp	r1, r5
 8006bba:	d905      	bls.n	8006bc8 <_malloc_r+0x28>
 8006bbc:	230c      	movs	r3, #12
 8006bbe:	603b      	str	r3, [r7, #0]
 8006bc0:	2600      	movs	r6, #0
 8006bc2:	4630      	mov	r0, r6
 8006bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bc8:	4e2e      	ldr	r6, [pc, #184]	; (8006c84 <_malloc_r+0xe4>)
 8006bca:	f000 f907 	bl	8006ddc <__malloc_lock>
 8006bce:	6833      	ldr	r3, [r6, #0]
 8006bd0:	461c      	mov	r4, r3
 8006bd2:	bb34      	cbnz	r4, 8006c22 <_malloc_r+0x82>
 8006bd4:	4629      	mov	r1, r5
 8006bd6:	4638      	mov	r0, r7
 8006bd8:	f7ff ffc2 	bl	8006b60 <sbrk_aligned>
 8006bdc:	1c43      	adds	r3, r0, #1
 8006bde:	4604      	mov	r4, r0
 8006be0:	d14d      	bne.n	8006c7e <_malloc_r+0xde>
 8006be2:	6834      	ldr	r4, [r6, #0]
 8006be4:	4626      	mov	r6, r4
 8006be6:	2e00      	cmp	r6, #0
 8006be8:	d140      	bne.n	8006c6c <_malloc_r+0xcc>
 8006bea:	6823      	ldr	r3, [r4, #0]
 8006bec:	4631      	mov	r1, r6
 8006bee:	4638      	mov	r0, r7
 8006bf0:	eb04 0803 	add.w	r8, r4, r3
 8006bf4:	f000 f848 	bl	8006c88 <_sbrk_r>
 8006bf8:	4580      	cmp	r8, r0
 8006bfa:	d13a      	bne.n	8006c72 <_malloc_r+0xd2>
 8006bfc:	6821      	ldr	r1, [r4, #0]
 8006bfe:	3503      	adds	r5, #3
 8006c00:	1a6d      	subs	r5, r5, r1
 8006c02:	f025 0503 	bic.w	r5, r5, #3
 8006c06:	3508      	adds	r5, #8
 8006c08:	2d0c      	cmp	r5, #12
 8006c0a:	bf38      	it	cc
 8006c0c:	250c      	movcc	r5, #12
 8006c0e:	4629      	mov	r1, r5
 8006c10:	4638      	mov	r0, r7
 8006c12:	f7ff ffa5 	bl	8006b60 <sbrk_aligned>
 8006c16:	3001      	adds	r0, #1
 8006c18:	d02b      	beq.n	8006c72 <_malloc_r+0xd2>
 8006c1a:	6823      	ldr	r3, [r4, #0]
 8006c1c:	442b      	add	r3, r5
 8006c1e:	6023      	str	r3, [r4, #0]
 8006c20:	e00e      	b.n	8006c40 <_malloc_r+0xa0>
 8006c22:	6822      	ldr	r2, [r4, #0]
 8006c24:	1b52      	subs	r2, r2, r5
 8006c26:	d41e      	bmi.n	8006c66 <_malloc_r+0xc6>
 8006c28:	2a0b      	cmp	r2, #11
 8006c2a:	d916      	bls.n	8006c5a <_malloc_r+0xba>
 8006c2c:	1961      	adds	r1, r4, r5
 8006c2e:	42a3      	cmp	r3, r4
 8006c30:	6025      	str	r5, [r4, #0]
 8006c32:	bf18      	it	ne
 8006c34:	6059      	strne	r1, [r3, #4]
 8006c36:	6863      	ldr	r3, [r4, #4]
 8006c38:	bf08      	it	eq
 8006c3a:	6031      	streq	r1, [r6, #0]
 8006c3c:	5162      	str	r2, [r4, r5]
 8006c3e:	604b      	str	r3, [r1, #4]
 8006c40:	4638      	mov	r0, r7
 8006c42:	f104 060b 	add.w	r6, r4, #11
 8006c46:	f000 f8cf 	bl	8006de8 <__malloc_unlock>
 8006c4a:	f026 0607 	bic.w	r6, r6, #7
 8006c4e:	1d23      	adds	r3, r4, #4
 8006c50:	1af2      	subs	r2, r6, r3
 8006c52:	d0b6      	beq.n	8006bc2 <_malloc_r+0x22>
 8006c54:	1b9b      	subs	r3, r3, r6
 8006c56:	50a3      	str	r3, [r4, r2]
 8006c58:	e7b3      	b.n	8006bc2 <_malloc_r+0x22>
 8006c5a:	6862      	ldr	r2, [r4, #4]
 8006c5c:	42a3      	cmp	r3, r4
 8006c5e:	bf0c      	ite	eq
 8006c60:	6032      	streq	r2, [r6, #0]
 8006c62:	605a      	strne	r2, [r3, #4]
 8006c64:	e7ec      	b.n	8006c40 <_malloc_r+0xa0>
 8006c66:	4623      	mov	r3, r4
 8006c68:	6864      	ldr	r4, [r4, #4]
 8006c6a:	e7b2      	b.n	8006bd2 <_malloc_r+0x32>
 8006c6c:	4634      	mov	r4, r6
 8006c6e:	6876      	ldr	r6, [r6, #4]
 8006c70:	e7b9      	b.n	8006be6 <_malloc_r+0x46>
 8006c72:	230c      	movs	r3, #12
 8006c74:	603b      	str	r3, [r7, #0]
 8006c76:	4638      	mov	r0, r7
 8006c78:	f000 f8b6 	bl	8006de8 <__malloc_unlock>
 8006c7c:	e7a1      	b.n	8006bc2 <_malloc_r+0x22>
 8006c7e:	6025      	str	r5, [r4, #0]
 8006c80:	e7de      	b.n	8006c40 <_malloc_r+0xa0>
 8006c82:	bf00      	nop
 8006c84:	20000768 	.word	0x20000768

08006c88 <_sbrk_r>:
 8006c88:	b538      	push	{r3, r4, r5, lr}
 8006c8a:	4d06      	ldr	r5, [pc, #24]	; (8006ca4 <_sbrk_r+0x1c>)
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	4604      	mov	r4, r0
 8006c90:	4608      	mov	r0, r1
 8006c92:	602b      	str	r3, [r5, #0]
 8006c94:	f7fa fafc 	bl	8001290 <_sbrk>
 8006c98:	1c43      	adds	r3, r0, #1
 8006c9a:	d102      	bne.n	8006ca2 <_sbrk_r+0x1a>
 8006c9c:	682b      	ldr	r3, [r5, #0]
 8006c9e:	b103      	cbz	r3, 8006ca2 <_sbrk_r+0x1a>
 8006ca0:	6023      	str	r3, [r4, #0]
 8006ca2:	bd38      	pop	{r3, r4, r5, pc}
 8006ca4:	20000770 	.word	0x20000770

08006ca8 <__sread>:
 8006ca8:	b510      	push	{r4, lr}
 8006caa:	460c      	mov	r4, r1
 8006cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cb0:	f000 f8a0 	bl	8006df4 <_read_r>
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	bfab      	itete	ge
 8006cb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006cba:	89a3      	ldrhlt	r3, [r4, #12]
 8006cbc:	181b      	addge	r3, r3, r0
 8006cbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cc2:	bfac      	ite	ge
 8006cc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cc6:	81a3      	strhlt	r3, [r4, #12]
 8006cc8:	bd10      	pop	{r4, pc}

08006cca <__swrite>:
 8006cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cce:	461f      	mov	r7, r3
 8006cd0:	898b      	ldrh	r3, [r1, #12]
 8006cd2:	05db      	lsls	r3, r3, #23
 8006cd4:	4605      	mov	r5, r0
 8006cd6:	460c      	mov	r4, r1
 8006cd8:	4616      	mov	r6, r2
 8006cda:	d505      	bpl.n	8006ce8 <__swrite+0x1e>
 8006cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f000 f868 	bl	8006db8 <_lseek_r>
 8006ce8:	89a3      	ldrh	r3, [r4, #12]
 8006cea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cf2:	81a3      	strh	r3, [r4, #12]
 8006cf4:	4632      	mov	r2, r6
 8006cf6:	463b      	mov	r3, r7
 8006cf8:	4628      	mov	r0, r5
 8006cfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cfe:	f000 b817 	b.w	8006d30 <_write_r>

08006d02 <__sseek>:
 8006d02:	b510      	push	{r4, lr}
 8006d04:	460c      	mov	r4, r1
 8006d06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d0a:	f000 f855 	bl	8006db8 <_lseek_r>
 8006d0e:	1c43      	adds	r3, r0, #1
 8006d10:	89a3      	ldrh	r3, [r4, #12]
 8006d12:	bf15      	itete	ne
 8006d14:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d1e:	81a3      	strheq	r3, [r4, #12]
 8006d20:	bf18      	it	ne
 8006d22:	81a3      	strhne	r3, [r4, #12]
 8006d24:	bd10      	pop	{r4, pc}

08006d26 <__sclose>:
 8006d26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d2a:	f000 b813 	b.w	8006d54 <_close_r>
	...

08006d30 <_write_r>:
 8006d30:	b538      	push	{r3, r4, r5, lr}
 8006d32:	4d07      	ldr	r5, [pc, #28]	; (8006d50 <_write_r+0x20>)
 8006d34:	4604      	mov	r4, r0
 8006d36:	4608      	mov	r0, r1
 8006d38:	4611      	mov	r1, r2
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	602a      	str	r2, [r5, #0]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	f7fa fa55 	bl	80011ee <_write>
 8006d44:	1c43      	adds	r3, r0, #1
 8006d46:	d102      	bne.n	8006d4e <_write_r+0x1e>
 8006d48:	682b      	ldr	r3, [r5, #0]
 8006d4a:	b103      	cbz	r3, 8006d4e <_write_r+0x1e>
 8006d4c:	6023      	str	r3, [r4, #0]
 8006d4e:	bd38      	pop	{r3, r4, r5, pc}
 8006d50:	20000770 	.word	0x20000770

08006d54 <_close_r>:
 8006d54:	b538      	push	{r3, r4, r5, lr}
 8006d56:	4d06      	ldr	r5, [pc, #24]	; (8006d70 <_close_r+0x1c>)
 8006d58:	2300      	movs	r3, #0
 8006d5a:	4604      	mov	r4, r0
 8006d5c:	4608      	mov	r0, r1
 8006d5e:	602b      	str	r3, [r5, #0]
 8006d60:	f7fa fa61 	bl	8001226 <_close>
 8006d64:	1c43      	adds	r3, r0, #1
 8006d66:	d102      	bne.n	8006d6e <_close_r+0x1a>
 8006d68:	682b      	ldr	r3, [r5, #0]
 8006d6a:	b103      	cbz	r3, 8006d6e <_close_r+0x1a>
 8006d6c:	6023      	str	r3, [r4, #0]
 8006d6e:	bd38      	pop	{r3, r4, r5, pc}
 8006d70:	20000770 	.word	0x20000770

08006d74 <_fstat_r>:
 8006d74:	b538      	push	{r3, r4, r5, lr}
 8006d76:	4d07      	ldr	r5, [pc, #28]	; (8006d94 <_fstat_r+0x20>)
 8006d78:	2300      	movs	r3, #0
 8006d7a:	4604      	mov	r4, r0
 8006d7c:	4608      	mov	r0, r1
 8006d7e:	4611      	mov	r1, r2
 8006d80:	602b      	str	r3, [r5, #0]
 8006d82:	f7fa fa5c 	bl	800123e <_fstat>
 8006d86:	1c43      	adds	r3, r0, #1
 8006d88:	d102      	bne.n	8006d90 <_fstat_r+0x1c>
 8006d8a:	682b      	ldr	r3, [r5, #0]
 8006d8c:	b103      	cbz	r3, 8006d90 <_fstat_r+0x1c>
 8006d8e:	6023      	str	r3, [r4, #0]
 8006d90:	bd38      	pop	{r3, r4, r5, pc}
 8006d92:	bf00      	nop
 8006d94:	20000770 	.word	0x20000770

08006d98 <_isatty_r>:
 8006d98:	b538      	push	{r3, r4, r5, lr}
 8006d9a:	4d06      	ldr	r5, [pc, #24]	; (8006db4 <_isatty_r+0x1c>)
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	4604      	mov	r4, r0
 8006da0:	4608      	mov	r0, r1
 8006da2:	602b      	str	r3, [r5, #0]
 8006da4:	f7fa fa5b 	bl	800125e <_isatty>
 8006da8:	1c43      	adds	r3, r0, #1
 8006daa:	d102      	bne.n	8006db2 <_isatty_r+0x1a>
 8006dac:	682b      	ldr	r3, [r5, #0]
 8006dae:	b103      	cbz	r3, 8006db2 <_isatty_r+0x1a>
 8006db0:	6023      	str	r3, [r4, #0]
 8006db2:	bd38      	pop	{r3, r4, r5, pc}
 8006db4:	20000770 	.word	0x20000770

08006db8 <_lseek_r>:
 8006db8:	b538      	push	{r3, r4, r5, lr}
 8006dba:	4d07      	ldr	r5, [pc, #28]	; (8006dd8 <_lseek_r+0x20>)
 8006dbc:	4604      	mov	r4, r0
 8006dbe:	4608      	mov	r0, r1
 8006dc0:	4611      	mov	r1, r2
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	602a      	str	r2, [r5, #0]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	f7fa fa54 	bl	8001274 <_lseek>
 8006dcc:	1c43      	adds	r3, r0, #1
 8006dce:	d102      	bne.n	8006dd6 <_lseek_r+0x1e>
 8006dd0:	682b      	ldr	r3, [r5, #0]
 8006dd2:	b103      	cbz	r3, 8006dd6 <_lseek_r+0x1e>
 8006dd4:	6023      	str	r3, [r4, #0]
 8006dd6:	bd38      	pop	{r3, r4, r5, pc}
 8006dd8:	20000770 	.word	0x20000770

08006ddc <__malloc_lock>:
 8006ddc:	4801      	ldr	r0, [pc, #4]	; (8006de4 <__malloc_lock+0x8>)
 8006dde:	f7ff be0b 	b.w	80069f8 <__retarget_lock_acquire_recursive>
 8006de2:	bf00      	nop
 8006de4:	20000764 	.word	0x20000764

08006de8 <__malloc_unlock>:
 8006de8:	4801      	ldr	r0, [pc, #4]	; (8006df0 <__malloc_unlock+0x8>)
 8006dea:	f7ff be06 	b.w	80069fa <__retarget_lock_release_recursive>
 8006dee:	bf00      	nop
 8006df0:	20000764 	.word	0x20000764

08006df4 <_read_r>:
 8006df4:	b538      	push	{r3, r4, r5, lr}
 8006df6:	4d07      	ldr	r5, [pc, #28]	; (8006e14 <_read_r+0x20>)
 8006df8:	4604      	mov	r4, r0
 8006dfa:	4608      	mov	r0, r1
 8006dfc:	4611      	mov	r1, r2
 8006dfe:	2200      	movs	r2, #0
 8006e00:	602a      	str	r2, [r5, #0]
 8006e02:	461a      	mov	r2, r3
 8006e04:	f7fa f9d6 	bl	80011b4 <_read>
 8006e08:	1c43      	adds	r3, r0, #1
 8006e0a:	d102      	bne.n	8006e12 <_read_r+0x1e>
 8006e0c:	682b      	ldr	r3, [r5, #0]
 8006e0e:	b103      	cbz	r3, 8006e12 <_read_r+0x1e>
 8006e10:	6023      	str	r3, [r4, #0]
 8006e12:	bd38      	pop	{r3, r4, r5, pc}
 8006e14:	20000770 	.word	0x20000770

08006e18 <_init>:
 8006e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e1a:	bf00      	nop
 8006e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e1e:	bc08      	pop	{r3}
 8006e20:	469e      	mov	lr, r3
 8006e22:	4770      	bx	lr

08006e24 <_fini>:
 8006e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e26:	bf00      	nop
 8006e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e2a:	bc08      	pop	{r3}
 8006e2c:	469e      	mov	lr, r3
 8006e2e:	4770      	bx	lr
