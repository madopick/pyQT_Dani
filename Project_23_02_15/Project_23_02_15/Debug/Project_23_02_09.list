
Project_23_02_09.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ecc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800609c  0800609c  0001609c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800618c  0800618c  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  0800618c  0800618c  0001618c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006194  08006194  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006194  08006194  00016194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006198  08006198  00016198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800619c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000010c  080062a8  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  080062a8  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b323  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f33  00000000  00000000  0002b45f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  0002d398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c8  00000000  00000000  0002dc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021e09  00000000  00000000  0002e3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cef7  00000000  00000000  000501e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8cd0  00000000  00000000  0005d0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00125da8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002650  00000000  00000000  00125df8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000010c 	.word	0x2000010c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006084 	.word	0x08006084

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000110 	.word	0x20000110
 800020c:	08006084 	.word	0x08006084

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init(); //
 80005c8:	f002 f93a 	bl	8002840 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f806 	bl	80005dc <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 80005d0:	f000 f8a2 	bl	8000718 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005d4:	f000 f874 	bl	80006c0 <MX_USART2_UART_Init>
  //printf("Hallo\r\n");

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80005d8:	e7fe      	b.n	80005d8 <main+0x14>
	...

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	; 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	2234      	movs	r2, #52	; 0x34
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f005 f8ce 	bl	800578c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 0308 	add.w	r3, r7, #8
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage*/
  __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b2c      	ldr	r3, [pc, #176]	; (80006b8 <SystemClock_Config+0xdc>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	4a2b      	ldr	r2, [pc, #172]	; (80006b8 <SystemClock_Config+0xdc>)
 800060a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060e:	6413      	str	r3, [r2, #64]	; 0x40
 8000610:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <SystemClock_Config+0xdc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061c:	2300      	movs	r3, #0
 800061e:	603b      	str	r3, [r7, #0]
 8000620:	4b26      	ldr	r3, [pc, #152]	; (80006bc <SystemClock_Config+0xe0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a25      	ldr	r2, [pc, #148]	; (80006bc <SystemClock_Config+0xe0>)
 8000626:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b23      	ldr	r3, [pc, #140]	; (80006bc <SystemClock_Config+0xe0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000634:	603b      	str	r3, [r7, #0]
 8000636:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.*/
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000638:	2302      	movs	r3, #2
 800063a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000640:	2310      	movs	r3, #16
 8000642:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000644:	2302      	movs	r3, #2
 8000646:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000648:	2300      	movs	r3, #0
 800064a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800064c:	2310      	movs	r3, #16
 800064e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8000650:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000654:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000656:	2302      	movs	r3, #2
 8000658:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800065a:	2302      	movs	r3, #2
 800065c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800065e:	2302      	movs	r3, #2
 8000660:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	4618      	mov	r0, r3
 8000668:	f003 fb9e 	bl	8003da8 <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000672:	f000 faee 	bl	8000c52 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000676:	f002 fffd 	bl	8003674 <HAL_PWREx_EnableOverDrive>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000680:	f000 fae7 	bl	8000c52 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	2302      	movs	r3, #2
 800068a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000690:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000694:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800069a:	f107 0308 	add.w	r3, r7, #8
 800069e:	2105      	movs	r1, #5
 80006a0:	4618      	mov	r0, r3
 80006a2:	f003 f837 	bl	8003714 <HAL_RCC_ClockConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006ac:	f000 fad1 	bl	8000c52 <Error_Handler>
  }
}
 80006b0:	bf00      	nop
 80006b2:	3750      	adds	r7, #80	; 0x50
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  huart2.Instance 			= USART2;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <MX_USART2_UART_Init+0x50>)
 80006c6:	4a13      	ldr	r2, [pc, #76]	; (8000714 <MX_USART2_UART_Init+0x54>)
 80006c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate 		= 115200;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_USART2_UART_Init+0x50>)
 80006cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength 	= UART_WORDLENGTH_8B;
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_USART2_UART_Init+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits 		= UART_STOPBITS_1;
 80006d8:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <MX_USART2_UART_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity 		= UART_PARITY_NONE;
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_USART2_UART_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode 			= UART_MODE_TX_RX;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <MX_USART2_UART_Init+0x50>)
 80006e6:	220c      	movs	r2, #12
 80006e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl 	= UART_HWCONTROL_NONE;
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_USART2_UART_Init+0x50>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling 	= UART_OVERSAMPLING_16;
 80006f0:	4b07      	ldr	r3, [pc, #28]	; (8000710 <MX_USART2_UART_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006f6:	4806      	ldr	r0, [pc, #24]	; (8000710 <MX_USART2_UART_Init+0x50>)
 80006f8:	f003 fdf4 	bl	80042e4 <HAL_UART_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000702:	f000 faa6 	bl	8000c52 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

  serial_init();
 8000706:	f000 faa7 	bl	8000c58 <serial_init>

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000128 	.word	0x20000128
 8000714:	40004400 	.word	0x40004400

08000718 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_DMA_Init+0x3c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a0b      	ldr	r2, [pc, #44]	; (8000754 <MX_DMA_Init+0x3c>)
 8000728:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_DMA_Init+0x3c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800073a:	2200      	movs	r2, #0
 800073c:	2100      	movs	r1, #0
 800073e:	2010      	movs	r0, #16
 8000740:	f002 f9cb 	bl	8002ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000744:	2010      	movs	r0, #16
 8000746:	f002 f9e4 	bl	8002b12 <HAL_NVIC_EnableIRQ>

}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800

08000758 <tinysh_dec>:

/*********************************************************************
 * @name	: tinysh_dec
 * @brief	: string to decimal conversion (up to 15 chars).
 *********************************************************************/
unsigned long tinysh_dec(char *s) {
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  unsigned long res=0;
 8000760:	2300      	movs	r3, #0
 8000762:	60fb      	str	r3, [r7, #12]
  uint8_t index = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	72fb      	strb	r3, [r7, #11]
  int8_t min	= 1;			//Penanda masukan - atau +
 8000768:	2301      	movs	r3, #1
 800076a:	72bb      	strb	r3, [r7, #10]

  while(*s) {
 800076c:	e031      	b.n	80007d2 <tinysh_dec+0x7a>
	  res*=10;					//berfungsi menjadikan result kelipatan pangkat 10 (menjadikan puluhan)
 800076e:	68fa      	ldr	r2, [r7, #12]
 8000770:	4613      	mov	r3, r2
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	4413      	add	r3, r2
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	60fb      	str	r3, [r7, #12]

	  if((*s == '-')&&(index == 0))			// jika inputan negatif
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b2d      	cmp	r3, #45	; 0x2d
 8000780:	d105      	bne.n	800078e <tinysh_dec+0x36>
 8000782:	7afb      	ldrb	r3, [r7, #11]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d102      	bne.n	800078e <tinysh_dec+0x36>
		  min = -1;
 8000788:	23ff      	movs	r3, #255	; 0xff
 800078a:	72bb      	strb	r3, [r7, #10]
 800078c:	e018      	b.n	80007c0 <tinysh_dec+0x68>
	  else if((*s == '0')&&(index == 0))	// jika inputan 0
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b30      	cmp	r3, #48	; 0x30
 8000794:	d105      	bne.n	80007a2 <tinysh_dec+0x4a>
 8000796:	7afb      	ldrb	r3, [r7, #11]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d102      	bne.n	80007a2 <tinysh_dec+0x4a>
		  res = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	e00e      	b.n	80007c0 <tinysh_dec+0x68>
	  else if(*s>='0' && *s<='9')			// jika inputan normal
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b2f      	cmp	r3, #47	; 0x2f
 80007a8:	d919      	bls.n	80007de <tinysh_dec+0x86>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b39      	cmp	r3, #57	; 0x39
 80007b0:	d815      	bhi.n	80007de <tinysh_dec+0x86>
		  res+=*s-'0';			//bagian ini berfungsi mengurangi ascii inputna dengan ascii 0 sehingga didapat nilai integer sesungguhnya
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	461a      	mov	r2, r3
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	4413      	add	r3, r2
 80007bc:	3b30      	subs	r3, #48	; 0x30
 80007be:	60fb      	str	r3, [r7, #12]
	  else
		  break;

	  s++;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3301      	adds	r3, #1
 80007c4:	607b      	str	r3, [r7, #4]
	  index++;
 80007c6:	7afb      	ldrb	r3, [r7, #11]
 80007c8:	3301      	adds	r3, #1
 80007ca:	72fb      	strb	r3, [r7, #11]

	  if(index > 15)
 80007cc:	7afb      	ldrb	r3, [r7, #11]
 80007ce:	2b0f      	cmp	r3, #15
 80007d0:	d804      	bhi.n	80007dc <tinysh_dec+0x84>
  while(*s) {
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d1c9      	bne.n	800076e <tinysh_dec+0x16>
 80007da:	e000      	b.n	80007de <tinysh_dec+0x86>
	  {
		 break;
 80007dc:	bf00      	nop
	  }
  }

  return (res * min);
 80007de:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80007e2:	68fa      	ldr	r2, [r7, #12]
 80007e4:	fb02 f303 	mul.w	r3, r2, r3
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <vShell_cmdParse>:

/********************************************************
 * 	Parsing incoming message						   	*
 * 	Example: {MSG:1;23;21009}						*
 ********************************************************/
static void vShell_cmdParse(char *input) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08c      	sub	sp, #48	; 0x30
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	for(uint8_t u8_idx = 0; u8_idx < CFG_HEADER_NUM; u8_idx++) {
 80007fc:	2300      	movs	r3, #0
 80007fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000802:	e1b3      	b.n	8000b6c <vShell_cmdParse+0x378>
		if(!memcmp(input,(char*)&str_cfg_header[u8_idx][0], CFG_HEADER_CHARS_LEN)) {
 8000804:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000808:	4613      	mov	r3, r2
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	4413      	add	r3, r2
 800080e:	4ac8      	ldr	r2, [pc, #800]	; (8000b30 <vShell_cmdParse+0x33c>)
 8000810:	4413      	add	r3, r2
 8000812:	2205      	movs	r2, #5
 8000814:	4619      	mov	r1, r3
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f004 ff9a 	bl	8005750 <memcmp>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	f040 819f 	bne.w	8000b62 <vShell_cmdParse+0x36e>
			char *pChar 		= &input[CFG_HEADER_CHARS_LEN];		//pointer untuk menyimpan header (5 char)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3305      	adds	r3, #5
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
			char *pChar2 		= &input[CFG_HEADER_CHARS_LEN];		//pointer untuk menyimpan header (5 char)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	3305      	adds	r3, #5
 800082e:	623b      	str	r3, [r7, #32]
			uint8_t u8_start 	= 0;			// ini penanda yang akan bergeser tiap indeks (menandai lokasi dari sparating symboll)
 8000830:	2300      	movs	r3, #0
 8000832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			uint8_t u8_stop 	= 0;			// ini penenda start pointer paling awal atau awal baru setelah sparating symboll
 8000836:	2300      	movs	r3, #0
 8000838:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			uint8_t u8_cnt 		= 0;			// menampung ada berapa sih inputan nya
 800083c:	2300      	movs	r3, #0
 800083e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

			char str_res[20];				// Menyimpan satu token (satu value utuh sebelum sparating symboll)

			if (u8_idx == 1) {
 8000842:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000846:	2b01      	cmp	r3, #1
 8000848:	d175      	bne.n	8000936 <vShell_cmdParse+0x142>
				/* WRITE HEADER */
				while (*pChar) {
 800084a:	e06f      	b.n	800092c <vShell_cmdParse+0x138>
					if(*pChar == ';') {				// iterasi pertama pasti skip ini karena ini fungsinya kalo ketemu sparating symboll
 800084c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b3b      	cmp	r3, #59	; 0x3b
 8000852:	d131      	bne.n	80008b8 <vShell_cmdParse+0xc4>
						memset(&str_res[0], 0, 10);		// default/reset untuk mendeklarasikan array str_res akan bernilai 0 semua sebanyak 10 indeks mulai dari str_res[0]
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	220a      	movs	r2, #10
 800085a:	2100      	movs	r1, #0
 800085c:	4618      	mov	r0, r3
 800085e:	f004 ff95 	bl	800578c <memset>
						memcpy(&str_res[0], &pChar2[u8_stop], u8_start - u8_stop);	// mengcopy data array dari pChar2[u8_stop] sejumlah (u8_start - u8_stop0 char menuju str_res
 8000862:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000866:	6a3a      	ldr	r2, [r7, #32]
 8000868:	18d1      	adds	r1, r2, r3
 800086a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800086e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000872:	1ad3      	subs	r3, r2, r3
 8000874:	461a      	mov	r2, r3
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	4618      	mov	r0, r3
 800087c:	f004 ff78 	bl	8005770 <memcpy>
						if(strlen(str_res)>0){
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d00b      	beq.n	80008a2 <vShell_cmdParse+0xae>
							i32_res1[u8_cnt] = tinysh_dec(&str_res[0]);
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff ff62 	bl	8000758 <tinysh_dec>
 8000894:	4602      	mov	r2, r0
 8000896:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800089a:	4611      	mov	r1, r2
 800089c:	4aa5      	ldr	r2, [pc, #660]	; (8000b34 <vShell_cmdParse+0x340>)
 800089e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}

						u8_stop = u8_start + 1;
 80008a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008a6:	3301      	adds	r3, #1
 80008a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						u8_cnt++;
 80008ac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80008b0:	3301      	adds	r3, #1
 80008b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80008b6:	e031      	b.n	800091c <vShell_cmdParse+0x128>
					}
					else if (*pChar == '}') {		// konsepnya mirip yang atas, cuma dia akan break
 80008b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b7d      	cmp	r3, #125	; 0x7d
 80008be:	d12d      	bne.n	800091c <vShell_cmdParse+0x128>
						memset(&str_res[0], 0, 10);
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	220a      	movs	r2, #10
 80008c6:	2100      	movs	r1, #0
 80008c8:	4618      	mov	r0, r3
 80008ca:	f004 ff5f 	bl	800578c <memset>
						memcpy(&str_res[0], &pChar2[u8_stop], u8_start - u8_stop);
 80008ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80008d2:	6a3a      	ldr	r2, [r7, #32]
 80008d4:	18d1      	adds	r1, r2, r3
 80008d6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80008da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80008de:	1ad3      	subs	r3, r2, r3
 80008e0:	461a      	mov	r2, r3
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	4618      	mov	r0, r3
 80008e8:	f004 ff42 	bl	8005770 <memcpy>
						if(strlen(str_res)>0){
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d00b      	beq.n	800090e <vShell_cmdParse+0x11a>
							i32_res1[u8_cnt] = tinysh_dec(&str_res[0]);
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff ff2c 	bl	8000758 <tinysh_dec>
 8000900:	4602      	mov	r2, r0
 8000902:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000906:	4611      	mov	r1, r2
 8000908:	4a8a      	ldr	r2, [pc, #552]	; (8000b34 <vShell_cmdParse+0x340>)
 800090a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}

						u8_cnt++;
 800090e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000912:	3301      	adds	r3, #1
 8000914:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						break;
 8000918:	bf00      	nop
					}
					pChar++;
					u8_start++;
				}
				break;
 800091a:	e12d      	b.n	8000b78 <vShell_cmdParse+0x384>
					pChar++;
 800091c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800091e:	3301      	adds	r3, #1
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
					u8_start++;
 8000922:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000926:	3301      	adds	r3, #1
 8000928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				while (*pChar) {
 800092c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d18b      	bne.n	800084c <vShell_cmdParse+0x58>
				break;
 8000934:	e120      	b.n	8000b78 <vShell_cmdParse+0x384>
			}

			else if (u8_idx == 2) {
 8000936:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800093a:	2b02      	cmp	r3, #2
 800093c:	d175      	bne.n	8000a2a <vShell_cmdParse+0x236>
				/* WRITE HEADER */
				while (*pChar) {
 800093e:	e06f      	b.n	8000a20 <vShell_cmdParse+0x22c>
					if(*pChar == ';') {				// iterasi pertama pasti skip ini karena ini fungsinya kalo ketemu sparating symboll
 8000940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b3b      	cmp	r3, #59	; 0x3b
 8000946:	d131      	bne.n	80009ac <vShell_cmdParse+0x1b8>
						memset(&str_res[0], 0, 10);		// default/reset untuk mendeklarasikan array str_res akan bernilai 0 semua sebanyak 10 indeks mulai dari str_res[0]
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	220a      	movs	r2, #10
 800094e:	2100      	movs	r1, #0
 8000950:	4618      	mov	r0, r3
 8000952:	f004 ff1b 	bl	800578c <memset>
						memcpy(&str_res[0], &pChar2[u8_stop], u8_start - u8_stop);	// mengcopy data array dari pChar2[u8_stop] sejumlah (u8_start - u8_stop0 char menuju str_res
 8000956:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800095a:	6a3a      	ldr	r2, [r7, #32]
 800095c:	18d1      	adds	r1, r2, r3
 800095e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000962:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000966:	1ad3      	subs	r3, r2, r3
 8000968:	461a      	mov	r2, r3
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	4618      	mov	r0, r3
 8000970:	f004 fefe 	bl	8005770 <memcpy>
						if(strlen(str_res)>0){
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d00b      	beq.n	8000996 <vShell_cmdParse+0x1a2>
							i32_res2[u8_cnt] = tinysh_dec(&str_res[0]);
 800097e:	f107 030c 	add.w	r3, r7, #12
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff fee8 	bl	8000758 <tinysh_dec>
 8000988:	4602      	mov	r2, r0
 800098a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800098e:	4611      	mov	r1, r2
 8000990:	4a69      	ldr	r2, [pc, #420]	; (8000b38 <vShell_cmdParse+0x344>)
 8000992:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}

						u8_stop = u8_start + 1;
 8000996:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800099a:	3301      	adds	r3, #1
 800099c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						u8_cnt++;
 80009a0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80009a4:	3301      	adds	r3, #1
 80009a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80009aa:	e031      	b.n	8000a10 <vShell_cmdParse+0x21c>
					}
					else if (*pChar == '}') {		// konsepnya mirip yang atas, cuma dia akan break
 80009ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b7d      	cmp	r3, #125	; 0x7d
 80009b2:	d12d      	bne.n	8000a10 <vShell_cmdParse+0x21c>
						memset(&str_res[0], 0, 10);
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	220a      	movs	r2, #10
 80009ba:	2100      	movs	r1, #0
 80009bc:	4618      	mov	r0, r3
 80009be:	f004 fee5 	bl	800578c <memset>
						memcpy(&str_res[0], &pChar2[u8_stop], u8_start - u8_stop);
 80009c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80009c6:	6a3a      	ldr	r2, [r7, #32]
 80009c8:	18d1      	adds	r1, r2, r3
 80009ca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80009ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80009d2:	1ad3      	subs	r3, r2, r3
 80009d4:	461a      	mov	r2, r3
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	4618      	mov	r0, r3
 80009dc:	f004 fec8 	bl	8005770 <memcpy>
						if(strlen(str_res)>0){
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d00b      	beq.n	8000a02 <vShell_cmdParse+0x20e>
							i32_res2[u8_cnt] = tinysh_dec(&str_res[0]);
 80009ea:	f107 030c 	add.w	r3, r7, #12
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff feb2 	bl	8000758 <tinysh_dec>
 80009f4:	4602      	mov	r2, r0
 80009f6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80009fa:	4611      	mov	r1, r2
 80009fc:	4a4e      	ldr	r2, [pc, #312]	; (8000b38 <vShell_cmdParse+0x344>)
 80009fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}

						u8_cnt++;
 8000a02:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000a06:	3301      	adds	r3, #1
 8000a08:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						break;
 8000a0c:	bf00      	nop
					}
					pChar++;
					u8_start++;
				}
				break;
 8000a0e:	e0a7      	b.n	8000b60 <vShell_cmdParse+0x36c>
					pChar++;
 8000a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a12:	3301      	adds	r3, #1
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
					u8_start++;
 8000a16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				while (*pChar) {
 8000a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d18b      	bne.n	8000940 <vShell_cmdParse+0x14c>
				break;
 8000a28:	e09a      	b.n	8000b60 <vShell_cmdParse+0x36c>
			}

			else if (u8_idx == 3) {
 8000a2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a2e:	2b03      	cmp	r3, #3
 8000a30:	d175      	bne.n	8000b1e <vShell_cmdParse+0x32a>
				/* WRITE HEADER */
				while (*pChar) {
 8000a32:	e06f      	b.n	8000b14 <vShell_cmdParse+0x320>
					if(*pChar == ';') {				// iterasi pertama pasti skip ini karena ini fungsinya kalo ketemu sparating symboll
 8000a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b3b      	cmp	r3, #59	; 0x3b
 8000a3a:	d131      	bne.n	8000aa0 <vShell_cmdParse+0x2ac>
						memset(&str_res[0], 0, 10);		// default/reset untuk mendeklarasikan array str_res akan bernilai 0 semua sebanyak 10 indeks mulai dari str_res[0]
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	220a      	movs	r2, #10
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f004 fea1 	bl	800578c <memset>
						memcpy(&str_res[0], &pChar2[u8_stop], u8_start - u8_stop);	// mengcopy data array dari pChar2[u8_stop] sejumlah (u8_start - u8_stop0 char menuju str_res
 8000a4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a4e:	6a3a      	ldr	r2, [r7, #32]
 8000a50:	18d1      	adds	r1, r2, r3
 8000a52:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000a56:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a5a:	1ad3      	subs	r3, r2, r3
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	f107 030c 	add.w	r3, r7, #12
 8000a62:	4618      	mov	r0, r3
 8000a64:	f004 fe84 	bl	8005770 <memcpy>
						if(strlen(str_res)>0){
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d00b      	beq.n	8000a8a <vShell_cmdParse+0x296>
							i32_res3[u8_cnt] = tinysh_dec(&str_res[0]);
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fe6e 	bl	8000758 <tinysh_dec>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000a82:	4611      	mov	r1, r2
 8000a84:	4a2d      	ldr	r2, [pc, #180]	; (8000b3c <vShell_cmdParse+0x348>)
 8000a86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}

						u8_stop = u8_start + 1;
 8000a8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a8e:	3301      	adds	r3, #1
 8000a90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						u8_cnt++;
 8000a94:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000a98:	3301      	adds	r3, #1
 8000a9a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000a9e:	e031      	b.n	8000b04 <vShell_cmdParse+0x310>
					}
					else if (*pChar == '}') {		// konsepnya mirip yang atas, cuma dia akan break
 8000aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b7d      	cmp	r3, #125	; 0x7d
 8000aa6:	d12d      	bne.n	8000b04 <vShell_cmdParse+0x310>
						memset(&str_res[0], 0, 10);
 8000aa8:	f107 030c 	add.w	r3, r7, #12
 8000aac:	220a      	movs	r2, #10
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f004 fe6b 	bl	800578c <memset>
						memcpy(&str_res[0], &pChar2[u8_stop], u8_start - u8_stop);
 8000ab6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000aba:	6a3a      	ldr	r2, [r7, #32]
 8000abc:	18d1      	adds	r1, r2, r3
 8000abe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000ac2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ac6:	1ad3      	subs	r3, r2, r3
 8000ac8:	461a      	mov	r2, r3
 8000aca:	f107 030c 	add.w	r3, r7, #12
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f004 fe4e 	bl	8005770 <memcpy>
						if(strlen(str_res)>0){
 8000ad4:	f107 030c 	add.w	r3, r7, #12
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d00b      	beq.n	8000af6 <vShell_cmdParse+0x302>
							i32_res3[u8_cnt] = tinysh_dec(&str_res[0]);
 8000ade:	f107 030c 	add.w	r3, r7, #12
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff fe38 	bl	8000758 <tinysh_dec>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000aee:	4611      	mov	r1, r2
 8000af0:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <vShell_cmdParse+0x348>)
 8000af2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}

						u8_cnt++;
 8000af6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000afa:	3301      	adds	r3, #1
 8000afc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						break;
 8000b00:	bf00      	nop
					}
					pChar++;
					u8_start++;
				}
				break;
 8000b02:	e02d      	b.n	8000b60 <vShell_cmdParse+0x36c>
					pChar++;
 8000b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b06:	3301      	adds	r3, #1
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
					u8_start++;
 8000b0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b0e:	3301      	adds	r3, #1
 8000b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				while (*pChar) {
 8000b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d18b      	bne.n	8000a34 <vShell_cmdParse+0x240>
				break;
 8000b1c:	e020      	b.n	8000b60 <vShell_cmdParse+0x36c>
			}

			else if (u8_idx == 4){
 8000b1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b22:	2b04      	cmp	r3, #4
 8000b24:	d10c      	bne.n	8000b40 <vShell_cmdParse+0x34c>
				/* READ HEADER */
				read_header(i32_res1);
 8000b26:	4803      	ldr	r0, [pc, #12]	; (8000b34 <vShell_cmdParse+0x340>)
 8000b28:	f000 f82e 	bl	8000b88 <read_header>
 8000b2c:	e019      	b.n	8000b62 <vShell_cmdParse+0x36e>
 8000b2e:	bf00      	nop
 8000b30:	20000000 	.word	0x20000000
 8000b34:	20000024 	.word	0x20000024
 8000b38:	2000004c 	.word	0x2000004c
 8000b3c:	20000074 	.word	0x20000074
			}

			else if (u8_idx == 5){
 8000b40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b44:	2b05      	cmp	r3, #5
 8000b46:	d103      	bne.n	8000b50 <vShell_cmdParse+0x35c>
				/* READ HEADER */
				read_header(i32_res2);
 8000b48:	480d      	ldr	r0, [pc, #52]	; (8000b80 <vShell_cmdParse+0x38c>)
 8000b4a:	f000 f81d 	bl	8000b88 <read_header>
 8000b4e:	e008      	b.n	8000b62 <vShell_cmdParse+0x36e>
			}

			else if (u8_idx == 6){
 8000b50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b54:	2b06      	cmp	r3, #6
 8000b56:	d104      	bne.n	8000b62 <vShell_cmdParse+0x36e>
				/* READ HEADER */
				read_header(i32_res3);
 8000b58:	480a      	ldr	r0, [pc, #40]	; (8000b84 <vShell_cmdParse+0x390>)
 8000b5a:	f000 f815 	bl	8000b88 <read_header>
 8000b5e:	e000      	b.n	8000b62 <vShell_cmdParse+0x36e>
			}
		}
	}
}
 8000b60:	e00a      	b.n	8000b78 <vShell_cmdParse+0x384>
	for(uint8_t u8_idx = 0; u8_idx < CFG_HEADER_NUM; u8_idx++) {
 8000b62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b66:	3301      	adds	r3, #1
 8000b68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000b6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b70:	2b06      	cmp	r3, #6
 8000b72:	f67f ae47 	bls.w	8000804 <vShell_cmdParse+0x10>
}
 8000b76:	e7ff      	b.n	8000b78 <vShell_cmdParse+0x384>
 8000b78:	bf00      	nop
 8000b7a:	3730      	adds	r7, #48	; 0x30
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	2000004c 	.word	0x2000004c
 8000b84:	20000074 	.word	0x20000074

08000b88 <read_header>:


void read_header(int32_t arr[]){		/* READ HEADER */
 8000b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b8a:	b0a9      	sub	sp, #164	; 0xa4
 8000b8c:	af0a      	add	r7, sp, #40	; 0x28
 8000b8e:	60f8      	str	r0, [r7, #12]
	char sendStr[STRLENMAX];
	memset (sendStr, 0, STRLENMAX);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2264      	movs	r2, #100	; 0x64
 8000b96:	2100      	movs	r1, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f004 fdf7 	bl	800578c <memset>
	snprintf(sendStr, STRLENMAX,
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	60bb      	str	r3, [r7, #8]
			"READ: %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld",
			arr[0] , arr[1], arr[2], arr[3],
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	3304      	adds	r3, #4
	snprintf(sendStr, STRLENMAX,
 8000ba8:	681b      	ldr	r3, [r3, #0]
			arr[0] , arr[1], arr[2], arr[3],
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	3208      	adds	r2, #8
	snprintf(sendStr, STRLENMAX,
 8000bae:	6812      	ldr	r2, [r2, #0]
 8000bb0:	607a      	str	r2, [r7, #4]
			arr[0] , arr[1], arr[2], arr[3],
 8000bb2:	68f9      	ldr	r1, [r7, #12]
 8000bb4:	310c      	adds	r1, #12
	snprintf(sendStr, STRLENMAX,
 8000bb6:	6809      	ldr	r1, [r1, #0]
			arr[4] , arr[5], arr[6],
 8000bb8:	68f8      	ldr	r0, [r7, #12]
 8000bba:	3010      	adds	r0, #16
	snprintf(sendStr, STRLENMAX,
 8000bbc:	6800      	ldr	r0, [r0, #0]
			arr[4] , arr[5], arr[6],
 8000bbe:	68fc      	ldr	r4, [r7, #12]
 8000bc0:	3414      	adds	r4, #20
	snprintf(sendStr, STRLENMAX,
 8000bc2:	6824      	ldr	r4, [r4, #0]
			arr[4] , arr[5], arr[6],
 8000bc4:	68fd      	ldr	r5, [r7, #12]
 8000bc6:	3518      	adds	r5, #24
	snprintf(sendStr, STRLENMAX,
 8000bc8:	682d      	ldr	r5, [r5, #0]
			arr[7] , arr[8], arr[9]);
 8000bca:	68fe      	ldr	r6, [r7, #12]
 8000bcc:	361c      	adds	r6, #28
	snprintf(sendStr, STRLENMAX,
 8000bce:	6836      	ldr	r6, [r6, #0]
			arr[7] , arr[8], arr[9]);
 8000bd0:	68fa      	ldr	r2, [r7, #12]
 8000bd2:	f102 0c20 	add.w	ip, r2, #32
	snprintf(sendStr, STRLENMAX,
 8000bd6:	f8dc 2000 	ldr.w	r2, [ip]
 8000bda:	603a      	str	r2, [r7, #0]
			arr[7] , arr[8], arr[9]);
 8000bdc:	68fa      	ldr	r2, [r7, #12]
 8000bde:	f102 0c24 	add.w	ip, r2, #36	; 0x24
	snprintf(sendStr, STRLENMAX,
 8000be2:	f8dc 2000 	ldr.w	r2, [ip]
 8000be6:	f107 0c14 	add.w	ip, r7, #20
 8000bea:	9208      	str	r2, [sp, #32]
 8000bec:	683a      	ldr	r2, [r7, #0]
 8000bee:	9207      	str	r2, [sp, #28]
 8000bf0:	9606      	str	r6, [sp, #24]
 8000bf2:	9505      	str	r5, [sp, #20]
 8000bf4:	9404      	str	r4, [sp, #16]
 8000bf6:	9003      	str	r0, [sp, #12]
 8000bf8:	9102      	str	r1, [sp, #8]
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	9201      	str	r2, [sp, #4]
 8000bfe:	9300      	str	r3, [sp, #0]
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	4a0b      	ldr	r2, [pc, #44]	; (8000c30 <read_header+0xa8>)
 8000c04:	2164      	movs	r1, #100	; 0x64
 8000c06:	4660      	mov	r0, ip
 8000c08:	f004 fdc8 	bl	800579c <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)sendStr, strlen(sendStr), 0xFFFF);
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fafd 	bl	8000210 <strlen>
 8000c16:	4603      	mov	r3, r0
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	f107 0114 	add.w	r1, r7, #20
 8000c1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c22:	4804      	ldr	r0, [pc, #16]	; (8000c34 <read_header+0xac>)
 8000c24:	f003 fbab 	bl	800437e <HAL_UART_Transmit>
	//HAL_UART_Transmit (&huart2, yang dikirim, panjangnya yang dikirim, timeout)
}
 8000c28:	bf00      	nop
 8000c2a:	377c      	adds	r7, #124	; 0x7c
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c30:	080060a0 	.word	0x080060a0
 8000c34:	20000128 	.word	0x20000128

08000c38 <uartProcessing>:


void uartProcessing (uint8_t *u8p_buffer, uint16_t u16_size)
{		//Bagian ini akan dipanggil di serial.c, line 59
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	460b      	mov	r3, r1
 8000c42:	807b      	strh	r3, [r7, #2]
	vShell_cmdParse((char*)u8p_buffer);
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff fdd5 	bl	80007f4 <vShell_cmdParse>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <Error_Handler+0x4>

08000c58 <serial_init>:
static uint8_t u8arr_uart[UART_BUF_SZ];
static uint8_t u8idx;

/* Public functions definitions */
void serial_init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* initialize serial */
  stdin_init(&hstdin, &huart2, u8arr_buffer, UART_BUF_SZ);
 8000c5c:	2340      	movs	r3, #64	; 0x40
 8000c5e:	4a07      	ldr	r2, [pc, #28]	; (8000c7c <serial_init+0x24>)
 8000c60:	4907      	ldr	r1, [pc, #28]	; (8000c80 <serial_init+0x28>)
 8000c62:	4808      	ldr	r0, [pc, #32]	; (8000c84 <serial_init+0x2c>)
 8000c64:	f000 f866 	bl	8000d34 <stdin_init>
  stdin_set_callback(&hstdin, stdin_callback);
 8000c68:	4907      	ldr	r1, [pc, #28]	; (8000c88 <serial_init+0x30>)
 8000c6a:	4806      	ldr	r0, [pc, #24]	; (8000c84 <serial_init+0x2c>)
 8000c6c:	f000 f879 	bl	8000d62 <stdin_set_callback>
  stdin_start(&hstdin);
 8000c70:	4804      	ldr	r0, [pc, #16]	; (8000c84 <serial_init+0x2c>)
 8000c72:	f000 f897 	bl	8000da4 <stdin_start>
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200001dc 	.word	0x200001dc
 8000c80:	20000128 	.word	0x20000128
 8000c84:	200001cc 	.word	0x200001cc
 8000c88:	08000cb5 	.word	0x08000cb5

08000c8c <serial_handlerUART>:

void serial_handlerUART(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  stdin_irq_uart(&hstdin);
 8000c90:	4802      	ldr	r0, [pc, #8]	; (8000c9c <serial_handlerUART+0x10>)
 8000c92:	f001 fbf5 	bl	8002480 <stdin_irq_uart>
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200001cc 	.word	0x200001cc

08000ca0 <serial_handlerDMA>:

void serial_handlerDMA(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  stdin_irq_dma(&hstdin);
 8000ca4:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <serial_handlerDMA+0x10>)
 8000ca6:	f000 f8b3 	bl	8000e10 <stdin_irq_dma>
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200001cc 	.word	0x200001cc

08000cb4 <stdin_callback>:

/* Private function definitions */
static void stdin_callback(uint8_t *u8p_buffer, uint16_t u16_size)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	807b      	strh	r3, [r7, #2]
	//printf("UART RX Handler\r\n\n");

	memcpy(&u8arr_uart[u8idx], u8p_buffer, u16_size);
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <stdin_callback+0x78>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <stdin_callback+0x7c>)
 8000cc8:	4413      	add	r3, r2
 8000cca:	887a      	ldrh	r2, [r7, #2]
 8000ccc:	6879      	ldr	r1, [r7, #4]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f004 fd4e 	bl	8005770 <memcpy>
	u8idx += u16_size;
 8000cd4:	887b      	ldrh	r3, [r7, #2]
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <stdin_callback+0x78>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	4413      	add	r3, r2
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <stdin_callback+0x78>)
 8000ce2:	701a      	strb	r2, [r3, #0]

	if((u8p_buffer[u16_size - 1] == '\n')&&(u8p_buffer[u16_size - 2]== '\r'))
 8000ce4:	887b      	ldrh	r3, [r7, #2]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	4413      	add	r3, r2
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b0a      	cmp	r3, #10
 8000cf0:	d117      	bne.n	8000d22 <stdin_callback+0x6e>
 8000cf2:	887b      	ldrh	r3, [r7, #2]
 8000cf4:	3b02      	subs	r3, #2
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b0d      	cmp	r3, #13
 8000cfe:	d110      	bne.n	8000d22 <stdin_callback+0x6e>
	{
		uartProcessing (u8arr_uart, u8idx - 2);
 8000d00:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <stdin_callback+0x78>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	3b02      	subs	r3, #2
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4808      	ldr	r0, [pc, #32]	; (8000d30 <stdin_callback+0x7c>)
 8000d0e:	f7ff ff93 	bl	8000c38 <uartProcessing>
		memset(u8arr_uart, 0, UART_BUF_SZ);
 8000d12:	2240      	movs	r2, #64	; 0x40
 8000d14:	2100      	movs	r1, #0
 8000d16:	4806      	ldr	r0, [pc, #24]	; (8000d30 <stdin_callback+0x7c>)
 8000d18:	f004 fd38 	bl	800578c <memset>
		u8idx = 0;
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <stdin_callback+0x78>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	701a      	strb	r2, [r3, #0]
	}
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	2000025c 	.word	0x2000025c
 8000d30:	2000021c 	.word	0x2000021c

08000d34 <stdin_init>:
static void fill_buffer(stdin_t *in, uint16_t pos, uint16_t size);

/* Public function implementations
 * --------------------------------------------*/
void stdin_init(stdin_t *in, UART_HandleTypeDef *uart, uint8_t *buffer, uint16_t size)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
 8000d40:	807b      	strh	r3, [r7, #2]
  in->huart = uart;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	68ba      	ldr	r2, [r7, #8]
 8000d46:	601a      	str	r2, [r3, #0]
  in->buffer = buffer;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
  in->size = size;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	887a      	ldrh	r2, [r7, #2]
 8000d52:	819a      	strh	r2, [r3, #12]

  stdin_flush(in);
 8000d54:	68f8      	ldr	r0, [r7, #12]
 8000d56:	f000 f812 	bl	8000d7e <stdin_flush>
}
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <stdin_set_callback>:

void stdin_set_callback(stdin_t *in, stdin_callback_t cb)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
  in->callback = cb;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	683a      	ldr	r2, [r7, #0]
 8000d70:	605a      	str	r2, [r3, #4]
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <stdin_flush>:

void stdin_flush(stdin_t *in)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
  memset(in->buffer, 0, in->size);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6898      	ldr	r0, [r3, #8]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	899b      	ldrh	r3, [r3, #12]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	2100      	movs	r1, #0
 8000d92:	f004 fcfb 	bl	800578c <memset>
  in->pos = 0;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	81da      	strh	r2, [r3, #14]
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <stdin_start>:

HAL_StatusTypeDef stdin_start(stdin_t *in)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Enable interrupts */
  __HAL_UART_ENABLE_IT(in->huart, UART_IT_IDLE);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	68da      	ldr	r2, [r3, #12]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f042 0210 	orr.w	r2, r2, #16
 8000dbe:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(HDMA(in), DMA_IT_TC);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f042 0210 	orr.w	r2, r2, #16
 8000dd6:	601a      	str	r2, [r3, #0]
  __HAL_DMA_ENABLE_IT(HDMA(in), DMA_IT_HT);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f042 0208 	orr.w	r2, r2, #8
 8000dee:	601a      	str	r2, [r3, #0]

  /* Start receiving UART in DMA mode */
  status = HAL_UART_Receive_DMA(in->huart, in->buffer, in->size);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6818      	ldr	r0, [r3, #0]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6899      	ldr	r1, [r3, #8]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	899b      	ldrh	r3, [r3, #12]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	f003 fb50 	bl	80044a2 <HAL_UART_Receive_DMA>
 8000e02:	4603      	mov	r3, r0
 8000e04:	73fb      	strb	r3, [r7, #15]
  return (status);
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <stdin_irq_dma>:
  status = HAL_UART_DMAStop(in->huart);
  return (status);
}

void stdin_irq_dma(stdin_t *in)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Handle HT interrupt */
  if (__HAL_DMA_GET_IT_SOURCE(HDMA(in), DMA_IT_HT))
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f003 0308 	and.w	r3, r3, #8
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	f000 823c 	beq.w	80012a4 <stdin_irq_dma+0x494>
  {
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_HT_FLAG_INDEX(HDMA(in)));
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b7f      	ldr	r3, [pc, #508]	; (8001034 <stdin_irq_dma+0x224>)
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d978      	bls.n	8000f2e <stdin_irq_dma+0x11e>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a7c      	ldr	r2, [pc, #496]	; (8001038 <stdin_irq_dma+0x228>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d06d      	beq.n	8000f26 <stdin_irq_dma+0x116>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a7a      	ldr	r2, [pc, #488]	; (800103c <stdin_irq_dma+0x22c>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d064      	beq.n	8000f22 <stdin_irq_dma+0x112>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a77      	ldr	r2, [pc, #476]	; (8001040 <stdin_irq_dma+0x230>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d05b      	beq.n	8000f1e <stdin_irq_dma+0x10e>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a75      	ldr	r2, [pc, #468]	; (8001044 <stdin_irq_dma+0x234>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d052      	beq.n	8000f1a <stdin_irq_dma+0x10a>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a72      	ldr	r2, [pc, #456]	; (8001048 <stdin_irq_dma+0x238>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d048      	beq.n	8000f14 <stdin_irq_dma+0x104>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a70      	ldr	r2, [pc, #448]	; (800104c <stdin_irq_dma+0x23c>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d03e      	beq.n	8000f0e <stdin_irq_dma+0xfe>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a6d      	ldr	r2, [pc, #436]	; (8001050 <stdin_irq_dma+0x240>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d034      	beq.n	8000f08 <stdin_irq_dma+0xf8>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a6b      	ldr	r2, [pc, #428]	; (8001054 <stdin_irq_dma+0x244>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d02a      	beq.n	8000f02 <stdin_irq_dma+0xf2>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a68      	ldr	r2, [pc, #416]	; (8001058 <stdin_irq_dma+0x248>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d020      	beq.n	8000efc <stdin_irq_dma+0xec>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a66      	ldr	r2, [pc, #408]	; (800105c <stdin_irq_dma+0x24c>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d016      	beq.n	8000ef6 <stdin_irq_dma+0xe6>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a63      	ldr	r2, [pc, #396]	; (8001060 <stdin_irq_dma+0x250>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d00c      	beq.n	8000ef0 <stdin_irq_dma+0xe0>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a61      	ldr	r2, [pc, #388]	; (8001064 <stdin_irq_dma+0x254>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d102      	bne.n	8000eea <stdin_irq_dma+0xda>
 8000ee4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ee8:	e01e      	b.n	8000f28 <stdin_irq_dma+0x118>
 8000eea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000eee:	e01b      	b.n	8000f28 <stdin_irq_dma+0x118>
 8000ef0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ef4:	e018      	b.n	8000f28 <stdin_irq_dma+0x118>
 8000ef6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000efa:	e015      	b.n	8000f28 <stdin_irq_dma+0x118>
 8000efc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f00:	e012      	b.n	8000f28 <stdin_irq_dma+0x118>
 8000f02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f06:	e00f      	b.n	8000f28 <stdin_irq_dma+0x118>
 8000f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f0c:	e00c      	b.n	8000f28 <stdin_irq_dma+0x118>
 8000f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f12:	e009      	b.n	8000f28 <stdin_irq_dma+0x118>
 8000f14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f18:	e006      	b.n	8000f28 <stdin_irq_dma+0x118>
 8000f1a:	2310      	movs	r3, #16
 8000f1c:	e004      	b.n	8000f28 <stdin_irq_dma+0x118>
 8000f1e:	2310      	movs	r3, #16
 8000f20:	e002      	b.n	8000f28 <stdin_irq_dma+0x118>
 8000f22:	2310      	movs	r3, #16
 8000f24:	e000      	b.n	8000f28 <stdin_irq_dma+0x118>
 8000f26:	2310      	movs	r3, #16
 8000f28:	4a4f      	ldr	r2, [pc, #316]	; (8001068 <stdin_irq_dma+0x258>)
 8000f2a:	60d3      	str	r3, [r2, #12]
 8000f2c:	e199      	b.n	8001262 <stdin_irq_dma+0x452>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	461a      	mov	r2, r3
 8000f38:	4b4c      	ldr	r3, [pc, #304]	; (800106c <stdin_irq_dma+0x25c>)
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	f240 8098 	bls.w	8001070 <stdin_irq_dma+0x260>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a3b      	ldr	r2, [pc, #236]	; (8001038 <stdin_irq_dma+0x228>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d06d      	beq.n	800102a <stdin_irq_dma+0x21a>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a39      	ldr	r2, [pc, #228]	; (800103c <stdin_irq_dma+0x22c>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d064      	beq.n	8001026 <stdin_irq_dma+0x216>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a36      	ldr	r2, [pc, #216]	; (8001040 <stdin_irq_dma+0x230>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d05b      	beq.n	8001022 <stdin_irq_dma+0x212>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a34      	ldr	r2, [pc, #208]	; (8001044 <stdin_irq_dma+0x234>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d052      	beq.n	800101e <stdin_irq_dma+0x20e>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a31      	ldr	r2, [pc, #196]	; (8001048 <stdin_irq_dma+0x238>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d048      	beq.n	8001018 <stdin_irq_dma+0x208>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a2f      	ldr	r2, [pc, #188]	; (800104c <stdin_irq_dma+0x23c>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d03e      	beq.n	8001012 <stdin_irq_dma+0x202>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a2c      	ldr	r2, [pc, #176]	; (8001050 <stdin_irq_dma+0x240>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d034      	beq.n	800100c <stdin_irq_dma+0x1fc>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a2a      	ldr	r2, [pc, #168]	; (8001054 <stdin_irq_dma+0x244>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d02a      	beq.n	8001006 <stdin_irq_dma+0x1f6>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a27      	ldr	r2, [pc, #156]	; (8001058 <stdin_irq_dma+0x248>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d020      	beq.n	8001000 <stdin_irq_dma+0x1f0>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a25      	ldr	r2, [pc, #148]	; (800105c <stdin_irq_dma+0x24c>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d016      	beq.n	8000ffa <stdin_irq_dma+0x1ea>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a22      	ldr	r2, [pc, #136]	; (8001060 <stdin_irq_dma+0x250>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d00c      	beq.n	8000ff4 <stdin_irq_dma+0x1e4>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a20      	ldr	r2, [pc, #128]	; (8001064 <stdin_irq_dma+0x254>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d102      	bne.n	8000fee <stdin_irq_dma+0x1de>
 8000fe8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000fec:	e01e      	b.n	800102c <stdin_irq_dma+0x21c>
 8000fee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000ff2:	e01b      	b.n	800102c <stdin_irq_dma+0x21c>
 8000ff4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ff8:	e018      	b.n	800102c <stdin_irq_dma+0x21c>
 8000ffa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ffe:	e015      	b.n	800102c <stdin_irq_dma+0x21c>
 8001000:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001004:	e012      	b.n	800102c <stdin_irq_dma+0x21c>
 8001006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800100a:	e00f      	b.n	800102c <stdin_irq_dma+0x21c>
 800100c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001010:	e00c      	b.n	800102c <stdin_irq_dma+0x21c>
 8001012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001016:	e009      	b.n	800102c <stdin_irq_dma+0x21c>
 8001018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800101c:	e006      	b.n	800102c <stdin_irq_dma+0x21c>
 800101e:	2310      	movs	r3, #16
 8001020:	e004      	b.n	800102c <stdin_irq_dma+0x21c>
 8001022:	2310      	movs	r3, #16
 8001024:	e002      	b.n	800102c <stdin_irq_dma+0x21c>
 8001026:	2310      	movs	r3, #16
 8001028:	e000      	b.n	800102c <stdin_irq_dma+0x21c>
 800102a:	2310      	movs	r3, #16
 800102c:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <stdin_irq_dma+0x258>)
 800102e:	6093      	str	r3, [r2, #8]
 8001030:	e117      	b.n	8001262 <stdin_irq_dma+0x452>
 8001032:	bf00      	nop
 8001034:	40026458 	.word	0x40026458
 8001038:	40026010 	.word	0x40026010
 800103c:	40026410 	.word	0x40026410
 8001040:	40026070 	.word	0x40026070
 8001044:	40026470 	.word	0x40026470
 8001048:	40026028 	.word	0x40026028
 800104c:	40026428 	.word	0x40026428
 8001050:	40026088 	.word	0x40026088
 8001054:	40026488 	.word	0x40026488
 8001058:	40026040 	.word	0x40026040
 800105c:	40026440 	.word	0x40026440
 8001060:	400260a0 	.word	0x400260a0
 8001064:	400264a0 	.word	0x400264a0
 8001068:	40026400 	.word	0x40026400
 800106c:	400260b8 	.word	0x400260b8
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	4b7c      	ldr	r3, [pc, #496]	; (800126c <stdin_irq_dma+0x45c>)
 800107c:	429a      	cmp	r2, r3
 800107e:	d978      	bls.n	8001172 <stdin_irq_dma+0x362>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a79      	ldr	r2, [pc, #484]	; (8001270 <stdin_irq_dma+0x460>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d06d      	beq.n	800116a <stdin_irq_dma+0x35a>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a77      	ldr	r2, [pc, #476]	; (8001274 <stdin_irq_dma+0x464>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d064      	beq.n	8001166 <stdin_irq_dma+0x356>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a74      	ldr	r2, [pc, #464]	; (8001278 <stdin_irq_dma+0x468>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d05b      	beq.n	8001162 <stdin_irq_dma+0x352>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a72      	ldr	r2, [pc, #456]	; (800127c <stdin_irq_dma+0x46c>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d052      	beq.n	800115e <stdin_irq_dma+0x34e>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a6f      	ldr	r2, [pc, #444]	; (8001280 <stdin_irq_dma+0x470>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d048      	beq.n	8001158 <stdin_irq_dma+0x348>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a6d      	ldr	r2, [pc, #436]	; (8001284 <stdin_irq_dma+0x474>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d03e      	beq.n	8001152 <stdin_irq_dma+0x342>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a6a      	ldr	r2, [pc, #424]	; (8001288 <stdin_irq_dma+0x478>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d034      	beq.n	800114c <stdin_irq_dma+0x33c>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a68      	ldr	r2, [pc, #416]	; (800128c <stdin_irq_dma+0x47c>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d02a      	beq.n	8001146 <stdin_irq_dma+0x336>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a65      	ldr	r2, [pc, #404]	; (8001290 <stdin_irq_dma+0x480>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d020      	beq.n	8001140 <stdin_irq_dma+0x330>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a63      	ldr	r2, [pc, #396]	; (8001294 <stdin_irq_dma+0x484>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d016      	beq.n	800113a <stdin_irq_dma+0x32a>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a60      	ldr	r2, [pc, #384]	; (8001298 <stdin_irq_dma+0x488>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d00c      	beq.n	8001134 <stdin_irq_dma+0x324>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a5e      	ldr	r2, [pc, #376]	; (800129c <stdin_irq_dma+0x48c>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d102      	bne.n	800112e <stdin_irq_dma+0x31e>
 8001128:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800112c:	e01e      	b.n	800116c <stdin_irq_dma+0x35c>
 800112e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001132:	e01b      	b.n	800116c <stdin_irq_dma+0x35c>
 8001134:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001138:	e018      	b.n	800116c <stdin_irq_dma+0x35c>
 800113a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800113e:	e015      	b.n	800116c <stdin_irq_dma+0x35c>
 8001140:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001144:	e012      	b.n	800116c <stdin_irq_dma+0x35c>
 8001146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800114a:	e00f      	b.n	800116c <stdin_irq_dma+0x35c>
 800114c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001150:	e00c      	b.n	800116c <stdin_irq_dma+0x35c>
 8001152:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001156:	e009      	b.n	800116c <stdin_irq_dma+0x35c>
 8001158:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800115c:	e006      	b.n	800116c <stdin_irq_dma+0x35c>
 800115e:	2310      	movs	r3, #16
 8001160:	e004      	b.n	800116c <stdin_irq_dma+0x35c>
 8001162:	2310      	movs	r3, #16
 8001164:	e002      	b.n	800116c <stdin_irq_dma+0x35c>
 8001166:	2310      	movs	r3, #16
 8001168:	e000      	b.n	800116c <stdin_irq_dma+0x35c>
 800116a:	2310      	movs	r3, #16
 800116c:	4a4c      	ldr	r2, [pc, #304]	; (80012a0 <stdin_irq_dma+0x490>)
 800116e:	60d3      	str	r3, [r2, #12]
 8001170:	e077      	b.n	8001262 <stdin_irq_dma+0x452>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a3d      	ldr	r2, [pc, #244]	; (8001270 <stdin_irq_dma+0x460>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d06d      	beq.n	800125c <stdin_irq_dma+0x44c>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a3a      	ldr	r2, [pc, #232]	; (8001274 <stdin_irq_dma+0x464>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d064      	beq.n	8001258 <stdin_irq_dma+0x448>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a38      	ldr	r2, [pc, #224]	; (8001278 <stdin_irq_dma+0x468>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d05b      	beq.n	8001254 <stdin_irq_dma+0x444>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a35      	ldr	r2, [pc, #212]	; (800127c <stdin_irq_dma+0x46c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d052      	beq.n	8001250 <stdin_irq_dma+0x440>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a33      	ldr	r2, [pc, #204]	; (8001280 <stdin_irq_dma+0x470>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d048      	beq.n	800124a <stdin_irq_dma+0x43a>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a30      	ldr	r2, [pc, #192]	; (8001284 <stdin_irq_dma+0x474>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d03e      	beq.n	8001244 <stdin_irq_dma+0x434>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a2e      	ldr	r2, [pc, #184]	; (8001288 <stdin_irq_dma+0x478>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d034      	beq.n	800123e <stdin_irq_dma+0x42e>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a2b      	ldr	r2, [pc, #172]	; (800128c <stdin_irq_dma+0x47c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d02a      	beq.n	8001238 <stdin_irq_dma+0x428>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a29      	ldr	r2, [pc, #164]	; (8001290 <stdin_irq_dma+0x480>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d020      	beq.n	8001232 <stdin_irq_dma+0x422>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a26      	ldr	r2, [pc, #152]	; (8001294 <stdin_irq_dma+0x484>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d016      	beq.n	800122c <stdin_irq_dma+0x41c>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a24      	ldr	r2, [pc, #144]	; (8001298 <stdin_irq_dma+0x488>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d00c      	beq.n	8001226 <stdin_irq_dma+0x416>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a21      	ldr	r2, [pc, #132]	; (800129c <stdin_irq_dma+0x48c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d102      	bne.n	8001220 <stdin_irq_dma+0x410>
 800121a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800121e:	e01e      	b.n	800125e <stdin_irq_dma+0x44e>
 8001220:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001224:	e01b      	b.n	800125e <stdin_irq_dma+0x44e>
 8001226:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800122a:	e018      	b.n	800125e <stdin_irq_dma+0x44e>
 800122c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001230:	e015      	b.n	800125e <stdin_irq_dma+0x44e>
 8001232:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001236:	e012      	b.n	800125e <stdin_irq_dma+0x44e>
 8001238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800123c:	e00f      	b.n	800125e <stdin_irq_dma+0x44e>
 800123e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001242:	e00c      	b.n	800125e <stdin_irq_dma+0x44e>
 8001244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001248:	e009      	b.n	800125e <stdin_irq_dma+0x44e>
 800124a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800124e:	e006      	b.n	800125e <stdin_irq_dma+0x44e>
 8001250:	2310      	movs	r3, #16
 8001252:	e004      	b.n	800125e <stdin_irq_dma+0x44e>
 8001254:	2310      	movs	r3, #16
 8001256:	e002      	b.n	800125e <stdin_irq_dma+0x44e>
 8001258:	2310      	movs	r3, #16
 800125a:	e000      	b.n	800125e <stdin_irq_dma+0x44e>
 800125c:	2310      	movs	r3, #16
 800125e:	4a10      	ldr	r2, [pc, #64]	; (80012a0 <stdin_irq_dma+0x490>)
 8001260:	6093      	str	r3, [r2, #8]
    check_buffer(in);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f001 f92c 	bl	80024c0 <check_buffer>
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_FE_FLAG_INDEX(HDMA(in)));
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_DME_FLAG_INDEX(HDMA(in)));

    HAL_UART_Receive_DMA(in->huart, in->buffer, in->size);
  }
}
 8001268:	f001 b8ea 	b.w	8002440 <stdin_irq_dma+0x1630>
 800126c:	40026058 	.word	0x40026058
 8001270:	40026010 	.word	0x40026010
 8001274:	40026410 	.word	0x40026410
 8001278:	40026070 	.word	0x40026070
 800127c:	40026470 	.word	0x40026470
 8001280:	40026028 	.word	0x40026028
 8001284:	40026428 	.word	0x40026428
 8001288:	40026088 	.word	0x40026088
 800128c:	40026488 	.word	0x40026488
 8001290:	40026040 	.word	0x40026040
 8001294:	40026440 	.word	0x40026440
 8001298:	400260a0 	.word	0x400260a0
 800129c:	400264a0 	.word	0x400264a0
 80012a0:	40026000 	.word	0x40026000
  else if (__HAL_DMA_GET_IT_SOURCE(HDMA(in), DMA_IT_TC))
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0310 	and.w	r3, r3, #16
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 823c 	beq.w	8001730 <stdin_irq_dma+0x920>
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_TC_FLAG_INDEX(HDMA(in)));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b7f      	ldr	r3, [pc, #508]	; (80014c0 <stdin_irq_dma+0x6b0>)
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d978      	bls.n	80013ba <stdin_irq_dma+0x5aa>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a7c      	ldr	r2, [pc, #496]	; (80014c4 <stdin_irq_dma+0x6b4>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d06d      	beq.n	80013b2 <stdin_irq_dma+0x5a2>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a7a      	ldr	r2, [pc, #488]	; (80014c8 <stdin_irq_dma+0x6b8>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d064      	beq.n	80013ae <stdin_irq_dma+0x59e>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a77      	ldr	r2, [pc, #476]	; (80014cc <stdin_irq_dma+0x6bc>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d05b      	beq.n	80013aa <stdin_irq_dma+0x59a>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a75      	ldr	r2, [pc, #468]	; (80014d0 <stdin_irq_dma+0x6c0>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d052      	beq.n	80013a6 <stdin_irq_dma+0x596>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a72      	ldr	r2, [pc, #456]	; (80014d4 <stdin_irq_dma+0x6c4>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d048      	beq.n	80013a0 <stdin_irq_dma+0x590>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a70      	ldr	r2, [pc, #448]	; (80014d8 <stdin_irq_dma+0x6c8>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d03e      	beq.n	800139a <stdin_irq_dma+0x58a>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a6d      	ldr	r2, [pc, #436]	; (80014dc <stdin_irq_dma+0x6cc>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d034      	beq.n	8001394 <stdin_irq_dma+0x584>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a6b      	ldr	r2, [pc, #428]	; (80014e0 <stdin_irq_dma+0x6d0>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d02a      	beq.n	800138e <stdin_irq_dma+0x57e>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a68      	ldr	r2, [pc, #416]	; (80014e4 <stdin_irq_dma+0x6d4>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d020      	beq.n	8001388 <stdin_irq_dma+0x578>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a66      	ldr	r2, [pc, #408]	; (80014e8 <stdin_irq_dma+0x6d8>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d016      	beq.n	8001382 <stdin_irq_dma+0x572>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a63      	ldr	r2, [pc, #396]	; (80014ec <stdin_irq_dma+0x6dc>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d00c      	beq.n	800137c <stdin_irq_dma+0x56c>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a61      	ldr	r2, [pc, #388]	; (80014f0 <stdin_irq_dma+0x6e0>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d102      	bne.n	8001376 <stdin_irq_dma+0x566>
 8001370:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001374:	e01e      	b.n	80013b4 <stdin_irq_dma+0x5a4>
 8001376:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800137a:	e01b      	b.n	80013b4 <stdin_irq_dma+0x5a4>
 800137c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001380:	e018      	b.n	80013b4 <stdin_irq_dma+0x5a4>
 8001382:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001386:	e015      	b.n	80013b4 <stdin_irq_dma+0x5a4>
 8001388:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800138c:	e012      	b.n	80013b4 <stdin_irq_dma+0x5a4>
 800138e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001392:	e00f      	b.n	80013b4 <stdin_irq_dma+0x5a4>
 8001394:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001398:	e00c      	b.n	80013b4 <stdin_irq_dma+0x5a4>
 800139a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800139e:	e009      	b.n	80013b4 <stdin_irq_dma+0x5a4>
 80013a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013a4:	e006      	b.n	80013b4 <stdin_irq_dma+0x5a4>
 80013a6:	2320      	movs	r3, #32
 80013a8:	e004      	b.n	80013b4 <stdin_irq_dma+0x5a4>
 80013aa:	2320      	movs	r3, #32
 80013ac:	e002      	b.n	80013b4 <stdin_irq_dma+0x5a4>
 80013ae:	2320      	movs	r3, #32
 80013b0:	e000      	b.n	80013b4 <stdin_irq_dma+0x5a4>
 80013b2:	2320      	movs	r3, #32
 80013b4:	4a4f      	ldr	r2, [pc, #316]	; (80014f4 <stdin_irq_dma+0x6e4>)
 80013b6:	60d3      	str	r3, [r2, #12]
 80013b8:	e199      	b.n	80016ee <stdin_irq_dma+0x8de>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	461a      	mov	r2, r3
 80013c4:	4b4c      	ldr	r3, [pc, #304]	; (80014f8 <stdin_irq_dma+0x6e8>)
 80013c6:	429a      	cmp	r2, r3
 80013c8:	f240 8098 	bls.w	80014fc <stdin_irq_dma+0x6ec>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a3b      	ldr	r2, [pc, #236]	; (80014c4 <stdin_irq_dma+0x6b4>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d06d      	beq.n	80014b6 <stdin_irq_dma+0x6a6>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a39      	ldr	r2, [pc, #228]	; (80014c8 <stdin_irq_dma+0x6b8>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d064      	beq.n	80014b2 <stdin_irq_dma+0x6a2>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a36      	ldr	r2, [pc, #216]	; (80014cc <stdin_irq_dma+0x6bc>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d05b      	beq.n	80014ae <stdin_irq_dma+0x69e>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a34      	ldr	r2, [pc, #208]	; (80014d0 <stdin_irq_dma+0x6c0>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d052      	beq.n	80014aa <stdin_irq_dma+0x69a>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a31      	ldr	r2, [pc, #196]	; (80014d4 <stdin_irq_dma+0x6c4>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d048      	beq.n	80014a4 <stdin_irq_dma+0x694>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a2f      	ldr	r2, [pc, #188]	; (80014d8 <stdin_irq_dma+0x6c8>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d03e      	beq.n	800149e <stdin_irq_dma+0x68e>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a2c      	ldr	r2, [pc, #176]	; (80014dc <stdin_irq_dma+0x6cc>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d034      	beq.n	8001498 <stdin_irq_dma+0x688>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a2a      	ldr	r2, [pc, #168]	; (80014e0 <stdin_irq_dma+0x6d0>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d02a      	beq.n	8001492 <stdin_irq_dma+0x682>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a27      	ldr	r2, [pc, #156]	; (80014e4 <stdin_irq_dma+0x6d4>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d020      	beq.n	800148c <stdin_irq_dma+0x67c>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a25      	ldr	r2, [pc, #148]	; (80014e8 <stdin_irq_dma+0x6d8>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d016      	beq.n	8001486 <stdin_irq_dma+0x676>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a22      	ldr	r2, [pc, #136]	; (80014ec <stdin_irq_dma+0x6dc>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d00c      	beq.n	8001480 <stdin_irq_dma+0x670>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a20      	ldr	r2, [pc, #128]	; (80014f0 <stdin_irq_dma+0x6e0>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d102      	bne.n	800147a <stdin_irq_dma+0x66a>
 8001474:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001478:	e01e      	b.n	80014b8 <stdin_irq_dma+0x6a8>
 800147a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800147e:	e01b      	b.n	80014b8 <stdin_irq_dma+0x6a8>
 8001480:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001484:	e018      	b.n	80014b8 <stdin_irq_dma+0x6a8>
 8001486:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800148a:	e015      	b.n	80014b8 <stdin_irq_dma+0x6a8>
 800148c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001490:	e012      	b.n	80014b8 <stdin_irq_dma+0x6a8>
 8001492:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001496:	e00f      	b.n	80014b8 <stdin_irq_dma+0x6a8>
 8001498:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800149c:	e00c      	b.n	80014b8 <stdin_irq_dma+0x6a8>
 800149e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014a2:	e009      	b.n	80014b8 <stdin_irq_dma+0x6a8>
 80014a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014a8:	e006      	b.n	80014b8 <stdin_irq_dma+0x6a8>
 80014aa:	2320      	movs	r3, #32
 80014ac:	e004      	b.n	80014b8 <stdin_irq_dma+0x6a8>
 80014ae:	2320      	movs	r3, #32
 80014b0:	e002      	b.n	80014b8 <stdin_irq_dma+0x6a8>
 80014b2:	2320      	movs	r3, #32
 80014b4:	e000      	b.n	80014b8 <stdin_irq_dma+0x6a8>
 80014b6:	2320      	movs	r3, #32
 80014b8:	4a0e      	ldr	r2, [pc, #56]	; (80014f4 <stdin_irq_dma+0x6e4>)
 80014ba:	6093      	str	r3, [r2, #8]
 80014bc:	e117      	b.n	80016ee <stdin_irq_dma+0x8de>
 80014be:	bf00      	nop
 80014c0:	40026458 	.word	0x40026458
 80014c4:	40026010 	.word	0x40026010
 80014c8:	40026410 	.word	0x40026410
 80014cc:	40026070 	.word	0x40026070
 80014d0:	40026470 	.word	0x40026470
 80014d4:	40026028 	.word	0x40026028
 80014d8:	40026428 	.word	0x40026428
 80014dc:	40026088 	.word	0x40026088
 80014e0:	40026488 	.word	0x40026488
 80014e4:	40026040 	.word	0x40026040
 80014e8:	40026440 	.word	0x40026440
 80014ec:	400260a0 	.word	0x400260a0
 80014f0:	400264a0 	.word	0x400264a0
 80014f4:	40026400 	.word	0x40026400
 80014f8:	400260b8 	.word	0x400260b8
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	461a      	mov	r2, r3
 8001506:	4b7c      	ldr	r3, [pc, #496]	; (80016f8 <stdin_irq_dma+0x8e8>)
 8001508:	429a      	cmp	r2, r3
 800150a:	d978      	bls.n	80015fe <stdin_irq_dma+0x7ee>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a79      	ldr	r2, [pc, #484]	; (80016fc <stdin_irq_dma+0x8ec>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d06d      	beq.n	80015f6 <stdin_irq_dma+0x7e6>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a77      	ldr	r2, [pc, #476]	; (8001700 <stdin_irq_dma+0x8f0>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d064      	beq.n	80015f2 <stdin_irq_dma+0x7e2>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a74      	ldr	r2, [pc, #464]	; (8001704 <stdin_irq_dma+0x8f4>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d05b      	beq.n	80015ee <stdin_irq_dma+0x7de>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a72      	ldr	r2, [pc, #456]	; (8001708 <stdin_irq_dma+0x8f8>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d052      	beq.n	80015ea <stdin_irq_dma+0x7da>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a6f      	ldr	r2, [pc, #444]	; (800170c <stdin_irq_dma+0x8fc>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d048      	beq.n	80015e4 <stdin_irq_dma+0x7d4>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a6d      	ldr	r2, [pc, #436]	; (8001710 <stdin_irq_dma+0x900>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d03e      	beq.n	80015de <stdin_irq_dma+0x7ce>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a6a      	ldr	r2, [pc, #424]	; (8001714 <stdin_irq_dma+0x904>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d034      	beq.n	80015d8 <stdin_irq_dma+0x7c8>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a68      	ldr	r2, [pc, #416]	; (8001718 <stdin_irq_dma+0x908>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d02a      	beq.n	80015d2 <stdin_irq_dma+0x7c2>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a65      	ldr	r2, [pc, #404]	; (800171c <stdin_irq_dma+0x90c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d020      	beq.n	80015cc <stdin_irq_dma+0x7bc>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a63      	ldr	r2, [pc, #396]	; (8001720 <stdin_irq_dma+0x910>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d016      	beq.n	80015c6 <stdin_irq_dma+0x7b6>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a60      	ldr	r2, [pc, #384]	; (8001724 <stdin_irq_dma+0x914>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d00c      	beq.n	80015c0 <stdin_irq_dma+0x7b0>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a5e      	ldr	r2, [pc, #376]	; (8001728 <stdin_irq_dma+0x918>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d102      	bne.n	80015ba <stdin_irq_dma+0x7aa>
 80015b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80015b8:	e01e      	b.n	80015f8 <stdin_irq_dma+0x7e8>
 80015ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80015be:	e01b      	b.n	80015f8 <stdin_irq_dma+0x7e8>
 80015c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80015c4:	e018      	b.n	80015f8 <stdin_irq_dma+0x7e8>
 80015c6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80015ca:	e015      	b.n	80015f8 <stdin_irq_dma+0x7e8>
 80015cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80015d0:	e012      	b.n	80015f8 <stdin_irq_dma+0x7e8>
 80015d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015d6:	e00f      	b.n	80015f8 <stdin_irq_dma+0x7e8>
 80015d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015dc:	e00c      	b.n	80015f8 <stdin_irq_dma+0x7e8>
 80015de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015e2:	e009      	b.n	80015f8 <stdin_irq_dma+0x7e8>
 80015e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015e8:	e006      	b.n	80015f8 <stdin_irq_dma+0x7e8>
 80015ea:	2320      	movs	r3, #32
 80015ec:	e004      	b.n	80015f8 <stdin_irq_dma+0x7e8>
 80015ee:	2320      	movs	r3, #32
 80015f0:	e002      	b.n	80015f8 <stdin_irq_dma+0x7e8>
 80015f2:	2320      	movs	r3, #32
 80015f4:	e000      	b.n	80015f8 <stdin_irq_dma+0x7e8>
 80015f6:	2320      	movs	r3, #32
 80015f8:	4a4c      	ldr	r2, [pc, #304]	; (800172c <stdin_irq_dma+0x91c>)
 80015fa:	60d3      	str	r3, [r2, #12]
 80015fc:	e077      	b.n	80016ee <stdin_irq_dma+0x8de>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a3d      	ldr	r2, [pc, #244]	; (80016fc <stdin_irq_dma+0x8ec>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d06d      	beq.n	80016e8 <stdin_irq_dma+0x8d8>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a3a      	ldr	r2, [pc, #232]	; (8001700 <stdin_irq_dma+0x8f0>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d064      	beq.n	80016e4 <stdin_irq_dma+0x8d4>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a38      	ldr	r2, [pc, #224]	; (8001704 <stdin_irq_dma+0x8f4>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d05b      	beq.n	80016e0 <stdin_irq_dma+0x8d0>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a35      	ldr	r2, [pc, #212]	; (8001708 <stdin_irq_dma+0x8f8>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d052      	beq.n	80016dc <stdin_irq_dma+0x8cc>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a33      	ldr	r2, [pc, #204]	; (800170c <stdin_irq_dma+0x8fc>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d048      	beq.n	80016d6 <stdin_irq_dma+0x8c6>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a30      	ldr	r2, [pc, #192]	; (8001710 <stdin_irq_dma+0x900>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d03e      	beq.n	80016d0 <stdin_irq_dma+0x8c0>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a2e      	ldr	r2, [pc, #184]	; (8001714 <stdin_irq_dma+0x904>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d034      	beq.n	80016ca <stdin_irq_dma+0x8ba>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a2b      	ldr	r2, [pc, #172]	; (8001718 <stdin_irq_dma+0x908>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d02a      	beq.n	80016c4 <stdin_irq_dma+0x8b4>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a29      	ldr	r2, [pc, #164]	; (800171c <stdin_irq_dma+0x90c>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d020      	beq.n	80016be <stdin_irq_dma+0x8ae>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a26      	ldr	r2, [pc, #152]	; (8001720 <stdin_irq_dma+0x910>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d016      	beq.n	80016b8 <stdin_irq_dma+0x8a8>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a24      	ldr	r2, [pc, #144]	; (8001724 <stdin_irq_dma+0x914>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d00c      	beq.n	80016b2 <stdin_irq_dma+0x8a2>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a21      	ldr	r2, [pc, #132]	; (8001728 <stdin_irq_dma+0x918>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d102      	bne.n	80016ac <stdin_irq_dma+0x89c>
 80016a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016aa:	e01e      	b.n	80016ea <stdin_irq_dma+0x8da>
 80016ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80016b0:	e01b      	b.n	80016ea <stdin_irq_dma+0x8da>
 80016b2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016b6:	e018      	b.n	80016ea <stdin_irq_dma+0x8da>
 80016b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016bc:	e015      	b.n	80016ea <stdin_irq_dma+0x8da>
 80016be:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016c2:	e012      	b.n	80016ea <stdin_irq_dma+0x8da>
 80016c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016c8:	e00f      	b.n	80016ea <stdin_irq_dma+0x8da>
 80016ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016ce:	e00c      	b.n	80016ea <stdin_irq_dma+0x8da>
 80016d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016d4:	e009      	b.n	80016ea <stdin_irq_dma+0x8da>
 80016d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016da:	e006      	b.n	80016ea <stdin_irq_dma+0x8da>
 80016dc:	2320      	movs	r3, #32
 80016de:	e004      	b.n	80016ea <stdin_irq_dma+0x8da>
 80016e0:	2320      	movs	r3, #32
 80016e2:	e002      	b.n	80016ea <stdin_irq_dma+0x8da>
 80016e4:	2320      	movs	r3, #32
 80016e6:	e000      	b.n	80016ea <stdin_irq_dma+0x8da>
 80016e8:	2320      	movs	r3, #32
 80016ea:	4a10      	ldr	r2, [pc, #64]	; (800172c <stdin_irq_dma+0x91c>)
 80016ec:	6093      	str	r3, [r2, #8]
    check_buffer(in);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 fee6 	bl	80024c0 <check_buffer>
}
 80016f4:	f000 bea4 	b.w	8002440 <stdin_irq_dma+0x1630>
 80016f8:	40026058 	.word	0x40026058
 80016fc:	40026010 	.word	0x40026010
 8001700:	40026410 	.word	0x40026410
 8001704:	40026070 	.word	0x40026070
 8001708:	40026470 	.word	0x40026470
 800170c:	40026028 	.word	0x40026028
 8001710:	40026428 	.word	0x40026428
 8001714:	40026088 	.word	0x40026088
 8001718:	40026488 	.word	0x40026488
 800171c:	40026040 	.word	0x40026040
 8001720:	40026440 	.word	0x40026440
 8001724:	400260a0 	.word	0x400260a0
 8001728:	400264a0 	.word	0x400264a0
 800172c:	40026000 	.word	0x40026000
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_TE_FLAG_INDEX(HDMA(in)));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4b7f      	ldr	r3, [pc, #508]	; (8001938 <stdin_irq_dma+0xb28>)
 800173c:	429a      	cmp	r2, r3
 800173e:	d978      	bls.n	8001832 <stdin_irq_dma+0xa22>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a7c      	ldr	r2, [pc, #496]	; (800193c <stdin_irq_dma+0xb2c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d06d      	beq.n	800182a <stdin_irq_dma+0xa1a>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a7a      	ldr	r2, [pc, #488]	; (8001940 <stdin_irq_dma+0xb30>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d064      	beq.n	8001826 <stdin_irq_dma+0xa16>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a77      	ldr	r2, [pc, #476]	; (8001944 <stdin_irq_dma+0xb34>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d05b      	beq.n	8001822 <stdin_irq_dma+0xa12>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a75      	ldr	r2, [pc, #468]	; (8001948 <stdin_irq_dma+0xb38>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d052      	beq.n	800181e <stdin_irq_dma+0xa0e>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a72      	ldr	r2, [pc, #456]	; (800194c <stdin_irq_dma+0xb3c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d048      	beq.n	8001818 <stdin_irq_dma+0xa08>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a70      	ldr	r2, [pc, #448]	; (8001950 <stdin_irq_dma+0xb40>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d03e      	beq.n	8001812 <stdin_irq_dma+0xa02>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a6d      	ldr	r2, [pc, #436]	; (8001954 <stdin_irq_dma+0xb44>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d034      	beq.n	800180c <stdin_irq_dma+0x9fc>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a6b      	ldr	r2, [pc, #428]	; (8001958 <stdin_irq_dma+0xb48>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d02a      	beq.n	8001806 <stdin_irq_dma+0x9f6>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a68      	ldr	r2, [pc, #416]	; (800195c <stdin_irq_dma+0xb4c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d020      	beq.n	8001800 <stdin_irq_dma+0x9f0>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a66      	ldr	r2, [pc, #408]	; (8001960 <stdin_irq_dma+0xb50>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d016      	beq.n	80017fa <stdin_irq_dma+0x9ea>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a63      	ldr	r2, [pc, #396]	; (8001964 <stdin_irq_dma+0xb54>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d00c      	beq.n	80017f4 <stdin_irq_dma+0x9e4>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a61      	ldr	r2, [pc, #388]	; (8001968 <stdin_irq_dma+0xb58>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d102      	bne.n	80017ee <stdin_irq_dma+0x9de>
 80017e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80017ec:	e01e      	b.n	800182c <stdin_irq_dma+0xa1c>
 80017ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017f2:	e01b      	b.n	800182c <stdin_irq_dma+0xa1c>
 80017f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80017f8:	e018      	b.n	800182c <stdin_irq_dma+0xa1c>
 80017fa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80017fe:	e015      	b.n	800182c <stdin_irq_dma+0xa1c>
 8001800:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001804:	e012      	b.n	800182c <stdin_irq_dma+0xa1c>
 8001806:	f44f 7300 	mov.w	r3, #512	; 0x200
 800180a:	e00f      	b.n	800182c <stdin_irq_dma+0xa1c>
 800180c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001810:	e00c      	b.n	800182c <stdin_irq_dma+0xa1c>
 8001812:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001816:	e009      	b.n	800182c <stdin_irq_dma+0xa1c>
 8001818:	f44f 7300 	mov.w	r3, #512	; 0x200
 800181c:	e006      	b.n	800182c <stdin_irq_dma+0xa1c>
 800181e:	2308      	movs	r3, #8
 8001820:	e004      	b.n	800182c <stdin_irq_dma+0xa1c>
 8001822:	2308      	movs	r3, #8
 8001824:	e002      	b.n	800182c <stdin_irq_dma+0xa1c>
 8001826:	2308      	movs	r3, #8
 8001828:	e000      	b.n	800182c <stdin_irq_dma+0xa1c>
 800182a:	2308      	movs	r3, #8
 800182c:	4a4f      	ldr	r2, [pc, #316]	; (800196c <stdin_irq_dma+0xb5c>)
 800182e:	60d3      	str	r3, [r2, #12]
 8001830:	e1b7      	b.n	8001ba2 <stdin_irq_dma+0xd92>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	461a      	mov	r2, r3
 800183c:	4b4c      	ldr	r3, [pc, #304]	; (8001970 <stdin_irq_dma+0xb60>)
 800183e:	429a      	cmp	r2, r3
 8001840:	f240 8098 	bls.w	8001974 <stdin_irq_dma+0xb64>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a3b      	ldr	r2, [pc, #236]	; (800193c <stdin_irq_dma+0xb2c>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d06d      	beq.n	800192e <stdin_irq_dma+0xb1e>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a39      	ldr	r2, [pc, #228]	; (8001940 <stdin_irq_dma+0xb30>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d064      	beq.n	800192a <stdin_irq_dma+0xb1a>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a36      	ldr	r2, [pc, #216]	; (8001944 <stdin_irq_dma+0xb34>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d05b      	beq.n	8001926 <stdin_irq_dma+0xb16>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a34      	ldr	r2, [pc, #208]	; (8001948 <stdin_irq_dma+0xb38>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d052      	beq.n	8001922 <stdin_irq_dma+0xb12>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a31      	ldr	r2, [pc, #196]	; (800194c <stdin_irq_dma+0xb3c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d048      	beq.n	800191c <stdin_irq_dma+0xb0c>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a2f      	ldr	r2, [pc, #188]	; (8001950 <stdin_irq_dma+0xb40>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d03e      	beq.n	8001916 <stdin_irq_dma+0xb06>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a2c      	ldr	r2, [pc, #176]	; (8001954 <stdin_irq_dma+0xb44>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d034      	beq.n	8001910 <stdin_irq_dma+0xb00>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a2a      	ldr	r2, [pc, #168]	; (8001958 <stdin_irq_dma+0xb48>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d02a      	beq.n	800190a <stdin_irq_dma+0xafa>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a27      	ldr	r2, [pc, #156]	; (800195c <stdin_irq_dma+0xb4c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d020      	beq.n	8001904 <stdin_irq_dma+0xaf4>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a25      	ldr	r2, [pc, #148]	; (8001960 <stdin_irq_dma+0xb50>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d016      	beq.n	80018fe <stdin_irq_dma+0xaee>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a22      	ldr	r2, [pc, #136]	; (8001964 <stdin_irq_dma+0xb54>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d00c      	beq.n	80018f8 <stdin_irq_dma+0xae8>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a20      	ldr	r2, [pc, #128]	; (8001968 <stdin_irq_dma+0xb58>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d102      	bne.n	80018f2 <stdin_irq_dma+0xae2>
 80018ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80018f0:	e01e      	b.n	8001930 <stdin_irq_dma+0xb20>
 80018f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018f6:	e01b      	b.n	8001930 <stdin_irq_dma+0xb20>
 80018f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80018fc:	e018      	b.n	8001930 <stdin_irq_dma+0xb20>
 80018fe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001902:	e015      	b.n	8001930 <stdin_irq_dma+0xb20>
 8001904:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001908:	e012      	b.n	8001930 <stdin_irq_dma+0xb20>
 800190a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800190e:	e00f      	b.n	8001930 <stdin_irq_dma+0xb20>
 8001910:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001914:	e00c      	b.n	8001930 <stdin_irq_dma+0xb20>
 8001916:	f44f 7300 	mov.w	r3, #512	; 0x200
 800191a:	e009      	b.n	8001930 <stdin_irq_dma+0xb20>
 800191c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001920:	e006      	b.n	8001930 <stdin_irq_dma+0xb20>
 8001922:	2308      	movs	r3, #8
 8001924:	e004      	b.n	8001930 <stdin_irq_dma+0xb20>
 8001926:	2308      	movs	r3, #8
 8001928:	e002      	b.n	8001930 <stdin_irq_dma+0xb20>
 800192a:	2308      	movs	r3, #8
 800192c:	e000      	b.n	8001930 <stdin_irq_dma+0xb20>
 800192e:	2308      	movs	r3, #8
 8001930:	4a0e      	ldr	r2, [pc, #56]	; (800196c <stdin_irq_dma+0xb5c>)
 8001932:	6093      	str	r3, [r2, #8]
 8001934:	e135      	b.n	8001ba2 <stdin_irq_dma+0xd92>
 8001936:	bf00      	nop
 8001938:	40026458 	.word	0x40026458
 800193c:	40026010 	.word	0x40026010
 8001940:	40026410 	.word	0x40026410
 8001944:	40026070 	.word	0x40026070
 8001948:	40026470 	.word	0x40026470
 800194c:	40026028 	.word	0x40026028
 8001950:	40026428 	.word	0x40026428
 8001954:	40026088 	.word	0x40026088
 8001958:	40026488 	.word	0x40026488
 800195c:	40026040 	.word	0x40026040
 8001960:	40026440 	.word	0x40026440
 8001964:	400260a0 	.word	0x400260a0
 8001968:	400264a0 	.word	0x400264a0
 800196c:	40026400 	.word	0x40026400
 8001970:	400260b8 	.word	0x400260b8
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	4b79      	ldr	r3, [pc, #484]	; (8001b64 <stdin_irq_dma+0xd54>)
 8001980:	429a      	cmp	r2, r3
 8001982:	d978      	bls.n	8001a76 <stdin_irq_dma+0xc66>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a76      	ldr	r2, [pc, #472]	; (8001b68 <stdin_irq_dma+0xd58>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d06d      	beq.n	8001a6e <stdin_irq_dma+0xc5e>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a74      	ldr	r2, [pc, #464]	; (8001b6c <stdin_irq_dma+0xd5c>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d064      	beq.n	8001a6a <stdin_irq_dma+0xc5a>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a71      	ldr	r2, [pc, #452]	; (8001b70 <stdin_irq_dma+0xd60>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d05b      	beq.n	8001a66 <stdin_irq_dma+0xc56>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a6f      	ldr	r2, [pc, #444]	; (8001b74 <stdin_irq_dma+0xd64>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d052      	beq.n	8001a62 <stdin_irq_dma+0xc52>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a6c      	ldr	r2, [pc, #432]	; (8001b78 <stdin_irq_dma+0xd68>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d048      	beq.n	8001a5c <stdin_irq_dma+0xc4c>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a6a      	ldr	r2, [pc, #424]	; (8001b7c <stdin_irq_dma+0xd6c>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d03e      	beq.n	8001a56 <stdin_irq_dma+0xc46>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a67      	ldr	r2, [pc, #412]	; (8001b80 <stdin_irq_dma+0xd70>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d034      	beq.n	8001a50 <stdin_irq_dma+0xc40>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a65      	ldr	r2, [pc, #404]	; (8001b84 <stdin_irq_dma+0xd74>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d02a      	beq.n	8001a4a <stdin_irq_dma+0xc3a>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a62      	ldr	r2, [pc, #392]	; (8001b88 <stdin_irq_dma+0xd78>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d020      	beq.n	8001a44 <stdin_irq_dma+0xc34>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a60      	ldr	r2, [pc, #384]	; (8001b8c <stdin_irq_dma+0xd7c>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d016      	beq.n	8001a3e <stdin_irq_dma+0xc2e>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a5d      	ldr	r2, [pc, #372]	; (8001b90 <stdin_irq_dma+0xd80>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d00c      	beq.n	8001a38 <stdin_irq_dma+0xc28>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a5b      	ldr	r2, [pc, #364]	; (8001b94 <stdin_irq_dma+0xd84>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d102      	bne.n	8001a32 <stdin_irq_dma+0xc22>
 8001a2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001a30:	e01e      	b.n	8001a70 <stdin_irq_dma+0xc60>
 8001a32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a36:	e01b      	b.n	8001a70 <stdin_irq_dma+0xc60>
 8001a38:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001a3c:	e018      	b.n	8001a70 <stdin_irq_dma+0xc60>
 8001a3e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001a42:	e015      	b.n	8001a70 <stdin_irq_dma+0xc60>
 8001a44:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001a48:	e012      	b.n	8001a70 <stdin_irq_dma+0xc60>
 8001a4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a4e:	e00f      	b.n	8001a70 <stdin_irq_dma+0xc60>
 8001a50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a54:	e00c      	b.n	8001a70 <stdin_irq_dma+0xc60>
 8001a56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a5a:	e009      	b.n	8001a70 <stdin_irq_dma+0xc60>
 8001a5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a60:	e006      	b.n	8001a70 <stdin_irq_dma+0xc60>
 8001a62:	2308      	movs	r3, #8
 8001a64:	e004      	b.n	8001a70 <stdin_irq_dma+0xc60>
 8001a66:	2308      	movs	r3, #8
 8001a68:	e002      	b.n	8001a70 <stdin_irq_dma+0xc60>
 8001a6a:	2308      	movs	r3, #8
 8001a6c:	e000      	b.n	8001a70 <stdin_irq_dma+0xc60>
 8001a6e:	2308      	movs	r3, #8
 8001a70:	4a49      	ldr	r2, [pc, #292]	; (8001b98 <stdin_irq_dma+0xd88>)
 8001a72:	60d3      	str	r3, [r2, #12]
 8001a74:	e095      	b.n	8001ba2 <stdin_irq_dma+0xd92>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a3a      	ldr	r2, [pc, #232]	; (8001b68 <stdin_irq_dma+0xd58>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	f000 808b 	beq.w	8001b9c <stdin_irq_dma+0xd8c>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a37      	ldr	r2, [pc, #220]	; (8001b6c <stdin_irq_dma+0xd5c>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d064      	beq.n	8001b5e <stdin_irq_dma+0xd4e>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a34      	ldr	r2, [pc, #208]	; (8001b70 <stdin_irq_dma+0xd60>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d05b      	beq.n	8001b5a <stdin_irq_dma+0xd4a>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a32      	ldr	r2, [pc, #200]	; (8001b74 <stdin_irq_dma+0xd64>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d052      	beq.n	8001b56 <stdin_irq_dma+0xd46>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a2f      	ldr	r2, [pc, #188]	; (8001b78 <stdin_irq_dma+0xd68>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d048      	beq.n	8001b50 <stdin_irq_dma+0xd40>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a2d      	ldr	r2, [pc, #180]	; (8001b7c <stdin_irq_dma+0xd6c>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d03e      	beq.n	8001b4a <stdin_irq_dma+0xd3a>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a2a      	ldr	r2, [pc, #168]	; (8001b80 <stdin_irq_dma+0xd70>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d034      	beq.n	8001b44 <stdin_irq_dma+0xd34>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a28      	ldr	r2, [pc, #160]	; (8001b84 <stdin_irq_dma+0xd74>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d02a      	beq.n	8001b3e <stdin_irq_dma+0xd2e>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a25      	ldr	r2, [pc, #148]	; (8001b88 <stdin_irq_dma+0xd78>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d020      	beq.n	8001b38 <stdin_irq_dma+0xd28>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a23      	ldr	r2, [pc, #140]	; (8001b8c <stdin_irq_dma+0xd7c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d016      	beq.n	8001b32 <stdin_irq_dma+0xd22>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a20      	ldr	r2, [pc, #128]	; (8001b90 <stdin_irq_dma+0xd80>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d00c      	beq.n	8001b2c <stdin_irq_dma+0xd1c>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a1e      	ldr	r2, [pc, #120]	; (8001b94 <stdin_irq_dma+0xd84>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d102      	bne.n	8001b26 <stdin_irq_dma+0xd16>
 8001b20:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001b24:	e03b      	b.n	8001b9e <stdin_irq_dma+0xd8e>
 8001b26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b2a:	e038      	b.n	8001b9e <stdin_irq_dma+0xd8e>
 8001b2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001b30:	e035      	b.n	8001b9e <stdin_irq_dma+0xd8e>
 8001b32:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001b36:	e032      	b.n	8001b9e <stdin_irq_dma+0xd8e>
 8001b38:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001b3c:	e02f      	b.n	8001b9e <stdin_irq_dma+0xd8e>
 8001b3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b42:	e02c      	b.n	8001b9e <stdin_irq_dma+0xd8e>
 8001b44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b48:	e029      	b.n	8001b9e <stdin_irq_dma+0xd8e>
 8001b4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b4e:	e026      	b.n	8001b9e <stdin_irq_dma+0xd8e>
 8001b50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b54:	e023      	b.n	8001b9e <stdin_irq_dma+0xd8e>
 8001b56:	2308      	movs	r3, #8
 8001b58:	e021      	b.n	8001b9e <stdin_irq_dma+0xd8e>
 8001b5a:	2308      	movs	r3, #8
 8001b5c:	e01f      	b.n	8001b9e <stdin_irq_dma+0xd8e>
 8001b5e:	2308      	movs	r3, #8
 8001b60:	e01d      	b.n	8001b9e <stdin_irq_dma+0xd8e>
 8001b62:	bf00      	nop
 8001b64:	40026058 	.word	0x40026058
 8001b68:	40026010 	.word	0x40026010
 8001b6c:	40026410 	.word	0x40026410
 8001b70:	40026070 	.word	0x40026070
 8001b74:	40026470 	.word	0x40026470
 8001b78:	40026028 	.word	0x40026028
 8001b7c:	40026428 	.word	0x40026428
 8001b80:	40026088 	.word	0x40026088
 8001b84:	40026488 	.word	0x40026488
 8001b88:	40026040 	.word	0x40026040
 8001b8c:	40026440 	.word	0x40026440
 8001b90:	400260a0 	.word	0x400260a0
 8001b94:	400264a0 	.word	0x400264a0
 8001b98:	40026000 	.word	0x40026000
 8001b9c:	2308      	movs	r3, #8
 8001b9e:	4a7e      	ldr	r2, [pc, #504]	; (8001d98 <stdin_irq_dma+0xf88>)
 8001ba0:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_FE_FLAG_INDEX(HDMA(in)));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	461a      	mov	r2, r3
 8001bac:	4b7b      	ldr	r3, [pc, #492]	; (8001d9c <stdin_irq_dma+0xf8c>)
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d974      	bls.n	8001c9c <stdin_irq_dma+0xe8c>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a79      	ldr	r2, [pc, #484]	; (8001da0 <stdin_irq_dma+0xf90>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d069      	beq.n	8001c94 <stdin_irq_dma+0xe84>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a76      	ldr	r2, [pc, #472]	; (8001da4 <stdin_irq_dma+0xf94>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d060      	beq.n	8001c90 <stdin_irq_dma+0xe80>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a74      	ldr	r2, [pc, #464]	; (8001da8 <stdin_irq_dma+0xf98>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d057      	beq.n	8001c8c <stdin_irq_dma+0xe7c>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a71      	ldr	r2, [pc, #452]	; (8001dac <stdin_irq_dma+0xf9c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d04e      	beq.n	8001c88 <stdin_irq_dma+0xe78>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a6f      	ldr	r2, [pc, #444]	; (8001db0 <stdin_irq_dma+0xfa0>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d045      	beq.n	8001c84 <stdin_irq_dma+0xe74>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a6c      	ldr	r2, [pc, #432]	; (8001db4 <stdin_irq_dma+0xfa4>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d03c      	beq.n	8001c80 <stdin_irq_dma+0xe70>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a6a      	ldr	r2, [pc, #424]	; (8001db8 <stdin_irq_dma+0xfa8>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d033      	beq.n	8001c7c <stdin_irq_dma+0xe6c>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a67      	ldr	r2, [pc, #412]	; (8001dbc <stdin_irq_dma+0xfac>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d02a      	beq.n	8001c78 <stdin_irq_dma+0xe68>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a65      	ldr	r2, [pc, #404]	; (8001dc0 <stdin_irq_dma+0xfb0>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d020      	beq.n	8001c72 <stdin_irq_dma+0xe62>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a62      	ldr	r2, [pc, #392]	; (8001dc4 <stdin_irq_dma+0xfb4>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d016      	beq.n	8001c6c <stdin_irq_dma+0xe5c>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a60      	ldr	r2, [pc, #384]	; (8001dc8 <stdin_irq_dma+0xfb8>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d00c      	beq.n	8001c66 <stdin_irq_dma+0xe56>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a5d      	ldr	r2, [pc, #372]	; (8001dcc <stdin_irq_dma+0xfbc>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d102      	bne.n	8001c60 <stdin_irq_dma+0xe50>
 8001c5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c5e:	e01a      	b.n	8001c96 <stdin_irq_dma+0xe86>
 8001c60:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c64:	e017      	b.n	8001c96 <stdin_irq_dma+0xe86>
 8001c66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c6a:	e014      	b.n	8001c96 <stdin_irq_dma+0xe86>
 8001c6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c70:	e011      	b.n	8001c96 <stdin_irq_dma+0xe86>
 8001c72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c76:	e00e      	b.n	8001c96 <stdin_irq_dma+0xe86>
 8001c78:	2340      	movs	r3, #64	; 0x40
 8001c7a:	e00c      	b.n	8001c96 <stdin_irq_dma+0xe86>
 8001c7c:	2340      	movs	r3, #64	; 0x40
 8001c7e:	e00a      	b.n	8001c96 <stdin_irq_dma+0xe86>
 8001c80:	2340      	movs	r3, #64	; 0x40
 8001c82:	e008      	b.n	8001c96 <stdin_irq_dma+0xe86>
 8001c84:	2340      	movs	r3, #64	; 0x40
 8001c86:	e006      	b.n	8001c96 <stdin_irq_dma+0xe86>
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e004      	b.n	8001c96 <stdin_irq_dma+0xe86>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e002      	b.n	8001c96 <stdin_irq_dma+0xe86>
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <stdin_irq_dma+0xe86>
 8001c94:	2301      	movs	r3, #1
 8001c96:	4a4e      	ldr	r2, [pc, #312]	; (8001dd0 <stdin_irq_dma+0xfc0>)
 8001c98:	60d3      	str	r3, [r2, #12]
 8001c9a:	e1ac      	b.n	8001ff6 <stdin_irq_dma+0x11e6>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b4b      	ldr	r3, [pc, #300]	; (8001dd4 <stdin_irq_dma+0xfc4>)
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	f240 8095 	bls.w	8001dd8 <stdin_irq_dma+0xfc8>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a3a      	ldr	r2, [pc, #232]	; (8001da0 <stdin_irq_dma+0xf90>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d069      	beq.n	8001d90 <stdin_irq_dma+0xf80>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a37      	ldr	r2, [pc, #220]	; (8001da4 <stdin_irq_dma+0xf94>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d060      	beq.n	8001d8c <stdin_irq_dma+0xf7c>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a35      	ldr	r2, [pc, #212]	; (8001da8 <stdin_irq_dma+0xf98>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d057      	beq.n	8001d88 <stdin_irq_dma+0xf78>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a32      	ldr	r2, [pc, #200]	; (8001dac <stdin_irq_dma+0xf9c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d04e      	beq.n	8001d84 <stdin_irq_dma+0xf74>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a30      	ldr	r2, [pc, #192]	; (8001db0 <stdin_irq_dma+0xfa0>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d045      	beq.n	8001d80 <stdin_irq_dma+0xf70>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a2d      	ldr	r2, [pc, #180]	; (8001db4 <stdin_irq_dma+0xfa4>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d03c      	beq.n	8001d7c <stdin_irq_dma+0xf6c>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a2b      	ldr	r2, [pc, #172]	; (8001db8 <stdin_irq_dma+0xfa8>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d033      	beq.n	8001d78 <stdin_irq_dma+0xf68>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a28      	ldr	r2, [pc, #160]	; (8001dbc <stdin_irq_dma+0xfac>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d02a      	beq.n	8001d74 <stdin_irq_dma+0xf64>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a26      	ldr	r2, [pc, #152]	; (8001dc0 <stdin_irq_dma+0xfb0>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d020      	beq.n	8001d6e <stdin_irq_dma+0xf5e>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a23      	ldr	r2, [pc, #140]	; (8001dc4 <stdin_irq_dma+0xfb4>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d016      	beq.n	8001d68 <stdin_irq_dma+0xf58>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a21      	ldr	r2, [pc, #132]	; (8001dc8 <stdin_irq_dma+0xfb8>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d00c      	beq.n	8001d62 <stdin_irq_dma+0xf52>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a1e      	ldr	r2, [pc, #120]	; (8001dcc <stdin_irq_dma+0xfbc>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d102      	bne.n	8001d5c <stdin_irq_dma+0xf4c>
 8001d56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d5a:	e01a      	b.n	8001d92 <stdin_irq_dma+0xf82>
 8001d5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d60:	e017      	b.n	8001d92 <stdin_irq_dma+0xf82>
 8001d62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d66:	e014      	b.n	8001d92 <stdin_irq_dma+0xf82>
 8001d68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d6c:	e011      	b.n	8001d92 <stdin_irq_dma+0xf82>
 8001d6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d72:	e00e      	b.n	8001d92 <stdin_irq_dma+0xf82>
 8001d74:	2340      	movs	r3, #64	; 0x40
 8001d76:	e00c      	b.n	8001d92 <stdin_irq_dma+0xf82>
 8001d78:	2340      	movs	r3, #64	; 0x40
 8001d7a:	e00a      	b.n	8001d92 <stdin_irq_dma+0xf82>
 8001d7c:	2340      	movs	r3, #64	; 0x40
 8001d7e:	e008      	b.n	8001d92 <stdin_irq_dma+0xf82>
 8001d80:	2340      	movs	r3, #64	; 0x40
 8001d82:	e006      	b.n	8001d92 <stdin_irq_dma+0xf82>
 8001d84:	2301      	movs	r3, #1
 8001d86:	e004      	b.n	8001d92 <stdin_irq_dma+0xf82>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e002      	b.n	8001d92 <stdin_irq_dma+0xf82>
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e000      	b.n	8001d92 <stdin_irq_dma+0xf82>
 8001d90:	2301      	movs	r3, #1
 8001d92:	4a0f      	ldr	r2, [pc, #60]	; (8001dd0 <stdin_irq_dma+0xfc0>)
 8001d94:	6093      	str	r3, [r2, #8]
 8001d96:	e12e      	b.n	8001ff6 <stdin_irq_dma+0x11e6>
 8001d98:	40026000 	.word	0x40026000
 8001d9c:	40026458 	.word	0x40026458
 8001da0:	40026010 	.word	0x40026010
 8001da4:	40026410 	.word	0x40026410
 8001da8:	40026070 	.word	0x40026070
 8001dac:	40026470 	.word	0x40026470
 8001db0:	40026028 	.word	0x40026028
 8001db4:	40026428 	.word	0x40026428
 8001db8:	40026088 	.word	0x40026088
 8001dbc:	40026488 	.word	0x40026488
 8001dc0:	40026040 	.word	0x40026040
 8001dc4:	40026440 	.word	0x40026440
 8001dc8:	400260a0 	.word	0x400260a0
 8001dcc:	400264a0 	.word	0x400264a0
 8001dd0:	40026400 	.word	0x40026400
 8001dd4:	400260b8 	.word	0x400260b8
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	461a      	mov	r2, r3
 8001de2:	4b75      	ldr	r3, [pc, #468]	; (8001fb8 <stdin_irq_dma+0x11a8>)
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d974      	bls.n	8001ed2 <stdin_irq_dma+0x10c2>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a72      	ldr	r2, [pc, #456]	; (8001fbc <stdin_irq_dma+0x11ac>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d069      	beq.n	8001eca <stdin_irq_dma+0x10ba>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a70      	ldr	r2, [pc, #448]	; (8001fc0 <stdin_irq_dma+0x11b0>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d060      	beq.n	8001ec6 <stdin_irq_dma+0x10b6>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a6d      	ldr	r2, [pc, #436]	; (8001fc4 <stdin_irq_dma+0x11b4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d057      	beq.n	8001ec2 <stdin_irq_dma+0x10b2>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a6b      	ldr	r2, [pc, #428]	; (8001fc8 <stdin_irq_dma+0x11b8>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d04e      	beq.n	8001ebe <stdin_irq_dma+0x10ae>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a68      	ldr	r2, [pc, #416]	; (8001fcc <stdin_irq_dma+0x11bc>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d045      	beq.n	8001eba <stdin_irq_dma+0x10aa>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a66      	ldr	r2, [pc, #408]	; (8001fd0 <stdin_irq_dma+0x11c0>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d03c      	beq.n	8001eb6 <stdin_irq_dma+0x10a6>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a63      	ldr	r2, [pc, #396]	; (8001fd4 <stdin_irq_dma+0x11c4>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d033      	beq.n	8001eb2 <stdin_irq_dma+0x10a2>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a61      	ldr	r2, [pc, #388]	; (8001fd8 <stdin_irq_dma+0x11c8>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d02a      	beq.n	8001eae <stdin_irq_dma+0x109e>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a5e      	ldr	r2, [pc, #376]	; (8001fdc <stdin_irq_dma+0x11cc>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d020      	beq.n	8001ea8 <stdin_irq_dma+0x1098>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a5c      	ldr	r2, [pc, #368]	; (8001fe0 <stdin_irq_dma+0x11d0>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d016      	beq.n	8001ea2 <stdin_irq_dma+0x1092>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a59      	ldr	r2, [pc, #356]	; (8001fe4 <stdin_irq_dma+0x11d4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d00c      	beq.n	8001e9c <stdin_irq_dma+0x108c>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a57      	ldr	r2, [pc, #348]	; (8001fe8 <stdin_irq_dma+0x11d8>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d102      	bne.n	8001e96 <stdin_irq_dma+0x1086>
 8001e90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e94:	e01a      	b.n	8001ecc <stdin_irq_dma+0x10bc>
 8001e96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e9a:	e017      	b.n	8001ecc <stdin_irq_dma+0x10bc>
 8001e9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ea0:	e014      	b.n	8001ecc <stdin_irq_dma+0x10bc>
 8001ea2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ea6:	e011      	b.n	8001ecc <stdin_irq_dma+0x10bc>
 8001ea8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eac:	e00e      	b.n	8001ecc <stdin_irq_dma+0x10bc>
 8001eae:	2340      	movs	r3, #64	; 0x40
 8001eb0:	e00c      	b.n	8001ecc <stdin_irq_dma+0x10bc>
 8001eb2:	2340      	movs	r3, #64	; 0x40
 8001eb4:	e00a      	b.n	8001ecc <stdin_irq_dma+0x10bc>
 8001eb6:	2340      	movs	r3, #64	; 0x40
 8001eb8:	e008      	b.n	8001ecc <stdin_irq_dma+0x10bc>
 8001eba:	2340      	movs	r3, #64	; 0x40
 8001ebc:	e006      	b.n	8001ecc <stdin_irq_dma+0x10bc>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e004      	b.n	8001ecc <stdin_irq_dma+0x10bc>
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e002      	b.n	8001ecc <stdin_irq_dma+0x10bc>
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <stdin_irq_dma+0x10bc>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	4a47      	ldr	r2, [pc, #284]	; (8001fec <stdin_irq_dma+0x11dc>)
 8001ece:	60d3      	str	r3, [r2, #12]
 8001ed0:	e091      	b.n	8001ff6 <stdin_irq_dma+0x11e6>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a38      	ldr	r2, [pc, #224]	; (8001fbc <stdin_irq_dma+0x11ac>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	f000 8087 	beq.w	8001ff0 <stdin_irq_dma+0x11e0>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a35      	ldr	r2, [pc, #212]	; (8001fc0 <stdin_irq_dma+0x11b0>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d060      	beq.n	8001fb2 <stdin_irq_dma+0x11a2>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a32      	ldr	r2, [pc, #200]	; (8001fc4 <stdin_irq_dma+0x11b4>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d057      	beq.n	8001fae <stdin_irq_dma+0x119e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a30      	ldr	r2, [pc, #192]	; (8001fc8 <stdin_irq_dma+0x11b8>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d04e      	beq.n	8001faa <stdin_irq_dma+0x119a>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a2d      	ldr	r2, [pc, #180]	; (8001fcc <stdin_irq_dma+0x11bc>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d045      	beq.n	8001fa6 <stdin_irq_dma+0x1196>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a2b      	ldr	r2, [pc, #172]	; (8001fd0 <stdin_irq_dma+0x11c0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d03c      	beq.n	8001fa2 <stdin_irq_dma+0x1192>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a28      	ldr	r2, [pc, #160]	; (8001fd4 <stdin_irq_dma+0x11c4>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d033      	beq.n	8001f9e <stdin_irq_dma+0x118e>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a26      	ldr	r2, [pc, #152]	; (8001fd8 <stdin_irq_dma+0x11c8>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d02a      	beq.n	8001f9a <stdin_irq_dma+0x118a>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a23      	ldr	r2, [pc, #140]	; (8001fdc <stdin_irq_dma+0x11cc>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d020      	beq.n	8001f94 <stdin_irq_dma+0x1184>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a21      	ldr	r2, [pc, #132]	; (8001fe0 <stdin_irq_dma+0x11d0>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d016      	beq.n	8001f8e <stdin_irq_dma+0x117e>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a1e      	ldr	r2, [pc, #120]	; (8001fe4 <stdin_irq_dma+0x11d4>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d00c      	beq.n	8001f88 <stdin_irq_dma+0x1178>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a1c      	ldr	r2, [pc, #112]	; (8001fe8 <stdin_irq_dma+0x11d8>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d102      	bne.n	8001f82 <stdin_irq_dma+0x1172>
 8001f7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f80:	e037      	b.n	8001ff2 <stdin_irq_dma+0x11e2>
 8001f82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f86:	e034      	b.n	8001ff2 <stdin_irq_dma+0x11e2>
 8001f88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f8c:	e031      	b.n	8001ff2 <stdin_irq_dma+0x11e2>
 8001f8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f92:	e02e      	b.n	8001ff2 <stdin_irq_dma+0x11e2>
 8001f94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f98:	e02b      	b.n	8001ff2 <stdin_irq_dma+0x11e2>
 8001f9a:	2340      	movs	r3, #64	; 0x40
 8001f9c:	e029      	b.n	8001ff2 <stdin_irq_dma+0x11e2>
 8001f9e:	2340      	movs	r3, #64	; 0x40
 8001fa0:	e027      	b.n	8001ff2 <stdin_irq_dma+0x11e2>
 8001fa2:	2340      	movs	r3, #64	; 0x40
 8001fa4:	e025      	b.n	8001ff2 <stdin_irq_dma+0x11e2>
 8001fa6:	2340      	movs	r3, #64	; 0x40
 8001fa8:	e023      	b.n	8001ff2 <stdin_irq_dma+0x11e2>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e021      	b.n	8001ff2 <stdin_irq_dma+0x11e2>
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e01f      	b.n	8001ff2 <stdin_irq_dma+0x11e2>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e01d      	b.n	8001ff2 <stdin_irq_dma+0x11e2>
 8001fb6:	bf00      	nop
 8001fb8:	40026058 	.word	0x40026058
 8001fbc:	40026010 	.word	0x40026010
 8001fc0:	40026410 	.word	0x40026410
 8001fc4:	40026070 	.word	0x40026070
 8001fc8:	40026470 	.word	0x40026470
 8001fcc:	40026028 	.word	0x40026028
 8001fd0:	40026428 	.word	0x40026428
 8001fd4:	40026088 	.word	0x40026088
 8001fd8:	40026488 	.word	0x40026488
 8001fdc:	40026040 	.word	0x40026040
 8001fe0:	40026440 	.word	0x40026440
 8001fe4:	400260a0 	.word	0x400260a0
 8001fe8:	400264a0 	.word	0x400264a0
 8001fec:	40026000 	.word	0x40026000
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	4a82      	ldr	r2, [pc, #520]	; (80021fc <stdin_irq_dma+0x13ec>)
 8001ff4:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_DME_FLAG_INDEX(HDMA(in)));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	4b7f      	ldr	r3, [pc, #508]	; (8002200 <stdin_irq_dma+0x13f0>)
 8002002:	429a      	cmp	r2, r3
 8002004:	d978      	bls.n	80020f8 <stdin_irq_dma+0x12e8>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a7d      	ldr	r2, [pc, #500]	; (8002204 <stdin_irq_dma+0x13f4>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d06d      	beq.n	80020f0 <stdin_irq_dma+0x12e0>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a7a      	ldr	r2, [pc, #488]	; (8002208 <stdin_irq_dma+0x13f8>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d064      	beq.n	80020ec <stdin_irq_dma+0x12dc>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a78      	ldr	r2, [pc, #480]	; (800220c <stdin_irq_dma+0x13fc>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d05b      	beq.n	80020e8 <stdin_irq_dma+0x12d8>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a75      	ldr	r2, [pc, #468]	; (8002210 <stdin_irq_dma+0x1400>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d052      	beq.n	80020e4 <stdin_irq_dma+0x12d4>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a73      	ldr	r2, [pc, #460]	; (8002214 <stdin_irq_dma+0x1404>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d048      	beq.n	80020de <stdin_irq_dma+0x12ce>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a70      	ldr	r2, [pc, #448]	; (8002218 <stdin_irq_dma+0x1408>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d03e      	beq.n	80020d8 <stdin_irq_dma+0x12c8>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a6e      	ldr	r2, [pc, #440]	; (800221c <stdin_irq_dma+0x140c>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d034      	beq.n	80020d2 <stdin_irq_dma+0x12c2>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a6b      	ldr	r2, [pc, #428]	; (8002220 <stdin_irq_dma+0x1410>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d02a      	beq.n	80020cc <stdin_irq_dma+0x12bc>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a69      	ldr	r2, [pc, #420]	; (8002224 <stdin_irq_dma+0x1414>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d020      	beq.n	80020c6 <stdin_irq_dma+0x12b6>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a66      	ldr	r2, [pc, #408]	; (8002228 <stdin_irq_dma+0x1418>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d016      	beq.n	80020c0 <stdin_irq_dma+0x12b0>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a64      	ldr	r2, [pc, #400]	; (800222c <stdin_irq_dma+0x141c>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d00c      	beq.n	80020ba <stdin_irq_dma+0x12aa>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a61      	ldr	r2, [pc, #388]	; (8002230 <stdin_irq_dma+0x1420>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d102      	bne.n	80020b4 <stdin_irq_dma+0x12a4>
 80020ae:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80020b2:	e01e      	b.n	80020f2 <stdin_irq_dma+0x12e2>
 80020b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020b8:	e01b      	b.n	80020f2 <stdin_irq_dma+0x12e2>
 80020ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80020be:	e018      	b.n	80020f2 <stdin_irq_dma+0x12e2>
 80020c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80020c4:	e015      	b.n	80020f2 <stdin_irq_dma+0x12e2>
 80020c6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80020ca:	e012      	b.n	80020f2 <stdin_irq_dma+0x12e2>
 80020cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020d0:	e00f      	b.n	80020f2 <stdin_irq_dma+0x12e2>
 80020d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020d6:	e00c      	b.n	80020f2 <stdin_irq_dma+0x12e2>
 80020d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020dc:	e009      	b.n	80020f2 <stdin_irq_dma+0x12e2>
 80020de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020e2:	e006      	b.n	80020f2 <stdin_irq_dma+0x12e2>
 80020e4:	2304      	movs	r3, #4
 80020e6:	e004      	b.n	80020f2 <stdin_irq_dma+0x12e2>
 80020e8:	2304      	movs	r3, #4
 80020ea:	e002      	b.n	80020f2 <stdin_irq_dma+0x12e2>
 80020ec:	2304      	movs	r3, #4
 80020ee:	e000      	b.n	80020f2 <stdin_irq_dma+0x12e2>
 80020f0:	2304      	movs	r3, #4
 80020f2:	4a50      	ldr	r2, [pc, #320]	; (8002234 <stdin_irq_dma+0x1424>)
 80020f4:	60d3      	str	r3, [r2, #12]
 80020f6:	e19a      	b.n	800242e <stdin_irq_dma+0x161e>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	461a      	mov	r2, r3
 8002102:	4b4d      	ldr	r3, [pc, #308]	; (8002238 <stdin_irq_dma+0x1428>)
 8002104:	429a      	cmp	r2, r3
 8002106:	f240 8099 	bls.w	800223c <stdin_irq_dma+0x142c>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a3c      	ldr	r2, [pc, #240]	; (8002204 <stdin_irq_dma+0x13f4>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d06d      	beq.n	80021f4 <stdin_irq_dma+0x13e4>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a39      	ldr	r2, [pc, #228]	; (8002208 <stdin_irq_dma+0x13f8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d064      	beq.n	80021f0 <stdin_irq_dma+0x13e0>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a37      	ldr	r2, [pc, #220]	; (800220c <stdin_irq_dma+0x13fc>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d05b      	beq.n	80021ec <stdin_irq_dma+0x13dc>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a34      	ldr	r2, [pc, #208]	; (8002210 <stdin_irq_dma+0x1400>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d052      	beq.n	80021e8 <stdin_irq_dma+0x13d8>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a32      	ldr	r2, [pc, #200]	; (8002214 <stdin_irq_dma+0x1404>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d048      	beq.n	80021e2 <stdin_irq_dma+0x13d2>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a2f      	ldr	r2, [pc, #188]	; (8002218 <stdin_irq_dma+0x1408>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d03e      	beq.n	80021dc <stdin_irq_dma+0x13cc>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a2d      	ldr	r2, [pc, #180]	; (800221c <stdin_irq_dma+0x140c>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d034      	beq.n	80021d6 <stdin_irq_dma+0x13c6>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a2a      	ldr	r2, [pc, #168]	; (8002220 <stdin_irq_dma+0x1410>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d02a      	beq.n	80021d0 <stdin_irq_dma+0x13c0>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a28      	ldr	r2, [pc, #160]	; (8002224 <stdin_irq_dma+0x1414>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d020      	beq.n	80021ca <stdin_irq_dma+0x13ba>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a25      	ldr	r2, [pc, #148]	; (8002228 <stdin_irq_dma+0x1418>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d016      	beq.n	80021c4 <stdin_irq_dma+0x13b4>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a23      	ldr	r2, [pc, #140]	; (800222c <stdin_irq_dma+0x141c>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d00c      	beq.n	80021be <stdin_irq_dma+0x13ae>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a20      	ldr	r2, [pc, #128]	; (8002230 <stdin_irq_dma+0x1420>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d102      	bne.n	80021b8 <stdin_irq_dma+0x13a8>
 80021b2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021b6:	e01e      	b.n	80021f6 <stdin_irq_dma+0x13e6>
 80021b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021bc:	e01b      	b.n	80021f6 <stdin_irq_dma+0x13e6>
 80021be:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021c2:	e018      	b.n	80021f6 <stdin_irq_dma+0x13e6>
 80021c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021c8:	e015      	b.n	80021f6 <stdin_irq_dma+0x13e6>
 80021ca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021ce:	e012      	b.n	80021f6 <stdin_irq_dma+0x13e6>
 80021d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021d4:	e00f      	b.n	80021f6 <stdin_irq_dma+0x13e6>
 80021d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021da:	e00c      	b.n	80021f6 <stdin_irq_dma+0x13e6>
 80021dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021e0:	e009      	b.n	80021f6 <stdin_irq_dma+0x13e6>
 80021e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021e6:	e006      	b.n	80021f6 <stdin_irq_dma+0x13e6>
 80021e8:	2304      	movs	r3, #4
 80021ea:	e004      	b.n	80021f6 <stdin_irq_dma+0x13e6>
 80021ec:	2304      	movs	r3, #4
 80021ee:	e002      	b.n	80021f6 <stdin_irq_dma+0x13e6>
 80021f0:	2304      	movs	r3, #4
 80021f2:	e000      	b.n	80021f6 <stdin_irq_dma+0x13e6>
 80021f4:	2304      	movs	r3, #4
 80021f6:	4a0f      	ldr	r2, [pc, #60]	; (8002234 <stdin_irq_dma+0x1424>)
 80021f8:	6093      	str	r3, [r2, #8]
 80021fa:	e118      	b.n	800242e <stdin_irq_dma+0x161e>
 80021fc:	40026000 	.word	0x40026000
 8002200:	40026458 	.word	0x40026458
 8002204:	40026010 	.word	0x40026010
 8002208:	40026410 	.word	0x40026410
 800220c:	40026070 	.word	0x40026070
 8002210:	40026470 	.word	0x40026470
 8002214:	40026028 	.word	0x40026028
 8002218:	40026428 	.word	0x40026428
 800221c:	40026088 	.word	0x40026088
 8002220:	40026488 	.word	0x40026488
 8002224:	40026040 	.word	0x40026040
 8002228:	40026440 	.word	0x40026440
 800222c:	400260a0 	.word	0x400260a0
 8002230:	400264a0 	.word	0x400264a0
 8002234:	40026400 	.word	0x40026400
 8002238:	400260b8 	.word	0x400260b8
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	461a      	mov	r2, r3
 8002246:	4b80      	ldr	r3, [pc, #512]	; (8002448 <stdin_irq_dma+0x1638>)
 8002248:	429a      	cmp	r2, r3
 800224a:	d978      	bls.n	800233e <stdin_irq_dma+0x152e>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a7d      	ldr	r2, [pc, #500]	; (800244c <stdin_irq_dma+0x163c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d06d      	beq.n	8002336 <stdin_irq_dma+0x1526>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a7b      	ldr	r2, [pc, #492]	; (8002450 <stdin_irq_dma+0x1640>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d064      	beq.n	8002332 <stdin_irq_dma+0x1522>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a78      	ldr	r2, [pc, #480]	; (8002454 <stdin_irq_dma+0x1644>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d05b      	beq.n	800232e <stdin_irq_dma+0x151e>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a76      	ldr	r2, [pc, #472]	; (8002458 <stdin_irq_dma+0x1648>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d052      	beq.n	800232a <stdin_irq_dma+0x151a>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a73      	ldr	r2, [pc, #460]	; (800245c <stdin_irq_dma+0x164c>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d048      	beq.n	8002324 <stdin_irq_dma+0x1514>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a71      	ldr	r2, [pc, #452]	; (8002460 <stdin_irq_dma+0x1650>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d03e      	beq.n	800231e <stdin_irq_dma+0x150e>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a6e      	ldr	r2, [pc, #440]	; (8002464 <stdin_irq_dma+0x1654>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d034      	beq.n	8002318 <stdin_irq_dma+0x1508>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a6c      	ldr	r2, [pc, #432]	; (8002468 <stdin_irq_dma+0x1658>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d02a      	beq.n	8002312 <stdin_irq_dma+0x1502>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a69      	ldr	r2, [pc, #420]	; (800246c <stdin_irq_dma+0x165c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d020      	beq.n	800230c <stdin_irq_dma+0x14fc>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a67      	ldr	r2, [pc, #412]	; (8002470 <stdin_irq_dma+0x1660>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d016      	beq.n	8002306 <stdin_irq_dma+0x14f6>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a64      	ldr	r2, [pc, #400]	; (8002474 <stdin_irq_dma+0x1664>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d00c      	beq.n	8002300 <stdin_irq_dma+0x14f0>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a62      	ldr	r2, [pc, #392]	; (8002478 <stdin_irq_dma+0x1668>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d102      	bne.n	80022fa <stdin_irq_dma+0x14ea>
 80022f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80022f8:	e01e      	b.n	8002338 <stdin_irq_dma+0x1528>
 80022fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022fe:	e01b      	b.n	8002338 <stdin_irq_dma+0x1528>
 8002300:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002304:	e018      	b.n	8002338 <stdin_irq_dma+0x1528>
 8002306:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800230a:	e015      	b.n	8002338 <stdin_irq_dma+0x1528>
 800230c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002310:	e012      	b.n	8002338 <stdin_irq_dma+0x1528>
 8002312:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002316:	e00f      	b.n	8002338 <stdin_irq_dma+0x1528>
 8002318:	f44f 7380 	mov.w	r3, #256	; 0x100
 800231c:	e00c      	b.n	8002338 <stdin_irq_dma+0x1528>
 800231e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002322:	e009      	b.n	8002338 <stdin_irq_dma+0x1528>
 8002324:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002328:	e006      	b.n	8002338 <stdin_irq_dma+0x1528>
 800232a:	2304      	movs	r3, #4
 800232c:	e004      	b.n	8002338 <stdin_irq_dma+0x1528>
 800232e:	2304      	movs	r3, #4
 8002330:	e002      	b.n	8002338 <stdin_irq_dma+0x1528>
 8002332:	2304      	movs	r3, #4
 8002334:	e000      	b.n	8002338 <stdin_irq_dma+0x1528>
 8002336:	2304      	movs	r3, #4
 8002338:	4a50      	ldr	r2, [pc, #320]	; (800247c <stdin_irq_dma+0x166c>)
 800233a:	60d3      	str	r3, [r2, #12]
 800233c:	e077      	b.n	800242e <stdin_irq_dma+0x161e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a41      	ldr	r2, [pc, #260]	; (800244c <stdin_irq_dma+0x163c>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d06d      	beq.n	8002428 <stdin_irq_dma+0x1618>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a3e      	ldr	r2, [pc, #248]	; (8002450 <stdin_irq_dma+0x1640>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d064      	beq.n	8002424 <stdin_irq_dma+0x1614>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a3c      	ldr	r2, [pc, #240]	; (8002454 <stdin_irq_dma+0x1644>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d05b      	beq.n	8002420 <stdin_irq_dma+0x1610>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a39      	ldr	r2, [pc, #228]	; (8002458 <stdin_irq_dma+0x1648>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d052      	beq.n	800241c <stdin_irq_dma+0x160c>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a37      	ldr	r2, [pc, #220]	; (800245c <stdin_irq_dma+0x164c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d048      	beq.n	8002416 <stdin_irq_dma+0x1606>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a34      	ldr	r2, [pc, #208]	; (8002460 <stdin_irq_dma+0x1650>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d03e      	beq.n	8002410 <stdin_irq_dma+0x1600>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a32      	ldr	r2, [pc, #200]	; (8002464 <stdin_irq_dma+0x1654>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d034      	beq.n	800240a <stdin_irq_dma+0x15fa>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a2f      	ldr	r2, [pc, #188]	; (8002468 <stdin_irq_dma+0x1658>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d02a      	beq.n	8002404 <stdin_irq_dma+0x15f4>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a2d      	ldr	r2, [pc, #180]	; (800246c <stdin_irq_dma+0x165c>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d020      	beq.n	80023fe <stdin_irq_dma+0x15ee>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a2a      	ldr	r2, [pc, #168]	; (8002470 <stdin_irq_dma+0x1660>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d016      	beq.n	80023f8 <stdin_irq_dma+0x15e8>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a28      	ldr	r2, [pc, #160]	; (8002474 <stdin_irq_dma+0x1664>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d00c      	beq.n	80023f2 <stdin_irq_dma+0x15e2>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a25      	ldr	r2, [pc, #148]	; (8002478 <stdin_irq_dma+0x1668>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d102      	bne.n	80023ec <stdin_irq_dma+0x15dc>
 80023e6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80023ea:	e01e      	b.n	800242a <stdin_irq_dma+0x161a>
 80023ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023f0:	e01b      	b.n	800242a <stdin_irq_dma+0x161a>
 80023f2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80023f6:	e018      	b.n	800242a <stdin_irq_dma+0x161a>
 80023f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80023fc:	e015      	b.n	800242a <stdin_irq_dma+0x161a>
 80023fe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002402:	e012      	b.n	800242a <stdin_irq_dma+0x161a>
 8002404:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002408:	e00f      	b.n	800242a <stdin_irq_dma+0x161a>
 800240a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800240e:	e00c      	b.n	800242a <stdin_irq_dma+0x161a>
 8002410:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002414:	e009      	b.n	800242a <stdin_irq_dma+0x161a>
 8002416:	f44f 7380 	mov.w	r3, #256	; 0x100
 800241a:	e006      	b.n	800242a <stdin_irq_dma+0x161a>
 800241c:	2304      	movs	r3, #4
 800241e:	e004      	b.n	800242a <stdin_irq_dma+0x161a>
 8002420:	2304      	movs	r3, #4
 8002422:	e002      	b.n	800242a <stdin_irq_dma+0x161a>
 8002424:	2304      	movs	r3, #4
 8002426:	e000      	b.n	800242a <stdin_irq_dma+0x161a>
 8002428:	2304      	movs	r3, #4
 800242a:	4a14      	ldr	r2, [pc, #80]	; (800247c <stdin_irq_dma+0x166c>)
 800242c:	6093      	str	r3, [r2, #8]
    HAL_UART_Receive_DMA(in->huart, in->buffer, in->size);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6818      	ldr	r0, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6899      	ldr	r1, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	899b      	ldrh	r3, [r3, #12]
 800243a:	461a      	mov	r2, r3
 800243c:	f002 f831 	bl	80044a2 <HAL_UART_Receive_DMA>
}
 8002440:	bf00      	nop
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40026058 	.word	0x40026058
 800244c:	40026010 	.word	0x40026010
 8002450:	40026410 	.word	0x40026410
 8002454:	40026070 	.word	0x40026070
 8002458:	40026470 	.word	0x40026470
 800245c:	40026028 	.word	0x40026028
 8002460:	40026428 	.word	0x40026428
 8002464:	40026088 	.word	0x40026088
 8002468:	40026488 	.word	0x40026488
 800246c:	40026040 	.word	0x40026040
 8002470:	40026440 	.word	0x40026440
 8002474:	400260a0 	.word	0x400260a0
 8002478:	400264a0 	.word	0x400264a0
 800247c:	40026000 	.word	0x40026000

08002480 <stdin_irq_uart>:

void stdin_irq_uart(stdin_t *in)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  if (__HAL_UART_GET_FLAG(in->huart, UART_FLAG_IDLE))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0310 	and.w	r3, r3, #16
 8002494:	2b10      	cmp	r3, #16
 8002496:	d10f      	bne.n	80024b8 <stdin_irq_uart+0x38>
  {
    __HAL_UART_CLEAR_IDLEFLAG(in->huart);
 8002498:	2300      	movs	r3, #0
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]
    check_buffer(in);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f804 	bl	80024c0 <check_buffer>
  }
}
 80024b8:	bf00      	nop
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <check_buffer>:

/* Private function implementations
 * --------------------------------------------*/
static void check_buffer(stdin_t *in)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint16_t pos;
  uint16_t new;

  /* Calculate current position in buffer */
  new = __HAL_DMA_GET_COUNTER(HDMA(in));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	81fb      	strh	r3, [r7, #14]
  pos = in->size - new;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	899a      	ldrh	r2, [r3, #12]
 80024d8:	89fb      	ldrh	r3, [r7, #14]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	81bb      	strh	r3, [r7, #12]

  /* Check change in received data */
  if (pos != in->pos)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	89db      	ldrh	r3, [r3, #14]
 80024e2:	89ba      	ldrh	r2, [r7, #12]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d025      	beq.n	8002534 <check_buffer+0x74>
  {
    if (pos > in->pos)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	89db      	ldrh	r3, [r3, #14]
 80024ec:	89ba      	ldrh	r2, [r7, #12]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d90b      	bls.n	800250a <check_buffer+0x4a>
      /* Current position is over previous one */
      /* We are in "linear" mode */
      /* Process data directly by subtracting "pointers" */
      fill_buffer(in, in->pos, pos - in->pos);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	89d9      	ldrh	r1, [r3, #14]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	89db      	ldrh	r3, [r3, #14]
 80024fa:	89ba      	ldrh	r2, [r7, #12]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	b29b      	uxth	r3, r3
 8002500:	461a      	mov	r2, r3
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f824 	bl	8002550 <fill_buffer>
 8002508:	e014      	b.n	8002534 <check_buffer+0x74>
    else
    {
      /* We are in "overflow" mode */
      /* First process data to the end of buffer */
      fill_buffer(in, in->pos, in->size - in->pos);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	89d9      	ldrh	r1, [r3, #14]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	899a      	ldrh	r2, [r3, #12]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	89db      	ldrh	r3, [r3, #14]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	b29b      	uxth	r3, r3
 800251a:	461a      	mov	r2, r3
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f817 	bl	8002550 <fill_buffer>
      /* Check and continue with beginning of buffer */
      if (pos > 0)
 8002522:	89bb      	ldrh	r3, [r7, #12]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <check_buffer+0x74>
        fill_buffer(in, 0, pos);
 8002528:	89bb      	ldrh	r3, [r7, #12]
 800252a:	461a      	mov	r2, r3
 800252c:	2100      	movs	r1, #0
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f80e 	bl	8002550 <fill_buffer>
    }
  }

  /* Check and manually update if we reached end of buffer */
  in->pos = (pos == in->size) ? 0 : pos;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	899b      	ldrh	r3, [r3, #12]
 8002538:	89ba      	ldrh	r2, [r7, #12]
 800253a:	429a      	cmp	r2, r3
 800253c:	d001      	beq.n	8002542 <check_buffer+0x82>
 800253e:	89ba      	ldrh	r2, [r7, #12]
 8002540:	e000      	b.n	8002544 <check_buffer+0x84>
 8002542:	2200      	movs	r2, #0
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	81da      	strh	r2, [r3, #14]
}
 8002548:	bf00      	nop
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <fill_buffer>:

static void fill_buffer(stdin_t *in, uint16_t pos, uint16_t size)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	807b      	strh	r3, [r7, #2]
 800255c:	4613      	mov	r3, r2
 800255e:	803b      	strh	r3, [r7, #0]
  if (NULL == in->callback)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d009      	beq.n	800257c <fill_buffer+0x2c>
    return;

  in->callback(&in->buffer[pos], size);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6891      	ldr	r1, [r2, #8]
 8002570:	887a      	ldrh	r2, [r7, #2]
 8002572:	440a      	add	r2, r1
 8002574:	8839      	ldrh	r1, [r7, #0]
 8002576:	4610      	mov	r0, r2
 8002578:	4798      	blx	r3
 800257a:	e000      	b.n	800257e <fill_buffer+0x2e>
    return;
 800257c:	bf00      	nop
}
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	607b      	str	r3, [r7, #4]
 800258e:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <HAL_MspInit+0x4c>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	4a0f      	ldr	r2, [pc, #60]	; (80025d0 <HAL_MspInit+0x4c>)
 8002594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002598:	6453      	str	r3, [r2, #68]	; 0x44
 800259a:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <HAL_MspInit+0x4c>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025a2:	607b      	str	r3, [r7, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	603b      	str	r3, [r7, #0]
 80025aa:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <HAL_MspInit+0x4c>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	4a08      	ldr	r2, [pc, #32]	; (80025d0 <HAL_MspInit+0x4c>)
 80025b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b4:	6413      	str	r3, [r2, #64]	; 0x40
 80025b6:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_MspInit+0x4c>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025be:	603b      	str	r3, [r7, #0]
 80025c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80025c2:	2007      	movs	r0, #7
 80025c4:	f000 fa7e 	bl	8002ac4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40023800 	.word	0x40023800

080025d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08a      	sub	sp, #40	; 0x28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025dc:	f107 0314 	add.w	r3, r7, #20
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	60da      	str	r2, [r3, #12]
 80025ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a34      	ldr	r2, [pc, #208]	; (80026c4 <HAL_UART_MspInit+0xf0>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d162      	bne.n	80026bc <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	4b33      	ldr	r3, [pc, #204]	; (80026c8 <HAL_UART_MspInit+0xf4>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	4a32      	ldr	r2, [pc, #200]	; (80026c8 <HAL_UART_MspInit+0xf4>)
 8002600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002604:	6413      	str	r3, [r2, #64]	; 0x40
 8002606:	4b30      	ldr	r3, [pc, #192]	; (80026c8 <HAL_UART_MspInit+0xf4>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	4b2c      	ldr	r3, [pc, #176]	; (80026c8 <HAL_UART_MspInit+0xf4>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	4a2b      	ldr	r2, [pc, #172]	; (80026c8 <HAL_UART_MspInit+0xf4>)
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	6313      	str	r3, [r2, #48]	; 0x30
 8002622:	4b29      	ldr	r3, [pc, #164]	; (80026c8 <HAL_UART_MspInit+0xf4>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin 		= USART_TX_Pin|USART_RX_Pin;
 800262e:	230c      	movs	r3, #12
 8002630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 8002632:	2302      	movs	r3, #2
 8002634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 800263a:	2303      	movs	r3, #3
 800263c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate 	= GPIO_AF7_USART2;
 800263e:	2307      	movs	r3, #7
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002642:	f107 0314 	add.w	r3, r7, #20
 8002646:	4619      	mov	r1, r3
 8002648:	4820      	ldr	r0, [pc, #128]	; (80026cc <HAL_UART_MspInit+0xf8>)
 800264a:	f000 fe7f 	bl	800334c <HAL_GPIO_Init>

    /* USART2 DMA Init */
	/* USART2_RX Init */
	hdma_usart2_rx.Instance 				= DMA1_Stream5;
 800264e:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <HAL_UART_MspInit+0xfc>)
 8002650:	4a20      	ldr	r2, [pc, #128]	; (80026d4 <HAL_UART_MspInit+0x100>)
 8002652:	601a      	str	r2, [r3, #0]
	hdma_usart2_rx.Init.Channel 			= DMA_CHANNEL_4;
 8002654:	4b1e      	ldr	r3, [pc, #120]	; (80026d0 <HAL_UART_MspInit+0xfc>)
 8002656:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800265a:	605a      	str	r2, [r3, #4]
	hdma_usart2_rx.Init.Direction 			= DMA_PERIPH_TO_MEMORY;
 800265c:	4b1c      	ldr	r3, [pc, #112]	; (80026d0 <HAL_UART_MspInit+0xfc>)
 800265e:	2200      	movs	r2, #0
 8002660:	609a      	str	r2, [r3, #8]
	hdma_usart2_rx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8002662:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <HAL_UART_MspInit+0xfc>)
 8002664:	2200      	movs	r2, #0
 8002666:	60da      	str	r2, [r3, #12]
	hdma_usart2_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8002668:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <HAL_UART_MspInit+0xfc>)
 800266a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800266e:	611a      	str	r2, [r3, #16]
	hdma_usart2_rx.Init.PeriphDataAlignment	= DMA_PDATAALIGN_BYTE;
 8002670:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <HAL_UART_MspInit+0xfc>)
 8002672:	2200      	movs	r2, #0
 8002674:	615a      	str	r2, [r3, #20]
	hdma_usart2_rx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8002676:	4b16      	ldr	r3, [pc, #88]	; (80026d0 <HAL_UART_MspInit+0xfc>)
 8002678:	2200      	movs	r2, #0
 800267a:	619a      	str	r2, [r3, #24]
	hdma_usart2_rx.Init.Mode 				= DMA_CIRCULAR;
 800267c:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <HAL_UART_MspInit+0xfc>)
 800267e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002682:	61da      	str	r2, [r3, #28]
	hdma_usart2_rx.Init.Priority 			= DMA_PRIORITY_LOW;
 8002684:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <HAL_UART_MspInit+0xfc>)
 8002686:	2200      	movs	r2, #0
 8002688:	621a      	str	r2, [r3, #32]
	hdma_usart2_rx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 800268a:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <HAL_UART_MspInit+0xfc>)
 800268c:	2200      	movs	r2, #0
 800268e:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002690:	480f      	ldr	r0, [pc, #60]	; (80026d0 <HAL_UART_MspInit+0xfc>)
 8002692:	f000 fa59 	bl	8002b48 <HAL_DMA_Init>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_UART_MspInit+0xcc>
	{
	  Error_Handler();
 800269c:	f7fe fad9 	bl	8000c52 <Error_Handler>
	}

	__HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a0b      	ldr	r2, [pc, #44]	; (80026d0 <HAL_UART_MspInit+0xfc>)
 80026a4:	639a      	str	r2, [r3, #56]	; 0x38
 80026a6:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <HAL_UART_MspInit+0xfc>)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6393      	str	r3, [r2, #56]	; 0x38

	/* USART2 interrupt Init */
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80026ac:	2200      	movs	r2, #0
 80026ae:	2100      	movs	r1, #0
 80026b0:	2026      	movs	r0, #38	; 0x26
 80026b2:	f000 fa12 	bl	8002ada <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026b6:	2026      	movs	r0, #38	; 0x26
 80026b8:	f000 fa2b 	bl	8002b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026bc:	bf00      	nop
 80026be:	3728      	adds	r7, #40	; 0x28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40004400 	.word	0x40004400
 80026c8:	40023800 	.word	0x40023800
 80026cc:	40020000 	.word	0x40020000
 80026d0:	2000016c 	.word	0x2000016c
 80026d4:	40026088 	.word	0x40026088

080026d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026dc:	e7fe      	b.n	80026dc <NMI_Handler+0x4>

080026de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026de:	b480      	push	{r7}
 80026e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026e2:	e7fe      	b.n	80026e2 <HardFault_Handler+0x4>

080026e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026e8:	e7fe      	b.n	80026e8 <MemManage_Handler+0x4>

080026ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026ea:	b480      	push	{r7}
 80026ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ee:	e7fe      	b.n	80026ee <BusFault_Handler+0x4>

080026f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026f4:	e7fe      	b.n	80026f4 <UsageFault_Handler+0x4>

080026f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026f6:	b480      	push	{r7}
 80026f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002712:	b480      	push	{r7}
 8002714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002716:	bf00      	nop
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002724:	f000 f8de 	bl	80028e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002728:	bf00      	nop
 800272a:	bd80      	pop	{r7, pc}

0800272c <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002730:	4803      	ldr	r0, [pc, #12]	; (8002740 <DMA1_Stream5_IRQHandler+0x14>)
 8002732:	f000 fba1 	bl	8002e78 <HAL_DMA_IRQHandler>
  serial_handlerDMA();
 8002736:	f7fe fab3 	bl	8000ca0 <serial_handlerDMA>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	2000016c 	.word	0x2000016c

08002744 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002748:	4803      	ldr	r0, [pc, #12]	; (8002758 <USART2_IRQHandler+0x14>)
 800274a:	f001 fedb 	bl	8004504 <HAL_UART_IRQHandler>
  serial_handlerUART();
 800274e:	f7fe fa9d 	bl	8000c8c <serial_handlerUART>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000128 	.word	0x20000128

0800275c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002764:	4a14      	ldr	r2, [pc, #80]	; (80027b8 <_sbrk+0x5c>)
 8002766:	4b15      	ldr	r3, [pc, #84]	; (80027bc <_sbrk+0x60>)
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002770:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <_sbrk+0x64>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d102      	bne.n	800277e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002778:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <_sbrk+0x64>)
 800277a:	4a12      	ldr	r2, [pc, #72]	; (80027c4 <_sbrk+0x68>)
 800277c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800277e:	4b10      	ldr	r3, [pc, #64]	; (80027c0 <_sbrk+0x64>)
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4413      	add	r3, r2
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	429a      	cmp	r2, r3
 800278a:	d207      	bcs.n	800279c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800278c:	f002 ffb6 	bl	80056fc <__errno>
 8002790:	4603      	mov	r3, r0
 8002792:	220c      	movs	r2, #12
 8002794:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002796:	f04f 33ff 	mov.w	r3, #4294967295
 800279a:	e009      	b.n	80027b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800279c:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <_sbrk+0x64>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027a2:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <_sbrk+0x64>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4413      	add	r3, r2
 80027aa:	4a05      	ldr	r2, [pc, #20]	; (80027c0 <_sbrk+0x64>)
 80027ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027ae:	68fb      	ldr	r3, [r7, #12]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20020000 	.word	0x20020000
 80027bc:	00000400 	.word	0x00000400
 80027c0:	20000260 	.word	0x20000260
 80027c4:	20000278 	.word	0x20000278

080027c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <SystemInit+0x20>)
 80027ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d2:	4a05      	ldr	r2, [pc, #20]	; (80027e8 <SystemInit+0x20>)
 80027d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80027ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002824 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027f0:	480d      	ldr	r0, [pc, #52]	; (8002828 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027f2:	490e      	ldr	r1, [pc, #56]	; (800282c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027f4:	4a0e      	ldr	r2, [pc, #56]	; (8002830 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027f8:	e002      	b.n	8002800 <LoopCopyDataInit>

080027fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027fe:	3304      	adds	r3, #4

08002800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002804:	d3f9      	bcc.n	80027fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002806:	4a0b      	ldr	r2, [pc, #44]	; (8002834 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002808:	4c0b      	ldr	r4, [pc, #44]	; (8002838 <LoopFillZerobss+0x26>)
  movs r3, #0
 800280a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800280c:	e001      	b.n	8002812 <LoopFillZerobss>

0800280e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800280e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002810:	3204      	adds	r2, #4

08002812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002814:	d3fb      	bcc.n	800280e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002816:	f7ff ffd7 	bl	80027c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800281a:	f002 ff75 	bl	8005708 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800281e:	f7fd fed1 	bl	80005c4 <main>
  bx  lr    
 8002822:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002824:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800282c:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8002830:	0800619c 	.word	0x0800619c
  ldr r2, =_sbss
 8002834:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8002838:	20000278 	.word	0x20000278

0800283c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800283c:	e7fe      	b.n	800283c <ADC_IRQHandler>
	...

08002840 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002844:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <HAL_Init+0x40>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a0d      	ldr	r2, [pc, #52]	; (8002880 <HAL_Init+0x40>)
 800284a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800284e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_Init+0x40>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a0a      	ldr	r2, [pc, #40]	; (8002880 <HAL_Init+0x40>)
 8002856:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800285a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800285c:	4b08      	ldr	r3, [pc, #32]	; (8002880 <HAL_Init+0x40>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a07      	ldr	r2, [pc, #28]	; (8002880 <HAL_Init+0x40>)
 8002862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002866:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002868:	2003      	movs	r0, #3
 800286a:	f000 f92b 	bl	8002ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800286e:	2000      	movs	r0, #0
 8002870:	f000 f808 	bl	8002884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002874:	f7ff fe86 	bl	8002584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40023c00 	.word	0x40023c00

08002884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800288c:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <HAL_InitTick+0x54>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	4b12      	ldr	r3, [pc, #72]	; (80028dc <HAL_InitTick+0x58>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	4619      	mov	r1, r3
 8002896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800289a:	fbb3 f3f1 	udiv	r3, r3, r1
 800289e:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 f943 	bl	8002b2e <HAL_SYSTICK_Config>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e00e      	b.n	80028d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b0f      	cmp	r3, #15
 80028b6:	d80a      	bhi.n	80028ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028b8:	2200      	movs	r2, #0
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	f04f 30ff 	mov.w	r0, #4294967295
 80028c0:	f000 f90b 	bl	8002ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028c4:	4a06      	ldr	r2, [pc, #24]	; (80028e0 <HAL_InitTick+0x5c>)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	e000      	b.n	80028d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	2000009c 	.word	0x2000009c
 80028dc:	200000a4 	.word	0x200000a4
 80028e0:	200000a0 	.word	0x200000a0

080028e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028e8:	4b06      	ldr	r3, [pc, #24]	; (8002904 <HAL_IncTick+0x20>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	461a      	mov	r2, r3
 80028ee:	4b06      	ldr	r3, [pc, #24]	; (8002908 <HAL_IncTick+0x24>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4413      	add	r3, r2
 80028f4:	4a04      	ldr	r2, [pc, #16]	; (8002908 <HAL_IncTick+0x24>)
 80028f6:	6013      	str	r3, [r2, #0]
}
 80028f8:	bf00      	nop
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	200000a4 	.word	0x200000a4
 8002908:	20000264 	.word	0x20000264

0800290c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return uwTick;
 8002910:	4b03      	ldr	r3, [pc, #12]	; (8002920 <HAL_GetTick+0x14>)
 8002912:	681b      	ldr	r3, [r3, #0]
}
 8002914:	4618      	mov	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	20000264 	.word	0x20000264

08002924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002934:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <__NVIC_SetPriorityGrouping+0x44>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002940:	4013      	ands	r3, r2
 8002942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800294c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002956:	4a04      	ldr	r2, [pc, #16]	; (8002968 <__NVIC_SetPriorityGrouping+0x44>)
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	60d3      	str	r3, [r2, #12]
}
 800295c:	bf00      	nop
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002970:	4b04      	ldr	r3, [pc, #16]	; (8002984 <__NVIC_GetPriorityGrouping+0x18>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	0a1b      	lsrs	r3, r3, #8
 8002976:	f003 0307 	and.w	r3, r3, #7
}
 800297a:	4618      	mov	r0, r3
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	e000ed00 	.word	0xe000ed00

08002988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002996:	2b00      	cmp	r3, #0
 8002998:	db0b      	blt.n	80029b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800299a:	79fb      	ldrb	r3, [r7, #7]
 800299c:	f003 021f 	and.w	r2, r3, #31
 80029a0:	4907      	ldr	r1, [pc, #28]	; (80029c0 <__NVIC_EnableIRQ+0x38>)
 80029a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a6:	095b      	lsrs	r3, r3, #5
 80029a8:	2001      	movs	r0, #1
 80029aa:	fa00 f202 	lsl.w	r2, r0, r2
 80029ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	e000e100 	.word	0xe000e100

080029c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	6039      	str	r1, [r7, #0]
 80029ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	db0a      	blt.n	80029ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	490c      	ldr	r1, [pc, #48]	; (8002a10 <__NVIC_SetPriority+0x4c>)
 80029de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e2:	0112      	lsls	r2, r2, #4
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	440b      	add	r3, r1
 80029e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029ec:	e00a      	b.n	8002a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	4908      	ldr	r1, [pc, #32]	; (8002a14 <__NVIC_SetPriority+0x50>)
 80029f4:	79fb      	ldrb	r3, [r7, #7]
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	3b04      	subs	r3, #4
 80029fc:	0112      	lsls	r2, r2, #4
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	440b      	add	r3, r1
 8002a02:	761a      	strb	r2, [r3, #24]
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	e000e100 	.word	0xe000e100
 8002a14:	e000ed00 	.word	0xe000ed00

08002a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b089      	sub	sp, #36	; 0x24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	f1c3 0307 	rsb	r3, r3, #7
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	bf28      	it	cs
 8002a36:	2304      	movcs	r3, #4
 8002a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	2b06      	cmp	r3, #6
 8002a40:	d902      	bls.n	8002a48 <NVIC_EncodePriority+0x30>
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3b03      	subs	r3, #3
 8002a46:	e000      	b.n	8002a4a <NVIC_EncodePriority+0x32>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43da      	mvns	r2, r3
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	401a      	ands	r2, r3
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a60:	f04f 31ff 	mov.w	r1, #4294967295
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6a:	43d9      	mvns	r1, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a70:	4313      	orrs	r3, r2
         );
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3724      	adds	r7, #36	; 0x24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
	...

08002a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a90:	d301      	bcc.n	8002a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a92:	2301      	movs	r3, #1
 8002a94:	e00f      	b.n	8002ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a96:	4a0a      	ldr	r2, [pc, #40]	; (8002ac0 <SysTick_Config+0x40>)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a9e:	210f      	movs	r1, #15
 8002aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa4:	f7ff ff8e 	bl	80029c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aa8:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <SysTick_Config+0x40>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aae:	4b04      	ldr	r3, [pc, #16]	; (8002ac0 <SysTick_Config+0x40>)
 8002ab0:	2207      	movs	r2, #7
 8002ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	e000e010 	.word	0xe000e010

08002ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7ff ff29 	bl	8002924 <__NVIC_SetPriorityGrouping>
}
 8002ad2:	bf00      	nop
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b086      	sub	sp, #24
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	607a      	str	r2, [r7, #4]
 8002ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aec:	f7ff ff3e 	bl	800296c <__NVIC_GetPriorityGrouping>
 8002af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	68b9      	ldr	r1, [r7, #8]
 8002af6:	6978      	ldr	r0, [r7, #20]
 8002af8:	f7ff ff8e 	bl	8002a18 <NVIC_EncodePriority>
 8002afc:	4602      	mov	r2, r0
 8002afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b02:	4611      	mov	r1, r2
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff ff5d 	bl	80029c4 <__NVIC_SetPriority>
}
 8002b0a:	bf00      	nop
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b082      	sub	sp, #8
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	4603      	mov	r3, r0
 8002b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff ff31 	bl	8002988 <__NVIC_EnableIRQ>
}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b082      	sub	sp, #8
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7ff ffa2 	bl	8002a80 <SysTick_Config>
 8002b3c:	4603      	mov	r3, r0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b54:	f7ff feda 	bl	800290c <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e099      	b.n	8002c98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2202      	movs	r2, #2
 8002b68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0201 	bic.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b84:	e00f      	b.n	8002ba6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b86:	f7ff fec1 	bl	800290c <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b05      	cmp	r3, #5
 8002b92:	d908      	bls.n	8002ba6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2220      	movs	r2, #32
 8002b98:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2203      	movs	r2, #3
 8002b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e078      	b.n	8002c98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1e8      	bne.n	8002b86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	4b38      	ldr	r3, [pc, #224]	; (8002ca0 <HAL_DMA_Init+0x158>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d107      	bne.n	8002c10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	f023 0307 	bic.w	r3, r3, #7
 8002c26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d117      	bne.n	8002c6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00e      	beq.n	8002c6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 fb01 	bl	8003254 <DMA_CheckFifoParam>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d008      	beq.n	8002c6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2240      	movs	r2, #64	; 0x40
 8002c5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c66:	2301      	movs	r3, #1
 8002c68:	e016      	b.n	8002c98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 fab8 	bl	80031e8 <DMA_CalcBaseAndBitshift>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c80:	223f      	movs	r2, #63	; 0x3f
 8002c82:	409a      	lsls	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	f010803f 	.word	0xf010803f

08002ca4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
 8002cb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d101      	bne.n	8002cca <HAL_DMA_Start_IT+0x26>
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	e040      	b.n	8002d4c <HAL_DMA_Start_IT+0xa8>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d12f      	bne.n	8002d3e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 fa4a 	bl	800318c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfc:	223f      	movs	r2, #63	; 0x3f
 8002cfe:	409a      	lsls	r2, r3
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0216 	orr.w	r2, r2, #22
 8002d12:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d007      	beq.n	8002d2c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0208 	orr.w	r2, r2, #8
 8002d2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0201 	orr.w	r2, r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	e005      	b.n	8002d4a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d46:	2302      	movs	r3, #2
 8002d48:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d60:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d62:	f7ff fdd3 	bl	800290c <HAL_GetTick>
 8002d66:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d008      	beq.n	8002d86 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2280      	movs	r2, #128	; 0x80
 8002d78:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e052      	b.n	8002e2c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 0216 	bic.w	r2, r2, #22
 8002d94:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	695a      	ldr	r2, [r3, #20]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002da4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d103      	bne.n	8002db6 <HAL_DMA_Abort+0x62>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d007      	beq.n	8002dc6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0208 	bic.w	r2, r2, #8
 8002dc4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 0201 	bic.w	r2, r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dd6:	e013      	b.n	8002e00 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dd8:	f7ff fd98 	bl	800290c <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b05      	cmp	r3, #5
 8002de4:	d90c      	bls.n	8002e00 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2220      	movs	r2, #32
 8002dea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2203      	movs	r2, #3
 8002df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e015      	b.n	8002e2c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1e4      	bne.n	8002dd8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e12:	223f      	movs	r2, #63	; 0x3f
 8002e14:	409a      	lsls	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d004      	beq.n	8002e52 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2280      	movs	r2, #128	; 0x80
 8002e4c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e00c      	b.n	8002e6c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2205      	movs	r2, #5
 8002e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0201 	bic.w	r2, r2, #1
 8002e68:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e84:	4b8e      	ldr	r3, [pc, #568]	; (80030c0 <HAL_DMA_IRQHandler+0x248>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a8e      	ldr	r2, [pc, #568]	; (80030c4 <HAL_DMA_IRQHandler+0x24c>)
 8002e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8e:	0a9b      	lsrs	r3, r3, #10
 8002e90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea2:	2208      	movs	r2, #8
 8002ea4:	409a      	lsls	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d01a      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d013      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0204 	bic.w	r2, r2, #4
 8002eca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed0:	2208      	movs	r2, #8
 8002ed2:	409a      	lsls	r2, r3
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002edc:	f043 0201 	orr.w	r2, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee8:	2201      	movs	r2, #1
 8002eea:	409a      	lsls	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d012      	beq.n	8002f1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00b      	beq.n	8002f1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f06:	2201      	movs	r2, #1
 8002f08:	409a      	lsls	r2, r3
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f12:	f043 0202 	orr.w	r2, r3, #2
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1e:	2204      	movs	r2, #4
 8002f20:	409a      	lsls	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4013      	ands	r3, r2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d012      	beq.n	8002f50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00b      	beq.n	8002f50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	409a      	lsls	r2, r3
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f48:	f043 0204 	orr.w	r2, r3, #4
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f54:	2210      	movs	r2, #16
 8002f56:	409a      	lsls	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d043      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d03c      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f72:	2210      	movs	r2, #16
 8002f74:	409a      	lsls	r2, r3
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d018      	beq.n	8002fba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d108      	bne.n	8002fa8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d024      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	4798      	blx	r3
 8002fa6:	e01f      	b.n	8002fe8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d01b      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	4798      	blx	r3
 8002fb8:	e016      	b.n	8002fe8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d107      	bne.n	8002fd8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 0208 	bic.w	r2, r2, #8
 8002fd6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fec:	2220      	movs	r2, #32
 8002fee:	409a      	lsls	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 808f 	beq.w	8003118 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0310 	and.w	r3, r3, #16
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 8087 	beq.w	8003118 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300e:	2220      	movs	r2, #32
 8003010:	409a      	lsls	r2, r3
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b05      	cmp	r3, #5
 8003020:	d136      	bne.n	8003090 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0216 	bic.w	r2, r2, #22
 8003030:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695a      	ldr	r2, [r3, #20]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003040:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	2b00      	cmp	r3, #0
 8003048:	d103      	bne.n	8003052 <HAL_DMA_IRQHandler+0x1da>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800304e:	2b00      	cmp	r3, #0
 8003050:	d007      	beq.n	8003062 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0208 	bic.w	r2, r2, #8
 8003060:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003066:	223f      	movs	r2, #63	; 0x3f
 8003068:	409a      	lsls	r2, r3
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003082:	2b00      	cmp	r3, #0
 8003084:	d07e      	beq.n	8003184 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	4798      	blx	r3
        }
        return;
 800308e:	e079      	b.n	8003184 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d01d      	beq.n	80030da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10d      	bne.n	80030c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d031      	beq.n	8003118 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	4798      	blx	r3
 80030bc:	e02c      	b.n	8003118 <HAL_DMA_IRQHandler+0x2a0>
 80030be:	bf00      	nop
 80030c0:	2000009c 	.word	0x2000009c
 80030c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d023      	beq.n	8003118 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	4798      	blx	r3
 80030d8:	e01e      	b.n	8003118 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10f      	bne.n	8003108 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0210 	bic.w	r2, r2, #16
 80030f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311c:	2b00      	cmp	r3, #0
 800311e:	d032      	beq.n	8003186 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d022      	beq.n	8003172 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2205      	movs	r2, #5
 8003130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0201 	bic.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	3301      	adds	r3, #1
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	429a      	cmp	r2, r3
 800314e:	d307      	bcc.n	8003160 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f2      	bne.n	8003144 <HAL_DMA_IRQHandler+0x2cc>
 800315e:	e000      	b.n	8003162 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003160:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003176:	2b00      	cmp	r3, #0
 8003178:	d005      	beq.n	8003186 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	4798      	blx	r3
 8003182:	e000      	b.n	8003186 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003184:	bf00      	nop
    }
  }
}
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2b40      	cmp	r3, #64	; 0x40
 80031b8:	d108      	bne.n	80031cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80031ca:	e007      	b.n	80031dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	60da      	str	r2, [r3, #12]
}
 80031dc:	bf00      	nop
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	3b10      	subs	r3, #16
 80031f8:	4a14      	ldr	r2, [pc, #80]	; (800324c <DMA_CalcBaseAndBitshift+0x64>)
 80031fa:	fba2 2303 	umull	r2, r3, r2, r3
 80031fe:	091b      	lsrs	r3, r3, #4
 8003200:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003202:	4a13      	ldr	r2, [pc, #76]	; (8003250 <DMA_CalcBaseAndBitshift+0x68>)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4413      	add	r3, r2
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2b03      	cmp	r3, #3
 8003214:	d909      	bls.n	800322a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800321e:	f023 0303 	bic.w	r3, r3, #3
 8003222:	1d1a      	adds	r2, r3, #4
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	659a      	str	r2, [r3, #88]	; 0x58
 8003228:	e007      	b.n	800323a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003232:	f023 0303 	bic.w	r3, r3, #3
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800323e:	4618      	mov	r0, r3
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	aaaaaaab 	.word	0xaaaaaaab
 8003250:	080060f0 	.word	0x080060f0

08003254 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800325c:	2300      	movs	r3, #0
 800325e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003264:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d11f      	bne.n	80032ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2b03      	cmp	r3, #3
 8003272:	d856      	bhi.n	8003322 <DMA_CheckFifoParam+0xce>
 8003274:	a201      	add	r2, pc, #4	; (adr r2, 800327c <DMA_CheckFifoParam+0x28>)
 8003276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327a:	bf00      	nop
 800327c:	0800328d 	.word	0x0800328d
 8003280:	0800329f 	.word	0x0800329f
 8003284:	0800328d 	.word	0x0800328d
 8003288:	08003323 	.word	0x08003323
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d046      	beq.n	8003326 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800329c:	e043      	b.n	8003326 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032a6:	d140      	bne.n	800332a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032ac:	e03d      	b.n	800332a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032b6:	d121      	bne.n	80032fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	d837      	bhi.n	800332e <DMA_CheckFifoParam+0xda>
 80032be:	a201      	add	r2, pc, #4	; (adr r2, 80032c4 <DMA_CheckFifoParam+0x70>)
 80032c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c4:	080032d5 	.word	0x080032d5
 80032c8:	080032db 	.word	0x080032db
 80032cc:	080032d5 	.word	0x080032d5
 80032d0:	080032ed 	.word	0x080032ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	73fb      	strb	r3, [r7, #15]
      break;
 80032d8:	e030      	b.n	800333c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d025      	beq.n	8003332 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032ea:	e022      	b.n	8003332 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032f4:	d11f      	bne.n	8003336 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032fa:	e01c      	b.n	8003336 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d903      	bls.n	800330a <DMA_CheckFifoParam+0xb6>
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b03      	cmp	r3, #3
 8003306:	d003      	beq.n	8003310 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003308:	e018      	b.n	800333c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	73fb      	strb	r3, [r7, #15]
      break;
 800330e:	e015      	b.n	800333c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00e      	beq.n	800333a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	73fb      	strb	r3, [r7, #15]
      break;
 8003320:	e00b      	b.n	800333a <DMA_CheckFifoParam+0xe6>
      break;
 8003322:	bf00      	nop
 8003324:	e00a      	b.n	800333c <DMA_CheckFifoParam+0xe8>
      break;
 8003326:	bf00      	nop
 8003328:	e008      	b.n	800333c <DMA_CheckFifoParam+0xe8>
      break;
 800332a:	bf00      	nop
 800332c:	e006      	b.n	800333c <DMA_CheckFifoParam+0xe8>
      break;
 800332e:	bf00      	nop
 8003330:	e004      	b.n	800333c <DMA_CheckFifoParam+0xe8>
      break;
 8003332:	bf00      	nop
 8003334:	e002      	b.n	800333c <DMA_CheckFifoParam+0xe8>
      break;   
 8003336:	bf00      	nop
 8003338:	e000      	b.n	800333c <DMA_CheckFifoParam+0xe8>
      break;
 800333a:	bf00      	nop
    }
  } 
  
  return status; 
 800333c:	7bfb      	ldrb	r3, [r7, #15]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop

0800334c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800334c:	b480      	push	{r7}
 800334e:	b089      	sub	sp, #36	; 0x24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800335a:	2300      	movs	r3, #0
 800335c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800335e:	2300      	movs	r3, #0
 8003360:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
 8003366:	e165      	b.n	8003634 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003368:	2201      	movs	r2, #1
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4013      	ands	r3, r2
 800337a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	429a      	cmp	r2, r3
 8003382:	f040 8154 	bne.w	800362e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	2b01      	cmp	r3, #1
 8003390:	d005      	beq.n	800339e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800339a:	2b02      	cmp	r3, #2
 800339c:	d130      	bne.n	8003400 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	2203      	movs	r2, #3
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43db      	mvns	r3, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4013      	ands	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033d4:	2201      	movs	r2, #1
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	43db      	mvns	r3, r3
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	4013      	ands	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	091b      	lsrs	r3, r3, #4
 80033ea:	f003 0201 	and.w	r2, r3, #1
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 0303 	and.w	r3, r3, #3
 8003408:	2b03      	cmp	r3, #3
 800340a:	d017      	beq.n	800343c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	2203      	movs	r2, #3
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	43db      	mvns	r3, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4013      	ands	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4313      	orrs	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d123      	bne.n	8003490 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	08da      	lsrs	r2, r3, #3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3208      	adds	r2, #8
 8003450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003454:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	220f      	movs	r2, #15
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4013      	ands	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	691a      	ldr	r2, [r3, #16]
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	08da      	lsrs	r2, r3, #3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3208      	adds	r2, #8
 800348a:	69b9      	ldr	r1, [r7, #24]
 800348c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	2203      	movs	r2, #3
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4013      	ands	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f003 0203 	and.w	r2, r3, #3
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 80ae 	beq.w	800362e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034d2:	2300      	movs	r3, #0
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	4b5d      	ldr	r3, [pc, #372]	; (800364c <HAL_GPIO_Init+0x300>)
 80034d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034da:	4a5c      	ldr	r2, [pc, #368]	; (800364c <HAL_GPIO_Init+0x300>)
 80034dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034e0:	6453      	str	r3, [r2, #68]	; 0x44
 80034e2:	4b5a      	ldr	r3, [pc, #360]	; (800364c <HAL_GPIO_Init+0x300>)
 80034e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034ee:	4a58      	ldr	r2, [pc, #352]	; (8003650 <HAL_GPIO_Init+0x304>)
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	089b      	lsrs	r3, r3, #2
 80034f4:	3302      	adds	r3, #2
 80034f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	220f      	movs	r2, #15
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	43db      	mvns	r3, r3
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4013      	ands	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a4f      	ldr	r2, [pc, #316]	; (8003654 <HAL_GPIO_Init+0x308>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d025      	beq.n	8003566 <HAL_GPIO_Init+0x21a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a4e      	ldr	r2, [pc, #312]	; (8003658 <HAL_GPIO_Init+0x30c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d01f      	beq.n	8003562 <HAL_GPIO_Init+0x216>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a4d      	ldr	r2, [pc, #308]	; (800365c <HAL_GPIO_Init+0x310>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d019      	beq.n	800355e <HAL_GPIO_Init+0x212>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a4c      	ldr	r2, [pc, #304]	; (8003660 <HAL_GPIO_Init+0x314>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d013      	beq.n	800355a <HAL_GPIO_Init+0x20e>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a4b      	ldr	r2, [pc, #300]	; (8003664 <HAL_GPIO_Init+0x318>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d00d      	beq.n	8003556 <HAL_GPIO_Init+0x20a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a4a      	ldr	r2, [pc, #296]	; (8003668 <HAL_GPIO_Init+0x31c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d007      	beq.n	8003552 <HAL_GPIO_Init+0x206>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a49      	ldr	r2, [pc, #292]	; (800366c <HAL_GPIO_Init+0x320>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d101      	bne.n	800354e <HAL_GPIO_Init+0x202>
 800354a:	2306      	movs	r3, #6
 800354c:	e00c      	b.n	8003568 <HAL_GPIO_Init+0x21c>
 800354e:	2307      	movs	r3, #7
 8003550:	e00a      	b.n	8003568 <HAL_GPIO_Init+0x21c>
 8003552:	2305      	movs	r3, #5
 8003554:	e008      	b.n	8003568 <HAL_GPIO_Init+0x21c>
 8003556:	2304      	movs	r3, #4
 8003558:	e006      	b.n	8003568 <HAL_GPIO_Init+0x21c>
 800355a:	2303      	movs	r3, #3
 800355c:	e004      	b.n	8003568 <HAL_GPIO_Init+0x21c>
 800355e:	2302      	movs	r3, #2
 8003560:	e002      	b.n	8003568 <HAL_GPIO_Init+0x21c>
 8003562:	2301      	movs	r3, #1
 8003564:	e000      	b.n	8003568 <HAL_GPIO_Init+0x21c>
 8003566:	2300      	movs	r3, #0
 8003568:	69fa      	ldr	r2, [r7, #28]
 800356a:	f002 0203 	and.w	r2, r2, #3
 800356e:	0092      	lsls	r2, r2, #2
 8003570:	4093      	lsls	r3, r2
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4313      	orrs	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003578:	4935      	ldr	r1, [pc, #212]	; (8003650 <HAL_GPIO_Init+0x304>)
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	089b      	lsrs	r3, r3, #2
 800357e:	3302      	adds	r3, #2
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003586:	4b3a      	ldr	r3, [pc, #232]	; (8003670 <HAL_GPIO_Init+0x324>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	43db      	mvns	r3, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4013      	ands	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035aa:	4a31      	ldr	r2, [pc, #196]	; (8003670 <HAL_GPIO_Init+0x324>)
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035b0:	4b2f      	ldr	r3, [pc, #188]	; (8003670 <HAL_GPIO_Init+0x324>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	43db      	mvns	r3, r3
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	4013      	ands	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035d4:	4a26      	ldr	r2, [pc, #152]	; (8003670 <HAL_GPIO_Init+0x324>)
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035da:	4b25      	ldr	r3, [pc, #148]	; (8003670 <HAL_GPIO_Init+0x324>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	43db      	mvns	r3, r3
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	4013      	ands	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035fe:	4a1c      	ldr	r2, [pc, #112]	; (8003670 <HAL_GPIO_Init+0x324>)
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003604:	4b1a      	ldr	r3, [pc, #104]	; (8003670 <HAL_GPIO_Init+0x324>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	43db      	mvns	r3, r3
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	4013      	ands	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	4313      	orrs	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003628:	4a11      	ldr	r2, [pc, #68]	; (8003670 <HAL_GPIO_Init+0x324>)
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	3301      	adds	r3, #1
 8003632:	61fb      	str	r3, [r7, #28]
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	2b0f      	cmp	r3, #15
 8003638:	f67f ae96 	bls.w	8003368 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800363c:	bf00      	nop
 800363e:	bf00      	nop
 8003640:	3724      	adds	r7, #36	; 0x24
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	40023800 	.word	0x40023800
 8003650:	40013800 	.word	0x40013800
 8003654:	40020000 	.word	0x40020000
 8003658:	40020400 	.word	0x40020400
 800365c:	40020800 	.word	0x40020800
 8003660:	40020c00 	.word	0x40020c00
 8003664:	40021000 	.word	0x40021000
 8003668:	40021400 	.word	0x40021400
 800366c:	40021800 	.word	0x40021800
 8003670:	40013c00 	.word	0x40013c00

08003674 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800367e:	2300      	movs	r3, #0
 8003680:	603b      	str	r3, [r7, #0]
 8003682:	4b20      	ldr	r3, [pc, #128]	; (8003704 <HAL_PWREx_EnableOverDrive+0x90>)
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	4a1f      	ldr	r2, [pc, #124]	; (8003704 <HAL_PWREx_EnableOverDrive+0x90>)
 8003688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800368c:	6413      	str	r3, [r2, #64]	; 0x40
 800368e:	4b1d      	ldr	r3, [pc, #116]	; (8003704 <HAL_PWREx_EnableOverDrive+0x90>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003696:	603b      	str	r3, [r7, #0]
 8003698:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800369a:	4b1b      	ldr	r3, [pc, #108]	; (8003708 <HAL_PWREx_EnableOverDrive+0x94>)
 800369c:	2201      	movs	r2, #1
 800369e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036a0:	f7ff f934 	bl	800290c <HAL_GetTick>
 80036a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036a6:	e009      	b.n	80036bc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036a8:	f7ff f930 	bl	800290c <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036b6:	d901      	bls.n	80036bc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e01f      	b.n	80036fc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036bc:	4b13      	ldr	r3, [pc, #76]	; (800370c <HAL_PWREx_EnableOverDrive+0x98>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c8:	d1ee      	bne.n	80036a8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80036ca:	4b11      	ldr	r3, [pc, #68]	; (8003710 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036cc:	2201      	movs	r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036d0:	f7ff f91c 	bl	800290c <HAL_GetTick>
 80036d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036d6:	e009      	b.n	80036ec <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036d8:	f7ff f918 	bl	800290c <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036e6:	d901      	bls.n	80036ec <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e007      	b.n	80036fc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036ec:	4b07      	ldr	r3, [pc, #28]	; (800370c <HAL_PWREx_EnableOverDrive+0x98>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036f8:	d1ee      	bne.n	80036d8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40023800 	.word	0x40023800
 8003708:	420e0040 	.word	0x420e0040
 800370c:	40007000 	.word	0x40007000
 8003710:	420e0044 	.word	0x420e0044

08003714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0cc      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003728:	4b68      	ldr	r3, [pc, #416]	; (80038cc <HAL_RCC_ClockConfig+0x1b8>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 030f 	and.w	r3, r3, #15
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d90c      	bls.n	8003750 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003736:	4b65      	ldr	r3, [pc, #404]	; (80038cc <HAL_RCC_ClockConfig+0x1b8>)
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800373e:	4b63      	ldr	r3, [pc, #396]	; (80038cc <HAL_RCC_ClockConfig+0x1b8>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 030f 	and.w	r3, r3, #15
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	429a      	cmp	r2, r3
 800374a:	d001      	beq.n	8003750 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e0b8      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d020      	beq.n	800379e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	2b00      	cmp	r3, #0
 8003766:	d005      	beq.n	8003774 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003768:	4b59      	ldr	r3, [pc, #356]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	4a58      	ldr	r2, [pc, #352]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 800376e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003772:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b00      	cmp	r3, #0
 800377e:	d005      	beq.n	800378c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003780:	4b53      	ldr	r3, [pc, #332]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	4a52      	ldr	r2, [pc, #328]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003786:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800378a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800378c:	4b50      	ldr	r3, [pc, #320]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	494d      	ldr	r1, [pc, #308]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	4313      	orrs	r3, r2
 800379c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d044      	beq.n	8003834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d107      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b2:	4b47      	ldr	r3, [pc, #284]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d119      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e07f      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d003      	beq.n	80037d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ce:	2b03      	cmp	r3, #3
 80037d0:	d107      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d2:	4b3f      	ldr	r3, [pc, #252]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d109      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e06f      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e2:	4b3b      	ldr	r3, [pc, #236]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e067      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037f2:	4b37      	ldr	r3, [pc, #220]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f023 0203 	bic.w	r2, r3, #3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	4934      	ldr	r1, [pc, #208]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003800:	4313      	orrs	r3, r2
 8003802:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003804:	f7ff f882 	bl	800290c <HAL_GetTick>
 8003808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380a:	e00a      	b.n	8003822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800380c:	f7ff f87e 	bl	800290c <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	f241 3288 	movw	r2, #5000	; 0x1388
 800381a:	4293      	cmp	r3, r2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e04f      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003822:	4b2b      	ldr	r3, [pc, #172]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 020c 	and.w	r2, r3, #12
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	429a      	cmp	r2, r3
 8003832:	d1eb      	bne.n	800380c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003834:	4b25      	ldr	r3, [pc, #148]	; (80038cc <HAL_RCC_ClockConfig+0x1b8>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 030f 	and.w	r3, r3, #15
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d20c      	bcs.n	800385c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003842:	4b22      	ldr	r3, [pc, #136]	; (80038cc <HAL_RCC_ClockConfig+0x1b8>)
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800384a:	4b20      	ldr	r3, [pc, #128]	; (80038cc <HAL_RCC_ClockConfig+0x1b8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d001      	beq.n	800385c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e032      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d008      	beq.n	800387a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003868:	4b19      	ldr	r3, [pc, #100]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	4916      	ldr	r1, [pc, #88]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	4313      	orrs	r3, r2
 8003878:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b00      	cmp	r3, #0
 8003884:	d009      	beq.n	800389a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003886:	4b12      	ldr	r3, [pc, #72]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	490e      	ldr	r1, [pc, #56]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003896:	4313      	orrs	r3, r2
 8003898:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800389a:	f000 f855 	bl	8003948 <HAL_RCC_GetSysClockFreq>
 800389e:	4602      	mov	r2, r0
 80038a0:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	091b      	lsrs	r3, r3, #4
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	490a      	ldr	r1, [pc, #40]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 80038ac:	5ccb      	ldrb	r3, [r1, r3]
 80038ae:	fa22 f303 	lsr.w	r3, r2, r3
 80038b2:	4a09      	ldr	r2, [pc, #36]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 80038b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038b6:	4b09      	ldr	r3, [pc, #36]	; (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fe ffe2 	bl	8002884 <HAL_InitTick>

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	40023c00 	.word	0x40023c00
 80038d0:	40023800 	.word	0x40023800
 80038d4:	080060d8 	.word	0x080060d8
 80038d8:	2000009c 	.word	0x2000009c
 80038dc:	200000a0 	.word	0x200000a0

080038e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038e4:	4b03      	ldr	r3, [pc, #12]	; (80038f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80038e6:	681b      	ldr	r3, [r3, #0]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	2000009c 	.word	0x2000009c

080038f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038fc:	f7ff fff0 	bl	80038e0 <HAL_RCC_GetHCLKFreq>
 8003900:	4602      	mov	r2, r0
 8003902:	4b05      	ldr	r3, [pc, #20]	; (8003918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	0a9b      	lsrs	r3, r3, #10
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	4903      	ldr	r1, [pc, #12]	; (800391c <HAL_RCC_GetPCLK1Freq+0x24>)
 800390e:	5ccb      	ldrb	r3, [r1, r3]
 8003910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003914:	4618      	mov	r0, r3
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40023800 	.word	0x40023800
 800391c:	080060e8 	.word	0x080060e8

08003920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003924:	f7ff ffdc 	bl	80038e0 <HAL_RCC_GetHCLKFreq>
 8003928:	4602      	mov	r2, r0
 800392a:	4b05      	ldr	r3, [pc, #20]	; (8003940 <HAL_RCC_GetPCLK2Freq+0x20>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	0b5b      	lsrs	r3, r3, #13
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	4903      	ldr	r1, [pc, #12]	; (8003944 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003936:	5ccb      	ldrb	r3, [r1, r3]
 8003938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800393c:	4618      	mov	r0, r3
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40023800 	.word	0x40023800
 8003944:	080060e8 	.word	0x080060e8

08003948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800394c:	b0ae      	sub	sp, #184	; 0xb8
 800394e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003956:	2300      	movs	r3, #0
 8003958:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003962:	2300      	movs	r3, #0
 8003964:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800396e:	4bcb      	ldr	r3, [pc, #812]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x354>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 030c 	and.w	r3, r3, #12
 8003976:	2b0c      	cmp	r3, #12
 8003978:	f200 8206 	bhi.w	8003d88 <HAL_RCC_GetSysClockFreq+0x440>
 800397c:	a201      	add	r2, pc, #4	; (adr r2, 8003984 <HAL_RCC_GetSysClockFreq+0x3c>)
 800397e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003982:	bf00      	nop
 8003984:	080039b9 	.word	0x080039b9
 8003988:	08003d89 	.word	0x08003d89
 800398c:	08003d89 	.word	0x08003d89
 8003990:	08003d89 	.word	0x08003d89
 8003994:	080039c1 	.word	0x080039c1
 8003998:	08003d89 	.word	0x08003d89
 800399c:	08003d89 	.word	0x08003d89
 80039a0:	08003d89 	.word	0x08003d89
 80039a4:	080039c9 	.word	0x080039c9
 80039a8:	08003d89 	.word	0x08003d89
 80039ac:	08003d89 	.word	0x08003d89
 80039b0:	08003d89 	.word	0x08003d89
 80039b4:	08003bb9 	.word	0x08003bb9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039b8:	4bb9      	ldr	r3, [pc, #740]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x358>)
 80039ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80039be:	e1e7      	b.n	8003d90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039c0:	4bb8      	ldr	r3, [pc, #736]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80039c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80039c6:	e1e3      	b.n	8003d90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039c8:	4bb4      	ldr	r3, [pc, #720]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x354>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039d4:	4bb1      	ldr	r3, [pc, #708]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x354>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d071      	beq.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039e0:	4bae      	ldr	r3, [pc, #696]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x354>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	099b      	lsrs	r3, r3, #6
 80039e6:	2200      	movs	r2, #0
 80039e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039ec:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80039f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039fc:	2300      	movs	r3, #0
 80039fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a06:	4622      	mov	r2, r4
 8003a08:	462b      	mov	r3, r5
 8003a0a:	f04f 0000 	mov.w	r0, #0
 8003a0e:	f04f 0100 	mov.w	r1, #0
 8003a12:	0159      	lsls	r1, r3, #5
 8003a14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a18:	0150      	lsls	r0, r2, #5
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	4621      	mov	r1, r4
 8003a20:	1a51      	subs	r1, r2, r1
 8003a22:	6439      	str	r1, [r7, #64]	; 0x40
 8003a24:	4629      	mov	r1, r5
 8003a26:	eb63 0301 	sbc.w	r3, r3, r1
 8003a2a:	647b      	str	r3, [r7, #68]	; 0x44
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	f04f 0300 	mov.w	r3, #0
 8003a34:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003a38:	4649      	mov	r1, r9
 8003a3a:	018b      	lsls	r3, r1, #6
 8003a3c:	4641      	mov	r1, r8
 8003a3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a42:	4641      	mov	r1, r8
 8003a44:	018a      	lsls	r2, r1, #6
 8003a46:	4641      	mov	r1, r8
 8003a48:	1a51      	subs	r1, r2, r1
 8003a4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a4c:	4649      	mov	r1, r9
 8003a4e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a54:	f04f 0200 	mov.w	r2, #0
 8003a58:	f04f 0300 	mov.w	r3, #0
 8003a5c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003a60:	4649      	mov	r1, r9
 8003a62:	00cb      	lsls	r3, r1, #3
 8003a64:	4641      	mov	r1, r8
 8003a66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a6a:	4641      	mov	r1, r8
 8003a6c:	00ca      	lsls	r2, r1, #3
 8003a6e:	4610      	mov	r0, r2
 8003a70:	4619      	mov	r1, r3
 8003a72:	4603      	mov	r3, r0
 8003a74:	4622      	mov	r2, r4
 8003a76:	189b      	adds	r3, r3, r2
 8003a78:	633b      	str	r3, [r7, #48]	; 0x30
 8003a7a:	462b      	mov	r3, r5
 8003a7c:	460a      	mov	r2, r1
 8003a7e:	eb42 0303 	adc.w	r3, r2, r3
 8003a82:	637b      	str	r3, [r7, #52]	; 0x34
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a90:	4629      	mov	r1, r5
 8003a92:	024b      	lsls	r3, r1, #9
 8003a94:	4621      	mov	r1, r4
 8003a96:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a9a:	4621      	mov	r1, r4
 8003a9c:	024a      	lsls	r2, r1, #9
 8003a9e:	4610      	mov	r0, r2
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003aac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ab0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003ab4:	f7fc fc04 	bl	80002c0 <__aeabi_uldivmod>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	460b      	mov	r3, r1
 8003abc:	4613      	mov	r3, r2
 8003abe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ac2:	e067      	b.n	8003b94 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ac4:	4b75      	ldr	r3, [pc, #468]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x354>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	099b      	lsrs	r3, r3, #6
 8003aca:	2200      	movs	r2, #0
 8003acc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ad0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003ad4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003adc:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ade:	2300      	movs	r3, #0
 8003ae0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ae2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003ae6:	4622      	mov	r2, r4
 8003ae8:	462b      	mov	r3, r5
 8003aea:	f04f 0000 	mov.w	r0, #0
 8003aee:	f04f 0100 	mov.w	r1, #0
 8003af2:	0159      	lsls	r1, r3, #5
 8003af4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003af8:	0150      	lsls	r0, r2, #5
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	4621      	mov	r1, r4
 8003b00:	1a51      	subs	r1, r2, r1
 8003b02:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b04:	4629      	mov	r1, r5
 8003b06:	eb63 0301 	sbc.w	r3, r3, r1
 8003b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	f04f 0300 	mov.w	r3, #0
 8003b14:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003b18:	4649      	mov	r1, r9
 8003b1a:	018b      	lsls	r3, r1, #6
 8003b1c:	4641      	mov	r1, r8
 8003b1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b22:	4641      	mov	r1, r8
 8003b24:	018a      	lsls	r2, r1, #6
 8003b26:	4641      	mov	r1, r8
 8003b28:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b2c:	4649      	mov	r1, r9
 8003b2e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b32:	f04f 0200 	mov.w	r2, #0
 8003b36:	f04f 0300 	mov.w	r3, #0
 8003b3a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b3e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b46:	4692      	mov	sl, r2
 8003b48:	469b      	mov	fp, r3
 8003b4a:	4623      	mov	r3, r4
 8003b4c:	eb1a 0303 	adds.w	r3, sl, r3
 8003b50:	623b      	str	r3, [r7, #32]
 8003b52:	462b      	mov	r3, r5
 8003b54:	eb4b 0303 	adc.w	r3, fp, r3
 8003b58:	627b      	str	r3, [r7, #36]	; 0x24
 8003b5a:	f04f 0200 	mov.w	r2, #0
 8003b5e:	f04f 0300 	mov.w	r3, #0
 8003b62:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003b66:	4629      	mov	r1, r5
 8003b68:	028b      	lsls	r3, r1, #10
 8003b6a:	4621      	mov	r1, r4
 8003b6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b70:	4621      	mov	r1, r4
 8003b72:	028a      	lsls	r2, r1, #10
 8003b74:	4610      	mov	r0, r2
 8003b76:	4619      	mov	r1, r3
 8003b78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	673b      	str	r3, [r7, #112]	; 0x70
 8003b80:	677a      	str	r2, [r7, #116]	; 0x74
 8003b82:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003b86:	f7fc fb9b 	bl	80002c0 <__aeabi_uldivmod>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4613      	mov	r3, r2
 8003b90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b94:	4b41      	ldr	r3, [pc, #260]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	0c1b      	lsrs	r3, r3, #16
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003ba6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003baa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003bb6:	e0eb      	b.n	8003d90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bb8:	4b38      	ldr	r3, [pc, #224]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x354>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bc4:	4b35      	ldr	r3, [pc, #212]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x354>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d06b      	beq.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bd0:	4b32      	ldr	r3, [pc, #200]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x354>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	099b      	lsrs	r3, r3, #6
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bda:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003bdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003be2:	663b      	str	r3, [r7, #96]	; 0x60
 8003be4:	2300      	movs	r3, #0
 8003be6:	667b      	str	r3, [r7, #100]	; 0x64
 8003be8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003bec:	4622      	mov	r2, r4
 8003bee:	462b      	mov	r3, r5
 8003bf0:	f04f 0000 	mov.w	r0, #0
 8003bf4:	f04f 0100 	mov.w	r1, #0
 8003bf8:	0159      	lsls	r1, r3, #5
 8003bfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bfe:	0150      	lsls	r0, r2, #5
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4621      	mov	r1, r4
 8003c06:	1a51      	subs	r1, r2, r1
 8003c08:	61b9      	str	r1, [r7, #24]
 8003c0a:	4629      	mov	r1, r5
 8003c0c:	eb63 0301 	sbc.w	r3, r3, r1
 8003c10:	61fb      	str	r3, [r7, #28]
 8003c12:	f04f 0200 	mov.w	r2, #0
 8003c16:	f04f 0300 	mov.w	r3, #0
 8003c1a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003c1e:	4659      	mov	r1, fp
 8003c20:	018b      	lsls	r3, r1, #6
 8003c22:	4651      	mov	r1, sl
 8003c24:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c28:	4651      	mov	r1, sl
 8003c2a:	018a      	lsls	r2, r1, #6
 8003c2c:	4651      	mov	r1, sl
 8003c2e:	ebb2 0801 	subs.w	r8, r2, r1
 8003c32:	4659      	mov	r1, fp
 8003c34:	eb63 0901 	sbc.w	r9, r3, r1
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c44:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c48:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c4c:	4690      	mov	r8, r2
 8003c4e:	4699      	mov	r9, r3
 8003c50:	4623      	mov	r3, r4
 8003c52:	eb18 0303 	adds.w	r3, r8, r3
 8003c56:	613b      	str	r3, [r7, #16]
 8003c58:	462b      	mov	r3, r5
 8003c5a:	eb49 0303 	adc.w	r3, r9, r3
 8003c5e:	617b      	str	r3, [r7, #20]
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003c6c:	4629      	mov	r1, r5
 8003c6e:	024b      	lsls	r3, r1, #9
 8003c70:	4621      	mov	r1, r4
 8003c72:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c76:	4621      	mov	r1, r4
 8003c78:	024a      	lsls	r2, r1, #9
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c82:	2200      	movs	r2, #0
 8003c84:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c86:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003c88:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c8c:	f7fc fb18 	bl	80002c0 <__aeabi_uldivmod>
 8003c90:	4602      	mov	r2, r0
 8003c92:	460b      	mov	r3, r1
 8003c94:	4613      	mov	r3, r2
 8003c96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c9a:	e065      	b.n	8003d68 <HAL_RCC_GetSysClockFreq+0x420>
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	00f42400 	.word	0x00f42400
 8003ca4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ca8:	4b3d      	ldr	r3, [pc, #244]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x458>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	099b      	lsrs	r3, r3, #6
 8003cae:	2200      	movs	r2, #0
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	4611      	mov	r1, r2
 8003cb4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cb8:	653b      	str	r3, [r7, #80]	; 0x50
 8003cba:	2300      	movs	r3, #0
 8003cbc:	657b      	str	r3, [r7, #84]	; 0x54
 8003cbe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003cc2:	4642      	mov	r2, r8
 8003cc4:	464b      	mov	r3, r9
 8003cc6:	f04f 0000 	mov.w	r0, #0
 8003cca:	f04f 0100 	mov.w	r1, #0
 8003cce:	0159      	lsls	r1, r3, #5
 8003cd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cd4:	0150      	lsls	r0, r2, #5
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4641      	mov	r1, r8
 8003cdc:	1a51      	subs	r1, r2, r1
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	4649      	mov	r1, r9
 8003ce2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	f04f 0300 	mov.w	r3, #0
 8003cf0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003cf4:	4659      	mov	r1, fp
 8003cf6:	018b      	lsls	r3, r1, #6
 8003cf8:	4651      	mov	r1, sl
 8003cfa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cfe:	4651      	mov	r1, sl
 8003d00:	018a      	lsls	r2, r1, #6
 8003d02:	4651      	mov	r1, sl
 8003d04:	1a54      	subs	r4, r2, r1
 8003d06:	4659      	mov	r1, fp
 8003d08:	eb63 0501 	sbc.w	r5, r3, r1
 8003d0c:	f04f 0200 	mov.w	r2, #0
 8003d10:	f04f 0300 	mov.w	r3, #0
 8003d14:	00eb      	lsls	r3, r5, #3
 8003d16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d1a:	00e2      	lsls	r2, r4, #3
 8003d1c:	4614      	mov	r4, r2
 8003d1e:	461d      	mov	r5, r3
 8003d20:	4643      	mov	r3, r8
 8003d22:	18e3      	adds	r3, r4, r3
 8003d24:	603b      	str	r3, [r7, #0]
 8003d26:	464b      	mov	r3, r9
 8003d28:	eb45 0303 	adc.w	r3, r5, r3
 8003d2c:	607b      	str	r3, [r7, #4]
 8003d2e:	f04f 0200 	mov.w	r2, #0
 8003d32:	f04f 0300 	mov.w	r3, #0
 8003d36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d3a:	4629      	mov	r1, r5
 8003d3c:	028b      	lsls	r3, r1, #10
 8003d3e:	4621      	mov	r1, r4
 8003d40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d44:	4621      	mov	r1, r4
 8003d46:	028a      	lsls	r2, r1, #10
 8003d48:	4610      	mov	r0, r2
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d50:	2200      	movs	r2, #0
 8003d52:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d54:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003d56:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d5a:	f7fc fab1 	bl	80002c0 <__aeabi_uldivmod>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	460b      	mov	r3, r1
 8003d62:	4613      	mov	r3, r2
 8003d64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003d68:	4b0d      	ldr	r3, [pc, #52]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x458>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	0f1b      	lsrs	r3, r3, #28
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003d76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d86:	e003      	b.n	8003d90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d88:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003d8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d8e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	37b8      	adds	r7, #184	; 0xb8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d9e:	bf00      	nop
 8003da0:	40023800 	.word	0x40023800
 8003da4:	00f42400 	.word	0x00f42400

08003da8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e28d      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 8083 	beq.w	8003ece <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003dc8:	4b94      	ldr	r3, [pc, #592]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 030c 	and.w	r3, r3, #12
 8003dd0:	2b04      	cmp	r3, #4
 8003dd2:	d019      	beq.n	8003e08 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003dd4:	4b91      	ldr	r3, [pc, #580]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d106      	bne.n	8003dee <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003de0:	4b8e      	ldr	r3, [pc, #568]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003de8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dec:	d00c      	beq.n	8003e08 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dee:	4b8b      	ldr	r3, [pc, #556]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003df6:	2b0c      	cmp	r3, #12
 8003df8:	d112      	bne.n	8003e20 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dfa:	4b88      	ldr	r3, [pc, #544]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e06:	d10b      	bne.n	8003e20 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e08:	4b84      	ldr	r3, [pc, #528]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d05b      	beq.n	8003ecc <HAL_RCC_OscConfig+0x124>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d157      	bne.n	8003ecc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e25a      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e28:	d106      	bne.n	8003e38 <HAL_RCC_OscConfig+0x90>
 8003e2a:	4b7c      	ldr	r3, [pc, #496]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a7b      	ldr	r2, [pc, #492]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	e01d      	b.n	8003e74 <HAL_RCC_OscConfig+0xcc>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e40:	d10c      	bne.n	8003e5c <HAL_RCC_OscConfig+0xb4>
 8003e42:	4b76      	ldr	r3, [pc, #472]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a75      	ldr	r2, [pc, #468]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	4b73      	ldr	r3, [pc, #460]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a72      	ldr	r2, [pc, #456]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	e00b      	b.n	8003e74 <HAL_RCC_OscConfig+0xcc>
 8003e5c:	4b6f      	ldr	r3, [pc, #444]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a6e      	ldr	r2, [pc, #440]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e66:	6013      	str	r3, [r2, #0]
 8003e68:	4b6c      	ldr	r3, [pc, #432]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a6b      	ldr	r2, [pc, #428]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d013      	beq.n	8003ea4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7c:	f7fe fd46 	bl	800290c <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e84:	f7fe fd42 	bl	800290c <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b64      	cmp	r3, #100	; 0x64
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e21f      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e96:	4b61      	ldr	r3, [pc, #388]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0f0      	beq.n	8003e84 <HAL_RCC_OscConfig+0xdc>
 8003ea2:	e014      	b.n	8003ece <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea4:	f7fe fd32 	bl	800290c <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eac:	f7fe fd2e 	bl	800290c <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b64      	cmp	r3, #100	; 0x64
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e20b      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ebe:	4b57      	ldr	r3, [pc, #348]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1f0      	bne.n	8003eac <HAL_RCC_OscConfig+0x104>
 8003eca:	e000      	b.n	8003ece <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d06f      	beq.n	8003fba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003eda:	4b50      	ldr	r3, [pc, #320]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 030c 	and.w	r3, r3, #12
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d017      	beq.n	8003f16 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ee6:	4b4d      	ldr	r3, [pc, #308]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003eee:	2b08      	cmp	r3, #8
 8003ef0:	d105      	bne.n	8003efe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ef2:	4b4a      	ldr	r3, [pc, #296]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00b      	beq.n	8003f16 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003efe:	4b47      	ldr	r3, [pc, #284]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f06:	2b0c      	cmp	r3, #12
 8003f08:	d11c      	bne.n	8003f44 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f0a:	4b44      	ldr	r3, [pc, #272]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d116      	bne.n	8003f44 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f16:	4b41      	ldr	r3, [pc, #260]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d005      	beq.n	8003f2e <HAL_RCC_OscConfig+0x186>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d001      	beq.n	8003f2e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e1d3      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f2e:	4b3b      	ldr	r3, [pc, #236]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	4937      	ldr	r1, [pc, #220]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f42:	e03a      	b.n	8003fba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d020      	beq.n	8003f8e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f4c:	4b34      	ldr	r3, [pc, #208]	; (8004020 <HAL_RCC_OscConfig+0x278>)
 8003f4e:	2201      	movs	r2, #1
 8003f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f52:	f7fe fcdb 	bl	800290c <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f5a:	f7fe fcd7 	bl	800290c <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e1b4      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f6c:	4b2b      	ldr	r3, [pc, #172]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0f0      	beq.n	8003f5a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f78:	4b28      	ldr	r3, [pc, #160]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	4925      	ldr	r1, [pc, #148]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	600b      	str	r3, [r1, #0]
 8003f8c:	e015      	b.n	8003fba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f8e:	4b24      	ldr	r3, [pc, #144]	; (8004020 <HAL_RCC_OscConfig+0x278>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f94:	f7fe fcba 	bl	800290c <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f9c:	f7fe fcb6 	bl	800290c <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e193      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fae:	4b1b      	ldr	r3, [pc, #108]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f0      	bne.n	8003f9c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d036      	beq.n	8004034 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d016      	beq.n	8003ffc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fce:	4b15      	ldr	r3, [pc, #84]	; (8004024 <HAL_RCC_OscConfig+0x27c>)
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd4:	f7fe fc9a 	bl	800290c <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fdc:	f7fe fc96 	bl	800290c <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e173      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fee:	4b0b      	ldr	r3, [pc, #44]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003ff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0f0      	beq.n	8003fdc <HAL_RCC_OscConfig+0x234>
 8003ffa:	e01b      	b.n	8004034 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ffc:	4b09      	ldr	r3, [pc, #36]	; (8004024 <HAL_RCC_OscConfig+0x27c>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004002:	f7fe fc83 	bl	800290c <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004008:	e00e      	b.n	8004028 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800400a:	f7fe fc7f 	bl	800290c <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d907      	bls.n	8004028 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e15c      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
 800401c:	40023800 	.word	0x40023800
 8004020:	42470000 	.word	0x42470000
 8004024:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004028:	4b8a      	ldr	r3, [pc, #552]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 800402a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1ea      	bne.n	800400a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 8097 	beq.w	8004170 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004042:	2300      	movs	r3, #0
 8004044:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004046:	4b83      	ldr	r3, [pc, #524]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10f      	bne.n	8004072 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004052:	2300      	movs	r3, #0
 8004054:	60bb      	str	r3, [r7, #8]
 8004056:	4b7f      	ldr	r3, [pc, #508]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	4a7e      	ldr	r2, [pc, #504]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 800405c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004060:	6413      	str	r3, [r2, #64]	; 0x40
 8004062:	4b7c      	ldr	r3, [pc, #496]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800406a:	60bb      	str	r3, [r7, #8]
 800406c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800406e:	2301      	movs	r3, #1
 8004070:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004072:	4b79      	ldr	r3, [pc, #484]	; (8004258 <HAL_RCC_OscConfig+0x4b0>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407a:	2b00      	cmp	r3, #0
 800407c:	d118      	bne.n	80040b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800407e:	4b76      	ldr	r3, [pc, #472]	; (8004258 <HAL_RCC_OscConfig+0x4b0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a75      	ldr	r2, [pc, #468]	; (8004258 <HAL_RCC_OscConfig+0x4b0>)
 8004084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004088:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800408a:	f7fe fc3f 	bl	800290c <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004092:	f7fe fc3b 	bl	800290c <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e118      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a4:	4b6c      	ldr	r3, [pc, #432]	; (8004258 <HAL_RCC_OscConfig+0x4b0>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0f0      	beq.n	8004092 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d106      	bne.n	80040c6 <HAL_RCC_OscConfig+0x31e>
 80040b8:	4b66      	ldr	r3, [pc, #408]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80040ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040bc:	4a65      	ldr	r2, [pc, #404]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	6713      	str	r3, [r2, #112]	; 0x70
 80040c4:	e01c      	b.n	8004100 <HAL_RCC_OscConfig+0x358>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	2b05      	cmp	r3, #5
 80040cc:	d10c      	bne.n	80040e8 <HAL_RCC_OscConfig+0x340>
 80040ce:	4b61      	ldr	r3, [pc, #388]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80040d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d2:	4a60      	ldr	r2, [pc, #384]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80040d4:	f043 0304 	orr.w	r3, r3, #4
 80040d8:	6713      	str	r3, [r2, #112]	; 0x70
 80040da:	4b5e      	ldr	r3, [pc, #376]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040de:	4a5d      	ldr	r2, [pc, #372]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80040e0:	f043 0301 	orr.w	r3, r3, #1
 80040e4:	6713      	str	r3, [r2, #112]	; 0x70
 80040e6:	e00b      	b.n	8004100 <HAL_RCC_OscConfig+0x358>
 80040e8:	4b5a      	ldr	r3, [pc, #360]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80040ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ec:	4a59      	ldr	r2, [pc, #356]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80040ee:	f023 0301 	bic.w	r3, r3, #1
 80040f2:	6713      	str	r3, [r2, #112]	; 0x70
 80040f4:	4b57      	ldr	r3, [pc, #348]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80040f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f8:	4a56      	ldr	r2, [pc, #344]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80040fa:	f023 0304 	bic.w	r3, r3, #4
 80040fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d015      	beq.n	8004134 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004108:	f7fe fc00 	bl	800290c <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410e:	e00a      	b.n	8004126 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004110:	f7fe fbfc 	bl	800290c <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	f241 3288 	movw	r2, #5000	; 0x1388
 800411e:	4293      	cmp	r3, r2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e0d7      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004126:	4b4b      	ldr	r3, [pc, #300]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 8004128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0ee      	beq.n	8004110 <HAL_RCC_OscConfig+0x368>
 8004132:	e014      	b.n	800415e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004134:	f7fe fbea 	bl	800290c <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800413a:	e00a      	b.n	8004152 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800413c:	f7fe fbe6 	bl	800290c <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	f241 3288 	movw	r2, #5000	; 0x1388
 800414a:	4293      	cmp	r3, r2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e0c1      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004152:	4b40      	ldr	r3, [pc, #256]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 8004154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1ee      	bne.n	800413c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800415e:	7dfb      	ldrb	r3, [r7, #23]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d105      	bne.n	8004170 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004164:	4b3b      	ldr	r3, [pc, #236]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 8004166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004168:	4a3a      	ldr	r2, [pc, #232]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 800416a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800416e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 80ad 	beq.w	80042d4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800417a:	4b36      	ldr	r3, [pc, #216]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 030c 	and.w	r3, r3, #12
 8004182:	2b08      	cmp	r3, #8
 8004184:	d060      	beq.n	8004248 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	2b02      	cmp	r3, #2
 800418c:	d145      	bne.n	800421a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800418e:	4b33      	ldr	r3, [pc, #204]	; (800425c <HAL_RCC_OscConfig+0x4b4>)
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004194:	f7fe fbba 	bl	800290c <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800419c:	f7fe fbb6 	bl	800290c <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e093      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ae:	4b29      	ldr	r3, [pc, #164]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1f0      	bne.n	800419c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	69da      	ldr	r2, [r3, #28]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	019b      	lsls	r3, r3, #6
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d0:	085b      	lsrs	r3, r3, #1
 80041d2:	3b01      	subs	r3, #1
 80041d4:	041b      	lsls	r3, r3, #16
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041dc:	061b      	lsls	r3, r3, #24
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e4:	071b      	lsls	r3, r3, #28
 80041e6:	491b      	ldr	r1, [pc, #108]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041ec:	4b1b      	ldr	r3, [pc, #108]	; (800425c <HAL_RCC_OscConfig+0x4b4>)
 80041ee:	2201      	movs	r2, #1
 80041f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f2:	f7fe fb8b 	bl	800290c <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041fa:	f7fe fb87 	bl	800290c <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e064      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800420c:	4b11      	ldr	r3, [pc, #68]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0f0      	beq.n	80041fa <HAL_RCC_OscConfig+0x452>
 8004218:	e05c      	b.n	80042d4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800421a:	4b10      	ldr	r3, [pc, #64]	; (800425c <HAL_RCC_OscConfig+0x4b4>)
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004220:	f7fe fb74 	bl	800290c <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004228:	f7fe fb70 	bl	800290c <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e04d      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800423a:	4b06      	ldr	r3, [pc, #24]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1f0      	bne.n	8004228 <HAL_RCC_OscConfig+0x480>
 8004246:	e045      	b.n	80042d4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d107      	bne.n	8004260 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e040      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
 8004254:	40023800 	.word	0x40023800
 8004258:	40007000 	.word	0x40007000
 800425c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004260:	4b1f      	ldr	r3, [pc, #124]	; (80042e0 <HAL_RCC_OscConfig+0x538>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d030      	beq.n	80042d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004278:	429a      	cmp	r2, r3
 800427a:	d129      	bne.n	80042d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004286:	429a      	cmp	r2, r3
 8004288:	d122      	bne.n	80042d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004290:	4013      	ands	r3, r2
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004296:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004298:	4293      	cmp	r3, r2
 800429a:	d119      	bne.n	80042d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a6:	085b      	lsrs	r3, r3, #1
 80042a8:	3b01      	subs	r3, #1
 80042aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d10f      	bne.n	80042d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042bc:	429a      	cmp	r2, r3
 80042be:	d107      	bne.n	80042d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d001      	beq.n	80042d4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e000      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3718      	adds	r7, #24
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40023800 	.word	0x40023800

080042e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e03f      	b.n	8004376 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7fe f962 	bl	80025d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2224      	movs	r2, #36	; 0x24
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004326:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 ff73 	bl	8005214 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800433c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	695a      	ldr	r2, [r3, #20]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800434c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68da      	ldr	r2, [r3, #12]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800435c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2220      	movs	r2, #32
 8004370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b08a      	sub	sp, #40	; 0x28
 8004382:	af02      	add	r7, sp, #8
 8004384:	60f8      	str	r0, [r7, #12]
 8004386:	60b9      	str	r1, [r7, #8]
 8004388:	603b      	str	r3, [r7, #0]
 800438a:	4613      	mov	r3, r2
 800438c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800438e:	2300      	movs	r3, #0
 8004390:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b20      	cmp	r3, #32
 800439c:	d17c      	bne.n	8004498 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d002      	beq.n	80043aa <HAL_UART_Transmit+0x2c>
 80043a4:	88fb      	ldrh	r3, [r7, #6]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e075      	b.n	800449a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_UART_Transmit+0x3e>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e06e      	b.n	800449a <HAL_UART_Transmit+0x11c>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2221      	movs	r2, #33	; 0x21
 80043ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043d2:	f7fe fa9b 	bl	800290c <HAL_GetTick>
 80043d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	88fa      	ldrh	r2, [r7, #6]
 80043dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	88fa      	ldrh	r2, [r7, #6]
 80043e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ec:	d108      	bne.n	8004400 <HAL_UART_Transmit+0x82>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d104      	bne.n	8004400 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	61bb      	str	r3, [r7, #24]
 80043fe:	e003      	b.n	8004408 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004404:	2300      	movs	r3, #0
 8004406:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004410:	e02a      	b.n	8004468 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2200      	movs	r2, #0
 800441a:	2180      	movs	r1, #128	; 0x80
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 fc2b 	bl	8004c78 <UART_WaitOnFlagUntilTimeout>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e036      	b.n	800449a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10b      	bne.n	800444a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	461a      	mov	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004440:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	3302      	adds	r3, #2
 8004446:	61bb      	str	r3, [r7, #24]
 8004448:	e007      	b.n	800445a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	781a      	ldrb	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	3301      	adds	r3, #1
 8004458:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800445e:	b29b      	uxth	r3, r3
 8004460:	3b01      	subs	r3, #1
 8004462:	b29a      	uxth	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800446c:	b29b      	uxth	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1cf      	bne.n	8004412 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2200      	movs	r2, #0
 800447a:	2140      	movs	r1, #64	; 0x40
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 fbfb 	bl	8004c78 <UART_WaitOnFlagUntilTimeout>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e006      	b.n	800449a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2220      	movs	r2, #32
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004494:	2300      	movs	r3, #0
 8004496:	e000      	b.n	800449a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004498:	2302      	movs	r3, #2
  }
}
 800449a:	4618      	mov	r0, r3
 800449c:	3720      	adds	r7, #32
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b084      	sub	sp, #16
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	60f8      	str	r0, [r7, #12]
 80044aa:	60b9      	str	r1, [r7, #8]
 80044ac:	4613      	mov	r3, r2
 80044ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	2b20      	cmp	r3, #32
 80044ba:	d11d      	bne.n	80044f8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <HAL_UART_Receive_DMA+0x26>
 80044c2:	88fb      	ldrh	r3, [r7, #6]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e016      	b.n	80044fa <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d101      	bne.n	80044da <HAL_UART_Receive_DMA+0x38>
 80044d6:	2302      	movs	r3, #2
 80044d8:	e00f      	b.n	80044fa <HAL_UART_Receive_DMA+0x58>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80044e8:	88fb      	ldrh	r3, [r7, #6]
 80044ea:	461a      	mov	r2, r3
 80044ec:	68b9      	ldr	r1, [r7, #8]
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 fc30 	bl	8004d54 <UART_Start_Receive_DMA>
 80044f4:	4603      	mov	r3, r0
 80044f6:	e000      	b.n	80044fa <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80044f8:	2302      	movs	r3, #2
  }
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
	...

08004504 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b0ba      	sub	sp, #232	; 0xe8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800452a:	2300      	movs	r3, #0
 800452c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004530:	2300      	movs	r3, #0
 8004532:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800453a:	f003 030f 	and.w	r3, r3, #15
 800453e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004542:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10f      	bne.n	800456a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800454a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800454e:	f003 0320 	and.w	r3, r3, #32
 8004552:	2b00      	cmp	r3, #0
 8004554:	d009      	beq.n	800456a <HAL_UART_IRQHandler+0x66>
 8004556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800455a:	f003 0320 	and.w	r3, r3, #32
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 fd9b 	bl	800509e <UART_Receive_IT>
      return;
 8004568:	e256      	b.n	8004a18 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800456a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800456e:	2b00      	cmp	r3, #0
 8004570:	f000 80de 	beq.w	8004730 <HAL_UART_IRQHandler+0x22c>
 8004574:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	d106      	bne.n	800458e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004584:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 80d1 	beq.w	8004730 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800458e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00b      	beq.n	80045b2 <HAL_UART_IRQHandler+0xae>
 800459a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800459e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d005      	beq.n	80045b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	f043 0201 	orr.w	r2, r3, #1
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045b6:	f003 0304 	and.w	r3, r3, #4
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00b      	beq.n	80045d6 <HAL_UART_IRQHandler+0xd2>
 80045be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d005      	beq.n	80045d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	f043 0202 	orr.w	r2, r3, #2
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00b      	beq.n	80045fa <HAL_UART_IRQHandler+0xf6>
 80045e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d005      	beq.n	80045fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	f043 0204 	orr.w	r2, r3, #4
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80045fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045fe:	f003 0308 	and.w	r3, r3, #8
 8004602:	2b00      	cmp	r3, #0
 8004604:	d011      	beq.n	800462a <HAL_UART_IRQHandler+0x126>
 8004606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800460a:	f003 0320 	and.w	r3, r3, #32
 800460e:	2b00      	cmp	r3, #0
 8004610:	d105      	bne.n	800461e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004612:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d005      	beq.n	800462a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	f043 0208 	orr.w	r2, r3, #8
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 81ed 	beq.w	8004a0e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004638:	f003 0320 	and.w	r3, r3, #32
 800463c:	2b00      	cmp	r3, #0
 800463e:	d008      	beq.n	8004652 <HAL_UART_IRQHandler+0x14e>
 8004640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004644:	f003 0320 	and.w	r3, r3, #32
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 fd26 	bl	800509e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465c:	2b40      	cmp	r3, #64	; 0x40
 800465e:	bf0c      	ite	eq
 8004660:	2301      	moveq	r3, #1
 8004662:	2300      	movne	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	f003 0308 	and.w	r3, r3, #8
 8004672:	2b00      	cmp	r3, #0
 8004674:	d103      	bne.n	800467e <HAL_UART_IRQHandler+0x17a>
 8004676:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800467a:	2b00      	cmp	r3, #0
 800467c:	d04f      	beq.n	800471e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 fc2e 	bl	8004ee0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468e:	2b40      	cmp	r3, #64	; 0x40
 8004690:	d141      	bne.n	8004716 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	3314      	adds	r3, #20
 8004698:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046a0:	e853 3f00 	ldrex	r3, [r3]
 80046a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80046a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3314      	adds	r3, #20
 80046ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80046be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80046c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80046ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80046ce:	e841 2300 	strex	r3, r2, [r1]
 80046d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80046d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1d9      	bne.n	8004692 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d013      	beq.n	800470e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ea:	4a7d      	ldr	r2, [pc, #500]	; (80048e0 <HAL_UART_IRQHandler+0x3dc>)
 80046ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fe fb9e 	bl	8002e34 <HAL_DMA_Abort_IT>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d016      	beq.n	800472c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004708:	4610      	mov	r0, r2
 800470a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800470c:	e00e      	b.n	800472c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f9a4 	bl	8004a5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004714:	e00a      	b.n	800472c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f9a0 	bl	8004a5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800471c:	e006      	b.n	800472c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f99c 	bl	8004a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800472a:	e170      	b.n	8004a0e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800472c:	bf00      	nop
    return;
 800472e:	e16e      	b.n	8004a0e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004734:	2b01      	cmp	r3, #1
 8004736:	f040 814a 	bne.w	80049ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800473a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800473e:	f003 0310 	and.w	r3, r3, #16
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 8143 	beq.w	80049ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800474c:	f003 0310 	and.w	r3, r3, #16
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 813c 	beq.w	80049ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004756:	2300      	movs	r3, #0
 8004758:	60bb      	str	r3, [r7, #8]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	60bb      	str	r3, [r7, #8]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	60bb      	str	r3, [r7, #8]
 800476a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004776:	2b40      	cmp	r3, #64	; 0x40
 8004778:	f040 80b4 	bne.w	80048e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004788:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 8140 	beq.w	8004a12 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004796:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800479a:	429a      	cmp	r2, r3
 800479c:	f080 8139 	bcs.w	8004a12 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047b2:	f000 8088 	beq.w	80048c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	330c      	adds	r3, #12
 80047bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047c4:	e853 3f00 	ldrex	r3, [r3]
 80047c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80047cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	330c      	adds	r3, #12
 80047de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80047e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80047ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80047f2:	e841 2300 	strex	r3, r2, [r1]
 80047f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80047fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1d9      	bne.n	80047b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	3314      	adds	r3, #20
 8004808:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800480c:	e853 3f00 	ldrex	r3, [r3]
 8004810:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004812:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004814:	f023 0301 	bic.w	r3, r3, #1
 8004818:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	3314      	adds	r3, #20
 8004822:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004826:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800482a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800482e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004832:	e841 2300 	strex	r3, r2, [r1]
 8004836:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004838:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1e1      	bne.n	8004802 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	3314      	adds	r3, #20
 8004844:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004846:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004848:	e853 3f00 	ldrex	r3, [r3]
 800484c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800484e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004854:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	3314      	adds	r3, #20
 800485e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004862:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004864:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004866:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004868:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800486a:	e841 2300 	strex	r3, r2, [r1]
 800486e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004870:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1e3      	bne.n	800483e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	330c      	adds	r3, #12
 800488a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800488e:	e853 3f00 	ldrex	r3, [r3]
 8004892:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004896:	f023 0310 	bic.w	r3, r3, #16
 800489a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	330c      	adds	r3, #12
 80048a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80048a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80048aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048b0:	e841 2300 	strex	r3, r2, [r1]
 80048b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80048b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1e3      	bne.n	8004884 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7fe fa47 	bl	8002d54 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	4619      	mov	r1, r3
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f8ca 	bl	8004a70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048dc:	e099      	b.n	8004a12 <HAL_UART_IRQHandler+0x50e>
 80048de:	bf00      	nop
 80048e0:	08004fa7 	.word	0x08004fa7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f000 808b 	beq.w	8004a16 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004900:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 8086 	beq.w	8004a16 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	330c      	adds	r3, #12
 8004910:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004914:	e853 3f00 	ldrex	r3, [r3]
 8004918:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800491a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800491c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004920:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	330c      	adds	r3, #12
 800492a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800492e:	647a      	str	r2, [r7, #68]	; 0x44
 8004930:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004932:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004934:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004936:	e841 2300 	strex	r3, r2, [r1]
 800493a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800493c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1e3      	bne.n	800490a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	3314      	adds	r3, #20
 8004948:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	e853 3f00 	ldrex	r3, [r3]
 8004950:	623b      	str	r3, [r7, #32]
   return(result);
 8004952:	6a3b      	ldr	r3, [r7, #32]
 8004954:	f023 0301 	bic.w	r3, r3, #1
 8004958:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3314      	adds	r3, #20
 8004962:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004966:	633a      	str	r2, [r7, #48]	; 0x30
 8004968:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800496c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800496e:	e841 2300 	strex	r3, r2, [r1]
 8004972:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1e3      	bne.n	8004942 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2220      	movs	r2, #32
 800497e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	330c      	adds	r3, #12
 800498e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	e853 3f00 	ldrex	r3, [r3]
 8004996:	60fb      	str	r3, [r7, #12]
   return(result);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f023 0310 	bic.w	r3, r3, #16
 800499e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	330c      	adds	r3, #12
 80049a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80049ac:	61fa      	str	r2, [r7, #28]
 80049ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b0:	69b9      	ldr	r1, [r7, #24]
 80049b2:	69fa      	ldr	r2, [r7, #28]
 80049b4:	e841 2300 	strex	r3, r2, [r1]
 80049b8:	617b      	str	r3, [r7, #20]
   return(result);
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1e3      	bne.n	8004988 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049c4:	4619      	mov	r1, r3
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f852 	bl	8004a70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049cc:	e023      	b.n	8004a16 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d009      	beq.n	80049ee <HAL_UART_IRQHandler+0x4ea>
 80049da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 faf1 	bl	8004fce <UART_Transmit_IT>
    return;
 80049ec:	e014      	b.n	8004a18 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00e      	beq.n	8004a18 <HAL_UART_IRQHandler+0x514>
 80049fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d008      	beq.n	8004a18 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 fb31 	bl	800506e <UART_EndTransmit_IT>
    return;
 8004a0c:	e004      	b.n	8004a18 <HAL_UART_IRQHandler+0x514>
    return;
 8004a0e:	bf00      	nop
 8004a10:	e002      	b.n	8004a18 <HAL_UART_IRQHandler+0x514>
      return;
 8004a12:	bf00      	nop
 8004a14:	e000      	b.n	8004a18 <HAL_UART_IRQHandler+0x514>
      return;
 8004a16:	bf00      	nop
  }
}
 8004a18:	37e8      	adds	r7, #232	; 0xe8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop

08004a20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	460b      	mov	r3, r1
 8004a7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b09c      	sub	sp, #112	; 0x70
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a94:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d172      	bne.n	8004b8a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004aaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	330c      	adds	r3, #12
 8004ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ab4:	e853 3f00 	ldrex	r3, [r3]
 8004ab8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004abc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ac0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	330c      	adds	r3, #12
 8004ac8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004aca:	65ba      	str	r2, [r7, #88]	; 0x58
 8004acc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ace:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ad0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ad2:	e841 2300 	strex	r3, r2, [r1]
 8004ad6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1e5      	bne.n	8004aaa <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	3314      	adds	r3, #20
 8004ae4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae8:	e853 3f00 	ldrex	r3, [r3]
 8004aec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af0:	f023 0301 	bic.w	r3, r3, #1
 8004af4:	667b      	str	r3, [r7, #100]	; 0x64
 8004af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	3314      	adds	r3, #20
 8004afc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004afe:	647a      	str	r2, [r7, #68]	; 0x44
 8004b00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b06:	e841 2300 	strex	r3, r2, [r1]
 8004b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1e5      	bne.n	8004ade <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3314      	adds	r3, #20
 8004b18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	e853 3f00 	ldrex	r3, [r3]
 8004b20:	623b      	str	r3, [r7, #32]
   return(result);
 8004b22:	6a3b      	ldr	r3, [r7, #32]
 8004b24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b28:	663b      	str	r3, [r7, #96]	; 0x60
 8004b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	3314      	adds	r3, #20
 8004b30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b32:	633a      	str	r2, [r7, #48]	; 0x30
 8004b34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b3a:	e841 2300 	strex	r3, r2, [r1]
 8004b3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1e5      	bne.n	8004b12 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b48:	2220      	movs	r2, #32
 8004b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d119      	bne.n	8004b8a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	330c      	adds	r3, #12
 8004b5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	e853 3f00 	ldrex	r3, [r3]
 8004b64:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f023 0310 	bic.w	r3, r3, #16
 8004b6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	330c      	adds	r3, #12
 8004b74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b76:	61fa      	str	r2, [r7, #28]
 8004b78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7a:	69b9      	ldr	r1, [r7, #24]
 8004b7c:	69fa      	ldr	r2, [r7, #28]
 8004b7e:	e841 2300 	strex	r3, r2, [r1]
 8004b82:	617b      	str	r3, [r7, #20]
   return(result);
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1e5      	bne.n	8004b56 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d106      	bne.n	8004ba0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b96:	4619      	mov	r1, r3
 8004b98:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004b9a:	f7ff ff69 	bl	8004a70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b9e:	e002      	b.n	8004ba6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004ba0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004ba2:	f7ff ff47 	bl	8004a34 <HAL_UART_RxCpltCallback>
}
 8004ba6:	bf00      	nop
 8004ba8:	3770      	adds	r7, #112	; 0x70
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b084      	sub	sp, #16
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d108      	bne.n	8004bd6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bc8:	085b      	lsrs	r3, r3, #1
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	4619      	mov	r1, r3
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f7ff ff4e 	bl	8004a70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004bd4:	e002      	b.n	8004bdc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f7ff ff36 	bl	8004a48 <HAL_UART_RxHalfCpltCallback>
}
 8004bdc:	bf00      	nop
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c00:	2b80      	cmp	r3, #128	; 0x80
 8004c02:	bf0c      	ite	eq
 8004c04:	2301      	moveq	r3, #1
 8004c06:	2300      	movne	r3, #0
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b21      	cmp	r3, #33	; 0x21
 8004c16:	d108      	bne.n	8004c2a <UART_DMAError+0x46>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d005      	beq.n	8004c2a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	2200      	movs	r2, #0
 8004c22:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004c24:	68b8      	ldr	r0, [r7, #8]
 8004c26:	f000 f933 	bl	8004e90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c34:	2b40      	cmp	r3, #64	; 0x40
 8004c36:	bf0c      	ite	eq
 8004c38:	2301      	moveq	r3, #1
 8004c3a:	2300      	movne	r3, #0
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b22      	cmp	r3, #34	; 0x22
 8004c4a:	d108      	bne.n	8004c5e <UART_DMAError+0x7a>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d005      	beq.n	8004c5e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	2200      	movs	r2, #0
 8004c56:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004c58:	68b8      	ldr	r0, [r7, #8]
 8004c5a:	f000 f941 	bl	8004ee0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	f043 0210 	orr.w	r2, r3, #16
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c6a:	68b8      	ldr	r0, [r7, #8]
 8004c6c:	f7ff fef6 	bl	8004a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c70:	bf00      	nop
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b090      	sub	sp, #64	; 0x40
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	603b      	str	r3, [r7, #0]
 8004c84:	4613      	mov	r3, r2
 8004c86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c88:	e050      	b.n	8004d2c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c90:	d04c      	beq.n	8004d2c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d007      	beq.n	8004ca8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c98:	f7fd fe38 	bl	800290c <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d241      	bcs.n	8004d2c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	330c      	adds	r3, #12
 8004cae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb2:	e853 3f00 	ldrex	r3, [r3]
 8004cb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	330c      	adds	r3, #12
 8004cc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004cc8:	637a      	str	r2, [r7, #52]	; 0x34
 8004cca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ccc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cd0:	e841 2300 	strex	r3, r2, [r1]
 8004cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1e5      	bne.n	8004ca8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	3314      	adds	r3, #20
 8004ce2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	e853 3f00 	ldrex	r3, [r3]
 8004cea:	613b      	str	r3, [r7, #16]
   return(result);
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	f023 0301 	bic.w	r3, r3, #1
 8004cf2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3314      	adds	r3, #20
 8004cfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cfc:	623a      	str	r2, [r7, #32]
 8004cfe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d00:	69f9      	ldr	r1, [r7, #28]
 8004d02:	6a3a      	ldr	r2, [r7, #32]
 8004d04:	e841 2300 	strex	r3, r2, [r1]
 8004d08:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1e5      	bne.n	8004cdc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e00f      	b.n	8004d4c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	4013      	ands	r3, r2
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	bf0c      	ite	eq
 8004d3c:	2301      	moveq	r3, #1
 8004d3e:	2300      	movne	r3, #0
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	461a      	mov	r2, r3
 8004d44:	79fb      	ldrb	r3, [r7, #7]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d09f      	beq.n	8004c8a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3740      	adds	r7, #64	; 0x40
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b098      	sub	sp, #96	; 0x60
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	88fa      	ldrh	r2, [r7, #6]
 8004d6c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2222      	movs	r2, #34	; 0x22
 8004d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d80:	4a40      	ldr	r2, [pc, #256]	; (8004e84 <UART_Start_Receive_DMA+0x130>)
 8004d82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d88:	4a3f      	ldr	r2, [pc, #252]	; (8004e88 <UART_Start_Receive_DMA+0x134>)
 8004d8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d90:	4a3e      	ldr	r2, [pc, #248]	; (8004e8c <UART_Start_Receive_DMA+0x138>)
 8004d92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d98:	2200      	movs	r2, #0
 8004d9a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004d9c:	f107 0308 	add.w	r3, r7, #8
 8004da0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	3304      	adds	r3, #4
 8004dac:	4619      	mov	r1, r3
 8004dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	88fb      	ldrh	r3, [r7, #6]
 8004db4:	f7fd ff76 	bl	8002ca4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004db8:	2300      	movs	r3, #0
 8004dba:	613b      	str	r3, [r7, #16]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	613b      	str	r3, [r7, #16]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	613b      	str	r3, [r7, #16]
 8004dcc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d019      	beq.n	8004e12 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	330c      	adds	r3, #12
 8004de4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004de8:	e853 3f00 	ldrex	r3, [r3]
 8004dec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004df4:	65bb      	str	r3, [r7, #88]	; 0x58
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	330c      	adds	r3, #12
 8004dfc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dfe:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004e00:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e02:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004e04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e06:	e841 2300 	strex	r3, r2, [r1]
 8004e0a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1e5      	bne.n	8004dde <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3314      	adds	r3, #20
 8004e18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1c:	e853 3f00 	ldrex	r3, [r3]
 8004e20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e24:	f043 0301 	orr.w	r3, r3, #1
 8004e28:	657b      	str	r3, [r7, #84]	; 0x54
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3314      	adds	r3, #20
 8004e30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004e32:	63ba      	str	r2, [r7, #56]	; 0x38
 8004e34:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e36:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e3a:	e841 2300 	strex	r3, r2, [r1]
 8004e3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1e5      	bne.n	8004e12 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	3314      	adds	r3, #20
 8004e4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	e853 3f00 	ldrex	r3, [r3]
 8004e54:	617b      	str	r3, [r7, #20]
   return(result);
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e5c:	653b      	str	r3, [r7, #80]	; 0x50
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	3314      	adds	r3, #20
 8004e64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e66:	627a      	str	r2, [r7, #36]	; 0x24
 8004e68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6a:	6a39      	ldr	r1, [r7, #32]
 8004e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e6e:	e841 2300 	strex	r3, r2, [r1]
 8004e72:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1e5      	bne.n	8004e46 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3760      	adds	r7, #96	; 0x60
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	08004a89 	.word	0x08004a89
 8004e88:	08004baf 	.word	0x08004baf
 8004e8c:	08004be5 	.word	0x08004be5

08004e90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b089      	sub	sp, #36	; 0x24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	330c      	adds	r3, #12
 8004e9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	e853 3f00 	ldrex	r3, [r3]
 8004ea6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004eae:	61fb      	str	r3, [r7, #28]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	330c      	adds	r3, #12
 8004eb6:	69fa      	ldr	r2, [r7, #28]
 8004eb8:	61ba      	str	r2, [r7, #24]
 8004eba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebc:	6979      	ldr	r1, [r7, #20]
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	e841 2300 	strex	r3, r2, [r1]
 8004ec4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1e5      	bne.n	8004e98 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004ed4:	bf00      	nop
 8004ed6:	3724      	adds	r7, #36	; 0x24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b095      	sub	sp, #84	; 0x54
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	330c      	adds	r3, #12
 8004eee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef2:	e853 3f00 	ldrex	r3, [r3]
 8004ef6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004efe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	330c      	adds	r3, #12
 8004f06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f08:	643a      	str	r2, [r7, #64]	; 0x40
 8004f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f10:	e841 2300 	strex	r3, r2, [r1]
 8004f14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1e5      	bne.n	8004ee8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	3314      	adds	r3, #20
 8004f22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f24:	6a3b      	ldr	r3, [r7, #32]
 8004f26:	e853 3f00 	ldrex	r3, [r3]
 8004f2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	f023 0301 	bic.w	r3, r3, #1
 8004f32:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	3314      	adds	r3, #20
 8004f3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f44:	e841 2300 	strex	r3, r2, [r1]
 8004f48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1e5      	bne.n	8004f1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d119      	bne.n	8004f8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	330c      	adds	r3, #12
 8004f5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	e853 3f00 	ldrex	r3, [r3]
 8004f66:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	f023 0310 	bic.w	r3, r3, #16
 8004f6e:	647b      	str	r3, [r7, #68]	; 0x44
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	330c      	adds	r3, #12
 8004f76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f78:	61ba      	str	r2, [r7, #24]
 8004f7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7c:	6979      	ldr	r1, [r7, #20]
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	e841 2300 	strex	r3, r2, [r1]
 8004f84:	613b      	str	r3, [r7, #16]
   return(result);
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1e5      	bne.n	8004f58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004f9a:	bf00      	nop
 8004f9c:	3754      	adds	r7, #84	; 0x54
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b084      	sub	sp, #16
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f7ff fd4b 	bl	8004a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fc6:	bf00      	nop
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b085      	sub	sp, #20
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b21      	cmp	r3, #33	; 0x21
 8004fe0:	d13e      	bne.n	8005060 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fea:	d114      	bne.n	8005016 <UART_Transmit_IT+0x48>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d110      	bne.n	8005016 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	461a      	mov	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005008:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	1c9a      	adds	r2, r3, #2
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	621a      	str	r2, [r3, #32]
 8005014:	e008      	b.n	8005028 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	1c59      	adds	r1, r3, #1
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	6211      	str	r1, [r2, #32]
 8005020:	781a      	ldrb	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800502c:	b29b      	uxth	r3, r3
 800502e:	3b01      	subs	r3, #1
 8005030:	b29b      	uxth	r3, r3
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	4619      	mov	r1, r3
 8005036:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005038:	2b00      	cmp	r3, #0
 800503a:	d10f      	bne.n	800505c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68da      	ldr	r2, [r3, #12]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800504a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68da      	ldr	r2, [r3, #12]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800505a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800505c:	2300      	movs	r3, #0
 800505e:	e000      	b.n	8005062 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005060:	2302      	movs	r3, #2
  }
}
 8005062:	4618      	mov	r0, r3
 8005064:	3714      	adds	r7, #20
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b082      	sub	sp, #8
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68da      	ldr	r2, [r3, #12]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005084:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2220      	movs	r2, #32
 800508a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7ff fcc6 	bl	8004a20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b08c      	sub	sp, #48	; 0x30
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b22      	cmp	r3, #34	; 0x22
 80050b0:	f040 80ab 	bne.w	800520a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050bc:	d117      	bne.n	80050ee <UART_Receive_IT+0x50>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d113      	bne.n	80050ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80050c6:	2300      	movs	r3, #0
 80050c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050dc:	b29a      	uxth	r2, r3
 80050de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e6:	1c9a      	adds	r2, r3, #2
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	629a      	str	r2, [r3, #40]	; 0x28
 80050ec:	e026      	b.n	800513c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80050f4:	2300      	movs	r3, #0
 80050f6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005100:	d007      	beq.n	8005112 <UART_Receive_IT+0x74>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10a      	bne.n	8005120 <UART_Receive_IT+0x82>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d106      	bne.n	8005120 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	b2da      	uxtb	r2, r3
 800511a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511c:	701a      	strb	r2, [r3, #0]
 800511e:	e008      	b.n	8005132 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	b2db      	uxtb	r3, r3
 8005128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800512c:	b2da      	uxtb	r2, r3
 800512e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005130:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005140:	b29b      	uxth	r3, r3
 8005142:	3b01      	subs	r3, #1
 8005144:	b29b      	uxth	r3, r3
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	4619      	mov	r1, r3
 800514a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800514c:	2b00      	cmp	r3, #0
 800514e:	d15a      	bne.n	8005206 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68da      	ldr	r2, [r3, #12]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 0220 	bic.w	r2, r2, #32
 800515e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68da      	ldr	r2, [r3, #12]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800516e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	695a      	ldr	r2, [r3, #20]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f022 0201 	bic.w	r2, r2, #1
 800517e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2220      	movs	r2, #32
 8005184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518c:	2b01      	cmp	r3, #1
 800518e:	d135      	bne.n	80051fc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	330c      	adds	r3, #12
 800519c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	e853 3f00 	ldrex	r3, [r3]
 80051a4:	613b      	str	r3, [r7, #16]
   return(result);
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	f023 0310 	bic.w	r3, r3, #16
 80051ac:	627b      	str	r3, [r7, #36]	; 0x24
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	330c      	adds	r3, #12
 80051b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b6:	623a      	str	r2, [r7, #32]
 80051b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ba:	69f9      	ldr	r1, [r7, #28]
 80051bc:	6a3a      	ldr	r2, [r7, #32]
 80051be:	e841 2300 	strex	r3, r2, [r1]
 80051c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1e5      	bne.n	8005196 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0310 	and.w	r3, r3, #16
 80051d4:	2b10      	cmp	r3, #16
 80051d6:	d10a      	bne.n	80051ee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051d8:	2300      	movs	r3, #0
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	60fb      	str	r3, [r7, #12]
 80051ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051f2:	4619      	mov	r1, r3
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f7ff fc3b 	bl	8004a70 <HAL_UARTEx_RxEventCallback>
 80051fa:	e002      	b.n	8005202 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7ff fc19 	bl	8004a34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005202:	2300      	movs	r3, #0
 8005204:	e002      	b.n	800520c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005206:	2300      	movs	r3, #0
 8005208:	e000      	b.n	800520c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800520a:	2302      	movs	r3, #2
  }
}
 800520c:	4618      	mov	r0, r3
 800520e:	3730      	adds	r7, #48	; 0x30
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005218:	b0c0      	sub	sp, #256	; 0x100
 800521a:	af00      	add	r7, sp, #0
 800521c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800522c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005230:	68d9      	ldr	r1, [r3, #12]
 8005232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	ea40 0301 	orr.w	r3, r0, r1
 800523c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800523e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	431a      	orrs	r2, r3
 800524c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	431a      	orrs	r2, r3
 8005254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	4313      	orrs	r3, r2
 800525c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800526c:	f021 010c 	bic.w	r1, r1, #12
 8005270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800527a:	430b      	orrs	r3, r1
 800527c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800527e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800528a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800528e:	6999      	ldr	r1, [r3, #24]
 8005290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	ea40 0301 	orr.w	r3, r0, r1
 800529a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800529c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	4b8f      	ldr	r3, [pc, #572]	; (80054e0 <UART_SetConfig+0x2cc>)
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d005      	beq.n	80052b4 <UART_SetConfig+0xa0>
 80052a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	4b8d      	ldr	r3, [pc, #564]	; (80054e4 <UART_SetConfig+0x2d0>)
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d104      	bne.n	80052be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052b4:	f7fe fb34 	bl	8003920 <HAL_RCC_GetPCLK2Freq>
 80052b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80052bc:	e003      	b.n	80052c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052be:	f7fe fb1b 	bl	80038f8 <HAL_RCC_GetPCLK1Freq>
 80052c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ca:	69db      	ldr	r3, [r3, #28]
 80052cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052d0:	f040 810c 	bne.w	80054ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052d8:	2200      	movs	r2, #0
 80052da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80052de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80052e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80052e6:	4622      	mov	r2, r4
 80052e8:	462b      	mov	r3, r5
 80052ea:	1891      	adds	r1, r2, r2
 80052ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80052ee:	415b      	adcs	r3, r3
 80052f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80052f6:	4621      	mov	r1, r4
 80052f8:	eb12 0801 	adds.w	r8, r2, r1
 80052fc:	4629      	mov	r1, r5
 80052fe:	eb43 0901 	adc.w	r9, r3, r1
 8005302:	f04f 0200 	mov.w	r2, #0
 8005306:	f04f 0300 	mov.w	r3, #0
 800530a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800530e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005312:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005316:	4690      	mov	r8, r2
 8005318:	4699      	mov	r9, r3
 800531a:	4623      	mov	r3, r4
 800531c:	eb18 0303 	adds.w	r3, r8, r3
 8005320:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005324:	462b      	mov	r3, r5
 8005326:	eb49 0303 	adc.w	r3, r9, r3
 800532a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800532e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800533a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800533e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005342:	460b      	mov	r3, r1
 8005344:	18db      	adds	r3, r3, r3
 8005346:	653b      	str	r3, [r7, #80]	; 0x50
 8005348:	4613      	mov	r3, r2
 800534a:	eb42 0303 	adc.w	r3, r2, r3
 800534e:	657b      	str	r3, [r7, #84]	; 0x54
 8005350:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005354:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005358:	f7fa ffb2 	bl	80002c0 <__aeabi_uldivmod>
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	4b61      	ldr	r3, [pc, #388]	; (80054e8 <UART_SetConfig+0x2d4>)
 8005362:	fba3 2302 	umull	r2, r3, r3, r2
 8005366:	095b      	lsrs	r3, r3, #5
 8005368:	011c      	lsls	r4, r3, #4
 800536a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800536e:	2200      	movs	r2, #0
 8005370:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005374:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005378:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800537c:	4642      	mov	r2, r8
 800537e:	464b      	mov	r3, r9
 8005380:	1891      	adds	r1, r2, r2
 8005382:	64b9      	str	r1, [r7, #72]	; 0x48
 8005384:	415b      	adcs	r3, r3
 8005386:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005388:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800538c:	4641      	mov	r1, r8
 800538e:	eb12 0a01 	adds.w	sl, r2, r1
 8005392:	4649      	mov	r1, r9
 8005394:	eb43 0b01 	adc.w	fp, r3, r1
 8005398:	f04f 0200 	mov.w	r2, #0
 800539c:	f04f 0300 	mov.w	r3, #0
 80053a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053ac:	4692      	mov	sl, r2
 80053ae:	469b      	mov	fp, r3
 80053b0:	4643      	mov	r3, r8
 80053b2:	eb1a 0303 	adds.w	r3, sl, r3
 80053b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053ba:	464b      	mov	r3, r9
 80053bc:	eb4b 0303 	adc.w	r3, fp, r3
 80053c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80053c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80053d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80053d8:	460b      	mov	r3, r1
 80053da:	18db      	adds	r3, r3, r3
 80053dc:	643b      	str	r3, [r7, #64]	; 0x40
 80053de:	4613      	mov	r3, r2
 80053e0:	eb42 0303 	adc.w	r3, r2, r3
 80053e4:	647b      	str	r3, [r7, #68]	; 0x44
 80053e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80053ee:	f7fa ff67 	bl	80002c0 <__aeabi_uldivmod>
 80053f2:	4602      	mov	r2, r0
 80053f4:	460b      	mov	r3, r1
 80053f6:	4611      	mov	r1, r2
 80053f8:	4b3b      	ldr	r3, [pc, #236]	; (80054e8 <UART_SetConfig+0x2d4>)
 80053fa:	fba3 2301 	umull	r2, r3, r3, r1
 80053fe:	095b      	lsrs	r3, r3, #5
 8005400:	2264      	movs	r2, #100	; 0x64
 8005402:	fb02 f303 	mul.w	r3, r2, r3
 8005406:	1acb      	subs	r3, r1, r3
 8005408:	00db      	lsls	r3, r3, #3
 800540a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800540e:	4b36      	ldr	r3, [pc, #216]	; (80054e8 <UART_SetConfig+0x2d4>)
 8005410:	fba3 2302 	umull	r2, r3, r3, r2
 8005414:	095b      	lsrs	r3, r3, #5
 8005416:	005b      	lsls	r3, r3, #1
 8005418:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800541c:	441c      	add	r4, r3
 800541e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005422:	2200      	movs	r2, #0
 8005424:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005428:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800542c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005430:	4642      	mov	r2, r8
 8005432:	464b      	mov	r3, r9
 8005434:	1891      	adds	r1, r2, r2
 8005436:	63b9      	str	r1, [r7, #56]	; 0x38
 8005438:	415b      	adcs	r3, r3
 800543a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800543c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005440:	4641      	mov	r1, r8
 8005442:	1851      	adds	r1, r2, r1
 8005444:	6339      	str	r1, [r7, #48]	; 0x30
 8005446:	4649      	mov	r1, r9
 8005448:	414b      	adcs	r3, r1
 800544a:	637b      	str	r3, [r7, #52]	; 0x34
 800544c:	f04f 0200 	mov.w	r2, #0
 8005450:	f04f 0300 	mov.w	r3, #0
 8005454:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005458:	4659      	mov	r1, fp
 800545a:	00cb      	lsls	r3, r1, #3
 800545c:	4651      	mov	r1, sl
 800545e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005462:	4651      	mov	r1, sl
 8005464:	00ca      	lsls	r2, r1, #3
 8005466:	4610      	mov	r0, r2
 8005468:	4619      	mov	r1, r3
 800546a:	4603      	mov	r3, r0
 800546c:	4642      	mov	r2, r8
 800546e:	189b      	adds	r3, r3, r2
 8005470:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005474:	464b      	mov	r3, r9
 8005476:	460a      	mov	r2, r1
 8005478:	eb42 0303 	adc.w	r3, r2, r3
 800547c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800548c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005490:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005494:	460b      	mov	r3, r1
 8005496:	18db      	adds	r3, r3, r3
 8005498:	62bb      	str	r3, [r7, #40]	; 0x28
 800549a:	4613      	mov	r3, r2
 800549c:	eb42 0303 	adc.w	r3, r2, r3
 80054a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80054aa:	f7fa ff09 	bl	80002c0 <__aeabi_uldivmod>
 80054ae:	4602      	mov	r2, r0
 80054b0:	460b      	mov	r3, r1
 80054b2:	4b0d      	ldr	r3, [pc, #52]	; (80054e8 <UART_SetConfig+0x2d4>)
 80054b4:	fba3 1302 	umull	r1, r3, r3, r2
 80054b8:	095b      	lsrs	r3, r3, #5
 80054ba:	2164      	movs	r1, #100	; 0x64
 80054bc:	fb01 f303 	mul.w	r3, r1, r3
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	00db      	lsls	r3, r3, #3
 80054c4:	3332      	adds	r3, #50	; 0x32
 80054c6:	4a08      	ldr	r2, [pc, #32]	; (80054e8 <UART_SetConfig+0x2d4>)
 80054c8:	fba2 2303 	umull	r2, r3, r2, r3
 80054cc:	095b      	lsrs	r3, r3, #5
 80054ce:	f003 0207 	and.w	r2, r3, #7
 80054d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4422      	add	r2, r4
 80054da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054dc:	e105      	b.n	80056ea <UART_SetConfig+0x4d6>
 80054de:	bf00      	nop
 80054e0:	40011000 	.word	0x40011000
 80054e4:	40011400 	.word	0x40011400
 80054e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054f0:	2200      	movs	r2, #0
 80054f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80054f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80054fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80054fe:	4642      	mov	r2, r8
 8005500:	464b      	mov	r3, r9
 8005502:	1891      	adds	r1, r2, r2
 8005504:	6239      	str	r1, [r7, #32]
 8005506:	415b      	adcs	r3, r3
 8005508:	627b      	str	r3, [r7, #36]	; 0x24
 800550a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800550e:	4641      	mov	r1, r8
 8005510:	1854      	adds	r4, r2, r1
 8005512:	4649      	mov	r1, r9
 8005514:	eb43 0501 	adc.w	r5, r3, r1
 8005518:	f04f 0200 	mov.w	r2, #0
 800551c:	f04f 0300 	mov.w	r3, #0
 8005520:	00eb      	lsls	r3, r5, #3
 8005522:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005526:	00e2      	lsls	r2, r4, #3
 8005528:	4614      	mov	r4, r2
 800552a:	461d      	mov	r5, r3
 800552c:	4643      	mov	r3, r8
 800552e:	18e3      	adds	r3, r4, r3
 8005530:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005534:	464b      	mov	r3, r9
 8005536:	eb45 0303 	adc.w	r3, r5, r3
 800553a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800553e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800554a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800554e:	f04f 0200 	mov.w	r2, #0
 8005552:	f04f 0300 	mov.w	r3, #0
 8005556:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800555a:	4629      	mov	r1, r5
 800555c:	008b      	lsls	r3, r1, #2
 800555e:	4621      	mov	r1, r4
 8005560:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005564:	4621      	mov	r1, r4
 8005566:	008a      	lsls	r2, r1, #2
 8005568:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800556c:	f7fa fea8 	bl	80002c0 <__aeabi_uldivmod>
 8005570:	4602      	mov	r2, r0
 8005572:	460b      	mov	r3, r1
 8005574:	4b60      	ldr	r3, [pc, #384]	; (80056f8 <UART_SetConfig+0x4e4>)
 8005576:	fba3 2302 	umull	r2, r3, r3, r2
 800557a:	095b      	lsrs	r3, r3, #5
 800557c:	011c      	lsls	r4, r3, #4
 800557e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005582:	2200      	movs	r2, #0
 8005584:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005588:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800558c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005590:	4642      	mov	r2, r8
 8005592:	464b      	mov	r3, r9
 8005594:	1891      	adds	r1, r2, r2
 8005596:	61b9      	str	r1, [r7, #24]
 8005598:	415b      	adcs	r3, r3
 800559a:	61fb      	str	r3, [r7, #28]
 800559c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055a0:	4641      	mov	r1, r8
 80055a2:	1851      	adds	r1, r2, r1
 80055a4:	6139      	str	r1, [r7, #16]
 80055a6:	4649      	mov	r1, r9
 80055a8:	414b      	adcs	r3, r1
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	f04f 0200 	mov.w	r2, #0
 80055b0:	f04f 0300 	mov.w	r3, #0
 80055b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055b8:	4659      	mov	r1, fp
 80055ba:	00cb      	lsls	r3, r1, #3
 80055bc:	4651      	mov	r1, sl
 80055be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055c2:	4651      	mov	r1, sl
 80055c4:	00ca      	lsls	r2, r1, #3
 80055c6:	4610      	mov	r0, r2
 80055c8:	4619      	mov	r1, r3
 80055ca:	4603      	mov	r3, r0
 80055cc:	4642      	mov	r2, r8
 80055ce:	189b      	adds	r3, r3, r2
 80055d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055d4:	464b      	mov	r3, r9
 80055d6:	460a      	mov	r2, r1
 80055d8:	eb42 0303 	adc.w	r3, r2, r3
 80055dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80055ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80055ec:	f04f 0200 	mov.w	r2, #0
 80055f0:	f04f 0300 	mov.w	r3, #0
 80055f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80055f8:	4649      	mov	r1, r9
 80055fa:	008b      	lsls	r3, r1, #2
 80055fc:	4641      	mov	r1, r8
 80055fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005602:	4641      	mov	r1, r8
 8005604:	008a      	lsls	r2, r1, #2
 8005606:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800560a:	f7fa fe59 	bl	80002c0 <__aeabi_uldivmod>
 800560e:	4602      	mov	r2, r0
 8005610:	460b      	mov	r3, r1
 8005612:	4b39      	ldr	r3, [pc, #228]	; (80056f8 <UART_SetConfig+0x4e4>)
 8005614:	fba3 1302 	umull	r1, r3, r3, r2
 8005618:	095b      	lsrs	r3, r3, #5
 800561a:	2164      	movs	r1, #100	; 0x64
 800561c:	fb01 f303 	mul.w	r3, r1, r3
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	011b      	lsls	r3, r3, #4
 8005624:	3332      	adds	r3, #50	; 0x32
 8005626:	4a34      	ldr	r2, [pc, #208]	; (80056f8 <UART_SetConfig+0x4e4>)
 8005628:	fba2 2303 	umull	r2, r3, r2, r3
 800562c:	095b      	lsrs	r3, r3, #5
 800562e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005632:	441c      	add	r4, r3
 8005634:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005638:	2200      	movs	r2, #0
 800563a:	673b      	str	r3, [r7, #112]	; 0x70
 800563c:	677a      	str	r2, [r7, #116]	; 0x74
 800563e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005642:	4642      	mov	r2, r8
 8005644:	464b      	mov	r3, r9
 8005646:	1891      	adds	r1, r2, r2
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	415b      	adcs	r3, r3
 800564c:	60fb      	str	r3, [r7, #12]
 800564e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005652:	4641      	mov	r1, r8
 8005654:	1851      	adds	r1, r2, r1
 8005656:	6039      	str	r1, [r7, #0]
 8005658:	4649      	mov	r1, r9
 800565a:	414b      	adcs	r3, r1
 800565c:	607b      	str	r3, [r7, #4]
 800565e:	f04f 0200 	mov.w	r2, #0
 8005662:	f04f 0300 	mov.w	r3, #0
 8005666:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800566a:	4659      	mov	r1, fp
 800566c:	00cb      	lsls	r3, r1, #3
 800566e:	4651      	mov	r1, sl
 8005670:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005674:	4651      	mov	r1, sl
 8005676:	00ca      	lsls	r2, r1, #3
 8005678:	4610      	mov	r0, r2
 800567a:	4619      	mov	r1, r3
 800567c:	4603      	mov	r3, r0
 800567e:	4642      	mov	r2, r8
 8005680:	189b      	adds	r3, r3, r2
 8005682:	66bb      	str	r3, [r7, #104]	; 0x68
 8005684:	464b      	mov	r3, r9
 8005686:	460a      	mov	r2, r1
 8005688:	eb42 0303 	adc.w	r3, r2, r3
 800568c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800568e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	663b      	str	r3, [r7, #96]	; 0x60
 8005698:	667a      	str	r2, [r7, #100]	; 0x64
 800569a:	f04f 0200 	mov.w	r2, #0
 800569e:	f04f 0300 	mov.w	r3, #0
 80056a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80056a6:	4649      	mov	r1, r9
 80056a8:	008b      	lsls	r3, r1, #2
 80056aa:	4641      	mov	r1, r8
 80056ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056b0:	4641      	mov	r1, r8
 80056b2:	008a      	lsls	r2, r1, #2
 80056b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80056b8:	f7fa fe02 	bl	80002c0 <__aeabi_uldivmod>
 80056bc:	4602      	mov	r2, r0
 80056be:	460b      	mov	r3, r1
 80056c0:	4b0d      	ldr	r3, [pc, #52]	; (80056f8 <UART_SetConfig+0x4e4>)
 80056c2:	fba3 1302 	umull	r1, r3, r3, r2
 80056c6:	095b      	lsrs	r3, r3, #5
 80056c8:	2164      	movs	r1, #100	; 0x64
 80056ca:	fb01 f303 	mul.w	r3, r1, r3
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	011b      	lsls	r3, r3, #4
 80056d2:	3332      	adds	r3, #50	; 0x32
 80056d4:	4a08      	ldr	r2, [pc, #32]	; (80056f8 <UART_SetConfig+0x4e4>)
 80056d6:	fba2 2303 	umull	r2, r3, r2, r3
 80056da:	095b      	lsrs	r3, r3, #5
 80056dc:	f003 020f 	and.w	r2, r3, #15
 80056e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4422      	add	r2, r4
 80056e8:	609a      	str	r2, [r3, #8]
}
 80056ea:	bf00      	nop
 80056ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80056f0:	46bd      	mov	sp, r7
 80056f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056f6:	bf00      	nop
 80056f8:	51eb851f 	.word	0x51eb851f

080056fc <__errno>:
 80056fc:	4b01      	ldr	r3, [pc, #4]	; (8005704 <__errno+0x8>)
 80056fe:	6818      	ldr	r0, [r3, #0]
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	200000a8 	.word	0x200000a8

08005708 <__libc_init_array>:
 8005708:	b570      	push	{r4, r5, r6, lr}
 800570a:	4d0d      	ldr	r5, [pc, #52]	; (8005740 <__libc_init_array+0x38>)
 800570c:	4c0d      	ldr	r4, [pc, #52]	; (8005744 <__libc_init_array+0x3c>)
 800570e:	1b64      	subs	r4, r4, r5
 8005710:	10a4      	asrs	r4, r4, #2
 8005712:	2600      	movs	r6, #0
 8005714:	42a6      	cmp	r6, r4
 8005716:	d109      	bne.n	800572c <__libc_init_array+0x24>
 8005718:	4d0b      	ldr	r5, [pc, #44]	; (8005748 <__libc_init_array+0x40>)
 800571a:	4c0c      	ldr	r4, [pc, #48]	; (800574c <__libc_init_array+0x44>)
 800571c:	f000 fcb2 	bl	8006084 <_init>
 8005720:	1b64      	subs	r4, r4, r5
 8005722:	10a4      	asrs	r4, r4, #2
 8005724:	2600      	movs	r6, #0
 8005726:	42a6      	cmp	r6, r4
 8005728:	d105      	bne.n	8005736 <__libc_init_array+0x2e>
 800572a:	bd70      	pop	{r4, r5, r6, pc}
 800572c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005730:	4798      	blx	r3
 8005732:	3601      	adds	r6, #1
 8005734:	e7ee      	b.n	8005714 <__libc_init_array+0xc>
 8005736:	f855 3b04 	ldr.w	r3, [r5], #4
 800573a:	4798      	blx	r3
 800573c:	3601      	adds	r6, #1
 800573e:	e7f2      	b.n	8005726 <__libc_init_array+0x1e>
 8005740:	08006194 	.word	0x08006194
 8005744:	08006194 	.word	0x08006194
 8005748:	08006194 	.word	0x08006194
 800574c:	08006198 	.word	0x08006198

08005750 <memcmp>:
 8005750:	b510      	push	{r4, lr}
 8005752:	3901      	subs	r1, #1
 8005754:	4402      	add	r2, r0
 8005756:	4290      	cmp	r0, r2
 8005758:	d101      	bne.n	800575e <memcmp+0xe>
 800575a:	2000      	movs	r0, #0
 800575c:	e005      	b.n	800576a <memcmp+0x1a>
 800575e:	7803      	ldrb	r3, [r0, #0]
 8005760:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005764:	42a3      	cmp	r3, r4
 8005766:	d001      	beq.n	800576c <memcmp+0x1c>
 8005768:	1b18      	subs	r0, r3, r4
 800576a:	bd10      	pop	{r4, pc}
 800576c:	3001      	adds	r0, #1
 800576e:	e7f2      	b.n	8005756 <memcmp+0x6>

08005770 <memcpy>:
 8005770:	440a      	add	r2, r1
 8005772:	4291      	cmp	r1, r2
 8005774:	f100 33ff 	add.w	r3, r0, #4294967295
 8005778:	d100      	bne.n	800577c <memcpy+0xc>
 800577a:	4770      	bx	lr
 800577c:	b510      	push	{r4, lr}
 800577e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005782:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005786:	4291      	cmp	r1, r2
 8005788:	d1f9      	bne.n	800577e <memcpy+0xe>
 800578a:	bd10      	pop	{r4, pc}

0800578c <memset>:
 800578c:	4402      	add	r2, r0
 800578e:	4603      	mov	r3, r0
 8005790:	4293      	cmp	r3, r2
 8005792:	d100      	bne.n	8005796 <memset+0xa>
 8005794:	4770      	bx	lr
 8005796:	f803 1b01 	strb.w	r1, [r3], #1
 800579a:	e7f9      	b.n	8005790 <memset+0x4>

0800579c <sniprintf>:
 800579c:	b40c      	push	{r2, r3}
 800579e:	b530      	push	{r4, r5, lr}
 80057a0:	4b17      	ldr	r3, [pc, #92]	; (8005800 <sniprintf+0x64>)
 80057a2:	1e0c      	subs	r4, r1, #0
 80057a4:	681d      	ldr	r5, [r3, #0]
 80057a6:	b09d      	sub	sp, #116	; 0x74
 80057a8:	da08      	bge.n	80057bc <sniprintf+0x20>
 80057aa:	238b      	movs	r3, #139	; 0x8b
 80057ac:	602b      	str	r3, [r5, #0]
 80057ae:	f04f 30ff 	mov.w	r0, #4294967295
 80057b2:	b01d      	add	sp, #116	; 0x74
 80057b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057b8:	b002      	add	sp, #8
 80057ba:	4770      	bx	lr
 80057bc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80057c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80057c4:	bf14      	ite	ne
 80057c6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80057ca:	4623      	moveq	r3, r4
 80057cc:	9304      	str	r3, [sp, #16]
 80057ce:	9307      	str	r3, [sp, #28]
 80057d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80057d4:	9002      	str	r0, [sp, #8]
 80057d6:	9006      	str	r0, [sp, #24]
 80057d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80057dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80057de:	ab21      	add	r3, sp, #132	; 0x84
 80057e0:	a902      	add	r1, sp, #8
 80057e2:	4628      	mov	r0, r5
 80057e4:	9301      	str	r3, [sp, #4]
 80057e6:	f000 f949 	bl	8005a7c <_svfiprintf_r>
 80057ea:	1c43      	adds	r3, r0, #1
 80057ec:	bfbc      	itt	lt
 80057ee:	238b      	movlt	r3, #139	; 0x8b
 80057f0:	602b      	strlt	r3, [r5, #0]
 80057f2:	2c00      	cmp	r4, #0
 80057f4:	d0dd      	beq.n	80057b2 <sniprintf+0x16>
 80057f6:	9b02      	ldr	r3, [sp, #8]
 80057f8:	2200      	movs	r2, #0
 80057fa:	701a      	strb	r2, [r3, #0]
 80057fc:	e7d9      	b.n	80057b2 <sniprintf+0x16>
 80057fe:	bf00      	nop
 8005800:	200000a8 	.word	0x200000a8

08005804 <_free_r>:
 8005804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005806:	2900      	cmp	r1, #0
 8005808:	d044      	beq.n	8005894 <_free_r+0x90>
 800580a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800580e:	9001      	str	r0, [sp, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	f1a1 0404 	sub.w	r4, r1, #4
 8005816:	bfb8      	it	lt
 8005818:	18e4      	addlt	r4, r4, r3
 800581a:	f000 fbef 	bl	8005ffc <__malloc_lock>
 800581e:	4a1e      	ldr	r2, [pc, #120]	; (8005898 <_free_r+0x94>)
 8005820:	9801      	ldr	r0, [sp, #4]
 8005822:	6813      	ldr	r3, [r2, #0]
 8005824:	b933      	cbnz	r3, 8005834 <_free_r+0x30>
 8005826:	6063      	str	r3, [r4, #4]
 8005828:	6014      	str	r4, [r2, #0]
 800582a:	b003      	add	sp, #12
 800582c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005830:	f000 bbea 	b.w	8006008 <__malloc_unlock>
 8005834:	42a3      	cmp	r3, r4
 8005836:	d908      	bls.n	800584a <_free_r+0x46>
 8005838:	6825      	ldr	r5, [r4, #0]
 800583a:	1961      	adds	r1, r4, r5
 800583c:	428b      	cmp	r3, r1
 800583e:	bf01      	itttt	eq
 8005840:	6819      	ldreq	r1, [r3, #0]
 8005842:	685b      	ldreq	r3, [r3, #4]
 8005844:	1949      	addeq	r1, r1, r5
 8005846:	6021      	streq	r1, [r4, #0]
 8005848:	e7ed      	b.n	8005826 <_free_r+0x22>
 800584a:	461a      	mov	r2, r3
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	b10b      	cbz	r3, 8005854 <_free_r+0x50>
 8005850:	42a3      	cmp	r3, r4
 8005852:	d9fa      	bls.n	800584a <_free_r+0x46>
 8005854:	6811      	ldr	r1, [r2, #0]
 8005856:	1855      	adds	r5, r2, r1
 8005858:	42a5      	cmp	r5, r4
 800585a:	d10b      	bne.n	8005874 <_free_r+0x70>
 800585c:	6824      	ldr	r4, [r4, #0]
 800585e:	4421      	add	r1, r4
 8005860:	1854      	adds	r4, r2, r1
 8005862:	42a3      	cmp	r3, r4
 8005864:	6011      	str	r1, [r2, #0]
 8005866:	d1e0      	bne.n	800582a <_free_r+0x26>
 8005868:	681c      	ldr	r4, [r3, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	6053      	str	r3, [r2, #4]
 800586e:	4421      	add	r1, r4
 8005870:	6011      	str	r1, [r2, #0]
 8005872:	e7da      	b.n	800582a <_free_r+0x26>
 8005874:	d902      	bls.n	800587c <_free_r+0x78>
 8005876:	230c      	movs	r3, #12
 8005878:	6003      	str	r3, [r0, #0]
 800587a:	e7d6      	b.n	800582a <_free_r+0x26>
 800587c:	6825      	ldr	r5, [r4, #0]
 800587e:	1961      	adds	r1, r4, r5
 8005880:	428b      	cmp	r3, r1
 8005882:	bf04      	itt	eq
 8005884:	6819      	ldreq	r1, [r3, #0]
 8005886:	685b      	ldreq	r3, [r3, #4]
 8005888:	6063      	str	r3, [r4, #4]
 800588a:	bf04      	itt	eq
 800588c:	1949      	addeq	r1, r1, r5
 800588e:	6021      	streq	r1, [r4, #0]
 8005890:	6054      	str	r4, [r2, #4]
 8005892:	e7ca      	b.n	800582a <_free_r+0x26>
 8005894:	b003      	add	sp, #12
 8005896:	bd30      	pop	{r4, r5, pc}
 8005898:	20000268 	.word	0x20000268

0800589c <sbrk_aligned>:
 800589c:	b570      	push	{r4, r5, r6, lr}
 800589e:	4e0e      	ldr	r6, [pc, #56]	; (80058d8 <sbrk_aligned+0x3c>)
 80058a0:	460c      	mov	r4, r1
 80058a2:	6831      	ldr	r1, [r6, #0]
 80058a4:	4605      	mov	r5, r0
 80058a6:	b911      	cbnz	r1, 80058ae <sbrk_aligned+0x12>
 80058a8:	f000 fb7c 	bl	8005fa4 <_sbrk_r>
 80058ac:	6030      	str	r0, [r6, #0]
 80058ae:	4621      	mov	r1, r4
 80058b0:	4628      	mov	r0, r5
 80058b2:	f000 fb77 	bl	8005fa4 <_sbrk_r>
 80058b6:	1c43      	adds	r3, r0, #1
 80058b8:	d00a      	beq.n	80058d0 <sbrk_aligned+0x34>
 80058ba:	1cc4      	adds	r4, r0, #3
 80058bc:	f024 0403 	bic.w	r4, r4, #3
 80058c0:	42a0      	cmp	r0, r4
 80058c2:	d007      	beq.n	80058d4 <sbrk_aligned+0x38>
 80058c4:	1a21      	subs	r1, r4, r0
 80058c6:	4628      	mov	r0, r5
 80058c8:	f000 fb6c 	bl	8005fa4 <_sbrk_r>
 80058cc:	3001      	adds	r0, #1
 80058ce:	d101      	bne.n	80058d4 <sbrk_aligned+0x38>
 80058d0:	f04f 34ff 	mov.w	r4, #4294967295
 80058d4:	4620      	mov	r0, r4
 80058d6:	bd70      	pop	{r4, r5, r6, pc}
 80058d8:	2000026c 	.word	0x2000026c

080058dc <_malloc_r>:
 80058dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058e0:	1ccd      	adds	r5, r1, #3
 80058e2:	f025 0503 	bic.w	r5, r5, #3
 80058e6:	3508      	adds	r5, #8
 80058e8:	2d0c      	cmp	r5, #12
 80058ea:	bf38      	it	cc
 80058ec:	250c      	movcc	r5, #12
 80058ee:	2d00      	cmp	r5, #0
 80058f0:	4607      	mov	r7, r0
 80058f2:	db01      	blt.n	80058f8 <_malloc_r+0x1c>
 80058f4:	42a9      	cmp	r1, r5
 80058f6:	d905      	bls.n	8005904 <_malloc_r+0x28>
 80058f8:	230c      	movs	r3, #12
 80058fa:	603b      	str	r3, [r7, #0]
 80058fc:	2600      	movs	r6, #0
 80058fe:	4630      	mov	r0, r6
 8005900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005904:	4e2e      	ldr	r6, [pc, #184]	; (80059c0 <_malloc_r+0xe4>)
 8005906:	f000 fb79 	bl	8005ffc <__malloc_lock>
 800590a:	6833      	ldr	r3, [r6, #0]
 800590c:	461c      	mov	r4, r3
 800590e:	bb34      	cbnz	r4, 800595e <_malloc_r+0x82>
 8005910:	4629      	mov	r1, r5
 8005912:	4638      	mov	r0, r7
 8005914:	f7ff ffc2 	bl	800589c <sbrk_aligned>
 8005918:	1c43      	adds	r3, r0, #1
 800591a:	4604      	mov	r4, r0
 800591c:	d14d      	bne.n	80059ba <_malloc_r+0xde>
 800591e:	6834      	ldr	r4, [r6, #0]
 8005920:	4626      	mov	r6, r4
 8005922:	2e00      	cmp	r6, #0
 8005924:	d140      	bne.n	80059a8 <_malloc_r+0xcc>
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	4631      	mov	r1, r6
 800592a:	4638      	mov	r0, r7
 800592c:	eb04 0803 	add.w	r8, r4, r3
 8005930:	f000 fb38 	bl	8005fa4 <_sbrk_r>
 8005934:	4580      	cmp	r8, r0
 8005936:	d13a      	bne.n	80059ae <_malloc_r+0xd2>
 8005938:	6821      	ldr	r1, [r4, #0]
 800593a:	3503      	adds	r5, #3
 800593c:	1a6d      	subs	r5, r5, r1
 800593e:	f025 0503 	bic.w	r5, r5, #3
 8005942:	3508      	adds	r5, #8
 8005944:	2d0c      	cmp	r5, #12
 8005946:	bf38      	it	cc
 8005948:	250c      	movcc	r5, #12
 800594a:	4629      	mov	r1, r5
 800594c:	4638      	mov	r0, r7
 800594e:	f7ff ffa5 	bl	800589c <sbrk_aligned>
 8005952:	3001      	adds	r0, #1
 8005954:	d02b      	beq.n	80059ae <_malloc_r+0xd2>
 8005956:	6823      	ldr	r3, [r4, #0]
 8005958:	442b      	add	r3, r5
 800595a:	6023      	str	r3, [r4, #0]
 800595c:	e00e      	b.n	800597c <_malloc_r+0xa0>
 800595e:	6822      	ldr	r2, [r4, #0]
 8005960:	1b52      	subs	r2, r2, r5
 8005962:	d41e      	bmi.n	80059a2 <_malloc_r+0xc6>
 8005964:	2a0b      	cmp	r2, #11
 8005966:	d916      	bls.n	8005996 <_malloc_r+0xba>
 8005968:	1961      	adds	r1, r4, r5
 800596a:	42a3      	cmp	r3, r4
 800596c:	6025      	str	r5, [r4, #0]
 800596e:	bf18      	it	ne
 8005970:	6059      	strne	r1, [r3, #4]
 8005972:	6863      	ldr	r3, [r4, #4]
 8005974:	bf08      	it	eq
 8005976:	6031      	streq	r1, [r6, #0]
 8005978:	5162      	str	r2, [r4, r5]
 800597a:	604b      	str	r3, [r1, #4]
 800597c:	4638      	mov	r0, r7
 800597e:	f104 060b 	add.w	r6, r4, #11
 8005982:	f000 fb41 	bl	8006008 <__malloc_unlock>
 8005986:	f026 0607 	bic.w	r6, r6, #7
 800598a:	1d23      	adds	r3, r4, #4
 800598c:	1af2      	subs	r2, r6, r3
 800598e:	d0b6      	beq.n	80058fe <_malloc_r+0x22>
 8005990:	1b9b      	subs	r3, r3, r6
 8005992:	50a3      	str	r3, [r4, r2]
 8005994:	e7b3      	b.n	80058fe <_malloc_r+0x22>
 8005996:	6862      	ldr	r2, [r4, #4]
 8005998:	42a3      	cmp	r3, r4
 800599a:	bf0c      	ite	eq
 800599c:	6032      	streq	r2, [r6, #0]
 800599e:	605a      	strne	r2, [r3, #4]
 80059a0:	e7ec      	b.n	800597c <_malloc_r+0xa0>
 80059a2:	4623      	mov	r3, r4
 80059a4:	6864      	ldr	r4, [r4, #4]
 80059a6:	e7b2      	b.n	800590e <_malloc_r+0x32>
 80059a8:	4634      	mov	r4, r6
 80059aa:	6876      	ldr	r6, [r6, #4]
 80059ac:	e7b9      	b.n	8005922 <_malloc_r+0x46>
 80059ae:	230c      	movs	r3, #12
 80059b0:	603b      	str	r3, [r7, #0]
 80059b2:	4638      	mov	r0, r7
 80059b4:	f000 fb28 	bl	8006008 <__malloc_unlock>
 80059b8:	e7a1      	b.n	80058fe <_malloc_r+0x22>
 80059ba:	6025      	str	r5, [r4, #0]
 80059bc:	e7de      	b.n	800597c <_malloc_r+0xa0>
 80059be:	bf00      	nop
 80059c0:	20000268 	.word	0x20000268

080059c4 <__ssputs_r>:
 80059c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c8:	688e      	ldr	r6, [r1, #8]
 80059ca:	429e      	cmp	r6, r3
 80059cc:	4682      	mov	sl, r0
 80059ce:	460c      	mov	r4, r1
 80059d0:	4690      	mov	r8, r2
 80059d2:	461f      	mov	r7, r3
 80059d4:	d838      	bhi.n	8005a48 <__ssputs_r+0x84>
 80059d6:	898a      	ldrh	r2, [r1, #12]
 80059d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80059dc:	d032      	beq.n	8005a44 <__ssputs_r+0x80>
 80059de:	6825      	ldr	r5, [r4, #0]
 80059e0:	6909      	ldr	r1, [r1, #16]
 80059e2:	eba5 0901 	sub.w	r9, r5, r1
 80059e6:	6965      	ldr	r5, [r4, #20]
 80059e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80059f0:	3301      	adds	r3, #1
 80059f2:	444b      	add	r3, r9
 80059f4:	106d      	asrs	r5, r5, #1
 80059f6:	429d      	cmp	r5, r3
 80059f8:	bf38      	it	cc
 80059fa:	461d      	movcc	r5, r3
 80059fc:	0553      	lsls	r3, r2, #21
 80059fe:	d531      	bpl.n	8005a64 <__ssputs_r+0xa0>
 8005a00:	4629      	mov	r1, r5
 8005a02:	f7ff ff6b 	bl	80058dc <_malloc_r>
 8005a06:	4606      	mov	r6, r0
 8005a08:	b950      	cbnz	r0, 8005a20 <__ssputs_r+0x5c>
 8005a0a:	230c      	movs	r3, #12
 8005a0c:	f8ca 3000 	str.w	r3, [sl]
 8005a10:	89a3      	ldrh	r3, [r4, #12]
 8005a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a16:	81a3      	strh	r3, [r4, #12]
 8005a18:	f04f 30ff 	mov.w	r0, #4294967295
 8005a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a20:	6921      	ldr	r1, [r4, #16]
 8005a22:	464a      	mov	r2, r9
 8005a24:	f7ff fea4 	bl	8005770 <memcpy>
 8005a28:	89a3      	ldrh	r3, [r4, #12]
 8005a2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a32:	81a3      	strh	r3, [r4, #12]
 8005a34:	6126      	str	r6, [r4, #16]
 8005a36:	6165      	str	r5, [r4, #20]
 8005a38:	444e      	add	r6, r9
 8005a3a:	eba5 0509 	sub.w	r5, r5, r9
 8005a3e:	6026      	str	r6, [r4, #0]
 8005a40:	60a5      	str	r5, [r4, #8]
 8005a42:	463e      	mov	r6, r7
 8005a44:	42be      	cmp	r6, r7
 8005a46:	d900      	bls.n	8005a4a <__ssputs_r+0x86>
 8005a48:	463e      	mov	r6, r7
 8005a4a:	6820      	ldr	r0, [r4, #0]
 8005a4c:	4632      	mov	r2, r6
 8005a4e:	4641      	mov	r1, r8
 8005a50:	f000 faba 	bl	8005fc8 <memmove>
 8005a54:	68a3      	ldr	r3, [r4, #8]
 8005a56:	1b9b      	subs	r3, r3, r6
 8005a58:	60a3      	str	r3, [r4, #8]
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	4433      	add	r3, r6
 8005a5e:	6023      	str	r3, [r4, #0]
 8005a60:	2000      	movs	r0, #0
 8005a62:	e7db      	b.n	8005a1c <__ssputs_r+0x58>
 8005a64:	462a      	mov	r2, r5
 8005a66:	f000 fad5 	bl	8006014 <_realloc_r>
 8005a6a:	4606      	mov	r6, r0
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	d1e1      	bne.n	8005a34 <__ssputs_r+0x70>
 8005a70:	6921      	ldr	r1, [r4, #16]
 8005a72:	4650      	mov	r0, sl
 8005a74:	f7ff fec6 	bl	8005804 <_free_r>
 8005a78:	e7c7      	b.n	8005a0a <__ssputs_r+0x46>
	...

08005a7c <_svfiprintf_r>:
 8005a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a80:	4698      	mov	r8, r3
 8005a82:	898b      	ldrh	r3, [r1, #12]
 8005a84:	061b      	lsls	r3, r3, #24
 8005a86:	b09d      	sub	sp, #116	; 0x74
 8005a88:	4607      	mov	r7, r0
 8005a8a:	460d      	mov	r5, r1
 8005a8c:	4614      	mov	r4, r2
 8005a8e:	d50e      	bpl.n	8005aae <_svfiprintf_r+0x32>
 8005a90:	690b      	ldr	r3, [r1, #16]
 8005a92:	b963      	cbnz	r3, 8005aae <_svfiprintf_r+0x32>
 8005a94:	2140      	movs	r1, #64	; 0x40
 8005a96:	f7ff ff21 	bl	80058dc <_malloc_r>
 8005a9a:	6028      	str	r0, [r5, #0]
 8005a9c:	6128      	str	r0, [r5, #16]
 8005a9e:	b920      	cbnz	r0, 8005aaa <_svfiprintf_r+0x2e>
 8005aa0:	230c      	movs	r3, #12
 8005aa2:	603b      	str	r3, [r7, #0]
 8005aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa8:	e0d1      	b.n	8005c4e <_svfiprintf_r+0x1d2>
 8005aaa:	2340      	movs	r3, #64	; 0x40
 8005aac:	616b      	str	r3, [r5, #20]
 8005aae:	2300      	movs	r3, #0
 8005ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ab2:	2320      	movs	r3, #32
 8005ab4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ab8:	f8cd 800c 	str.w	r8, [sp, #12]
 8005abc:	2330      	movs	r3, #48	; 0x30
 8005abe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005c68 <_svfiprintf_r+0x1ec>
 8005ac2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ac6:	f04f 0901 	mov.w	r9, #1
 8005aca:	4623      	mov	r3, r4
 8005acc:	469a      	mov	sl, r3
 8005ace:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ad2:	b10a      	cbz	r2, 8005ad8 <_svfiprintf_r+0x5c>
 8005ad4:	2a25      	cmp	r2, #37	; 0x25
 8005ad6:	d1f9      	bne.n	8005acc <_svfiprintf_r+0x50>
 8005ad8:	ebba 0b04 	subs.w	fp, sl, r4
 8005adc:	d00b      	beq.n	8005af6 <_svfiprintf_r+0x7a>
 8005ade:	465b      	mov	r3, fp
 8005ae0:	4622      	mov	r2, r4
 8005ae2:	4629      	mov	r1, r5
 8005ae4:	4638      	mov	r0, r7
 8005ae6:	f7ff ff6d 	bl	80059c4 <__ssputs_r>
 8005aea:	3001      	adds	r0, #1
 8005aec:	f000 80aa 	beq.w	8005c44 <_svfiprintf_r+0x1c8>
 8005af0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005af2:	445a      	add	r2, fp
 8005af4:	9209      	str	r2, [sp, #36]	; 0x24
 8005af6:	f89a 3000 	ldrb.w	r3, [sl]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 80a2 	beq.w	8005c44 <_svfiprintf_r+0x1c8>
 8005b00:	2300      	movs	r3, #0
 8005b02:	f04f 32ff 	mov.w	r2, #4294967295
 8005b06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b0a:	f10a 0a01 	add.w	sl, sl, #1
 8005b0e:	9304      	str	r3, [sp, #16]
 8005b10:	9307      	str	r3, [sp, #28]
 8005b12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b16:	931a      	str	r3, [sp, #104]	; 0x68
 8005b18:	4654      	mov	r4, sl
 8005b1a:	2205      	movs	r2, #5
 8005b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b20:	4851      	ldr	r0, [pc, #324]	; (8005c68 <_svfiprintf_r+0x1ec>)
 8005b22:	f7fa fb7d 	bl	8000220 <memchr>
 8005b26:	9a04      	ldr	r2, [sp, #16]
 8005b28:	b9d8      	cbnz	r0, 8005b62 <_svfiprintf_r+0xe6>
 8005b2a:	06d0      	lsls	r0, r2, #27
 8005b2c:	bf44      	itt	mi
 8005b2e:	2320      	movmi	r3, #32
 8005b30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b34:	0711      	lsls	r1, r2, #28
 8005b36:	bf44      	itt	mi
 8005b38:	232b      	movmi	r3, #43	; 0x2b
 8005b3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b3e:	f89a 3000 	ldrb.w	r3, [sl]
 8005b42:	2b2a      	cmp	r3, #42	; 0x2a
 8005b44:	d015      	beq.n	8005b72 <_svfiprintf_r+0xf6>
 8005b46:	9a07      	ldr	r2, [sp, #28]
 8005b48:	4654      	mov	r4, sl
 8005b4a:	2000      	movs	r0, #0
 8005b4c:	f04f 0c0a 	mov.w	ip, #10
 8005b50:	4621      	mov	r1, r4
 8005b52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b56:	3b30      	subs	r3, #48	; 0x30
 8005b58:	2b09      	cmp	r3, #9
 8005b5a:	d94e      	bls.n	8005bfa <_svfiprintf_r+0x17e>
 8005b5c:	b1b0      	cbz	r0, 8005b8c <_svfiprintf_r+0x110>
 8005b5e:	9207      	str	r2, [sp, #28]
 8005b60:	e014      	b.n	8005b8c <_svfiprintf_r+0x110>
 8005b62:	eba0 0308 	sub.w	r3, r0, r8
 8005b66:	fa09 f303 	lsl.w	r3, r9, r3
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	9304      	str	r3, [sp, #16]
 8005b6e:	46a2      	mov	sl, r4
 8005b70:	e7d2      	b.n	8005b18 <_svfiprintf_r+0x9c>
 8005b72:	9b03      	ldr	r3, [sp, #12]
 8005b74:	1d19      	adds	r1, r3, #4
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	9103      	str	r1, [sp, #12]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	bfbb      	ittet	lt
 8005b7e:	425b      	neglt	r3, r3
 8005b80:	f042 0202 	orrlt.w	r2, r2, #2
 8005b84:	9307      	strge	r3, [sp, #28]
 8005b86:	9307      	strlt	r3, [sp, #28]
 8005b88:	bfb8      	it	lt
 8005b8a:	9204      	strlt	r2, [sp, #16]
 8005b8c:	7823      	ldrb	r3, [r4, #0]
 8005b8e:	2b2e      	cmp	r3, #46	; 0x2e
 8005b90:	d10c      	bne.n	8005bac <_svfiprintf_r+0x130>
 8005b92:	7863      	ldrb	r3, [r4, #1]
 8005b94:	2b2a      	cmp	r3, #42	; 0x2a
 8005b96:	d135      	bne.n	8005c04 <_svfiprintf_r+0x188>
 8005b98:	9b03      	ldr	r3, [sp, #12]
 8005b9a:	1d1a      	adds	r2, r3, #4
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	9203      	str	r2, [sp, #12]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	bfb8      	it	lt
 8005ba4:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ba8:	3402      	adds	r4, #2
 8005baa:	9305      	str	r3, [sp, #20]
 8005bac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005c78 <_svfiprintf_r+0x1fc>
 8005bb0:	7821      	ldrb	r1, [r4, #0]
 8005bb2:	2203      	movs	r2, #3
 8005bb4:	4650      	mov	r0, sl
 8005bb6:	f7fa fb33 	bl	8000220 <memchr>
 8005bba:	b140      	cbz	r0, 8005bce <_svfiprintf_r+0x152>
 8005bbc:	2340      	movs	r3, #64	; 0x40
 8005bbe:	eba0 000a 	sub.w	r0, r0, sl
 8005bc2:	fa03 f000 	lsl.w	r0, r3, r0
 8005bc6:	9b04      	ldr	r3, [sp, #16]
 8005bc8:	4303      	orrs	r3, r0
 8005bca:	3401      	adds	r4, #1
 8005bcc:	9304      	str	r3, [sp, #16]
 8005bce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bd2:	4826      	ldr	r0, [pc, #152]	; (8005c6c <_svfiprintf_r+0x1f0>)
 8005bd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bd8:	2206      	movs	r2, #6
 8005bda:	f7fa fb21 	bl	8000220 <memchr>
 8005bde:	2800      	cmp	r0, #0
 8005be0:	d038      	beq.n	8005c54 <_svfiprintf_r+0x1d8>
 8005be2:	4b23      	ldr	r3, [pc, #140]	; (8005c70 <_svfiprintf_r+0x1f4>)
 8005be4:	bb1b      	cbnz	r3, 8005c2e <_svfiprintf_r+0x1b2>
 8005be6:	9b03      	ldr	r3, [sp, #12]
 8005be8:	3307      	adds	r3, #7
 8005bea:	f023 0307 	bic.w	r3, r3, #7
 8005bee:	3308      	adds	r3, #8
 8005bf0:	9303      	str	r3, [sp, #12]
 8005bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bf4:	4433      	add	r3, r6
 8005bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8005bf8:	e767      	b.n	8005aca <_svfiprintf_r+0x4e>
 8005bfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bfe:	460c      	mov	r4, r1
 8005c00:	2001      	movs	r0, #1
 8005c02:	e7a5      	b.n	8005b50 <_svfiprintf_r+0xd4>
 8005c04:	2300      	movs	r3, #0
 8005c06:	3401      	adds	r4, #1
 8005c08:	9305      	str	r3, [sp, #20]
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	f04f 0c0a 	mov.w	ip, #10
 8005c10:	4620      	mov	r0, r4
 8005c12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c16:	3a30      	subs	r2, #48	; 0x30
 8005c18:	2a09      	cmp	r2, #9
 8005c1a:	d903      	bls.n	8005c24 <_svfiprintf_r+0x1a8>
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d0c5      	beq.n	8005bac <_svfiprintf_r+0x130>
 8005c20:	9105      	str	r1, [sp, #20]
 8005c22:	e7c3      	b.n	8005bac <_svfiprintf_r+0x130>
 8005c24:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c28:	4604      	mov	r4, r0
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e7f0      	b.n	8005c10 <_svfiprintf_r+0x194>
 8005c2e:	ab03      	add	r3, sp, #12
 8005c30:	9300      	str	r3, [sp, #0]
 8005c32:	462a      	mov	r2, r5
 8005c34:	4b0f      	ldr	r3, [pc, #60]	; (8005c74 <_svfiprintf_r+0x1f8>)
 8005c36:	a904      	add	r1, sp, #16
 8005c38:	4638      	mov	r0, r7
 8005c3a:	f3af 8000 	nop.w
 8005c3e:	1c42      	adds	r2, r0, #1
 8005c40:	4606      	mov	r6, r0
 8005c42:	d1d6      	bne.n	8005bf2 <_svfiprintf_r+0x176>
 8005c44:	89ab      	ldrh	r3, [r5, #12]
 8005c46:	065b      	lsls	r3, r3, #25
 8005c48:	f53f af2c 	bmi.w	8005aa4 <_svfiprintf_r+0x28>
 8005c4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c4e:	b01d      	add	sp, #116	; 0x74
 8005c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c54:	ab03      	add	r3, sp, #12
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	462a      	mov	r2, r5
 8005c5a:	4b06      	ldr	r3, [pc, #24]	; (8005c74 <_svfiprintf_r+0x1f8>)
 8005c5c:	a904      	add	r1, sp, #16
 8005c5e:	4638      	mov	r0, r7
 8005c60:	f000 f87a 	bl	8005d58 <_printf_i>
 8005c64:	e7eb      	b.n	8005c3e <_svfiprintf_r+0x1c2>
 8005c66:	bf00      	nop
 8005c68:	080060f8 	.word	0x080060f8
 8005c6c:	08006102 	.word	0x08006102
 8005c70:	00000000 	.word	0x00000000
 8005c74:	080059c5 	.word	0x080059c5
 8005c78:	080060fe 	.word	0x080060fe

08005c7c <_printf_common>:
 8005c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c80:	4616      	mov	r6, r2
 8005c82:	4699      	mov	r9, r3
 8005c84:	688a      	ldr	r2, [r1, #8]
 8005c86:	690b      	ldr	r3, [r1, #16]
 8005c88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	bfb8      	it	lt
 8005c90:	4613      	movlt	r3, r2
 8005c92:	6033      	str	r3, [r6, #0]
 8005c94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c98:	4607      	mov	r7, r0
 8005c9a:	460c      	mov	r4, r1
 8005c9c:	b10a      	cbz	r2, 8005ca2 <_printf_common+0x26>
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	6033      	str	r3, [r6, #0]
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	0699      	lsls	r1, r3, #26
 8005ca6:	bf42      	ittt	mi
 8005ca8:	6833      	ldrmi	r3, [r6, #0]
 8005caa:	3302      	addmi	r3, #2
 8005cac:	6033      	strmi	r3, [r6, #0]
 8005cae:	6825      	ldr	r5, [r4, #0]
 8005cb0:	f015 0506 	ands.w	r5, r5, #6
 8005cb4:	d106      	bne.n	8005cc4 <_printf_common+0x48>
 8005cb6:	f104 0a19 	add.w	sl, r4, #25
 8005cba:	68e3      	ldr	r3, [r4, #12]
 8005cbc:	6832      	ldr	r2, [r6, #0]
 8005cbe:	1a9b      	subs	r3, r3, r2
 8005cc0:	42ab      	cmp	r3, r5
 8005cc2:	dc26      	bgt.n	8005d12 <_printf_common+0x96>
 8005cc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cc8:	1e13      	subs	r3, r2, #0
 8005cca:	6822      	ldr	r2, [r4, #0]
 8005ccc:	bf18      	it	ne
 8005cce:	2301      	movne	r3, #1
 8005cd0:	0692      	lsls	r2, r2, #26
 8005cd2:	d42b      	bmi.n	8005d2c <_printf_common+0xb0>
 8005cd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cd8:	4649      	mov	r1, r9
 8005cda:	4638      	mov	r0, r7
 8005cdc:	47c0      	blx	r8
 8005cde:	3001      	adds	r0, #1
 8005ce0:	d01e      	beq.n	8005d20 <_printf_common+0xa4>
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	68e5      	ldr	r5, [r4, #12]
 8005ce6:	6832      	ldr	r2, [r6, #0]
 8005ce8:	f003 0306 	and.w	r3, r3, #6
 8005cec:	2b04      	cmp	r3, #4
 8005cee:	bf08      	it	eq
 8005cf0:	1aad      	subeq	r5, r5, r2
 8005cf2:	68a3      	ldr	r3, [r4, #8]
 8005cf4:	6922      	ldr	r2, [r4, #16]
 8005cf6:	bf0c      	ite	eq
 8005cf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cfc:	2500      	movne	r5, #0
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	bfc4      	itt	gt
 8005d02:	1a9b      	subgt	r3, r3, r2
 8005d04:	18ed      	addgt	r5, r5, r3
 8005d06:	2600      	movs	r6, #0
 8005d08:	341a      	adds	r4, #26
 8005d0a:	42b5      	cmp	r5, r6
 8005d0c:	d11a      	bne.n	8005d44 <_printf_common+0xc8>
 8005d0e:	2000      	movs	r0, #0
 8005d10:	e008      	b.n	8005d24 <_printf_common+0xa8>
 8005d12:	2301      	movs	r3, #1
 8005d14:	4652      	mov	r2, sl
 8005d16:	4649      	mov	r1, r9
 8005d18:	4638      	mov	r0, r7
 8005d1a:	47c0      	blx	r8
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	d103      	bne.n	8005d28 <_printf_common+0xac>
 8005d20:	f04f 30ff 	mov.w	r0, #4294967295
 8005d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d28:	3501      	adds	r5, #1
 8005d2a:	e7c6      	b.n	8005cba <_printf_common+0x3e>
 8005d2c:	18e1      	adds	r1, r4, r3
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	2030      	movs	r0, #48	; 0x30
 8005d32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d36:	4422      	add	r2, r4
 8005d38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d40:	3302      	adds	r3, #2
 8005d42:	e7c7      	b.n	8005cd4 <_printf_common+0x58>
 8005d44:	2301      	movs	r3, #1
 8005d46:	4622      	mov	r2, r4
 8005d48:	4649      	mov	r1, r9
 8005d4a:	4638      	mov	r0, r7
 8005d4c:	47c0      	blx	r8
 8005d4e:	3001      	adds	r0, #1
 8005d50:	d0e6      	beq.n	8005d20 <_printf_common+0xa4>
 8005d52:	3601      	adds	r6, #1
 8005d54:	e7d9      	b.n	8005d0a <_printf_common+0x8e>
	...

08005d58 <_printf_i>:
 8005d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d5c:	7e0f      	ldrb	r7, [r1, #24]
 8005d5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d60:	2f78      	cmp	r7, #120	; 0x78
 8005d62:	4691      	mov	r9, r2
 8005d64:	4680      	mov	r8, r0
 8005d66:	460c      	mov	r4, r1
 8005d68:	469a      	mov	sl, r3
 8005d6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d6e:	d807      	bhi.n	8005d80 <_printf_i+0x28>
 8005d70:	2f62      	cmp	r7, #98	; 0x62
 8005d72:	d80a      	bhi.n	8005d8a <_printf_i+0x32>
 8005d74:	2f00      	cmp	r7, #0
 8005d76:	f000 80d8 	beq.w	8005f2a <_printf_i+0x1d2>
 8005d7a:	2f58      	cmp	r7, #88	; 0x58
 8005d7c:	f000 80a3 	beq.w	8005ec6 <_printf_i+0x16e>
 8005d80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d88:	e03a      	b.n	8005e00 <_printf_i+0xa8>
 8005d8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d8e:	2b15      	cmp	r3, #21
 8005d90:	d8f6      	bhi.n	8005d80 <_printf_i+0x28>
 8005d92:	a101      	add	r1, pc, #4	; (adr r1, 8005d98 <_printf_i+0x40>)
 8005d94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d98:	08005df1 	.word	0x08005df1
 8005d9c:	08005e05 	.word	0x08005e05
 8005da0:	08005d81 	.word	0x08005d81
 8005da4:	08005d81 	.word	0x08005d81
 8005da8:	08005d81 	.word	0x08005d81
 8005dac:	08005d81 	.word	0x08005d81
 8005db0:	08005e05 	.word	0x08005e05
 8005db4:	08005d81 	.word	0x08005d81
 8005db8:	08005d81 	.word	0x08005d81
 8005dbc:	08005d81 	.word	0x08005d81
 8005dc0:	08005d81 	.word	0x08005d81
 8005dc4:	08005f11 	.word	0x08005f11
 8005dc8:	08005e35 	.word	0x08005e35
 8005dcc:	08005ef3 	.word	0x08005ef3
 8005dd0:	08005d81 	.word	0x08005d81
 8005dd4:	08005d81 	.word	0x08005d81
 8005dd8:	08005f33 	.word	0x08005f33
 8005ddc:	08005d81 	.word	0x08005d81
 8005de0:	08005e35 	.word	0x08005e35
 8005de4:	08005d81 	.word	0x08005d81
 8005de8:	08005d81 	.word	0x08005d81
 8005dec:	08005efb 	.word	0x08005efb
 8005df0:	682b      	ldr	r3, [r5, #0]
 8005df2:	1d1a      	adds	r2, r3, #4
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	602a      	str	r2, [r5, #0]
 8005df8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e00:	2301      	movs	r3, #1
 8005e02:	e0a3      	b.n	8005f4c <_printf_i+0x1f4>
 8005e04:	6820      	ldr	r0, [r4, #0]
 8005e06:	6829      	ldr	r1, [r5, #0]
 8005e08:	0606      	lsls	r6, r0, #24
 8005e0a:	f101 0304 	add.w	r3, r1, #4
 8005e0e:	d50a      	bpl.n	8005e26 <_printf_i+0xce>
 8005e10:	680e      	ldr	r6, [r1, #0]
 8005e12:	602b      	str	r3, [r5, #0]
 8005e14:	2e00      	cmp	r6, #0
 8005e16:	da03      	bge.n	8005e20 <_printf_i+0xc8>
 8005e18:	232d      	movs	r3, #45	; 0x2d
 8005e1a:	4276      	negs	r6, r6
 8005e1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e20:	485e      	ldr	r0, [pc, #376]	; (8005f9c <_printf_i+0x244>)
 8005e22:	230a      	movs	r3, #10
 8005e24:	e019      	b.n	8005e5a <_printf_i+0x102>
 8005e26:	680e      	ldr	r6, [r1, #0]
 8005e28:	602b      	str	r3, [r5, #0]
 8005e2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e2e:	bf18      	it	ne
 8005e30:	b236      	sxthne	r6, r6
 8005e32:	e7ef      	b.n	8005e14 <_printf_i+0xbc>
 8005e34:	682b      	ldr	r3, [r5, #0]
 8005e36:	6820      	ldr	r0, [r4, #0]
 8005e38:	1d19      	adds	r1, r3, #4
 8005e3a:	6029      	str	r1, [r5, #0]
 8005e3c:	0601      	lsls	r1, r0, #24
 8005e3e:	d501      	bpl.n	8005e44 <_printf_i+0xec>
 8005e40:	681e      	ldr	r6, [r3, #0]
 8005e42:	e002      	b.n	8005e4a <_printf_i+0xf2>
 8005e44:	0646      	lsls	r6, r0, #25
 8005e46:	d5fb      	bpl.n	8005e40 <_printf_i+0xe8>
 8005e48:	881e      	ldrh	r6, [r3, #0]
 8005e4a:	4854      	ldr	r0, [pc, #336]	; (8005f9c <_printf_i+0x244>)
 8005e4c:	2f6f      	cmp	r7, #111	; 0x6f
 8005e4e:	bf0c      	ite	eq
 8005e50:	2308      	moveq	r3, #8
 8005e52:	230a      	movne	r3, #10
 8005e54:	2100      	movs	r1, #0
 8005e56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e5a:	6865      	ldr	r5, [r4, #4]
 8005e5c:	60a5      	str	r5, [r4, #8]
 8005e5e:	2d00      	cmp	r5, #0
 8005e60:	bfa2      	ittt	ge
 8005e62:	6821      	ldrge	r1, [r4, #0]
 8005e64:	f021 0104 	bicge.w	r1, r1, #4
 8005e68:	6021      	strge	r1, [r4, #0]
 8005e6a:	b90e      	cbnz	r6, 8005e70 <_printf_i+0x118>
 8005e6c:	2d00      	cmp	r5, #0
 8005e6e:	d04d      	beq.n	8005f0c <_printf_i+0x1b4>
 8005e70:	4615      	mov	r5, r2
 8005e72:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e76:	fb03 6711 	mls	r7, r3, r1, r6
 8005e7a:	5dc7      	ldrb	r7, [r0, r7]
 8005e7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e80:	4637      	mov	r7, r6
 8005e82:	42bb      	cmp	r3, r7
 8005e84:	460e      	mov	r6, r1
 8005e86:	d9f4      	bls.n	8005e72 <_printf_i+0x11a>
 8005e88:	2b08      	cmp	r3, #8
 8005e8a:	d10b      	bne.n	8005ea4 <_printf_i+0x14c>
 8005e8c:	6823      	ldr	r3, [r4, #0]
 8005e8e:	07de      	lsls	r6, r3, #31
 8005e90:	d508      	bpl.n	8005ea4 <_printf_i+0x14c>
 8005e92:	6923      	ldr	r3, [r4, #16]
 8005e94:	6861      	ldr	r1, [r4, #4]
 8005e96:	4299      	cmp	r1, r3
 8005e98:	bfde      	ittt	le
 8005e9a:	2330      	movle	r3, #48	; 0x30
 8005e9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ea0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ea4:	1b52      	subs	r2, r2, r5
 8005ea6:	6122      	str	r2, [r4, #16]
 8005ea8:	f8cd a000 	str.w	sl, [sp]
 8005eac:	464b      	mov	r3, r9
 8005eae:	aa03      	add	r2, sp, #12
 8005eb0:	4621      	mov	r1, r4
 8005eb2:	4640      	mov	r0, r8
 8005eb4:	f7ff fee2 	bl	8005c7c <_printf_common>
 8005eb8:	3001      	adds	r0, #1
 8005eba:	d14c      	bne.n	8005f56 <_printf_i+0x1fe>
 8005ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec0:	b004      	add	sp, #16
 8005ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ec6:	4835      	ldr	r0, [pc, #212]	; (8005f9c <_printf_i+0x244>)
 8005ec8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ecc:	6829      	ldr	r1, [r5, #0]
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ed4:	6029      	str	r1, [r5, #0]
 8005ed6:	061d      	lsls	r5, r3, #24
 8005ed8:	d514      	bpl.n	8005f04 <_printf_i+0x1ac>
 8005eda:	07df      	lsls	r7, r3, #31
 8005edc:	bf44      	itt	mi
 8005ede:	f043 0320 	orrmi.w	r3, r3, #32
 8005ee2:	6023      	strmi	r3, [r4, #0]
 8005ee4:	b91e      	cbnz	r6, 8005eee <_printf_i+0x196>
 8005ee6:	6823      	ldr	r3, [r4, #0]
 8005ee8:	f023 0320 	bic.w	r3, r3, #32
 8005eec:	6023      	str	r3, [r4, #0]
 8005eee:	2310      	movs	r3, #16
 8005ef0:	e7b0      	b.n	8005e54 <_printf_i+0xfc>
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	f043 0320 	orr.w	r3, r3, #32
 8005ef8:	6023      	str	r3, [r4, #0]
 8005efa:	2378      	movs	r3, #120	; 0x78
 8005efc:	4828      	ldr	r0, [pc, #160]	; (8005fa0 <_printf_i+0x248>)
 8005efe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f02:	e7e3      	b.n	8005ecc <_printf_i+0x174>
 8005f04:	0659      	lsls	r1, r3, #25
 8005f06:	bf48      	it	mi
 8005f08:	b2b6      	uxthmi	r6, r6
 8005f0a:	e7e6      	b.n	8005eda <_printf_i+0x182>
 8005f0c:	4615      	mov	r5, r2
 8005f0e:	e7bb      	b.n	8005e88 <_printf_i+0x130>
 8005f10:	682b      	ldr	r3, [r5, #0]
 8005f12:	6826      	ldr	r6, [r4, #0]
 8005f14:	6961      	ldr	r1, [r4, #20]
 8005f16:	1d18      	adds	r0, r3, #4
 8005f18:	6028      	str	r0, [r5, #0]
 8005f1a:	0635      	lsls	r5, r6, #24
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	d501      	bpl.n	8005f24 <_printf_i+0x1cc>
 8005f20:	6019      	str	r1, [r3, #0]
 8005f22:	e002      	b.n	8005f2a <_printf_i+0x1d2>
 8005f24:	0670      	lsls	r0, r6, #25
 8005f26:	d5fb      	bpl.n	8005f20 <_printf_i+0x1c8>
 8005f28:	8019      	strh	r1, [r3, #0]
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	6123      	str	r3, [r4, #16]
 8005f2e:	4615      	mov	r5, r2
 8005f30:	e7ba      	b.n	8005ea8 <_printf_i+0x150>
 8005f32:	682b      	ldr	r3, [r5, #0]
 8005f34:	1d1a      	adds	r2, r3, #4
 8005f36:	602a      	str	r2, [r5, #0]
 8005f38:	681d      	ldr	r5, [r3, #0]
 8005f3a:	6862      	ldr	r2, [r4, #4]
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	4628      	mov	r0, r5
 8005f40:	f7fa f96e 	bl	8000220 <memchr>
 8005f44:	b108      	cbz	r0, 8005f4a <_printf_i+0x1f2>
 8005f46:	1b40      	subs	r0, r0, r5
 8005f48:	6060      	str	r0, [r4, #4]
 8005f4a:	6863      	ldr	r3, [r4, #4]
 8005f4c:	6123      	str	r3, [r4, #16]
 8005f4e:	2300      	movs	r3, #0
 8005f50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f54:	e7a8      	b.n	8005ea8 <_printf_i+0x150>
 8005f56:	6923      	ldr	r3, [r4, #16]
 8005f58:	462a      	mov	r2, r5
 8005f5a:	4649      	mov	r1, r9
 8005f5c:	4640      	mov	r0, r8
 8005f5e:	47d0      	blx	sl
 8005f60:	3001      	adds	r0, #1
 8005f62:	d0ab      	beq.n	8005ebc <_printf_i+0x164>
 8005f64:	6823      	ldr	r3, [r4, #0]
 8005f66:	079b      	lsls	r3, r3, #30
 8005f68:	d413      	bmi.n	8005f92 <_printf_i+0x23a>
 8005f6a:	68e0      	ldr	r0, [r4, #12]
 8005f6c:	9b03      	ldr	r3, [sp, #12]
 8005f6e:	4298      	cmp	r0, r3
 8005f70:	bfb8      	it	lt
 8005f72:	4618      	movlt	r0, r3
 8005f74:	e7a4      	b.n	8005ec0 <_printf_i+0x168>
 8005f76:	2301      	movs	r3, #1
 8005f78:	4632      	mov	r2, r6
 8005f7a:	4649      	mov	r1, r9
 8005f7c:	4640      	mov	r0, r8
 8005f7e:	47d0      	blx	sl
 8005f80:	3001      	adds	r0, #1
 8005f82:	d09b      	beq.n	8005ebc <_printf_i+0x164>
 8005f84:	3501      	adds	r5, #1
 8005f86:	68e3      	ldr	r3, [r4, #12]
 8005f88:	9903      	ldr	r1, [sp, #12]
 8005f8a:	1a5b      	subs	r3, r3, r1
 8005f8c:	42ab      	cmp	r3, r5
 8005f8e:	dcf2      	bgt.n	8005f76 <_printf_i+0x21e>
 8005f90:	e7eb      	b.n	8005f6a <_printf_i+0x212>
 8005f92:	2500      	movs	r5, #0
 8005f94:	f104 0619 	add.w	r6, r4, #25
 8005f98:	e7f5      	b.n	8005f86 <_printf_i+0x22e>
 8005f9a:	bf00      	nop
 8005f9c:	08006109 	.word	0x08006109
 8005fa0:	0800611a 	.word	0x0800611a

08005fa4 <_sbrk_r>:
 8005fa4:	b538      	push	{r3, r4, r5, lr}
 8005fa6:	4d06      	ldr	r5, [pc, #24]	; (8005fc0 <_sbrk_r+0x1c>)
 8005fa8:	2300      	movs	r3, #0
 8005faa:	4604      	mov	r4, r0
 8005fac:	4608      	mov	r0, r1
 8005fae:	602b      	str	r3, [r5, #0]
 8005fb0:	f7fc fbd4 	bl	800275c <_sbrk>
 8005fb4:	1c43      	adds	r3, r0, #1
 8005fb6:	d102      	bne.n	8005fbe <_sbrk_r+0x1a>
 8005fb8:	682b      	ldr	r3, [r5, #0]
 8005fba:	b103      	cbz	r3, 8005fbe <_sbrk_r+0x1a>
 8005fbc:	6023      	str	r3, [r4, #0]
 8005fbe:	bd38      	pop	{r3, r4, r5, pc}
 8005fc0:	20000274 	.word	0x20000274

08005fc4 <__retarget_lock_acquire_recursive>:
 8005fc4:	4770      	bx	lr

08005fc6 <__retarget_lock_release_recursive>:
 8005fc6:	4770      	bx	lr

08005fc8 <memmove>:
 8005fc8:	4288      	cmp	r0, r1
 8005fca:	b510      	push	{r4, lr}
 8005fcc:	eb01 0402 	add.w	r4, r1, r2
 8005fd0:	d902      	bls.n	8005fd8 <memmove+0x10>
 8005fd2:	4284      	cmp	r4, r0
 8005fd4:	4623      	mov	r3, r4
 8005fd6:	d807      	bhi.n	8005fe8 <memmove+0x20>
 8005fd8:	1e43      	subs	r3, r0, #1
 8005fda:	42a1      	cmp	r1, r4
 8005fdc:	d008      	beq.n	8005ff0 <memmove+0x28>
 8005fde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fe2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005fe6:	e7f8      	b.n	8005fda <memmove+0x12>
 8005fe8:	4402      	add	r2, r0
 8005fea:	4601      	mov	r1, r0
 8005fec:	428a      	cmp	r2, r1
 8005fee:	d100      	bne.n	8005ff2 <memmove+0x2a>
 8005ff0:	bd10      	pop	{r4, pc}
 8005ff2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ff6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ffa:	e7f7      	b.n	8005fec <memmove+0x24>

08005ffc <__malloc_lock>:
 8005ffc:	4801      	ldr	r0, [pc, #4]	; (8006004 <__malloc_lock+0x8>)
 8005ffe:	f7ff bfe1 	b.w	8005fc4 <__retarget_lock_acquire_recursive>
 8006002:	bf00      	nop
 8006004:	20000270 	.word	0x20000270

08006008 <__malloc_unlock>:
 8006008:	4801      	ldr	r0, [pc, #4]	; (8006010 <__malloc_unlock+0x8>)
 800600a:	f7ff bfdc 	b.w	8005fc6 <__retarget_lock_release_recursive>
 800600e:	bf00      	nop
 8006010:	20000270 	.word	0x20000270

08006014 <_realloc_r>:
 8006014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006018:	4680      	mov	r8, r0
 800601a:	4614      	mov	r4, r2
 800601c:	460e      	mov	r6, r1
 800601e:	b921      	cbnz	r1, 800602a <_realloc_r+0x16>
 8006020:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006024:	4611      	mov	r1, r2
 8006026:	f7ff bc59 	b.w	80058dc <_malloc_r>
 800602a:	b92a      	cbnz	r2, 8006038 <_realloc_r+0x24>
 800602c:	f7ff fbea 	bl	8005804 <_free_r>
 8006030:	4625      	mov	r5, r4
 8006032:	4628      	mov	r0, r5
 8006034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006038:	f000 f81b 	bl	8006072 <_malloc_usable_size_r>
 800603c:	4284      	cmp	r4, r0
 800603e:	4607      	mov	r7, r0
 8006040:	d802      	bhi.n	8006048 <_realloc_r+0x34>
 8006042:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006046:	d812      	bhi.n	800606e <_realloc_r+0x5a>
 8006048:	4621      	mov	r1, r4
 800604a:	4640      	mov	r0, r8
 800604c:	f7ff fc46 	bl	80058dc <_malloc_r>
 8006050:	4605      	mov	r5, r0
 8006052:	2800      	cmp	r0, #0
 8006054:	d0ed      	beq.n	8006032 <_realloc_r+0x1e>
 8006056:	42bc      	cmp	r4, r7
 8006058:	4622      	mov	r2, r4
 800605a:	4631      	mov	r1, r6
 800605c:	bf28      	it	cs
 800605e:	463a      	movcs	r2, r7
 8006060:	f7ff fb86 	bl	8005770 <memcpy>
 8006064:	4631      	mov	r1, r6
 8006066:	4640      	mov	r0, r8
 8006068:	f7ff fbcc 	bl	8005804 <_free_r>
 800606c:	e7e1      	b.n	8006032 <_realloc_r+0x1e>
 800606e:	4635      	mov	r5, r6
 8006070:	e7df      	b.n	8006032 <_realloc_r+0x1e>

08006072 <_malloc_usable_size_r>:
 8006072:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006076:	1f18      	subs	r0, r3, #4
 8006078:	2b00      	cmp	r3, #0
 800607a:	bfbc      	itt	lt
 800607c:	580b      	ldrlt	r3, [r1, r0]
 800607e:	18c0      	addlt	r0, r0, r3
 8006080:	4770      	bx	lr
	...

08006084 <_init>:
 8006084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006086:	bf00      	nop
 8006088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800608a:	bc08      	pop	{r3}
 800608c:	469e      	mov	lr, r3
 800608e:	4770      	bx	lr

08006090 <_fini>:
 8006090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006092:	bf00      	nop
 8006094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006096:	bc08      	pop	{r3}
 8006098:	469e      	mov	lr, r3
 800609a:	4770      	bx	lr
