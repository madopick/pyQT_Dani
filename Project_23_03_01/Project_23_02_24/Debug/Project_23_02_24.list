
Project_23_02_24.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008808  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  080089d8  080089d8  000189d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bb8  08008bb8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008bb8  08008bb8  00018bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bc0  08008bc0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bc0  08008bc0  00018bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bc4  08008bc4  00018bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008bc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000090  08008c58  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08008c58  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3d9  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000214c  00000000  00000000  0002e499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  000305e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae8  00000000  00000000  00031180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022dfd  00000000  00000000  00031c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a28  00000000  00000000  00054a65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccc6a  00000000  00000000  0006548d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001320f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037ac  00000000  00000000  00132148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080089c0 	.word	0x080089c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	080089c0 	.word	0x080089c0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <__io_putchar>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

/* @brief  Retargets the C library printf function to the USART. */
PUTCHAR_PROTOTYPE {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80005bc:	1d39      	adds	r1, r7, #4
 80005be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005c2:	2201      	movs	r2, #1
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <__io_putchar+0x20>)
 80005c6:	f005 ff90 	bl	80064ea <HAL_UART_Transmit>
  return ch;
 80005ca:	687b      	ldr	r3, [r7, #4]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200000ac 	.word	0x200000ac

080005d8 <main>:

/* bit flag */
uint8_t bitFlag = 0;

int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f002 fa86 	bl	8002aec <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f954 	bl	800088c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 fa10 	bl	8000a08 <MX_GPIO_Init>
  MX_DMA_Init();
 80005e8:	f000 f9ee 	bl	80009c8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005ec:	f000 f9bc 	bl	8000968 <MX_USART2_UART_Init>

  /*##-1- Configure the I2C peripheral ######################################*/
  I2cHandle.Instance             = I2Cx;
 80005f0:	4b63      	ldr	r3, [pc, #396]	; (8000780 <main+0x1a8>)
 80005f2:	4a64      	ldr	r2, [pc, #400]	; (8000784 <main+0x1ac>)
 80005f4:	601a      	str	r2, [r3, #0]
  I2cHandle.Init.AddressingMode  = I2C_ADDRESSINGMODE_10BIT;
 80005f6:	4b62      	ldr	r3, [pc, #392]	; (8000780 <main+0x1a8>)
 80005f8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80005fc:	611a      	str	r2, [r3, #16]
  I2cHandle.Init.ClockSpeed      = 400000;
 80005fe:	4b60      	ldr	r3, [pc, #384]	; (8000780 <main+0x1a8>)
 8000600:	4a61      	ldr	r2, [pc, #388]	; (8000788 <main+0x1b0>)
 8000602:	605a      	str	r2, [r3, #4]
  I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000604:	4b5e      	ldr	r3, [pc, #376]	; (8000780 <main+0x1a8>)
 8000606:	2200      	movs	r2, #0
 8000608:	615a      	str	r2, [r3, #20]
  I2cHandle.Init.DutyCycle       = I2C_DUTYCYCLE_16_9;
 800060a:	4b5d      	ldr	r3, [pc, #372]	; (8000780 <main+0x1a8>)
 800060c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000610:	609a      	str	r2, [r3, #8]
  I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000612:	4b5b      	ldr	r3, [pc, #364]	; (8000780 <main+0x1a8>)
 8000614:	2200      	movs	r2, #0
 8000616:	61da      	str	r2, [r3, #28]
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 8000618:	4b59      	ldr	r3, [pc, #356]	; (8000780 <main+0x1a8>)
 800061a:	2200      	movs	r2, #0
 800061c:	621a      	str	r2, [r3, #32]
  I2cHandle.Init.OwnAddress1     = I2C_ADDRESS;
 800061e:	4b58      	ldr	r3, [pc, #352]	; (8000780 <main+0x1a8>)
 8000620:	f240 320f 	movw	r2, #783	; 0x30f
 8000624:	60da      	str	r2, [r3, #12]
  I2cHandle.Init.OwnAddress2     = 0xFE;
 8000626:	4b56      	ldr	r3, [pc, #344]	; (8000780 <main+0x1a8>)
 8000628:	22fe      	movs	r2, #254	; 0xfe
 800062a:	619a      	str	r2, [r3, #24]

  if(HAL_I2C_Init(&I2cHandle) != HAL_OK){ Error_Handler(); }
 800062c:	4854      	ldr	r0, [pc, #336]	; (8000780 <main+0x1a8>)
 800062e:	f003 f9dd 	bl	80039ec <HAL_I2C_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <main+0x64>
 8000638:	f000 fb6c 	bl	8000d14 <Error_Handler>

  serial_init();
 800063c:	f000 fb7e 	bl	8000d3c <serial_init>
  #ifdef MASTER_BOARD
  	  printf("Init OK\r\n");
 8000640:	4852      	ldr	r0, [pc, #328]	; (800078c <main+0x1b4>)
 8000642:	f007 fa3f 	bl	8007ac4 <puts>


  /****************** MAIN **********************/
  while (1) {
	  /*Perintah untuk kirim data ke UART*/
  	  if (bitFlag & BFLAG_UART_RCV) {
 8000646:	4b52      	ldr	r3, [pc, #328]	; (8000790 <main+0x1b8>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	2b00      	cmp	r3, #0
 8000650:	d016      	beq.n	8000680 <main+0xa8>
  		  uartProcessing (u8arr_uartEvent, u16_lenCnt - 2); // remove \r & \n
 8000652:	4b50      	ldr	r3, [pc, #320]	; (8000794 <main+0x1bc>)
 8000654:	881b      	ldrh	r3, [r3, #0]
 8000656:	3b02      	subs	r3, #2
 8000658:	b29b      	uxth	r3, r3
 800065a:	4619      	mov	r1, r3
 800065c:	484e      	ldr	r0, [pc, #312]	; (8000798 <main+0x1c0>)
 800065e:	f000 fab1 	bl	8000bc4 <uartProcessing>
  		  memset(u8arr_uartEvent, 0, UART_BUF_SZ);
 8000662:	2240      	movs	r2, #64	; 0x40
 8000664:	2100      	movs	r1, #0
 8000666:	484c      	ldr	r0, [pc, #304]	; (8000798 <main+0x1c0>)
 8000668:	f007 f99e 	bl	80079a8 <memset>
  		  u16_lenCnt = 0;
 800066c:	4b49      	ldr	r3, [pc, #292]	; (8000794 <main+0x1bc>)
 800066e:	2200      	movs	r2, #0
 8000670:	801a      	strh	r2, [r3, #0]

  		  /* Reset bit 0 bitflag */
  		  bitFlag 	&= ~BFLAG_UART_RCV;
 8000672:	4b47      	ldr	r3, [pc, #284]	; (8000790 <main+0x1b8>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	f023 0301 	bic.w	r3, r3, #1
 800067a:	b2da      	uxtb	r2, r3
 800067c:	4b44      	ldr	r3, [pc, #272]	; (8000790 <main+0x1b8>)
 800067e:	701a      	strb	r2, [r3, #0]
  	  }

  	  /* Perintah untuk WRITE atau sending I2C */
  	  if (bitFlag & BFLAG_I2C_WR) {
 8000680:	4b43      	ldr	r3, [pc, #268]	; (8000790 <main+0x1b8>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	f003 0308 	and.w	r3, r3, #8
 8000688:	2b00      	cmp	r3, #0
 800068a:	d025      	beq.n	80006d8 <main+0x100>
	  	  #ifdef MASTER_BOARD
			  printf("Master I2C Sending... \r\n");
 800068c:	4843      	ldr	r0, [pc, #268]	; (800079c <main+0x1c4>)
 800068e:	f007 fa19 	bl	8007ac4 <puts>

			  do
			  {
				  /*##-2- Proses transmission START #####################################*/
				  if(HAL_I2C_Master_Transmit_IT(&I2cHandle, (uint16_t)I2C_ADDRESS, (uint8_t*)aTxBuffer, TXBUFFERSIZE)!= HAL_OK)
 8000692:	2314      	movs	r3, #20
 8000694:	4a42      	ldr	r2, [pc, #264]	; (80007a0 <main+0x1c8>)
 8000696:	f240 310f 	movw	r1, #783	; 0x30f
 800069a:	4839      	ldr	r0, [pc, #228]	; (8000780 <main+0x1a8>)
 800069c:	f003 faea 	bl	8003c74 <HAL_I2C_Master_Transmit_IT>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <main+0xd2>
				  	  {Error_Handler();
 80006a6:	f000 fb35 	bl	8000d14 <Error_Handler>
				  }

				  /*##-3- Menunggu transfer data selesai ###################################*/
				  while (HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY)
 80006aa:	bf00      	nop
 80006ac:	4834      	ldr	r0, [pc, #208]	; (8000780 <main+0x1a8>)
 80006ae:	f003 fe93 	bl	80043d8 <HAL_I2C_GetState>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b20      	cmp	r3, #32
 80006b6:	d1f9      	bne.n	80006ac <main+0xd4>
				  {}
				  printf("Sending Success!!\r\n\n");
 80006b8:	483a      	ldr	r0, [pc, #232]	; (80007a4 <main+0x1cc>)
 80006ba:	f007 fa03 	bl	8007ac4 <puts>
			  } while(HAL_I2C_GetError(&I2cHandle) == HAL_I2C_ERROR_AF);
 80006be:	4830      	ldr	r0, [pc, #192]	; (8000780 <main+0x1a8>)
 80006c0:	f003 fe98 	bl	80043f4 <HAL_I2C_GetError>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	d0e3      	beq.n	8000692 <main+0xba>

			  /* Reset bit 2 bitflag */
			  bitFlag 	&= ~BFLAG_I2C_WR;
 80006ca:	4b31      	ldr	r3, [pc, #196]	; (8000790 <main+0x1b8>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	f023 0308 	bic.w	r3, r3, #8
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <main+0x1b8>)
 80006d6:	701a      	strb	r2, [r3, #0]
	  	  #endif
  	 }

  	/* Perintah untuk Compare buffer dan READ dari I2C */
  	 if (bitFlag & BFLAG_I2C_RD1)
 80006d8:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <main+0x1b8>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	f003 0304 	and.w	r3, r3, #4
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d035      	beq.n	8000750 <main+0x178>
  	 {
  		 #ifdef MASTER_BOARD

  		 	 /*##-4- I2C periperal siap menerima data ############################*/
  			  do {
  				  printf("Master I2C Receiving... \r\n");
 80006e4:	4830      	ldr	r0, [pc, #192]	; (80007a8 <main+0x1d0>)
 80006e6:	f007 f9ed 	bl	8007ac4 <puts>

  				  if(HAL_I2C_Master_Receive_IT(&I2cHandle, (uint16_t)I2C_ADDRESS, (uint8_t *)aRxBuffer, RXBUFFERSIZE) != HAL_OK) {Error_Handler();}
 80006ea:	2314      	movs	r3, #20
 80006ec:	4a2f      	ldr	r2, [pc, #188]	; (80007ac <main+0x1d4>)
 80006ee:	f240 310f 	movw	r1, #783	; 0x30f
 80006f2:	4823      	ldr	r0, [pc, #140]	; (8000780 <main+0x1a8>)
 80006f4:	f003 fb64 	bl	8003dc0 <HAL_I2C_Master_Receive_IT>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <main+0x12a>
 80006fe:	f000 fb09 	bl	8000d14 <Error_Handler>

  				  printf("I2C RX-Master: %s \r\n\n", (char*)aRxBuffer);
 8000702:	492a      	ldr	r1, [pc, #168]	; (80007ac <main+0x1d4>)
 8000704:	482a      	ldr	r0, [pc, #168]	; (80007b0 <main+0x1d8>)
 8000706:	f007 f957 	bl	80079b8 <iprintf>

  				  /* Saat Acknowledge failure (Slave tidak mengakui alamatnya) Master memulai ulang komunikasi */
  			  } while (HAL_I2C_GetError(&I2cHandle) == HAL_I2C_ERROR_AF);
 800070a:	481d      	ldr	r0, [pc, #116]	; (8000780 <main+0x1a8>)
 800070c:	f003 fe72 	bl	80043f4 <HAL_I2C_GetError>
 8000710:	4603      	mov	r3, r0
 8000712:	2b04      	cmp	r3, #4
 8000714:	d0e6      	beq.n	80006e4 <main+0x10c>

  			  /*##-5- Menunggu akhir transfer ###################################*/
  			  while (HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY){}
 8000716:	bf00      	nop
 8000718:	4819      	ldr	r0, [pc, #100]	; (8000780 <main+0x1a8>)
 800071a:	f003 fe5d 	bl	80043d8 <HAL_I2C_GetState>
 800071e:	4603      	mov	r3, r0
 8000720:	2b20      	cmp	r3, #32
 8000722:	d1f9      	bne.n	8000718 <main+0x140>

  			  /*##-6- Compare the sent and received buffers ##############################*/
  			  if(Buffercmp((uint8_t*)aTxBuffer,(uint8_t*)aRxBuffer, RXBUFFERSIZE)){
 8000724:	2214      	movs	r2, #20
 8000726:	4921      	ldr	r1, [pc, #132]	; (80007ac <main+0x1d4>)
 8000728:	481d      	ldr	r0, [pc, #116]	; (80007a0 <main+0x1c8>)
 800072a:	f000 f87f 	bl	800082c <Buffercmp>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d003      	beq.n	800073c <main+0x164>
  				 printf("Buffer compare Fail!!!\r\n\n");
 8000734:	481f      	ldr	r0, [pc, #124]	; (80007b4 <main+0x1dc>)
 8000736:	f007 f9c5 	bl	8007ac4 <puts>
 800073a:	e002      	b.n	8000742 <main+0x16a>
  			  }
  			  else {
  				 printf("Buffer compare Success!!!\r\n\n");
 800073c:	481e      	ldr	r0, [pc, #120]	; (80007b8 <main+0x1e0>)
 800073e:	f007 f9c1 	bl	8007ac4 <puts>
  			  }

  			 /* Reset bit 1 bitflag */
			 bitFlag 	&= ~BFLAG_I2C_RD1;
 8000742:	4b13      	ldr	r3, [pc, #76]	; (8000790 <main+0x1b8>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	f023 0304 	bic.w	r3, r3, #4
 800074a:	b2da      	uxtb	r2, r3
 800074c:	4b10      	ldr	r3, [pc, #64]	; (8000790 <main+0x1b8>)
 800074e:	701a      	strb	r2, [r3, #0]
		 #endif
	 }
  	 if (bitFlag & BFLAG_I2C_RD0)
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <main+0x1b8>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	f003 0302 	and.w	r3, r3, #2
 8000758:	2b00      	cmp	r3, #0
 800075a:	f43f af74 	beq.w	8000646 <main+0x6e>
  	 {
  	  	 #ifdef MASTER_BOARD

  	  		 printf("TX buffer: %s\r\n", aTxBuffer);
 800075e:	4910      	ldr	r1, [pc, #64]	; (80007a0 <main+0x1c8>)
 8000760:	4816      	ldr	r0, [pc, #88]	; (80007bc <main+0x1e4>)
 8000762:	f007 f929 	bl	80079b8 <iprintf>
  	  		 printf("RX buffer: %s\r\n\n", aRxBuffer);
 8000766:	4911      	ldr	r1, [pc, #68]	; (80007ac <main+0x1d4>)
 8000768:	4815      	ldr	r0, [pc, #84]	; (80007c0 <main+0x1e8>)
 800076a:	f007 f925 	bl	80079b8 <iprintf>

  	  		 /* Reset bit 1 bitflag */
  			 bitFlag 	&= ~BFLAG_I2C_RD0;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <main+0x1b8>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	f023 0302 	bic.w	r3, r3, #2
 8000776:	b2da      	uxtb	r2, r3
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <main+0x1b8>)
 800077a:	701a      	strb	r2, [r3, #0]
  	  if (bitFlag & BFLAG_UART_RCV) {
 800077c:	e763      	b.n	8000646 <main+0x6e>
 800077e:	bf00      	nop
 8000780:	20000150 	.word	0x20000150
 8000784:	40005400 	.word	0x40005400
 8000788:	00061a80 	.word	0x00061a80
 800078c:	080089d8 	.word	0x080089d8
 8000790:	2000023c 	.word	0x2000023c
 8000794:	2000023a 	.word	0x2000023a
 8000798:	200001f8 	.word	0x200001f8
 800079c:	080089e4 	.word	0x080089e4
 80007a0:	20000000 	.word	0x20000000
 80007a4:	080089fc 	.word	0x080089fc
 80007a8:	08008a10 	.word	0x08008a10
 80007ac:	200001a4 	.word	0x200001a4
 80007b0:	08008a2c 	.word	0x08008a2c
 80007b4:	08008a44 	.word	0x08008a44
 80007b8:	08008a60 	.word	0x08008a60
 80007bc:	08008a7c 	.word	0x08008a7c
 80007c0:	08008a8c 	.word	0x08008a8c

080007c4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  I2cHandle: I2C handle
  * @note	Turn LED2 on: Jika kirim data berhasil
  ***********************************************************************************/
#ifdef MASTER_BOARD
//Untuk MASTER BOARD
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2cHandle){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80007cc:	2201      	movs	r2, #1
 80007ce:	2120      	movs	r1, #32
 80007d0:	4803      	ldr	r0, [pc, #12]	; (80007e0 <HAL_I2C_MasterTxCpltCallback+0x1c>)
 80007d2:	f003 f8d7 	bl	8003984 <HAL_GPIO_WritePin>
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40020000 	.word	0x40020000

080007e4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  I2cHandle: I2C handle
  * @note	Turn LED2 on: Jika menerima data berhasil
  ************************************************************************************/
#ifdef MASTER_BOARD
// MASTER BOARD
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *I2cHandle) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	2120      	movs	r1, #32
 80007f0:	4803      	ldr	r0, [pc, #12]	; (8000800 <HAL_I2C_MasterRxCpltCallback+0x1c>)
 80007f2:	f003 f8c7 	bl	8003984 <HAL_GPIO_WritePin>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40020000 	.word	0x40020000

08000804 <HAL_I2C_ErrorCallback>:



/* @brief  I2C error callbacks
   @param  I2cHandle: I2C handle */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle){
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	printf("\r\nI2C ERROR \r\n\n");
 800080c:	4805      	ldr	r0, [pc, #20]	; (8000824 <HAL_I2C_ErrorCallback+0x20>)
 800080e:	f007 f959 	bl	8007ac4 <puts>
	while(1) {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000812:	2120      	movs	r1, #32
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <HAL_I2C_ErrorCallback+0x24>)
 8000816:	f003 f8ce 	bl	80039b6 <HAL_GPIO_TogglePin>
		HAL_Delay(20);
 800081a:	2014      	movs	r0, #20
 800081c:	f002 f9d8 	bl	8002bd0 <HAL_Delay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000820:	e7f7      	b.n	8000812 <HAL_I2C_ErrorCallback+0xe>
 8000822:	bf00      	nop
 8000824:	08008aa0 	.word	0x08008aa0
 8000828:	40020000 	.word	0x40020000

0800082c <Buffercmp>:
  * @param  pBuffer1, pBuffer2: buffers to be compared.
  * @param  BufferLength: buffer's length
  * @retval 0  : pBuffer1 identical to pBuffer2
  *         >0 : pBuffer1 differs from pBuffer2
  */
static uint16_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength){
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	4613      	mov	r3, r2
 8000838:	80fb      	strh	r3, [r7, #6]
	printf("Compare prosess...\r\n");
 800083a:	4811      	ldr	r0, [pc, #68]	; (8000880 <Buffercmp+0x54>)
 800083c:	f007 f942 	bl	8007ac4 <puts>
	while (BufferLength--){
 8000840:	e010      	b.n	8000864 <Buffercmp+0x38>
		if ((*pBuffer1) != *pBuffer2){
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	781a      	ldrb	r2, [r3, #0]
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	429a      	cmp	r2, r3
 800084c:	d004      	beq.n	8000858 <Buffercmp+0x2c>
			printf("Buffer different!!!\r\n");
 800084e:	480d      	ldr	r0, [pc, #52]	; (8000884 <Buffercmp+0x58>)
 8000850:	f007 f938 	bl	8007ac4 <puts>
			return BufferLength;
 8000854:	88fb      	ldrh	r3, [r7, #6]
 8000856:	e00e      	b.n	8000876 <Buffercmp+0x4a>
		}
		pBuffer1++;
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	3301      	adds	r3, #1
 800085c:	60fb      	str	r3, [r7, #12]
		pBuffer2++;
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	3301      	adds	r3, #1
 8000862:	60bb      	str	r3, [r7, #8]
	while (BufferLength--){
 8000864:	88fb      	ldrh	r3, [r7, #6]
 8000866:	1e5a      	subs	r2, r3, #1
 8000868:	80fa      	strh	r2, [r7, #6]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1e9      	bne.n	8000842 <Buffercmp+0x16>
	}
	printf("Buffer same!!!\r\n");
 800086e:	4806      	ldr	r0, [pc, #24]	; (8000888 <Buffercmp+0x5c>)
 8000870:	f007 f928 	bl	8007ac4 <puts>
	return 0;
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	08008ab0 	.word	0x08008ab0
 8000884:	08008ac4 	.word	0x08008ac4
 8000888:	08008adc 	.word	0x08008adc

0800088c <SystemClock_Config>:

/* @brief System Clock Configuration */
void SystemClock_Config(void) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b094      	sub	sp, #80	; 0x50
 8000890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	2234      	movs	r2, #52	; 0x34
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f007 f884 	bl	80079a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a0:	f107 0308 	add.w	r3, r7, #8
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b0:	2300      	movs	r3, #0
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	4b2a      	ldr	r3, [pc, #168]	; (8000960 <SystemClock_Config+0xd4>)
 80008b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b8:	4a29      	ldr	r2, [pc, #164]	; (8000960 <SystemClock_Config+0xd4>)
 80008ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008be:	6413      	str	r3, [r2, #64]	; 0x40
 80008c0:	4b27      	ldr	r3, [pc, #156]	; (8000960 <SystemClock_Config+0xd4>)
 80008c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008cc:	2300      	movs	r3, #0
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	4b24      	ldr	r3, [pc, #144]	; (8000964 <SystemClock_Config+0xd8>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008d8:	4a22      	ldr	r2, [pc, #136]	; (8000964 <SystemClock_Config+0xd8>)
 80008da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008de:	6013      	str	r3, [r2, #0]
 80008e0:	4b20      	ldr	r3, [pc, #128]	; (8000964 <SystemClock_Config+0xd8>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.*/
  RCC_OscInitStruct.OscillatorType 		= RCC_OSCILLATORTYPE_HSI;
 80008ec:	2302      	movs	r3, #2
 80008ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState 			= RCC_HSI_ON;
 80008f0:	2301      	movs	r3, #1
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f4:	2310      	movs	r3, #16
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState 		= RCC_PLL_ON;
 80008f8:	2302      	movs	r3, #2
 80008fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource 		= RCC_PLLSOURCE_HSI;
 80008fc:	2300      	movs	r3, #0
 80008fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM 			= 16;
 8000900:	2310      	movs	r3, #16
 8000902:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN 			= 336;
 8000904:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000908:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP 			= RCC_PLLP_DIV4;
 800090a:	2304      	movs	r3, #4
 800090c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ 			= 2;
 800090e:	2302      	movs	r3, #2
 8000910:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR 			= 2;
 8000912:	2302      	movs	r3, #2
 8000914:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4618      	mov	r0, r3
 800091c:	f005 fafa 	bl	8005f14 <HAL_RCC_OscConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000926:	f000 f9f5 	bl	8000d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092a:	230f      	movs	r3, #15
 800092c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800092e:	2302      	movs	r3, #2
 8000930:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000936:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800093a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK){
 8000940:	f107 0308 	add.w	r3, r7, #8
 8000944:	2105      	movs	r1, #5
 8000946:	4618      	mov	r0, r3
 8000948:	f004 ff9a 	bl	8005880 <HAL_RCC_ClockConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0xca>
    Error_Handler();
 8000952:	f000 f9df 	bl	8000d14 <Error_Handler>
  }
}
 8000956:	bf00      	nop
 8000958:	3750      	adds	r7, #80	; 0x50
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800
 8000964:	40007000 	.word	0x40007000

08000968 <MX_USART2_UART_Init>:

/* @brief USART2 Initialization Function*/
static void MX_USART2_UART_Init(void) {
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  huart2.Instance 			= USART2;
 800096c:	4b13      	ldr	r3, [pc, #76]	; (80009bc <MX_USART2_UART_Init+0x54>)
 800096e:	4a14      	ldr	r2, [pc, #80]	; (80009c0 <MX_USART2_UART_Init+0x58>)
 8000970:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate 		= 115200;
 8000972:	4b12      	ldr	r3, [pc, #72]	; (80009bc <MX_USART2_UART_Init+0x54>)
 8000974:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000978:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength 	= UART_WORDLENGTH_8B;
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <MX_USART2_UART_Init+0x54>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits 		= UART_STOPBITS_1;
 8000980:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_USART2_UART_Init+0x54>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity 		= UART_PARITY_NONE;
 8000986:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <MX_USART2_UART_Init+0x54>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode 			= UART_MODE_TX_RX;
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <MX_USART2_UART_Init+0x54>)
 800098e:	220c      	movs	r2, #12
 8000990:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl 	= UART_HWCONTROL_NONE;
 8000992:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <MX_USART2_UART_Init+0x54>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling 	= UART_OVERSAMPLING_16;
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <MX_USART2_UART_Init+0x54>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart2) != HAL_OK){
 800099e:	4807      	ldr	r0, [pc, #28]	; (80009bc <MX_USART2_UART_Init+0x54>)
 80009a0:	f005 fd56 	bl	8006450 <HAL_UART_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_USART2_UART_Init+0x46>
    Error_Handler();
 80009aa:	f000 f9b3 	bl	8000d14 <Error_Handler>
  }

  #ifdef RX_EVENT_CB
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, u8arr_eventBuff, UART_BUF_SZ);
 80009ae:	2240      	movs	r2, #64	; 0x40
 80009b0:	4904      	ldr	r1, [pc, #16]	; (80009c4 <MX_USART2_UART_Init+0x5c>)
 80009b2:	4802      	ldr	r0, [pc, #8]	; (80009bc <MX_USART2_UART_Init+0x54>)
 80009b4:	f005 fe5b 	bl	800666e <HAL_UARTEx_ReceiveToIdle_DMA>
  #else
	serial_init();
  #endif
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	200000ac 	.word	0x200000ac
 80009c0:	40004400 	.word	0x40004400
 80009c4:	200001b8 	.word	0x200001b8

080009c8 <MX_DMA_Init>:


static void MX_DMA_Init(void) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <MX_DMA_Init+0x3c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <MX_DMA_Init+0x3c>)
 80009d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MX_DMA_Init+0x3c>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2100      	movs	r1, #0
 80009ee:	2010      	movs	r0, #16
 80009f0:	f002 f9ed 	bl	8002dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80009f4:	2010      	movs	r0, #16
 80009f6:	f002 fa06 	bl	8002e06 <HAL_NVIC_EnableIRQ>
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800

08000a08 <MX_GPIO_Init>:

/* @brief GPIO Initialization Function*/
static void MX_GPIO_Init(void) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	4b2d      	ldr	r3, [pc, #180]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a2c      	ldr	r2, [pc, #176]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a28:	f043 0304 	orr.w	r3, r3, #4
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b2a      	ldr	r3, [pc, #168]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0304 	and.w	r3, r3, #4
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	4b26      	ldr	r3, [pc, #152]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a25      	ldr	r2, [pc, #148]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b23      	ldr	r3, [pc, #140]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a1e      	ldr	r2, [pc, #120]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a17      	ldr	r2, [pc, #92]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2120      	movs	r1, #32
 8000a92:	4812      	ldr	r0, [pc, #72]	; (8000adc <MX_GPIO_Init+0xd4>)
 8000a94:	f002 ff76 	bl	8003984 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin 		= B1_Pin;
 8000a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 8000a9e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	480c      	ldr	r0, [pc, #48]	; (8000ae0 <MX_GPIO_Init+0xd8>)
 8000ab0:	f002 fdd4 	bl	800365c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin 		= LD2_Pin;
 8000ab4:	2320      	movs	r3, #32
 8000ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode 		= GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed 	= GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4804      	ldr	r0, [pc, #16]	; (8000adc <MX_GPIO_Init+0xd4>)
 8000acc:	f002 fdc6 	bl	800365c <HAL_GPIO_Init>
}
 8000ad0:	bf00      	nop
 8000ad2:	3728      	adds	r7, #40	; 0x28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40020000 	.word	0x40020000
 8000ae0:	40020800 	.word	0x40020800

08000ae4 <vShell_cmdParse>:


/********************************************************
 * 	Parsing incoming message						   	*
 ********************************************************/
static void vShell_cmdParse(char *input) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	for(uint8_t u8_idx = 0; u8_idx < CFG_HEADER_NUM; u8_idx++) {
 8000aec:	2300      	movs	r3, #0
 8000aee:	77fb      	strb	r3, [r7, #31]
 8000af0:	e05a      	b.n	8000ba8 <vShell_cmdParse+0xc4>
		if(!memcmp(input,(char*)&str_cfg_header[u8_idx][0], CFG_HEADER_CHARS_LEN)) {
 8000af2:	7ffa      	ldrb	r2, [r7, #31]
 8000af4:	4613      	mov	r3, r2
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	4413      	add	r3, r2
 8000afa:	4a2f      	ldr	r2, [pc, #188]	; (8000bb8 <vShell_cmdParse+0xd4>)
 8000afc:	4413      	add	r3, r2
 8000afe:	2205      	movs	r2, #5
 8000b00:	4619      	mov	r1, r3
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f006 ff32 	bl	800796c <memcmp>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d149      	bne.n	8000ba2 <vShell_cmdParse+0xbe>
			char *pChar 		= &input[CFG_HEADER_CHARS_LEN];		//pointer untuk menyimpan header (5 char)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	3305      	adds	r3, #5
 8000b12:	61bb      	str	r3, [r7, #24]
			char *pChar2 		= &input[CFG_HEADER_CHARS_LEN];		//pointer untuk menyimpan header (5 char)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3305      	adds	r3, #5
 8000b18:	613b      	str	r3, [r7, #16]
			uint8_t u8_start 	= 0;			// ini penanda yang akan bergeser tiap indeks (menandai lokasi dari sparating symboll)
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	75fb      	strb	r3, [r7, #23]
			uint8_t u8_stop 	= 0;			// ini penenda start pointer paling awal atau awal baru setelah sparating symboll
 8000b1e:	2300      	movs	r3, #0
 8000b20:	73fb      	strb	r3, [r7, #15]
			uint8_t u8_cnt 		= 0;			// menampung ada berapa sih inputan nya
 8000b22:	2300      	movs	r3, #0
 8000b24:	73bb      	strb	r3, [r7, #14]

			if (u8_idx == 1) {
 8000b26:	7ffb      	ldrb	r3, [r7, #31]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d130      	bne.n	8000b8e <vShell_cmdParse+0xaa>
				/* WRITE HEADER */
				while (*pChar) {
 8000b2c:	e01c      	b.n	8000b68 <vShell_cmdParse+0x84>
					if (*pChar == '}') {
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b7d      	cmp	r3, #125	; 0x7d
 8000b34:	d112      	bne.n	8000b5c <vShell_cmdParse+0x78>
						memset(&aTxBuffer[0], 0, 20);
 8000b36:	2214      	movs	r2, #20
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4820      	ldr	r0, [pc, #128]	; (8000bbc <vShell_cmdParse+0xd8>)
 8000b3c:	f006 ff34 	bl	80079a8 <memset>
						memcpy(&aTxBuffer[0], &pChar2[u8_stop], u8_start - u8_stop);
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	18d1      	adds	r1, r2, r3
 8000b46:	7dfa      	ldrb	r2, [r7, #23]
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	1ad3      	subs	r3, r2, r3
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	481b      	ldr	r0, [pc, #108]	; (8000bbc <vShell_cmdParse+0xd8>)
 8000b50:	f006 ff1c 	bl	800798c <memcpy>

						u8_cnt++;
 8000b54:	7bbb      	ldrb	r3, [r7, #14]
 8000b56:	3301      	adds	r3, #1
 8000b58:	73bb      	strb	r3, [r7, #14]
						break;
 8000b5a:	e009      	b.n	8000b70 <vShell_cmdParse+0x8c>
					}
					pChar++;
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	61bb      	str	r3, [r7, #24]
					u8_start++;
 8000b62:	7dfb      	ldrb	r3, [r7, #23]
 8000b64:	3301      	adds	r3, #1
 8000b66:	75fb      	strb	r3, [r7, #23]
				while (*pChar) {
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d1de      	bne.n	8000b2e <vShell_cmdParse+0x4a>
				}
				bitFlag |= BFLAG_I2C_WR;
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <vShell_cmdParse+0xdc>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	f043 0308 	orr.w	r3, r3, #8
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <vShell_cmdParse+0xdc>)
 8000b7c:	701a      	strb	r2, [r3, #0]
				bitFlag |= BFLAG_I2C_RD1;
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <vShell_cmdParse+0xdc>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	f043 0304 	orr.w	r3, r3, #4
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <vShell_cmdParse+0xdc>)
 8000b8a:	701a      	strb	r2, [r3, #0]
 8000b8c:	e009      	b.n	8000ba2 <vShell_cmdParse+0xbe>
			}

			else if (u8_idx == 2){
 8000b8e:	7ffb      	ldrb	r3, [r7, #31]
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	d106      	bne.n	8000ba2 <vShell_cmdParse+0xbe>
				/* READ HEADER */
				bitFlag |= BFLAG_I2C_RD0;
 8000b94:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <vShell_cmdParse+0xdc>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	f043 0302 	orr.w	r3, r3, #2
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <vShell_cmdParse+0xdc>)
 8000ba0:	701a      	strb	r2, [r3, #0]
	for(uint8_t u8_idx = 0; u8_idx < CFG_HEADER_NUM; u8_idx++) {
 8000ba2:	7ffb      	ldrb	r3, [r7, #31]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	77fb      	strb	r3, [r7, #31]
 8000ba8:	7ffb      	ldrb	r3, [r7, #31]
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d9a1      	bls.n	8000af2 <vShell_cmdParse+0xe>
			}
		}
	}
}
 8000bae:	bf00      	nop
 8000bb0:	bf00      	nop
 8000bb2:	3720      	adds	r7, #32
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000010 	.word	0x20000010
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	2000023c 	.word	0x2000023c

08000bc4 <uartProcessing>:


void uartProcessing (uint8_t *u8p_buffer, uint16_t u16_size){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	460b      	mov	r3, r1
 8000bce:	807b      	strh	r3, [r7, #2]
	//Bagian ini akan dipanggil di serial.c, line 57
	//printf("UART jalan\r\n"); // Harusnya bisa langsung jalan kalo di konek lewat UI
	vShell_cmdParse((char*)u8p_buffer);
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff ff87 	bl	8000ae4 <vShell_cmdParse>
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <vUAFE_uart_handle>:
/*****************************************************************
 * @name 	vUAFE_uart_handle
 * @brief	handle afe uart data copy
 ****************************************************************/
static void vUAFE_uart_handle(uint16_t Size)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	80fb      	strh	r3, [r7, #6]
	uint16_t u16_numData;

	/* Check if number of received data in reception buffer has changed */
	if (Size != u16_oldPos)
 8000bea:	4b36      	ldr	r3, [pc, #216]	; (8000cc4 <vUAFE_uart_handle+0xe4>)
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	88fa      	ldrh	r2, [r7, #6]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d05f      	beq.n	8000cb4 <vUAFE_uart_handle+0xd4>
	{
		if (Size > u16_oldPos)
 8000bf4:	4b33      	ldr	r3, [pc, #204]	; (8000cc4 <vUAFE_uart_handle+0xe4>)
 8000bf6:	881b      	ldrh	r3, [r3, #0]
 8000bf8:	88fa      	ldrh	r2, [r7, #6]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d91a      	bls.n	8000c34 <vUAFE_uart_handle+0x54>
		{
			/* Current position is higher than previous one */
			u16_numData = Size - u16_oldPos;
 8000bfe:	4b31      	ldr	r3, [pc, #196]	; (8000cc4 <vUAFE_uart_handle+0xe4>)
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	88fa      	ldrh	r2, [r7, #6]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	81fb      	strh	r3, [r7, #14]
			memcpy(&u8arr_uartEvent[u16_lenCnt],&u8arr_eventBuff[u16_oldPos],u16_numData);
 8000c08:	4b2f      	ldr	r3, [pc, #188]	; (8000cc8 <vUAFE_uart_handle+0xe8>)
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b2f      	ldr	r3, [pc, #188]	; (8000ccc <vUAFE_uart_handle+0xec>)
 8000c10:	4413      	add	r3, r2
 8000c12:	4a2c      	ldr	r2, [pc, #176]	; (8000cc4 <vUAFE_uart_handle+0xe4>)
 8000c14:	8812      	ldrh	r2, [r2, #0]
 8000c16:	4611      	mov	r1, r2
 8000c18:	4a2d      	ldr	r2, [pc, #180]	; (8000cd0 <vUAFE_uart_handle+0xf0>)
 8000c1a:	4411      	add	r1, r2
 8000c1c:	89fa      	ldrh	r2, [r7, #14]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f006 feb4 	bl	800798c <memcpy>
			u16_lenCnt += u16_numData;
 8000c24:	4b28      	ldr	r3, [pc, #160]	; (8000cc8 <vUAFE_uart_handle+0xe8>)
 8000c26:	881a      	ldrh	r2, [r3, #0]
 8000c28:	89fb      	ldrh	r3, [r7, #14]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	4b26      	ldr	r3, [pc, #152]	; (8000cc8 <vUAFE_uart_handle+0xe8>)
 8000c30:	801a      	strh	r2, [r3, #0]
 8000c32:	e02a      	b.n	8000c8a <vUAFE_uart_handle+0xaa>
		}
		else
		{
			/* End of buffer has been reached */
			u16_numData = UART_BUF_SZ - u16_oldPos;
 8000c34:	4b23      	ldr	r3, [pc, #140]	; (8000cc4 <vUAFE_uart_handle+0xe4>)
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000c3c:	81fb      	strh	r3, [r7, #14]

			memcpy (&u8arr_uartEvent[u16_lenCnt], 			// copy data in that remaining space
 8000c3e:	4b22      	ldr	r3, [pc, #136]	; (8000cc8 <vUAFE_uart_handle+0xe8>)
 8000c40:	881b      	ldrh	r3, [r3, #0]
 8000c42:	461a      	mov	r2, r3
 8000c44:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <vUAFE_uart_handle+0xec>)
 8000c46:	4413      	add	r3, r2
					&u8arr_eventBuff[u16_oldPos],
 8000c48:	4a1e      	ldr	r2, [pc, #120]	; (8000cc4 <vUAFE_uart_handle+0xe4>)
 8000c4a:	8812      	ldrh	r2, [r2, #0]
 8000c4c:	4611      	mov	r1, r2
 8000c4e:	4a20      	ldr	r2, [pc, #128]	; (8000cd0 <vUAFE_uart_handle+0xf0>)
 8000c50:	4411      	add	r1, r2
			memcpy (&u8arr_uartEvent[u16_lenCnt], 			// copy data in that remaining space
 8000c52:	89fa      	ldrh	r2, [r7, #14]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f006 fe99 	bl	800798c <memcpy>
					u16_numData);

			u16_lenCnt += u16_numData;
 8000c5a:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <vUAFE_uart_handle+0xe8>)
 8000c5c:	881a      	ldrh	r2, [r3, #0]
 8000c5e:	89fb      	ldrh	r3, [r7, #14]
 8000c60:	4413      	add	r3, r2
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <vUAFE_uart_handle+0xe8>)
 8000c66:	801a      	strh	r2, [r3, #0]

			memcpy (&u8arr_uartEvent[u16_lenCnt], 			// copy the remaining data
 8000c68:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <vUAFE_uart_handle+0xe8>)
 8000c6a:	881b      	ldrh	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <vUAFE_uart_handle+0xec>)
 8000c70:	4413      	add	r3, r2
 8000c72:	88fa      	ldrh	r2, [r7, #6]
 8000c74:	4916      	ldr	r1, [pc, #88]	; (8000cd0 <vUAFE_uart_handle+0xf0>)
 8000c76:	4618      	mov	r0, r3
 8000c78:	f006 fe88 	bl	800798c <memcpy>
					&u8arr_eventBuff[0],
					Size);

			u16_lenCnt += Size;
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <vUAFE_uart_handle+0xe8>)
 8000c7e:	881a      	ldrh	r2, [r3, #0]
 8000c80:	88fb      	ldrh	r3, [r7, #6]
 8000c82:	4413      	add	r3, r2
 8000c84:	b29a      	uxth	r2, r3
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <vUAFE_uart_handle+0xe8>)
 8000c88:	801a      	strh	r2, [r3, #0]
		}

		/* Check for ready to process */
		if((u8arr_uartEvent[u16_lenCnt - 1] == '\n')&&(u8arr_uartEvent[u16_lenCnt - 2]== '\r'))
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <vUAFE_uart_handle+0xe8>)
 8000c8c:	881b      	ldrh	r3, [r3, #0]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <vUAFE_uart_handle+0xec>)
 8000c92:	5cd3      	ldrb	r3, [r2, r3]
 8000c94:	2b0a      	cmp	r3, #10
 8000c96:	d10d      	bne.n	8000cb4 <vUAFE_uart_handle+0xd4>
 8000c98:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <vUAFE_uart_handle+0xe8>)
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	3b02      	subs	r3, #2
 8000c9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ccc <vUAFE_uart_handle+0xec>)
 8000ca0:	5cd3      	ldrb	r3, [r2, r3]
 8000ca2:	2b0d      	cmp	r3, #13
 8000ca4:	d106      	bne.n	8000cb4 <vUAFE_uart_handle+0xd4>
		{
			bitFlag |= BFLAG_UART_RCV;
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <vUAFE_uart_handle+0xf4>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <vUAFE_uart_handle+0xf4>)
 8000cb2:	701a      	strb	r2, [r3, #0]
		}

	}

	u16_oldPos = Size;
 8000cb4:	4a03      	ldr	r2, [pc, #12]	; (8000cc4 <vUAFE_uart_handle+0xe4>)
 8000cb6:	88fb      	ldrh	r3, [r7, #6]
 8000cb8:	8013      	strh	r3, [r2, #0]
}
 8000cba:	bf00      	nop
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000238 	.word	0x20000238
 8000cc8:	2000023a 	.word	0x2000023a
 8000ccc:	200001f8 	.word	0x200001f8
 8000cd0:	200001b8 	.word	0x200001b8
 8000cd4:	2000023c 	.word	0x2000023c

08000cd8 <HAL_UARTEx_RxEventCallback>:
/*****************************************************************
 * @name HAL_UARTEx_RxEventCallback
 * @brief
 ****************************************************************/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	807b      	strh	r3, [r7, #2]
	#ifdef RX_EVENT_CB
		if (huart->Instance == USART2)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a07      	ldr	r2, [pc, #28]	; (8000d08 <HAL_UARTEx_RxEventCallback+0x30>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d108      	bne.n	8000d00 <HAL_UARTEx_RxEventCallback+0x28>
		{
			vUAFE_uart_handle(Size);
 8000cee:	887b      	ldrh	r3, [r7, #2]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff75 	bl	8000be0 <vUAFE_uart_handle>
			HAL_UARTEx_ReceiveToIdle_DMA(&huart2, u8arr_eventBuff, UART_BUF_SZ);
 8000cf6:	2240      	movs	r2, #64	; 0x40
 8000cf8:	4904      	ldr	r1, [pc, #16]	; (8000d0c <HAL_UARTEx_RxEventCallback+0x34>)
 8000cfa:	4805      	ldr	r0, [pc, #20]	; (8000d10 <HAL_UARTEx_RxEventCallback+0x38>)
 8000cfc:	f005 fcb7 	bl	800666e <HAL_UARTEx_ReceiveToIdle_DMA>
		}
	#endif
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40004400 	.word	0x40004400
 8000d0c:	200001b8 	.word	0x200001b8
 8000d10:	200000ac 	.word	0x200000ac

08000d14 <Error_Handler>:


/*******************************************************************
  * @brief  This function is executed in case of error occurrence.
  ******************************************************************/
void Error_Handler(void) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  printf("\r\nerror handler!!!\r\n");
 8000d18:	4806      	ldr	r0, [pc, #24]	; (8000d34 <Error_Handler+0x20>)
 8000d1a:	f006 fed3 	bl	8007ac4 <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1e:	b672      	cpsid	i
}
 8000d20:	bf00      	nop
  __disable_irq();

  while (1) {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000d22:	2120      	movs	r1, #32
 8000d24:	4804      	ldr	r0, [pc, #16]	; (8000d38 <Error_Handler+0x24>)
 8000d26:	f002 fe46 	bl	80039b6 <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 8000d2a:	2032      	movs	r0, #50	; 0x32
 8000d2c:	f001 ff50 	bl	8002bd0 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000d30:	e7f7      	b.n	8000d22 <Error_Handler+0xe>
 8000d32:	bf00      	nop
 8000d34:	08008aec 	.word	0x08008aec
 8000d38:	40020000 	.word	0x40020000

08000d3c <serial_init>:
static uint8_t u8arr_uart[UART_BUF_SZ];
static uint8_t u8idx;

/* Public functions definitions */
void serial_init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* initialize serial */
  stdin_init(&hstdin, &huart2, u8arr_buffer, UART_BUF_SZ);
 8000d40:	2340      	movs	r3, #64	; 0x40
 8000d42:	4a07      	ldr	r2, [pc, #28]	; (8000d60 <serial_init+0x24>)
 8000d44:	4907      	ldr	r1, [pc, #28]	; (8000d64 <serial_init+0x28>)
 8000d46:	4808      	ldr	r0, [pc, #32]	; (8000d68 <serial_init+0x2c>)
 8000d48:	f000 f866 	bl	8000e18 <stdin_init>
  stdin_set_callback(&hstdin, stdin_callback);
 8000d4c:	4907      	ldr	r1, [pc, #28]	; (8000d6c <serial_init+0x30>)
 8000d4e:	4806      	ldr	r0, [pc, #24]	; (8000d68 <serial_init+0x2c>)
 8000d50:	f000 f879 	bl	8000e46 <stdin_set_callback>
  stdin_start(&hstdin);
 8000d54:	4804      	ldr	r0, [pc, #16]	; (8000d68 <serial_init+0x2c>)
 8000d56:	f000 f897 	bl	8000e88 <stdin_start>
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000250 	.word	0x20000250
 8000d64:	200000ac 	.word	0x200000ac
 8000d68:	20000240 	.word	0x20000240
 8000d6c:	08000d99 	.word	0x08000d99

08000d70 <serial_handlerUART>:

void serial_handlerUART(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  stdin_irq_uart(&hstdin);
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <serial_handlerUART+0x10>)
 8000d76:	f001 fbf5 	bl	8002564 <stdin_irq_uart>
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000240 	.word	0x20000240

08000d84 <serial_handlerDMA>:

void serial_handlerDMA(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  stdin_irq_dma(&hstdin);
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <serial_handlerDMA+0x10>)
 8000d8a:	f000 f8b3 	bl	8000ef4 <stdin_irq_dma>
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000240 	.word	0x20000240

08000d98 <stdin_callback>:

/* Private function definitions */
static void stdin_callback(uint8_t *u8p_buffer, uint16_t u16_size)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	460b      	mov	r3, r1
 8000da2:	807b      	strh	r3, [r7, #2]
	//printf("UART RX Handler\r\n\n");

	memcpy(&u8arr_uart[u8idx], u8p_buffer, u16_size);
 8000da4:	4b1a      	ldr	r3, [pc, #104]	; (8000e10 <stdin_callback+0x78>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <stdin_callback+0x7c>)
 8000dac:	4413      	add	r3, r2
 8000dae:	887a      	ldrh	r2, [r7, #2]
 8000db0:	6879      	ldr	r1, [r7, #4]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f006 fdea 	bl	800798c <memcpy>
	u8idx += u16_size;
 8000db8:	887b      	ldrh	r3, [r7, #2]
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <stdin_callback+0x78>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <stdin_callback+0x78>)
 8000dc6:	701a      	strb	r2, [r3, #0]

	if((u8p_buffer[u16_size - 1] == '\n')&&(u8p_buffer[u16_size - 2]== '\r'))
 8000dc8:	887b      	ldrh	r3, [r7, #2]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	4413      	add	r3, r2
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b0a      	cmp	r3, #10
 8000dd4:	d117      	bne.n	8000e06 <stdin_callback+0x6e>
 8000dd6:	887b      	ldrh	r3, [r7, #2]
 8000dd8:	3b02      	subs	r3, #2
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b0d      	cmp	r3, #13
 8000de2:	d110      	bne.n	8000e06 <stdin_callback+0x6e>
	{
		uartProcessing (u8arr_uart, u8idx - 2);
 8000de4:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <stdin_callback+0x78>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	3b02      	subs	r3, #2
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	4619      	mov	r1, r3
 8000df0:	4808      	ldr	r0, [pc, #32]	; (8000e14 <stdin_callback+0x7c>)
 8000df2:	f7ff fee7 	bl	8000bc4 <uartProcessing>
		memset(u8arr_uart, 0, UART_BUF_SZ);
 8000df6:	2240      	movs	r2, #64	; 0x40
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4806      	ldr	r0, [pc, #24]	; (8000e14 <stdin_callback+0x7c>)
 8000dfc:	f006 fdd4 	bl	80079a8 <memset>
		u8idx = 0;
 8000e00:	4b03      	ldr	r3, [pc, #12]	; (8000e10 <stdin_callback+0x78>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	701a      	strb	r2, [r3, #0]
	}
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200002d0 	.word	0x200002d0
 8000e14:	20000290 	.word	0x20000290

08000e18 <stdin_init>:
static void fill_buffer(stdin_t *in, uint16_t pos, uint16_t size);

/* Public function implementations
 * --------------------------------------------*/
void stdin_init(stdin_t *in, UART_HandleTypeDef *uart, uint8_t *buffer, uint16_t size)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
 8000e24:	807b      	strh	r3, [r7, #2]
  in->huart = uart;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	68ba      	ldr	r2, [r7, #8]
 8000e2a:	601a      	str	r2, [r3, #0]
  in->buffer = buffer;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	609a      	str	r2, [r3, #8]
  in->size = size;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	887a      	ldrh	r2, [r7, #2]
 8000e36:	819a      	strh	r2, [r3, #12]

  stdin_flush(in);
 8000e38:	68f8      	ldr	r0, [r7, #12]
 8000e3a:	f000 f812 	bl	8000e62 <stdin_flush>
}
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <stdin_set_callback>:

void stdin_set_callback(stdin_t *in, stdin_callback_t cb)
{
 8000e46:	b480      	push	{r7}
 8000e48:	b083      	sub	sp, #12
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
 8000e4e:	6039      	str	r1, [r7, #0]
  in->callback = cb;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	683a      	ldr	r2, [r7, #0]
 8000e54:	605a      	str	r2, [r3, #4]
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <stdin_flush>:

void stdin_flush(stdin_t *in)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
  memset(in->buffer, 0, in->size);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6898      	ldr	r0, [r3, #8]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	899b      	ldrh	r3, [r3, #12]
 8000e72:	461a      	mov	r2, r3
 8000e74:	2100      	movs	r1, #0
 8000e76:	f006 fd97 	bl	80079a8 <memset>
  in->pos = 0;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	81da      	strh	r2, [r3, #14]
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <stdin_start>:

HAL_StatusTypeDef stdin_start(stdin_t *in)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Enable interrupts */
  __HAL_UART_ENABLE_IT(in->huart, UART_IT_IDLE);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	68da      	ldr	r2, [r3, #12]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f042 0210 	orr.w	r2, r2, #16
 8000ea2:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(HDMA(in), DMA_IT_TC);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f042 0210 	orr.w	r2, r2, #16
 8000eba:	601a      	str	r2, [r3, #0]
  __HAL_DMA_ENABLE_IT(HDMA(in), DMA_IT_HT);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f042 0208 	orr.w	r2, r2, #8
 8000ed2:	601a      	str	r2, [r3, #0]

  /* Start receiving UART in DMA mode */
  status = HAL_UART_Receive_DMA(in->huart, in->buffer, in->size);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6818      	ldr	r0, [r3, #0]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6899      	ldr	r1, [r3, #8]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	899b      	ldrh	r3, [r3, #12]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	f005 fb94 	bl	800660e <HAL_UART_Receive_DMA>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	73fb      	strb	r3, [r7, #15]
  return (status);
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <stdin_irq_dma>:
  status = HAL_UART_DMAStop(in->huart);
  return (status);
}

void stdin_irq_dma(stdin_t *in)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Handle HT interrupt */
  if (__HAL_DMA_GET_IT_SOURCE(HDMA(in), DMA_IT_HT))
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f003 0308 	and.w	r3, r3, #8
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f000 823c 	beq.w	8001388 <stdin_irq_dma+0x494>
  {
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_HT_FLAG_INDEX(HDMA(in)));
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b7f      	ldr	r3, [pc, #508]	; (8001118 <stdin_irq_dma+0x224>)
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d978      	bls.n	8001012 <stdin_irq_dma+0x11e>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a7c      	ldr	r2, [pc, #496]	; (800111c <stdin_irq_dma+0x228>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d06d      	beq.n	800100a <stdin_irq_dma+0x116>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a7a      	ldr	r2, [pc, #488]	; (8001120 <stdin_irq_dma+0x22c>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d064      	beq.n	8001006 <stdin_irq_dma+0x112>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a77      	ldr	r2, [pc, #476]	; (8001124 <stdin_irq_dma+0x230>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d05b      	beq.n	8001002 <stdin_irq_dma+0x10e>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a75      	ldr	r2, [pc, #468]	; (8001128 <stdin_irq_dma+0x234>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d052      	beq.n	8000ffe <stdin_irq_dma+0x10a>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a72      	ldr	r2, [pc, #456]	; (800112c <stdin_irq_dma+0x238>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d048      	beq.n	8000ff8 <stdin_irq_dma+0x104>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a70      	ldr	r2, [pc, #448]	; (8001130 <stdin_irq_dma+0x23c>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d03e      	beq.n	8000ff2 <stdin_irq_dma+0xfe>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a6d      	ldr	r2, [pc, #436]	; (8001134 <stdin_irq_dma+0x240>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d034      	beq.n	8000fec <stdin_irq_dma+0xf8>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a6b      	ldr	r2, [pc, #428]	; (8001138 <stdin_irq_dma+0x244>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d02a      	beq.n	8000fe6 <stdin_irq_dma+0xf2>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a68      	ldr	r2, [pc, #416]	; (800113c <stdin_irq_dma+0x248>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d020      	beq.n	8000fe0 <stdin_irq_dma+0xec>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a66      	ldr	r2, [pc, #408]	; (8001140 <stdin_irq_dma+0x24c>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d016      	beq.n	8000fda <stdin_irq_dma+0xe6>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a63      	ldr	r2, [pc, #396]	; (8001144 <stdin_irq_dma+0x250>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d00c      	beq.n	8000fd4 <stdin_irq_dma+0xe0>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a61      	ldr	r2, [pc, #388]	; (8001148 <stdin_irq_dma+0x254>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d102      	bne.n	8000fce <stdin_irq_dma+0xda>
 8000fc8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000fcc:	e01e      	b.n	800100c <stdin_irq_dma+0x118>
 8000fce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000fd2:	e01b      	b.n	800100c <stdin_irq_dma+0x118>
 8000fd4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000fd8:	e018      	b.n	800100c <stdin_irq_dma+0x118>
 8000fda:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000fde:	e015      	b.n	800100c <stdin_irq_dma+0x118>
 8000fe0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000fe4:	e012      	b.n	800100c <stdin_irq_dma+0x118>
 8000fe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fea:	e00f      	b.n	800100c <stdin_irq_dma+0x118>
 8000fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ff0:	e00c      	b.n	800100c <stdin_irq_dma+0x118>
 8000ff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ff6:	e009      	b.n	800100c <stdin_irq_dma+0x118>
 8000ff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ffc:	e006      	b.n	800100c <stdin_irq_dma+0x118>
 8000ffe:	2310      	movs	r3, #16
 8001000:	e004      	b.n	800100c <stdin_irq_dma+0x118>
 8001002:	2310      	movs	r3, #16
 8001004:	e002      	b.n	800100c <stdin_irq_dma+0x118>
 8001006:	2310      	movs	r3, #16
 8001008:	e000      	b.n	800100c <stdin_irq_dma+0x118>
 800100a:	2310      	movs	r3, #16
 800100c:	4a4f      	ldr	r2, [pc, #316]	; (800114c <stdin_irq_dma+0x258>)
 800100e:	60d3      	str	r3, [r2, #12]
 8001010:	e199      	b.n	8001346 <stdin_irq_dma+0x452>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	4b4c      	ldr	r3, [pc, #304]	; (8001150 <stdin_irq_dma+0x25c>)
 800101e:	429a      	cmp	r2, r3
 8001020:	f240 8098 	bls.w	8001154 <stdin_irq_dma+0x260>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a3b      	ldr	r2, [pc, #236]	; (800111c <stdin_irq_dma+0x228>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d06d      	beq.n	800110e <stdin_irq_dma+0x21a>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a39      	ldr	r2, [pc, #228]	; (8001120 <stdin_irq_dma+0x22c>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d064      	beq.n	800110a <stdin_irq_dma+0x216>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a36      	ldr	r2, [pc, #216]	; (8001124 <stdin_irq_dma+0x230>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d05b      	beq.n	8001106 <stdin_irq_dma+0x212>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a34      	ldr	r2, [pc, #208]	; (8001128 <stdin_irq_dma+0x234>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d052      	beq.n	8001102 <stdin_irq_dma+0x20e>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a31      	ldr	r2, [pc, #196]	; (800112c <stdin_irq_dma+0x238>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d048      	beq.n	80010fc <stdin_irq_dma+0x208>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a2f      	ldr	r2, [pc, #188]	; (8001130 <stdin_irq_dma+0x23c>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d03e      	beq.n	80010f6 <stdin_irq_dma+0x202>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a2c      	ldr	r2, [pc, #176]	; (8001134 <stdin_irq_dma+0x240>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d034      	beq.n	80010f0 <stdin_irq_dma+0x1fc>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a2a      	ldr	r2, [pc, #168]	; (8001138 <stdin_irq_dma+0x244>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d02a      	beq.n	80010ea <stdin_irq_dma+0x1f6>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a27      	ldr	r2, [pc, #156]	; (800113c <stdin_irq_dma+0x248>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d020      	beq.n	80010e4 <stdin_irq_dma+0x1f0>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a25      	ldr	r2, [pc, #148]	; (8001140 <stdin_irq_dma+0x24c>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d016      	beq.n	80010de <stdin_irq_dma+0x1ea>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a22      	ldr	r2, [pc, #136]	; (8001144 <stdin_irq_dma+0x250>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d00c      	beq.n	80010d8 <stdin_irq_dma+0x1e4>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a20      	ldr	r2, [pc, #128]	; (8001148 <stdin_irq_dma+0x254>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d102      	bne.n	80010d2 <stdin_irq_dma+0x1de>
 80010cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010d0:	e01e      	b.n	8001110 <stdin_irq_dma+0x21c>
 80010d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80010d6:	e01b      	b.n	8001110 <stdin_irq_dma+0x21c>
 80010d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010dc:	e018      	b.n	8001110 <stdin_irq_dma+0x21c>
 80010de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010e2:	e015      	b.n	8001110 <stdin_irq_dma+0x21c>
 80010e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010e8:	e012      	b.n	8001110 <stdin_irq_dma+0x21c>
 80010ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ee:	e00f      	b.n	8001110 <stdin_irq_dma+0x21c>
 80010f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010f4:	e00c      	b.n	8001110 <stdin_irq_dma+0x21c>
 80010f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010fa:	e009      	b.n	8001110 <stdin_irq_dma+0x21c>
 80010fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001100:	e006      	b.n	8001110 <stdin_irq_dma+0x21c>
 8001102:	2310      	movs	r3, #16
 8001104:	e004      	b.n	8001110 <stdin_irq_dma+0x21c>
 8001106:	2310      	movs	r3, #16
 8001108:	e002      	b.n	8001110 <stdin_irq_dma+0x21c>
 800110a:	2310      	movs	r3, #16
 800110c:	e000      	b.n	8001110 <stdin_irq_dma+0x21c>
 800110e:	2310      	movs	r3, #16
 8001110:	4a0e      	ldr	r2, [pc, #56]	; (800114c <stdin_irq_dma+0x258>)
 8001112:	6093      	str	r3, [r2, #8]
 8001114:	e117      	b.n	8001346 <stdin_irq_dma+0x452>
 8001116:	bf00      	nop
 8001118:	40026458 	.word	0x40026458
 800111c:	40026010 	.word	0x40026010
 8001120:	40026410 	.word	0x40026410
 8001124:	40026070 	.word	0x40026070
 8001128:	40026470 	.word	0x40026470
 800112c:	40026028 	.word	0x40026028
 8001130:	40026428 	.word	0x40026428
 8001134:	40026088 	.word	0x40026088
 8001138:	40026488 	.word	0x40026488
 800113c:	40026040 	.word	0x40026040
 8001140:	40026440 	.word	0x40026440
 8001144:	400260a0 	.word	0x400260a0
 8001148:	400264a0 	.word	0x400264a0
 800114c:	40026400 	.word	0x40026400
 8001150:	400260b8 	.word	0x400260b8
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	461a      	mov	r2, r3
 800115e:	4b7c      	ldr	r3, [pc, #496]	; (8001350 <stdin_irq_dma+0x45c>)
 8001160:	429a      	cmp	r2, r3
 8001162:	d978      	bls.n	8001256 <stdin_irq_dma+0x362>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a79      	ldr	r2, [pc, #484]	; (8001354 <stdin_irq_dma+0x460>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d06d      	beq.n	800124e <stdin_irq_dma+0x35a>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a77      	ldr	r2, [pc, #476]	; (8001358 <stdin_irq_dma+0x464>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d064      	beq.n	800124a <stdin_irq_dma+0x356>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a74      	ldr	r2, [pc, #464]	; (800135c <stdin_irq_dma+0x468>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d05b      	beq.n	8001246 <stdin_irq_dma+0x352>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a72      	ldr	r2, [pc, #456]	; (8001360 <stdin_irq_dma+0x46c>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d052      	beq.n	8001242 <stdin_irq_dma+0x34e>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a6f      	ldr	r2, [pc, #444]	; (8001364 <stdin_irq_dma+0x470>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d048      	beq.n	800123c <stdin_irq_dma+0x348>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a6d      	ldr	r2, [pc, #436]	; (8001368 <stdin_irq_dma+0x474>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d03e      	beq.n	8001236 <stdin_irq_dma+0x342>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a6a      	ldr	r2, [pc, #424]	; (800136c <stdin_irq_dma+0x478>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d034      	beq.n	8001230 <stdin_irq_dma+0x33c>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a68      	ldr	r2, [pc, #416]	; (8001370 <stdin_irq_dma+0x47c>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d02a      	beq.n	800122a <stdin_irq_dma+0x336>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a65      	ldr	r2, [pc, #404]	; (8001374 <stdin_irq_dma+0x480>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d020      	beq.n	8001224 <stdin_irq_dma+0x330>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a63      	ldr	r2, [pc, #396]	; (8001378 <stdin_irq_dma+0x484>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d016      	beq.n	800121e <stdin_irq_dma+0x32a>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a60      	ldr	r2, [pc, #384]	; (800137c <stdin_irq_dma+0x488>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d00c      	beq.n	8001218 <stdin_irq_dma+0x324>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a5e      	ldr	r2, [pc, #376]	; (8001380 <stdin_irq_dma+0x48c>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d102      	bne.n	8001212 <stdin_irq_dma+0x31e>
 800120c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001210:	e01e      	b.n	8001250 <stdin_irq_dma+0x35c>
 8001212:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001216:	e01b      	b.n	8001250 <stdin_irq_dma+0x35c>
 8001218:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800121c:	e018      	b.n	8001250 <stdin_irq_dma+0x35c>
 800121e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001222:	e015      	b.n	8001250 <stdin_irq_dma+0x35c>
 8001224:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001228:	e012      	b.n	8001250 <stdin_irq_dma+0x35c>
 800122a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800122e:	e00f      	b.n	8001250 <stdin_irq_dma+0x35c>
 8001230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001234:	e00c      	b.n	8001250 <stdin_irq_dma+0x35c>
 8001236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800123a:	e009      	b.n	8001250 <stdin_irq_dma+0x35c>
 800123c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001240:	e006      	b.n	8001250 <stdin_irq_dma+0x35c>
 8001242:	2310      	movs	r3, #16
 8001244:	e004      	b.n	8001250 <stdin_irq_dma+0x35c>
 8001246:	2310      	movs	r3, #16
 8001248:	e002      	b.n	8001250 <stdin_irq_dma+0x35c>
 800124a:	2310      	movs	r3, #16
 800124c:	e000      	b.n	8001250 <stdin_irq_dma+0x35c>
 800124e:	2310      	movs	r3, #16
 8001250:	4a4c      	ldr	r2, [pc, #304]	; (8001384 <stdin_irq_dma+0x490>)
 8001252:	60d3      	str	r3, [r2, #12]
 8001254:	e077      	b.n	8001346 <stdin_irq_dma+0x452>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a3d      	ldr	r2, [pc, #244]	; (8001354 <stdin_irq_dma+0x460>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d06d      	beq.n	8001340 <stdin_irq_dma+0x44c>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a3a      	ldr	r2, [pc, #232]	; (8001358 <stdin_irq_dma+0x464>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d064      	beq.n	800133c <stdin_irq_dma+0x448>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a38      	ldr	r2, [pc, #224]	; (800135c <stdin_irq_dma+0x468>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d05b      	beq.n	8001338 <stdin_irq_dma+0x444>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a35      	ldr	r2, [pc, #212]	; (8001360 <stdin_irq_dma+0x46c>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d052      	beq.n	8001334 <stdin_irq_dma+0x440>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a33      	ldr	r2, [pc, #204]	; (8001364 <stdin_irq_dma+0x470>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d048      	beq.n	800132e <stdin_irq_dma+0x43a>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a30      	ldr	r2, [pc, #192]	; (8001368 <stdin_irq_dma+0x474>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d03e      	beq.n	8001328 <stdin_irq_dma+0x434>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a2e      	ldr	r2, [pc, #184]	; (800136c <stdin_irq_dma+0x478>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d034      	beq.n	8001322 <stdin_irq_dma+0x42e>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a2b      	ldr	r2, [pc, #172]	; (8001370 <stdin_irq_dma+0x47c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d02a      	beq.n	800131c <stdin_irq_dma+0x428>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a29      	ldr	r2, [pc, #164]	; (8001374 <stdin_irq_dma+0x480>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d020      	beq.n	8001316 <stdin_irq_dma+0x422>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a26      	ldr	r2, [pc, #152]	; (8001378 <stdin_irq_dma+0x484>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d016      	beq.n	8001310 <stdin_irq_dma+0x41c>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a24      	ldr	r2, [pc, #144]	; (800137c <stdin_irq_dma+0x488>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d00c      	beq.n	800130a <stdin_irq_dma+0x416>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a21      	ldr	r2, [pc, #132]	; (8001380 <stdin_irq_dma+0x48c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d102      	bne.n	8001304 <stdin_irq_dma+0x410>
 80012fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001302:	e01e      	b.n	8001342 <stdin_irq_dma+0x44e>
 8001304:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001308:	e01b      	b.n	8001342 <stdin_irq_dma+0x44e>
 800130a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800130e:	e018      	b.n	8001342 <stdin_irq_dma+0x44e>
 8001310:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001314:	e015      	b.n	8001342 <stdin_irq_dma+0x44e>
 8001316:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800131a:	e012      	b.n	8001342 <stdin_irq_dma+0x44e>
 800131c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001320:	e00f      	b.n	8001342 <stdin_irq_dma+0x44e>
 8001322:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001326:	e00c      	b.n	8001342 <stdin_irq_dma+0x44e>
 8001328:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800132c:	e009      	b.n	8001342 <stdin_irq_dma+0x44e>
 800132e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001332:	e006      	b.n	8001342 <stdin_irq_dma+0x44e>
 8001334:	2310      	movs	r3, #16
 8001336:	e004      	b.n	8001342 <stdin_irq_dma+0x44e>
 8001338:	2310      	movs	r3, #16
 800133a:	e002      	b.n	8001342 <stdin_irq_dma+0x44e>
 800133c:	2310      	movs	r3, #16
 800133e:	e000      	b.n	8001342 <stdin_irq_dma+0x44e>
 8001340:	2310      	movs	r3, #16
 8001342:	4a10      	ldr	r2, [pc, #64]	; (8001384 <stdin_irq_dma+0x490>)
 8001344:	6093      	str	r3, [r2, #8]
    check_buffer(in);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f001 f92c 	bl	80025a4 <check_buffer>
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_FE_FLAG_INDEX(HDMA(in)));
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_DME_FLAG_INDEX(HDMA(in)));

    HAL_UART_Receive_DMA(in->huart, in->buffer, in->size);
  }
}
 800134c:	f001 b8ea 	b.w	8002524 <stdin_irq_dma+0x1630>
 8001350:	40026058 	.word	0x40026058
 8001354:	40026010 	.word	0x40026010
 8001358:	40026410 	.word	0x40026410
 800135c:	40026070 	.word	0x40026070
 8001360:	40026470 	.word	0x40026470
 8001364:	40026028 	.word	0x40026028
 8001368:	40026428 	.word	0x40026428
 800136c:	40026088 	.word	0x40026088
 8001370:	40026488 	.word	0x40026488
 8001374:	40026040 	.word	0x40026040
 8001378:	40026440 	.word	0x40026440
 800137c:	400260a0 	.word	0x400260a0
 8001380:	400264a0 	.word	0x400264a0
 8001384:	40026000 	.word	0x40026000
  else if (__HAL_DMA_GET_IT_SOURCE(HDMA(in), DMA_IT_TC))
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0310 	and.w	r3, r3, #16
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 823c 	beq.w	8001814 <stdin_irq_dma+0x920>
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_TC_FLAG_INDEX(HDMA(in)));
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b7f      	ldr	r3, [pc, #508]	; (80015a4 <stdin_irq_dma+0x6b0>)
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d978      	bls.n	800149e <stdin_irq_dma+0x5aa>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a7c      	ldr	r2, [pc, #496]	; (80015a8 <stdin_irq_dma+0x6b4>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d06d      	beq.n	8001496 <stdin_irq_dma+0x5a2>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a7a      	ldr	r2, [pc, #488]	; (80015ac <stdin_irq_dma+0x6b8>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d064      	beq.n	8001492 <stdin_irq_dma+0x59e>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a77      	ldr	r2, [pc, #476]	; (80015b0 <stdin_irq_dma+0x6bc>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d05b      	beq.n	800148e <stdin_irq_dma+0x59a>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a75      	ldr	r2, [pc, #468]	; (80015b4 <stdin_irq_dma+0x6c0>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d052      	beq.n	800148a <stdin_irq_dma+0x596>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a72      	ldr	r2, [pc, #456]	; (80015b8 <stdin_irq_dma+0x6c4>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d048      	beq.n	8001484 <stdin_irq_dma+0x590>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a70      	ldr	r2, [pc, #448]	; (80015bc <stdin_irq_dma+0x6c8>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d03e      	beq.n	800147e <stdin_irq_dma+0x58a>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a6d      	ldr	r2, [pc, #436]	; (80015c0 <stdin_irq_dma+0x6cc>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d034      	beq.n	8001478 <stdin_irq_dma+0x584>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a6b      	ldr	r2, [pc, #428]	; (80015c4 <stdin_irq_dma+0x6d0>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d02a      	beq.n	8001472 <stdin_irq_dma+0x57e>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a68      	ldr	r2, [pc, #416]	; (80015c8 <stdin_irq_dma+0x6d4>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d020      	beq.n	800146c <stdin_irq_dma+0x578>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a66      	ldr	r2, [pc, #408]	; (80015cc <stdin_irq_dma+0x6d8>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d016      	beq.n	8001466 <stdin_irq_dma+0x572>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a63      	ldr	r2, [pc, #396]	; (80015d0 <stdin_irq_dma+0x6dc>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d00c      	beq.n	8001460 <stdin_irq_dma+0x56c>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a61      	ldr	r2, [pc, #388]	; (80015d4 <stdin_irq_dma+0x6e0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d102      	bne.n	800145a <stdin_irq_dma+0x566>
 8001454:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001458:	e01e      	b.n	8001498 <stdin_irq_dma+0x5a4>
 800145a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800145e:	e01b      	b.n	8001498 <stdin_irq_dma+0x5a4>
 8001460:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001464:	e018      	b.n	8001498 <stdin_irq_dma+0x5a4>
 8001466:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800146a:	e015      	b.n	8001498 <stdin_irq_dma+0x5a4>
 800146c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001470:	e012      	b.n	8001498 <stdin_irq_dma+0x5a4>
 8001472:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001476:	e00f      	b.n	8001498 <stdin_irq_dma+0x5a4>
 8001478:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800147c:	e00c      	b.n	8001498 <stdin_irq_dma+0x5a4>
 800147e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001482:	e009      	b.n	8001498 <stdin_irq_dma+0x5a4>
 8001484:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001488:	e006      	b.n	8001498 <stdin_irq_dma+0x5a4>
 800148a:	2320      	movs	r3, #32
 800148c:	e004      	b.n	8001498 <stdin_irq_dma+0x5a4>
 800148e:	2320      	movs	r3, #32
 8001490:	e002      	b.n	8001498 <stdin_irq_dma+0x5a4>
 8001492:	2320      	movs	r3, #32
 8001494:	e000      	b.n	8001498 <stdin_irq_dma+0x5a4>
 8001496:	2320      	movs	r3, #32
 8001498:	4a4f      	ldr	r2, [pc, #316]	; (80015d8 <stdin_irq_dma+0x6e4>)
 800149a:	60d3      	str	r3, [r2, #12]
 800149c:	e199      	b.n	80017d2 <stdin_irq_dma+0x8de>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b4c      	ldr	r3, [pc, #304]	; (80015dc <stdin_irq_dma+0x6e8>)
 80014aa:	429a      	cmp	r2, r3
 80014ac:	f240 8098 	bls.w	80015e0 <stdin_irq_dma+0x6ec>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a3b      	ldr	r2, [pc, #236]	; (80015a8 <stdin_irq_dma+0x6b4>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d06d      	beq.n	800159a <stdin_irq_dma+0x6a6>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a39      	ldr	r2, [pc, #228]	; (80015ac <stdin_irq_dma+0x6b8>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d064      	beq.n	8001596 <stdin_irq_dma+0x6a2>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a36      	ldr	r2, [pc, #216]	; (80015b0 <stdin_irq_dma+0x6bc>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d05b      	beq.n	8001592 <stdin_irq_dma+0x69e>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a34      	ldr	r2, [pc, #208]	; (80015b4 <stdin_irq_dma+0x6c0>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d052      	beq.n	800158e <stdin_irq_dma+0x69a>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a31      	ldr	r2, [pc, #196]	; (80015b8 <stdin_irq_dma+0x6c4>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d048      	beq.n	8001588 <stdin_irq_dma+0x694>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a2f      	ldr	r2, [pc, #188]	; (80015bc <stdin_irq_dma+0x6c8>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d03e      	beq.n	8001582 <stdin_irq_dma+0x68e>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a2c      	ldr	r2, [pc, #176]	; (80015c0 <stdin_irq_dma+0x6cc>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d034      	beq.n	800157c <stdin_irq_dma+0x688>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a2a      	ldr	r2, [pc, #168]	; (80015c4 <stdin_irq_dma+0x6d0>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d02a      	beq.n	8001576 <stdin_irq_dma+0x682>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a27      	ldr	r2, [pc, #156]	; (80015c8 <stdin_irq_dma+0x6d4>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d020      	beq.n	8001570 <stdin_irq_dma+0x67c>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a25      	ldr	r2, [pc, #148]	; (80015cc <stdin_irq_dma+0x6d8>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d016      	beq.n	800156a <stdin_irq_dma+0x676>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a22      	ldr	r2, [pc, #136]	; (80015d0 <stdin_irq_dma+0x6dc>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d00c      	beq.n	8001564 <stdin_irq_dma+0x670>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a20      	ldr	r2, [pc, #128]	; (80015d4 <stdin_irq_dma+0x6e0>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d102      	bne.n	800155e <stdin_irq_dma+0x66a>
 8001558:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800155c:	e01e      	b.n	800159c <stdin_irq_dma+0x6a8>
 800155e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001562:	e01b      	b.n	800159c <stdin_irq_dma+0x6a8>
 8001564:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001568:	e018      	b.n	800159c <stdin_irq_dma+0x6a8>
 800156a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800156e:	e015      	b.n	800159c <stdin_irq_dma+0x6a8>
 8001570:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001574:	e012      	b.n	800159c <stdin_irq_dma+0x6a8>
 8001576:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800157a:	e00f      	b.n	800159c <stdin_irq_dma+0x6a8>
 800157c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001580:	e00c      	b.n	800159c <stdin_irq_dma+0x6a8>
 8001582:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001586:	e009      	b.n	800159c <stdin_irq_dma+0x6a8>
 8001588:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800158c:	e006      	b.n	800159c <stdin_irq_dma+0x6a8>
 800158e:	2320      	movs	r3, #32
 8001590:	e004      	b.n	800159c <stdin_irq_dma+0x6a8>
 8001592:	2320      	movs	r3, #32
 8001594:	e002      	b.n	800159c <stdin_irq_dma+0x6a8>
 8001596:	2320      	movs	r3, #32
 8001598:	e000      	b.n	800159c <stdin_irq_dma+0x6a8>
 800159a:	2320      	movs	r3, #32
 800159c:	4a0e      	ldr	r2, [pc, #56]	; (80015d8 <stdin_irq_dma+0x6e4>)
 800159e:	6093      	str	r3, [r2, #8]
 80015a0:	e117      	b.n	80017d2 <stdin_irq_dma+0x8de>
 80015a2:	bf00      	nop
 80015a4:	40026458 	.word	0x40026458
 80015a8:	40026010 	.word	0x40026010
 80015ac:	40026410 	.word	0x40026410
 80015b0:	40026070 	.word	0x40026070
 80015b4:	40026470 	.word	0x40026470
 80015b8:	40026028 	.word	0x40026028
 80015bc:	40026428 	.word	0x40026428
 80015c0:	40026088 	.word	0x40026088
 80015c4:	40026488 	.word	0x40026488
 80015c8:	40026040 	.word	0x40026040
 80015cc:	40026440 	.word	0x40026440
 80015d0:	400260a0 	.word	0x400260a0
 80015d4:	400264a0 	.word	0x400264a0
 80015d8:	40026400 	.word	0x40026400
 80015dc:	400260b8 	.word	0x400260b8
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b7c      	ldr	r3, [pc, #496]	; (80017dc <stdin_irq_dma+0x8e8>)
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d978      	bls.n	80016e2 <stdin_irq_dma+0x7ee>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a79      	ldr	r2, [pc, #484]	; (80017e0 <stdin_irq_dma+0x8ec>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d06d      	beq.n	80016da <stdin_irq_dma+0x7e6>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a77      	ldr	r2, [pc, #476]	; (80017e4 <stdin_irq_dma+0x8f0>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d064      	beq.n	80016d6 <stdin_irq_dma+0x7e2>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a74      	ldr	r2, [pc, #464]	; (80017e8 <stdin_irq_dma+0x8f4>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d05b      	beq.n	80016d2 <stdin_irq_dma+0x7de>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a72      	ldr	r2, [pc, #456]	; (80017ec <stdin_irq_dma+0x8f8>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d052      	beq.n	80016ce <stdin_irq_dma+0x7da>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a6f      	ldr	r2, [pc, #444]	; (80017f0 <stdin_irq_dma+0x8fc>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d048      	beq.n	80016c8 <stdin_irq_dma+0x7d4>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a6d      	ldr	r2, [pc, #436]	; (80017f4 <stdin_irq_dma+0x900>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d03e      	beq.n	80016c2 <stdin_irq_dma+0x7ce>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a6a      	ldr	r2, [pc, #424]	; (80017f8 <stdin_irq_dma+0x904>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d034      	beq.n	80016bc <stdin_irq_dma+0x7c8>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a68      	ldr	r2, [pc, #416]	; (80017fc <stdin_irq_dma+0x908>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d02a      	beq.n	80016b6 <stdin_irq_dma+0x7c2>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a65      	ldr	r2, [pc, #404]	; (8001800 <stdin_irq_dma+0x90c>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d020      	beq.n	80016b0 <stdin_irq_dma+0x7bc>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a63      	ldr	r2, [pc, #396]	; (8001804 <stdin_irq_dma+0x910>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d016      	beq.n	80016aa <stdin_irq_dma+0x7b6>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a60      	ldr	r2, [pc, #384]	; (8001808 <stdin_irq_dma+0x914>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d00c      	beq.n	80016a4 <stdin_irq_dma+0x7b0>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a5e      	ldr	r2, [pc, #376]	; (800180c <stdin_irq_dma+0x918>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d102      	bne.n	800169e <stdin_irq_dma+0x7aa>
 8001698:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800169c:	e01e      	b.n	80016dc <stdin_irq_dma+0x7e8>
 800169e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80016a2:	e01b      	b.n	80016dc <stdin_irq_dma+0x7e8>
 80016a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016a8:	e018      	b.n	80016dc <stdin_irq_dma+0x7e8>
 80016aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016ae:	e015      	b.n	80016dc <stdin_irq_dma+0x7e8>
 80016b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016b4:	e012      	b.n	80016dc <stdin_irq_dma+0x7e8>
 80016b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016ba:	e00f      	b.n	80016dc <stdin_irq_dma+0x7e8>
 80016bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016c0:	e00c      	b.n	80016dc <stdin_irq_dma+0x7e8>
 80016c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016c6:	e009      	b.n	80016dc <stdin_irq_dma+0x7e8>
 80016c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016cc:	e006      	b.n	80016dc <stdin_irq_dma+0x7e8>
 80016ce:	2320      	movs	r3, #32
 80016d0:	e004      	b.n	80016dc <stdin_irq_dma+0x7e8>
 80016d2:	2320      	movs	r3, #32
 80016d4:	e002      	b.n	80016dc <stdin_irq_dma+0x7e8>
 80016d6:	2320      	movs	r3, #32
 80016d8:	e000      	b.n	80016dc <stdin_irq_dma+0x7e8>
 80016da:	2320      	movs	r3, #32
 80016dc:	4a4c      	ldr	r2, [pc, #304]	; (8001810 <stdin_irq_dma+0x91c>)
 80016de:	60d3      	str	r3, [r2, #12]
 80016e0:	e077      	b.n	80017d2 <stdin_irq_dma+0x8de>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a3d      	ldr	r2, [pc, #244]	; (80017e0 <stdin_irq_dma+0x8ec>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d06d      	beq.n	80017cc <stdin_irq_dma+0x8d8>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a3a      	ldr	r2, [pc, #232]	; (80017e4 <stdin_irq_dma+0x8f0>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d064      	beq.n	80017c8 <stdin_irq_dma+0x8d4>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a38      	ldr	r2, [pc, #224]	; (80017e8 <stdin_irq_dma+0x8f4>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d05b      	beq.n	80017c4 <stdin_irq_dma+0x8d0>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a35      	ldr	r2, [pc, #212]	; (80017ec <stdin_irq_dma+0x8f8>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d052      	beq.n	80017c0 <stdin_irq_dma+0x8cc>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a33      	ldr	r2, [pc, #204]	; (80017f0 <stdin_irq_dma+0x8fc>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d048      	beq.n	80017ba <stdin_irq_dma+0x8c6>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a30      	ldr	r2, [pc, #192]	; (80017f4 <stdin_irq_dma+0x900>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d03e      	beq.n	80017b4 <stdin_irq_dma+0x8c0>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a2e      	ldr	r2, [pc, #184]	; (80017f8 <stdin_irq_dma+0x904>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d034      	beq.n	80017ae <stdin_irq_dma+0x8ba>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a2b      	ldr	r2, [pc, #172]	; (80017fc <stdin_irq_dma+0x908>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d02a      	beq.n	80017a8 <stdin_irq_dma+0x8b4>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a29      	ldr	r2, [pc, #164]	; (8001800 <stdin_irq_dma+0x90c>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d020      	beq.n	80017a2 <stdin_irq_dma+0x8ae>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a26      	ldr	r2, [pc, #152]	; (8001804 <stdin_irq_dma+0x910>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d016      	beq.n	800179c <stdin_irq_dma+0x8a8>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a24      	ldr	r2, [pc, #144]	; (8001808 <stdin_irq_dma+0x914>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d00c      	beq.n	8001796 <stdin_irq_dma+0x8a2>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a21      	ldr	r2, [pc, #132]	; (800180c <stdin_irq_dma+0x918>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d102      	bne.n	8001790 <stdin_irq_dma+0x89c>
 800178a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800178e:	e01e      	b.n	80017ce <stdin_irq_dma+0x8da>
 8001790:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001794:	e01b      	b.n	80017ce <stdin_irq_dma+0x8da>
 8001796:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800179a:	e018      	b.n	80017ce <stdin_irq_dma+0x8da>
 800179c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80017a0:	e015      	b.n	80017ce <stdin_irq_dma+0x8da>
 80017a2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80017a6:	e012      	b.n	80017ce <stdin_irq_dma+0x8da>
 80017a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017ac:	e00f      	b.n	80017ce <stdin_irq_dma+0x8da>
 80017ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017b2:	e00c      	b.n	80017ce <stdin_irq_dma+0x8da>
 80017b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017b8:	e009      	b.n	80017ce <stdin_irq_dma+0x8da>
 80017ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017be:	e006      	b.n	80017ce <stdin_irq_dma+0x8da>
 80017c0:	2320      	movs	r3, #32
 80017c2:	e004      	b.n	80017ce <stdin_irq_dma+0x8da>
 80017c4:	2320      	movs	r3, #32
 80017c6:	e002      	b.n	80017ce <stdin_irq_dma+0x8da>
 80017c8:	2320      	movs	r3, #32
 80017ca:	e000      	b.n	80017ce <stdin_irq_dma+0x8da>
 80017cc:	2320      	movs	r3, #32
 80017ce:	4a10      	ldr	r2, [pc, #64]	; (8001810 <stdin_irq_dma+0x91c>)
 80017d0:	6093      	str	r3, [r2, #8]
    check_buffer(in);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 fee6 	bl	80025a4 <check_buffer>
}
 80017d8:	f000 bea4 	b.w	8002524 <stdin_irq_dma+0x1630>
 80017dc:	40026058 	.word	0x40026058
 80017e0:	40026010 	.word	0x40026010
 80017e4:	40026410 	.word	0x40026410
 80017e8:	40026070 	.word	0x40026070
 80017ec:	40026470 	.word	0x40026470
 80017f0:	40026028 	.word	0x40026028
 80017f4:	40026428 	.word	0x40026428
 80017f8:	40026088 	.word	0x40026088
 80017fc:	40026488 	.word	0x40026488
 8001800:	40026040 	.word	0x40026040
 8001804:	40026440 	.word	0x40026440
 8001808:	400260a0 	.word	0x400260a0
 800180c:	400264a0 	.word	0x400264a0
 8001810:	40026000 	.word	0x40026000
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_TE_FLAG_INDEX(HDMA(in)));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	4b7f      	ldr	r3, [pc, #508]	; (8001a1c <stdin_irq_dma+0xb28>)
 8001820:	429a      	cmp	r2, r3
 8001822:	d978      	bls.n	8001916 <stdin_irq_dma+0xa22>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a7c      	ldr	r2, [pc, #496]	; (8001a20 <stdin_irq_dma+0xb2c>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d06d      	beq.n	800190e <stdin_irq_dma+0xa1a>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a7a      	ldr	r2, [pc, #488]	; (8001a24 <stdin_irq_dma+0xb30>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d064      	beq.n	800190a <stdin_irq_dma+0xa16>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a77      	ldr	r2, [pc, #476]	; (8001a28 <stdin_irq_dma+0xb34>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d05b      	beq.n	8001906 <stdin_irq_dma+0xa12>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a75      	ldr	r2, [pc, #468]	; (8001a2c <stdin_irq_dma+0xb38>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d052      	beq.n	8001902 <stdin_irq_dma+0xa0e>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a72      	ldr	r2, [pc, #456]	; (8001a30 <stdin_irq_dma+0xb3c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d048      	beq.n	80018fc <stdin_irq_dma+0xa08>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a70      	ldr	r2, [pc, #448]	; (8001a34 <stdin_irq_dma+0xb40>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d03e      	beq.n	80018f6 <stdin_irq_dma+0xa02>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a6d      	ldr	r2, [pc, #436]	; (8001a38 <stdin_irq_dma+0xb44>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d034      	beq.n	80018f0 <stdin_irq_dma+0x9fc>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a6b      	ldr	r2, [pc, #428]	; (8001a3c <stdin_irq_dma+0xb48>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d02a      	beq.n	80018ea <stdin_irq_dma+0x9f6>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a68      	ldr	r2, [pc, #416]	; (8001a40 <stdin_irq_dma+0xb4c>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d020      	beq.n	80018e4 <stdin_irq_dma+0x9f0>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a66      	ldr	r2, [pc, #408]	; (8001a44 <stdin_irq_dma+0xb50>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d016      	beq.n	80018de <stdin_irq_dma+0x9ea>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a63      	ldr	r2, [pc, #396]	; (8001a48 <stdin_irq_dma+0xb54>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d00c      	beq.n	80018d8 <stdin_irq_dma+0x9e4>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a61      	ldr	r2, [pc, #388]	; (8001a4c <stdin_irq_dma+0xb58>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d102      	bne.n	80018d2 <stdin_irq_dma+0x9de>
 80018cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80018d0:	e01e      	b.n	8001910 <stdin_irq_dma+0xa1c>
 80018d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018d6:	e01b      	b.n	8001910 <stdin_irq_dma+0xa1c>
 80018d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80018dc:	e018      	b.n	8001910 <stdin_irq_dma+0xa1c>
 80018de:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80018e2:	e015      	b.n	8001910 <stdin_irq_dma+0xa1c>
 80018e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80018e8:	e012      	b.n	8001910 <stdin_irq_dma+0xa1c>
 80018ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018ee:	e00f      	b.n	8001910 <stdin_irq_dma+0xa1c>
 80018f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018f4:	e00c      	b.n	8001910 <stdin_irq_dma+0xa1c>
 80018f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018fa:	e009      	b.n	8001910 <stdin_irq_dma+0xa1c>
 80018fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001900:	e006      	b.n	8001910 <stdin_irq_dma+0xa1c>
 8001902:	2308      	movs	r3, #8
 8001904:	e004      	b.n	8001910 <stdin_irq_dma+0xa1c>
 8001906:	2308      	movs	r3, #8
 8001908:	e002      	b.n	8001910 <stdin_irq_dma+0xa1c>
 800190a:	2308      	movs	r3, #8
 800190c:	e000      	b.n	8001910 <stdin_irq_dma+0xa1c>
 800190e:	2308      	movs	r3, #8
 8001910:	4a4f      	ldr	r2, [pc, #316]	; (8001a50 <stdin_irq_dma+0xb5c>)
 8001912:	60d3      	str	r3, [r2, #12]
 8001914:	e1b7      	b.n	8001c86 <stdin_irq_dma+0xd92>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	4b4c      	ldr	r3, [pc, #304]	; (8001a54 <stdin_irq_dma+0xb60>)
 8001922:	429a      	cmp	r2, r3
 8001924:	f240 8098 	bls.w	8001a58 <stdin_irq_dma+0xb64>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a3b      	ldr	r2, [pc, #236]	; (8001a20 <stdin_irq_dma+0xb2c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d06d      	beq.n	8001a12 <stdin_irq_dma+0xb1e>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a39      	ldr	r2, [pc, #228]	; (8001a24 <stdin_irq_dma+0xb30>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d064      	beq.n	8001a0e <stdin_irq_dma+0xb1a>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a36      	ldr	r2, [pc, #216]	; (8001a28 <stdin_irq_dma+0xb34>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d05b      	beq.n	8001a0a <stdin_irq_dma+0xb16>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a34      	ldr	r2, [pc, #208]	; (8001a2c <stdin_irq_dma+0xb38>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d052      	beq.n	8001a06 <stdin_irq_dma+0xb12>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a31      	ldr	r2, [pc, #196]	; (8001a30 <stdin_irq_dma+0xb3c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d048      	beq.n	8001a00 <stdin_irq_dma+0xb0c>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a2f      	ldr	r2, [pc, #188]	; (8001a34 <stdin_irq_dma+0xb40>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d03e      	beq.n	80019fa <stdin_irq_dma+0xb06>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a2c      	ldr	r2, [pc, #176]	; (8001a38 <stdin_irq_dma+0xb44>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d034      	beq.n	80019f4 <stdin_irq_dma+0xb00>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a2a      	ldr	r2, [pc, #168]	; (8001a3c <stdin_irq_dma+0xb48>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d02a      	beq.n	80019ee <stdin_irq_dma+0xafa>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a27      	ldr	r2, [pc, #156]	; (8001a40 <stdin_irq_dma+0xb4c>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d020      	beq.n	80019e8 <stdin_irq_dma+0xaf4>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a25      	ldr	r2, [pc, #148]	; (8001a44 <stdin_irq_dma+0xb50>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d016      	beq.n	80019e2 <stdin_irq_dma+0xaee>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a22      	ldr	r2, [pc, #136]	; (8001a48 <stdin_irq_dma+0xb54>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d00c      	beq.n	80019dc <stdin_irq_dma+0xae8>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a20      	ldr	r2, [pc, #128]	; (8001a4c <stdin_irq_dma+0xb58>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d102      	bne.n	80019d6 <stdin_irq_dma+0xae2>
 80019d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80019d4:	e01e      	b.n	8001a14 <stdin_irq_dma+0xb20>
 80019d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019da:	e01b      	b.n	8001a14 <stdin_irq_dma+0xb20>
 80019dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80019e0:	e018      	b.n	8001a14 <stdin_irq_dma+0xb20>
 80019e2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80019e6:	e015      	b.n	8001a14 <stdin_irq_dma+0xb20>
 80019e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80019ec:	e012      	b.n	8001a14 <stdin_irq_dma+0xb20>
 80019ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019f2:	e00f      	b.n	8001a14 <stdin_irq_dma+0xb20>
 80019f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019f8:	e00c      	b.n	8001a14 <stdin_irq_dma+0xb20>
 80019fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019fe:	e009      	b.n	8001a14 <stdin_irq_dma+0xb20>
 8001a00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a04:	e006      	b.n	8001a14 <stdin_irq_dma+0xb20>
 8001a06:	2308      	movs	r3, #8
 8001a08:	e004      	b.n	8001a14 <stdin_irq_dma+0xb20>
 8001a0a:	2308      	movs	r3, #8
 8001a0c:	e002      	b.n	8001a14 <stdin_irq_dma+0xb20>
 8001a0e:	2308      	movs	r3, #8
 8001a10:	e000      	b.n	8001a14 <stdin_irq_dma+0xb20>
 8001a12:	2308      	movs	r3, #8
 8001a14:	4a0e      	ldr	r2, [pc, #56]	; (8001a50 <stdin_irq_dma+0xb5c>)
 8001a16:	6093      	str	r3, [r2, #8]
 8001a18:	e135      	b.n	8001c86 <stdin_irq_dma+0xd92>
 8001a1a:	bf00      	nop
 8001a1c:	40026458 	.word	0x40026458
 8001a20:	40026010 	.word	0x40026010
 8001a24:	40026410 	.word	0x40026410
 8001a28:	40026070 	.word	0x40026070
 8001a2c:	40026470 	.word	0x40026470
 8001a30:	40026028 	.word	0x40026028
 8001a34:	40026428 	.word	0x40026428
 8001a38:	40026088 	.word	0x40026088
 8001a3c:	40026488 	.word	0x40026488
 8001a40:	40026040 	.word	0x40026040
 8001a44:	40026440 	.word	0x40026440
 8001a48:	400260a0 	.word	0x400260a0
 8001a4c:	400264a0 	.word	0x400264a0
 8001a50:	40026400 	.word	0x40026400
 8001a54:	400260b8 	.word	0x400260b8
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b79      	ldr	r3, [pc, #484]	; (8001c48 <stdin_irq_dma+0xd54>)
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d978      	bls.n	8001b5a <stdin_irq_dma+0xc66>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a76      	ldr	r2, [pc, #472]	; (8001c4c <stdin_irq_dma+0xd58>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d06d      	beq.n	8001b52 <stdin_irq_dma+0xc5e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a74      	ldr	r2, [pc, #464]	; (8001c50 <stdin_irq_dma+0xd5c>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d064      	beq.n	8001b4e <stdin_irq_dma+0xc5a>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a71      	ldr	r2, [pc, #452]	; (8001c54 <stdin_irq_dma+0xd60>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d05b      	beq.n	8001b4a <stdin_irq_dma+0xc56>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a6f      	ldr	r2, [pc, #444]	; (8001c58 <stdin_irq_dma+0xd64>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d052      	beq.n	8001b46 <stdin_irq_dma+0xc52>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a6c      	ldr	r2, [pc, #432]	; (8001c5c <stdin_irq_dma+0xd68>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d048      	beq.n	8001b40 <stdin_irq_dma+0xc4c>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a6a      	ldr	r2, [pc, #424]	; (8001c60 <stdin_irq_dma+0xd6c>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d03e      	beq.n	8001b3a <stdin_irq_dma+0xc46>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a67      	ldr	r2, [pc, #412]	; (8001c64 <stdin_irq_dma+0xd70>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d034      	beq.n	8001b34 <stdin_irq_dma+0xc40>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a65      	ldr	r2, [pc, #404]	; (8001c68 <stdin_irq_dma+0xd74>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d02a      	beq.n	8001b2e <stdin_irq_dma+0xc3a>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a62      	ldr	r2, [pc, #392]	; (8001c6c <stdin_irq_dma+0xd78>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d020      	beq.n	8001b28 <stdin_irq_dma+0xc34>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a60      	ldr	r2, [pc, #384]	; (8001c70 <stdin_irq_dma+0xd7c>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d016      	beq.n	8001b22 <stdin_irq_dma+0xc2e>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a5d      	ldr	r2, [pc, #372]	; (8001c74 <stdin_irq_dma+0xd80>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d00c      	beq.n	8001b1c <stdin_irq_dma+0xc28>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a5b      	ldr	r2, [pc, #364]	; (8001c78 <stdin_irq_dma+0xd84>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d102      	bne.n	8001b16 <stdin_irq_dma+0xc22>
 8001b10:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001b14:	e01e      	b.n	8001b54 <stdin_irq_dma+0xc60>
 8001b16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b1a:	e01b      	b.n	8001b54 <stdin_irq_dma+0xc60>
 8001b1c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001b20:	e018      	b.n	8001b54 <stdin_irq_dma+0xc60>
 8001b22:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001b26:	e015      	b.n	8001b54 <stdin_irq_dma+0xc60>
 8001b28:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001b2c:	e012      	b.n	8001b54 <stdin_irq_dma+0xc60>
 8001b2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b32:	e00f      	b.n	8001b54 <stdin_irq_dma+0xc60>
 8001b34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b38:	e00c      	b.n	8001b54 <stdin_irq_dma+0xc60>
 8001b3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b3e:	e009      	b.n	8001b54 <stdin_irq_dma+0xc60>
 8001b40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b44:	e006      	b.n	8001b54 <stdin_irq_dma+0xc60>
 8001b46:	2308      	movs	r3, #8
 8001b48:	e004      	b.n	8001b54 <stdin_irq_dma+0xc60>
 8001b4a:	2308      	movs	r3, #8
 8001b4c:	e002      	b.n	8001b54 <stdin_irq_dma+0xc60>
 8001b4e:	2308      	movs	r3, #8
 8001b50:	e000      	b.n	8001b54 <stdin_irq_dma+0xc60>
 8001b52:	2308      	movs	r3, #8
 8001b54:	4a49      	ldr	r2, [pc, #292]	; (8001c7c <stdin_irq_dma+0xd88>)
 8001b56:	60d3      	str	r3, [r2, #12]
 8001b58:	e095      	b.n	8001c86 <stdin_irq_dma+0xd92>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a3a      	ldr	r2, [pc, #232]	; (8001c4c <stdin_irq_dma+0xd58>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	f000 808b 	beq.w	8001c80 <stdin_irq_dma+0xd8c>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a37      	ldr	r2, [pc, #220]	; (8001c50 <stdin_irq_dma+0xd5c>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d064      	beq.n	8001c42 <stdin_irq_dma+0xd4e>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a34      	ldr	r2, [pc, #208]	; (8001c54 <stdin_irq_dma+0xd60>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d05b      	beq.n	8001c3e <stdin_irq_dma+0xd4a>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a32      	ldr	r2, [pc, #200]	; (8001c58 <stdin_irq_dma+0xd64>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d052      	beq.n	8001c3a <stdin_irq_dma+0xd46>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a2f      	ldr	r2, [pc, #188]	; (8001c5c <stdin_irq_dma+0xd68>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d048      	beq.n	8001c34 <stdin_irq_dma+0xd40>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a2d      	ldr	r2, [pc, #180]	; (8001c60 <stdin_irq_dma+0xd6c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d03e      	beq.n	8001c2e <stdin_irq_dma+0xd3a>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a2a      	ldr	r2, [pc, #168]	; (8001c64 <stdin_irq_dma+0xd70>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d034      	beq.n	8001c28 <stdin_irq_dma+0xd34>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a28      	ldr	r2, [pc, #160]	; (8001c68 <stdin_irq_dma+0xd74>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d02a      	beq.n	8001c22 <stdin_irq_dma+0xd2e>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a25      	ldr	r2, [pc, #148]	; (8001c6c <stdin_irq_dma+0xd78>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d020      	beq.n	8001c1c <stdin_irq_dma+0xd28>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a23      	ldr	r2, [pc, #140]	; (8001c70 <stdin_irq_dma+0xd7c>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d016      	beq.n	8001c16 <stdin_irq_dma+0xd22>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a20      	ldr	r2, [pc, #128]	; (8001c74 <stdin_irq_dma+0xd80>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d00c      	beq.n	8001c10 <stdin_irq_dma+0xd1c>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a1e      	ldr	r2, [pc, #120]	; (8001c78 <stdin_irq_dma+0xd84>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d102      	bne.n	8001c0a <stdin_irq_dma+0xd16>
 8001c04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001c08:	e03b      	b.n	8001c82 <stdin_irq_dma+0xd8e>
 8001c0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c0e:	e038      	b.n	8001c82 <stdin_irq_dma+0xd8e>
 8001c10:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001c14:	e035      	b.n	8001c82 <stdin_irq_dma+0xd8e>
 8001c16:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001c1a:	e032      	b.n	8001c82 <stdin_irq_dma+0xd8e>
 8001c1c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001c20:	e02f      	b.n	8001c82 <stdin_irq_dma+0xd8e>
 8001c22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c26:	e02c      	b.n	8001c82 <stdin_irq_dma+0xd8e>
 8001c28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c2c:	e029      	b.n	8001c82 <stdin_irq_dma+0xd8e>
 8001c2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c32:	e026      	b.n	8001c82 <stdin_irq_dma+0xd8e>
 8001c34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c38:	e023      	b.n	8001c82 <stdin_irq_dma+0xd8e>
 8001c3a:	2308      	movs	r3, #8
 8001c3c:	e021      	b.n	8001c82 <stdin_irq_dma+0xd8e>
 8001c3e:	2308      	movs	r3, #8
 8001c40:	e01f      	b.n	8001c82 <stdin_irq_dma+0xd8e>
 8001c42:	2308      	movs	r3, #8
 8001c44:	e01d      	b.n	8001c82 <stdin_irq_dma+0xd8e>
 8001c46:	bf00      	nop
 8001c48:	40026058 	.word	0x40026058
 8001c4c:	40026010 	.word	0x40026010
 8001c50:	40026410 	.word	0x40026410
 8001c54:	40026070 	.word	0x40026070
 8001c58:	40026470 	.word	0x40026470
 8001c5c:	40026028 	.word	0x40026028
 8001c60:	40026428 	.word	0x40026428
 8001c64:	40026088 	.word	0x40026088
 8001c68:	40026488 	.word	0x40026488
 8001c6c:	40026040 	.word	0x40026040
 8001c70:	40026440 	.word	0x40026440
 8001c74:	400260a0 	.word	0x400260a0
 8001c78:	400264a0 	.word	0x400264a0
 8001c7c:	40026000 	.word	0x40026000
 8001c80:	2308      	movs	r3, #8
 8001c82:	4a7e      	ldr	r2, [pc, #504]	; (8001e7c <stdin_irq_dma+0xf88>)
 8001c84:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_FE_FLAG_INDEX(HDMA(in)));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	4b7b      	ldr	r3, [pc, #492]	; (8001e80 <stdin_irq_dma+0xf8c>)
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d974      	bls.n	8001d80 <stdin_irq_dma+0xe8c>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a79      	ldr	r2, [pc, #484]	; (8001e84 <stdin_irq_dma+0xf90>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d069      	beq.n	8001d78 <stdin_irq_dma+0xe84>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a76      	ldr	r2, [pc, #472]	; (8001e88 <stdin_irq_dma+0xf94>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d060      	beq.n	8001d74 <stdin_irq_dma+0xe80>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a74      	ldr	r2, [pc, #464]	; (8001e8c <stdin_irq_dma+0xf98>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d057      	beq.n	8001d70 <stdin_irq_dma+0xe7c>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a71      	ldr	r2, [pc, #452]	; (8001e90 <stdin_irq_dma+0xf9c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d04e      	beq.n	8001d6c <stdin_irq_dma+0xe78>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a6f      	ldr	r2, [pc, #444]	; (8001e94 <stdin_irq_dma+0xfa0>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d045      	beq.n	8001d68 <stdin_irq_dma+0xe74>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a6c      	ldr	r2, [pc, #432]	; (8001e98 <stdin_irq_dma+0xfa4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d03c      	beq.n	8001d64 <stdin_irq_dma+0xe70>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a6a      	ldr	r2, [pc, #424]	; (8001e9c <stdin_irq_dma+0xfa8>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d033      	beq.n	8001d60 <stdin_irq_dma+0xe6c>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a67      	ldr	r2, [pc, #412]	; (8001ea0 <stdin_irq_dma+0xfac>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d02a      	beq.n	8001d5c <stdin_irq_dma+0xe68>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a65      	ldr	r2, [pc, #404]	; (8001ea4 <stdin_irq_dma+0xfb0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d020      	beq.n	8001d56 <stdin_irq_dma+0xe62>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a62      	ldr	r2, [pc, #392]	; (8001ea8 <stdin_irq_dma+0xfb4>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d016      	beq.n	8001d50 <stdin_irq_dma+0xe5c>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a60      	ldr	r2, [pc, #384]	; (8001eac <stdin_irq_dma+0xfb8>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d00c      	beq.n	8001d4a <stdin_irq_dma+0xe56>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a5d      	ldr	r2, [pc, #372]	; (8001eb0 <stdin_irq_dma+0xfbc>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d102      	bne.n	8001d44 <stdin_irq_dma+0xe50>
 8001d3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d42:	e01a      	b.n	8001d7a <stdin_irq_dma+0xe86>
 8001d44:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d48:	e017      	b.n	8001d7a <stdin_irq_dma+0xe86>
 8001d4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d4e:	e014      	b.n	8001d7a <stdin_irq_dma+0xe86>
 8001d50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d54:	e011      	b.n	8001d7a <stdin_irq_dma+0xe86>
 8001d56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d5a:	e00e      	b.n	8001d7a <stdin_irq_dma+0xe86>
 8001d5c:	2340      	movs	r3, #64	; 0x40
 8001d5e:	e00c      	b.n	8001d7a <stdin_irq_dma+0xe86>
 8001d60:	2340      	movs	r3, #64	; 0x40
 8001d62:	e00a      	b.n	8001d7a <stdin_irq_dma+0xe86>
 8001d64:	2340      	movs	r3, #64	; 0x40
 8001d66:	e008      	b.n	8001d7a <stdin_irq_dma+0xe86>
 8001d68:	2340      	movs	r3, #64	; 0x40
 8001d6a:	e006      	b.n	8001d7a <stdin_irq_dma+0xe86>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e004      	b.n	8001d7a <stdin_irq_dma+0xe86>
 8001d70:	2301      	movs	r3, #1
 8001d72:	e002      	b.n	8001d7a <stdin_irq_dma+0xe86>
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <stdin_irq_dma+0xe86>
 8001d78:	2301      	movs	r3, #1
 8001d7a:	4a4e      	ldr	r2, [pc, #312]	; (8001eb4 <stdin_irq_dma+0xfc0>)
 8001d7c:	60d3      	str	r3, [r2, #12]
 8001d7e:	e1ac      	b.n	80020da <stdin_irq_dma+0x11e6>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4b4b      	ldr	r3, [pc, #300]	; (8001eb8 <stdin_irq_dma+0xfc4>)
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	f240 8095 	bls.w	8001ebc <stdin_irq_dma+0xfc8>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a3a      	ldr	r2, [pc, #232]	; (8001e84 <stdin_irq_dma+0xf90>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d069      	beq.n	8001e74 <stdin_irq_dma+0xf80>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a37      	ldr	r2, [pc, #220]	; (8001e88 <stdin_irq_dma+0xf94>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d060      	beq.n	8001e70 <stdin_irq_dma+0xf7c>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a35      	ldr	r2, [pc, #212]	; (8001e8c <stdin_irq_dma+0xf98>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d057      	beq.n	8001e6c <stdin_irq_dma+0xf78>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a32      	ldr	r2, [pc, #200]	; (8001e90 <stdin_irq_dma+0xf9c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d04e      	beq.n	8001e68 <stdin_irq_dma+0xf74>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a30      	ldr	r2, [pc, #192]	; (8001e94 <stdin_irq_dma+0xfa0>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d045      	beq.n	8001e64 <stdin_irq_dma+0xf70>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a2d      	ldr	r2, [pc, #180]	; (8001e98 <stdin_irq_dma+0xfa4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d03c      	beq.n	8001e60 <stdin_irq_dma+0xf6c>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a2b      	ldr	r2, [pc, #172]	; (8001e9c <stdin_irq_dma+0xfa8>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d033      	beq.n	8001e5c <stdin_irq_dma+0xf68>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a28      	ldr	r2, [pc, #160]	; (8001ea0 <stdin_irq_dma+0xfac>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d02a      	beq.n	8001e58 <stdin_irq_dma+0xf64>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a26      	ldr	r2, [pc, #152]	; (8001ea4 <stdin_irq_dma+0xfb0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d020      	beq.n	8001e52 <stdin_irq_dma+0xf5e>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a23      	ldr	r2, [pc, #140]	; (8001ea8 <stdin_irq_dma+0xfb4>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d016      	beq.n	8001e4c <stdin_irq_dma+0xf58>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a21      	ldr	r2, [pc, #132]	; (8001eac <stdin_irq_dma+0xfb8>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d00c      	beq.n	8001e46 <stdin_irq_dma+0xf52>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1e      	ldr	r2, [pc, #120]	; (8001eb0 <stdin_irq_dma+0xfbc>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d102      	bne.n	8001e40 <stdin_irq_dma+0xf4c>
 8001e3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e3e:	e01a      	b.n	8001e76 <stdin_irq_dma+0xf82>
 8001e40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e44:	e017      	b.n	8001e76 <stdin_irq_dma+0xf82>
 8001e46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e4a:	e014      	b.n	8001e76 <stdin_irq_dma+0xf82>
 8001e4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e50:	e011      	b.n	8001e76 <stdin_irq_dma+0xf82>
 8001e52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e56:	e00e      	b.n	8001e76 <stdin_irq_dma+0xf82>
 8001e58:	2340      	movs	r3, #64	; 0x40
 8001e5a:	e00c      	b.n	8001e76 <stdin_irq_dma+0xf82>
 8001e5c:	2340      	movs	r3, #64	; 0x40
 8001e5e:	e00a      	b.n	8001e76 <stdin_irq_dma+0xf82>
 8001e60:	2340      	movs	r3, #64	; 0x40
 8001e62:	e008      	b.n	8001e76 <stdin_irq_dma+0xf82>
 8001e64:	2340      	movs	r3, #64	; 0x40
 8001e66:	e006      	b.n	8001e76 <stdin_irq_dma+0xf82>
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e004      	b.n	8001e76 <stdin_irq_dma+0xf82>
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e002      	b.n	8001e76 <stdin_irq_dma+0xf82>
 8001e70:	2301      	movs	r3, #1
 8001e72:	e000      	b.n	8001e76 <stdin_irq_dma+0xf82>
 8001e74:	2301      	movs	r3, #1
 8001e76:	4a0f      	ldr	r2, [pc, #60]	; (8001eb4 <stdin_irq_dma+0xfc0>)
 8001e78:	6093      	str	r3, [r2, #8]
 8001e7a:	e12e      	b.n	80020da <stdin_irq_dma+0x11e6>
 8001e7c:	40026000 	.word	0x40026000
 8001e80:	40026458 	.word	0x40026458
 8001e84:	40026010 	.word	0x40026010
 8001e88:	40026410 	.word	0x40026410
 8001e8c:	40026070 	.word	0x40026070
 8001e90:	40026470 	.word	0x40026470
 8001e94:	40026028 	.word	0x40026028
 8001e98:	40026428 	.word	0x40026428
 8001e9c:	40026088 	.word	0x40026088
 8001ea0:	40026488 	.word	0x40026488
 8001ea4:	40026040 	.word	0x40026040
 8001ea8:	40026440 	.word	0x40026440
 8001eac:	400260a0 	.word	0x400260a0
 8001eb0:	400264a0 	.word	0x400264a0
 8001eb4:	40026400 	.word	0x40026400
 8001eb8:	400260b8 	.word	0x400260b8
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4b75      	ldr	r3, [pc, #468]	; (800209c <stdin_irq_dma+0x11a8>)
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d974      	bls.n	8001fb6 <stdin_irq_dma+0x10c2>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a72      	ldr	r2, [pc, #456]	; (80020a0 <stdin_irq_dma+0x11ac>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d069      	beq.n	8001fae <stdin_irq_dma+0x10ba>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a70      	ldr	r2, [pc, #448]	; (80020a4 <stdin_irq_dma+0x11b0>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d060      	beq.n	8001faa <stdin_irq_dma+0x10b6>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a6d      	ldr	r2, [pc, #436]	; (80020a8 <stdin_irq_dma+0x11b4>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d057      	beq.n	8001fa6 <stdin_irq_dma+0x10b2>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a6b      	ldr	r2, [pc, #428]	; (80020ac <stdin_irq_dma+0x11b8>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d04e      	beq.n	8001fa2 <stdin_irq_dma+0x10ae>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a68      	ldr	r2, [pc, #416]	; (80020b0 <stdin_irq_dma+0x11bc>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d045      	beq.n	8001f9e <stdin_irq_dma+0x10aa>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a66      	ldr	r2, [pc, #408]	; (80020b4 <stdin_irq_dma+0x11c0>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d03c      	beq.n	8001f9a <stdin_irq_dma+0x10a6>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a63      	ldr	r2, [pc, #396]	; (80020b8 <stdin_irq_dma+0x11c4>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d033      	beq.n	8001f96 <stdin_irq_dma+0x10a2>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a61      	ldr	r2, [pc, #388]	; (80020bc <stdin_irq_dma+0x11c8>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d02a      	beq.n	8001f92 <stdin_irq_dma+0x109e>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a5e      	ldr	r2, [pc, #376]	; (80020c0 <stdin_irq_dma+0x11cc>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d020      	beq.n	8001f8c <stdin_irq_dma+0x1098>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a5c      	ldr	r2, [pc, #368]	; (80020c4 <stdin_irq_dma+0x11d0>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d016      	beq.n	8001f86 <stdin_irq_dma+0x1092>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a59      	ldr	r2, [pc, #356]	; (80020c8 <stdin_irq_dma+0x11d4>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d00c      	beq.n	8001f80 <stdin_irq_dma+0x108c>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a57      	ldr	r2, [pc, #348]	; (80020cc <stdin_irq_dma+0x11d8>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d102      	bne.n	8001f7a <stdin_irq_dma+0x1086>
 8001f74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f78:	e01a      	b.n	8001fb0 <stdin_irq_dma+0x10bc>
 8001f7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f7e:	e017      	b.n	8001fb0 <stdin_irq_dma+0x10bc>
 8001f80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f84:	e014      	b.n	8001fb0 <stdin_irq_dma+0x10bc>
 8001f86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f8a:	e011      	b.n	8001fb0 <stdin_irq_dma+0x10bc>
 8001f8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f90:	e00e      	b.n	8001fb0 <stdin_irq_dma+0x10bc>
 8001f92:	2340      	movs	r3, #64	; 0x40
 8001f94:	e00c      	b.n	8001fb0 <stdin_irq_dma+0x10bc>
 8001f96:	2340      	movs	r3, #64	; 0x40
 8001f98:	e00a      	b.n	8001fb0 <stdin_irq_dma+0x10bc>
 8001f9a:	2340      	movs	r3, #64	; 0x40
 8001f9c:	e008      	b.n	8001fb0 <stdin_irq_dma+0x10bc>
 8001f9e:	2340      	movs	r3, #64	; 0x40
 8001fa0:	e006      	b.n	8001fb0 <stdin_irq_dma+0x10bc>
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e004      	b.n	8001fb0 <stdin_irq_dma+0x10bc>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e002      	b.n	8001fb0 <stdin_irq_dma+0x10bc>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <stdin_irq_dma+0x10bc>
 8001fae:	2301      	movs	r3, #1
 8001fb0:	4a47      	ldr	r2, [pc, #284]	; (80020d0 <stdin_irq_dma+0x11dc>)
 8001fb2:	60d3      	str	r3, [r2, #12]
 8001fb4:	e091      	b.n	80020da <stdin_irq_dma+0x11e6>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a38      	ldr	r2, [pc, #224]	; (80020a0 <stdin_irq_dma+0x11ac>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	f000 8087 	beq.w	80020d4 <stdin_irq_dma+0x11e0>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a35      	ldr	r2, [pc, #212]	; (80020a4 <stdin_irq_dma+0x11b0>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d060      	beq.n	8002096 <stdin_irq_dma+0x11a2>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a32      	ldr	r2, [pc, #200]	; (80020a8 <stdin_irq_dma+0x11b4>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d057      	beq.n	8002092 <stdin_irq_dma+0x119e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a30      	ldr	r2, [pc, #192]	; (80020ac <stdin_irq_dma+0x11b8>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d04e      	beq.n	800208e <stdin_irq_dma+0x119a>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a2d      	ldr	r2, [pc, #180]	; (80020b0 <stdin_irq_dma+0x11bc>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d045      	beq.n	800208a <stdin_irq_dma+0x1196>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a2b      	ldr	r2, [pc, #172]	; (80020b4 <stdin_irq_dma+0x11c0>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d03c      	beq.n	8002086 <stdin_irq_dma+0x1192>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a28      	ldr	r2, [pc, #160]	; (80020b8 <stdin_irq_dma+0x11c4>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d033      	beq.n	8002082 <stdin_irq_dma+0x118e>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a26      	ldr	r2, [pc, #152]	; (80020bc <stdin_irq_dma+0x11c8>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d02a      	beq.n	800207e <stdin_irq_dma+0x118a>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a23      	ldr	r2, [pc, #140]	; (80020c0 <stdin_irq_dma+0x11cc>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d020      	beq.n	8002078 <stdin_irq_dma+0x1184>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a21      	ldr	r2, [pc, #132]	; (80020c4 <stdin_irq_dma+0x11d0>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d016      	beq.n	8002072 <stdin_irq_dma+0x117e>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a1e      	ldr	r2, [pc, #120]	; (80020c8 <stdin_irq_dma+0x11d4>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d00c      	beq.n	800206c <stdin_irq_dma+0x1178>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a1c      	ldr	r2, [pc, #112]	; (80020cc <stdin_irq_dma+0x11d8>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d102      	bne.n	8002066 <stdin_irq_dma+0x1172>
 8002060:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002064:	e037      	b.n	80020d6 <stdin_irq_dma+0x11e2>
 8002066:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800206a:	e034      	b.n	80020d6 <stdin_irq_dma+0x11e2>
 800206c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002070:	e031      	b.n	80020d6 <stdin_irq_dma+0x11e2>
 8002072:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002076:	e02e      	b.n	80020d6 <stdin_irq_dma+0x11e2>
 8002078:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800207c:	e02b      	b.n	80020d6 <stdin_irq_dma+0x11e2>
 800207e:	2340      	movs	r3, #64	; 0x40
 8002080:	e029      	b.n	80020d6 <stdin_irq_dma+0x11e2>
 8002082:	2340      	movs	r3, #64	; 0x40
 8002084:	e027      	b.n	80020d6 <stdin_irq_dma+0x11e2>
 8002086:	2340      	movs	r3, #64	; 0x40
 8002088:	e025      	b.n	80020d6 <stdin_irq_dma+0x11e2>
 800208a:	2340      	movs	r3, #64	; 0x40
 800208c:	e023      	b.n	80020d6 <stdin_irq_dma+0x11e2>
 800208e:	2301      	movs	r3, #1
 8002090:	e021      	b.n	80020d6 <stdin_irq_dma+0x11e2>
 8002092:	2301      	movs	r3, #1
 8002094:	e01f      	b.n	80020d6 <stdin_irq_dma+0x11e2>
 8002096:	2301      	movs	r3, #1
 8002098:	e01d      	b.n	80020d6 <stdin_irq_dma+0x11e2>
 800209a:	bf00      	nop
 800209c:	40026058 	.word	0x40026058
 80020a0:	40026010 	.word	0x40026010
 80020a4:	40026410 	.word	0x40026410
 80020a8:	40026070 	.word	0x40026070
 80020ac:	40026470 	.word	0x40026470
 80020b0:	40026028 	.word	0x40026028
 80020b4:	40026428 	.word	0x40026428
 80020b8:	40026088 	.word	0x40026088
 80020bc:	40026488 	.word	0x40026488
 80020c0:	40026040 	.word	0x40026040
 80020c4:	40026440 	.word	0x40026440
 80020c8:	400260a0 	.word	0x400260a0
 80020cc:	400264a0 	.word	0x400264a0
 80020d0:	40026000 	.word	0x40026000
 80020d4:	2301      	movs	r3, #1
 80020d6:	4a82      	ldr	r2, [pc, #520]	; (80022e0 <stdin_irq_dma+0x13ec>)
 80020d8:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_DME_FLAG_INDEX(HDMA(in)));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	461a      	mov	r2, r3
 80020e4:	4b7f      	ldr	r3, [pc, #508]	; (80022e4 <stdin_irq_dma+0x13f0>)
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d978      	bls.n	80021dc <stdin_irq_dma+0x12e8>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a7d      	ldr	r2, [pc, #500]	; (80022e8 <stdin_irq_dma+0x13f4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d06d      	beq.n	80021d4 <stdin_irq_dma+0x12e0>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a7a      	ldr	r2, [pc, #488]	; (80022ec <stdin_irq_dma+0x13f8>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d064      	beq.n	80021d0 <stdin_irq_dma+0x12dc>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a78      	ldr	r2, [pc, #480]	; (80022f0 <stdin_irq_dma+0x13fc>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d05b      	beq.n	80021cc <stdin_irq_dma+0x12d8>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a75      	ldr	r2, [pc, #468]	; (80022f4 <stdin_irq_dma+0x1400>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d052      	beq.n	80021c8 <stdin_irq_dma+0x12d4>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a73      	ldr	r2, [pc, #460]	; (80022f8 <stdin_irq_dma+0x1404>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d048      	beq.n	80021c2 <stdin_irq_dma+0x12ce>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a70      	ldr	r2, [pc, #448]	; (80022fc <stdin_irq_dma+0x1408>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d03e      	beq.n	80021bc <stdin_irq_dma+0x12c8>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a6e      	ldr	r2, [pc, #440]	; (8002300 <stdin_irq_dma+0x140c>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d034      	beq.n	80021b6 <stdin_irq_dma+0x12c2>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a6b      	ldr	r2, [pc, #428]	; (8002304 <stdin_irq_dma+0x1410>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d02a      	beq.n	80021b0 <stdin_irq_dma+0x12bc>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a69      	ldr	r2, [pc, #420]	; (8002308 <stdin_irq_dma+0x1414>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d020      	beq.n	80021aa <stdin_irq_dma+0x12b6>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a66      	ldr	r2, [pc, #408]	; (800230c <stdin_irq_dma+0x1418>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d016      	beq.n	80021a4 <stdin_irq_dma+0x12b0>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a64      	ldr	r2, [pc, #400]	; (8002310 <stdin_irq_dma+0x141c>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d00c      	beq.n	800219e <stdin_irq_dma+0x12aa>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a61      	ldr	r2, [pc, #388]	; (8002314 <stdin_irq_dma+0x1420>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d102      	bne.n	8002198 <stdin_irq_dma+0x12a4>
 8002192:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002196:	e01e      	b.n	80021d6 <stdin_irq_dma+0x12e2>
 8002198:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800219c:	e01b      	b.n	80021d6 <stdin_irq_dma+0x12e2>
 800219e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021a2:	e018      	b.n	80021d6 <stdin_irq_dma+0x12e2>
 80021a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021a8:	e015      	b.n	80021d6 <stdin_irq_dma+0x12e2>
 80021aa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021ae:	e012      	b.n	80021d6 <stdin_irq_dma+0x12e2>
 80021b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021b4:	e00f      	b.n	80021d6 <stdin_irq_dma+0x12e2>
 80021b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ba:	e00c      	b.n	80021d6 <stdin_irq_dma+0x12e2>
 80021bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021c0:	e009      	b.n	80021d6 <stdin_irq_dma+0x12e2>
 80021c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021c6:	e006      	b.n	80021d6 <stdin_irq_dma+0x12e2>
 80021c8:	2304      	movs	r3, #4
 80021ca:	e004      	b.n	80021d6 <stdin_irq_dma+0x12e2>
 80021cc:	2304      	movs	r3, #4
 80021ce:	e002      	b.n	80021d6 <stdin_irq_dma+0x12e2>
 80021d0:	2304      	movs	r3, #4
 80021d2:	e000      	b.n	80021d6 <stdin_irq_dma+0x12e2>
 80021d4:	2304      	movs	r3, #4
 80021d6:	4a50      	ldr	r2, [pc, #320]	; (8002318 <stdin_irq_dma+0x1424>)
 80021d8:	60d3      	str	r3, [r2, #12]
 80021da:	e19a      	b.n	8002512 <stdin_irq_dma+0x161e>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	461a      	mov	r2, r3
 80021e6:	4b4d      	ldr	r3, [pc, #308]	; (800231c <stdin_irq_dma+0x1428>)
 80021e8:	429a      	cmp	r2, r3
 80021ea:	f240 8099 	bls.w	8002320 <stdin_irq_dma+0x142c>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a3c      	ldr	r2, [pc, #240]	; (80022e8 <stdin_irq_dma+0x13f4>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d06d      	beq.n	80022d8 <stdin_irq_dma+0x13e4>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a39      	ldr	r2, [pc, #228]	; (80022ec <stdin_irq_dma+0x13f8>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d064      	beq.n	80022d4 <stdin_irq_dma+0x13e0>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a37      	ldr	r2, [pc, #220]	; (80022f0 <stdin_irq_dma+0x13fc>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d05b      	beq.n	80022d0 <stdin_irq_dma+0x13dc>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a34      	ldr	r2, [pc, #208]	; (80022f4 <stdin_irq_dma+0x1400>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d052      	beq.n	80022cc <stdin_irq_dma+0x13d8>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a32      	ldr	r2, [pc, #200]	; (80022f8 <stdin_irq_dma+0x1404>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d048      	beq.n	80022c6 <stdin_irq_dma+0x13d2>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a2f      	ldr	r2, [pc, #188]	; (80022fc <stdin_irq_dma+0x1408>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d03e      	beq.n	80022c0 <stdin_irq_dma+0x13cc>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a2d      	ldr	r2, [pc, #180]	; (8002300 <stdin_irq_dma+0x140c>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d034      	beq.n	80022ba <stdin_irq_dma+0x13c6>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a2a      	ldr	r2, [pc, #168]	; (8002304 <stdin_irq_dma+0x1410>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d02a      	beq.n	80022b4 <stdin_irq_dma+0x13c0>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a28      	ldr	r2, [pc, #160]	; (8002308 <stdin_irq_dma+0x1414>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d020      	beq.n	80022ae <stdin_irq_dma+0x13ba>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a25      	ldr	r2, [pc, #148]	; (800230c <stdin_irq_dma+0x1418>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d016      	beq.n	80022a8 <stdin_irq_dma+0x13b4>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a23      	ldr	r2, [pc, #140]	; (8002310 <stdin_irq_dma+0x141c>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d00c      	beq.n	80022a2 <stdin_irq_dma+0x13ae>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a20      	ldr	r2, [pc, #128]	; (8002314 <stdin_irq_dma+0x1420>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d102      	bne.n	800229c <stdin_irq_dma+0x13a8>
 8002296:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800229a:	e01e      	b.n	80022da <stdin_irq_dma+0x13e6>
 800229c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022a0:	e01b      	b.n	80022da <stdin_irq_dma+0x13e6>
 80022a2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80022a6:	e018      	b.n	80022da <stdin_irq_dma+0x13e6>
 80022a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80022ac:	e015      	b.n	80022da <stdin_irq_dma+0x13e6>
 80022ae:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80022b2:	e012      	b.n	80022da <stdin_irq_dma+0x13e6>
 80022b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022b8:	e00f      	b.n	80022da <stdin_irq_dma+0x13e6>
 80022ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022be:	e00c      	b.n	80022da <stdin_irq_dma+0x13e6>
 80022c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022c4:	e009      	b.n	80022da <stdin_irq_dma+0x13e6>
 80022c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ca:	e006      	b.n	80022da <stdin_irq_dma+0x13e6>
 80022cc:	2304      	movs	r3, #4
 80022ce:	e004      	b.n	80022da <stdin_irq_dma+0x13e6>
 80022d0:	2304      	movs	r3, #4
 80022d2:	e002      	b.n	80022da <stdin_irq_dma+0x13e6>
 80022d4:	2304      	movs	r3, #4
 80022d6:	e000      	b.n	80022da <stdin_irq_dma+0x13e6>
 80022d8:	2304      	movs	r3, #4
 80022da:	4a0f      	ldr	r2, [pc, #60]	; (8002318 <stdin_irq_dma+0x1424>)
 80022dc:	6093      	str	r3, [r2, #8]
 80022de:	e118      	b.n	8002512 <stdin_irq_dma+0x161e>
 80022e0:	40026000 	.word	0x40026000
 80022e4:	40026458 	.word	0x40026458
 80022e8:	40026010 	.word	0x40026010
 80022ec:	40026410 	.word	0x40026410
 80022f0:	40026070 	.word	0x40026070
 80022f4:	40026470 	.word	0x40026470
 80022f8:	40026028 	.word	0x40026028
 80022fc:	40026428 	.word	0x40026428
 8002300:	40026088 	.word	0x40026088
 8002304:	40026488 	.word	0x40026488
 8002308:	40026040 	.word	0x40026040
 800230c:	40026440 	.word	0x40026440
 8002310:	400260a0 	.word	0x400260a0
 8002314:	400264a0 	.word	0x400264a0
 8002318:	40026400 	.word	0x40026400
 800231c:	400260b8 	.word	0x400260b8
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	4b80      	ldr	r3, [pc, #512]	; (800252c <stdin_irq_dma+0x1638>)
 800232c:	429a      	cmp	r2, r3
 800232e:	d978      	bls.n	8002422 <stdin_irq_dma+0x152e>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a7d      	ldr	r2, [pc, #500]	; (8002530 <stdin_irq_dma+0x163c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d06d      	beq.n	800241a <stdin_irq_dma+0x1526>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a7b      	ldr	r2, [pc, #492]	; (8002534 <stdin_irq_dma+0x1640>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d064      	beq.n	8002416 <stdin_irq_dma+0x1522>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a78      	ldr	r2, [pc, #480]	; (8002538 <stdin_irq_dma+0x1644>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d05b      	beq.n	8002412 <stdin_irq_dma+0x151e>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a76      	ldr	r2, [pc, #472]	; (800253c <stdin_irq_dma+0x1648>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d052      	beq.n	800240e <stdin_irq_dma+0x151a>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a73      	ldr	r2, [pc, #460]	; (8002540 <stdin_irq_dma+0x164c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d048      	beq.n	8002408 <stdin_irq_dma+0x1514>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a71      	ldr	r2, [pc, #452]	; (8002544 <stdin_irq_dma+0x1650>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d03e      	beq.n	8002402 <stdin_irq_dma+0x150e>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a6e      	ldr	r2, [pc, #440]	; (8002548 <stdin_irq_dma+0x1654>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d034      	beq.n	80023fc <stdin_irq_dma+0x1508>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a6c      	ldr	r2, [pc, #432]	; (800254c <stdin_irq_dma+0x1658>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d02a      	beq.n	80023f6 <stdin_irq_dma+0x1502>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a69      	ldr	r2, [pc, #420]	; (8002550 <stdin_irq_dma+0x165c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d020      	beq.n	80023f0 <stdin_irq_dma+0x14fc>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a67      	ldr	r2, [pc, #412]	; (8002554 <stdin_irq_dma+0x1660>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d016      	beq.n	80023ea <stdin_irq_dma+0x14f6>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a64      	ldr	r2, [pc, #400]	; (8002558 <stdin_irq_dma+0x1664>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d00c      	beq.n	80023e4 <stdin_irq_dma+0x14f0>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a62      	ldr	r2, [pc, #392]	; (800255c <stdin_irq_dma+0x1668>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d102      	bne.n	80023de <stdin_irq_dma+0x14ea>
 80023d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80023dc:	e01e      	b.n	800241c <stdin_irq_dma+0x1528>
 80023de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023e2:	e01b      	b.n	800241c <stdin_irq_dma+0x1528>
 80023e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80023e8:	e018      	b.n	800241c <stdin_irq_dma+0x1528>
 80023ea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80023ee:	e015      	b.n	800241c <stdin_irq_dma+0x1528>
 80023f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80023f4:	e012      	b.n	800241c <stdin_irq_dma+0x1528>
 80023f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023fa:	e00f      	b.n	800241c <stdin_irq_dma+0x1528>
 80023fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002400:	e00c      	b.n	800241c <stdin_irq_dma+0x1528>
 8002402:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002406:	e009      	b.n	800241c <stdin_irq_dma+0x1528>
 8002408:	f44f 7380 	mov.w	r3, #256	; 0x100
 800240c:	e006      	b.n	800241c <stdin_irq_dma+0x1528>
 800240e:	2304      	movs	r3, #4
 8002410:	e004      	b.n	800241c <stdin_irq_dma+0x1528>
 8002412:	2304      	movs	r3, #4
 8002414:	e002      	b.n	800241c <stdin_irq_dma+0x1528>
 8002416:	2304      	movs	r3, #4
 8002418:	e000      	b.n	800241c <stdin_irq_dma+0x1528>
 800241a:	2304      	movs	r3, #4
 800241c:	4a50      	ldr	r2, [pc, #320]	; (8002560 <stdin_irq_dma+0x166c>)
 800241e:	60d3      	str	r3, [r2, #12]
 8002420:	e077      	b.n	8002512 <stdin_irq_dma+0x161e>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a41      	ldr	r2, [pc, #260]	; (8002530 <stdin_irq_dma+0x163c>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d06d      	beq.n	800250c <stdin_irq_dma+0x1618>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a3e      	ldr	r2, [pc, #248]	; (8002534 <stdin_irq_dma+0x1640>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d064      	beq.n	8002508 <stdin_irq_dma+0x1614>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a3c      	ldr	r2, [pc, #240]	; (8002538 <stdin_irq_dma+0x1644>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d05b      	beq.n	8002504 <stdin_irq_dma+0x1610>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a39      	ldr	r2, [pc, #228]	; (800253c <stdin_irq_dma+0x1648>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d052      	beq.n	8002500 <stdin_irq_dma+0x160c>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a37      	ldr	r2, [pc, #220]	; (8002540 <stdin_irq_dma+0x164c>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d048      	beq.n	80024fa <stdin_irq_dma+0x1606>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a34      	ldr	r2, [pc, #208]	; (8002544 <stdin_irq_dma+0x1650>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d03e      	beq.n	80024f4 <stdin_irq_dma+0x1600>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a32      	ldr	r2, [pc, #200]	; (8002548 <stdin_irq_dma+0x1654>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d034      	beq.n	80024ee <stdin_irq_dma+0x15fa>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a2f      	ldr	r2, [pc, #188]	; (800254c <stdin_irq_dma+0x1658>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d02a      	beq.n	80024e8 <stdin_irq_dma+0x15f4>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a2d      	ldr	r2, [pc, #180]	; (8002550 <stdin_irq_dma+0x165c>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d020      	beq.n	80024e2 <stdin_irq_dma+0x15ee>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a2a      	ldr	r2, [pc, #168]	; (8002554 <stdin_irq_dma+0x1660>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d016      	beq.n	80024dc <stdin_irq_dma+0x15e8>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a28      	ldr	r2, [pc, #160]	; (8002558 <stdin_irq_dma+0x1664>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d00c      	beq.n	80024d6 <stdin_irq_dma+0x15e2>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a25      	ldr	r2, [pc, #148]	; (800255c <stdin_irq_dma+0x1668>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d102      	bne.n	80024d0 <stdin_irq_dma+0x15dc>
 80024ca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80024ce:	e01e      	b.n	800250e <stdin_irq_dma+0x161a>
 80024d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024d4:	e01b      	b.n	800250e <stdin_irq_dma+0x161a>
 80024d6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80024da:	e018      	b.n	800250e <stdin_irq_dma+0x161a>
 80024dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80024e0:	e015      	b.n	800250e <stdin_irq_dma+0x161a>
 80024e2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80024e6:	e012      	b.n	800250e <stdin_irq_dma+0x161a>
 80024e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024ec:	e00f      	b.n	800250e <stdin_irq_dma+0x161a>
 80024ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024f2:	e00c      	b.n	800250e <stdin_irq_dma+0x161a>
 80024f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024f8:	e009      	b.n	800250e <stdin_irq_dma+0x161a>
 80024fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024fe:	e006      	b.n	800250e <stdin_irq_dma+0x161a>
 8002500:	2304      	movs	r3, #4
 8002502:	e004      	b.n	800250e <stdin_irq_dma+0x161a>
 8002504:	2304      	movs	r3, #4
 8002506:	e002      	b.n	800250e <stdin_irq_dma+0x161a>
 8002508:	2304      	movs	r3, #4
 800250a:	e000      	b.n	800250e <stdin_irq_dma+0x161a>
 800250c:	2304      	movs	r3, #4
 800250e:	4a14      	ldr	r2, [pc, #80]	; (8002560 <stdin_irq_dma+0x166c>)
 8002510:	6093      	str	r3, [r2, #8]
    HAL_UART_Receive_DMA(in->huart, in->buffer, in->size);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6818      	ldr	r0, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6899      	ldr	r1, [r3, #8]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	899b      	ldrh	r3, [r3, #12]
 800251e:	461a      	mov	r2, r3
 8002520:	f004 f875 	bl	800660e <HAL_UART_Receive_DMA>
}
 8002524:	bf00      	nop
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40026058 	.word	0x40026058
 8002530:	40026010 	.word	0x40026010
 8002534:	40026410 	.word	0x40026410
 8002538:	40026070 	.word	0x40026070
 800253c:	40026470 	.word	0x40026470
 8002540:	40026028 	.word	0x40026028
 8002544:	40026428 	.word	0x40026428
 8002548:	40026088 	.word	0x40026088
 800254c:	40026488 	.word	0x40026488
 8002550:	40026040 	.word	0x40026040
 8002554:	40026440 	.word	0x40026440
 8002558:	400260a0 	.word	0x400260a0
 800255c:	400264a0 	.word	0x400264a0
 8002560:	40026000 	.word	0x40026000

08002564 <stdin_irq_uart>:

void stdin_irq_uart(stdin_t *in)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  if (__HAL_UART_GET_FLAG(in->huart, UART_FLAG_IDLE))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0310 	and.w	r3, r3, #16
 8002578:	2b10      	cmp	r3, #16
 800257a:	d10f      	bne.n	800259c <stdin_irq_uart+0x38>
  {
    __HAL_UART_CLEAR_IDLEFLAG(in->huart);
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
    check_buffer(in);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f804 	bl	80025a4 <check_buffer>
  }
}
 800259c:	bf00      	nop
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <check_buffer>:

/* Private function implementations
 * --------------------------------------------*/
static void check_buffer(stdin_t *in)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint16_t pos;
  uint16_t new;

  /* Calculate current position in buffer */
  new = __HAL_DMA_GET_COUNTER(HDMA(in));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	81fb      	strh	r3, [r7, #14]
  pos = in->size - new;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	899a      	ldrh	r2, [r3, #12]
 80025bc:	89fb      	ldrh	r3, [r7, #14]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	81bb      	strh	r3, [r7, #12]

  /* Check change in received data */
  if (pos != in->pos)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	89db      	ldrh	r3, [r3, #14]
 80025c6:	89ba      	ldrh	r2, [r7, #12]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d025      	beq.n	8002618 <check_buffer+0x74>
  {
    if (pos > in->pos)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	89db      	ldrh	r3, [r3, #14]
 80025d0:	89ba      	ldrh	r2, [r7, #12]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d90b      	bls.n	80025ee <check_buffer+0x4a>
      /* Current position is over previous one */
      /* We are in "linear" mode */
      /* Process data directly by subtracting "pointers" */
      fill_buffer(in, in->pos, pos - in->pos);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	89d9      	ldrh	r1, [r3, #14]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	89db      	ldrh	r3, [r3, #14]
 80025de:	89ba      	ldrh	r2, [r7, #12]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	461a      	mov	r2, r3
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f824 	bl	8002634 <fill_buffer>
 80025ec:	e014      	b.n	8002618 <check_buffer+0x74>
    else
    {
      /* We are in "overflow" mode */
      /* First process data to the end of buffer */
      fill_buffer(in, in->pos, in->size - in->pos);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	89d9      	ldrh	r1, [r3, #14]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	899a      	ldrh	r2, [r3, #12]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	89db      	ldrh	r3, [r3, #14]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	461a      	mov	r2, r3
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f817 	bl	8002634 <fill_buffer>
      /* Check and continue with beginning of buffer */
      if (pos > 0)
 8002606:	89bb      	ldrh	r3, [r7, #12]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <check_buffer+0x74>
        fill_buffer(in, 0, pos);
 800260c:	89bb      	ldrh	r3, [r7, #12]
 800260e:	461a      	mov	r2, r3
 8002610:	2100      	movs	r1, #0
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f80e 	bl	8002634 <fill_buffer>
    }
  }

  /* Check and manually update if we reached end of buffer */
  in->pos = (pos == in->size) ? 0 : pos;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	899b      	ldrh	r3, [r3, #12]
 800261c:	89ba      	ldrh	r2, [r7, #12]
 800261e:	429a      	cmp	r2, r3
 8002620:	d001      	beq.n	8002626 <check_buffer+0x82>
 8002622:	89ba      	ldrh	r2, [r7, #12]
 8002624:	e000      	b.n	8002628 <check_buffer+0x84>
 8002626:	2200      	movs	r2, #0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	81da      	strh	r2, [r3, #14]
}
 800262c:	bf00      	nop
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <fill_buffer>:

static void fill_buffer(stdin_t *in, uint16_t pos, uint16_t size)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	807b      	strh	r3, [r7, #2]
 8002640:	4613      	mov	r3, r2
 8002642:	803b      	strh	r3, [r7, #0]
  if (NULL == in->callback)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d009      	beq.n	8002660 <fill_buffer+0x2c>
    return;

  in->callback(&in->buffer[pos], size);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6891      	ldr	r1, [r2, #8]
 8002654:	887a      	ldrh	r2, [r7, #2]
 8002656:	440a      	add	r2, r1
 8002658:	8839      	ldrh	r1, [r7, #0]
 800265a:	4610      	mov	r0, r2
 800265c:	4798      	blx	r3
 800265e:	e000      	b.n	8002662 <fill_buffer+0x2e>
    return;
 8002660:	bf00      	nop
}
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_MspInit>:

extern DMA_HandleTypeDef hdma_usart2_rx;


void HAL_MspInit(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	607b      	str	r3, [r7, #4]
 8002672:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <HAL_MspInit+0x4c>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002676:	4a0f      	ldr	r2, [pc, #60]	; (80026b4 <HAL_MspInit+0x4c>)
 8002678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800267c:	6453      	str	r3, [r2, #68]	; 0x44
 800267e:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <HAL_MspInit+0x4c>)
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002686:	607b      	str	r3, [r7, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	603b      	str	r3, [r7, #0]
 800268e:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <HAL_MspInit+0x4c>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	4a08      	ldr	r2, [pc, #32]	; (80026b4 <HAL_MspInit+0x4c>)
 8002694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002698:	6413      	str	r3, [r2, #64]	; 0x40
 800269a:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <HAL_MspInit+0x4c>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a2:	603b      	str	r3, [r7, #0]
 80026a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80026a6:	2007      	movs	r0, #7
 80026a8:	f000 fb86 	bl	8002db8 <HAL_NVIC_SetPriorityGrouping>
}
 80026ac:	bf00      	nop
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40023800 	.word	0x40023800

080026b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08a      	sub	sp, #40	; 0x28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c0:	f107 0314 	add.w	r3, r7, #20
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
 80026ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a34      	ldr	r2, [pc, #208]	; (80027a8 <HAL_UART_MspInit+0xf0>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d162      	bne.n	80027a0 <HAL_UART_MspInit+0xe8>
  {
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	4b33      	ldr	r3, [pc, #204]	; (80027ac <HAL_UART_MspInit+0xf4>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	4a32      	ldr	r2, [pc, #200]	; (80027ac <HAL_UART_MspInit+0xf4>)
 80026e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ea:	4b30      	ldr	r3, [pc, #192]	; (80027ac <HAL_UART_MspInit+0xf4>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	4b2c      	ldr	r3, [pc, #176]	; (80027ac <HAL_UART_MspInit+0xf4>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	4a2b      	ldr	r2, [pc, #172]	; (80027ac <HAL_UART_MspInit+0xf4>)
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	6313      	str	r3, [r2, #48]	; 0x30
 8002706:	4b29      	ldr	r3, [pc, #164]	; (80027ac <HAL_UART_MspInit+0xf4>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin 		= USART_TX_Pin|USART_RX_Pin;
 8002712:	230c      	movs	r3, #12
 8002714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 8002716:	2302      	movs	r3, #2
 8002718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 800271e:	2303      	movs	r3, #3
 8002720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate 	= GPIO_AF7_USART2;
 8002722:	2307      	movs	r3, #7
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002726:	f107 0314 	add.w	r3, r7, #20
 800272a:	4619      	mov	r1, r3
 800272c:	4820      	ldr	r0, [pc, #128]	; (80027b0 <HAL_UART_MspInit+0xf8>)
 800272e:	f000 ff95 	bl	800365c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance 				= DMA1_Stream5;
 8002732:	4b20      	ldr	r3, [pc, #128]	; (80027b4 <HAL_UART_MspInit+0xfc>)
 8002734:	4a20      	ldr	r2, [pc, #128]	; (80027b8 <HAL_UART_MspInit+0x100>)
 8002736:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel 			= DMA_CHANNEL_4;
 8002738:	4b1e      	ldr	r3, [pc, #120]	; (80027b4 <HAL_UART_MspInit+0xfc>)
 800273a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800273e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction 			= DMA_PERIPH_TO_MEMORY;
 8002740:	4b1c      	ldr	r3, [pc, #112]	; (80027b4 <HAL_UART_MspInit+0xfc>)
 8002742:	2200      	movs	r2, #0
 8002744:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8002746:	4b1b      	ldr	r3, [pc, #108]	; (80027b4 <HAL_UART_MspInit+0xfc>)
 8002748:	2200      	movs	r2, #0
 800274a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_UART_MspInit+0xfc>)
 800274e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002752:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002754:	4b17      	ldr	r3, [pc, #92]	; (80027b4 <HAL_UART_MspInit+0xfc>)
 8002756:	2200      	movs	r2, #0
 8002758:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 800275a:	4b16      	ldr	r3, [pc, #88]	; (80027b4 <HAL_UART_MspInit+0xfc>)
 800275c:	2200      	movs	r2, #0
 800275e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode 				= DMA_CIRCULAR;
 8002760:	4b14      	ldr	r3, [pc, #80]	; (80027b4 <HAL_UART_MspInit+0xfc>)
 8002762:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002766:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority 			= DMA_PRIORITY_LOW;
 8002768:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <HAL_UART_MspInit+0xfc>)
 800276a:	2200      	movs	r2, #0
 800276c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 800276e:	4b11      	ldr	r3, [pc, #68]	; (80027b4 <HAL_UART_MspInit+0xfc>)
 8002770:	2200      	movs	r2, #0
 8002772:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002774:	480f      	ldr	r0, [pc, #60]	; (80027b4 <HAL_UART_MspInit+0xfc>)
 8002776:	f000 fb61 	bl	8002e3c <HAL_DMA_Init>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002780:	f7fe fac8 	bl	8000d14 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a0b      	ldr	r2, [pc, #44]	; (80027b4 <HAL_UART_MspInit+0xfc>)
 8002788:	639a      	str	r2, [r3, #56]	; 0x38
 800278a:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <HAL_UART_MspInit+0xfc>)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002790:	2200      	movs	r2, #0
 8002792:	2100      	movs	r1, #0
 8002794:	2026      	movs	r0, #38	; 0x26
 8002796:	f000 fb1a 	bl	8002dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800279a:	2026      	movs	r0, #38	; 0x26
 800279c:	f000 fb33 	bl	8002e06 <HAL_NVIC_EnableIRQ>
  }

}
 80027a0:	bf00      	nop
 80027a2:	3728      	adds	r7, #40	; 0x28
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40004400 	.word	0x40004400
 80027ac:	40023800 	.word	0x40023800
 80027b0:	40020000 	.word	0x40020000
 80027b4:	200000f0 	.word	0x200000f0
 80027b8:	40026088 	.word	0x40026088

080027bc <HAL_I2C_MspInit>:
  *           - NVIC configuration for DMA interrupt request enable
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b08a      	sub	sp, #40	; 0x28
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /*##-1- Enable GPIO Clocks #################################################*/
  /* Enable GPIO TX/RX clock */
  I2Cx_SCL_GPIO_CLK_ENABLE();
 80027c4:	2300      	movs	r3, #0
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	4b2b      	ldr	r3, [pc, #172]	; (8002878 <HAL_I2C_MspInit+0xbc>)
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	4a2a      	ldr	r2, [pc, #168]	; (8002878 <HAL_I2C_MspInit+0xbc>)
 80027ce:	f043 0302 	orr.w	r3, r3, #2
 80027d2:	6313      	str	r3, [r2, #48]	; 0x30
 80027d4:	4b28      	ldr	r3, [pc, #160]	; (8002878 <HAL_I2C_MspInit+0xbc>)
 80027d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	613b      	str	r3, [r7, #16]
 80027de:	693b      	ldr	r3, [r7, #16]
  I2Cx_SDA_GPIO_CLK_ENABLE();
 80027e0:	2300      	movs	r3, #0
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	4b24      	ldr	r3, [pc, #144]	; (8002878 <HAL_I2C_MspInit+0xbc>)
 80027e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e8:	4a23      	ldr	r2, [pc, #140]	; (8002878 <HAL_I2C_MspInit+0xbc>)
 80027ea:	f043 0302 	orr.w	r3, r3, #2
 80027ee:	6313      	str	r3, [r2, #48]	; 0x30
 80027f0:	4b21      	ldr	r3, [pc, #132]	; (8002878 <HAL_I2C_MspInit+0xbc>)
 80027f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* I2C TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
 80027fc:	2340      	movs	r3, #64	; 0x40
 80027fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8002800:	2312      	movs	r3, #18
 8002802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8002804:	2301      	movs	r3, #1
 8002806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8002808:	2302      	movs	r3, #2
 800280a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
 800280c:	2304      	movs	r3, #4
 800280e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002810:	f107 0314 	add.w	r3, r7, #20
 8002814:	4619      	mov	r1, r3
 8002816:	4819      	ldr	r0, [pc, #100]	; (800287c <HAL_I2C_MspInit+0xc0>)
 8002818:	f000 ff20 	bl	800365c <HAL_GPIO_Init>

  /* I2C RX GPIO pin configuration  */
  GPIO_InitStruct.Pin 		= I2Cx_SDA_PIN;
 800281c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = I2Cx_SDA_AF;
 8002822:	2304      	movs	r3, #4
 8002824:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002826:	f107 0314 	add.w	r3, r7, #20
 800282a:	4619      	mov	r1, r3
 800282c:	4813      	ldr	r0, [pc, #76]	; (800287c <HAL_I2C_MspInit+0xc0>)
 800282e:	f000 ff15 	bl	800365c <HAL_GPIO_Init>

  /*##-3- Enable I2C peripheral Clock ########################################*/
  /* Enable I2C1 clock */
  I2Cx_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	4b10      	ldr	r3, [pc, #64]	; (8002878 <HAL_I2C_MspInit+0xbc>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	4a0f      	ldr	r2, [pc, #60]	; (8002878 <HAL_I2C_MspInit+0xbc>)
 800283c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002840:	6413      	str	r3, [r2, #64]	; 0x40
 8002842:	4b0d      	ldr	r3, [pc, #52]	; (8002878 <HAL_I2C_MspInit+0xbc>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800284a:	60bb      	str	r3, [r7, #8]
 800284c:	68bb      	ldr	r3, [r7, #8]

  /*##-4- Configure the NVIC for I2C #########################################*/
  /* NVIC for I2C1 */
  HAL_NVIC_SetPriority(I2Cx_ER_IRQn, 1, 0);
 800284e:	2200      	movs	r2, #0
 8002850:	2101      	movs	r1, #1
 8002852:	2020      	movs	r0, #32
 8002854:	f000 fabb 	bl	8002dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2Cx_ER_IRQn);
 8002858:	2020      	movs	r0, #32
 800285a:	f000 fad4 	bl	8002e06 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(I2Cx_EV_IRQn, 2, 0);
 800285e:	2200      	movs	r2, #0
 8002860:	2102      	movs	r1, #2
 8002862:	201f      	movs	r0, #31
 8002864:	f000 fab3 	bl	8002dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2Cx_EV_IRQn);
 8002868:	201f      	movs	r0, #31
 800286a:	f000 facc 	bl	8002e06 <HAL_NVIC_EnableIRQ>
}
 800286e:	bf00      	nop
 8002870:	3728      	adds	r7, #40	; 0x28
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40023800 	.word	0x40023800
 800287c:	40020400 	.word	0x40020400

08002880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  while (1)
 8002884:	e7fe      	b.n	8002884 <NMI_Handler+0x4>

08002886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002886:	b480      	push	{r7}
 8002888:	af00      	add	r7, sp, #0
  while (1)
 800288a:	e7fe      	b.n	800288a <HardFault_Handler+0x4>

0800288c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  while (1)
 8002890:	e7fe      	b.n	8002890 <MemManage_Handler+0x4>

08002892 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002892:	b480      	push	{r7}
 8002894:	af00      	add	r7, sp, #0
  while (1)
 8002896:	e7fe      	b.n	8002896 <BusFault_Handler+0x4>

08002898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  while (1)
 800289c:	e7fe      	b.n	800289c <UsageFault_Handler+0x4>

0800289e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800289e:	b480      	push	{r7}
 80028a0:	af00      	add	r7, sp, #0

}
 80028a2:	bf00      	nop
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0

}
 80028b0:	bf00      	nop
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028ba:	b480      	push	{r7}
 80028bc:	af00      	add	r7, sp, #0

}
 80028be:	bf00      	nop
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80028cc:	f000 f960 	bl	8002b90 <HAL_IncTick>
}
 80028d0:	bf00      	nop
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80028d8:	4803      	ldr	r0, [pc, #12]	; (80028e8 <DMA1_Stream5_IRQHandler+0x14>)
 80028da:	f000 fc47 	bl	800316c <HAL_DMA_IRQHandler>
  serial_handlerDMA();
 80028de:	f7fe fa51 	bl	8000d84 <serial_handlerDMA>
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	200000f0 	.word	0x200000f0

080028ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 80028f0:	4803      	ldr	r0, [pc, #12]	; (8002900 <USART2_IRQHandler+0x14>)
 80028f2:	f003 ff21 	bl	8006738 <HAL_UART_IRQHandler>
	serial_handlerUART();
 80028f6:	f7fe fa3b 	bl	8000d70 <serial_handlerUART>
}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	200000ac 	.word	0x200000ac

08002904 <I2C1_EV_IRQHandler>:
  * @param  None
  * @retval None
  * @Note   This function is redefined in "main.h" and related to I2C data transmission
  */
void I2Cx_EV_IRQHandler(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(& I2cHandle);
 8002908:	4802      	ldr	r0, [pc, #8]	; (8002914 <I2C1_EV_IRQHandler+0x10>)
 800290a:	f001 fb07 	bl	8003f1c <HAL_I2C_EV_IRQHandler>
}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20000150 	.word	0x20000150

08002918 <I2C1_ER_IRQHandler>:
  * @param  None
  * @retval None
  * @Note   This function is redefined in "main.h" and related to I2C error
  */
void I2Cx_ER_IRQHandler(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(& I2cHandle);
 800291c:	4802      	ldr	r0, [pc, #8]	; (8002928 <I2C1_ER_IRQHandler+0x10>)
 800291e:	f001 fc6a 	bl	80041f6 <HAL_I2C_ER_IRQHandler>
}
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20000150 	.word	0x20000150

0800292c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]
 800293c:	e00a      	b.n	8002954 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800293e:	f3af 8000 	nop.w
 8002942:	4601      	mov	r1, r0
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	1c5a      	adds	r2, r3, #1
 8002948:	60ba      	str	r2, [r7, #8]
 800294a:	b2ca      	uxtb	r2, r1
 800294c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	3301      	adds	r3, #1
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	429a      	cmp	r2, r3
 800295a:	dbf0      	blt.n	800293e <_read+0x12>
	}

return len;
 800295c:	687b      	ldr	r3, [r7, #4]
}
 800295e:	4618      	mov	r0, r3
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b086      	sub	sp, #24
 800296a:	af00      	add	r7, sp, #0
 800296c:	60f8      	str	r0, [r7, #12]
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
 8002976:	e009      	b.n	800298c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	1c5a      	adds	r2, r3, #1
 800297c:	60ba      	str	r2, [r7, #8]
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7fd fe17 	bl	80005b4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	3301      	adds	r3, #1
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	429a      	cmp	r2, r3
 8002992:	dbf1      	blt.n	8002978 <_write+0x12>
	}
	return len;
 8002994:	687b      	ldr	r3, [r7, #4]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <_close>:

int _close(int file)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
	return -1;
 80029a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029c6:	605a      	str	r2, [r3, #4]
	return 0;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <_isatty>:

int _isatty(int file)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
	return 1;
 80029de:	2301      	movs	r3, #1
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
	return 0;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
	...

08002a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a10:	4a14      	ldr	r2, [pc, #80]	; (8002a64 <_sbrk+0x5c>)
 8002a12:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <_sbrk+0x60>)
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a1c:	4b13      	ldr	r3, [pc, #76]	; (8002a6c <_sbrk+0x64>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d102      	bne.n	8002a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a24:	4b11      	ldr	r3, [pc, #68]	; (8002a6c <_sbrk+0x64>)
 8002a26:	4a12      	ldr	r2, [pc, #72]	; (8002a70 <_sbrk+0x68>)
 8002a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a2a:	4b10      	ldr	r3, [pc, #64]	; (8002a6c <_sbrk+0x64>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4413      	add	r3, r2
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d207      	bcs.n	8002a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a38:	f004 ff6e 	bl	8007918 <__errno>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	220c      	movs	r2, #12
 8002a40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a42:	f04f 33ff 	mov.w	r3, #4294967295
 8002a46:	e009      	b.n	8002a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a48:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <_sbrk+0x64>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a4e:	4b07      	ldr	r3, [pc, #28]	; (8002a6c <_sbrk+0x64>)
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4413      	add	r3, r2
 8002a56:	4a05      	ldr	r2, [pc, #20]	; (8002a6c <_sbrk+0x64>)
 8002a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3718      	adds	r7, #24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	20020000 	.word	0x20020000
 8002a68:	00000400 	.word	0x00000400
 8002a6c:	200002d4 	.word	0x200002d4
 8002a70:	200002f0 	.word	0x200002f0

08002a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a78:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <SystemInit+0x20>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7e:	4a05      	ldr	r2, [pc, #20]	; (8002a94 <SystemInit+0x20>)
 8002a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a88:	bf00      	nop
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	e000ed00 	.word	0xe000ed00

08002a98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ad0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a9c:	480d      	ldr	r0, [pc, #52]	; (8002ad4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a9e:	490e      	ldr	r1, [pc, #56]	; (8002ad8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002aa0:	4a0e      	ldr	r2, [pc, #56]	; (8002adc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002aa4:	e002      	b.n	8002aac <LoopCopyDataInit>

08002aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aaa:	3304      	adds	r3, #4

08002aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ab0:	d3f9      	bcc.n	8002aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ab2:	4a0b      	ldr	r2, [pc, #44]	; (8002ae0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ab4:	4c0b      	ldr	r4, [pc, #44]	; (8002ae4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ab8:	e001      	b.n	8002abe <LoopFillZerobss>

08002aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002abc:	3204      	adds	r2, #4

08002abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ac0:	d3fb      	bcc.n	8002aba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ac2:	f7ff ffd7 	bl	8002a74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ac6:	f004 ff2d 	bl	8007924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aca:	f7fd fd85 	bl	80005d8 <main>
  bx  lr    
 8002ace:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ad0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ad8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002adc:	08008bc8 	.word	0x08008bc8
  ldr r2, =_sbss
 8002ae0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002ae4:	200002ec 	.word	0x200002ec

08002ae8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ae8:	e7fe      	b.n	8002ae8 <ADC_IRQHandler>
	...

08002aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002af0:	4b0e      	ldr	r3, [pc, #56]	; (8002b2c <HAL_Init+0x40>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a0d      	ldr	r2, [pc, #52]	; (8002b2c <HAL_Init+0x40>)
 8002af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002afa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002afc:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <HAL_Init+0x40>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a0a      	ldr	r2, [pc, #40]	; (8002b2c <HAL_Init+0x40>)
 8002b02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b08:	4b08      	ldr	r3, [pc, #32]	; (8002b2c <HAL_Init+0x40>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a07      	ldr	r2, [pc, #28]	; (8002b2c <HAL_Init+0x40>)
 8002b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b14:	2003      	movs	r0, #3
 8002b16:	f000 f94f 	bl	8002db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b1a:	2000      	movs	r0, #0
 8002b1c:	f000 f808 	bl	8002b30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b20:	f7ff fda2 	bl	8002668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40023c00 	.word	0x40023c00

08002b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b38:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <HAL_InitTick+0x54>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <HAL_InitTick+0x58>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	4619      	mov	r1, r3
 8002b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b46:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 f967 	bl	8002e22 <HAL_SYSTICK_Config>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e00e      	b.n	8002b7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b0f      	cmp	r3, #15
 8002b62:	d80a      	bhi.n	8002b7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b64:	2200      	movs	r2, #0
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	f04f 30ff 	mov.w	r0, #4294967295
 8002b6c:	f000 f92f 	bl	8002dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b70:	4a06      	ldr	r2, [pc, #24]	; (8002b8c <HAL_InitTick+0x5c>)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
 8002b78:	e000      	b.n	8002b7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	20000020 	.word	0x20000020
 8002b88:	20000028 	.word	0x20000028
 8002b8c:	20000024 	.word	0x20000024

08002b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b94:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <HAL_IncTick+0x20>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <HAL_IncTick+0x24>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	4a04      	ldr	r2, [pc, #16]	; (8002bb4 <HAL_IncTick+0x24>)
 8002ba2:	6013      	str	r3, [r2, #0]
}
 8002ba4:	bf00      	nop
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	20000028 	.word	0x20000028
 8002bb4:	200002d8 	.word	0x200002d8

08002bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  return uwTick;
 8002bbc:	4b03      	ldr	r3, [pc, #12]	; (8002bcc <HAL_GetTick+0x14>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	200002d8 	.word	0x200002d8

08002bd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bd8:	f7ff ffee 	bl	8002bb8 <HAL_GetTick>
 8002bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be8:	d005      	beq.n	8002bf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bea:	4b0a      	ldr	r3, [pc, #40]	; (8002c14 <HAL_Delay+0x44>)
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bf6:	bf00      	nop
 8002bf8:	f7ff ffde 	bl	8002bb8 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d8f7      	bhi.n	8002bf8 <HAL_Delay+0x28>
  {
  }
}
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20000028 	.word	0x20000028

08002c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <__NVIC_SetPriorityGrouping+0x44>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c34:	4013      	ands	r3, r2
 8002c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c4a:	4a04      	ldr	r2, [pc, #16]	; (8002c5c <__NVIC_SetPriorityGrouping+0x44>)
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	60d3      	str	r3, [r2, #12]
}
 8002c50:	bf00      	nop
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	e000ed00 	.word	0xe000ed00

08002c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c64:	4b04      	ldr	r3, [pc, #16]	; (8002c78 <__NVIC_GetPriorityGrouping+0x18>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	0a1b      	lsrs	r3, r3, #8
 8002c6a:	f003 0307 	and.w	r3, r3, #7
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	db0b      	blt.n	8002ca6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c8e:	79fb      	ldrb	r3, [r7, #7]
 8002c90:	f003 021f 	and.w	r2, r3, #31
 8002c94:	4907      	ldr	r1, [pc, #28]	; (8002cb4 <__NVIC_EnableIRQ+0x38>)
 8002c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9a:	095b      	lsrs	r3, r3, #5
 8002c9c:	2001      	movs	r0, #1
 8002c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	e000e100 	.word	0xe000e100

08002cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	6039      	str	r1, [r7, #0]
 8002cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	db0a      	blt.n	8002ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	490c      	ldr	r1, [pc, #48]	; (8002d04 <__NVIC_SetPriority+0x4c>)
 8002cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd6:	0112      	lsls	r2, r2, #4
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	440b      	add	r3, r1
 8002cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ce0:	e00a      	b.n	8002cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	4908      	ldr	r1, [pc, #32]	; (8002d08 <__NVIC_SetPriority+0x50>)
 8002ce8:	79fb      	ldrb	r3, [r7, #7]
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	3b04      	subs	r3, #4
 8002cf0:	0112      	lsls	r2, r2, #4
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	761a      	strb	r2, [r3, #24]
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	e000e100 	.word	0xe000e100
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b089      	sub	sp, #36	; 0x24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f1c3 0307 	rsb	r3, r3, #7
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	bf28      	it	cs
 8002d2a:	2304      	movcs	r3, #4
 8002d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	3304      	adds	r3, #4
 8002d32:	2b06      	cmp	r3, #6
 8002d34:	d902      	bls.n	8002d3c <NVIC_EncodePriority+0x30>
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	3b03      	subs	r3, #3
 8002d3a:	e000      	b.n	8002d3e <NVIC_EncodePriority+0x32>
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d40:	f04f 32ff 	mov.w	r2, #4294967295
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43da      	mvns	r2, r3
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	401a      	ands	r2, r3
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d54:	f04f 31ff 	mov.w	r1, #4294967295
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5e:	43d9      	mvns	r1, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d64:	4313      	orrs	r3, r2
         );
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3724      	adds	r7, #36	; 0x24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
	...

08002d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d84:	d301      	bcc.n	8002d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d86:	2301      	movs	r3, #1
 8002d88:	e00f      	b.n	8002daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d8a:	4a0a      	ldr	r2, [pc, #40]	; (8002db4 <SysTick_Config+0x40>)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d92:	210f      	movs	r1, #15
 8002d94:	f04f 30ff 	mov.w	r0, #4294967295
 8002d98:	f7ff ff8e 	bl	8002cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d9c:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <SysTick_Config+0x40>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002da2:	4b04      	ldr	r3, [pc, #16]	; (8002db4 <SysTick_Config+0x40>)
 8002da4:	2207      	movs	r2, #7
 8002da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	e000e010 	.word	0xe000e010

08002db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f7ff ff29 	bl	8002c18 <__NVIC_SetPriorityGrouping>
}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b086      	sub	sp, #24
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	607a      	str	r2, [r7, #4]
 8002dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002de0:	f7ff ff3e 	bl	8002c60 <__NVIC_GetPriorityGrouping>
 8002de4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	68b9      	ldr	r1, [r7, #8]
 8002dea:	6978      	ldr	r0, [r7, #20]
 8002dec:	f7ff ff8e 	bl	8002d0c <NVIC_EncodePriority>
 8002df0:	4602      	mov	r2, r0
 8002df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002df6:	4611      	mov	r1, r2
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff ff5d 	bl	8002cb8 <__NVIC_SetPriority>
}
 8002dfe:	bf00      	nop
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff ff31 	bl	8002c7c <__NVIC_EnableIRQ>
}
 8002e1a:	bf00      	nop
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b082      	sub	sp, #8
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7ff ffa2 	bl	8002d74 <SysTick_Config>
 8002e30:	4603      	mov	r3, r0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
	...

08002e3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e48:	f7ff feb6 	bl	8002bb8 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e099      	b.n	8002f8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 0201 	bic.w	r2, r2, #1
 8002e76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e78:	e00f      	b.n	8002e9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e7a:	f7ff fe9d 	bl	8002bb8 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b05      	cmp	r3, #5
 8002e86:	d908      	bls.n	8002e9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2203      	movs	r2, #3
 8002e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e078      	b.n	8002f8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1e8      	bne.n	8002e7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	4b38      	ldr	r3, [pc, #224]	; (8002f94 <HAL_DMA_Init+0x158>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ed2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ede:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d107      	bne.n	8002f04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efc:	4313      	orrs	r3, r2
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f023 0307 	bic.w	r3, r3, #7
 8002f1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d117      	bne.n	8002f5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00e      	beq.n	8002f5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 fb0f 	bl	8003564 <DMA_CheckFifoParam>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2240      	movs	r2, #64	; 0x40
 8002f50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e016      	b.n	8002f8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 fac6 	bl	80034f8 <DMA_CalcBaseAndBitshift>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f74:	223f      	movs	r2, #63	; 0x3f
 8002f76:	409a      	lsls	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	f010803f 	.word	0xf010803f

08002f98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
 8002fa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d101      	bne.n	8002fbe <HAL_DMA_Start_IT+0x26>
 8002fba:	2302      	movs	r3, #2
 8002fbc:	e040      	b.n	8003040 <HAL_DMA_Start_IT+0xa8>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d12f      	bne.n	8003032 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	68b9      	ldr	r1, [r7, #8]
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 fa58 	bl	800349c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff0:	223f      	movs	r2, #63	; 0x3f
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0216 	orr.w	r2, r2, #22
 8003006:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	2b00      	cmp	r3, #0
 800300e:	d007      	beq.n	8003020 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0208 	orr.w	r2, r2, #8
 800301e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0201 	orr.w	r2, r2, #1
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	e005      	b.n	800303e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800303a:	2302      	movs	r3, #2
 800303c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800303e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003054:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003056:	f7ff fdaf 	bl	8002bb8 <HAL_GetTick>
 800305a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d008      	beq.n	800307a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2280      	movs	r2, #128	; 0x80
 800306c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e052      	b.n	8003120 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0216 	bic.w	r2, r2, #22
 8003088:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695a      	ldr	r2, [r3, #20]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003098:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d103      	bne.n	80030aa <HAL_DMA_Abort+0x62>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d007      	beq.n	80030ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0208 	bic.w	r2, r2, #8
 80030b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0201 	bic.w	r2, r2, #1
 80030c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030ca:	e013      	b.n	80030f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030cc:	f7ff fd74 	bl	8002bb8 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b05      	cmp	r3, #5
 80030d8:	d90c      	bls.n	80030f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2220      	movs	r2, #32
 80030de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2203      	movs	r2, #3
 80030e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e015      	b.n	8003120 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1e4      	bne.n	80030cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003106:	223f      	movs	r2, #63	; 0x3f
 8003108:	409a      	lsls	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d004      	beq.n	8003146 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2280      	movs	r2, #128	; 0x80
 8003140:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e00c      	b.n	8003160 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2205      	movs	r2, #5
 800314a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0201 	bic.w	r2, r2, #1
 800315c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003178:	4b8e      	ldr	r3, [pc, #568]	; (80033b4 <HAL_DMA_IRQHandler+0x248>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a8e      	ldr	r2, [pc, #568]	; (80033b8 <HAL_DMA_IRQHandler+0x24c>)
 800317e:	fba2 2303 	umull	r2, r3, r2, r3
 8003182:	0a9b      	lsrs	r3, r3, #10
 8003184:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003196:	2208      	movs	r2, #8
 8003198:	409a      	lsls	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4013      	ands	r3, r2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d01a      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d013      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0204 	bic.w	r2, r2, #4
 80031be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c4:	2208      	movs	r2, #8
 80031c6:	409a      	lsls	r2, r3
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d0:	f043 0201 	orr.w	r2, r3, #1
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031dc:	2201      	movs	r2, #1
 80031de:	409a      	lsls	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4013      	ands	r3, r2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d012      	beq.n	800320e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00b      	beq.n	800320e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fa:	2201      	movs	r2, #1
 80031fc:	409a      	lsls	r2, r3
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003206:	f043 0202 	orr.w	r2, r3, #2
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003212:	2204      	movs	r2, #4
 8003214:	409a      	lsls	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	4013      	ands	r3, r2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d012      	beq.n	8003244 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00b      	beq.n	8003244 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003230:	2204      	movs	r2, #4
 8003232:	409a      	lsls	r2, r3
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323c:	f043 0204 	orr.w	r2, r3, #4
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003248:	2210      	movs	r2, #16
 800324a:	409a      	lsls	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4013      	ands	r3, r2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d043      	beq.n	80032dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d03c      	beq.n	80032dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003266:	2210      	movs	r2, #16
 8003268:	409a      	lsls	r2, r3
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d018      	beq.n	80032ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d108      	bne.n	800329c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	2b00      	cmp	r3, #0
 8003290:	d024      	beq.n	80032dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	4798      	blx	r3
 800329a:	e01f      	b.n	80032dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d01b      	beq.n	80032dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	4798      	blx	r3
 80032ac:	e016      	b.n	80032dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d107      	bne.n	80032cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0208 	bic.w	r2, r2, #8
 80032ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e0:	2220      	movs	r2, #32
 80032e2:	409a      	lsls	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4013      	ands	r3, r2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 808f 	beq.w	800340c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0310 	and.w	r3, r3, #16
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 8087 	beq.w	800340c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003302:	2220      	movs	r2, #32
 8003304:	409a      	lsls	r2, r3
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b05      	cmp	r3, #5
 8003314:	d136      	bne.n	8003384 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0216 	bic.w	r2, r2, #22
 8003324:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	695a      	ldr	r2, [r3, #20]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003334:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	2b00      	cmp	r3, #0
 800333c:	d103      	bne.n	8003346 <HAL_DMA_IRQHandler+0x1da>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003342:	2b00      	cmp	r3, #0
 8003344:	d007      	beq.n	8003356 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0208 	bic.w	r2, r2, #8
 8003354:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335a:	223f      	movs	r2, #63	; 0x3f
 800335c:	409a      	lsls	r2, r3
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003376:	2b00      	cmp	r3, #0
 8003378:	d07e      	beq.n	8003478 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	4798      	blx	r3
        }
        return;
 8003382:	e079      	b.n	8003478 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d01d      	beq.n	80033ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10d      	bne.n	80033bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d031      	beq.n	800340c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	4798      	blx	r3
 80033b0:	e02c      	b.n	800340c <HAL_DMA_IRQHandler+0x2a0>
 80033b2:	bf00      	nop
 80033b4:	20000020 	.word	0x20000020
 80033b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d023      	beq.n	800340c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	4798      	blx	r3
 80033cc:	e01e      	b.n	800340c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10f      	bne.n	80033fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0210 	bic.w	r2, r2, #16
 80033ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003410:	2b00      	cmp	r3, #0
 8003412:	d032      	beq.n	800347a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b00      	cmp	r3, #0
 800341e:	d022      	beq.n	8003466 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2205      	movs	r2, #5
 8003424:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0201 	bic.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	3301      	adds	r3, #1
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	429a      	cmp	r2, r3
 8003442:	d307      	bcc.n	8003454 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f2      	bne.n	8003438 <HAL_DMA_IRQHandler+0x2cc>
 8003452:	e000      	b.n	8003456 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003454:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800346a:	2b00      	cmp	r3, #0
 800346c:	d005      	beq.n	800347a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	4798      	blx	r3
 8003476:	e000      	b.n	800347a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003478:	bf00      	nop
    }
  }
}
 800347a:	3718      	adds	r7, #24
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800348e:	b2db      	uxtb	r3, r3
}
 8003490:	4618      	mov	r0, r3
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
 80034a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	2b40      	cmp	r3, #64	; 0x40
 80034c8:	d108      	bne.n	80034dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80034da:	e007      	b.n	80034ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	60da      	str	r2, [r3, #12]
}
 80034ec:	bf00      	nop
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	b2db      	uxtb	r3, r3
 8003506:	3b10      	subs	r3, #16
 8003508:	4a14      	ldr	r2, [pc, #80]	; (800355c <DMA_CalcBaseAndBitshift+0x64>)
 800350a:	fba2 2303 	umull	r2, r3, r2, r3
 800350e:	091b      	lsrs	r3, r3, #4
 8003510:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003512:	4a13      	ldr	r2, [pc, #76]	; (8003560 <DMA_CalcBaseAndBitshift+0x68>)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4413      	add	r3, r2
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	461a      	mov	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2b03      	cmp	r3, #3
 8003524:	d909      	bls.n	800353a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800352e:	f023 0303 	bic.w	r3, r3, #3
 8003532:	1d1a      	adds	r2, r3, #4
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	659a      	str	r2, [r3, #88]	; 0x58
 8003538:	e007      	b.n	800354a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003542:	f023 0303 	bic.w	r3, r3, #3
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800354e:	4618      	mov	r0, r3
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	aaaaaaab 	.word	0xaaaaaaab
 8003560:	08008b18 	.word	0x08008b18

08003564 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800356c:	2300      	movs	r3, #0
 800356e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003574:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d11f      	bne.n	80035be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2b03      	cmp	r3, #3
 8003582:	d856      	bhi.n	8003632 <DMA_CheckFifoParam+0xce>
 8003584:	a201      	add	r2, pc, #4	; (adr r2, 800358c <DMA_CheckFifoParam+0x28>)
 8003586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358a:	bf00      	nop
 800358c:	0800359d 	.word	0x0800359d
 8003590:	080035af 	.word	0x080035af
 8003594:	0800359d 	.word	0x0800359d
 8003598:	08003633 	.word	0x08003633
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d046      	beq.n	8003636 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035ac:	e043      	b.n	8003636 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035b6:	d140      	bne.n	800363a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035bc:	e03d      	b.n	800363a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035c6:	d121      	bne.n	800360c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	d837      	bhi.n	800363e <DMA_CheckFifoParam+0xda>
 80035ce:	a201      	add	r2, pc, #4	; (adr r2, 80035d4 <DMA_CheckFifoParam+0x70>)
 80035d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d4:	080035e5 	.word	0x080035e5
 80035d8:	080035eb 	.word	0x080035eb
 80035dc:	080035e5 	.word	0x080035e5
 80035e0:	080035fd 	.word	0x080035fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	73fb      	strb	r3, [r7, #15]
      break;
 80035e8:	e030      	b.n	800364c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d025      	beq.n	8003642 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035fa:	e022      	b.n	8003642 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003600:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003604:	d11f      	bne.n	8003646 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800360a:	e01c      	b.n	8003646 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2b02      	cmp	r3, #2
 8003610:	d903      	bls.n	800361a <DMA_CheckFifoParam+0xb6>
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	2b03      	cmp	r3, #3
 8003616:	d003      	beq.n	8003620 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003618:	e018      	b.n	800364c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	73fb      	strb	r3, [r7, #15]
      break;
 800361e:	e015      	b.n	800364c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003624:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00e      	beq.n	800364a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]
      break;
 8003630:	e00b      	b.n	800364a <DMA_CheckFifoParam+0xe6>
      break;
 8003632:	bf00      	nop
 8003634:	e00a      	b.n	800364c <DMA_CheckFifoParam+0xe8>
      break;
 8003636:	bf00      	nop
 8003638:	e008      	b.n	800364c <DMA_CheckFifoParam+0xe8>
      break;
 800363a:	bf00      	nop
 800363c:	e006      	b.n	800364c <DMA_CheckFifoParam+0xe8>
      break;
 800363e:	bf00      	nop
 8003640:	e004      	b.n	800364c <DMA_CheckFifoParam+0xe8>
      break;
 8003642:	bf00      	nop
 8003644:	e002      	b.n	800364c <DMA_CheckFifoParam+0xe8>
      break;   
 8003646:	bf00      	nop
 8003648:	e000      	b.n	800364c <DMA_CheckFifoParam+0xe8>
      break;
 800364a:	bf00      	nop
    }
  } 
  
  return status; 
 800364c:	7bfb      	ldrb	r3, [r7, #15]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop

0800365c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800365c:	b480      	push	{r7}
 800365e:	b089      	sub	sp, #36	; 0x24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003666:	2300      	movs	r3, #0
 8003668:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800366a:	2300      	movs	r3, #0
 800366c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800366e:	2300      	movs	r3, #0
 8003670:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003672:	2300      	movs	r3, #0
 8003674:	61fb      	str	r3, [r7, #28]
 8003676:	e165      	b.n	8003944 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003678:	2201      	movs	r2, #1
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	4013      	ands	r3, r2
 800368a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	429a      	cmp	r2, r3
 8003692:	f040 8154 	bne.w	800393e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d005      	beq.n	80036ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d130      	bne.n	8003710 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	2203      	movs	r2, #3
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	43db      	mvns	r3, r3
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	4013      	ands	r3, r2
 80036c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036e4:	2201      	movs	r2, #1
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	43db      	mvns	r3, r3
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	4013      	ands	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	091b      	lsrs	r3, r3, #4
 80036fa:	f003 0201 	and.w	r2, r3, #1
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4313      	orrs	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f003 0303 	and.w	r3, r3, #3
 8003718:	2b03      	cmp	r3, #3
 800371a:	d017      	beq.n	800374c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	2203      	movs	r2, #3
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	43db      	mvns	r3, r3
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	4013      	ands	r3, r2
 8003732:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	4313      	orrs	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f003 0303 	and.w	r3, r3, #3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d123      	bne.n	80037a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	08da      	lsrs	r2, r3, #3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3208      	adds	r2, #8
 8003760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003764:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	f003 0307 	and.w	r3, r3, #7
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	220f      	movs	r2, #15
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	43db      	mvns	r3, r3
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4013      	ands	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	691a      	ldr	r2, [r3, #16]
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4313      	orrs	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	08da      	lsrs	r2, r3, #3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	3208      	adds	r2, #8
 800379a:	69b9      	ldr	r1, [r7, #24]
 800379c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	2203      	movs	r2, #3
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	43db      	mvns	r3, r3
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	4013      	ands	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f003 0203 	and.w	r2, r3, #3
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 80ae 	beq.w	800393e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037e2:	2300      	movs	r3, #0
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	4b5d      	ldr	r3, [pc, #372]	; (800395c <HAL_GPIO_Init+0x300>)
 80037e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ea:	4a5c      	ldr	r2, [pc, #368]	; (800395c <HAL_GPIO_Init+0x300>)
 80037ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037f0:	6453      	str	r3, [r2, #68]	; 0x44
 80037f2:	4b5a      	ldr	r3, [pc, #360]	; (800395c <HAL_GPIO_Init+0x300>)
 80037f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037fe:	4a58      	ldr	r2, [pc, #352]	; (8003960 <HAL_GPIO_Init+0x304>)
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	089b      	lsrs	r3, r3, #2
 8003804:	3302      	adds	r3, #2
 8003806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800380a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	220f      	movs	r2, #15
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43db      	mvns	r3, r3
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4013      	ands	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a4f      	ldr	r2, [pc, #316]	; (8003964 <HAL_GPIO_Init+0x308>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d025      	beq.n	8003876 <HAL_GPIO_Init+0x21a>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a4e      	ldr	r2, [pc, #312]	; (8003968 <HAL_GPIO_Init+0x30c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d01f      	beq.n	8003872 <HAL_GPIO_Init+0x216>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a4d      	ldr	r2, [pc, #308]	; (800396c <HAL_GPIO_Init+0x310>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d019      	beq.n	800386e <HAL_GPIO_Init+0x212>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a4c      	ldr	r2, [pc, #304]	; (8003970 <HAL_GPIO_Init+0x314>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d013      	beq.n	800386a <HAL_GPIO_Init+0x20e>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a4b      	ldr	r2, [pc, #300]	; (8003974 <HAL_GPIO_Init+0x318>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d00d      	beq.n	8003866 <HAL_GPIO_Init+0x20a>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a4a      	ldr	r2, [pc, #296]	; (8003978 <HAL_GPIO_Init+0x31c>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d007      	beq.n	8003862 <HAL_GPIO_Init+0x206>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a49      	ldr	r2, [pc, #292]	; (800397c <HAL_GPIO_Init+0x320>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d101      	bne.n	800385e <HAL_GPIO_Init+0x202>
 800385a:	2306      	movs	r3, #6
 800385c:	e00c      	b.n	8003878 <HAL_GPIO_Init+0x21c>
 800385e:	2307      	movs	r3, #7
 8003860:	e00a      	b.n	8003878 <HAL_GPIO_Init+0x21c>
 8003862:	2305      	movs	r3, #5
 8003864:	e008      	b.n	8003878 <HAL_GPIO_Init+0x21c>
 8003866:	2304      	movs	r3, #4
 8003868:	e006      	b.n	8003878 <HAL_GPIO_Init+0x21c>
 800386a:	2303      	movs	r3, #3
 800386c:	e004      	b.n	8003878 <HAL_GPIO_Init+0x21c>
 800386e:	2302      	movs	r3, #2
 8003870:	e002      	b.n	8003878 <HAL_GPIO_Init+0x21c>
 8003872:	2301      	movs	r3, #1
 8003874:	e000      	b.n	8003878 <HAL_GPIO_Init+0x21c>
 8003876:	2300      	movs	r3, #0
 8003878:	69fa      	ldr	r2, [r7, #28]
 800387a:	f002 0203 	and.w	r2, r2, #3
 800387e:	0092      	lsls	r2, r2, #2
 8003880:	4093      	lsls	r3, r2
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4313      	orrs	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003888:	4935      	ldr	r1, [pc, #212]	; (8003960 <HAL_GPIO_Init+0x304>)
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	089b      	lsrs	r3, r3, #2
 800388e:	3302      	adds	r3, #2
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003896:	4b3a      	ldr	r3, [pc, #232]	; (8003980 <HAL_GPIO_Init+0x324>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	43db      	mvns	r3, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4013      	ands	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038ba:	4a31      	ldr	r2, [pc, #196]	; (8003980 <HAL_GPIO_Init+0x324>)
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038c0:	4b2f      	ldr	r3, [pc, #188]	; (8003980 <HAL_GPIO_Init+0x324>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	43db      	mvns	r3, r3
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	4013      	ands	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038e4:	4a26      	ldr	r2, [pc, #152]	; (8003980 <HAL_GPIO_Init+0x324>)
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038ea:	4b25      	ldr	r3, [pc, #148]	; (8003980 <HAL_GPIO_Init+0x324>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	43db      	mvns	r3, r3
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4013      	ands	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	4313      	orrs	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800390e:	4a1c      	ldr	r2, [pc, #112]	; (8003980 <HAL_GPIO_Init+0x324>)
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003914:	4b1a      	ldr	r3, [pc, #104]	; (8003980 <HAL_GPIO_Init+0x324>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	43db      	mvns	r3, r3
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	4013      	ands	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003938:	4a11      	ldr	r2, [pc, #68]	; (8003980 <HAL_GPIO_Init+0x324>)
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	3301      	adds	r3, #1
 8003942:	61fb      	str	r3, [r7, #28]
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	2b0f      	cmp	r3, #15
 8003948:	f67f ae96 	bls.w	8003678 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800394c:	bf00      	nop
 800394e:	bf00      	nop
 8003950:	3724      	adds	r7, #36	; 0x24
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40023800 	.word	0x40023800
 8003960:	40013800 	.word	0x40013800
 8003964:	40020000 	.word	0x40020000
 8003968:	40020400 	.word	0x40020400
 800396c:	40020800 	.word	0x40020800
 8003970:	40020c00 	.word	0x40020c00
 8003974:	40021000 	.word	0x40021000
 8003978:	40021400 	.word	0x40021400
 800397c:	40021800 	.word	0x40021800
 8003980:	40013c00 	.word	0x40013c00

08003984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	460b      	mov	r3, r1
 800398e:	807b      	strh	r3, [r7, #2]
 8003990:	4613      	mov	r3, r2
 8003992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003994:	787b      	ldrb	r3, [r7, #1]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800399a:	887a      	ldrh	r2, [r7, #2]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039a0:	e003      	b.n	80039aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039a2:	887b      	ldrh	r3, [r7, #2]
 80039a4:	041a      	lsls	r2, r3, #16
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	619a      	str	r2, [r3, #24]
}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b085      	sub	sp, #20
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
 80039be:	460b      	mov	r3, r1
 80039c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039c8:	887a      	ldrh	r2, [r7, #2]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4013      	ands	r3, r2
 80039ce:	041a      	lsls	r2, r3, #16
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	43d9      	mvns	r1, r3
 80039d4:	887b      	ldrh	r3, [r7, #2]
 80039d6:	400b      	ands	r3, r1
 80039d8:	431a      	orrs	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	619a      	str	r2, [r3, #24]
}
 80039de:	bf00      	nop
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
	...

080039ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e12b      	b.n	8003c56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d106      	bne.n	8003a18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7fe fed2 	bl	80027bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2224      	movs	r2, #36	; 0x24
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 0201 	bic.w	r2, r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a50:	f002 f808 	bl	8005a64 <HAL_RCC_GetPCLK1Freq>
 8003a54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	4a81      	ldr	r2, [pc, #516]	; (8003c60 <HAL_I2C_Init+0x274>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d807      	bhi.n	8003a70 <HAL_I2C_Init+0x84>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4a80      	ldr	r2, [pc, #512]	; (8003c64 <HAL_I2C_Init+0x278>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	bf94      	ite	ls
 8003a68:	2301      	movls	r3, #1
 8003a6a:	2300      	movhi	r3, #0
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	e006      	b.n	8003a7e <HAL_I2C_Init+0x92>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4a7d      	ldr	r2, [pc, #500]	; (8003c68 <HAL_I2C_Init+0x27c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	bf94      	ite	ls
 8003a78:	2301      	movls	r3, #1
 8003a7a:	2300      	movhi	r3, #0
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e0e7      	b.n	8003c56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4a78      	ldr	r2, [pc, #480]	; (8003c6c <HAL_I2C_Init+0x280>)
 8003a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8e:	0c9b      	lsrs	r3, r3, #18
 8003a90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	4a6a      	ldr	r2, [pc, #424]	; (8003c60 <HAL_I2C_Init+0x274>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d802      	bhi.n	8003ac0 <HAL_I2C_Init+0xd4>
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	3301      	adds	r3, #1
 8003abe:	e009      	b.n	8003ad4 <HAL_I2C_Init+0xe8>
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ac6:	fb02 f303 	mul.w	r3, r2, r3
 8003aca:	4a69      	ldr	r2, [pc, #420]	; (8003c70 <HAL_I2C_Init+0x284>)
 8003acc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad0:	099b      	lsrs	r3, r3, #6
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6812      	ldr	r2, [r2, #0]
 8003ad8:	430b      	orrs	r3, r1
 8003ada:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ae6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	495c      	ldr	r1, [pc, #368]	; (8003c60 <HAL_I2C_Init+0x274>)
 8003af0:	428b      	cmp	r3, r1
 8003af2:	d819      	bhi.n	8003b28 <HAL_I2C_Init+0x13c>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	1e59      	subs	r1, r3, #1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b02:	1c59      	adds	r1, r3, #1
 8003b04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b08:	400b      	ands	r3, r1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00a      	beq.n	8003b24 <HAL_I2C_Init+0x138>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	1e59      	subs	r1, r3, #1
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b22:	e051      	b.n	8003bc8 <HAL_I2C_Init+0x1dc>
 8003b24:	2304      	movs	r3, #4
 8003b26:	e04f      	b.n	8003bc8 <HAL_I2C_Init+0x1dc>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d111      	bne.n	8003b54 <HAL_I2C_Init+0x168>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	1e58      	subs	r0, r3, #1
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6859      	ldr	r1, [r3, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	440b      	add	r3, r1
 8003b3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b42:	3301      	adds	r3, #1
 8003b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	bf0c      	ite	eq
 8003b4c:	2301      	moveq	r3, #1
 8003b4e:	2300      	movne	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	e012      	b.n	8003b7a <HAL_I2C_Init+0x18e>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	1e58      	subs	r0, r3, #1
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6859      	ldr	r1, [r3, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	440b      	add	r3, r1
 8003b62:	0099      	lsls	r1, r3, #2
 8003b64:	440b      	add	r3, r1
 8003b66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	bf0c      	ite	eq
 8003b74:	2301      	moveq	r3, #1
 8003b76:	2300      	movne	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <HAL_I2C_Init+0x196>
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e022      	b.n	8003bc8 <HAL_I2C_Init+0x1dc>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10e      	bne.n	8003ba8 <HAL_I2C_Init+0x1bc>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	1e58      	subs	r0, r3, #1
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6859      	ldr	r1, [r3, #4]
 8003b92:	460b      	mov	r3, r1
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	440b      	add	r3, r1
 8003b98:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ba6:	e00f      	b.n	8003bc8 <HAL_I2C_Init+0x1dc>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	1e58      	subs	r0, r3, #1
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6859      	ldr	r1, [r3, #4]
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	0099      	lsls	r1, r3, #2
 8003bb8:	440b      	add	r3, r1
 8003bba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	6809      	ldr	r1, [r1, #0]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69da      	ldr	r2, [r3, #28]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003bf6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6911      	ldr	r1, [r2, #16]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	68d2      	ldr	r2, [r2, #12]
 8003c02:	4311      	orrs	r1, r2
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6812      	ldr	r2, [r2, #0]
 8003c08:	430b      	orrs	r3, r1
 8003c0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	695a      	ldr	r2, [r3, #20]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0201 	orr.w	r2, r2, #1
 8003c36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	000186a0 	.word	0x000186a0
 8003c64:	001e847f 	.word	0x001e847f
 8003c68:	003d08ff 	.word	0x003d08ff
 8003c6c:	431bde83 	.word	0x431bde83
 8003c70:	10624dd3 	.word	0x10624dd3

08003c74 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	607a      	str	r2, [r7, #4]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	460b      	mov	r3, r1
 8003c82:	817b      	strh	r3, [r7, #10]
 8003c84:	4613      	mov	r3, r2
 8003c86:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b20      	cmp	r3, #32
 8003c96:	f040 8085 	bne.w	8003da4 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c9a:	4b46      	ldr	r3, [pc, #280]	; (8003db4 <HAL_I2C_Master_Transmit_IT+0x140>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	08db      	lsrs	r3, r3, #3
 8003ca0:	4a45      	ldr	r2, [pc, #276]	; (8003db8 <HAL_I2C_Master_Transmit_IT+0x144>)
 8003ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca6:	0a1a      	lsrs	r2, r3, #8
 8003ca8:	4613      	mov	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	009a      	lsls	r2, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d116      	bne.n	8003cee <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	f043 0220 	orr.w	r2, r3, #32
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e05b      	b.n	8003da6 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d0db      	beq.n	8003cb4 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d101      	bne.n	8003d0a <HAL_I2C_Master_Transmit_IT+0x96>
 8003d06:	2302      	movs	r3, #2
 8003d08:	e04d      	b.n	8003da6 <HAL_I2C_Master_Transmit_IT+0x132>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d007      	beq.n	8003d30 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0201 	orr.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2221      	movs	r2, #33	; 0x21
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2210      	movs	r2, #16
 8003d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	893a      	ldrh	r2, [r7, #8]
 8003d60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4a13      	ldr	r2, [pc, #76]	; (8003dbc <HAL_I2C_Master_Transmit_IT+0x148>)
 8003d70:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003d72:	897a      	ldrh	r2, [r7, #10]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d86:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003d9e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003da0:	2300      	movs	r3, #0
 8003da2:	e000      	b.n	8003da6 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8003da4:	2302      	movs	r3, #2
  }
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	371c      	adds	r7, #28
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	20000020 	.word	0x20000020
 8003db8:	14f8b589 	.word	0x14f8b589
 8003dbc:	ffff0000 	.word	0xffff0000

08003dc0 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b087      	sub	sp, #28
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	607a      	str	r2, [r7, #4]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	460b      	mov	r3, r1
 8003dce:	817b      	strh	r3, [r7, #10]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b20      	cmp	r3, #32
 8003de2:	f040 808d 	bne.w	8003f00 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003de6:	4b4a      	ldr	r3, [pc, #296]	; (8003f10 <HAL_I2C_Master_Receive_IT+0x150>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	08db      	lsrs	r3, r3, #3
 8003dec:	4a49      	ldr	r2, [pc, #292]	; (8003f14 <HAL_I2C_Master_Receive_IT+0x154>)
 8003dee:	fba2 2303 	umull	r2, r3, r2, r3
 8003df2:	0a1a      	lsrs	r2, r3, #8
 8003df4:	4613      	mov	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	009a      	lsls	r2, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d116      	bne.n	8003e3a <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	f043 0220 	orr.w	r2, r3, #32
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e063      	b.n	8003f02 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d0db      	beq.n	8003e00 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d101      	bne.n	8003e56 <HAL_I2C_Master_Receive_IT+0x96>
 8003e52:	2302      	movs	r3, #2
 8003e54:	e055      	b.n	8003f02 <HAL_I2C_Master_Receive_IT+0x142>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d007      	beq.n	8003e7c <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2222      	movs	r2, #34	; 0x22
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2210      	movs	r2, #16
 8003e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	893a      	ldrh	r2, [r7, #8]
 8003eac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4a17      	ldr	r2, [pc, #92]	; (8003f18 <HAL_I2C_Master_Receive_IT+0x158>)
 8003ebc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003ebe:	897a      	ldrh	r2, [r7, #10]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ed2:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ee2:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003efa:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003efc:	2300      	movs	r3, #0
 8003efe:	e000      	b.n	8003f02 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8003f00:	2302      	movs	r3, #2
  }
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	371c      	adds	r7, #28
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	20000020 	.word	0x20000020
 8003f14:	14f8b589 	.word	0x14f8b589
 8003f18:	ffff0000 	.word	0xffff0000

08003f1c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b088      	sub	sp, #32
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f34:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f3c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f44:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003f46:	7bfb      	ldrb	r3, [r7, #15]
 8003f48:	2b10      	cmp	r3, #16
 8003f4a:	d003      	beq.n	8003f54 <HAL_I2C_EV_IRQHandler+0x38>
 8003f4c:	7bfb      	ldrb	r3, [r7, #15]
 8003f4e:	2b40      	cmp	r3, #64	; 0x40
 8003f50:	f040 80bd 	bne.w	80040ce <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10d      	bne.n	8003f8a <HAL_I2C_EV_IRQHandler+0x6e>
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003f74:	d003      	beq.n	8003f7e <HAL_I2C_EV_IRQHandler+0x62>
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003f7c:	d101      	bne.n	8003f82 <HAL_I2C_EV_IRQHandler+0x66>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e000      	b.n	8003f84 <HAL_I2C_EV_IRQHandler+0x68>
 8003f82:	2300      	movs	r3, #0
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	f000 812e 	beq.w	80041e6 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00c      	beq.n	8003fae <HAL_I2C_EV_IRQHandler+0x92>
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	0a5b      	lsrs	r3, r3, #9
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d006      	beq.n	8003fae <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f001 fc51 	bl	8005848 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fd5e 	bl	8004a68 <I2C_Master_SB>
 8003fac:	e08e      	b.n	80040cc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	08db      	lsrs	r3, r3, #3
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d009      	beq.n	8003fce <HAL_I2C_EV_IRQHandler+0xb2>
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	0a5b      	lsrs	r3, r3, #9
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 fdd4 	bl	8004b74 <I2C_Master_ADD10>
 8003fcc:	e07e      	b.n	80040cc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	085b      	lsrs	r3, r3, #1
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d009      	beq.n	8003fee <HAL_I2C_EV_IRQHandler+0xd2>
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	0a5b      	lsrs	r3, r3, #9
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 fdee 	bl	8004bc8 <I2C_Master_ADDR>
 8003fec:	e06e      	b.n	80040cc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	089b      	lsrs	r3, r3, #2
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d037      	beq.n	800406a <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004004:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004008:	f000 80ef 	beq.w	80041ea <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	09db      	lsrs	r3, r3, #7
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00f      	beq.n	8004038 <HAL_I2C_EV_IRQHandler+0x11c>
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	0a9b      	lsrs	r3, r3, #10
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b00      	cmp	r3, #0
 8004022:	d009      	beq.n	8004038 <HAL_I2C_EV_IRQHandler+0x11c>
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	089b      	lsrs	r3, r3, #2
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b00      	cmp	r3, #0
 800402e:	d103      	bne.n	8004038 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 f9eb 	bl	800440c <I2C_MasterTransmit_TXE>
 8004036:	e049      	b.n	80040cc <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	089b      	lsrs	r3, r3, #2
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 80d2 	beq.w	80041ea <HAL_I2C_EV_IRQHandler+0x2ce>
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	0a5b      	lsrs	r3, r3, #9
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 80cb 	beq.w	80041ea <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8004054:	7bfb      	ldrb	r3, [r7, #15]
 8004056:	2b10      	cmp	r3, #16
 8004058:	d103      	bne.n	8004062 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 fa72 	bl	8004544 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004060:	e0c3      	b.n	80041ea <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 fad6 	bl	8004614 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004068:	e0bf      	b.n	80041ea <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004074:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004078:	f000 80b7 	beq.w	80041ea <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	099b      	lsrs	r3, r3, #6
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00f      	beq.n	80040a8 <HAL_I2C_EV_IRQHandler+0x18c>
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	0a9b      	lsrs	r3, r3, #10
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	d009      	beq.n	80040a8 <HAL_I2C_EV_IRQHandler+0x18c>
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	089b      	lsrs	r3, r3, #2
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b00      	cmp	r3, #0
 800409e:	d103      	bne.n	80040a8 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 fb46 	bl	8004732 <I2C_MasterReceive_RXNE>
 80040a6:	e011      	b.n	80040cc <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	089b      	lsrs	r3, r3, #2
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 809a 	beq.w	80041ea <HAL_I2C_EV_IRQHandler+0x2ce>
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	0a5b      	lsrs	r3, r3, #9
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 8093 	beq.w	80041ea <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 fbe5 	bl	8004894 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040ca:	e08e      	b.n	80041ea <HAL_I2C_EV_IRQHandler+0x2ce>
 80040cc:	e08d      	b.n	80041ea <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d004      	beq.n	80040e0 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	61fb      	str	r3, [r7, #28]
 80040de:	e007      	b.n	80040f0 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	085b      	lsrs	r3, r3, #1
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d012      	beq.n	8004122 <HAL_I2C_EV_IRQHandler+0x206>
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	0a5b      	lsrs	r3, r3, #9
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00c      	beq.n	8004122 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004118:	69b9      	ldr	r1, [r7, #24]
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 ffa3 	bl	8005066 <I2C_Slave_ADDR>
 8004120:	e066      	b.n	80041f0 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	091b      	lsrs	r3, r3, #4
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d009      	beq.n	8004142 <HAL_I2C_EV_IRQHandler+0x226>
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	0a5b      	lsrs	r3, r3, #9
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 ffd8 	bl	80050f0 <I2C_Slave_STOPF>
 8004140:	e056      	b.n	80041f0 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004142:	7bbb      	ldrb	r3, [r7, #14]
 8004144:	2b21      	cmp	r3, #33	; 0x21
 8004146:	d002      	beq.n	800414e <HAL_I2C_EV_IRQHandler+0x232>
 8004148:	7bbb      	ldrb	r3, [r7, #14]
 800414a:	2b29      	cmp	r3, #41	; 0x29
 800414c:	d125      	bne.n	800419a <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	09db      	lsrs	r3, r3, #7
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00f      	beq.n	800417a <HAL_I2C_EV_IRQHandler+0x25e>
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	0a9b      	lsrs	r3, r3, #10
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d009      	beq.n	800417a <HAL_I2C_EV_IRQHandler+0x25e>
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	089b      	lsrs	r3, r3, #2
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d103      	bne.n	800417a <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 feb9 	bl	8004eea <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004178:	e039      	b.n	80041ee <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	089b      	lsrs	r3, r3, #2
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d033      	beq.n	80041ee <HAL_I2C_EV_IRQHandler+0x2d2>
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	0a5b      	lsrs	r3, r3, #9
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d02d      	beq.n	80041ee <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fee6 	bl	8004f64 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004198:	e029      	b.n	80041ee <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	099b      	lsrs	r3, r3, #6
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00f      	beq.n	80041c6 <HAL_I2C_EV_IRQHandler+0x2aa>
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	0a9b      	lsrs	r3, r3, #10
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d009      	beq.n	80041c6 <HAL_I2C_EV_IRQHandler+0x2aa>
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	089b      	lsrs	r3, r3, #2
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d103      	bne.n	80041c6 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 fef1 	bl	8004fa6 <I2C_SlaveReceive_RXNE>
 80041c4:	e014      	b.n	80041f0 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	089b      	lsrs	r3, r3, #2
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00e      	beq.n	80041f0 <HAL_I2C_EV_IRQHandler+0x2d4>
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	0a5b      	lsrs	r3, r3, #9
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d008      	beq.n	80041f0 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 ff1f 	bl	8005022 <I2C_SlaveReceive_BTF>
 80041e4:	e004      	b.n	80041f0 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 80041e6:	bf00      	nop
 80041e8:	e002      	b.n	80041f0 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041ea:	bf00      	nop
 80041ec:	e000      	b.n	80041f0 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041ee:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80041f0:	3720      	adds	r7, #32
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b08a      	sub	sp, #40	; 0x28
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800420e:	2300      	movs	r3, #0
 8004210:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004218:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800421a:	6a3b      	ldr	r3, [r7, #32]
 800421c:	0a1b      	lsrs	r3, r3, #8
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00e      	beq.n	8004244 <HAL_I2C_ER_IRQHandler+0x4e>
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	0a1b      	lsrs	r3, r3, #8
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d008      	beq.n	8004244 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004234:	f043 0301 	orr.w	r3, r3, #1
 8004238:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004242:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004244:	6a3b      	ldr	r3, [r7, #32]
 8004246:	0a5b      	lsrs	r3, r3, #9
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00e      	beq.n	800426e <HAL_I2C_ER_IRQHandler+0x78>
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	0a1b      	lsrs	r3, r3, #8
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	2b00      	cmp	r3, #0
 800425a:	d008      	beq.n	800426e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425e:	f043 0302 	orr.w	r3, r3, #2
 8004262:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800426c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800426e:	6a3b      	ldr	r3, [r7, #32]
 8004270:	0a9b      	lsrs	r3, r3, #10
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d03f      	beq.n	80042fa <HAL_I2C_ER_IRQHandler+0x104>
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	0a1b      	lsrs	r3, r3, #8
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	d039      	beq.n	80042fa <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004286:	7efb      	ldrb	r3, [r7, #27]
 8004288:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428e:	b29b      	uxth	r3, r3
 8004290:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004298:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80042a0:	7ebb      	ldrb	r3, [r7, #26]
 80042a2:	2b20      	cmp	r3, #32
 80042a4:	d112      	bne.n	80042cc <HAL_I2C_ER_IRQHandler+0xd6>
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10f      	bne.n	80042cc <HAL_I2C_ER_IRQHandler+0xd6>
 80042ac:	7cfb      	ldrb	r3, [r7, #19]
 80042ae:	2b21      	cmp	r3, #33	; 0x21
 80042b0:	d008      	beq.n	80042c4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80042b2:	7cfb      	ldrb	r3, [r7, #19]
 80042b4:	2b29      	cmp	r3, #41	; 0x29
 80042b6:	d005      	beq.n	80042c4 <HAL_I2C_ER_IRQHandler+0xce>
 80042b8:	7cfb      	ldrb	r3, [r7, #19]
 80042ba:	2b28      	cmp	r3, #40	; 0x28
 80042bc:	d106      	bne.n	80042cc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2b21      	cmp	r3, #33	; 0x21
 80042c2:	d103      	bne.n	80042cc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f001 f843 	bl	8005350 <I2C_Slave_AF>
 80042ca:	e016      	b.n	80042fa <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042d4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	f043 0304 	orr.w	r3, r3, #4
 80042dc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80042de:	7efb      	ldrb	r3, [r7, #27]
 80042e0:	2b10      	cmp	r3, #16
 80042e2:	d002      	beq.n	80042ea <HAL_I2C_ER_IRQHandler+0xf4>
 80042e4:	7efb      	ldrb	r3, [r7, #27]
 80042e6:	2b40      	cmp	r3, #64	; 0x40
 80042e8:	d107      	bne.n	80042fa <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042f8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	0adb      	lsrs	r3, r3, #11
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00e      	beq.n	8004324 <HAL_I2C_ER_IRQHandler+0x12e>
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	0a1b      	lsrs	r3, r3, #8
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d008      	beq.n	8004324 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	f043 0308 	orr.w	r3, r3, #8
 8004318:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004322:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	2b00      	cmp	r3, #0
 8004328:	d008      	beq.n	800433c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800432e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004330:	431a      	orrs	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f001 f87a 	bl	8005430 <I2C_ITError>
  }
}
 800433c:	bf00      	nop
 800433e:	3728      	adds	r7, #40	; 0x28
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	460b      	mov	r3, r1
 8004376:	70fb      	strb	r3, [r7, #3]
 8004378:	4613      	mov	r3, r2
 800437a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e6:	b2db      	uxtb	r3, r3
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004400:	4618      	mov	r0, r3
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800441a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004422:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004428:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800442e:	2b00      	cmp	r3, #0
 8004430:	d150      	bne.n	80044d4 <I2C_MasterTransmit_TXE+0xc8>
 8004432:	7bfb      	ldrb	r3, [r7, #15]
 8004434:	2b21      	cmp	r3, #33	; 0x21
 8004436:	d14d      	bne.n	80044d4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2b08      	cmp	r3, #8
 800443c:	d01d      	beq.n	800447a <I2C_MasterTransmit_TXE+0x6e>
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	2b20      	cmp	r3, #32
 8004442:	d01a      	beq.n	800447a <I2C_MasterTransmit_TXE+0x6e>
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800444a:	d016      	beq.n	800447a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800445a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2211      	movs	r2, #17
 8004460:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2220      	movs	r2, #32
 800446e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7fc f9a6 	bl	80007c4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004478:	e060      	b.n	800453c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004488:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004498:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2220      	movs	r2, #32
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b40      	cmp	r3, #64	; 0x40
 80044b2:	d107      	bne.n	80044c4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7ff ff6d 	bl	800439c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80044c2:	e03b      	b.n	800453c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7fc f979 	bl	80007c4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80044d2:	e033      	b.n	800453c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
 80044d6:	2b21      	cmp	r3, #33	; 0x21
 80044d8:	d005      	beq.n	80044e6 <I2C_MasterTransmit_TXE+0xda>
 80044da:	7bbb      	ldrb	r3, [r7, #14]
 80044dc:	2b40      	cmp	r3, #64	; 0x40
 80044de:	d12d      	bne.n	800453c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
 80044e2:	2b22      	cmp	r3, #34	; 0x22
 80044e4:	d12a      	bne.n	800453c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d108      	bne.n	8004502 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044fe:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004500:	e01c      	b.n	800453c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b40      	cmp	r3, #64	; 0x40
 800450c:	d103      	bne.n	8004516 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f880 	bl	8004614 <I2C_MemoryTransmit_TXE_BTF>
}
 8004514:	e012      	b.n	800453c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	781a      	ldrb	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004530:	b29b      	uxth	r3, r3
 8004532:	3b01      	subs	r3, #1
 8004534:	b29a      	uxth	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800453a:	e7ff      	b.n	800453c <I2C_MasterTransmit_TXE+0x130>
 800453c:	bf00      	nop
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b21      	cmp	r3, #33	; 0x21
 800455c:	d156      	bne.n	800460c <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004562:	b29b      	uxth	r3, r3
 8004564:	2b00      	cmp	r3, #0
 8004566:	d012      	beq.n	800458e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	781a      	ldrb	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004582:	b29b      	uxth	r3, r3
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800458c:	e03e      	b.n	800460c <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2b08      	cmp	r3, #8
 8004592:	d01d      	beq.n	80045d0 <I2C_MasterTransmit_BTF+0x8c>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b20      	cmp	r3, #32
 8004598:	d01a      	beq.n	80045d0 <I2C_MasterTransmit_BTF+0x8c>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045a0:	d016      	beq.n	80045d0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045b0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2211      	movs	r2, #17
 80045b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7fc f8fb 	bl	80007c4 <HAL_I2C_MasterTxCpltCallback>
}
 80045ce:	e01d      	b.n	800460c <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045de:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ee:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2220      	movs	r2, #32
 80045fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7fc f8dc 	bl	80007c4 <HAL_I2C_MasterTxCpltCallback>
}
 800460c:	bf00      	nop
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004622:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004628:	2b00      	cmp	r3, #0
 800462a:	d11d      	bne.n	8004668 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004630:	2b01      	cmp	r3, #1
 8004632:	d10b      	bne.n	800464c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004638:	b2da      	uxtb	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004644:	1c9a      	adds	r2, r3, #2
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800464a:	e06e      	b.n	800472a <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004650:	b29b      	uxth	r3, r3
 8004652:	121b      	asrs	r3, r3, #8
 8004654:	b2da      	uxtb	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004666:	e060      	b.n	800472a <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800466c:	2b01      	cmp	r3, #1
 800466e:	d10b      	bne.n	8004688 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004674:	b2da      	uxtb	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004680:	1c5a      	adds	r2, r3, #1
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004686:	e050      	b.n	800472a <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468c:	2b02      	cmp	r3, #2
 800468e:	d14c      	bne.n	800472a <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004690:	7bfb      	ldrb	r3, [r7, #15]
 8004692:	2b22      	cmp	r3, #34	; 0x22
 8004694:	d108      	bne.n	80046a8 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046a4:	601a      	str	r2, [r3, #0]
}
 80046a6:	e040      	b.n	800472a <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d015      	beq.n	80046de <I2C_MemoryTransmit_TXE_BTF+0xca>
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
 80046b4:	2b21      	cmp	r3, #33	; 0x21
 80046b6:	d112      	bne.n	80046de <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	781a      	ldrb	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	1c5a      	adds	r2, r3, #1
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	3b01      	subs	r3, #1
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80046dc:	e025      	b.n	800472a <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d120      	bne.n	800472a <I2C_MemoryTransmit_TXE_BTF+0x116>
 80046e8:	7bfb      	ldrb	r3, [r7, #15]
 80046ea:	2b21      	cmp	r3, #33	; 0x21
 80046ec:	d11d      	bne.n	800472a <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046fc:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800470c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2220      	movs	r2, #32
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7ff fe39 	bl	800439c <HAL_I2C_MemTxCpltCallback>
}
 800472a:	bf00      	nop
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b084      	sub	sp, #16
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b22      	cmp	r3, #34	; 0x22
 8004744:	f040 80a2 	bne.w	800488c <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800474c:	b29b      	uxth	r3, r3
 800474e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2b03      	cmp	r3, #3
 8004754:	d921      	bls.n	800479a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	691a      	ldr	r2, [r3, #16]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	b2d2      	uxtb	r2, r2
 8004762:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004772:	b29b      	uxth	r3, r3
 8004774:	3b01      	subs	r3, #1
 8004776:	b29a      	uxth	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004780:	b29b      	uxth	r3, r3
 8004782:	2b03      	cmp	r3, #3
 8004784:	f040 8082 	bne.w	800488c <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004796:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004798:	e078      	b.n	800488c <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d074      	beq.n	800488c <I2C_MasterReceive_RXNE+0x15a>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d002      	beq.n	80047ae <I2C_MasterReceive_RXNE+0x7c>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d16e      	bne.n	800488c <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f001 f818 	bl	80057e4 <I2C_WaitOnSTOPRequestThroughIT>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d142      	bne.n	8004840 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047c8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047d8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	691a      	ldr	r2, [r3, #16]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	b2d2      	uxtb	r2, r2
 80047e6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	3b01      	subs	r3, #1
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2220      	movs	r2, #32
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b40      	cmp	r3, #64	; 0x40
 8004812:	d10a      	bne.n	800482a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7ff fdc4 	bl	80043b0 <HAL_I2C_MemRxCpltCallback>
}
 8004828:	e030      	b.n	800488c <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2212      	movs	r2, #18
 8004836:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f7fb ffd3 	bl	80007e4 <HAL_I2C_MasterRxCpltCallback>
}
 800483e:	e025      	b.n	800488c <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800484e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691a      	ldr	r2, [r3, #16]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	1c5a      	adds	r2, r3, #1
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486c:	b29b      	uxth	r3, r3
 800486e:	3b01      	subs	r3, #1
 8004870:	b29a      	uxth	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7fb ffbc 	bl	8000804 <HAL_I2C_ErrorCallback>
}
 800488c:	bf00      	nop
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	2b04      	cmp	r3, #4
 80048aa:	d11b      	bne.n	80048e4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ba:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	691a      	ldr	r2, [r3, #16]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	1c5a      	adds	r2, r3, #1
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80048e2:	e0bd      	b.n	8004a60 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	2b03      	cmp	r3, #3
 80048ec:	d129      	bne.n	8004942 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048fc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2b04      	cmp	r3, #4
 8004902:	d00a      	beq.n	800491a <I2C_MasterReceive_BTF+0x86>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2b02      	cmp	r3, #2
 8004908:	d007      	beq.n	800491a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004918:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	691a      	ldr	r2, [r3, #16]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	b2d2      	uxtb	r2, r2
 8004926:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	1c5a      	adds	r2, r3, #1
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004936:	b29b      	uxth	r3, r3
 8004938:	3b01      	subs	r3, #1
 800493a:	b29a      	uxth	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004940:	e08e      	b.n	8004a60 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004946:	b29b      	uxth	r3, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d176      	bne.n	8004a3a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d002      	beq.n	8004958 <I2C_MasterReceive_BTF+0xc4>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2b10      	cmp	r3, #16
 8004956:	d108      	bne.n	800496a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	e019      	b.n	800499e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2b04      	cmp	r3, #4
 800496e:	d002      	beq.n	8004976 <I2C_MasterReceive_BTF+0xe2>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b02      	cmp	r3, #2
 8004974:	d108      	bne.n	8004988 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	e00a      	b.n	800499e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2b10      	cmp	r3, #16
 800498c:	d007      	beq.n	800499e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800499c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	b2d2      	uxtb	r2, r2
 80049aa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	691a      	ldr	r2, [r3, #16]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	1c5a      	adds	r2, r3, #1
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80049f8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2220      	movs	r2, #32
 80049fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b40      	cmp	r3, #64	; 0x40
 8004a0c:	d10a      	bne.n	8004a24 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7ff fcc7 	bl	80043b0 <HAL_I2C_MemRxCpltCallback>
}
 8004a22:	e01d      	b.n	8004a60 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2212      	movs	r2, #18
 8004a30:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7fb fed6 	bl	80007e4 <HAL_I2C_MasterRxCpltCallback>
}
 8004a38:	e012      	b.n	8004a60 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	691a      	ldr	r2, [r3, #16]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	b2d2      	uxtb	r2, r2
 8004a46:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	1c5a      	adds	r2, r3, #1
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a60:	bf00      	nop
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b40      	cmp	r3, #64	; 0x40
 8004a7a:	d117      	bne.n	8004aac <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d109      	bne.n	8004a98 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a94:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004a96:	e067      	b.n	8004b68 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	f043 0301 	orr.w	r3, r3, #1
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	611a      	str	r2, [r3, #16]
}
 8004aaa:	e05d      	b.n	8004b68 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ab4:	d133      	bne.n	8004b1e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b21      	cmp	r3, #33	; 0x21
 8004ac0:	d109      	bne.n	8004ad6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	461a      	mov	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ad2:	611a      	str	r2, [r3, #16]
 8004ad4:	e008      	b.n	8004ae8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	f043 0301 	orr.w	r3, r3, #1
 8004ae0:	b2da      	uxtb	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d004      	beq.n	8004afa <I2C_Master_SB+0x92>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d108      	bne.n	8004b0c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d032      	beq.n	8004b68 <I2C_Master_SB+0x100>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d02d      	beq.n	8004b68 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685a      	ldr	r2, [r3, #4]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b1a:	605a      	str	r2, [r3, #4]
}
 8004b1c:	e024      	b.n	8004b68 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10e      	bne.n	8004b44 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	11db      	asrs	r3, r3, #7
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	f003 0306 	and.w	r3, r3, #6
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	f063 030f 	orn	r3, r3, #15
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	611a      	str	r2, [r3, #16]
}
 8004b42:	e011      	b.n	8004b68 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d10d      	bne.n	8004b68 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	11db      	asrs	r3, r3, #7
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	f003 0306 	and.w	r3, r3, #6
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	f063 030e 	orn	r3, r3, #14
 8004b60:	b2da      	uxtb	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	611a      	str	r2, [r3, #16]
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d004      	beq.n	8004b9a <I2C_Master_ADD10+0x26>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d108      	bne.n	8004bac <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00c      	beq.n	8004bbc <I2C_Master_ADD10+0x48>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d007      	beq.n	8004bbc <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bba:	605a      	str	r2, [r3, #4]
  }
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b091      	sub	sp, #68	; 0x44
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bd6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bde:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be4:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b22      	cmp	r3, #34	; 0x22
 8004bf0:	f040 8169 	bne.w	8004ec6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10f      	bne.n	8004c1c <I2C_Master_ADDR+0x54>
 8004bfc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004c00:	2b40      	cmp	r3, #64	; 0x40
 8004c02:	d10b      	bne.n	8004c1c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c04:	2300      	movs	r3, #0
 8004c06:	633b      	str	r3, [r7, #48]	; 0x30
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	633b      	str	r3, [r7, #48]	; 0x30
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	633b      	str	r3, [r7, #48]	; 0x30
 8004c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1a:	e160      	b.n	8004ede <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d11d      	bne.n	8004c60 <I2C_Master_ADDR+0x98>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c2c:	d118      	bne.n	8004c60 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c2e:	2300      	movs	r3, #0
 8004c30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c52:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c58:	1c5a      	adds	r2, r3, #1
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	651a      	str	r2, [r3, #80]	; 0x50
 8004c5e:	e13e      	b.n	8004ede <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d113      	bne.n	8004c92 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	e115      	b.n	8004ebe <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	f040 808a 	bne.w	8004db2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ca4:	d137      	bne.n	8004d16 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cb4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cc4:	d113      	bne.n	8004cee <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	e0e7      	b.n	8004ebe <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cee:	2300      	movs	r3, #0
 8004cf0:	623b      	str	r3, [r7, #32]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	623b      	str	r3, [r7, #32]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	623b      	str	r3, [r7, #32]
 8004d02:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	e0d3      	b.n	8004ebe <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d02e      	beq.n	8004d7a <I2C_Master_ADDR+0x1b2>
 8004d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1e:	2b20      	cmp	r3, #32
 8004d20:	d02b      	beq.n	8004d7a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d24:	2b12      	cmp	r3, #18
 8004d26:	d102      	bne.n	8004d2e <I2C_Master_ADDR+0x166>
 8004d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d125      	bne.n	8004d7a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d30:	2b04      	cmp	r3, #4
 8004d32:	d00e      	beq.n	8004d52 <I2C_Master_ADDR+0x18a>
 8004d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d00b      	beq.n	8004d52 <I2C_Master_ADDR+0x18a>
 8004d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3c:	2b10      	cmp	r3, #16
 8004d3e:	d008      	beq.n	8004d52 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	e007      	b.n	8004d62 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d60:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d62:	2300      	movs	r3, #0
 8004d64:	61fb      	str	r3, [r7, #28]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	61fb      	str	r3, [r7, #28]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	61fb      	str	r3, [r7, #28]
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	e0a1      	b.n	8004ebe <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d88:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	61bb      	str	r3, [r7, #24]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	61bb      	str	r3, [r7, #24]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	61bb      	str	r3, [r7, #24]
 8004d9e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	e085      	b.n	8004ebe <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d14d      	bne.n	8004e58 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d016      	beq.n	8004df0 <I2C_Master_ADDR+0x228>
 8004dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d013      	beq.n	8004df0 <I2C_Master_ADDR+0x228>
 8004dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dca:	2b10      	cmp	r3, #16
 8004dcc:	d010      	beq.n	8004df0 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ddc:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	e007      	b.n	8004e00 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dfe:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e0e:	d117      	bne.n	8004e40 <I2C_Master_ADDR+0x278>
 8004e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e12:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e16:	d00b      	beq.n	8004e30 <I2C_Master_ADDR+0x268>
 8004e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d008      	beq.n	8004e30 <I2C_Master_ADDR+0x268>
 8004e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e20:	2b08      	cmp	r3, #8
 8004e22:	d005      	beq.n	8004e30 <I2C_Master_ADDR+0x268>
 8004e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e26:	2b10      	cmp	r3, #16
 8004e28:	d002      	beq.n	8004e30 <I2C_Master_ADDR+0x268>
 8004e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2c:	2b20      	cmp	r3, #32
 8004e2e:	d107      	bne.n	8004e40 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e3e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e40:	2300      	movs	r3, #0
 8004e42:	617b      	str	r3, [r7, #20]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	617b      	str	r3, [r7, #20]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	617b      	str	r3, [r7, #20]
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	e032      	b.n	8004ebe <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e66:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e76:	d117      	bne.n	8004ea8 <I2C_Master_ADDR+0x2e0>
 8004e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e7e:	d00b      	beq.n	8004e98 <I2C_Master_ADDR+0x2d0>
 8004e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d008      	beq.n	8004e98 <I2C_Master_ADDR+0x2d0>
 8004e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	d005      	beq.n	8004e98 <I2C_Master_ADDR+0x2d0>
 8004e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8e:	2b10      	cmp	r3, #16
 8004e90:	d002      	beq.n	8004e98 <I2C_Master_ADDR+0x2d0>
 8004e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e94:	2b20      	cmp	r3, #32
 8004e96:	d107      	bne.n	8004ea8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ea6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	613b      	str	r3, [r7, #16]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	613b      	str	r3, [r7, #16]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	613b      	str	r3, [r7, #16]
 8004ebc:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004ec4:	e00b      	b.n	8004ede <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60fb      	str	r3, [r7, #12]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	60fb      	str	r3, [r7, #12]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	68fb      	ldr	r3, [r7, #12]
}
 8004edc:	e7ff      	b.n	8004ede <I2C_Master_ADDR+0x316>
 8004ede:	bf00      	nop
 8004ee0:	3744      	adds	r7, #68	; 0x44
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b084      	sub	sp, #16
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ef8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d02b      	beq.n	8004f5c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	781a      	ldrb	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	1c5a      	adds	r2, r3, #1
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d114      	bne.n	8004f5c <I2C_SlaveTransmit_TXE+0x72>
 8004f32:	7bfb      	ldrb	r3, [r7, #15]
 8004f34:	2b29      	cmp	r3, #41	; 0x29
 8004f36:	d111      	bne.n	8004f5c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f46:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2221      	movs	r2, #33	; 0x21
 8004f4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2228      	movs	r2, #40	; 0x28
 8004f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7ff f9f4 	bl	8004344 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004f5c:	bf00      	nop
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d011      	beq.n	8004f9a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	781a      	ldrb	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	1c5a      	adds	r2, r3, #1
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	3b01      	subs	r3, #1
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004f9a:	bf00      	nop
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b084      	sub	sp, #16
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d02c      	beq.n	800501a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	691a      	ldr	r2, [r3, #16]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd2:	1c5a      	adds	r2, r3, #1
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d114      	bne.n	800501a <I2C_SlaveReceive_RXNE+0x74>
 8004ff0:	7bfb      	ldrb	r3, [r7, #15]
 8004ff2:	2b2a      	cmp	r3, #42	; 0x2a
 8004ff4:	d111      	bne.n	800501a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005004:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2222      	movs	r2, #34	; 0x22
 800500a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2228      	movs	r2, #40	; 0x28
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7ff f99f 	bl	8004358 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800501a:	bf00      	nop
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005022:	b480      	push	{r7}
 8005024:	b083      	sub	sp, #12
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800502e:	b29b      	uxth	r3, r3
 8005030:	2b00      	cmp	r3, #0
 8005032:	d012      	beq.n	800505a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	691a      	ldr	r2, [r3, #16]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503e:	b2d2      	uxtb	r2, r2
 8005040:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005046:	1c5a      	adds	r2, r3, #1
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005050:	b29b      	uxth	r3, r3
 8005052:	3b01      	subs	r3, #1
 8005054:	b29a      	uxth	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800505a:	bf00      	nop
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b084      	sub	sp, #16
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
 800506e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005070:	2300      	movs	r3, #0
 8005072:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800507a:	b2db      	uxtb	r3, r3
 800507c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005080:	2b28      	cmp	r3, #40	; 0x28
 8005082:	d127      	bne.n	80050d4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005092:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	089b      	lsrs	r3, r3, #2
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80050a0:	2301      	movs	r3, #1
 80050a2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	09db      	lsrs	r3, r3, #7
 80050a8:	f003 0301 	and.w	r3, r3, #1
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d103      	bne.n	80050b8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	81bb      	strh	r3, [r7, #12]
 80050b6:	e002      	b.n	80050be <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80050c6:	89ba      	ldrh	r2, [r7, #12]
 80050c8:	7bfb      	ldrb	r3, [r7, #15]
 80050ca:	4619      	mov	r1, r3
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7ff f94d 	bl	800436c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80050d2:	e008      	b.n	80050e6 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f06f 0202 	mvn.w	r2, #2
 80050dc:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80050e6:	bf00      	nop
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
	...

080050f0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050fe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800510e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005110:	2300      	movs	r3, #0
 8005112:	60bb      	str	r3, [r7, #8]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	60bb      	str	r3, [r7, #8]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0201 	orr.w	r2, r2, #1
 800512a:	601a      	str	r2, [r3, #0]
 800512c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800513c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800514c:	d172      	bne.n	8005234 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800514e:	7bfb      	ldrb	r3, [r7, #15]
 8005150:	2b22      	cmp	r3, #34	; 0x22
 8005152:	d002      	beq.n	800515a <I2C_Slave_STOPF+0x6a>
 8005154:	7bfb      	ldrb	r3, [r7, #15]
 8005156:	2b2a      	cmp	r3, #42	; 0x2a
 8005158:	d135      	bne.n	80051c6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	b29a      	uxth	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800516c:	b29b      	uxth	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d005      	beq.n	800517e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	f043 0204 	orr.w	r2, r3, #4
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800518c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005192:	4618      	mov	r0, r3
 8005194:	f7fe f974 	bl	8003480 <HAL_DMA_GetState>
 8005198:	4603      	mov	r3, r0
 800519a:	2b01      	cmp	r3, #1
 800519c:	d049      	beq.n	8005232 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a2:	4a69      	ldr	r2, [pc, #420]	; (8005348 <I2C_Slave_STOPF+0x258>)
 80051a4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fd ffbc 	bl	8003128 <HAL_DMA_Abort_IT>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d03d      	beq.n	8005232 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051c0:	4610      	mov	r0, r2
 80051c2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80051c4:	e035      	b.n	8005232 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d8:	b29b      	uxth	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d005      	beq.n	80051ea <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e2:	f043 0204 	orr.w	r2, r3, #4
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051fe:	4618      	mov	r0, r3
 8005200:	f7fe f93e 	bl	8003480 <HAL_DMA_GetState>
 8005204:	4603      	mov	r3, r0
 8005206:	2b01      	cmp	r3, #1
 8005208:	d014      	beq.n	8005234 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800520e:	4a4e      	ldr	r2, [pc, #312]	; (8005348 <I2C_Slave_STOPF+0x258>)
 8005210:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005216:	4618      	mov	r0, r3
 8005218:	f7fd ff86 	bl	8003128 <HAL_DMA_Abort_IT>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d008      	beq.n	8005234 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800522c:	4610      	mov	r0, r2
 800522e:	4798      	blx	r3
 8005230:	e000      	b.n	8005234 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005232:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005238:	b29b      	uxth	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d03e      	beq.n	80052bc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	f003 0304 	and.w	r3, r3, #4
 8005248:	2b04      	cmp	r3, #4
 800524a:	d112      	bne.n	8005272 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	691a      	ldr	r2, [r3, #16]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	b2d2      	uxtb	r2, r2
 8005258:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	1c5a      	adds	r2, r3, #1
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005268:	b29b      	uxth	r3, r3
 800526a:	3b01      	subs	r3, #1
 800526c:	b29a      	uxth	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527c:	2b40      	cmp	r3, #64	; 0x40
 800527e:	d112      	bne.n	80052a6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	691a      	ldr	r2, [r3, #16]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	b2d2      	uxtb	r2, r2
 800528c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005292:	1c5a      	adds	r2, r3, #1
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529c:	b29b      	uxth	r3, r3
 800529e:	3b01      	subs	r3, #1
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d005      	beq.n	80052bc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b4:	f043 0204 	orr.w	r2, r3, #4
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d003      	beq.n	80052cc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 f8b3 	bl	8005430 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80052ca:	e039      	b.n	8005340 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
 80052ce:	2b2a      	cmp	r3, #42	; 0x2a
 80052d0:	d109      	bne.n	80052e6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2228      	movs	r2, #40	; 0x28
 80052dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f7ff f839 	bl	8004358 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b28      	cmp	r3, #40	; 0x28
 80052f0:	d111      	bne.n	8005316 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a15      	ldr	r2, [pc, #84]	; (800534c <I2C_Slave_STOPF+0x25c>)
 80052f6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2220      	movs	r2, #32
 8005302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7ff f83a 	bl	8004388 <HAL_I2C_ListenCpltCallback>
}
 8005314:	e014      	b.n	8005340 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531a:	2b22      	cmp	r3, #34	; 0x22
 800531c:	d002      	beq.n	8005324 <I2C_Slave_STOPF+0x234>
 800531e:	7bfb      	ldrb	r3, [r7, #15]
 8005320:	2b22      	cmp	r3, #34	; 0x22
 8005322:	d10d      	bne.n	8005340 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2220      	movs	r2, #32
 800532e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7ff f80c 	bl	8004358 <HAL_I2C_SlaveRxCpltCallback>
}
 8005340:	bf00      	nop
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	08005695 	.word	0x08005695
 800534c:	ffff0000 	.word	0xffff0000

08005350 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800535e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005364:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	2b08      	cmp	r3, #8
 800536a:	d002      	beq.n	8005372 <I2C_Slave_AF+0x22>
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2b20      	cmp	r3, #32
 8005370:	d129      	bne.n	80053c6 <I2C_Slave_AF+0x76>
 8005372:	7bfb      	ldrb	r3, [r7, #15]
 8005374:	2b28      	cmp	r3, #40	; 0x28
 8005376:	d126      	bne.n	80053c6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a2c      	ldr	r2, [pc, #176]	; (800542c <I2C_Slave_AF+0xdc>)
 800537c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800538c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005396:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053a6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2220      	movs	r2, #32
 80053b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7fe ffe2 	bl	8004388 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80053c4:	e02e      	b.n	8005424 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
 80053c8:	2b21      	cmp	r3, #33	; 0x21
 80053ca:	d126      	bne.n	800541a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a17      	ldr	r2, [pc, #92]	; (800542c <I2C_Slave_AF+0xdc>)
 80053d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2221      	movs	r2, #33	; 0x21
 80053d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2220      	movs	r2, #32
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053f6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005400:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005410:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f7fe ff96 	bl	8004344 <HAL_I2C_SlaveTxCpltCallback>
}
 8005418:	e004      	b.n	8005424 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005422:	615a      	str	r2, [r3, #20]
}
 8005424:	bf00      	nop
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	ffff0000 	.word	0xffff0000

08005430 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800543e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005446:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005448:	7bbb      	ldrb	r3, [r7, #14]
 800544a:	2b10      	cmp	r3, #16
 800544c:	d002      	beq.n	8005454 <I2C_ITError+0x24>
 800544e:	7bbb      	ldrb	r3, [r7, #14]
 8005450:	2b40      	cmp	r3, #64	; 0x40
 8005452:	d10a      	bne.n	800546a <I2C_ITError+0x3a>
 8005454:	7bfb      	ldrb	r3, [r7, #15]
 8005456:	2b22      	cmp	r3, #34	; 0x22
 8005458:	d107      	bne.n	800546a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005468:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800546a:	7bfb      	ldrb	r3, [r7, #15]
 800546c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005470:	2b28      	cmp	r3, #40	; 0x28
 8005472:	d107      	bne.n	8005484 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2228      	movs	r2, #40	; 0x28
 800547e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005482:	e015      	b.n	80054b0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800548e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005492:	d00a      	beq.n	80054aa <I2C_ITError+0x7a>
 8005494:	7bfb      	ldrb	r3, [r7, #15]
 8005496:	2b60      	cmp	r3, #96	; 0x60
 8005498:	d007      	beq.n	80054aa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2220      	movs	r2, #32
 800549e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054be:	d162      	bne.n	8005586 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685a      	ldr	r2, [r3, #4]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054ce:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d020      	beq.n	8005520 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e2:	4a6a      	ldr	r2, [pc, #424]	; (800568c <I2C_ITError+0x25c>)
 80054e4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fd fe1c 	bl	8003128 <HAL_DMA_Abort_IT>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 8089 	beq.w	800560a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f022 0201 	bic.w	r2, r2, #1
 8005506:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2220      	movs	r2, #32
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800551a:	4610      	mov	r0, r2
 800551c:	4798      	blx	r3
 800551e:	e074      	b.n	800560a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005524:	4a59      	ldr	r2, [pc, #356]	; (800568c <I2C_ITError+0x25c>)
 8005526:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552c:	4618      	mov	r0, r3
 800552e:	f7fd fdfb 	bl	8003128 <HAL_DMA_Abort_IT>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d068      	beq.n	800560a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005542:	2b40      	cmp	r3, #64	; 0x40
 8005544:	d10b      	bne.n	800555e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	691a      	ldr	r2, [r3, #16]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	b2d2      	uxtb	r2, r2
 8005552:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005558:	1c5a      	adds	r2, r3, #1
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0201 	bic.w	r2, r2, #1
 800556c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2220      	movs	r2, #32
 8005572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005580:	4610      	mov	r0, r2
 8005582:	4798      	blx	r3
 8005584:	e041      	b.n	800560a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b60      	cmp	r3, #96	; 0x60
 8005590:	d125      	bne.n	80055de <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2220      	movs	r2, #32
 8005596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055aa:	2b40      	cmp	r3, #64	; 0x40
 80055ac:	d10b      	bne.n	80055c6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	691a      	ldr	r2, [r3, #16]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	b2d2      	uxtb	r2, r2
 80055ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c0:	1c5a      	adds	r2, r3, #1
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 0201 	bic.w	r2, r2, #1
 80055d4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7fe fef4 	bl	80043c4 <HAL_I2C_AbortCpltCallback>
 80055dc:	e015      	b.n	800560a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e8:	2b40      	cmp	r3, #64	; 0x40
 80055ea:	d10b      	bne.n	8005604 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	691a      	ldr	r2, [r3, #16]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f6:	b2d2      	uxtb	r2, r2
 80055f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7fb f8fd 	bl	8000804 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10e      	bne.n	8005638 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005620:	2b00      	cmp	r3, #0
 8005622:	d109      	bne.n	8005638 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800562a:	2b00      	cmp	r3, #0
 800562c:	d104      	bne.n	8005638 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005634:	2b00      	cmp	r3, #0
 8005636:	d007      	beq.n	8005648 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005646:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800564e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005654:	f003 0304 	and.w	r3, r3, #4
 8005658:	2b04      	cmp	r3, #4
 800565a:	d113      	bne.n	8005684 <I2C_ITError+0x254>
 800565c:	7bfb      	ldrb	r3, [r7, #15]
 800565e:	2b28      	cmp	r3, #40	; 0x28
 8005660:	d110      	bne.n	8005684 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a0a      	ldr	r2, [pc, #40]	; (8005690 <I2C_ITError+0x260>)
 8005666:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2220      	movs	r2, #32
 8005672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7fe fe82 	bl	8004388 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005684:	bf00      	nop
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	08005695 	.word	0x08005695
 8005690:	ffff0000 	.word	0xffff0000

08005694 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800569c:	2300      	movs	r3, #0
 800569e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ac:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80056ae:	4b4b      	ldr	r3, [pc, #300]	; (80057dc <I2C_DMAAbort+0x148>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	08db      	lsrs	r3, r3, #3
 80056b4:	4a4a      	ldr	r2, [pc, #296]	; (80057e0 <I2C_DMAAbort+0x14c>)
 80056b6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ba:	0a1a      	lsrs	r2, r3, #8
 80056bc:	4613      	mov	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4413      	add	r3, r2
 80056c2:	00da      	lsls	r2, r3, #3
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d106      	bne.n	80056dc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d2:	f043 0220 	orr.w	r2, r3, #32
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80056da:	e00a      	b.n	80056f2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	3b01      	subs	r3, #1
 80056e0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056f0:	d0ea      	beq.n	80056c8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056fe:	2200      	movs	r2, #0
 8005700:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570e:	2200      	movs	r2, #0
 8005710:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005720:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	2200      	movs	r2, #0
 8005726:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800572c:	2b00      	cmp	r3, #0
 800572e:	d003      	beq.n	8005738 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005734:	2200      	movs	r2, #0
 8005736:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573c:	2b00      	cmp	r3, #0
 800573e:	d003      	beq.n	8005748 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005744:	2200      	movs	r2, #0
 8005746:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f022 0201 	bic.w	r2, r2, #1
 8005756:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b60      	cmp	r3, #96	; 0x60
 8005762:	d10e      	bne.n	8005782 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	2220      	movs	r2, #32
 8005768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	2200      	movs	r2, #0
 8005778:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800577a:	6978      	ldr	r0, [r7, #20]
 800577c:	f7fe fe22 	bl	80043c4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005780:	e027      	b.n	80057d2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005782:	7cfb      	ldrb	r3, [r7, #19]
 8005784:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005788:	2b28      	cmp	r3, #40	; 0x28
 800578a:	d117      	bne.n	80057bc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f042 0201 	orr.w	r2, r2, #1
 800579a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057aa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	2200      	movs	r2, #0
 80057b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2228      	movs	r2, #40	; 0x28
 80057b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80057ba:	e007      	b.n	80057cc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	2220      	movs	r2, #32
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80057cc:	6978      	ldr	r0, [r7, #20]
 80057ce:	f7fb f819 	bl	8000804 <HAL_I2C_ErrorCallback>
}
 80057d2:	bf00      	nop
 80057d4:	3718      	adds	r7, #24
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	20000020 	.word	0x20000020
 80057e0:	14f8b589 	.word	0x14f8b589

080057e4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057ec:	2300      	movs	r3, #0
 80057ee:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80057f0:	4b13      	ldr	r3, [pc, #76]	; (8005840 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	08db      	lsrs	r3, r3, #3
 80057f6:	4a13      	ldr	r2, [pc, #76]	; (8005844 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80057f8:	fba2 2303 	umull	r2, r3, r2, r3
 80057fc:	0a1a      	lsrs	r2, r3, #8
 80057fe:	4613      	mov	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	3b01      	subs	r3, #1
 800580a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d107      	bne.n	8005822 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005816:	f043 0220 	orr.w	r2, r3, #32
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e008      	b.n	8005834 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800582c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005830:	d0e9      	beq.n	8005806 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	20000020 	.word	0x20000020
 8005844:	14f8b589 	.word	0x14f8b589

08005848 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005854:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005858:	d103      	bne.n	8005862 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005860:	e007      	b.n	8005872 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005866:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800586a:	d102      	bne.n	8005872 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2208      	movs	r2, #8
 8005870:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005872:	bf00      	nop
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
	...

08005880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e0cc      	b.n	8005a2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005894:	4b68      	ldr	r3, [pc, #416]	; (8005a38 <HAL_RCC_ClockConfig+0x1b8>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 030f 	and.w	r3, r3, #15
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d90c      	bls.n	80058bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058a2:	4b65      	ldr	r3, [pc, #404]	; (8005a38 <HAL_RCC_ClockConfig+0x1b8>)
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	b2d2      	uxtb	r2, r2
 80058a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058aa:	4b63      	ldr	r3, [pc, #396]	; (8005a38 <HAL_RCC_ClockConfig+0x1b8>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 030f 	and.w	r3, r3, #15
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d001      	beq.n	80058bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e0b8      	b.n	8005a2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d020      	beq.n	800590a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0304 	and.w	r3, r3, #4
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d005      	beq.n	80058e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058d4:	4b59      	ldr	r3, [pc, #356]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	4a58      	ldr	r2, [pc, #352]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 80058da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0308 	and.w	r3, r3, #8
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d005      	beq.n	80058f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058ec:	4b53      	ldr	r3, [pc, #332]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	4a52      	ldr	r2, [pc, #328]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 80058f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058f8:	4b50      	ldr	r3, [pc, #320]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	494d      	ldr	r1, [pc, #308]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 8005906:	4313      	orrs	r3, r2
 8005908:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d044      	beq.n	80059a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d107      	bne.n	800592e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800591e:	4b47      	ldr	r3, [pc, #284]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d119      	bne.n	800595e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e07f      	b.n	8005a2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	2b02      	cmp	r3, #2
 8005934:	d003      	beq.n	800593e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800593a:	2b03      	cmp	r3, #3
 800593c:	d107      	bne.n	800594e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800593e:	4b3f      	ldr	r3, [pc, #252]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d109      	bne.n	800595e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e06f      	b.n	8005a2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800594e:	4b3b      	ldr	r3, [pc, #236]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e067      	b.n	8005a2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800595e:	4b37      	ldr	r3, [pc, #220]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f023 0203 	bic.w	r2, r3, #3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	4934      	ldr	r1, [pc, #208]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 800596c:	4313      	orrs	r3, r2
 800596e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005970:	f7fd f922 	bl	8002bb8 <HAL_GetTick>
 8005974:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005976:	e00a      	b.n	800598e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005978:	f7fd f91e 	bl	8002bb8 <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	f241 3288 	movw	r2, #5000	; 0x1388
 8005986:	4293      	cmp	r3, r2
 8005988:	d901      	bls.n	800598e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e04f      	b.n	8005a2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800598e:	4b2b      	ldr	r3, [pc, #172]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f003 020c 	and.w	r2, r3, #12
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	429a      	cmp	r2, r3
 800599e:	d1eb      	bne.n	8005978 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059a0:	4b25      	ldr	r3, [pc, #148]	; (8005a38 <HAL_RCC_ClockConfig+0x1b8>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 030f 	and.w	r3, r3, #15
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d20c      	bcs.n	80059c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ae:	4b22      	ldr	r3, [pc, #136]	; (8005a38 <HAL_RCC_ClockConfig+0x1b8>)
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059b6:	4b20      	ldr	r3, [pc, #128]	; (8005a38 <HAL_RCC_ClockConfig+0x1b8>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 030f 	and.w	r3, r3, #15
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d001      	beq.n	80059c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e032      	b.n	8005a2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0304 	and.w	r3, r3, #4
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d008      	beq.n	80059e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059d4:	4b19      	ldr	r3, [pc, #100]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	4916      	ldr	r1, [pc, #88]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0308 	and.w	r3, r3, #8
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d009      	beq.n	8005a06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059f2:	4b12      	ldr	r3, [pc, #72]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	490e      	ldr	r1, [pc, #56]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a06:	f000 f855 	bl	8005ab4 <HAL_RCC_GetSysClockFreq>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	4b0b      	ldr	r3, [pc, #44]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	091b      	lsrs	r3, r3, #4
 8005a12:	f003 030f 	and.w	r3, r3, #15
 8005a16:	490a      	ldr	r1, [pc, #40]	; (8005a40 <HAL_RCC_ClockConfig+0x1c0>)
 8005a18:	5ccb      	ldrb	r3, [r1, r3]
 8005a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a1e:	4a09      	ldr	r2, [pc, #36]	; (8005a44 <HAL_RCC_ClockConfig+0x1c4>)
 8005a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a22:	4b09      	ldr	r3, [pc, #36]	; (8005a48 <HAL_RCC_ClockConfig+0x1c8>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fd f882 	bl	8002b30 <HAL_InitTick>

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	40023c00 	.word	0x40023c00
 8005a3c:	40023800 	.word	0x40023800
 8005a40:	08008b00 	.word	0x08008b00
 8005a44:	20000020 	.word	0x20000020
 8005a48:	20000024 	.word	0x20000024

08005a4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a50:	4b03      	ldr	r3, [pc, #12]	; (8005a60 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a52:	681b      	ldr	r3, [r3, #0]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	20000020 	.word	0x20000020

08005a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a68:	f7ff fff0 	bl	8005a4c <HAL_RCC_GetHCLKFreq>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	4b05      	ldr	r3, [pc, #20]	; (8005a84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	0a9b      	lsrs	r3, r3, #10
 8005a74:	f003 0307 	and.w	r3, r3, #7
 8005a78:	4903      	ldr	r1, [pc, #12]	; (8005a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a7a:	5ccb      	ldrb	r3, [r1, r3]
 8005a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	40023800 	.word	0x40023800
 8005a88:	08008b10 	.word	0x08008b10

08005a8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a90:	f7ff ffdc 	bl	8005a4c <HAL_RCC_GetHCLKFreq>
 8005a94:	4602      	mov	r2, r0
 8005a96:	4b05      	ldr	r3, [pc, #20]	; (8005aac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	0b5b      	lsrs	r3, r3, #13
 8005a9c:	f003 0307 	and.w	r3, r3, #7
 8005aa0:	4903      	ldr	r1, [pc, #12]	; (8005ab0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005aa2:	5ccb      	ldrb	r3, [r1, r3]
 8005aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	40023800 	.word	0x40023800
 8005ab0:	08008b10 	.word	0x08008b10

08005ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ab8:	b0ae      	sub	sp, #184	; 0xb8
 8005aba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005abc:	2300      	movs	r3, #0
 8005abe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ada:	4bcb      	ldr	r3, [pc, #812]	; (8005e08 <HAL_RCC_GetSysClockFreq+0x354>)
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f003 030c 	and.w	r3, r3, #12
 8005ae2:	2b0c      	cmp	r3, #12
 8005ae4:	f200 8206 	bhi.w	8005ef4 <HAL_RCC_GetSysClockFreq+0x440>
 8005ae8:	a201      	add	r2, pc, #4	; (adr r2, 8005af0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aee:	bf00      	nop
 8005af0:	08005b25 	.word	0x08005b25
 8005af4:	08005ef5 	.word	0x08005ef5
 8005af8:	08005ef5 	.word	0x08005ef5
 8005afc:	08005ef5 	.word	0x08005ef5
 8005b00:	08005b2d 	.word	0x08005b2d
 8005b04:	08005ef5 	.word	0x08005ef5
 8005b08:	08005ef5 	.word	0x08005ef5
 8005b0c:	08005ef5 	.word	0x08005ef5
 8005b10:	08005b35 	.word	0x08005b35
 8005b14:	08005ef5 	.word	0x08005ef5
 8005b18:	08005ef5 	.word	0x08005ef5
 8005b1c:	08005ef5 	.word	0x08005ef5
 8005b20:	08005d25 	.word	0x08005d25
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b24:	4bb9      	ldr	r3, [pc, #740]	; (8005e0c <HAL_RCC_GetSysClockFreq+0x358>)
 8005b26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8005b2a:	e1e7      	b.n	8005efc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b2c:	4bb8      	ldr	r3, [pc, #736]	; (8005e10 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005b2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005b32:	e1e3      	b.n	8005efc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b34:	4bb4      	ldr	r3, [pc, #720]	; (8005e08 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b40:	4bb1      	ldr	r3, [pc, #708]	; (8005e08 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d071      	beq.n	8005c30 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b4c:	4bae      	ldr	r3, [pc, #696]	; (8005e08 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	099b      	lsrs	r3, r3, #6
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b58:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005b5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b68:	2300      	movs	r3, #0
 8005b6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005b6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005b72:	4622      	mov	r2, r4
 8005b74:	462b      	mov	r3, r5
 8005b76:	f04f 0000 	mov.w	r0, #0
 8005b7a:	f04f 0100 	mov.w	r1, #0
 8005b7e:	0159      	lsls	r1, r3, #5
 8005b80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b84:	0150      	lsls	r0, r2, #5
 8005b86:	4602      	mov	r2, r0
 8005b88:	460b      	mov	r3, r1
 8005b8a:	4621      	mov	r1, r4
 8005b8c:	1a51      	subs	r1, r2, r1
 8005b8e:	6439      	str	r1, [r7, #64]	; 0x40
 8005b90:	4629      	mov	r1, r5
 8005b92:	eb63 0301 	sbc.w	r3, r3, r1
 8005b96:	647b      	str	r3, [r7, #68]	; 0x44
 8005b98:	f04f 0200 	mov.w	r2, #0
 8005b9c:	f04f 0300 	mov.w	r3, #0
 8005ba0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005ba4:	4649      	mov	r1, r9
 8005ba6:	018b      	lsls	r3, r1, #6
 8005ba8:	4641      	mov	r1, r8
 8005baa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005bae:	4641      	mov	r1, r8
 8005bb0:	018a      	lsls	r2, r1, #6
 8005bb2:	4641      	mov	r1, r8
 8005bb4:	1a51      	subs	r1, r2, r1
 8005bb6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005bb8:	4649      	mov	r1, r9
 8005bba:	eb63 0301 	sbc.w	r3, r3, r1
 8005bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bc0:	f04f 0200 	mov.w	r2, #0
 8005bc4:	f04f 0300 	mov.w	r3, #0
 8005bc8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005bcc:	4649      	mov	r1, r9
 8005bce:	00cb      	lsls	r3, r1, #3
 8005bd0:	4641      	mov	r1, r8
 8005bd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bd6:	4641      	mov	r1, r8
 8005bd8:	00ca      	lsls	r2, r1, #3
 8005bda:	4610      	mov	r0, r2
 8005bdc:	4619      	mov	r1, r3
 8005bde:	4603      	mov	r3, r0
 8005be0:	4622      	mov	r2, r4
 8005be2:	189b      	adds	r3, r3, r2
 8005be4:	633b      	str	r3, [r7, #48]	; 0x30
 8005be6:	462b      	mov	r3, r5
 8005be8:	460a      	mov	r2, r1
 8005bea:	eb42 0303 	adc.w	r3, r2, r3
 8005bee:	637b      	str	r3, [r7, #52]	; 0x34
 8005bf0:	f04f 0200 	mov.w	r2, #0
 8005bf4:	f04f 0300 	mov.w	r3, #0
 8005bf8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005bfc:	4629      	mov	r1, r5
 8005bfe:	024b      	lsls	r3, r1, #9
 8005c00:	4621      	mov	r1, r4
 8005c02:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c06:	4621      	mov	r1, r4
 8005c08:	024a      	lsls	r2, r1, #9
 8005c0a:	4610      	mov	r0, r2
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c12:	2200      	movs	r2, #0
 8005c14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005c1c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005c20:	f7fa fb46 	bl	80002b0 <__aeabi_uldivmod>
 8005c24:	4602      	mov	r2, r0
 8005c26:	460b      	mov	r3, r1
 8005c28:	4613      	mov	r3, r2
 8005c2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c2e:	e067      	b.n	8005d00 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c30:	4b75      	ldr	r3, [pc, #468]	; (8005e08 <HAL_RCC_GetSysClockFreq+0x354>)
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	099b      	lsrs	r3, r3, #6
 8005c36:	2200      	movs	r2, #0
 8005c38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c3c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005c40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c48:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c4e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8005c52:	4622      	mov	r2, r4
 8005c54:	462b      	mov	r3, r5
 8005c56:	f04f 0000 	mov.w	r0, #0
 8005c5a:	f04f 0100 	mov.w	r1, #0
 8005c5e:	0159      	lsls	r1, r3, #5
 8005c60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c64:	0150      	lsls	r0, r2, #5
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	4621      	mov	r1, r4
 8005c6c:	1a51      	subs	r1, r2, r1
 8005c6e:	62b9      	str	r1, [r7, #40]	; 0x28
 8005c70:	4629      	mov	r1, r5
 8005c72:	eb63 0301 	sbc.w	r3, r3, r1
 8005c76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c78:	f04f 0200 	mov.w	r2, #0
 8005c7c:	f04f 0300 	mov.w	r3, #0
 8005c80:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005c84:	4649      	mov	r1, r9
 8005c86:	018b      	lsls	r3, r1, #6
 8005c88:	4641      	mov	r1, r8
 8005c8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c8e:	4641      	mov	r1, r8
 8005c90:	018a      	lsls	r2, r1, #6
 8005c92:	4641      	mov	r1, r8
 8005c94:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c98:	4649      	mov	r1, r9
 8005c9a:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c9e:	f04f 0200 	mov.w	r2, #0
 8005ca2:	f04f 0300 	mov.w	r3, #0
 8005ca6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005caa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005cae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cb2:	4692      	mov	sl, r2
 8005cb4:	469b      	mov	fp, r3
 8005cb6:	4623      	mov	r3, r4
 8005cb8:	eb1a 0303 	adds.w	r3, sl, r3
 8005cbc:	623b      	str	r3, [r7, #32]
 8005cbe:	462b      	mov	r3, r5
 8005cc0:	eb4b 0303 	adc.w	r3, fp, r3
 8005cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8005cc6:	f04f 0200 	mov.w	r2, #0
 8005cca:	f04f 0300 	mov.w	r3, #0
 8005cce:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005cd2:	4629      	mov	r1, r5
 8005cd4:	028b      	lsls	r3, r1, #10
 8005cd6:	4621      	mov	r1, r4
 8005cd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005cdc:	4621      	mov	r1, r4
 8005cde:	028a      	lsls	r2, r1, #10
 8005ce0:	4610      	mov	r0, r2
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ce8:	2200      	movs	r2, #0
 8005cea:	673b      	str	r3, [r7, #112]	; 0x70
 8005cec:	677a      	str	r2, [r7, #116]	; 0x74
 8005cee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005cf2:	f7fa fadd 	bl	80002b0 <__aeabi_uldivmod>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d00:	4b41      	ldr	r3, [pc, #260]	; (8005e08 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	0c1b      	lsrs	r3, r3, #16
 8005d06:	f003 0303 	and.w	r3, r3, #3
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8005d12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005d16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005d22:	e0eb      	b.n	8005efc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d24:	4b38      	ldr	r3, [pc, #224]	; (8005e08 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d30:	4b35      	ldr	r3, [pc, #212]	; (8005e08 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d06b      	beq.n	8005e14 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d3c:	4b32      	ldr	r3, [pc, #200]	; (8005e08 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	099b      	lsrs	r3, r3, #6
 8005d42:	2200      	movs	r2, #0
 8005d44:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d46:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d4e:	663b      	str	r3, [r7, #96]	; 0x60
 8005d50:	2300      	movs	r3, #0
 8005d52:	667b      	str	r3, [r7, #100]	; 0x64
 8005d54:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005d58:	4622      	mov	r2, r4
 8005d5a:	462b      	mov	r3, r5
 8005d5c:	f04f 0000 	mov.w	r0, #0
 8005d60:	f04f 0100 	mov.w	r1, #0
 8005d64:	0159      	lsls	r1, r3, #5
 8005d66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d6a:	0150      	lsls	r0, r2, #5
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	460b      	mov	r3, r1
 8005d70:	4621      	mov	r1, r4
 8005d72:	1a51      	subs	r1, r2, r1
 8005d74:	61b9      	str	r1, [r7, #24]
 8005d76:	4629      	mov	r1, r5
 8005d78:	eb63 0301 	sbc.w	r3, r3, r1
 8005d7c:	61fb      	str	r3, [r7, #28]
 8005d7e:	f04f 0200 	mov.w	r2, #0
 8005d82:	f04f 0300 	mov.w	r3, #0
 8005d86:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005d8a:	4659      	mov	r1, fp
 8005d8c:	018b      	lsls	r3, r1, #6
 8005d8e:	4651      	mov	r1, sl
 8005d90:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d94:	4651      	mov	r1, sl
 8005d96:	018a      	lsls	r2, r1, #6
 8005d98:	4651      	mov	r1, sl
 8005d9a:	ebb2 0801 	subs.w	r8, r2, r1
 8005d9e:	4659      	mov	r1, fp
 8005da0:	eb63 0901 	sbc.w	r9, r3, r1
 8005da4:	f04f 0200 	mov.w	r2, #0
 8005da8:	f04f 0300 	mov.w	r3, #0
 8005dac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005db0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005db4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005db8:	4690      	mov	r8, r2
 8005dba:	4699      	mov	r9, r3
 8005dbc:	4623      	mov	r3, r4
 8005dbe:	eb18 0303 	adds.w	r3, r8, r3
 8005dc2:	613b      	str	r3, [r7, #16]
 8005dc4:	462b      	mov	r3, r5
 8005dc6:	eb49 0303 	adc.w	r3, r9, r3
 8005dca:	617b      	str	r3, [r7, #20]
 8005dcc:	f04f 0200 	mov.w	r2, #0
 8005dd0:	f04f 0300 	mov.w	r3, #0
 8005dd4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005dd8:	4629      	mov	r1, r5
 8005dda:	024b      	lsls	r3, r1, #9
 8005ddc:	4621      	mov	r1, r4
 8005dde:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005de2:	4621      	mov	r1, r4
 8005de4:	024a      	lsls	r2, r1, #9
 8005de6:	4610      	mov	r0, r2
 8005de8:	4619      	mov	r1, r3
 8005dea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005dee:	2200      	movs	r2, #0
 8005df0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005df2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005df4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005df8:	f7fa fa5a 	bl	80002b0 <__aeabi_uldivmod>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4613      	mov	r3, r2
 8005e02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e06:	e065      	b.n	8005ed4 <HAL_RCC_GetSysClockFreq+0x420>
 8005e08:	40023800 	.word	0x40023800
 8005e0c:	00f42400 	.word	0x00f42400
 8005e10:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e14:	4b3d      	ldr	r3, [pc, #244]	; (8005f0c <HAL_RCC_GetSysClockFreq+0x458>)
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	099b      	lsrs	r3, r3, #6
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	4611      	mov	r1, r2
 8005e20:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e24:	653b      	str	r3, [r7, #80]	; 0x50
 8005e26:	2300      	movs	r3, #0
 8005e28:	657b      	str	r3, [r7, #84]	; 0x54
 8005e2a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8005e2e:	4642      	mov	r2, r8
 8005e30:	464b      	mov	r3, r9
 8005e32:	f04f 0000 	mov.w	r0, #0
 8005e36:	f04f 0100 	mov.w	r1, #0
 8005e3a:	0159      	lsls	r1, r3, #5
 8005e3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e40:	0150      	lsls	r0, r2, #5
 8005e42:	4602      	mov	r2, r0
 8005e44:	460b      	mov	r3, r1
 8005e46:	4641      	mov	r1, r8
 8005e48:	1a51      	subs	r1, r2, r1
 8005e4a:	60b9      	str	r1, [r7, #8]
 8005e4c:	4649      	mov	r1, r9
 8005e4e:	eb63 0301 	sbc.w	r3, r3, r1
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	f04f 0200 	mov.w	r2, #0
 8005e58:	f04f 0300 	mov.w	r3, #0
 8005e5c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005e60:	4659      	mov	r1, fp
 8005e62:	018b      	lsls	r3, r1, #6
 8005e64:	4651      	mov	r1, sl
 8005e66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e6a:	4651      	mov	r1, sl
 8005e6c:	018a      	lsls	r2, r1, #6
 8005e6e:	4651      	mov	r1, sl
 8005e70:	1a54      	subs	r4, r2, r1
 8005e72:	4659      	mov	r1, fp
 8005e74:	eb63 0501 	sbc.w	r5, r3, r1
 8005e78:	f04f 0200 	mov.w	r2, #0
 8005e7c:	f04f 0300 	mov.w	r3, #0
 8005e80:	00eb      	lsls	r3, r5, #3
 8005e82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e86:	00e2      	lsls	r2, r4, #3
 8005e88:	4614      	mov	r4, r2
 8005e8a:	461d      	mov	r5, r3
 8005e8c:	4643      	mov	r3, r8
 8005e8e:	18e3      	adds	r3, r4, r3
 8005e90:	603b      	str	r3, [r7, #0]
 8005e92:	464b      	mov	r3, r9
 8005e94:	eb45 0303 	adc.w	r3, r5, r3
 8005e98:	607b      	str	r3, [r7, #4]
 8005e9a:	f04f 0200 	mov.w	r2, #0
 8005e9e:	f04f 0300 	mov.w	r3, #0
 8005ea2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ea6:	4629      	mov	r1, r5
 8005ea8:	028b      	lsls	r3, r1, #10
 8005eaa:	4621      	mov	r1, r4
 8005eac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005eb0:	4621      	mov	r1, r4
 8005eb2:	028a      	lsls	r2, r1, #10
 8005eb4:	4610      	mov	r0, r2
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ec0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005ec2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005ec6:	f7fa f9f3 	bl	80002b0 <__aeabi_uldivmod>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	460b      	mov	r3, r1
 8005ece:	4613      	mov	r3, r2
 8005ed0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005ed4:	4b0d      	ldr	r3, [pc, #52]	; (8005f0c <HAL_RCC_GetSysClockFreq+0x458>)
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	0f1b      	lsrs	r3, r3, #28
 8005eda:	f003 0307 	and.w	r3, r3, #7
 8005ede:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8005ee2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005ee6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005ef2:	e003      	b.n	8005efc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ef4:	4b06      	ldr	r3, [pc, #24]	; (8005f10 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005ef6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005efa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005efc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	37b8      	adds	r7, #184	; 0xb8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f0a:	bf00      	nop
 8005f0c:	40023800 	.word	0x40023800
 8005f10:	00f42400 	.word	0x00f42400

08005f14 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e28d      	b.n	8006442 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f000 8083 	beq.w	800603a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005f34:	4b94      	ldr	r3, [pc, #592]	; (8006188 <HAL_RCC_OscConfig+0x274>)
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f003 030c 	and.w	r3, r3, #12
 8005f3c:	2b04      	cmp	r3, #4
 8005f3e:	d019      	beq.n	8005f74 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005f40:	4b91      	ldr	r3, [pc, #580]	; (8006188 <HAL_RCC_OscConfig+0x274>)
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005f48:	2b08      	cmp	r3, #8
 8005f4a:	d106      	bne.n	8005f5a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005f4c:	4b8e      	ldr	r3, [pc, #568]	; (8006188 <HAL_RCC_OscConfig+0x274>)
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f58:	d00c      	beq.n	8005f74 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f5a:	4b8b      	ldr	r3, [pc, #556]	; (8006188 <HAL_RCC_OscConfig+0x274>)
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005f62:	2b0c      	cmp	r3, #12
 8005f64:	d112      	bne.n	8005f8c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f66:	4b88      	ldr	r3, [pc, #544]	; (8006188 <HAL_RCC_OscConfig+0x274>)
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f72:	d10b      	bne.n	8005f8c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f74:	4b84      	ldr	r3, [pc, #528]	; (8006188 <HAL_RCC_OscConfig+0x274>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d05b      	beq.n	8006038 <HAL_RCC_OscConfig+0x124>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d157      	bne.n	8006038 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e25a      	b.n	8006442 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f94:	d106      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x90>
 8005f96:	4b7c      	ldr	r3, [pc, #496]	; (8006188 <HAL_RCC_OscConfig+0x274>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a7b      	ldr	r2, [pc, #492]	; (8006188 <HAL_RCC_OscConfig+0x274>)
 8005f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fa0:	6013      	str	r3, [r2, #0]
 8005fa2:	e01d      	b.n	8005fe0 <HAL_RCC_OscConfig+0xcc>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fac:	d10c      	bne.n	8005fc8 <HAL_RCC_OscConfig+0xb4>
 8005fae:	4b76      	ldr	r3, [pc, #472]	; (8006188 <HAL_RCC_OscConfig+0x274>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a75      	ldr	r2, [pc, #468]	; (8006188 <HAL_RCC_OscConfig+0x274>)
 8005fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fb8:	6013      	str	r3, [r2, #0]
 8005fba:	4b73      	ldr	r3, [pc, #460]	; (8006188 <HAL_RCC_OscConfig+0x274>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a72      	ldr	r2, [pc, #456]	; (8006188 <HAL_RCC_OscConfig+0x274>)
 8005fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fc4:	6013      	str	r3, [r2, #0]
 8005fc6:	e00b      	b.n	8005fe0 <HAL_RCC_OscConfig+0xcc>
 8005fc8:	4b6f      	ldr	r3, [pc, #444]	; (8006188 <HAL_RCC_OscConfig+0x274>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a6e      	ldr	r2, [pc, #440]	; (8006188 <HAL_RCC_OscConfig+0x274>)
 8005fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fd2:	6013      	str	r3, [r2, #0]
 8005fd4:	4b6c      	ldr	r3, [pc, #432]	; (8006188 <HAL_RCC_OscConfig+0x274>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a6b      	ldr	r2, [pc, #428]	; (8006188 <HAL_RCC_OscConfig+0x274>)
 8005fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d013      	beq.n	8006010 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe8:	f7fc fde6 	bl	8002bb8 <HAL_GetTick>
 8005fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fee:	e008      	b.n	8006002 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ff0:	f7fc fde2 	bl	8002bb8 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b64      	cmp	r3, #100	; 0x64
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e21f      	b.n	8006442 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006002:	4b61      	ldr	r3, [pc, #388]	; (8006188 <HAL_RCC_OscConfig+0x274>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d0f0      	beq.n	8005ff0 <HAL_RCC_OscConfig+0xdc>
 800600e:	e014      	b.n	800603a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006010:	f7fc fdd2 	bl	8002bb8 <HAL_GetTick>
 8006014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006016:	e008      	b.n	800602a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006018:	f7fc fdce 	bl	8002bb8 <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	2b64      	cmp	r3, #100	; 0x64
 8006024:	d901      	bls.n	800602a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e20b      	b.n	8006442 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800602a:	4b57      	ldr	r3, [pc, #348]	; (8006188 <HAL_RCC_OscConfig+0x274>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1f0      	bne.n	8006018 <HAL_RCC_OscConfig+0x104>
 8006036:	e000      	b.n	800603a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0302 	and.w	r3, r3, #2
 8006042:	2b00      	cmp	r3, #0
 8006044:	d06f      	beq.n	8006126 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006046:	4b50      	ldr	r3, [pc, #320]	; (8006188 <HAL_RCC_OscConfig+0x274>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f003 030c 	and.w	r3, r3, #12
 800604e:	2b00      	cmp	r3, #0
 8006050:	d017      	beq.n	8006082 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006052:	4b4d      	ldr	r3, [pc, #308]	; (8006188 <HAL_RCC_OscConfig+0x274>)
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800605a:	2b08      	cmp	r3, #8
 800605c:	d105      	bne.n	800606a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800605e:	4b4a      	ldr	r3, [pc, #296]	; (8006188 <HAL_RCC_OscConfig+0x274>)
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00b      	beq.n	8006082 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800606a:	4b47      	ldr	r3, [pc, #284]	; (8006188 <HAL_RCC_OscConfig+0x274>)
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006072:	2b0c      	cmp	r3, #12
 8006074:	d11c      	bne.n	80060b0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006076:	4b44      	ldr	r3, [pc, #272]	; (8006188 <HAL_RCC_OscConfig+0x274>)
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d116      	bne.n	80060b0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006082:	4b41      	ldr	r3, [pc, #260]	; (8006188 <HAL_RCC_OscConfig+0x274>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d005      	beq.n	800609a <HAL_RCC_OscConfig+0x186>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d001      	beq.n	800609a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e1d3      	b.n	8006442 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800609a:	4b3b      	ldr	r3, [pc, #236]	; (8006188 <HAL_RCC_OscConfig+0x274>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	4937      	ldr	r1, [pc, #220]	; (8006188 <HAL_RCC_OscConfig+0x274>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060ae:	e03a      	b.n	8006126 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d020      	beq.n	80060fa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060b8:	4b34      	ldr	r3, [pc, #208]	; (800618c <HAL_RCC_OscConfig+0x278>)
 80060ba:	2201      	movs	r2, #1
 80060bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060be:	f7fc fd7b 	bl	8002bb8 <HAL_GetTick>
 80060c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060c4:	e008      	b.n	80060d8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060c6:	f7fc fd77 	bl	8002bb8 <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d901      	bls.n	80060d8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e1b4      	b.n	8006442 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060d8:	4b2b      	ldr	r3, [pc, #172]	; (8006188 <HAL_RCC_OscConfig+0x274>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0302 	and.w	r3, r3, #2
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d0f0      	beq.n	80060c6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060e4:	4b28      	ldr	r3, [pc, #160]	; (8006188 <HAL_RCC_OscConfig+0x274>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	00db      	lsls	r3, r3, #3
 80060f2:	4925      	ldr	r1, [pc, #148]	; (8006188 <HAL_RCC_OscConfig+0x274>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	600b      	str	r3, [r1, #0]
 80060f8:	e015      	b.n	8006126 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060fa:	4b24      	ldr	r3, [pc, #144]	; (800618c <HAL_RCC_OscConfig+0x278>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006100:	f7fc fd5a 	bl	8002bb8 <HAL_GetTick>
 8006104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006106:	e008      	b.n	800611a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006108:	f7fc fd56 	bl	8002bb8 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	2b02      	cmp	r3, #2
 8006114:	d901      	bls.n	800611a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e193      	b.n	8006442 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800611a:	4b1b      	ldr	r3, [pc, #108]	; (8006188 <HAL_RCC_OscConfig+0x274>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1f0      	bne.n	8006108 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0308 	and.w	r3, r3, #8
 800612e:	2b00      	cmp	r3, #0
 8006130:	d036      	beq.n	80061a0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d016      	beq.n	8006168 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800613a:	4b15      	ldr	r3, [pc, #84]	; (8006190 <HAL_RCC_OscConfig+0x27c>)
 800613c:	2201      	movs	r2, #1
 800613e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006140:	f7fc fd3a 	bl	8002bb8 <HAL_GetTick>
 8006144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006146:	e008      	b.n	800615a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006148:	f7fc fd36 	bl	8002bb8 <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	2b02      	cmp	r3, #2
 8006154:	d901      	bls.n	800615a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e173      	b.n	8006442 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800615a:	4b0b      	ldr	r3, [pc, #44]	; (8006188 <HAL_RCC_OscConfig+0x274>)
 800615c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800615e:	f003 0302 	and.w	r3, r3, #2
 8006162:	2b00      	cmp	r3, #0
 8006164:	d0f0      	beq.n	8006148 <HAL_RCC_OscConfig+0x234>
 8006166:	e01b      	b.n	80061a0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006168:	4b09      	ldr	r3, [pc, #36]	; (8006190 <HAL_RCC_OscConfig+0x27c>)
 800616a:	2200      	movs	r2, #0
 800616c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800616e:	f7fc fd23 	bl	8002bb8 <HAL_GetTick>
 8006172:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006174:	e00e      	b.n	8006194 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006176:	f7fc fd1f 	bl	8002bb8 <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	2b02      	cmp	r3, #2
 8006182:	d907      	bls.n	8006194 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e15c      	b.n	8006442 <HAL_RCC_OscConfig+0x52e>
 8006188:	40023800 	.word	0x40023800
 800618c:	42470000 	.word	0x42470000
 8006190:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006194:	4b8a      	ldr	r3, [pc, #552]	; (80063c0 <HAL_RCC_OscConfig+0x4ac>)
 8006196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006198:	f003 0302 	and.w	r3, r3, #2
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1ea      	bne.n	8006176 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0304 	and.w	r3, r3, #4
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f000 8097 	beq.w	80062dc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061ae:	2300      	movs	r3, #0
 80061b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061b2:	4b83      	ldr	r3, [pc, #524]	; (80063c0 <HAL_RCC_OscConfig+0x4ac>)
 80061b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10f      	bne.n	80061de <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061be:	2300      	movs	r3, #0
 80061c0:	60bb      	str	r3, [r7, #8]
 80061c2:	4b7f      	ldr	r3, [pc, #508]	; (80063c0 <HAL_RCC_OscConfig+0x4ac>)
 80061c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c6:	4a7e      	ldr	r2, [pc, #504]	; (80063c0 <HAL_RCC_OscConfig+0x4ac>)
 80061c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061cc:	6413      	str	r3, [r2, #64]	; 0x40
 80061ce:	4b7c      	ldr	r3, [pc, #496]	; (80063c0 <HAL_RCC_OscConfig+0x4ac>)
 80061d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061d6:	60bb      	str	r3, [r7, #8]
 80061d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061da:	2301      	movs	r3, #1
 80061dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061de:	4b79      	ldr	r3, [pc, #484]	; (80063c4 <HAL_RCC_OscConfig+0x4b0>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d118      	bne.n	800621c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061ea:	4b76      	ldr	r3, [pc, #472]	; (80063c4 <HAL_RCC_OscConfig+0x4b0>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a75      	ldr	r2, [pc, #468]	; (80063c4 <HAL_RCC_OscConfig+0x4b0>)
 80061f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061f6:	f7fc fcdf 	bl	8002bb8 <HAL_GetTick>
 80061fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061fc:	e008      	b.n	8006210 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061fe:	f7fc fcdb 	bl	8002bb8 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	2b02      	cmp	r3, #2
 800620a:	d901      	bls.n	8006210 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e118      	b.n	8006442 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006210:	4b6c      	ldr	r3, [pc, #432]	; (80063c4 <HAL_RCC_OscConfig+0x4b0>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006218:	2b00      	cmp	r3, #0
 800621a:	d0f0      	beq.n	80061fe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d106      	bne.n	8006232 <HAL_RCC_OscConfig+0x31e>
 8006224:	4b66      	ldr	r3, [pc, #408]	; (80063c0 <HAL_RCC_OscConfig+0x4ac>)
 8006226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006228:	4a65      	ldr	r2, [pc, #404]	; (80063c0 <HAL_RCC_OscConfig+0x4ac>)
 800622a:	f043 0301 	orr.w	r3, r3, #1
 800622e:	6713      	str	r3, [r2, #112]	; 0x70
 8006230:	e01c      	b.n	800626c <HAL_RCC_OscConfig+0x358>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	2b05      	cmp	r3, #5
 8006238:	d10c      	bne.n	8006254 <HAL_RCC_OscConfig+0x340>
 800623a:	4b61      	ldr	r3, [pc, #388]	; (80063c0 <HAL_RCC_OscConfig+0x4ac>)
 800623c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623e:	4a60      	ldr	r2, [pc, #384]	; (80063c0 <HAL_RCC_OscConfig+0x4ac>)
 8006240:	f043 0304 	orr.w	r3, r3, #4
 8006244:	6713      	str	r3, [r2, #112]	; 0x70
 8006246:	4b5e      	ldr	r3, [pc, #376]	; (80063c0 <HAL_RCC_OscConfig+0x4ac>)
 8006248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800624a:	4a5d      	ldr	r2, [pc, #372]	; (80063c0 <HAL_RCC_OscConfig+0x4ac>)
 800624c:	f043 0301 	orr.w	r3, r3, #1
 8006250:	6713      	str	r3, [r2, #112]	; 0x70
 8006252:	e00b      	b.n	800626c <HAL_RCC_OscConfig+0x358>
 8006254:	4b5a      	ldr	r3, [pc, #360]	; (80063c0 <HAL_RCC_OscConfig+0x4ac>)
 8006256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006258:	4a59      	ldr	r2, [pc, #356]	; (80063c0 <HAL_RCC_OscConfig+0x4ac>)
 800625a:	f023 0301 	bic.w	r3, r3, #1
 800625e:	6713      	str	r3, [r2, #112]	; 0x70
 8006260:	4b57      	ldr	r3, [pc, #348]	; (80063c0 <HAL_RCC_OscConfig+0x4ac>)
 8006262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006264:	4a56      	ldr	r2, [pc, #344]	; (80063c0 <HAL_RCC_OscConfig+0x4ac>)
 8006266:	f023 0304 	bic.w	r3, r3, #4
 800626a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d015      	beq.n	80062a0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006274:	f7fc fca0 	bl	8002bb8 <HAL_GetTick>
 8006278:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800627a:	e00a      	b.n	8006292 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800627c:	f7fc fc9c 	bl	8002bb8 <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	f241 3288 	movw	r2, #5000	; 0x1388
 800628a:	4293      	cmp	r3, r2
 800628c:	d901      	bls.n	8006292 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e0d7      	b.n	8006442 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006292:	4b4b      	ldr	r3, [pc, #300]	; (80063c0 <HAL_RCC_OscConfig+0x4ac>)
 8006294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006296:	f003 0302 	and.w	r3, r3, #2
 800629a:	2b00      	cmp	r3, #0
 800629c:	d0ee      	beq.n	800627c <HAL_RCC_OscConfig+0x368>
 800629e:	e014      	b.n	80062ca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062a0:	f7fc fc8a 	bl	8002bb8 <HAL_GetTick>
 80062a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062a6:	e00a      	b.n	80062be <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062a8:	f7fc fc86 	bl	8002bb8 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d901      	bls.n	80062be <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e0c1      	b.n	8006442 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062be:	4b40      	ldr	r3, [pc, #256]	; (80063c0 <HAL_RCC_OscConfig+0x4ac>)
 80062c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1ee      	bne.n	80062a8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062ca:	7dfb      	ldrb	r3, [r7, #23]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d105      	bne.n	80062dc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062d0:	4b3b      	ldr	r3, [pc, #236]	; (80063c0 <HAL_RCC_OscConfig+0x4ac>)
 80062d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d4:	4a3a      	ldr	r2, [pc, #232]	; (80063c0 <HAL_RCC_OscConfig+0x4ac>)
 80062d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f000 80ad 	beq.w	8006440 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062e6:	4b36      	ldr	r3, [pc, #216]	; (80063c0 <HAL_RCC_OscConfig+0x4ac>)
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f003 030c 	and.w	r3, r3, #12
 80062ee:	2b08      	cmp	r3, #8
 80062f0:	d060      	beq.n	80063b4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d145      	bne.n	8006386 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062fa:	4b33      	ldr	r3, [pc, #204]	; (80063c8 <HAL_RCC_OscConfig+0x4b4>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006300:	f7fc fc5a 	bl	8002bb8 <HAL_GetTick>
 8006304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006306:	e008      	b.n	800631a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006308:	f7fc fc56 	bl	8002bb8 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	2b02      	cmp	r3, #2
 8006314:	d901      	bls.n	800631a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e093      	b.n	8006442 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800631a:	4b29      	ldr	r3, [pc, #164]	; (80063c0 <HAL_RCC_OscConfig+0x4ac>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1f0      	bne.n	8006308 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	69da      	ldr	r2, [r3, #28]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	431a      	orrs	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006334:	019b      	lsls	r3, r3, #6
 8006336:	431a      	orrs	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633c:	085b      	lsrs	r3, r3, #1
 800633e:	3b01      	subs	r3, #1
 8006340:	041b      	lsls	r3, r3, #16
 8006342:	431a      	orrs	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006348:	061b      	lsls	r3, r3, #24
 800634a:	431a      	orrs	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006350:	071b      	lsls	r3, r3, #28
 8006352:	491b      	ldr	r1, [pc, #108]	; (80063c0 <HAL_RCC_OscConfig+0x4ac>)
 8006354:	4313      	orrs	r3, r2
 8006356:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006358:	4b1b      	ldr	r3, [pc, #108]	; (80063c8 <HAL_RCC_OscConfig+0x4b4>)
 800635a:	2201      	movs	r2, #1
 800635c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800635e:	f7fc fc2b 	bl	8002bb8 <HAL_GetTick>
 8006362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006364:	e008      	b.n	8006378 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006366:	f7fc fc27 	bl	8002bb8 <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	2b02      	cmp	r3, #2
 8006372:	d901      	bls.n	8006378 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e064      	b.n	8006442 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006378:	4b11      	ldr	r3, [pc, #68]	; (80063c0 <HAL_RCC_OscConfig+0x4ac>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d0f0      	beq.n	8006366 <HAL_RCC_OscConfig+0x452>
 8006384:	e05c      	b.n	8006440 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006386:	4b10      	ldr	r3, [pc, #64]	; (80063c8 <HAL_RCC_OscConfig+0x4b4>)
 8006388:	2200      	movs	r2, #0
 800638a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800638c:	f7fc fc14 	bl	8002bb8 <HAL_GetTick>
 8006390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006392:	e008      	b.n	80063a6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006394:	f7fc fc10 	bl	8002bb8 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d901      	bls.n	80063a6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e04d      	b.n	8006442 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063a6:	4b06      	ldr	r3, [pc, #24]	; (80063c0 <HAL_RCC_OscConfig+0x4ac>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1f0      	bne.n	8006394 <HAL_RCC_OscConfig+0x480>
 80063b2:	e045      	b.n	8006440 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d107      	bne.n	80063cc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e040      	b.n	8006442 <HAL_RCC_OscConfig+0x52e>
 80063c0:	40023800 	.word	0x40023800
 80063c4:	40007000 	.word	0x40007000
 80063c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80063cc:	4b1f      	ldr	r3, [pc, #124]	; (800644c <HAL_RCC_OscConfig+0x538>)
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d030      	beq.n	800643c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d129      	bne.n	800643c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d122      	bne.n	800643c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80063fc:	4013      	ands	r3, r2
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006402:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006404:	4293      	cmp	r3, r2
 8006406:	d119      	bne.n	800643c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006412:	085b      	lsrs	r3, r3, #1
 8006414:	3b01      	subs	r3, #1
 8006416:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006418:	429a      	cmp	r2, r3
 800641a:	d10f      	bne.n	800643c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006426:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006428:	429a      	cmp	r2, r3
 800642a:	d107      	bne.n	800643c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006436:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006438:	429a      	cmp	r2, r3
 800643a:	d001      	beq.n	8006440 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e000      	b.n	8006442 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3718      	adds	r7, #24
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	40023800 	.word	0x40023800

08006450 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e03f      	b.n	80064e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d106      	bne.n	800647c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7fc f91e 	bl	80026b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2224      	movs	r2, #36	; 0x24
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68da      	ldr	r2, [r3, #12]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006492:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 ffcb 	bl	8007430 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	691a      	ldr	r2, [r3, #16]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	695a      	ldr	r2, [r3, #20]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68da      	ldr	r2, [r3, #12]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2220      	movs	r2, #32
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2220      	movs	r2, #32
 80064dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b08a      	sub	sp, #40	; 0x28
 80064ee:	af02      	add	r7, sp, #8
 80064f0:	60f8      	str	r0, [r7, #12]
 80064f2:	60b9      	str	r1, [r7, #8]
 80064f4:	603b      	str	r3, [r7, #0]
 80064f6:	4613      	mov	r3, r2
 80064f8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b20      	cmp	r3, #32
 8006508:	d17c      	bne.n	8006604 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d002      	beq.n	8006516 <HAL_UART_Transmit+0x2c>
 8006510:	88fb      	ldrh	r3, [r7, #6]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d101      	bne.n	800651a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e075      	b.n	8006606 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006520:	2b01      	cmp	r3, #1
 8006522:	d101      	bne.n	8006528 <HAL_UART_Transmit+0x3e>
 8006524:	2302      	movs	r3, #2
 8006526:	e06e      	b.n	8006606 <HAL_UART_Transmit+0x11c>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2221      	movs	r2, #33	; 0x21
 800653a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800653e:	f7fc fb3b 	bl	8002bb8 <HAL_GetTick>
 8006542:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	88fa      	ldrh	r2, [r7, #6]
 8006548:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	88fa      	ldrh	r2, [r7, #6]
 800654e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006558:	d108      	bne.n	800656c <HAL_UART_Transmit+0x82>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d104      	bne.n	800656c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006562:	2300      	movs	r3, #0
 8006564:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	61bb      	str	r3, [r7, #24]
 800656a:	e003      	b.n	8006574 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006570:	2300      	movs	r3, #0
 8006572:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800657c:	e02a      	b.n	80065d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	9300      	str	r3, [sp, #0]
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	2200      	movs	r2, #0
 8006586:	2180      	movs	r1, #128	; 0x80
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f000 fc83 	bl	8006e94 <UART_WaitOnFlagUntilTimeout>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d001      	beq.n	8006598 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006594:	2303      	movs	r3, #3
 8006596:	e036      	b.n	8006606 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10b      	bne.n	80065b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	881b      	ldrh	r3, [r3, #0]
 80065a2:	461a      	mov	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	3302      	adds	r3, #2
 80065b2:	61bb      	str	r3, [r7, #24]
 80065b4:	e007      	b.n	80065c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	781a      	ldrb	r2, [r3, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	3301      	adds	r3, #1
 80065c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	3b01      	subs	r3, #1
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065d8:	b29b      	uxth	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1cf      	bne.n	800657e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	9300      	str	r3, [sp, #0]
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	2200      	movs	r2, #0
 80065e6:	2140      	movs	r1, #64	; 0x40
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 fc53 	bl	8006e94 <UART_WaitOnFlagUntilTimeout>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e006      	b.n	8006606 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2220      	movs	r2, #32
 80065fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006600:	2300      	movs	r3, #0
 8006602:	e000      	b.n	8006606 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006604:	2302      	movs	r3, #2
  }
}
 8006606:	4618      	mov	r0, r3
 8006608:	3720      	adds	r7, #32
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800660e:	b580      	push	{r7, lr}
 8006610:	b084      	sub	sp, #16
 8006612:	af00      	add	r7, sp, #0
 8006614:	60f8      	str	r0, [r7, #12]
 8006616:	60b9      	str	r1, [r7, #8]
 8006618:	4613      	mov	r3, r2
 800661a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b20      	cmp	r3, #32
 8006626:	d11d      	bne.n	8006664 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d002      	beq.n	8006634 <HAL_UART_Receive_DMA+0x26>
 800662e:	88fb      	ldrh	r3, [r7, #6]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d101      	bne.n	8006638 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e016      	b.n	8006666 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800663e:	2b01      	cmp	r3, #1
 8006640:	d101      	bne.n	8006646 <HAL_UART_Receive_DMA+0x38>
 8006642:	2302      	movs	r3, #2
 8006644:	e00f      	b.n	8006666 <HAL_UART_Receive_DMA+0x58>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006654:	88fb      	ldrh	r3, [r7, #6]
 8006656:	461a      	mov	r2, r3
 8006658:	68b9      	ldr	r1, [r7, #8]
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f000 fc88 	bl	8006f70 <UART_Start_Receive_DMA>
 8006660:	4603      	mov	r3, r0
 8006662:	e000      	b.n	8006666 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006664:	2302      	movs	r3, #2
  }
}
 8006666:	4618      	mov	r0, r3
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b08c      	sub	sp, #48	; 0x30
 8006672:	af00      	add	r7, sp, #0
 8006674:	60f8      	str	r0, [r7, #12]
 8006676:	60b9      	str	r1, [r7, #8]
 8006678:	4613      	mov	r3, r2
 800667a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b20      	cmp	r3, #32
 8006686:	d152      	bne.n	800672e <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d002      	beq.n	8006694 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800668e:	88fb      	ldrh	r3, [r7, #6]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d101      	bne.n	8006698 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e04b      	b.n	8006730 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d101      	bne.n	80066a6 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80066a2:	2302      	movs	r3, #2
 80066a4:	e044      	b.n	8006730 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2201      	movs	r2, #1
 80066b2:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80066b4:	88fb      	ldrh	r3, [r7, #6]
 80066b6:	461a      	mov	r2, r3
 80066b8:	68b9      	ldr	r1, [r7, #8]
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f000 fc58 	bl	8006f70 <UART_Start_Receive_DMA>
 80066c0:	4603      	mov	r3, r0
 80066c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80066c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d12c      	bne.n	8006728 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d125      	bne.n	8006722 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066d6:	2300      	movs	r3, #0
 80066d8:	613b      	str	r3, [r7, #16]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	613b      	str	r3, [r7, #16]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	613b      	str	r3, [r7, #16]
 80066ea:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	330c      	adds	r3, #12
 80066f2:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	e853 3f00 	ldrex	r3, [r3]
 80066fa:	617b      	str	r3, [r7, #20]
   return(result);
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f043 0310 	orr.w	r3, r3, #16
 8006702:	62bb      	str	r3, [r7, #40]	; 0x28
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	330c      	adds	r3, #12
 800670a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800670c:	627a      	str	r2, [r7, #36]	; 0x24
 800670e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006710:	6a39      	ldr	r1, [r7, #32]
 8006712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006714:	e841 2300 	strex	r3, r2, [r1]
 8006718:	61fb      	str	r3, [r7, #28]
   return(result);
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1e5      	bne.n	80066ec <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8006720:	e002      	b.n	8006728 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006728:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800672c:	e000      	b.n	8006730 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800672e:	2302      	movs	r3, #2
  }
}
 8006730:	4618      	mov	r0, r3
 8006732:	3730      	adds	r7, #48	; 0x30
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b0ba      	sub	sp, #232	; 0xe8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800675e:	2300      	movs	r3, #0
 8006760:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006764:	2300      	movs	r3, #0
 8006766:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800676a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800676e:	f003 030f 	and.w	r3, r3, #15
 8006772:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006776:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10f      	bne.n	800679e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800677e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006782:	f003 0320 	and.w	r3, r3, #32
 8006786:	2b00      	cmp	r3, #0
 8006788:	d009      	beq.n	800679e <HAL_UART_IRQHandler+0x66>
 800678a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800678e:	f003 0320 	and.w	r3, r3, #32
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 fd8f 	bl	80072ba <UART_Receive_IT>
      return;
 800679c:	e256      	b.n	8006c4c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800679e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f000 80de 	beq.w	8006964 <HAL_UART_IRQHandler+0x22c>
 80067a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067ac:	f003 0301 	and.w	r3, r3, #1
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d106      	bne.n	80067c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80067b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80067bc:	2b00      	cmp	r3, #0
 80067be:	f000 80d1 	beq.w	8006964 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00b      	beq.n	80067e6 <HAL_UART_IRQHandler+0xae>
 80067ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d005      	beq.n	80067e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067de:	f043 0201 	orr.w	r2, r3, #1
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ea:	f003 0304 	and.w	r3, r3, #4
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00b      	beq.n	800680a <HAL_UART_IRQHandler+0xd2>
 80067f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d005      	beq.n	800680a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006802:	f043 0202 	orr.w	r2, r3, #2
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800680a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800680e:	f003 0302 	and.w	r3, r3, #2
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00b      	beq.n	800682e <HAL_UART_IRQHandler+0xf6>
 8006816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	2b00      	cmp	r3, #0
 8006820:	d005      	beq.n	800682e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006826:	f043 0204 	orr.w	r2, r3, #4
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800682e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006832:	f003 0308 	and.w	r3, r3, #8
 8006836:	2b00      	cmp	r3, #0
 8006838:	d011      	beq.n	800685e <HAL_UART_IRQHandler+0x126>
 800683a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800683e:	f003 0320 	and.w	r3, r3, #32
 8006842:	2b00      	cmp	r3, #0
 8006844:	d105      	bne.n	8006852 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006846:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800684a:	f003 0301 	and.w	r3, r3, #1
 800684e:	2b00      	cmp	r3, #0
 8006850:	d005      	beq.n	800685e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006856:	f043 0208 	orr.w	r2, r3, #8
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006862:	2b00      	cmp	r3, #0
 8006864:	f000 81ed 	beq.w	8006c42 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800686c:	f003 0320 	and.w	r3, r3, #32
 8006870:	2b00      	cmp	r3, #0
 8006872:	d008      	beq.n	8006886 <HAL_UART_IRQHandler+0x14e>
 8006874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006878:	f003 0320 	and.w	r3, r3, #32
 800687c:	2b00      	cmp	r3, #0
 800687e:	d002      	beq.n	8006886 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 fd1a 	bl	80072ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	695b      	ldr	r3, [r3, #20]
 800688c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006890:	2b40      	cmp	r3, #64	; 0x40
 8006892:	bf0c      	ite	eq
 8006894:	2301      	moveq	r3, #1
 8006896:	2300      	movne	r3, #0
 8006898:	b2db      	uxtb	r3, r3
 800689a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a2:	f003 0308 	and.w	r3, r3, #8
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d103      	bne.n	80068b2 <HAL_UART_IRQHandler+0x17a>
 80068aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d04f      	beq.n	8006952 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fc22 	bl	80070fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c2:	2b40      	cmp	r3, #64	; 0x40
 80068c4:	d141      	bne.n	800694a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	3314      	adds	r3, #20
 80068cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068d4:	e853 3f00 	ldrex	r3, [r3]
 80068d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80068dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	3314      	adds	r3, #20
 80068ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80068f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80068f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80068fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006902:	e841 2300 	strex	r3, r2, [r1]
 8006906:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800690a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1d9      	bne.n	80068c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006916:	2b00      	cmp	r3, #0
 8006918:	d013      	beq.n	8006942 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691e:	4a7d      	ldr	r2, [pc, #500]	; (8006b14 <HAL_UART_IRQHandler+0x3dc>)
 8006920:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006926:	4618      	mov	r0, r3
 8006928:	f7fc fbfe 	bl	8003128 <HAL_DMA_Abort_IT>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d016      	beq.n	8006960 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800693c:	4610      	mov	r0, r2
 800693e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006940:	e00e      	b.n	8006960 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f9a4 	bl	8006c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006948:	e00a      	b.n	8006960 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f9a0 	bl	8006c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006950:	e006      	b.n	8006960 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f99c 	bl	8006c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800695e:	e170      	b.n	8006c42 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006960:	bf00      	nop
    return;
 8006962:	e16e      	b.n	8006c42 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006968:	2b01      	cmp	r3, #1
 800696a:	f040 814a 	bne.w	8006c02 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800696e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006972:	f003 0310 	and.w	r3, r3, #16
 8006976:	2b00      	cmp	r3, #0
 8006978:	f000 8143 	beq.w	8006c02 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800697c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006980:	f003 0310 	and.w	r3, r3, #16
 8006984:	2b00      	cmp	r3, #0
 8006986:	f000 813c 	beq.w	8006c02 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800698a:	2300      	movs	r3, #0
 800698c:	60bb      	str	r3, [r7, #8]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	60bb      	str	r3, [r7, #8]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	60bb      	str	r3, [r7, #8]
 800699e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069aa:	2b40      	cmp	r3, #64	; 0x40
 80069ac:	f040 80b4 	bne.w	8006b18 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f000 8140 	beq.w	8006c46 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069ce:	429a      	cmp	r2, r3
 80069d0:	f080 8139 	bcs.w	8006c46 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e0:	69db      	ldr	r3, [r3, #28]
 80069e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069e6:	f000 8088 	beq.w	8006afa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	330c      	adds	r3, #12
 80069f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069f8:	e853 3f00 	ldrex	r3, [r3]
 80069fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006a00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	330c      	adds	r3, #12
 8006a12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006a16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a26:	e841 2300 	strex	r3, r2, [r1]
 8006a2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1d9      	bne.n	80069ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3314      	adds	r3, #20
 8006a3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a40:	e853 3f00 	ldrex	r3, [r3]
 8006a44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a48:	f023 0301 	bic.w	r3, r3, #1
 8006a4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3314      	adds	r3, #20
 8006a56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a66:	e841 2300 	strex	r3, r2, [r1]
 8006a6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1e1      	bne.n	8006a36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	3314      	adds	r3, #20
 8006a78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a7c:	e853 3f00 	ldrex	r3, [r3]
 8006a80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	3314      	adds	r3, #20
 8006a92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a9e:	e841 2300 	strex	r3, r2, [r1]
 8006aa2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006aa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1e3      	bne.n	8006a72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2220      	movs	r2, #32
 8006aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	330c      	adds	r3, #12
 8006abe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ac2:	e853 3f00 	ldrex	r3, [r3]
 8006ac6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aca:	f023 0310 	bic.w	r3, r3, #16
 8006ace:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	330c      	adds	r3, #12
 8006ad8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006adc:	65ba      	str	r2, [r7, #88]	; 0x58
 8006ade:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ae2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ae4:	e841 2300 	strex	r3, r2, [r1]
 8006ae8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d1e3      	bne.n	8006ab8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7fc faa7 	bl	8003048 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	4619      	mov	r1, r3
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7fa f8e4 	bl	8000cd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b10:	e099      	b.n	8006c46 <HAL_UART_IRQHandler+0x50e>
 8006b12:	bf00      	nop
 8006b14:	080071c3 	.word	0x080071c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f000 808b 	beq.w	8006c4a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006b34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f000 8086 	beq.w	8006c4a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	330c      	adds	r3, #12
 8006b44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b48:	e853 3f00 	ldrex	r3, [r3]
 8006b4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	330c      	adds	r3, #12
 8006b5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006b62:	647a      	str	r2, [r7, #68]	; 0x44
 8006b64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b6a:	e841 2300 	strex	r3, r2, [r1]
 8006b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1e3      	bne.n	8006b3e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	3314      	adds	r3, #20
 8006b7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b80:	e853 3f00 	ldrex	r3, [r3]
 8006b84:	623b      	str	r3, [r7, #32]
   return(result);
 8006b86:	6a3b      	ldr	r3, [r7, #32]
 8006b88:	f023 0301 	bic.w	r3, r3, #1
 8006b8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3314      	adds	r3, #20
 8006b96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b9a:	633a      	str	r2, [r7, #48]	; 0x30
 8006b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ba2:	e841 2300 	strex	r3, r2, [r1]
 8006ba6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1e3      	bne.n	8006b76 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2220      	movs	r2, #32
 8006bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	330c      	adds	r3, #12
 8006bc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	e853 3f00 	ldrex	r3, [r3]
 8006bca:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f023 0310 	bic.w	r3, r3, #16
 8006bd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	330c      	adds	r3, #12
 8006bdc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006be0:	61fa      	str	r2, [r7, #28]
 8006be2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be4:	69b9      	ldr	r1, [r7, #24]
 8006be6:	69fa      	ldr	r2, [r7, #28]
 8006be8:	e841 2300 	strex	r3, r2, [r1]
 8006bec:	617b      	str	r3, [r7, #20]
   return(result);
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1e3      	bne.n	8006bbc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7fa f86c 	bl	8000cd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c00:	e023      	b.n	8006c4a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d009      	beq.n	8006c22 <HAL_UART_IRQHandler+0x4ea>
 8006c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d003      	beq.n	8006c22 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 fae5 	bl	80071ea <UART_Transmit_IT>
    return;
 8006c20:	e014      	b.n	8006c4c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00e      	beq.n	8006c4c <HAL_UART_IRQHandler+0x514>
 8006c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d008      	beq.n	8006c4c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 fb25 	bl	800728a <UART_EndTransmit_IT>
    return;
 8006c40:	e004      	b.n	8006c4c <HAL_UART_IRQHandler+0x514>
    return;
 8006c42:	bf00      	nop
 8006c44:	e002      	b.n	8006c4c <HAL_UART_IRQHandler+0x514>
      return;
 8006c46:	bf00      	nop
 8006c48:	e000      	b.n	8006c4c <HAL_UART_IRQHandler+0x514>
      return;
 8006c4a:	bf00      	nop
  }
}
 8006c4c:	37e8      	adds	r7, #232	; 0xe8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop

08006c54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b09c      	sub	sp, #112	; 0x70
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d172      	bne.n	8006da6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	330c      	adds	r3, #12
 8006ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cd0:	e853 3f00 	ldrex	r3, [r3]
 8006cd4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006cd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cdc:	66bb      	str	r3, [r7, #104]	; 0x68
 8006cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	330c      	adds	r3, #12
 8006ce4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ce6:	65ba      	str	r2, [r7, #88]	; 0x58
 8006ce8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006cec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006cee:	e841 2300 	strex	r3, r2, [r1]
 8006cf2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006cf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1e5      	bne.n	8006cc6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	3314      	adds	r3, #20
 8006d00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d04:	e853 3f00 	ldrex	r3, [r3]
 8006d08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d0c:	f023 0301 	bic.w	r3, r3, #1
 8006d10:	667b      	str	r3, [r7, #100]	; 0x64
 8006d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3314      	adds	r3, #20
 8006d18:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006d1a:	647a      	str	r2, [r7, #68]	; 0x44
 8006d1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d22:	e841 2300 	strex	r3, r2, [r1]
 8006d26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1e5      	bne.n	8006cfa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	3314      	adds	r3, #20
 8006d34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d38:	e853 3f00 	ldrex	r3, [r3]
 8006d3c:	623b      	str	r3, [r7, #32]
   return(result);
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d44:	663b      	str	r3, [r7, #96]	; 0x60
 8006d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	3314      	adds	r3, #20
 8006d4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d4e:	633a      	str	r2, [r7, #48]	; 0x30
 8006d50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d56:	e841 2300 	strex	r3, r2, [r1]
 8006d5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1e5      	bne.n	8006d2e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d64:	2220      	movs	r2, #32
 8006d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d119      	bne.n	8006da6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	330c      	adds	r3, #12
 8006d78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	e853 3f00 	ldrex	r3, [r3]
 8006d80:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f023 0310 	bic.w	r3, r3, #16
 8006d88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	330c      	adds	r3, #12
 8006d90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006d92:	61fa      	str	r2, [r7, #28]
 8006d94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d96:	69b9      	ldr	r1, [r7, #24]
 8006d98:	69fa      	ldr	r2, [r7, #28]
 8006d9a:	e841 2300 	strex	r3, r2, [r1]
 8006d9e:	617b      	str	r3, [r7, #20]
   return(result);
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1e5      	bne.n	8006d72 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d106      	bne.n	8006dbc <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006db0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006db2:	4619      	mov	r1, r3
 8006db4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006db6:	f7f9 ff8f 	bl	8000cd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006dba:	e002      	b.n	8006dc2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006dbc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006dbe:	f7ff ff53 	bl	8006c68 <HAL_UART_RxCpltCallback>
}
 8006dc2:	bf00      	nop
 8006dc4:	3770      	adds	r7, #112	; 0x70
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b084      	sub	sp, #16
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d108      	bne.n	8006df2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006de4:	085b      	lsrs	r3, r3, #1
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	4619      	mov	r1, r3
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f7f9 ff74 	bl	8000cd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006df0:	e002      	b.n	8006df8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f7ff ff42 	bl	8006c7c <HAL_UART_RxHalfCpltCallback>
}
 8006df8:	bf00      	nop
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e10:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e1c:	2b80      	cmp	r3, #128	; 0x80
 8006e1e:	bf0c      	ite	eq
 8006e20:	2301      	moveq	r3, #1
 8006e22:	2300      	movne	r3, #0
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b21      	cmp	r3, #33	; 0x21
 8006e32:	d108      	bne.n	8006e46 <UART_DMAError+0x46>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d005      	beq.n	8006e46 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006e40:	68b8      	ldr	r0, [r7, #8]
 8006e42:	f000 f933 	bl	80070ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	695b      	ldr	r3, [r3, #20]
 8006e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e50:	2b40      	cmp	r3, #64	; 0x40
 8006e52:	bf0c      	ite	eq
 8006e54:	2301      	moveq	r3, #1
 8006e56:	2300      	movne	r3, #0
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b22      	cmp	r3, #34	; 0x22
 8006e66:	d108      	bne.n	8006e7a <UART_DMAError+0x7a>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d005      	beq.n	8006e7a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	2200      	movs	r2, #0
 8006e72:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006e74:	68b8      	ldr	r0, [r7, #8]
 8006e76:	f000 f941 	bl	80070fc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7e:	f043 0210 	orr.w	r2, r3, #16
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e86:	68b8      	ldr	r0, [r7, #8]
 8006e88:	f7ff ff02 	bl	8006c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e8c:	bf00      	nop
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b090      	sub	sp, #64	; 0x40
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	603b      	str	r3, [r7, #0]
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ea4:	e050      	b.n	8006f48 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eac:	d04c      	beq.n	8006f48 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d007      	beq.n	8006ec4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006eb4:	f7fb fe80 	bl	8002bb8 <HAL_GetTick>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d241      	bcs.n	8006f48 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	330c      	adds	r3, #12
 8006eca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ece:	e853 3f00 	ldrex	r3, [r3]
 8006ed2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006eda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	330c      	adds	r3, #12
 8006ee2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ee4:	637a      	str	r2, [r7, #52]	; 0x34
 8006ee6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006eea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006eec:	e841 2300 	strex	r3, r2, [r1]
 8006ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1e5      	bne.n	8006ec4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3314      	adds	r3, #20
 8006efe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	e853 3f00 	ldrex	r3, [r3]
 8006f06:	613b      	str	r3, [r7, #16]
   return(result);
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	f023 0301 	bic.w	r3, r3, #1
 8006f0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3314      	adds	r3, #20
 8006f16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f18:	623a      	str	r2, [r7, #32]
 8006f1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1c:	69f9      	ldr	r1, [r7, #28]
 8006f1e:	6a3a      	ldr	r2, [r7, #32]
 8006f20:	e841 2300 	strex	r3, r2, [r1]
 8006f24:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1e5      	bne.n	8006ef8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2220      	movs	r2, #32
 8006f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2220      	movs	r2, #32
 8006f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e00f      	b.n	8006f68 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	4013      	ands	r3, r2
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	bf0c      	ite	eq
 8006f58:	2301      	moveq	r3, #1
 8006f5a:	2300      	movne	r3, #0
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	461a      	mov	r2, r3
 8006f60:	79fb      	ldrb	r3, [r7, #7]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d09f      	beq.n	8006ea6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3740      	adds	r7, #64	; 0x40
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b098      	sub	sp, #96	; 0x60
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	88fa      	ldrh	r2, [r7, #6]
 8006f88:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2222      	movs	r2, #34	; 0x22
 8006f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9c:	4a40      	ldr	r2, [pc, #256]	; (80070a0 <UART_Start_Receive_DMA+0x130>)
 8006f9e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa4:	4a3f      	ldr	r2, [pc, #252]	; (80070a4 <UART_Start_Receive_DMA+0x134>)
 8006fa6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fac:	4a3e      	ldr	r2, [pc, #248]	; (80070a8 <UART_Start_Receive_DMA+0x138>)
 8006fae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006fb8:	f107 0308 	add.w	r3, r7, #8
 8006fbc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	3304      	adds	r3, #4
 8006fc8:	4619      	mov	r1, r3
 8006fca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	88fb      	ldrh	r3, [r7, #6]
 8006fd0:	f7fb ffe2 	bl	8002f98 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	613b      	str	r3, [r7, #16]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	613b      	str	r3, [r7, #16]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	613b      	str	r3, [r7, #16]
 8006fe8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d019      	beq.n	800702e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	330c      	adds	r3, #12
 8007000:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007004:	e853 3f00 	ldrex	r3, [r3]
 8007008:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800700a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800700c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007010:	65bb      	str	r3, [r7, #88]	; 0x58
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	330c      	adds	r3, #12
 8007018:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800701a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800701c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007020:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007022:	e841 2300 	strex	r3, r2, [r1]
 8007026:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1e5      	bne.n	8006ffa <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	3314      	adds	r3, #20
 8007034:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007038:	e853 3f00 	ldrex	r3, [r3]
 800703c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800703e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007040:	f043 0301 	orr.w	r3, r3, #1
 8007044:	657b      	str	r3, [r7, #84]	; 0x54
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3314      	adds	r3, #20
 800704c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800704e:	63ba      	str	r2, [r7, #56]	; 0x38
 8007050:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007052:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007054:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007056:	e841 2300 	strex	r3, r2, [r1]
 800705a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800705c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1e5      	bne.n	800702e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	3314      	adds	r3, #20
 8007068:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	e853 3f00 	ldrex	r3, [r3]
 8007070:	617b      	str	r3, [r7, #20]
   return(result);
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007078:	653b      	str	r3, [r7, #80]	; 0x50
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	3314      	adds	r3, #20
 8007080:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007082:	627a      	str	r2, [r7, #36]	; 0x24
 8007084:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007086:	6a39      	ldr	r1, [r7, #32]
 8007088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800708a:	e841 2300 	strex	r3, r2, [r1]
 800708e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1e5      	bne.n	8007062 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3760      	adds	r7, #96	; 0x60
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	08006ca5 	.word	0x08006ca5
 80070a4:	08006dcb 	.word	0x08006dcb
 80070a8:	08006e01 	.word	0x08006e01

080070ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b089      	sub	sp, #36	; 0x24
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	330c      	adds	r3, #12
 80070ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	e853 3f00 	ldrex	r3, [r3]
 80070c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80070ca:	61fb      	str	r3, [r7, #28]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	330c      	adds	r3, #12
 80070d2:	69fa      	ldr	r2, [r7, #28]
 80070d4:	61ba      	str	r2, [r7, #24]
 80070d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d8:	6979      	ldr	r1, [r7, #20]
 80070da:	69ba      	ldr	r2, [r7, #24]
 80070dc:	e841 2300 	strex	r3, r2, [r1]
 80070e0:	613b      	str	r3, [r7, #16]
   return(result);
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d1e5      	bne.n	80070b4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2220      	movs	r2, #32
 80070ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80070f0:	bf00      	nop
 80070f2:	3724      	adds	r7, #36	; 0x24
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b095      	sub	sp, #84	; 0x54
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	330c      	adds	r3, #12
 800710a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800710e:	e853 3f00 	ldrex	r3, [r3]
 8007112:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007116:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800711a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	330c      	adds	r3, #12
 8007122:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007124:	643a      	str	r2, [r7, #64]	; 0x40
 8007126:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007128:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800712a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800712c:	e841 2300 	strex	r3, r2, [r1]
 8007130:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1e5      	bne.n	8007104 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	3314      	adds	r3, #20
 800713e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007140:	6a3b      	ldr	r3, [r7, #32]
 8007142:	e853 3f00 	ldrex	r3, [r3]
 8007146:	61fb      	str	r3, [r7, #28]
   return(result);
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	f023 0301 	bic.w	r3, r3, #1
 800714e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	3314      	adds	r3, #20
 8007156:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007158:	62fa      	str	r2, [r7, #44]	; 0x2c
 800715a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800715e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007160:	e841 2300 	strex	r3, r2, [r1]
 8007164:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1e5      	bne.n	8007138 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007170:	2b01      	cmp	r3, #1
 8007172:	d119      	bne.n	80071a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	330c      	adds	r3, #12
 800717a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	e853 3f00 	ldrex	r3, [r3]
 8007182:	60bb      	str	r3, [r7, #8]
   return(result);
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	f023 0310 	bic.w	r3, r3, #16
 800718a:	647b      	str	r3, [r7, #68]	; 0x44
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	330c      	adds	r3, #12
 8007192:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007194:	61ba      	str	r2, [r7, #24]
 8007196:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007198:	6979      	ldr	r1, [r7, #20]
 800719a:	69ba      	ldr	r2, [r7, #24]
 800719c:	e841 2300 	strex	r3, r2, [r1]
 80071a0:	613b      	str	r3, [r7, #16]
   return(result);
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1e5      	bne.n	8007174 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2220      	movs	r2, #32
 80071ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80071b6:	bf00      	nop
 80071b8:	3754      	adds	r7, #84	; 0x54
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b084      	sub	sp, #16
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f7ff fd57 	bl	8006c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071e2:	bf00      	nop
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b085      	sub	sp, #20
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	2b21      	cmp	r3, #33	; 0x21
 80071fc:	d13e      	bne.n	800727c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007206:	d114      	bne.n	8007232 <UART_Transmit_IT+0x48>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d110      	bne.n	8007232 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6a1b      	ldr	r3, [r3, #32]
 8007214:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	881b      	ldrh	r3, [r3, #0]
 800721a:	461a      	mov	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007224:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a1b      	ldr	r3, [r3, #32]
 800722a:	1c9a      	adds	r2, r3, #2
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	621a      	str	r2, [r3, #32]
 8007230:	e008      	b.n	8007244 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	1c59      	adds	r1, r3, #1
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	6211      	str	r1, [r2, #32]
 800723c:	781a      	ldrb	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007248:	b29b      	uxth	r3, r3
 800724a:	3b01      	subs	r3, #1
 800724c:	b29b      	uxth	r3, r3
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	4619      	mov	r1, r3
 8007252:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007254:	2b00      	cmp	r3, #0
 8007256:	d10f      	bne.n	8007278 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68da      	ldr	r2, [r3, #12]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007266:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68da      	ldr	r2, [r3, #12]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007276:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007278:	2300      	movs	r3, #0
 800727a:	e000      	b.n	800727e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800727c:	2302      	movs	r3, #2
  }
}
 800727e:	4618      	mov	r0, r3
 8007280:	3714      	adds	r7, #20
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr

0800728a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b082      	sub	sp, #8
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68da      	ldr	r2, [r3, #12]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2220      	movs	r2, #32
 80072a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f7ff fcd2 	bl	8006c54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3708      	adds	r7, #8
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b08c      	sub	sp, #48	; 0x30
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	2b22      	cmp	r3, #34	; 0x22
 80072cc:	f040 80ab 	bne.w	8007426 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072d8:	d117      	bne.n	800730a <UART_Receive_IT+0x50>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d113      	bne.n	800730a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80072e2:	2300      	movs	r3, #0
 80072e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007302:	1c9a      	adds	r2, r3, #2
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	629a      	str	r2, [r3, #40]	; 0x28
 8007308:	e026      	b.n	8007358 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007310:	2300      	movs	r3, #0
 8007312:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800731c:	d007      	beq.n	800732e <UART_Receive_IT+0x74>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10a      	bne.n	800733c <UART_Receive_IT+0x82>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d106      	bne.n	800733c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	b2da      	uxtb	r2, r3
 8007336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007338:	701a      	strb	r2, [r3, #0]
 800733a:	e008      	b.n	800734e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	b2db      	uxtb	r3, r3
 8007344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007348:	b2da      	uxtb	r2, r3
 800734a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007352:	1c5a      	adds	r2, r3, #1
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800735c:	b29b      	uxth	r3, r3
 800735e:	3b01      	subs	r3, #1
 8007360:	b29b      	uxth	r3, r3
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	4619      	mov	r1, r3
 8007366:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007368:	2b00      	cmp	r3, #0
 800736a:	d15a      	bne.n	8007422 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68da      	ldr	r2, [r3, #12]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f022 0220 	bic.w	r2, r2, #32
 800737a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68da      	ldr	r2, [r3, #12]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800738a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	695a      	ldr	r2, [r3, #20]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f022 0201 	bic.w	r2, r2, #1
 800739a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2220      	movs	r2, #32
 80073a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d135      	bne.n	8007418 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	330c      	adds	r3, #12
 80073b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	e853 3f00 	ldrex	r3, [r3]
 80073c0:	613b      	str	r3, [r7, #16]
   return(result);
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	f023 0310 	bic.w	r3, r3, #16
 80073c8:	627b      	str	r3, [r7, #36]	; 0x24
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	330c      	adds	r3, #12
 80073d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073d2:	623a      	str	r2, [r7, #32]
 80073d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d6:	69f9      	ldr	r1, [r7, #28]
 80073d8:	6a3a      	ldr	r2, [r7, #32]
 80073da:	e841 2300 	strex	r3, r2, [r1]
 80073de:	61bb      	str	r3, [r7, #24]
   return(result);
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1e5      	bne.n	80073b2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 0310 	and.w	r3, r3, #16
 80073f0:	2b10      	cmp	r3, #16
 80073f2:	d10a      	bne.n	800740a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073f4:	2300      	movs	r3, #0
 80073f6:	60fb      	str	r3, [r7, #12]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	60fb      	str	r3, [r7, #12]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	60fb      	str	r3, [r7, #12]
 8007408:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800740e:	4619      	mov	r1, r3
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f7f9 fc61 	bl	8000cd8 <HAL_UARTEx_RxEventCallback>
 8007416:	e002      	b.n	800741e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f7ff fc25 	bl	8006c68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800741e:	2300      	movs	r3, #0
 8007420:	e002      	b.n	8007428 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007422:	2300      	movs	r3, #0
 8007424:	e000      	b.n	8007428 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007426:	2302      	movs	r3, #2
  }
}
 8007428:	4618      	mov	r0, r3
 800742a:	3730      	adds	r7, #48	; 0x30
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007434:	b0c0      	sub	sp, #256	; 0x100
 8007436:	af00      	add	r7, sp, #0
 8007438:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800743c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800744c:	68d9      	ldr	r1, [r3, #12]
 800744e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	ea40 0301 	orr.w	r3, r0, r1
 8007458:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800745a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800745e:	689a      	ldr	r2, [r3, #8]
 8007460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	431a      	orrs	r2, r3
 8007468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	431a      	orrs	r2, r3
 8007470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007474:	69db      	ldr	r3, [r3, #28]
 8007476:	4313      	orrs	r3, r2
 8007478:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800747c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007488:	f021 010c 	bic.w	r1, r1, #12
 800748c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007496:	430b      	orrs	r3, r1
 8007498:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800749a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80074a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074aa:	6999      	ldr	r1, [r3, #24]
 80074ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	ea40 0301 	orr.w	r3, r0, r1
 80074b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80074b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	4b8f      	ldr	r3, [pc, #572]	; (80076fc <UART_SetConfig+0x2cc>)
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d005      	beq.n	80074d0 <UART_SetConfig+0xa0>
 80074c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	4b8d      	ldr	r3, [pc, #564]	; (8007700 <UART_SetConfig+0x2d0>)
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d104      	bne.n	80074da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80074d0:	f7fe fadc 	bl	8005a8c <HAL_RCC_GetPCLK2Freq>
 80074d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80074d8:	e003      	b.n	80074e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80074da:	f7fe fac3 	bl	8005a64 <HAL_RCC_GetPCLK1Freq>
 80074de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074e6:	69db      	ldr	r3, [r3, #28]
 80074e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074ec:	f040 810c 	bne.w	8007708 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80074f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074f4:	2200      	movs	r2, #0
 80074f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80074fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80074fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007502:	4622      	mov	r2, r4
 8007504:	462b      	mov	r3, r5
 8007506:	1891      	adds	r1, r2, r2
 8007508:	65b9      	str	r1, [r7, #88]	; 0x58
 800750a:	415b      	adcs	r3, r3
 800750c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800750e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007512:	4621      	mov	r1, r4
 8007514:	eb12 0801 	adds.w	r8, r2, r1
 8007518:	4629      	mov	r1, r5
 800751a:	eb43 0901 	adc.w	r9, r3, r1
 800751e:	f04f 0200 	mov.w	r2, #0
 8007522:	f04f 0300 	mov.w	r3, #0
 8007526:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800752a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800752e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007532:	4690      	mov	r8, r2
 8007534:	4699      	mov	r9, r3
 8007536:	4623      	mov	r3, r4
 8007538:	eb18 0303 	adds.w	r3, r8, r3
 800753c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007540:	462b      	mov	r3, r5
 8007542:	eb49 0303 	adc.w	r3, r9, r3
 8007546:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800754a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007556:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800755a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800755e:	460b      	mov	r3, r1
 8007560:	18db      	adds	r3, r3, r3
 8007562:	653b      	str	r3, [r7, #80]	; 0x50
 8007564:	4613      	mov	r3, r2
 8007566:	eb42 0303 	adc.w	r3, r2, r3
 800756a:	657b      	str	r3, [r7, #84]	; 0x54
 800756c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007570:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007574:	f7f8 fe9c 	bl	80002b0 <__aeabi_uldivmod>
 8007578:	4602      	mov	r2, r0
 800757a:	460b      	mov	r3, r1
 800757c:	4b61      	ldr	r3, [pc, #388]	; (8007704 <UART_SetConfig+0x2d4>)
 800757e:	fba3 2302 	umull	r2, r3, r3, r2
 8007582:	095b      	lsrs	r3, r3, #5
 8007584:	011c      	lsls	r4, r3, #4
 8007586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800758a:	2200      	movs	r2, #0
 800758c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007590:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007594:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007598:	4642      	mov	r2, r8
 800759a:	464b      	mov	r3, r9
 800759c:	1891      	adds	r1, r2, r2
 800759e:	64b9      	str	r1, [r7, #72]	; 0x48
 80075a0:	415b      	adcs	r3, r3
 80075a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80075a8:	4641      	mov	r1, r8
 80075aa:	eb12 0a01 	adds.w	sl, r2, r1
 80075ae:	4649      	mov	r1, r9
 80075b0:	eb43 0b01 	adc.w	fp, r3, r1
 80075b4:	f04f 0200 	mov.w	r2, #0
 80075b8:	f04f 0300 	mov.w	r3, #0
 80075bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80075c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80075c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80075c8:	4692      	mov	sl, r2
 80075ca:	469b      	mov	fp, r3
 80075cc:	4643      	mov	r3, r8
 80075ce:	eb1a 0303 	adds.w	r3, sl, r3
 80075d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075d6:	464b      	mov	r3, r9
 80075d8:	eb4b 0303 	adc.w	r3, fp, r3
 80075dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80075e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80075ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80075f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80075f4:	460b      	mov	r3, r1
 80075f6:	18db      	adds	r3, r3, r3
 80075f8:	643b      	str	r3, [r7, #64]	; 0x40
 80075fa:	4613      	mov	r3, r2
 80075fc:	eb42 0303 	adc.w	r3, r2, r3
 8007600:	647b      	str	r3, [r7, #68]	; 0x44
 8007602:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007606:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800760a:	f7f8 fe51 	bl	80002b0 <__aeabi_uldivmod>
 800760e:	4602      	mov	r2, r0
 8007610:	460b      	mov	r3, r1
 8007612:	4611      	mov	r1, r2
 8007614:	4b3b      	ldr	r3, [pc, #236]	; (8007704 <UART_SetConfig+0x2d4>)
 8007616:	fba3 2301 	umull	r2, r3, r3, r1
 800761a:	095b      	lsrs	r3, r3, #5
 800761c:	2264      	movs	r2, #100	; 0x64
 800761e:	fb02 f303 	mul.w	r3, r2, r3
 8007622:	1acb      	subs	r3, r1, r3
 8007624:	00db      	lsls	r3, r3, #3
 8007626:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800762a:	4b36      	ldr	r3, [pc, #216]	; (8007704 <UART_SetConfig+0x2d4>)
 800762c:	fba3 2302 	umull	r2, r3, r3, r2
 8007630:	095b      	lsrs	r3, r3, #5
 8007632:	005b      	lsls	r3, r3, #1
 8007634:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007638:	441c      	add	r4, r3
 800763a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800763e:	2200      	movs	r2, #0
 8007640:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007644:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007648:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800764c:	4642      	mov	r2, r8
 800764e:	464b      	mov	r3, r9
 8007650:	1891      	adds	r1, r2, r2
 8007652:	63b9      	str	r1, [r7, #56]	; 0x38
 8007654:	415b      	adcs	r3, r3
 8007656:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007658:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800765c:	4641      	mov	r1, r8
 800765e:	1851      	adds	r1, r2, r1
 8007660:	6339      	str	r1, [r7, #48]	; 0x30
 8007662:	4649      	mov	r1, r9
 8007664:	414b      	adcs	r3, r1
 8007666:	637b      	str	r3, [r7, #52]	; 0x34
 8007668:	f04f 0200 	mov.w	r2, #0
 800766c:	f04f 0300 	mov.w	r3, #0
 8007670:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007674:	4659      	mov	r1, fp
 8007676:	00cb      	lsls	r3, r1, #3
 8007678:	4651      	mov	r1, sl
 800767a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800767e:	4651      	mov	r1, sl
 8007680:	00ca      	lsls	r2, r1, #3
 8007682:	4610      	mov	r0, r2
 8007684:	4619      	mov	r1, r3
 8007686:	4603      	mov	r3, r0
 8007688:	4642      	mov	r2, r8
 800768a:	189b      	adds	r3, r3, r2
 800768c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007690:	464b      	mov	r3, r9
 8007692:	460a      	mov	r2, r1
 8007694:	eb42 0303 	adc.w	r3, r2, r3
 8007698:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800769c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80076a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80076ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80076b0:	460b      	mov	r3, r1
 80076b2:	18db      	adds	r3, r3, r3
 80076b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80076b6:	4613      	mov	r3, r2
 80076b8:	eb42 0303 	adc.w	r3, r2, r3
 80076bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80076c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80076c6:	f7f8 fdf3 	bl	80002b0 <__aeabi_uldivmod>
 80076ca:	4602      	mov	r2, r0
 80076cc:	460b      	mov	r3, r1
 80076ce:	4b0d      	ldr	r3, [pc, #52]	; (8007704 <UART_SetConfig+0x2d4>)
 80076d0:	fba3 1302 	umull	r1, r3, r3, r2
 80076d4:	095b      	lsrs	r3, r3, #5
 80076d6:	2164      	movs	r1, #100	; 0x64
 80076d8:	fb01 f303 	mul.w	r3, r1, r3
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	00db      	lsls	r3, r3, #3
 80076e0:	3332      	adds	r3, #50	; 0x32
 80076e2:	4a08      	ldr	r2, [pc, #32]	; (8007704 <UART_SetConfig+0x2d4>)
 80076e4:	fba2 2303 	umull	r2, r3, r2, r3
 80076e8:	095b      	lsrs	r3, r3, #5
 80076ea:	f003 0207 	and.w	r2, r3, #7
 80076ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4422      	add	r2, r4
 80076f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80076f8:	e105      	b.n	8007906 <UART_SetConfig+0x4d6>
 80076fa:	bf00      	nop
 80076fc:	40011000 	.word	0x40011000
 8007700:	40011400 	.word	0x40011400
 8007704:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007708:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800770c:	2200      	movs	r2, #0
 800770e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007712:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007716:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800771a:	4642      	mov	r2, r8
 800771c:	464b      	mov	r3, r9
 800771e:	1891      	adds	r1, r2, r2
 8007720:	6239      	str	r1, [r7, #32]
 8007722:	415b      	adcs	r3, r3
 8007724:	627b      	str	r3, [r7, #36]	; 0x24
 8007726:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800772a:	4641      	mov	r1, r8
 800772c:	1854      	adds	r4, r2, r1
 800772e:	4649      	mov	r1, r9
 8007730:	eb43 0501 	adc.w	r5, r3, r1
 8007734:	f04f 0200 	mov.w	r2, #0
 8007738:	f04f 0300 	mov.w	r3, #0
 800773c:	00eb      	lsls	r3, r5, #3
 800773e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007742:	00e2      	lsls	r2, r4, #3
 8007744:	4614      	mov	r4, r2
 8007746:	461d      	mov	r5, r3
 8007748:	4643      	mov	r3, r8
 800774a:	18e3      	adds	r3, r4, r3
 800774c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007750:	464b      	mov	r3, r9
 8007752:	eb45 0303 	adc.w	r3, r5, r3
 8007756:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800775a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007766:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800776a:	f04f 0200 	mov.w	r2, #0
 800776e:	f04f 0300 	mov.w	r3, #0
 8007772:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007776:	4629      	mov	r1, r5
 8007778:	008b      	lsls	r3, r1, #2
 800777a:	4621      	mov	r1, r4
 800777c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007780:	4621      	mov	r1, r4
 8007782:	008a      	lsls	r2, r1, #2
 8007784:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007788:	f7f8 fd92 	bl	80002b0 <__aeabi_uldivmod>
 800778c:	4602      	mov	r2, r0
 800778e:	460b      	mov	r3, r1
 8007790:	4b60      	ldr	r3, [pc, #384]	; (8007914 <UART_SetConfig+0x4e4>)
 8007792:	fba3 2302 	umull	r2, r3, r3, r2
 8007796:	095b      	lsrs	r3, r3, #5
 8007798:	011c      	lsls	r4, r3, #4
 800779a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800779e:	2200      	movs	r2, #0
 80077a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80077a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80077a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80077ac:	4642      	mov	r2, r8
 80077ae:	464b      	mov	r3, r9
 80077b0:	1891      	adds	r1, r2, r2
 80077b2:	61b9      	str	r1, [r7, #24]
 80077b4:	415b      	adcs	r3, r3
 80077b6:	61fb      	str	r3, [r7, #28]
 80077b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80077bc:	4641      	mov	r1, r8
 80077be:	1851      	adds	r1, r2, r1
 80077c0:	6139      	str	r1, [r7, #16]
 80077c2:	4649      	mov	r1, r9
 80077c4:	414b      	adcs	r3, r1
 80077c6:	617b      	str	r3, [r7, #20]
 80077c8:	f04f 0200 	mov.w	r2, #0
 80077cc:	f04f 0300 	mov.w	r3, #0
 80077d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80077d4:	4659      	mov	r1, fp
 80077d6:	00cb      	lsls	r3, r1, #3
 80077d8:	4651      	mov	r1, sl
 80077da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077de:	4651      	mov	r1, sl
 80077e0:	00ca      	lsls	r2, r1, #3
 80077e2:	4610      	mov	r0, r2
 80077e4:	4619      	mov	r1, r3
 80077e6:	4603      	mov	r3, r0
 80077e8:	4642      	mov	r2, r8
 80077ea:	189b      	adds	r3, r3, r2
 80077ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80077f0:	464b      	mov	r3, r9
 80077f2:	460a      	mov	r2, r1
 80077f4:	eb42 0303 	adc.w	r3, r2, r3
 80077f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80077fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	67bb      	str	r3, [r7, #120]	; 0x78
 8007806:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007808:	f04f 0200 	mov.w	r2, #0
 800780c:	f04f 0300 	mov.w	r3, #0
 8007810:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007814:	4649      	mov	r1, r9
 8007816:	008b      	lsls	r3, r1, #2
 8007818:	4641      	mov	r1, r8
 800781a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800781e:	4641      	mov	r1, r8
 8007820:	008a      	lsls	r2, r1, #2
 8007822:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007826:	f7f8 fd43 	bl	80002b0 <__aeabi_uldivmod>
 800782a:	4602      	mov	r2, r0
 800782c:	460b      	mov	r3, r1
 800782e:	4b39      	ldr	r3, [pc, #228]	; (8007914 <UART_SetConfig+0x4e4>)
 8007830:	fba3 1302 	umull	r1, r3, r3, r2
 8007834:	095b      	lsrs	r3, r3, #5
 8007836:	2164      	movs	r1, #100	; 0x64
 8007838:	fb01 f303 	mul.w	r3, r1, r3
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	011b      	lsls	r3, r3, #4
 8007840:	3332      	adds	r3, #50	; 0x32
 8007842:	4a34      	ldr	r2, [pc, #208]	; (8007914 <UART_SetConfig+0x4e4>)
 8007844:	fba2 2303 	umull	r2, r3, r2, r3
 8007848:	095b      	lsrs	r3, r3, #5
 800784a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800784e:	441c      	add	r4, r3
 8007850:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007854:	2200      	movs	r2, #0
 8007856:	673b      	str	r3, [r7, #112]	; 0x70
 8007858:	677a      	str	r2, [r7, #116]	; 0x74
 800785a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800785e:	4642      	mov	r2, r8
 8007860:	464b      	mov	r3, r9
 8007862:	1891      	adds	r1, r2, r2
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	415b      	adcs	r3, r3
 8007868:	60fb      	str	r3, [r7, #12]
 800786a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800786e:	4641      	mov	r1, r8
 8007870:	1851      	adds	r1, r2, r1
 8007872:	6039      	str	r1, [r7, #0]
 8007874:	4649      	mov	r1, r9
 8007876:	414b      	adcs	r3, r1
 8007878:	607b      	str	r3, [r7, #4]
 800787a:	f04f 0200 	mov.w	r2, #0
 800787e:	f04f 0300 	mov.w	r3, #0
 8007882:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007886:	4659      	mov	r1, fp
 8007888:	00cb      	lsls	r3, r1, #3
 800788a:	4651      	mov	r1, sl
 800788c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007890:	4651      	mov	r1, sl
 8007892:	00ca      	lsls	r2, r1, #3
 8007894:	4610      	mov	r0, r2
 8007896:	4619      	mov	r1, r3
 8007898:	4603      	mov	r3, r0
 800789a:	4642      	mov	r2, r8
 800789c:	189b      	adds	r3, r3, r2
 800789e:	66bb      	str	r3, [r7, #104]	; 0x68
 80078a0:	464b      	mov	r3, r9
 80078a2:	460a      	mov	r2, r1
 80078a4:	eb42 0303 	adc.w	r3, r2, r3
 80078a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	663b      	str	r3, [r7, #96]	; 0x60
 80078b4:	667a      	str	r2, [r7, #100]	; 0x64
 80078b6:	f04f 0200 	mov.w	r2, #0
 80078ba:	f04f 0300 	mov.w	r3, #0
 80078be:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80078c2:	4649      	mov	r1, r9
 80078c4:	008b      	lsls	r3, r1, #2
 80078c6:	4641      	mov	r1, r8
 80078c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078cc:	4641      	mov	r1, r8
 80078ce:	008a      	lsls	r2, r1, #2
 80078d0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80078d4:	f7f8 fcec 	bl	80002b0 <__aeabi_uldivmod>
 80078d8:	4602      	mov	r2, r0
 80078da:	460b      	mov	r3, r1
 80078dc:	4b0d      	ldr	r3, [pc, #52]	; (8007914 <UART_SetConfig+0x4e4>)
 80078de:	fba3 1302 	umull	r1, r3, r3, r2
 80078e2:	095b      	lsrs	r3, r3, #5
 80078e4:	2164      	movs	r1, #100	; 0x64
 80078e6:	fb01 f303 	mul.w	r3, r1, r3
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	011b      	lsls	r3, r3, #4
 80078ee:	3332      	adds	r3, #50	; 0x32
 80078f0:	4a08      	ldr	r2, [pc, #32]	; (8007914 <UART_SetConfig+0x4e4>)
 80078f2:	fba2 2303 	umull	r2, r3, r2, r3
 80078f6:	095b      	lsrs	r3, r3, #5
 80078f8:	f003 020f 	and.w	r2, r3, #15
 80078fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4422      	add	r2, r4
 8007904:	609a      	str	r2, [r3, #8]
}
 8007906:	bf00      	nop
 8007908:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800790c:	46bd      	mov	sp, r7
 800790e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007912:	bf00      	nop
 8007914:	51eb851f 	.word	0x51eb851f

08007918 <__errno>:
 8007918:	4b01      	ldr	r3, [pc, #4]	; (8007920 <__errno+0x8>)
 800791a:	6818      	ldr	r0, [r3, #0]
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	2000002c 	.word	0x2000002c

08007924 <__libc_init_array>:
 8007924:	b570      	push	{r4, r5, r6, lr}
 8007926:	4d0d      	ldr	r5, [pc, #52]	; (800795c <__libc_init_array+0x38>)
 8007928:	4c0d      	ldr	r4, [pc, #52]	; (8007960 <__libc_init_array+0x3c>)
 800792a:	1b64      	subs	r4, r4, r5
 800792c:	10a4      	asrs	r4, r4, #2
 800792e:	2600      	movs	r6, #0
 8007930:	42a6      	cmp	r6, r4
 8007932:	d109      	bne.n	8007948 <__libc_init_array+0x24>
 8007934:	4d0b      	ldr	r5, [pc, #44]	; (8007964 <__libc_init_array+0x40>)
 8007936:	4c0c      	ldr	r4, [pc, #48]	; (8007968 <__libc_init_array+0x44>)
 8007938:	f001 f842 	bl	80089c0 <_init>
 800793c:	1b64      	subs	r4, r4, r5
 800793e:	10a4      	asrs	r4, r4, #2
 8007940:	2600      	movs	r6, #0
 8007942:	42a6      	cmp	r6, r4
 8007944:	d105      	bne.n	8007952 <__libc_init_array+0x2e>
 8007946:	bd70      	pop	{r4, r5, r6, pc}
 8007948:	f855 3b04 	ldr.w	r3, [r5], #4
 800794c:	4798      	blx	r3
 800794e:	3601      	adds	r6, #1
 8007950:	e7ee      	b.n	8007930 <__libc_init_array+0xc>
 8007952:	f855 3b04 	ldr.w	r3, [r5], #4
 8007956:	4798      	blx	r3
 8007958:	3601      	adds	r6, #1
 800795a:	e7f2      	b.n	8007942 <__libc_init_array+0x1e>
 800795c:	08008bc0 	.word	0x08008bc0
 8007960:	08008bc0 	.word	0x08008bc0
 8007964:	08008bc0 	.word	0x08008bc0
 8007968:	08008bc4 	.word	0x08008bc4

0800796c <memcmp>:
 800796c:	b510      	push	{r4, lr}
 800796e:	3901      	subs	r1, #1
 8007970:	4402      	add	r2, r0
 8007972:	4290      	cmp	r0, r2
 8007974:	d101      	bne.n	800797a <memcmp+0xe>
 8007976:	2000      	movs	r0, #0
 8007978:	e005      	b.n	8007986 <memcmp+0x1a>
 800797a:	7803      	ldrb	r3, [r0, #0]
 800797c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007980:	42a3      	cmp	r3, r4
 8007982:	d001      	beq.n	8007988 <memcmp+0x1c>
 8007984:	1b18      	subs	r0, r3, r4
 8007986:	bd10      	pop	{r4, pc}
 8007988:	3001      	adds	r0, #1
 800798a:	e7f2      	b.n	8007972 <memcmp+0x6>

0800798c <memcpy>:
 800798c:	440a      	add	r2, r1
 800798e:	4291      	cmp	r1, r2
 8007990:	f100 33ff 	add.w	r3, r0, #4294967295
 8007994:	d100      	bne.n	8007998 <memcpy+0xc>
 8007996:	4770      	bx	lr
 8007998:	b510      	push	{r4, lr}
 800799a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800799e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079a2:	4291      	cmp	r1, r2
 80079a4:	d1f9      	bne.n	800799a <memcpy+0xe>
 80079a6:	bd10      	pop	{r4, pc}

080079a8 <memset>:
 80079a8:	4402      	add	r2, r0
 80079aa:	4603      	mov	r3, r0
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d100      	bne.n	80079b2 <memset+0xa>
 80079b0:	4770      	bx	lr
 80079b2:	f803 1b01 	strb.w	r1, [r3], #1
 80079b6:	e7f9      	b.n	80079ac <memset+0x4>

080079b8 <iprintf>:
 80079b8:	b40f      	push	{r0, r1, r2, r3}
 80079ba:	4b0a      	ldr	r3, [pc, #40]	; (80079e4 <iprintf+0x2c>)
 80079bc:	b513      	push	{r0, r1, r4, lr}
 80079be:	681c      	ldr	r4, [r3, #0]
 80079c0:	b124      	cbz	r4, 80079cc <iprintf+0x14>
 80079c2:	69a3      	ldr	r3, [r4, #24]
 80079c4:	b913      	cbnz	r3, 80079cc <iprintf+0x14>
 80079c6:	4620      	mov	r0, r4
 80079c8:	f000 fa5e 	bl	8007e88 <__sinit>
 80079cc:	ab05      	add	r3, sp, #20
 80079ce:	9a04      	ldr	r2, [sp, #16]
 80079d0:	68a1      	ldr	r1, [r4, #8]
 80079d2:	9301      	str	r3, [sp, #4]
 80079d4:	4620      	mov	r0, r4
 80079d6:	f000 fc67 	bl	80082a8 <_vfiprintf_r>
 80079da:	b002      	add	sp, #8
 80079dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079e0:	b004      	add	sp, #16
 80079e2:	4770      	bx	lr
 80079e4:	2000002c 	.word	0x2000002c

080079e8 <_puts_r>:
 80079e8:	b570      	push	{r4, r5, r6, lr}
 80079ea:	460e      	mov	r6, r1
 80079ec:	4605      	mov	r5, r0
 80079ee:	b118      	cbz	r0, 80079f8 <_puts_r+0x10>
 80079f0:	6983      	ldr	r3, [r0, #24]
 80079f2:	b90b      	cbnz	r3, 80079f8 <_puts_r+0x10>
 80079f4:	f000 fa48 	bl	8007e88 <__sinit>
 80079f8:	69ab      	ldr	r3, [r5, #24]
 80079fa:	68ac      	ldr	r4, [r5, #8]
 80079fc:	b913      	cbnz	r3, 8007a04 <_puts_r+0x1c>
 80079fe:	4628      	mov	r0, r5
 8007a00:	f000 fa42 	bl	8007e88 <__sinit>
 8007a04:	4b2c      	ldr	r3, [pc, #176]	; (8007ab8 <_puts_r+0xd0>)
 8007a06:	429c      	cmp	r4, r3
 8007a08:	d120      	bne.n	8007a4c <_puts_r+0x64>
 8007a0a:	686c      	ldr	r4, [r5, #4]
 8007a0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a0e:	07db      	lsls	r3, r3, #31
 8007a10:	d405      	bmi.n	8007a1e <_puts_r+0x36>
 8007a12:	89a3      	ldrh	r3, [r4, #12]
 8007a14:	0598      	lsls	r0, r3, #22
 8007a16:	d402      	bmi.n	8007a1e <_puts_r+0x36>
 8007a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a1a:	f000 fad3 	bl	8007fc4 <__retarget_lock_acquire_recursive>
 8007a1e:	89a3      	ldrh	r3, [r4, #12]
 8007a20:	0719      	lsls	r1, r3, #28
 8007a22:	d51d      	bpl.n	8007a60 <_puts_r+0x78>
 8007a24:	6923      	ldr	r3, [r4, #16]
 8007a26:	b1db      	cbz	r3, 8007a60 <_puts_r+0x78>
 8007a28:	3e01      	subs	r6, #1
 8007a2a:	68a3      	ldr	r3, [r4, #8]
 8007a2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007a30:	3b01      	subs	r3, #1
 8007a32:	60a3      	str	r3, [r4, #8]
 8007a34:	bb39      	cbnz	r1, 8007a86 <_puts_r+0x9e>
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	da38      	bge.n	8007aac <_puts_r+0xc4>
 8007a3a:	4622      	mov	r2, r4
 8007a3c:	210a      	movs	r1, #10
 8007a3e:	4628      	mov	r0, r5
 8007a40:	f000 f848 	bl	8007ad4 <__swbuf_r>
 8007a44:	3001      	adds	r0, #1
 8007a46:	d011      	beq.n	8007a6c <_puts_r+0x84>
 8007a48:	250a      	movs	r5, #10
 8007a4a:	e011      	b.n	8007a70 <_puts_r+0x88>
 8007a4c:	4b1b      	ldr	r3, [pc, #108]	; (8007abc <_puts_r+0xd4>)
 8007a4e:	429c      	cmp	r4, r3
 8007a50:	d101      	bne.n	8007a56 <_puts_r+0x6e>
 8007a52:	68ac      	ldr	r4, [r5, #8]
 8007a54:	e7da      	b.n	8007a0c <_puts_r+0x24>
 8007a56:	4b1a      	ldr	r3, [pc, #104]	; (8007ac0 <_puts_r+0xd8>)
 8007a58:	429c      	cmp	r4, r3
 8007a5a:	bf08      	it	eq
 8007a5c:	68ec      	ldreq	r4, [r5, #12]
 8007a5e:	e7d5      	b.n	8007a0c <_puts_r+0x24>
 8007a60:	4621      	mov	r1, r4
 8007a62:	4628      	mov	r0, r5
 8007a64:	f000 f888 	bl	8007b78 <__swsetup_r>
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	d0dd      	beq.n	8007a28 <_puts_r+0x40>
 8007a6c:	f04f 35ff 	mov.w	r5, #4294967295
 8007a70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a72:	07da      	lsls	r2, r3, #31
 8007a74:	d405      	bmi.n	8007a82 <_puts_r+0x9a>
 8007a76:	89a3      	ldrh	r3, [r4, #12]
 8007a78:	059b      	lsls	r3, r3, #22
 8007a7a:	d402      	bmi.n	8007a82 <_puts_r+0x9a>
 8007a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a7e:	f000 faa2 	bl	8007fc6 <__retarget_lock_release_recursive>
 8007a82:	4628      	mov	r0, r5
 8007a84:	bd70      	pop	{r4, r5, r6, pc}
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	da04      	bge.n	8007a94 <_puts_r+0xac>
 8007a8a:	69a2      	ldr	r2, [r4, #24]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	dc06      	bgt.n	8007a9e <_puts_r+0xb6>
 8007a90:	290a      	cmp	r1, #10
 8007a92:	d004      	beq.n	8007a9e <_puts_r+0xb6>
 8007a94:	6823      	ldr	r3, [r4, #0]
 8007a96:	1c5a      	adds	r2, r3, #1
 8007a98:	6022      	str	r2, [r4, #0]
 8007a9a:	7019      	strb	r1, [r3, #0]
 8007a9c:	e7c5      	b.n	8007a2a <_puts_r+0x42>
 8007a9e:	4622      	mov	r2, r4
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	f000 f817 	bl	8007ad4 <__swbuf_r>
 8007aa6:	3001      	adds	r0, #1
 8007aa8:	d1bf      	bne.n	8007a2a <_puts_r+0x42>
 8007aaa:	e7df      	b.n	8007a6c <_puts_r+0x84>
 8007aac:	6823      	ldr	r3, [r4, #0]
 8007aae:	250a      	movs	r5, #10
 8007ab0:	1c5a      	adds	r2, r3, #1
 8007ab2:	6022      	str	r2, [r4, #0]
 8007ab4:	701d      	strb	r5, [r3, #0]
 8007ab6:	e7db      	b.n	8007a70 <_puts_r+0x88>
 8007ab8:	08008b44 	.word	0x08008b44
 8007abc:	08008b64 	.word	0x08008b64
 8007ac0:	08008b24 	.word	0x08008b24

08007ac4 <puts>:
 8007ac4:	4b02      	ldr	r3, [pc, #8]	; (8007ad0 <puts+0xc>)
 8007ac6:	4601      	mov	r1, r0
 8007ac8:	6818      	ldr	r0, [r3, #0]
 8007aca:	f7ff bf8d 	b.w	80079e8 <_puts_r>
 8007ace:	bf00      	nop
 8007ad0:	2000002c 	.word	0x2000002c

08007ad4 <__swbuf_r>:
 8007ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ad6:	460e      	mov	r6, r1
 8007ad8:	4614      	mov	r4, r2
 8007ada:	4605      	mov	r5, r0
 8007adc:	b118      	cbz	r0, 8007ae6 <__swbuf_r+0x12>
 8007ade:	6983      	ldr	r3, [r0, #24]
 8007ae0:	b90b      	cbnz	r3, 8007ae6 <__swbuf_r+0x12>
 8007ae2:	f000 f9d1 	bl	8007e88 <__sinit>
 8007ae6:	4b21      	ldr	r3, [pc, #132]	; (8007b6c <__swbuf_r+0x98>)
 8007ae8:	429c      	cmp	r4, r3
 8007aea:	d12b      	bne.n	8007b44 <__swbuf_r+0x70>
 8007aec:	686c      	ldr	r4, [r5, #4]
 8007aee:	69a3      	ldr	r3, [r4, #24]
 8007af0:	60a3      	str	r3, [r4, #8]
 8007af2:	89a3      	ldrh	r3, [r4, #12]
 8007af4:	071a      	lsls	r2, r3, #28
 8007af6:	d52f      	bpl.n	8007b58 <__swbuf_r+0x84>
 8007af8:	6923      	ldr	r3, [r4, #16]
 8007afa:	b36b      	cbz	r3, 8007b58 <__swbuf_r+0x84>
 8007afc:	6923      	ldr	r3, [r4, #16]
 8007afe:	6820      	ldr	r0, [r4, #0]
 8007b00:	1ac0      	subs	r0, r0, r3
 8007b02:	6963      	ldr	r3, [r4, #20]
 8007b04:	b2f6      	uxtb	r6, r6
 8007b06:	4283      	cmp	r3, r0
 8007b08:	4637      	mov	r7, r6
 8007b0a:	dc04      	bgt.n	8007b16 <__swbuf_r+0x42>
 8007b0c:	4621      	mov	r1, r4
 8007b0e:	4628      	mov	r0, r5
 8007b10:	f000 f926 	bl	8007d60 <_fflush_r>
 8007b14:	bb30      	cbnz	r0, 8007b64 <__swbuf_r+0x90>
 8007b16:	68a3      	ldr	r3, [r4, #8]
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	60a3      	str	r3, [r4, #8]
 8007b1c:	6823      	ldr	r3, [r4, #0]
 8007b1e:	1c5a      	adds	r2, r3, #1
 8007b20:	6022      	str	r2, [r4, #0]
 8007b22:	701e      	strb	r6, [r3, #0]
 8007b24:	6963      	ldr	r3, [r4, #20]
 8007b26:	3001      	adds	r0, #1
 8007b28:	4283      	cmp	r3, r0
 8007b2a:	d004      	beq.n	8007b36 <__swbuf_r+0x62>
 8007b2c:	89a3      	ldrh	r3, [r4, #12]
 8007b2e:	07db      	lsls	r3, r3, #31
 8007b30:	d506      	bpl.n	8007b40 <__swbuf_r+0x6c>
 8007b32:	2e0a      	cmp	r6, #10
 8007b34:	d104      	bne.n	8007b40 <__swbuf_r+0x6c>
 8007b36:	4621      	mov	r1, r4
 8007b38:	4628      	mov	r0, r5
 8007b3a:	f000 f911 	bl	8007d60 <_fflush_r>
 8007b3e:	b988      	cbnz	r0, 8007b64 <__swbuf_r+0x90>
 8007b40:	4638      	mov	r0, r7
 8007b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b44:	4b0a      	ldr	r3, [pc, #40]	; (8007b70 <__swbuf_r+0x9c>)
 8007b46:	429c      	cmp	r4, r3
 8007b48:	d101      	bne.n	8007b4e <__swbuf_r+0x7a>
 8007b4a:	68ac      	ldr	r4, [r5, #8]
 8007b4c:	e7cf      	b.n	8007aee <__swbuf_r+0x1a>
 8007b4e:	4b09      	ldr	r3, [pc, #36]	; (8007b74 <__swbuf_r+0xa0>)
 8007b50:	429c      	cmp	r4, r3
 8007b52:	bf08      	it	eq
 8007b54:	68ec      	ldreq	r4, [r5, #12]
 8007b56:	e7ca      	b.n	8007aee <__swbuf_r+0x1a>
 8007b58:	4621      	mov	r1, r4
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	f000 f80c 	bl	8007b78 <__swsetup_r>
 8007b60:	2800      	cmp	r0, #0
 8007b62:	d0cb      	beq.n	8007afc <__swbuf_r+0x28>
 8007b64:	f04f 37ff 	mov.w	r7, #4294967295
 8007b68:	e7ea      	b.n	8007b40 <__swbuf_r+0x6c>
 8007b6a:	bf00      	nop
 8007b6c:	08008b44 	.word	0x08008b44
 8007b70:	08008b64 	.word	0x08008b64
 8007b74:	08008b24 	.word	0x08008b24

08007b78 <__swsetup_r>:
 8007b78:	4b32      	ldr	r3, [pc, #200]	; (8007c44 <__swsetup_r+0xcc>)
 8007b7a:	b570      	push	{r4, r5, r6, lr}
 8007b7c:	681d      	ldr	r5, [r3, #0]
 8007b7e:	4606      	mov	r6, r0
 8007b80:	460c      	mov	r4, r1
 8007b82:	b125      	cbz	r5, 8007b8e <__swsetup_r+0x16>
 8007b84:	69ab      	ldr	r3, [r5, #24]
 8007b86:	b913      	cbnz	r3, 8007b8e <__swsetup_r+0x16>
 8007b88:	4628      	mov	r0, r5
 8007b8a:	f000 f97d 	bl	8007e88 <__sinit>
 8007b8e:	4b2e      	ldr	r3, [pc, #184]	; (8007c48 <__swsetup_r+0xd0>)
 8007b90:	429c      	cmp	r4, r3
 8007b92:	d10f      	bne.n	8007bb4 <__swsetup_r+0x3c>
 8007b94:	686c      	ldr	r4, [r5, #4]
 8007b96:	89a3      	ldrh	r3, [r4, #12]
 8007b98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b9c:	0719      	lsls	r1, r3, #28
 8007b9e:	d42c      	bmi.n	8007bfa <__swsetup_r+0x82>
 8007ba0:	06dd      	lsls	r5, r3, #27
 8007ba2:	d411      	bmi.n	8007bc8 <__swsetup_r+0x50>
 8007ba4:	2309      	movs	r3, #9
 8007ba6:	6033      	str	r3, [r6, #0]
 8007ba8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007bac:	81a3      	strh	r3, [r4, #12]
 8007bae:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb2:	e03e      	b.n	8007c32 <__swsetup_r+0xba>
 8007bb4:	4b25      	ldr	r3, [pc, #148]	; (8007c4c <__swsetup_r+0xd4>)
 8007bb6:	429c      	cmp	r4, r3
 8007bb8:	d101      	bne.n	8007bbe <__swsetup_r+0x46>
 8007bba:	68ac      	ldr	r4, [r5, #8]
 8007bbc:	e7eb      	b.n	8007b96 <__swsetup_r+0x1e>
 8007bbe:	4b24      	ldr	r3, [pc, #144]	; (8007c50 <__swsetup_r+0xd8>)
 8007bc0:	429c      	cmp	r4, r3
 8007bc2:	bf08      	it	eq
 8007bc4:	68ec      	ldreq	r4, [r5, #12]
 8007bc6:	e7e6      	b.n	8007b96 <__swsetup_r+0x1e>
 8007bc8:	0758      	lsls	r0, r3, #29
 8007bca:	d512      	bpl.n	8007bf2 <__swsetup_r+0x7a>
 8007bcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bce:	b141      	cbz	r1, 8007be2 <__swsetup_r+0x6a>
 8007bd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bd4:	4299      	cmp	r1, r3
 8007bd6:	d002      	beq.n	8007bde <__swsetup_r+0x66>
 8007bd8:	4630      	mov	r0, r6
 8007bda:	f000 fa5b 	bl	8008094 <_free_r>
 8007bde:	2300      	movs	r3, #0
 8007be0:	6363      	str	r3, [r4, #52]	; 0x34
 8007be2:	89a3      	ldrh	r3, [r4, #12]
 8007be4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007be8:	81a3      	strh	r3, [r4, #12]
 8007bea:	2300      	movs	r3, #0
 8007bec:	6063      	str	r3, [r4, #4]
 8007bee:	6923      	ldr	r3, [r4, #16]
 8007bf0:	6023      	str	r3, [r4, #0]
 8007bf2:	89a3      	ldrh	r3, [r4, #12]
 8007bf4:	f043 0308 	orr.w	r3, r3, #8
 8007bf8:	81a3      	strh	r3, [r4, #12]
 8007bfa:	6923      	ldr	r3, [r4, #16]
 8007bfc:	b94b      	cbnz	r3, 8007c12 <__swsetup_r+0x9a>
 8007bfe:	89a3      	ldrh	r3, [r4, #12]
 8007c00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c08:	d003      	beq.n	8007c12 <__swsetup_r+0x9a>
 8007c0a:	4621      	mov	r1, r4
 8007c0c:	4630      	mov	r0, r6
 8007c0e:	f000 fa01 	bl	8008014 <__smakebuf_r>
 8007c12:	89a0      	ldrh	r0, [r4, #12]
 8007c14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c18:	f010 0301 	ands.w	r3, r0, #1
 8007c1c:	d00a      	beq.n	8007c34 <__swsetup_r+0xbc>
 8007c1e:	2300      	movs	r3, #0
 8007c20:	60a3      	str	r3, [r4, #8]
 8007c22:	6963      	ldr	r3, [r4, #20]
 8007c24:	425b      	negs	r3, r3
 8007c26:	61a3      	str	r3, [r4, #24]
 8007c28:	6923      	ldr	r3, [r4, #16]
 8007c2a:	b943      	cbnz	r3, 8007c3e <__swsetup_r+0xc6>
 8007c2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c30:	d1ba      	bne.n	8007ba8 <__swsetup_r+0x30>
 8007c32:	bd70      	pop	{r4, r5, r6, pc}
 8007c34:	0781      	lsls	r1, r0, #30
 8007c36:	bf58      	it	pl
 8007c38:	6963      	ldrpl	r3, [r4, #20]
 8007c3a:	60a3      	str	r3, [r4, #8]
 8007c3c:	e7f4      	b.n	8007c28 <__swsetup_r+0xb0>
 8007c3e:	2000      	movs	r0, #0
 8007c40:	e7f7      	b.n	8007c32 <__swsetup_r+0xba>
 8007c42:	bf00      	nop
 8007c44:	2000002c 	.word	0x2000002c
 8007c48:	08008b44 	.word	0x08008b44
 8007c4c:	08008b64 	.word	0x08008b64
 8007c50:	08008b24 	.word	0x08008b24

08007c54 <__sflush_r>:
 8007c54:	898a      	ldrh	r2, [r1, #12]
 8007c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c5a:	4605      	mov	r5, r0
 8007c5c:	0710      	lsls	r0, r2, #28
 8007c5e:	460c      	mov	r4, r1
 8007c60:	d458      	bmi.n	8007d14 <__sflush_r+0xc0>
 8007c62:	684b      	ldr	r3, [r1, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	dc05      	bgt.n	8007c74 <__sflush_r+0x20>
 8007c68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	dc02      	bgt.n	8007c74 <__sflush_r+0x20>
 8007c6e:	2000      	movs	r0, #0
 8007c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c76:	2e00      	cmp	r6, #0
 8007c78:	d0f9      	beq.n	8007c6e <__sflush_r+0x1a>
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c80:	682f      	ldr	r7, [r5, #0]
 8007c82:	602b      	str	r3, [r5, #0]
 8007c84:	d032      	beq.n	8007cec <__sflush_r+0x98>
 8007c86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c88:	89a3      	ldrh	r3, [r4, #12]
 8007c8a:	075a      	lsls	r2, r3, #29
 8007c8c:	d505      	bpl.n	8007c9a <__sflush_r+0x46>
 8007c8e:	6863      	ldr	r3, [r4, #4]
 8007c90:	1ac0      	subs	r0, r0, r3
 8007c92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c94:	b10b      	cbz	r3, 8007c9a <__sflush_r+0x46>
 8007c96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c98:	1ac0      	subs	r0, r0, r3
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ca0:	6a21      	ldr	r1, [r4, #32]
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	47b0      	blx	r6
 8007ca6:	1c43      	adds	r3, r0, #1
 8007ca8:	89a3      	ldrh	r3, [r4, #12]
 8007caa:	d106      	bne.n	8007cba <__sflush_r+0x66>
 8007cac:	6829      	ldr	r1, [r5, #0]
 8007cae:	291d      	cmp	r1, #29
 8007cb0:	d82c      	bhi.n	8007d0c <__sflush_r+0xb8>
 8007cb2:	4a2a      	ldr	r2, [pc, #168]	; (8007d5c <__sflush_r+0x108>)
 8007cb4:	40ca      	lsrs	r2, r1
 8007cb6:	07d6      	lsls	r6, r2, #31
 8007cb8:	d528      	bpl.n	8007d0c <__sflush_r+0xb8>
 8007cba:	2200      	movs	r2, #0
 8007cbc:	6062      	str	r2, [r4, #4]
 8007cbe:	04d9      	lsls	r1, r3, #19
 8007cc0:	6922      	ldr	r2, [r4, #16]
 8007cc2:	6022      	str	r2, [r4, #0]
 8007cc4:	d504      	bpl.n	8007cd0 <__sflush_r+0x7c>
 8007cc6:	1c42      	adds	r2, r0, #1
 8007cc8:	d101      	bne.n	8007cce <__sflush_r+0x7a>
 8007cca:	682b      	ldr	r3, [r5, #0]
 8007ccc:	b903      	cbnz	r3, 8007cd0 <__sflush_r+0x7c>
 8007cce:	6560      	str	r0, [r4, #84]	; 0x54
 8007cd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cd2:	602f      	str	r7, [r5, #0]
 8007cd4:	2900      	cmp	r1, #0
 8007cd6:	d0ca      	beq.n	8007c6e <__sflush_r+0x1a>
 8007cd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cdc:	4299      	cmp	r1, r3
 8007cde:	d002      	beq.n	8007ce6 <__sflush_r+0x92>
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	f000 f9d7 	bl	8008094 <_free_r>
 8007ce6:	2000      	movs	r0, #0
 8007ce8:	6360      	str	r0, [r4, #52]	; 0x34
 8007cea:	e7c1      	b.n	8007c70 <__sflush_r+0x1c>
 8007cec:	6a21      	ldr	r1, [r4, #32]
 8007cee:	2301      	movs	r3, #1
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	47b0      	blx	r6
 8007cf4:	1c41      	adds	r1, r0, #1
 8007cf6:	d1c7      	bne.n	8007c88 <__sflush_r+0x34>
 8007cf8:	682b      	ldr	r3, [r5, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d0c4      	beq.n	8007c88 <__sflush_r+0x34>
 8007cfe:	2b1d      	cmp	r3, #29
 8007d00:	d001      	beq.n	8007d06 <__sflush_r+0xb2>
 8007d02:	2b16      	cmp	r3, #22
 8007d04:	d101      	bne.n	8007d0a <__sflush_r+0xb6>
 8007d06:	602f      	str	r7, [r5, #0]
 8007d08:	e7b1      	b.n	8007c6e <__sflush_r+0x1a>
 8007d0a:	89a3      	ldrh	r3, [r4, #12]
 8007d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d10:	81a3      	strh	r3, [r4, #12]
 8007d12:	e7ad      	b.n	8007c70 <__sflush_r+0x1c>
 8007d14:	690f      	ldr	r7, [r1, #16]
 8007d16:	2f00      	cmp	r7, #0
 8007d18:	d0a9      	beq.n	8007c6e <__sflush_r+0x1a>
 8007d1a:	0793      	lsls	r3, r2, #30
 8007d1c:	680e      	ldr	r6, [r1, #0]
 8007d1e:	bf08      	it	eq
 8007d20:	694b      	ldreq	r3, [r1, #20]
 8007d22:	600f      	str	r7, [r1, #0]
 8007d24:	bf18      	it	ne
 8007d26:	2300      	movne	r3, #0
 8007d28:	eba6 0807 	sub.w	r8, r6, r7
 8007d2c:	608b      	str	r3, [r1, #8]
 8007d2e:	f1b8 0f00 	cmp.w	r8, #0
 8007d32:	dd9c      	ble.n	8007c6e <__sflush_r+0x1a>
 8007d34:	6a21      	ldr	r1, [r4, #32]
 8007d36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d38:	4643      	mov	r3, r8
 8007d3a:	463a      	mov	r2, r7
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	47b0      	blx	r6
 8007d40:	2800      	cmp	r0, #0
 8007d42:	dc06      	bgt.n	8007d52 <__sflush_r+0xfe>
 8007d44:	89a3      	ldrh	r3, [r4, #12]
 8007d46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d4a:	81a3      	strh	r3, [r4, #12]
 8007d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d50:	e78e      	b.n	8007c70 <__sflush_r+0x1c>
 8007d52:	4407      	add	r7, r0
 8007d54:	eba8 0800 	sub.w	r8, r8, r0
 8007d58:	e7e9      	b.n	8007d2e <__sflush_r+0xda>
 8007d5a:	bf00      	nop
 8007d5c:	20400001 	.word	0x20400001

08007d60 <_fflush_r>:
 8007d60:	b538      	push	{r3, r4, r5, lr}
 8007d62:	690b      	ldr	r3, [r1, #16]
 8007d64:	4605      	mov	r5, r0
 8007d66:	460c      	mov	r4, r1
 8007d68:	b913      	cbnz	r3, 8007d70 <_fflush_r+0x10>
 8007d6a:	2500      	movs	r5, #0
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	bd38      	pop	{r3, r4, r5, pc}
 8007d70:	b118      	cbz	r0, 8007d7a <_fflush_r+0x1a>
 8007d72:	6983      	ldr	r3, [r0, #24]
 8007d74:	b90b      	cbnz	r3, 8007d7a <_fflush_r+0x1a>
 8007d76:	f000 f887 	bl	8007e88 <__sinit>
 8007d7a:	4b14      	ldr	r3, [pc, #80]	; (8007dcc <_fflush_r+0x6c>)
 8007d7c:	429c      	cmp	r4, r3
 8007d7e:	d11b      	bne.n	8007db8 <_fflush_r+0x58>
 8007d80:	686c      	ldr	r4, [r5, #4]
 8007d82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d0ef      	beq.n	8007d6a <_fflush_r+0xa>
 8007d8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d8c:	07d0      	lsls	r0, r2, #31
 8007d8e:	d404      	bmi.n	8007d9a <_fflush_r+0x3a>
 8007d90:	0599      	lsls	r1, r3, #22
 8007d92:	d402      	bmi.n	8007d9a <_fflush_r+0x3a>
 8007d94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d96:	f000 f915 	bl	8007fc4 <__retarget_lock_acquire_recursive>
 8007d9a:	4628      	mov	r0, r5
 8007d9c:	4621      	mov	r1, r4
 8007d9e:	f7ff ff59 	bl	8007c54 <__sflush_r>
 8007da2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007da4:	07da      	lsls	r2, r3, #31
 8007da6:	4605      	mov	r5, r0
 8007da8:	d4e0      	bmi.n	8007d6c <_fflush_r+0xc>
 8007daa:	89a3      	ldrh	r3, [r4, #12]
 8007dac:	059b      	lsls	r3, r3, #22
 8007dae:	d4dd      	bmi.n	8007d6c <_fflush_r+0xc>
 8007db0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007db2:	f000 f908 	bl	8007fc6 <__retarget_lock_release_recursive>
 8007db6:	e7d9      	b.n	8007d6c <_fflush_r+0xc>
 8007db8:	4b05      	ldr	r3, [pc, #20]	; (8007dd0 <_fflush_r+0x70>)
 8007dba:	429c      	cmp	r4, r3
 8007dbc:	d101      	bne.n	8007dc2 <_fflush_r+0x62>
 8007dbe:	68ac      	ldr	r4, [r5, #8]
 8007dc0:	e7df      	b.n	8007d82 <_fflush_r+0x22>
 8007dc2:	4b04      	ldr	r3, [pc, #16]	; (8007dd4 <_fflush_r+0x74>)
 8007dc4:	429c      	cmp	r4, r3
 8007dc6:	bf08      	it	eq
 8007dc8:	68ec      	ldreq	r4, [r5, #12]
 8007dca:	e7da      	b.n	8007d82 <_fflush_r+0x22>
 8007dcc:	08008b44 	.word	0x08008b44
 8007dd0:	08008b64 	.word	0x08008b64
 8007dd4:	08008b24 	.word	0x08008b24

08007dd8 <std>:
 8007dd8:	2300      	movs	r3, #0
 8007dda:	b510      	push	{r4, lr}
 8007ddc:	4604      	mov	r4, r0
 8007dde:	e9c0 3300 	strd	r3, r3, [r0]
 8007de2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007de6:	6083      	str	r3, [r0, #8]
 8007de8:	8181      	strh	r1, [r0, #12]
 8007dea:	6643      	str	r3, [r0, #100]	; 0x64
 8007dec:	81c2      	strh	r2, [r0, #14]
 8007dee:	6183      	str	r3, [r0, #24]
 8007df0:	4619      	mov	r1, r3
 8007df2:	2208      	movs	r2, #8
 8007df4:	305c      	adds	r0, #92	; 0x5c
 8007df6:	f7ff fdd7 	bl	80079a8 <memset>
 8007dfa:	4b05      	ldr	r3, [pc, #20]	; (8007e10 <std+0x38>)
 8007dfc:	6263      	str	r3, [r4, #36]	; 0x24
 8007dfe:	4b05      	ldr	r3, [pc, #20]	; (8007e14 <std+0x3c>)
 8007e00:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e02:	4b05      	ldr	r3, [pc, #20]	; (8007e18 <std+0x40>)
 8007e04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e06:	4b05      	ldr	r3, [pc, #20]	; (8007e1c <std+0x44>)
 8007e08:	6224      	str	r4, [r4, #32]
 8007e0a:	6323      	str	r3, [r4, #48]	; 0x30
 8007e0c:	bd10      	pop	{r4, pc}
 8007e0e:	bf00      	nop
 8007e10:	08008851 	.word	0x08008851
 8007e14:	08008873 	.word	0x08008873
 8007e18:	080088ab 	.word	0x080088ab
 8007e1c:	080088cf 	.word	0x080088cf

08007e20 <_cleanup_r>:
 8007e20:	4901      	ldr	r1, [pc, #4]	; (8007e28 <_cleanup_r+0x8>)
 8007e22:	f000 b8af 	b.w	8007f84 <_fwalk_reent>
 8007e26:	bf00      	nop
 8007e28:	08007d61 	.word	0x08007d61

08007e2c <__sfmoreglue>:
 8007e2c:	b570      	push	{r4, r5, r6, lr}
 8007e2e:	2268      	movs	r2, #104	; 0x68
 8007e30:	1e4d      	subs	r5, r1, #1
 8007e32:	4355      	muls	r5, r2
 8007e34:	460e      	mov	r6, r1
 8007e36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e3a:	f000 f997 	bl	800816c <_malloc_r>
 8007e3e:	4604      	mov	r4, r0
 8007e40:	b140      	cbz	r0, 8007e54 <__sfmoreglue+0x28>
 8007e42:	2100      	movs	r1, #0
 8007e44:	e9c0 1600 	strd	r1, r6, [r0]
 8007e48:	300c      	adds	r0, #12
 8007e4a:	60a0      	str	r0, [r4, #8]
 8007e4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e50:	f7ff fdaa 	bl	80079a8 <memset>
 8007e54:	4620      	mov	r0, r4
 8007e56:	bd70      	pop	{r4, r5, r6, pc}

08007e58 <__sfp_lock_acquire>:
 8007e58:	4801      	ldr	r0, [pc, #4]	; (8007e60 <__sfp_lock_acquire+0x8>)
 8007e5a:	f000 b8b3 	b.w	8007fc4 <__retarget_lock_acquire_recursive>
 8007e5e:	bf00      	nop
 8007e60:	200002dd 	.word	0x200002dd

08007e64 <__sfp_lock_release>:
 8007e64:	4801      	ldr	r0, [pc, #4]	; (8007e6c <__sfp_lock_release+0x8>)
 8007e66:	f000 b8ae 	b.w	8007fc6 <__retarget_lock_release_recursive>
 8007e6a:	bf00      	nop
 8007e6c:	200002dd 	.word	0x200002dd

08007e70 <__sinit_lock_acquire>:
 8007e70:	4801      	ldr	r0, [pc, #4]	; (8007e78 <__sinit_lock_acquire+0x8>)
 8007e72:	f000 b8a7 	b.w	8007fc4 <__retarget_lock_acquire_recursive>
 8007e76:	bf00      	nop
 8007e78:	200002de 	.word	0x200002de

08007e7c <__sinit_lock_release>:
 8007e7c:	4801      	ldr	r0, [pc, #4]	; (8007e84 <__sinit_lock_release+0x8>)
 8007e7e:	f000 b8a2 	b.w	8007fc6 <__retarget_lock_release_recursive>
 8007e82:	bf00      	nop
 8007e84:	200002de 	.word	0x200002de

08007e88 <__sinit>:
 8007e88:	b510      	push	{r4, lr}
 8007e8a:	4604      	mov	r4, r0
 8007e8c:	f7ff fff0 	bl	8007e70 <__sinit_lock_acquire>
 8007e90:	69a3      	ldr	r3, [r4, #24]
 8007e92:	b11b      	cbz	r3, 8007e9c <__sinit+0x14>
 8007e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e98:	f7ff bff0 	b.w	8007e7c <__sinit_lock_release>
 8007e9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ea0:	6523      	str	r3, [r4, #80]	; 0x50
 8007ea2:	4b13      	ldr	r3, [pc, #76]	; (8007ef0 <__sinit+0x68>)
 8007ea4:	4a13      	ldr	r2, [pc, #76]	; (8007ef4 <__sinit+0x6c>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	62a2      	str	r2, [r4, #40]	; 0x28
 8007eaa:	42a3      	cmp	r3, r4
 8007eac:	bf04      	itt	eq
 8007eae:	2301      	moveq	r3, #1
 8007eb0:	61a3      	streq	r3, [r4, #24]
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	f000 f820 	bl	8007ef8 <__sfp>
 8007eb8:	6060      	str	r0, [r4, #4]
 8007eba:	4620      	mov	r0, r4
 8007ebc:	f000 f81c 	bl	8007ef8 <__sfp>
 8007ec0:	60a0      	str	r0, [r4, #8]
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	f000 f818 	bl	8007ef8 <__sfp>
 8007ec8:	2200      	movs	r2, #0
 8007eca:	60e0      	str	r0, [r4, #12]
 8007ecc:	2104      	movs	r1, #4
 8007ece:	6860      	ldr	r0, [r4, #4]
 8007ed0:	f7ff ff82 	bl	8007dd8 <std>
 8007ed4:	68a0      	ldr	r0, [r4, #8]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	2109      	movs	r1, #9
 8007eda:	f7ff ff7d 	bl	8007dd8 <std>
 8007ede:	68e0      	ldr	r0, [r4, #12]
 8007ee0:	2202      	movs	r2, #2
 8007ee2:	2112      	movs	r1, #18
 8007ee4:	f7ff ff78 	bl	8007dd8 <std>
 8007ee8:	2301      	movs	r3, #1
 8007eea:	61a3      	str	r3, [r4, #24]
 8007eec:	e7d2      	b.n	8007e94 <__sinit+0xc>
 8007eee:	bf00      	nop
 8007ef0:	08008b20 	.word	0x08008b20
 8007ef4:	08007e21 	.word	0x08007e21

08007ef8 <__sfp>:
 8007ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007efa:	4607      	mov	r7, r0
 8007efc:	f7ff ffac 	bl	8007e58 <__sfp_lock_acquire>
 8007f00:	4b1e      	ldr	r3, [pc, #120]	; (8007f7c <__sfp+0x84>)
 8007f02:	681e      	ldr	r6, [r3, #0]
 8007f04:	69b3      	ldr	r3, [r6, #24]
 8007f06:	b913      	cbnz	r3, 8007f0e <__sfp+0x16>
 8007f08:	4630      	mov	r0, r6
 8007f0a:	f7ff ffbd 	bl	8007e88 <__sinit>
 8007f0e:	3648      	adds	r6, #72	; 0x48
 8007f10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f14:	3b01      	subs	r3, #1
 8007f16:	d503      	bpl.n	8007f20 <__sfp+0x28>
 8007f18:	6833      	ldr	r3, [r6, #0]
 8007f1a:	b30b      	cbz	r3, 8007f60 <__sfp+0x68>
 8007f1c:	6836      	ldr	r6, [r6, #0]
 8007f1e:	e7f7      	b.n	8007f10 <__sfp+0x18>
 8007f20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f24:	b9d5      	cbnz	r5, 8007f5c <__sfp+0x64>
 8007f26:	4b16      	ldr	r3, [pc, #88]	; (8007f80 <__sfp+0x88>)
 8007f28:	60e3      	str	r3, [r4, #12]
 8007f2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f2e:	6665      	str	r5, [r4, #100]	; 0x64
 8007f30:	f000 f847 	bl	8007fc2 <__retarget_lock_init_recursive>
 8007f34:	f7ff ff96 	bl	8007e64 <__sfp_lock_release>
 8007f38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f40:	6025      	str	r5, [r4, #0]
 8007f42:	61a5      	str	r5, [r4, #24]
 8007f44:	2208      	movs	r2, #8
 8007f46:	4629      	mov	r1, r5
 8007f48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f4c:	f7ff fd2c 	bl	80079a8 <memset>
 8007f50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f58:	4620      	mov	r0, r4
 8007f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f5c:	3468      	adds	r4, #104	; 0x68
 8007f5e:	e7d9      	b.n	8007f14 <__sfp+0x1c>
 8007f60:	2104      	movs	r1, #4
 8007f62:	4638      	mov	r0, r7
 8007f64:	f7ff ff62 	bl	8007e2c <__sfmoreglue>
 8007f68:	4604      	mov	r4, r0
 8007f6a:	6030      	str	r0, [r6, #0]
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	d1d5      	bne.n	8007f1c <__sfp+0x24>
 8007f70:	f7ff ff78 	bl	8007e64 <__sfp_lock_release>
 8007f74:	230c      	movs	r3, #12
 8007f76:	603b      	str	r3, [r7, #0]
 8007f78:	e7ee      	b.n	8007f58 <__sfp+0x60>
 8007f7a:	bf00      	nop
 8007f7c:	08008b20 	.word	0x08008b20
 8007f80:	ffff0001 	.word	0xffff0001

08007f84 <_fwalk_reent>:
 8007f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f88:	4606      	mov	r6, r0
 8007f8a:	4688      	mov	r8, r1
 8007f8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f90:	2700      	movs	r7, #0
 8007f92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f96:	f1b9 0901 	subs.w	r9, r9, #1
 8007f9a:	d505      	bpl.n	8007fa8 <_fwalk_reent+0x24>
 8007f9c:	6824      	ldr	r4, [r4, #0]
 8007f9e:	2c00      	cmp	r4, #0
 8007fa0:	d1f7      	bne.n	8007f92 <_fwalk_reent+0xe>
 8007fa2:	4638      	mov	r0, r7
 8007fa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fa8:	89ab      	ldrh	r3, [r5, #12]
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d907      	bls.n	8007fbe <_fwalk_reent+0x3a>
 8007fae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	d003      	beq.n	8007fbe <_fwalk_reent+0x3a>
 8007fb6:	4629      	mov	r1, r5
 8007fb8:	4630      	mov	r0, r6
 8007fba:	47c0      	blx	r8
 8007fbc:	4307      	orrs	r7, r0
 8007fbe:	3568      	adds	r5, #104	; 0x68
 8007fc0:	e7e9      	b.n	8007f96 <_fwalk_reent+0x12>

08007fc2 <__retarget_lock_init_recursive>:
 8007fc2:	4770      	bx	lr

08007fc4 <__retarget_lock_acquire_recursive>:
 8007fc4:	4770      	bx	lr

08007fc6 <__retarget_lock_release_recursive>:
 8007fc6:	4770      	bx	lr

08007fc8 <__swhatbuf_r>:
 8007fc8:	b570      	push	{r4, r5, r6, lr}
 8007fca:	460e      	mov	r6, r1
 8007fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fd0:	2900      	cmp	r1, #0
 8007fd2:	b096      	sub	sp, #88	; 0x58
 8007fd4:	4614      	mov	r4, r2
 8007fd6:	461d      	mov	r5, r3
 8007fd8:	da08      	bge.n	8007fec <__swhatbuf_r+0x24>
 8007fda:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	602a      	str	r2, [r5, #0]
 8007fe2:	061a      	lsls	r2, r3, #24
 8007fe4:	d410      	bmi.n	8008008 <__swhatbuf_r+0x40>
 8007fe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fea:	e00e      	b.n	800800a <__swhatbuf_r+0x42>
 8007fec:	466a      	mov	r2, sp
 8007fee:	f000 fc95 	bl	800891c <_fstat_r>
 8007ff2:	2800      	cmp	r0, #0
 8007ff4:	dbf1      	blt.n	8007fda <__swhatbuf_r+0x12>
 8007ff6:	9a01      	ldr	r2, [sp, #4]
 8007ff8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007ffc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008000:	425a      	negs	r2, r3
 8008002:	415a      	adcs	r2, r3
 8008004:	602a      	str	r2, [r5, #0]
 8008006:	e7ee      	b.n	8007fe6 <__swhatbuf_r+0x1e>
 8008008:	2340      	movs	r3, #64	; 0x40
 800800a:	2000      	movs	r0, #0
 800800c:	6023      	str	r3, [r4, #0]
 800800e:	b016      	add	sp, #88	; 0x58
 8008010:	bd70      	pop	{r4, r5, r6, pc}
	...

08008014 <__smakebuf_r>:
 8008014:	898b      	ldrh	r3, [r1, #12]
 8008016:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008018:	079d      	lsls	r5, r3, #30
 800801a:	4606      	mov	r6, r0
 800801c:	460c      	mov	r4, r1
 800801e:	d507      	bpl.n	8008030 <__smakebuf_r+0x1c>
 8008020:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008024:	6023      	str	r3, [r4, #0]
 8008026:	6123      	str	r3, [r4, #16]
 8008028:	2301      	movs	r3, #1
 800802a:	6163      	str	r3, [r4, #20]
 800802c:	b002      	add	sp, #8
 800802e:	bd70      	pop	{r4, r5, r6, pc}
 8008030:	ab01      	add	r3, sp, #4
 8008032:	466a      	mov	r2, sp
 8008034:	f7ff ffc8 	bl	8007fc8 <__swhatbuf_r>
 8008038:	9900      	ldr	r1, [sp, #0]
 800803a:	4605      	mov	r5, r0
 800803c:	4630      	mov	r0, r6
 800803e:	f000 f895 	bl	800816c <_malloc_r>
 8008042:	b948      	cbnz	r0, 8008058 <__smakebuf_r+0x44>
 8008044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008048:	059a      	lsls	r2, r3, #22
 800804a:	d4ef      	bmi.n	800802c <__smakebuf_r+0x18>
 800804c:	f023 0303 	bic.w	r3, r3, #3
 8008050:	f043 0302 	orr.w	r3, r3, #2
 8008054:	81a3      	strh	r3, [r4, #12]
 8008056:	e7e3      	b.n	8008020 <__smakebuf_r+0xc>
 8008058:	4b0d      	ldr	r3, [pc, #52]	; (8008090 <__smakebuf_r+0x7c>)
 800805a:	62b3      	str	r3, [r6, #40]	; 0x28
 800805c:	89a3      	ldrh	r3, [r4, #12]
 800805e:	6020      	str	r0, [r4, #0]
 8008060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008064:	81a3      	strh	r3, [r4, #12]
 8008066:	9b00      	ldr	r3, [sp, #0]
 8008068:	6163      	str	r3, [r4, #20]
 800806a:	9b01      	ldr	r3, [sp, #4]
 800806c:	6120      	str	r0, [r4, #16]
 800806e:	b15b      	cbz	r3, 8008088 <__smakebuf_r+0x74>
 8008070:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008074:	4630      	mov	r0, r6
 8008076:	f000 fc63 	bl	8008940 <_isatty_r>
 800807a:	b128      	cbz	r0, 8008088 <__smakebuf_r+0x74>
 800807c:	89a3      	ldrh	r3, [r4, #12]
 800807e:	f023 0303 	bic.w	r3, r3, #3
 8008082:	f043 0301 	orr.w	r3, r3, #1
 8008086:	81a3      	strh	r3, [r4, #12]
 8008088:	89a0      	ldrh	r0, [r4, #12]
 800808a:	4305      	orrs	r5, r0
 800808c:	81a5      	strh	r5, [r4, #12]
 800808e:	e7cd      	b.n	800802c <__smakebuf_r+0x18>
 8008090:	08007e21 	.word	0x08007e21

08008094 <_free_r>:
 8008094:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008096:	2900      	cmp	r1, #0
 8008098:	d044      	beq.n	8008124 <_free_r+0x90>
 800809a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800809e:	9001      	str	r0, [sp, #4]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f1a1 0404 	sub.w	r4, r1, #4
 80080a6:	bfb8      	it	lt
 80080a8:	18e4      	addlt	r4, r4, r3
 80080aa:	f000 fc6b 	bl	8008984 <__malloc_lock>
 80080ae:	4a1e      	ldr	r2, [pc, #120]	; (8008128 <_free_r+0x94>)
 80080b0:	9801      	ldr	r0, [sp, #4]
 80080b2:	6813      	ldr	r3, [r2, #0]
 80080b4:	b933      	cbnz	r3, 80080c4 <_free_r+0x30>
 80080b6:	6063      	str	r3, [r4, #4]
 80080b8:	6014      	str	r4, [r2, #0]
 80080ba:	b003      	add	sp, #12
 80080bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080c0:	f000 bc66 	b.w	8008990 <__malloc_unlock>
 80080c4:	42a3      	cmp	r3, r4
 80080c6:	d908      	bls.n	80080da <_free_r+0x46>
 80080c8:	6825      	ldr	r5, [r4, #0]
 80080ca:	1961      	adds	r1, r4, r5
 80080cc:	428b      	cmp	r3, r1
 80080ce:	bf01      	itttt	eq
 80080d0:	6819      	ldreq	r1, [r3, #0]
 80080d2:	685b      	ldreq	r3, [r3, #4]
 80080d4:	1949      	addeq	r1, r1, r5
 80080d6:	6021      	streq	r1, [r4, #0]
 80080d8:	e7ed      	b.n	80080b6 <_free_r+0x22>
 80080da:	461a      	mov	r2, r3
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	b10b      	cbz	r3, 80080e4 <_free_r+0x50>
 80080e0:	42a3      	cmp	r3, r4
 80080e2:	d9fa      	bls.n	80080da <_free_r+0x46>
 80080e4:	6811      	ldr	r1, [r2, #0]
 80080e6:	1855      	adds	r5, r2, r1
 80080e8:	42a5      	cmp	r5, r4
 80080ea:	d10b      	bne.n	8008104 <_free_r+0x70>
 80080ec:	6824      	ldr	r4, [r4, #0]
 80080ee:	4421      	add	r1, r4
 80080f0:	1854      	adds	r4, r2, r1
 80080f2:	42a3      	cmp	r3, r4
 80080f4:	6011      	str	r1, [r2, #0]
 80080f6:	d1e0      	bne.n	80080ba <_free_r+0x26>
 80080f8:	681c      	ldr	r4, [r3, #0]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	6053      	str	r3, [r2, #4]
 80080fe:	4421      	add	r1, r4
 8008100:	6011      	str	r1, [r2, #0]
 8008102:	e7da      	b.n	80080ba <_free_r+0x26>
 8008104:	d902      	bls.n	800810c <_free_r+0x78>
 8008106:	230c      	movs	r3, #12
 8008108:	6003      	str	r3, [r0, #0]
 800810a:	e7d6      	b.n	80080ba <_free_r+0x26>
 800810c:	6825      	ldr	r5, [r4, #0]
 800810e:	1961      	adds	r1, r4, r5
 8008110:	428b      	cmp	r3, r1
 8008112:	bf04      	itt	eq
 8008114:	6819      	ldreq	r1, [r3, #0]
 8008116:	685b      	ldreq	r3, [r3, #4]
 8008118:	6063      	str	r3, [r4, #4]
 800811a:	bf04      	itt	eq
 800811c:	1949      	addeq	r1, r1, r5
 800811e:	6021      	streq	r1, [r4, #0]
 8008120:	6054      	str	r4, [r2, #4]
 8008122:	e7ca      	b.n	80080ba <_free_r+0x26>
 8008124:	b003      	add	sp, #12
 8008126:	bd30      	pop	{r4, r5, pc}
 8008128:	200002e0 	.word	0x200002e0

0800812c <sbrk_aligned>:
 800812c:	b570      	push	{r4, r5, r6, lr}
 800812e:	4e0e      	ldr	r6, [pc, #56]	; (8008168 <sbrk_aligned+0x3c>)
 8008130:	460c      	mov	r4, r1
 8008132:	6831      	ldr	r1, [r6, #0]
 8008134:	4605      	mov	r5, r0
 8008136:	b911      	cbnz	r1, 800813e <sbrk_aligned+0x12>
 8008138:	f000 fb7a 	bl	8008830 <_sbrk_r>
 800813c:	6030      	str	r0, [r6, #0]
 800813e:	4621      	mov	r1, r4
 8008140:	4628      	mov	r0, r5
 8008142:	f000 fb75 	bl	8008830 <_sbrk_r>
 8008146:	1c43      	adds	r3, r0, #1
 8008148:	d00a      	beq.n	8008160 <sbrk_aligned+0x34>
 800814a:	1cc4      	adds	r4, r0, #3
 800814c:	f024 0403 	bic.w	r4, r4, #3
 8008150:	42a0      	cmp	r0, r4
 8008152:	d007      	beq.n	8008164 <sbrk_aligned+0x38>
 8008154:	1a21      	subs	r1, r4, r0
 8008156:	4628      	mov	r0, r5
 8008158:	f000 fb6a 	bl	8008830 <_sbrk_r>
 800815c:	3001      	adds	r0, #1
 800815e:	d101      	bne.n	8008164 <sbrk_aligned+0x38>
 8008160:	f04f 34ff 	mov.w	r4, #4294967295
 8008164:	4620      	mov	r0, r4
 8008166:	bd70      	pop	{r4, r5, r6, pc}
 8008168:	200002e4 	.word	0x200002e4

0800816c <_malloc_r>:
 800816c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008170:	1ccd      	adds	r5, r1, #3
 8008172:	f025 0503 	bic.w	r5, r5, #3
 8008176:	3508      	adds	r5, #8
 8008178:	2d0c      	cmp	r5, #12
 800817a:	bf38      	it	cc
 800817c:	250c      	movcc	r5, #12
 800817e:	2d00      	cmp	r5, #0
 8008180:	4607      	mov	r7, r0
 8008182:	db01      	blt.n	8008188 <_malloc_r+0x1c>
 8008184:	42a9      	cmp	r1, r5
 8008186:	d905      	bls.n	8008194 <_malloc_r+0x28>
 8008188:	230c      	movs	r3, #12
 800818a:	603b      	str	r3, [r7, #0]
 800818c:	2600      	movs	r6, #0
 800818e:	4630      	mov	r0, r6
 8008190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008194:	4e2e      	ldr	r6, [pc, #184]	; (8008250 <_malloc_r+0xe4>)
 8008196:	f000 fbf5 	bl	8008984 <__malloc_lock>
 800819a:	6833      	ldr	r3, [r6, #0]
 800819c:	461c      	mov	r4, r3
 800819e:	bb34      	cbnz	r4, 80081ee <_malloc_r+0x82>
 80081a0:	4629      	mov	r1, r5
 80081a2:	4638      	mov	r0, r7
 80081a4:	f7ff ffc2 	bl	800812c <sbrk_aligned>
 80081a8:	1c43      	adds	r3, r0, #1
 80081aa:	4604      	mov	r4, r0
 80081ac:	d14d      	bne.n	800824a <_malloc_r+0xde>
 80081ae:	6834      	ldr	r4, [r6, #0]
 80081b0:	4626      	mov	r6, r4
 80081b2:	2e00      	cmp	r6, #0
 80081b4:	d140      	bne.n	8008238 <_malloc_r+0xcc>
 80081b6:	6823      	ldr	r3, [r4, #0]
 80081b8:	4631      	mov	r1, r6
 80081ba:	4638      	mov	r0, r7
 80081bc:	eb04 0803 	add.w	r8, r4, r3
 80081c0:	f000 fb36 	bl	8008830 <_sbrk_r>
 80081c4:	4580      	cmp	r8, r0
 80081c6:	d13a      	bne.n	800823e <_malloc_r+0xd2>
 80081c8:	6821      	ldr	r1, [r4, #0]
 80081ca:	3503      	adds	r5, #3
 80081cc:	1a6d      	subs	r5, r5, r1
 80081ce:	f025 0503 	bic.w	r5, r5, #3
 80081d2:	3508      	adds	r5, #8
 80081d4:	2d0c      	cmp	r5, #12
 80081d6:	bf38      	it	cc
 80081d8:	250c      	movcc	r5, #12
 80081da:	4629      	mov	r1, r5
 80081dc:	4638      	mov	r0, r7
 80081de:	f7ff ffa5 	bl	800812c <sbrk_aligned>
 80081e2:	3001      	adds	r0, #1
 80081e4:	d02b      	beq.n	800823e <_malloc_r+0xd2>
 80081e6:	6823      	ldr	r3, [r4, #0]
 80081e8:	442b      	add	r3, r5
 80081ea:	6023      	str	r3, [r4, #0]
 80081ec:	e00e      	b.n	800820c <_malloc_r+0xa0>
 80081ee:	6822      	ldr	r2, [r4, #0]
 80081f0:	1b52      	subs	r2, r2, r5
 80081f2:	d41e      	bmi.n	8008232 <_malloc_r+0xc6>
 80081f4:	2a0b      	cmp	r2, #11
 80081f6:	d916      	bls.n	8008226 <_malloc_r+0xba>
 80081f8:	1961      	adds	r1, r4, r5
 80081fa:	42a3      	cmp	r3, r4
 80081fc:	6025      	str	r5, [r4, #0]
 80081fe:	bf18      	it	ne
 8008200:	6059      	strne	r1, [r3, #4]
 8008202:	6863      	ldr	r3, [r4, #4]
 8008204:	bf08      	it	eq
 8008206:	6031      	streq	r1, [r6, #0]
 8008208:	5162      	str	r2, [r4, r5]
 800820a:	604b      	str	r3, [r1, #4]
 800820c:	4638      	mov	r0, r7
 800820e:	f104 060b 	add.w	r6, r4, #11
 8008212:	f000 fbbd 	bl	8008990 <__malloc_unlock>
 8008216:	f026 0607 	bic.w	r6, r6, #7
 800821a:	1d23      	adds	r3, r4, #4
 800821c:	1af2      	subs	r2, r6, r3
 800821e:	d0b6      	beq.n	800818e <_malloc_r+0x22>
 8008220:	1b9b      	subs	r3, r3, r6
 8008222:	50a3      	str	r3, [r4, r2]
 8008224:	e7b3      	b.n	800818e <_malloc_r+0x22>
 8008226:	6862      	ldr	r2, [r4, #4]
 8008228:	42a3      	cmp	r3, r4
 800822a:	bf0c      	ite	eq
 800822c:	6032      	streq	r2, [r6, #0]
 800822e:	605a      	strne	r2, [r3, #4]
 8008230:	e7ec      	b.n	800820c <_malloc_r+0xa0>
 8008232:	4623      	mov	r3, r4
 8008234:	6864      	ldr	r4, [r4, #4]
 8008236:	e7b2      	b.n	800819e <_malloc_r+0x32>
 8008238:	4634      	mov	r4, r6
 800823a:	6876      	ldr	r6, [r6, #4]
 800823c:	e7b9      	b.n	80081b2 <_malloc_r+0x46>
 800823e:	230c      	movs	r3, #12
 8008240:	603b      	str	r3, [r7, #0]
 8008242:	4638      	mov	r0, r7
 8008244:	f000 fba4 	bl	8008990 <__malloc_unlock>
 8008248:	e7a1      	b.n	800818e <_malloc_r+0x22>
 800824a:	6025      	str	r5, [r4, #0]
 800824c:	e7de      	b.n	800820c <_malloc_r+0xa0>
 800824e:	bf00      	nop
 8008250:	200002e0 	.word	0x200002e0

08008254 <__sfputc_r>:
 8008254:	6893      	ldr	r3, [r2, #8]
 8008256:	3b01      	subs	r3, #1
 8008258:	2b00      	cmp	r3, #0
 800825a:	b410      	push	{r4}
 800825c:	6093      	str	r3, [r2, #8]
 800825e:	da08      	bge.n	8008272 <__sfputc_r+0x1e>
 8008260:	6994      	ldr	r4, [r2, #24]
 8008262:	42a3      	cmp	r3, r4
 8008264:	db01      	blt.n	800826a <__sfputc_r+0x16>
 8008266:	290a      	cmp	r1, #10
 8008268:	d103      	bne.n	8008272 <__sfputc_r+0x1e>
 800826a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800826e:	f7ff bc31 	b.w	8007ad4 <__swbuf_r>
 8008272:	6813      	ldr	r3, [r2, #0]
 8008274:	1c58      	adds	r0, r3, #1
 8008276:	6010      	str	r0, [r2, #0]
 8008278:	7019      	strb	r1, [r3, #0]
 800827a:	4608      	mov	r0, r1
 800827c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008280:	4770      	bx	lr

08008282 <__sfputs_r>:
 8008282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008284:	4606      	mov	r6, r0
 8008286:	460f      	mov	r7, r1
 8008288:	4614      	mov	r4, r2
 800828a:	18d5      	adds	r5, r2, r3
 800828c:	42ac      	cmp	r4, r5
 800828e:	d101      	bne.n	8008294 <__sfputs_r+0x12>
 8008290:	2000      	movs	r0, #0
 8008292:	e007      	b.n	80082a4 <__sfputs_r+0x22>
 8008294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008298:	463a      	mov	r2, r7
 800829a:	4630      	mov	r0, r6
 800829c:	f7ff ffda 	bl	8008254 <__sfputc_r>
 80082a0:	1c43      	adds	r3, r0, #1
 80082a2:	d1f3      	bne.n	800828c <__sfputs_r+0xa>
 80082a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082a8 <_vfiprintf_r>:
 80082a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ac:	460d      	mov	r5, r1
 80082ae:	b09d      	sub	sp, #116	; 0x74
 80082b0:	4614      	mov	r4, r2
 80082b2:	4698      	mov	r8, r3
 80082b4:	4606      	mov	r6, r0
 80082b6:	b118      	cbz	r0, 80082c0 <_vfiprintf_r+0x18>
 80082b8:	6983      	ldr	r3, [r0, #24]
 80082ba:	b90b      	cbnz	r3, 80082c0 <_vfiprintf_r+0x18>
 80082bc:	f7ff fde4 	bl	8007e88 <__sinit>
 80082c0:	4b89      	ldr	r3, [pc, #548]	; (80084e8 <_vfiprintf_r+0x240>)
 80082c2:	429d      	cmp	r5, r3
 80082c4:	d11b      	bne.n	80082fe <_vfiprintf_r+0x56>
 80082c6:	6875      	ldr	r5, [r6, #4]
 80082c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082ca:	07d9      	lsls	r1, r3, #31
 80082cc:	d405      	bmi.n	80082da <_vfiprintf_r+0x32>
 80082ce:	89ab      	ldrh	r3, [r5, #12]
 80082d0:	059a      	lsls	r2, r3, #22
 80082d2:	d402      	bmi.n	80082da <_vfiprintf_r+0x32>
 80082d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082d6:	f7ff fe75 	bl	8007fc4 <__retarget_lock_acquire_recursive>
 80082da:	89ab      	ldrh	r3, [r5, #12]
 80082dc:	071b      	lsls	r3, r3, #28
 80082de:	d501      	bpl.n	80082e4 <_vfiprintf_r+0x3c>
 80082e0:	692b      	ldr	r3, [r5, #16]
 80082e2:	b9eb      	cbnz	r3, 8008320 <_vfiprintf_r+0x78>
 80082e4:	4629      	mov	r1, r5
 80082e6:	4630      	mov	r0, r6
 80082e8:	f7ff fc46 	bl	8007b78 <__swsetup_r>
 80082ec:	b1c0      	cbz	r0, 8008320 <_vfiprintf_r+0x78>
 80082ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082f0:	07dc      	lsls	r4, r3, #31
 80082f2:	d50e      	bpl.n	8008312 <_vfiprintf_r+0x6a>
 80082f4:	f04f 30ff 	mov.w	r0, #4294967295
 80082f8:	b01d      	add	sp, #116	; 0x74
 80082fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082fe:	4b7b      	ldr	r3, [pc, #492]	; (80084ec <_vfiprintf_r+0x244>)
 8008300:	429d      	cmp	r5, r3
 8008302:	d101      	bne.n	8008308 <_vfiprintf_r+0x60>
 8008304:	68b5      	ldr	r5, [r6, #8]
 8008306:	e7df      	b.n	80082c8 <_vfiprintf_r+0x20>
 8008308:	4b79      	ldr	r3, [pc, #484]	; (80084f0 <_vfiprintf_r+0x248>)
 800830a:	429d      	cmp	r5, r3
 800830c:	bf08      	it	eq
 800830e:	68f5      	ldreq	r5, [r6, #12]
 8008310:	e7da      	b.n	80082c8 <_vfiprintf_r+0x20>
 8008312:	89ab      	ldrh	r3, [r5, #12]
 8008314:	0598      	lsls	r0, r3, #22
 8008316:	d4ed      	bmi.n	80082f4 <_vfiprintf_r+0x4c>
 8008318:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800831a:	f7ff fe54 	bl	8007fc6 <__retarget_lock_release_recursive>
 800831e:	e7e9      	b.n	80082f4 <_vfiprintf_r+0x4c>
 8008320:	2300      	movs	r3, #0
 8008322:	9309      	str	r3, [sp, #36]	; 0x24
 8008324:	2320      	movs	r3, #32
 8008326:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800832a:	f8cd 800c 	str.w	r8, [sp, #12]
 800832e:	2330      	movs	r3, #48	; 0x30
 8008330:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80084f4 <_vfiprintf_r+0x24c>
 8008334:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008338:	f04f 0901 	mov.w	r9, #1
 800833c:	4623      	mov	r3, r4
 800833e:	469a      	mov	sl, r3
 8008340:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008344:	b10a      	cbz	r2, 800834a <_vfiprintf_r+0xa2>
 8008346:	2a25      	cmp	r2, #37	; 0x25
 8008348:	d1f9      	bne.n	800833e <_vfiprintf_r+0x96>
 800834a:	ebba 0b04 	subs.w	fp, sl, r4
 800834e:	d00b      	beq.n	8008368 <_vfiprintf_r+0xc0>
 8008350:	465b      	mov	r3, fp
 8008352:	4622      	mov	r2, r4
 8008354:	4629      	mov	r1, r5
 8008356:	4630      	mov	r0, r6
 8008358:	f7ff ff93 	bl	8008282 <__sfputs_r>
 800835c:	3001      	adds	r0, #1
 800835e:	f000 80aa 	beq.w	80084b6 <_vfiprintf_r+0x20e>
 8008362:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008364:	445a      	add	r2, fp
 8008366:	9209      	str	r2, [sp, #36]	; 0x24
 8008368:	f89a 3000 	ldrb.w	r3, [sl]
 800836c:	2b00      	cmp	r3, #0
 800836e:	f000 80a2 	beq.w	80084b6 <_vfiprintf_r+0x20e>
 8008372:	2300      	movs	r3, #0
 8008374:	f04f 32ff 	mov.w	r2, #4294967295
 8008378:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800837c:	f10a 0a01 	add.w	sl, sl, #1
 8008380:	9304      	str	r3, [sp, #16]
 8008382:	9307      	str	r3, [sp, #28]
 8008384:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008388:	931a      	str	r3, [sp, #104]	; 0x68
 800838a:	4654      	mov	r4, sl
 800838c:	2205      	movs	r2, #5
 800838e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008392:	4858      	ldr	r0, [pc, #352]	; (80084f4 <_vfiprintf_r+0x24c>)
 8008394:	f7f7 ff3c 	bl	8000210 <memchr>
 8008398:	9a04      	ldr	r2, [sp, #16]
 800839a:	b9d8      	cbnz	r0, 80083d4 <_vfiprintf_r+0x12c>
 800839c:	06d1      	lsls	r1, r2, #27
 800839e:	bf44      	itt	mi
 80083a0:	2320      	movmi	r3, #32
 80083a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083a6:	0713      	lsls	r3, r2, #28
 80083a8:	bf44      	itt	mi
 80083aa:	232b      	movmi	r3, #43	; 0x2b
 80083ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083b0:	f89a 3000 	ldrb.w	r3, [sl]
 80083b4:	2b2a      	cmp	r3, #42	; 0x2a
 80083b6:	d015      	beq.n	80083e4 <_vfiprintf_r+0x13c>
 80083b8:	9a07      	ldr	r2, [sp, #28]
 80083ba:	4654      	mov	r4, sl
 80083bc:	2000      	movs	r0, #0
 80083be:	f04f 0c0a 	mov.w	ip, #10
 80083c2:	4621      	mov	r1, r4
 80083c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083c8:	3b30      	subs	r3, #48	; 0x30
 80083ca:	2b09      	cmp	r3, #9
 80083cc:	d94e      	bls.n	800846c <_vfiprintf_r+0x1c4>
 80083ce:	b1b0      	cbz	r0, 80083fe <_vfiprintf_r+0x156>
 80083d0:	9207      	str	r2, [sp, #28]
 80083d2:	e014      	b.n	80083fe <_vfiprintf_r+0x156>
 80083d4:	eba0 0308 	sub.w	r3, r0, r8
 80083d8:	fa09 f303 	lsl.w	r3, r9, r3
 80083dc:	4313      	orrs	r3, r2
 80083de:	9304      	str	r3, [sp, #16]
 80083e0:	46a2      	mov	sl, r4
 80083e2:	e7d2      	b.n	800838a <_vfiprintf_r+0xe2>
 80083e4:	9b03      	ldr	r3, [sp, #12]
 80083e6:	1d19      	adds	r1, r3, #4
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	9103      	str	r1, [sp, #12]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	bfbb      	ittet	lt
 80083f0:	425b      	neglt	r3, r3
 80083f2:	f042 0202 	orrlt.w	r2, r2, #2
 80083f6:	9307      	strge	r3, [sp, #28]
 80083f8:	9307      	strlt	r3, [sp, #28]
 80083fa:	bfb8      	it	lt
 80083fc:	9204      	strlt	r2, [sp, #16]
 80083fe:	7823      	ldrb	r3, [r4, #0]
 8008400:	2b2e      	cmp	r3, #46	; 0x2e
 8008402:	d10c      	bne.n	800841e <_vfiprintf_r+0x176>
 8008404:	7863      	ldrb	r3, [r4, #1]
 8008406:	2b2a      	cmp	r3, #42	; 0x2a
 8008408:	d135      	bne.n	8008476 <_vfiprintf_r+0x1ce>
 800840a:	9b03      	ldr	r3, [sp, #12]
 800840c:	1d1a      	adds	r2, r3, #4
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	9203      	str	r2, [sp, #12]
 8008412:	2b00      	cmp	r3, #0
 8008414:	bfb8      	it	lt
 8008416:	f04f 33ff 	movlt.w	r3, #4294967295
 800841a:	3402      	adds	r4, #2
 800841c:	9305      	str	r3, [sp, #20]
 800841e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008504 <_vfiprintf_r+0x25c>
 8008422:	7821      	ldrb	r1, [r4, #0]
 8008424:	2203      	movs	r2, #3
 8008426:	4650      	mov	r0, sl
 8008428:	f7f7 fef2 	bl	8000210 <memchr>
 800842c:	b140      	cbz	r0, 8008440 <_vfiprintf_r+0x198>
 800842e:	2340      	movs	r3, #64	; 0x40
 8008430:	eba0 000a 	sub.w	r0, r0, sl
 8008434:	fa03 f000 	lsl.w	r0, r3, r0
 8008438:	9b04      	ldr	r3, [sp, #16]
 800843a:	4303      	orrs	r3, r0
 800843c:	3401      	adds	r4, #1
 800843e:	9304      	str	r3, [sp, #16]
 8008440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008444:	482c      	ldr	r0, [pc, #176]	; (80084f8 <_vfiprintf_r+0x250>)
 8008446:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800844a:	2206      	movs	r2, #6
 800844c:	f7f7 fee0 	bl	8000210 <memchr>
 8008450:	2800      	cmp	r0, #0
 8008452:	d03f      	beq.n	80084d4 <_vfiprintf_r+0x22c>
 8008454:	4b29      	ldr	r3, [pc, #164]	; (80084fc <_vfiprintf_r+0x254>)
 8008456:	bb1b      	cbnz	r3, 80084a0 <_vfiprintf_r+0x1f8>
 8008458:	9b03      	ldr	r3, [sp, #12]
 800845a:	3307      	adds	r3, #7
 800845c:	f023 0307 	bic.w	r3, r3, #7
 8008460:	3308      	adds	r3, #8
 8008462:	9303      	str	r3, [sp, #12]
 8008464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008466:	443b      	add	r3, r7
 8008468:	9309      	str	r3, [sp, #36]	; 0x24
 800846a:	e767      	b.n	800833c <_vfiprintf_r+0x94>
 800846c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008470:	460c      	mov	r4, r1
 8008472:	2001      	movs	r0, #1
 8008474:	e7a5      	b.n	80083c2 <_vfiprintf_r+0x11a>
 8008476:	2300      	movs	r3, #0
 8008478:	3401      	adds	r4, #1
 800847a:	9305      	str	r3, [sp, #20]
 800847c:	4619      	mov	r1, r3
 800847e:	f04f 0c0a 	mov.w	ip, #10
 8008482:	4620      	mov	r0, r4
 8008484:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008488:	3a30      	subs	r2, #48	; 0x30
 800848a:	2a09      	cmp	r2, #9
 800848c:	d903      	bls.n	8008496 <_vfiprintf_r+0x1ee>
 800848e:	2b00      	cmp	r3, #0
 8008490:	d0c5      	beq.n	800841e <_vfiprintf_r+0x176>
 8008492:	9105      	str	r1, [sp, #20]
 8008494:	e7c3      	b.n	800841e <_vfiprintf_r+0x176>
 8008496:	fb0c 2101 	mla	r1, ip, r1, r2
 800849a:	4604      	mov	r4, r0
 800849c:	2301      	movs	r3, #1
 800849e:	e7f0      	b.n	8008482 <_vfiprintf_r+0x1da>
 80084a0:	ab03      	add	r3, sp, #12
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	462a      	mov	r2, r5
 80084a6:	4b16      	ldr	r3, [pc, #88]	; (8008500 <_vfiprintf_r+0x258>)
 80084a8:	a904      	add	r1, sp, #16
 80084aa:	4630      	mov	r0, r6
 80084ac:	f3af 8000 	nop.w
 80084b0:	4607      	mov	r7, r0
 80084b2:	1c78      	adds	r0, r7, #1
 80084b4:	d1d6      	bne.n	8008464 <_vfiprintf_r+0x1bc>
 80084b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084b8:	07d9      	lsls	r1, r3, #31
 80084ba:	d405      	bmi.n	80084c8 <_vfiprintf_r+0x220>
 80084bc:	89ab      	ldrh	r3, [r5, #12]
 80084be:	059a      	lsls	r2, r3, #22
 80084c0:	d402      	bmi.n	80084c8 <_vfiprintf_r+0x220>
 80084c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084c4:	f7ff fd7f 	bl	8007fc6 <__retarget_lock_release_recursive>
 80084c8:	89ab      	ldrh	r3, [r5, #12]
 80084ca:	065b      	lsls	r3, r3, #25
 80084cc:	f53f af12 	bmi.w	80082f4 <_vfiprintf_r+0x4c>
 80084d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084d2:	e711      	b.n	80082f8 <_vfiprintf_r+0x50>
 80084d4:	ab03      	add	r3, sp, #12
 80084d6:	9300      	str	r3, [sp, #0]
 80084d8:	462a      	mov	r2, r5
 80084da:	4b09      	ldr	r3, [pc, #36]	; (8008500 <_vfiprintf_r+0x258>)
 80084dc:	a904      	add	r1, sp, #16
 80084de:	4630      	mov	r0, r6
 80084e0:	f000 f880 	bl	80085e4 <_printf_i>
 80084e4:	e7e4      	b.n	80084b0 <_vfiprintf_r+0x208>
 80084e6:	bf00      	nop
 80084e8:	08008b44 	.word	0x08008b44
 80084ec:	08008b64 	.word	0x08008b64
 80084f0:	08008b24 	.word	0x08008b24
 80084f4:	08008b84 	.word	0x08008b84
 80084f8:	08008b8e 	.word	0x08008b8e
 80084fc:	00000000 	.word	0x00000000
 8008500:	08008283 	.word	0x08008283
 8008504:	08008b8a 	.word	0x08008b8a

08008508 <_printf_common>:
 8008508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800850c:	4616      	mov	r6, r2
 800850e:	4699      	mov	r9, r3
 8008510:	688a      	ldr	r2, [r1, #8]
 8008512:	690b      	ldr	r3, [r1, #16]
 8008514:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008518:	4293      	cmp	r3, r2
 800851a:	bfb8      	it	lt
 800851c:	4613      	movlt	r3, r2
 800851e:	6033      	str	r3, [r6, #0]
 8008520:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008524:	4607      	mov	r7, r0
 8008526:	460c      	mov	r4, r1
 8008528:	b10a      	cbz	r2, 800852e <_printf_common+0x26>
 800852a:	3301      	adds	r3, #1
 800852c:	6033      	str	r3, [r6, #0]
 800852e:	6823      	ldr	r3, [r4, #0]
 8008530:	0699      	lsls	r1, r3, #26
 8008532:	bf42      	ittt	mi
 8008534:	6833      	ldrmi	r3, [r6, #0]
 8008536:	3302      	addmi	r3, #2
 8008538:	6033      	strmi	r3, [r6, #0]
 800853a:	6825      	ldr	r5, [r4, #0]
 800853c:	f015 0506 	ands.w	r5, r5, #6
 8008540:	d106      	bne.n	8008550 <_printf_common+0x48>
 8008542:	f104 0a19 	add.w	sl, r4, #25
 8008546:	68e3      	ldr	r3, [r4, #12]
 8008548:	6832      	ldr	r2, [r6, #0]
 800854a:	1a9b      	subs	r3, r3, r2
 800854c:	42ab      	cmp	r3, r5
 800854e:	dc26      	bgt.n	800859e <_printf_common+0x96>
 8008550:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008554:	1e13      	subs	r3, r2, #0
 8008556:	6822      	ldr	r2, [r4, #0]
 8008558:	bf18      	it	ne
 800855a:	2301      	movne	r3, #1
 800855c:	0692      	lsls	r2, r2, #26
 800855e:	d42b      	bmi.n	80085b8 <_printf_common+0xb0>
 8008560:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008564:	4649      	mov	r1, r9
 8008566:	4638      	mov	r0, r7
 8008568:	47c0      	blx	r8
 800856a:	3001      	adds	r0, #1
 800856c:	d01e      	beq.n	80085ac <_printf_common+0xa4>
 800856e:	6823      	ldr	r3, [r4, #0]
 8008570:	68e5      	ldr	r5, [r4, #12]
 8008572:	6832      	ldr	r2, [r6, #0]
 8008574:	f003 0306 	and.w	r3, r3, #6
 8008578:	2b04      	cmp	r3, #4
 800857a:	bf08      	it	eq
 800857c:	1aad      	subeq	r5, r5, r2
 800857e:	68a3      	ldr	r3, [r4, #8]
 8008580:	6922      	ldr	r2, [r4, #16]
 8008582:	bf0c      	ite	eq
 8008584:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008588:	2500      	movne	r5, #0
 800858a:	4293      	cmp	r3, r2
 800858c:	bfc4      	itt	gt
 800858e:	1a9b      	subgt	r3, r3, r2
 8008590:	18ed      	addgt	r5, r5, r3
 8008592:	2600      	movs	r6, #0
 8008594:	341a      	adds	r4, #26
 8008596:	42b5      	cmp	r5, r6
 8008598:	d11a      	bne.n	80085d0 <_printf_common+0xc8>
 800859a:	2000      	movs	r0, #0
 800859c:	e008      	b.n	80085b0 <_printf_common+0xa8>
 800859e:	2301      	movs	r3, #1
 80085a0:	4652      	mov	r2, sl
 80085a2:	4649      	mov	r1, r9
 80085a4:	4638      	mov	r0, r7
 80085a6:	47c0      	blx	r8
 80085a8:	3001      	adds	r0, #1
 80085aa:	d103      	bne.n	80085b4 <_printf_common+0xac>
 80085ac:	f04f 30ff 	mov.w	r0, #4294967295
 80085b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085b4:	3501      	adds	r5, #1
 80085b6:	e7c6      	b.n	8008546 <_printf_common+0x3e>
 80085b8:	18e1      	adds	r1, r4, r3
 80085ba:	1c5a      	adds	r2, r3, #1
 80085bc:	2030      	movs	r0, #48	; 0x30
 80085be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085c2:	4422      	add	r2, r4
 80085c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085cc:	3302      	adds	r3, #2
 80085ce:	e7c7      	b.n	8008560 <_printf_common+0x58>
 80085d0:	2301      	movs	r3, #1
 80085d2:	4622      	mov	r2, r4
 80085d4:	4649      	mov	r1, r9
 80085d6:	4638      	mov	r0, r7
 80085d8:	47c0      	blx	r8
 80085da:	3001      	adds	r0, #1
 80085dc:	d0e6      	beq.n	80085ac <_printf_common+0xa4>
 80085de:	3601      	adds	r6, #1
 80085e0:	e7d9      	b.n	8008596 <_printf_common+0x8e>
	...

080085e4 <_printf_i>:
 80085e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085e8:	7e0f      	ldrb	r7, [r1, #24]
 80085ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80085ec:	2f78      	cmp	r7, #120	; 0x78
 80085ee:	4691      	mov	r9, r2
 80085f0:	4680      	mov	r8, r0
 80085f2:	460c      	mov	r4, r1
 80085f4:	469a      	mov	sl, r3
 80085f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80085fa:	d807      	bhi.n	800860c <_printf_i+0x28>
 80085fc:	2f62      	cmp	r7, #98	; 0x62
 80085fe:	d80a      	bhi.n	8008616 <_printf_i+0x32>
 8008600:	2f00      	cmp	r7, #0
 8008602:	f000 80d8 	beq.w	80087b6 <_printf_i+0x1d2>
 8008606:	2f58      	cmp	r7, #88	; 0x58
 8008608:	f000 80a3 	beq.w	8008752 <_printf_i+0x16e>
 800860c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008610:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008614:	e03a      	b.n	800868c <_printf_i+0xa8>
 8008616:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800861a:	2b15      	cmp	r3, #21
 800861c:	d8f6      	bhi.n	800860c <_printf_i+0x28>
 800861e:	a101      	add	r1, pc, #4	; (adr r1, 8008624 <_printf_i+0x40>)
 8008620:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008624:	0800867d 	.word	0x0800867d
 8008628:	08008691 	.word	0x08008691
 800862c:	0800860d 	.word	0x0800860d
 8008630:	0800860d 	.word	0x0800860d
 8008634:	0800860d 	.word	0x0800860d
 8008638:	0800860d 	.word	0x0800860d
 800863c:	08008691 	.word	0x08008691
 8008640:	0800860d 	.word	0x0800860d
 8008644:	0800860d 	.word	0x0800860d
 8008648:	0800860d 	.word	0x0800860d
 800864c:	0800860d 	.word	0x0800860d
 8008650:	0800879d 	.word	0x0800879d
 8008654:	080086c1 	.word	0x080086c1
 8008658:	0800877f 	.word	0x0800877f
 800865c:	0800860d 	.word	0x0800860d
 8008660:	0800860d 	.word	0x0800860d
 8008664:	080087bf 	.word	0x080087bf
 8008668:	0800860d 	.word	0x0800860d
 800866c:	080086c1 	.word	0x080086c1
 8008670:	0800860d 	.word	0x0800860d
 8008674:	0800860d 	.word	0x0800860d
 8008678:	08008787 	.word	0x08008787
 800867c:	682b      	ldr	r3, [r5, #0]
 800867e:	1d1a      	adds	r2, r3, #4
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	602a      	str	r2, [r5, #0]
 8008684:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008688:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800868c:	2301      	movs	r3, #1
 800868e:	e0a3      	b.n	80087d8 <_printf_i+0x1f4>
 8008690:	6820      	ldr	r0, [r4, #0]
 8008692:	6829      	ldr	r1, [r5, #0]
 8008694:	0606      	lsls	r6, r0, #24
 8008696:	f101 0304 	add.w	r3, r1, #4
 800869a:	d50a      	bpl.n	80086b2 <_printf_i+0xce>
 800869c:	680e      	ldr	r6, [r1, #0]
 800869e:	602b      	str	r3, [r5, #0]
 80086a0:	2e00      	cmp	r6, #0
 80086a2:	da03      	bge.n	80086ac <_printf_i+0xc8>
 80086a4:	232d      	movs	r3, #45	; 0x2d
 80086a6:	4276      	negs	r6, r6
 80086a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086ac:	485e      	ldr	r0, [pc, #376]	; (8008828 <_printf_i+0x244>)
 80086ae:	230a      	movs	r3, #10
 80086b0:	e019      	b.n	80086e6 <_printf_i+0x102>
 80086b2:	680e      	ldr	r6, [r1, #0]
 80086b4:	602b      	str	r3, [r5, #0]
 80086b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80086ba:	bf18      	it	ne
 80086bc:	b236      	sxthne	r6, r6
 80086be:	e7ef      	b.n	80086a0 <_printf_i+0xbc>
 80086c0:	682b      	ldr	r3, [r5, #0]
 80086c2:	6820      	ldr	r0, [r4, #0]
 80086c4:	1d19      	adds	r1, r3, #4
 80086c6:	6029      	str	r1, [r5, #0]
 80086c8:	0601      	lsls	r1, r0, #24
 80086ca:	d501      	bpl.n	80086d0 <_printf_i+0xec>
 80086cc:	681e      	ldr	r6, [r3, #0]
 80086ce:	e002      	b.n	80086d6 <_printf_i+0xf2>
 80086d0:	0646      	lsls	r6, r0, #25
 80086d2:	d5fb      	bpl.n	80086cc <_printf_i+0xe8>
 80086d4:	881e      	ldrh	r6, [r3, #0]
 80086d6:	4854      	ldr	r0, [pc, #336]	; (8008828 <_printf_i+0x244>)
 80086d8:	2f6f      	cmp	r7, #111	; 0x6f
 80086da:	bf0c      	ite	eq
 80086dc:	2308      	moveq	r3, #8
 80086de:	230a      	movne	r3, #10
 80086e0:	2100      	movs	r1, #0
 80086e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086e6:	6865      	ldr	r5, [r4, #4]
 80086e8:	60a5      	str	r5, [r4, #8]
 80086ea:	2d00      	cmp	r5, #0
 80086ec:	bfa2      	ittt	ge
 80086ee:	6821      	ldrge	r1, [r4, #0]
 80086f0:	f021 0104 	bicge.w	r1, r1, #4
 80086f4:	6021      	strge	r1, [r4, #0]
 80086f6:	b90e      	cbnz	r6, 80086fc <_printf_i+0x118>
 80086f8:	2d00      	cmp	r5, #0
 80086fa:	d04d      	beq.n	8008798 <_printf_i+0x1b4>
 80086fc:	4615      	mov	r5, r2
 80086fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8008702:	fb03 6711 	mls	r7, r3, r1, r6
 8008706:	5dc7      	ldrb	r7, [r0, r7]
 8008708:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800870c:	4637      	mov	r7, r6
 800870e:	42bb      	cmp	r3, r7
 8008710:	460e      	mov	r6, r1
 8008712:	d9f4      	bls.n	80086fe <_printf_i+0x11a>
 8008714:	2b08      	cmp	r3, #8
 8008716:	d10b      	bne.n	8008730 <_printf_i+0x14c>
 8008718:	6823      	ldr	r3, [r4, #0]
 800871a:	07de      	lsls	r6, r3, #31
 800871c:	d508      	bpl.n	8008730 <_printf_i+0x14c>
 800871e:	6923      	ldr	r3, [r4, #16]
 8008720:	6861      	ldr	r1, [r4, #4]
 8008722:	4299      	cmp	r1, r3
 8008724:	bfde      	ittt	le
 8008726:	2330      	movle	r3, #48	; 0x30
 8008728:	f805 3c01 	strble.w	r3, [r5, #-1]
 800872c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008730:	1b52      	subs	r2, r2, r5
 8008732:	6122      	str	r2, [r4, #16]
 8008734:	f8cd a000 	str.w	sl, [sp]
 8008738:	464b      	mov	r3, r9
 800873a:	aa03      	add	r2, sp, #12
 800873c:	4621      	mov	r1, r4
 800873e:	4640      	mov	r0, r8
 8008740:	f7ff fee2 	bl	8008508 <_printf_common>
 8008744:	3001      	adds	r0, #1
 8008746:	d14c      	bne.n	80087e2 <_printf_i+0x1fe>
 8008748:	f04f 30ff 	mov.w	r0, #4294967295
 800874c:	b004      	add	sp, #16
 800874e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008752:	4835      	ldr	r0, [pc, #212]	; (8008828 <_printf_i+0x244>)
 8008754:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008758:	6829      	ldr	r1, [r5, #0]
 800875a:	6823      	ldr	r3, [r4, #0]
 800875c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008760:	6029      	str	r1, [r5, #0]
 8008762:	061d      	lsls	r5, r3, #24
 8008764:	d514      	bpl.n	8008790 <_printf_i+0x1ac>
 8008766:	07df      	lsls	r7, r3, #31
 8008768:	bf44      	itt	mi
 800876a:	f043 0320 	orrmi.w	r3, r3, #32
 800876e:	6023      	strmi	r3, [r4, #0]
 8008770:	b91e      	cbnz	r6, 800877a <_printf_i+0x196>
 8008772:	6823      	ldr	r3, [r4, #0]
 8008774:	f023 0320 	bic.w	r3, r3, #32
 8008778:	6023      	str	r3, [r4, #0]
 800877a:	2310      	movs	r3, #16
 800877c:	e7b0      	b.n	80086e0 <_printf_i+0xfc>
 800877e:	6823      	ldr	r3, [r4, #0]
 8008780:	f043 0320 	orr.w	r3, r3, #32
 8008784:	6023      	str	r3, [r4, #0]
 8008786:	2378      	movs	r3, #120	; 0x78
 8008788:	4828      	ldr	r0, [pc, #160]	; (800882c <_printf_i+0x248>)
 800878a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800878e:	e7e3      	b.n	8008758 <_printf_i+0x174>
 8008790:	0659      	lsls	r1, r3, #25
 8008792:	bf48      	it	mi
 8008794:	b2b6      	uxthmi	r6, r6
 8008796:	e7e6      	b.n	8008766 <_printf_i+0x182>
 8008798:	4615      	mov	r5, r2
 800879a:	e7bb      	b.n	8008714 <_printf_i+0x130>
 800879c:	682b      	ldr	r3, [r5, #0]
 800879e:	6826      	ldr	r6, [r4, #0]
 80087a0:	6961      	ldr	r1, [r4, #20]
 80087a2:	1d18      	adds	r0, r3, #4
 80087a4:	6028      	str	r0, [r5, #0]
 80087a6:	0635      	lsls	r5, r6, #24
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	d501      	bpl.n	80087b0 <_printf_i+0x1cc>
 80087ac:	6019      	str	r1, [r3, #0]
 80087ae:	e002      	b.n	80087b6 <_printf_i+0x1d2>
 80087b0:	0670      	lsls	r0, r6, #25
 80087b2:	d5fb      	bpl.n	80087ac <_printf_i+0x1c8>
 80087b4:	8019      	strh	r1, [r3, #0]
 80087b6:	2300      	movs	r3, #0
 80087b8:	6123      	str	r3, [r4, #16]
 80087ba:	4615      	mov	r5, r2
 80087bc:	e7ba      	b.n	8008734 <_printf_i+0x150>
 80087be:	682b      	ldr	r3, [r5, #0]
 80087c0:	1d1a      	adds	r2, r3, #4
 80087c2:	602a      	str	r2, [r5, #0]
 80087c4:	681d      	ldr	r5, [r3, #0]
 80087c6:	6862      	ldr	r2, [r4, #4]
 80087c8:	2100      	movs	r1, #0
 80087ca:	4628      	mov	r0, r5
 80087cc:	f7f7 fd20 	bl	8000210 <memchr>
 80087d0:	b108      	cbz	r0, 80087d6 <_printf_i+0x1f2>
 80087d2:	1b40      	subs	r0, r0, r5
 80087d4:	6060      	str	r0, [r4, #4]
 80087d6:	6863      	ldr	r3, [r4, #4]
 80087d8:	6123      	str	r3, [r4, #16]
 80087da:	2300      	movs	r3, #0
 80087dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087e0:	e7a8      	b.n	8008734 <_printf_i+0x150>
 80087e2:	6923      	ldr	r3, [r4, #16]
 80087e4:	462a      	mov	r2, r5
 80087e6:	4649      	mov	r1, r9
 80087e8:	4640      	mov	r0, r8
 80087ea:	47d0      	blx	sl
 80087ec:	3001      	adds	r0, #1
 80087ee:	d0ab      	beq.n	8008748 <_printf_i+0x164>
 80087f0:	6823      	ldr	r3, [r4, #0]
 80087f2:	079b      	lsls	r3, r3, #30
 80087f4:	d413      	bmi.n	800881e <_printf_i+0x23a>
 80087f6:	68e0      	ldr	r0, [r4, #12]
 80087f8:	9b03      	ldr	r3, [sp, #12]
 80087fa:	4298      	cmp	r0, r3
 80087fc:	bfb8      	it	lt
 80087fe:	4618      	movlt	r0, r3
 8008800:	e7a4      	b.n	800874c <_printf_i+0x168>
 8008802:	2301      	movs	r3, #1
 8008804:	4632      	mov	r2, r6
 8008806:	4649      	mov	r1, r9
 8008808:	4640      	mov	r0, r8
 800880a:	47d0      	blx	sl
 800880c:	3001      	adds	r0, #1
 800880e:	d09b      	beq.n	8008748 <_printf_i+0x164>
 8008810:	3501      	adds	r5, #1
 8008812:	68e3      	ldr	r3, [r4, #12]
 8008814:	9903      	ldr	r1, [sp, #12]
 8008816:	1a5b      	subs	r3, r3, r1
 8008818:	42ab      	cmp	r3, r5
 800881a:	dcf2      	bgt.n	8008802 <_printf_i+0x21e>
 800881c:	e7eb      	b.n	80087f6 <_printf_i+0x212>
 800881e:	2500      	movs	r5, #0
 8008820:	f104 0619 	add.w	r6, r4, #25
 8008824:	e7f5      	b.n	8008812 <_printf_i+0x22e>
 8008826:	bf00      	nop
 8008828:	08008b95 	.word	0x08008b95
 800882c:	08008ba6 	.word	0x08008ba6

08008830 <_sbrk_r>:
 8008830:	b538      	push	{r3, r4, r5, lr}
 8008832:	4d06      	ldr	r5, [pc, #24]	; (800884c <_sbrk_r+0x1c>)
 8008834:	2300      	movs	r3, #0
 8008836:	4604      	mov	r4, r0
 8008838:	4608      	mov	r0, r1
 800883a:	602b      	str	r3, [r5, #0]
 800883c:	f7fa f8e4 	bl	8002a08 <_sbrk>
 8008840:	1c43      	adds	r3, r0, #1
 8008842:	d102      	bne.n	800884a <_sbrk_r+0x1a>
 8008844:	682b      	ldr	r3, [r5, #0]
 8008846:	b103      	cbz	r3, 800884a <_sbrk_r+0x1a>
 8008848:	6023      	str	r3, [r4, #0]
 800884a:	bd38      	pop	{r3, r4, r5, pc}
 800884c:	200002e8 	.word	0x200002e8

08008850 <__sread>:
 8008850:	b510      	push	{r4, lr}
 8008852:	460c      	mov	r4, r1
 8008854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008858:	f000 f8a0 	bl	800899c <_read_r>
 800885c:	2800      	cmp	r0, #0
 800885e:	bfab      	itete	ge
 8008860:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008862:	89a3      	ldrhlt	r3, [r4, #12]
 8008864:	181b      	addge	r3, r3, r0
 8008866:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800886a:	bfac      	ite	ge
 800886c:	6563      	strge	r3, [r4, #84]	; 0x54
 800886e:	81a3      	strhlt	r3, [r4, #12]
 8008870:	bd10      	pop	{r4, pc}

08008872 <__swrite>:
 8008872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008876:	461f      	mov	r7, r3
 8008878:	898b      	ldrh	r3, [r1, #12]
 800887a:	05db      	lsls	r3, r3, #23
 800887c:	4605      	mov	r5, r0
 800887e:	460c      	mov	r4, r1
 8008880:	4616      	mov	r6, r2
 8008882:	d505      	bpl.n	8008890 <__swrite+0x1e>
 8008884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008888:	2302      	movs	r3, #2
 800888a:	2200      	movs	r2, #0
 800888c:	f000 f868 	bl	8008960 <_lseek_r>
 8008890:	89a3      	ldrh	r3, [r4, #12]
 8008892:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008896:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800889a:	81a3      	strh	r3, [r4, #12]
 800889c:	4632      	mov	r2, r6
 800889e:	463b      	mov	r3, r7
 80088a0:	4628      	mov	r0, r5
 80088a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088a6:	f000 b817 	b.w	80088d8 <_write_r>

080088aa <__sseek>:
 80088aa:	b510      	push	{r4, lr}
 80088ac:	460c      	mov	r4, r1
 80088ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088b2:	f000 f855 	bl	8008960 <_lseek_r>
 80088b6:	1c43      	adds	r3, r0, #1
 80088b8:	89a3      	ldrh	r3, [r4, #12]
 80088ba:	bf15      	itete	ne
 80088bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80088be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80088c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80088c6:	81a3      	strheq	r3, [r4, #12]
 80088c8:	bf18      	it	ne
 80088ca:	81a3      	strhne	r3, [r4, #12]
 80088cc:	bd10      	pop	{r4, pc}

080088ce <__sclose>:
 80088ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088d2:	f000 b813 	b.w	80088fc <_close_r>
	...

080088d8 <_write_r>:
 80088d8:	b538      	push	{r3, r4, r5, lr}
 80088da:	4d07      	ldr	r5, [pc, #28]	; (80088f8 <_write_r+0x20>)
 80088dc:	4604      	mov	r4, r0
 80088de:	4608      	mov	r0, r1
 80088e0:	4611      	mov	r1, r2
 80088e2:	2200      	movs	r2, #0
 80088e4:	602a      	str	r2, [r5, #0]
 80088e6:	461a      	mov	r2, r3
 80088e8:	f7fa f83d 	bl	8002966 <_write>
 80088ec:	1c43      	adds	r3, r0, #1
 80088ee:	d102      	bne.n	80088f6 <_write_r+0x1e>
 80088f0:	682b      	ldr	r3, [r5, #0]
 80088f2:	b103      	cbz	r3, 80088f6 <_write_r+0x1e>
 80088f4:	6023      	str	r3, [r4, #0]
 80088f6:	bd38      	pop	{r3, r4, r5, pc}
 80088f8:	200002e8 	.word	0x200002e8

080088fc <_close_r>:
 80088fc:	b538      	push	{r3, r4, r5, lr}
 80088fe:	4d06      	ldr	r5, [pc, #24]	; (8008918 <_close_r+0x1c>)
 8008900:	2300      	movs	r3, #0
 8008902:	4604      	mov	r4, r0
 8008904:	4608      	mov	r0, r1
 8008906:	602b      	str	r3, [r5, #0]
 8008908:	f7fa f849 	bl	800299e <_close>
 800890c:	1c43      	adds	r3, r0, #1
 800890e:	d102      	bne.n	8008916 <_close_r+0x1a>
 8008910:	682b      	ldr	r3, [r5, #0]
 8008912:	b103      	cbz	r3, 8008916 <_close_r+0x1a>
 8008914:	6023      	str	r3, [r4, #0]
 8008916:	bd38      	pop	{r3, r4, r5, pc}
 8008918:	200002e8 	.word	0x200002e8

0800891c <_fstat_r>:
 800891c:	b538      	push	{r3, r4, r5, lr}
 800891e:	4d07      	ldr	r5, [pc, #28]	; (800893c <_fstat_r+0x20>)
 8008920:	2300      	movs	r3, #0
 8008922:	4604      	mov	r4, r0
 8008924:	4608      	mov	r0, r1
 8008926:	4611      	mov	r1, r2
 8008928:	602b      	str	r3, [r5, #0]
 800892a:	f7fa f844 	bl	80029b6 <_fstat>
 800892e:	1c43      	adds	r3, r0, #1
 8008930:	d102      	bne.n	8008938 <_fstat_r+0x1c>
 8008932:	682b      	ldr	r3, [r5, #0]
 8008934:	b103      	cbz	r3, 8008938 <_fstat_r+0x1c>
 8008936:	6023      	str	r3, [r4, #0]
 8008938:	bd38      	pop	{r3, r4, r5, pc}
 800893a:	bf00      	nop
 800893c:	200002e8 	.word	0x200002e8

08008940 <_isatty_r>:
 8008940:	b538      	push	{r3, r4, r5, lr}
 8008942:	4d06      	ldr	r5, [pc, #24]	; (800895c <_isatty_r+0x1c>)
 8008944:	2300      	movs	r3, #0
 8008946:	4604      	mov	r4, r0
 8008948:	4608      	mov	r0, r1
 800894a:	602b      	str	r3, [r5, #0]
 800894c:	f7fa f843 	bl	80029d6 <_isatty>
 8008950:	1c43      	adds	r3, r0, #1
 8008952:	d102      	bne.n	800895a <_isatty_r+0x1a>
 8008954:	682b      	ldr	r3, [r5, #0]
 8008956:	b103      	cbz	r3, 800895a <_isatty_r+0x1a>
 8008958:	6023      	str	r3, [r4, #0]
 800895a:	bd38      	pop	{r3, r4, r5, pc}
 800895c:	200002e8 	.word	0x200002e8

08008960 <_lseek_r>:
 8008960:	b538      	push	{r3, r4, r5, lr}
 8008962:	4d07      	ldr	r5, [pc, #28]	; (8008980 <_lseek_r+0x20>)
 8008964:	4604      	mov	r4, r0
 8008966:	4608      	mov	r0, r1
 8008968:	4611      	mov	r1, r2
 800896a:	2200      	movs	r2, #0
 800896c:	602a      	str	r2, [r5, #0]
 800896e:	461a      	mov	r2, r3
 8008970:	f7fa f83c 	bl	80029ec <_lseek>
 8008974:	1c43      	adds	r3, r0, #1
 8008976:	d102      	bne.n	800897e <_lseek_r+0x1e>
 8008978:	682b      	ldr	r3, [r5, #0]
 800897a:	b103      	cbz	r3, 800897e <_lseek_r+0x1e>
 800897c:	6023      	str	r3, [r4, #0]
 800897e:	bd38      	pop	{r3, r4, r5, pc}
 8008980:	200002e8 	.word	0x200002e8

08008984 <__malloc_lock>:
 8008984:	4801      	ldr	r0, [pc, #4]	; (800898c <__malloc_lock+0x8>)
 8008986:	f7ff bb1d 	b.w	8007fc4 <__retarget_lock_acquire_recursive>
 800898a:	bf00      	nop
 800898c:	200002dc 	.word	0x200002dc

08008990 <__malloc_unlock>:
 8008990:	4801      	ldr	r0, [pc, #4]	; (8008998 <__malloc_unlock+0x8>)
 8008992:	f7ff bb18 	b.w	8007fc6 <__retarget_lock_release_recursive>
 8008996:	bf00      	nop
 8008998:	200002dc 	.word	0x200002dc

0800899c <_read_r>:
 800899c:	b538      	push	{r3, r4, r5, lr}
 800899e:	4d07      	ldr	r5, [pc, #28]	; (80089bc <_read_r+0x20>)
 80089a0:	4604      	mov	r4, r0
 80089a2:	4608      	mov	r0, r1
 80089a4:	4611      	mov	r1, r2
 80089a6:	2200      	movs	r2, #0
 80089a8:	602a      	str	r2, [r5, #0]
 80089aa:	461a      	mov	r2, r3
 80089ac:	f7f9 ffbe 	bl	800292c <_read>
 80089b0:	1c43      	adds	r3, r0, #1
 80089b2:	d102      	bne.n	80089ba <_read_r+0x1e>
 80089b4:	682b      	ldr	r3, [r5, #0]
 80089b6:	b103      	cbz	r3, 80089ba <_read_r+0x1e>
 80089b8:	6023      	str	r3, [r4, #0]
 80089ba:	bd38      	pop	{r3, r4, r5, pc}
 80089bc:	200002e8 	.word	0x200002e8

080089c0 <_init>:
 80089c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089c2:	bf00      	nop
 80089c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089c6:	bc08      	pop	{r3}
 80089c8:	469e      	mov	lr, r3
 80089ca:	4770      	bx	lr

080089cc <_fini>:
 80089cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ce:	bf00      	nop
 80089d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089d2:	bc08      	pop	{r3}
 80089d4:	469e      	mov	lr, r3
 80089d6:	4770      	bx	lr
