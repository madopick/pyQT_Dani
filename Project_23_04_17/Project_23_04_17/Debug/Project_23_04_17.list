
Project_23_04_17.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d7c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08005f40  08005f40  00015f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060b0  080060b0  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  080060b0  080060b0  000160b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060b8  080060b8  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060b8  080060b8  000160b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060bc  080060bc  000160bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  080060c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007dc  20000100  080061c0  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008dc  080061c0  000208dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7ba  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e5f  00000000  00000000  0002c8ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0002e750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b8  00000000  00000000  0002f1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022a23  00000000  00000000  0002fb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da0f  00000000  00000000  0005258b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc493  00000000  00000000  0005ff9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012c42d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030a0  00000000  00000000  0012c480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000100 	.word	0x20000100
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005f28 	.word	0x08005f28

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000104 	.word	0x20000104
 8000200:	08005f28 	.word	0x08005f28

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <__io_putchar>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

/* @brief  Retargets the C library printf function to the USART. */
PUTCHAR_PROTOTYPE {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000510:	1d39      	adds	r1, r7, #4
 8000512:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000516:	2201      	movs	r2, #1
 8000518:	4803      	ldr	r0, [pc, #12]	; (8000528 <__io_putchar+0x20>)
 800051a:	f003 fdd0 	bl	80040be <HAL_UART_Transmit>
  return ch;
 800051e:	687b      	ldr	r3, [r7, #4]
}
 8000520:	4618      	mov	r0, r3
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	200001d4 	.word	0x200001d4

0800052c <main>:
uint16_t bitFlag;
volatile uint8_t spi2F;

/* @brief  Main program */
int main(void)
{
 800052c:	b5b0      	push	{r4, r5, r7, lr}
 800052e:	b0a0      	sub	sp, #128	; 0x80
 8000530:	af00      	add	r7, sp, #0
	HAL_Init();
 8000532:	f001 f909 	bl	8001748 <HAL_Init>

	SystemClock_Config();
 8000536:	f000 fa3f 	bl	80009b8 <SystemClock_Config>

	MX_GPIO_Init();
 800053a:	f000 fb35 	bl	8000ba8 <MX_GPIO_Init>
	MX_SPI2_Init();
 800053e:	f000 faa9 	bl	8000a94 <MX_SPI2_Init>
	MX_DMA_Init();
 8000542:	f000 fb11 	bl	8000b68 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000546:	f000 fadd 	bl	8000b04 <MX_USART2_UART_Init>

	#ifdef MASTER_BOARD
	printf("Init OKE\r\n");
 800054a:	48a6      	ldr	r0, [pc, #664]	; (80007e4 <main+0x2b8>)
 800054c:	f005 f85c 	bl	8005608 <puts>
	#endif

	while (1)
	{
		if (bitFlag & BFLAG_UART_RCV)		// UART Processing
 8000550:	4ba5      	ldr	r3, [pc, #660]	; (80007e8 <main+0x2bc>)
 8000552:	881b      	ldrh	r3, [r3, #0]
 8000554:	f003 0301 	and.w	r3, r3, #1
 8000558:	2b00      	cmp	r3, #0
 800055a:	d017      	beq.n	800058c <main+0x60>
		{
			//printf("UART...\r\n");
			uartProcessing (u8arr_uartEvent, u16_lenCnt - 2); // remove \r & \n
 800055c:	4ba3      	ldr	r3, [pc, #652]	; (80007ec <main+0x2c0>)
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	3b02      	subs	r3, #2
 8000562:	b29b      	uxth	r3, r3
 8000564:	4619      	mov	r1, r3
 8000566:	48a2      	ldr	r0, [pc, #648]	; (80007f0 <main+0x2c4>)
 8000568:	f000 fc8a 	bl	8000e80 <uartProcessing>
			memset(u8arr_uartEvent, 0, UART_BUF_SZ);
 800056c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000570:	2100      	movs	r1, #0
 8000572:	489f      	ldr	r0, [pc, #636]	; (80007f0 <main+0x2c4>)
 8000574:	f004 ffd2 	bl	800551c <memset>
			u16_lenCnt = 0;
 8000578:	4b9c      	ldr	r3, [pc, #624]	; (80007ec <main+0x2c0>)
 800057a:	2200      	movs	r2, #0
 800057c:	801a      	strh	r2, [r3, #0]
			bitFlag 	&= ~BFLAG_UART_RCV;
 800057e:	4b9a      	ldr	r3, [pc, #616]	; (80007e8 <main+0x2bc>)
 8000580:	881b      	ldrh	r3, [r3, #0]
 8000582:	f023 0301 	bic.w	r3, r3, #1
 8000586:	b29a      	uxth	r2, r3
 8000588:	4b97      	ldr	r3, [pc, #604]	; (80007e8 <main+0x2bc>)
 800058a:	801a      	strh	r2, [r3, #0]

		memset(aRxBuffer, 0, sizeof(aRxBuffer));
	  	#endif

	  	#ifdef MASTER_BOARD
		if (bitFlag & BFLAG_BTN)
 800058c:	4b96      	ldr	r3, [pc, #600]	; (80007e8 <main+0x2bc>)
 800058e:	881b      	ldrh	r3, [r3, #0]
 8000590:	f003 0320 	and.w	r3, r3, #32
 8000594:	2b00      	cmp	r3, #0
 8000596:	d006      	beq.n	80005a6 <main+0x7a>
			printf("MASTER RX: %d %d %d %d\r\n\n", aRxBuffer[0], aRxBuffer[1], aRxBuffer[2], aRxBuffer[3]);

			memset(aRxBuffer, 0, sizeof(aRxBuffer));
			*/

			bitFlag &= ~BFLAG_BTN;
 8000598:	4b93      	ldr	r3, [pc, #588]	; (80007e8 <main+0x2bc>)
 800059a:	881b      	ldrh	r3, [r3, #0]
 800059c:	f023 0320 	bic.w	r3, r3, #32
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	4b91      	ldr	r3, [pc, #580]	; (80007e8 <main+0x2bc>)
 80005a4:	801a      	strh	r2, [r3, #0]
		}

		if (bitFlag & BFLAG_SPIM_RBA) {			//Read Byte All (Trigger once at the first time)
 80005a6:	4b90      	ldr	r3, [pc, #576]	; (80007e8 <main+0x2bc>)
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	f003 0308 	and.w	r3, r3, #8
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	f000 8087 	beq.w	80006c2 <main+0x196>
			memset (sendStr, 0, STRLENMAX);
 80005b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005b8:	2100      	movs	r1, #0
 80005ba:	488e      	ldr	r0, [pc, #568]	; (80007f4 <main+0x2c8>)
 80005bc:	f004 ffae 	bl	800551c <memset>
			sendStr[0] = 0x10;
 80005c0:	4b8c      	ldr	r3, [pc, #560]	; (80007f4 <main+0x2c8>)
 80005c2:	2210      	movs	r2, #16
 80005c4:	701a      	strb	r2, [r3, #0]
			sendStr[1] = 0x11;
 80005c6:	4b8b      	ldr	r3, [pc, #556]	; (80007f4 <main+0x2c8>)
 80005c8:	2211      	movs	r2, #17
 80005ca:	705a      	strb	r2, [r3, #1]
			HAL_UART_Transmit(&huart2, (uint8_t *)sendStr, 2, 0xFFFF);
 80005cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005d0:	2202      	movs	r2, #2
 80005d2:	4988      	ldr	r1, [pc, #544]	; (80007f4 <main+0x2c8>)
 80005d4:	4888      	ldr	r0, [pc, #544]	; (80007f8 <main+0x2cc>)
 80005d6:	f003 fd72 	bl	80040be <HAL_UART_Transmit>
			for (uint8_t i=4; i<=6; i++){
 80005da:	2304      	movs	r3, #4
 80005dc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80005e0:	e064      	b.n	80006ac <main+0x180>
				aTxBuffer[0] = i;
 80005e2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80005e6:	4a85      	ldr	r2, [pc, #532]	; (80007fc <main+0x2d0>)
 80005e8:	6013      	str	r3, [r2, #0]

				// CORE OF SPI MASTER
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY){}
 80005ea:	bf00      	nop
 80005ec:	4884      	ldr	r0, [pc, #528]	; (8000800 <main+0x2d4>)
 80005ee:	f003 f963 	bl	80038b8 <HAL_SPI_GetState>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d1f9      	bne.n	80005ec <main+0xc0>

				spi2F = 0;
 80005f8:	4b82      	ldr	r3, [pc, #520]	; (8000804 <main+0x2d8>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]

				if(HAL_SPI_Transmit_IT(&hspi2, (uint8_t*)aTxBuffer, BUFFERSIZE) != HAL_OK)
 80005fe:	2264      	movs	r2, #100	; 0x64
 8000600:	497e      	ldr	r1, [pc, #504]	; (80007fc <main+0x2d0>)
 8000602:	487f      	ldr	r0, [pc, #508]	; (8000800 <main+0x2d4>)
 8000604:	f002 fe9c 	bl	8003340 <HAL_SPI_Transmit_IT>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <main+0xe6>
				{
					Error_Handler();
 800060e:	f000 fcef 	bl	8000ff0 <Error_Handler>
				}

				while (spi2F == 0){}
 8000612:	bf00      	nop
 8000614:	4b7b      	ldr	r3, [pc, #492]	; (8000804 <main+0x2d8>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b00      	cmp	r3, #0
 800061c:	d0fa      	beq.n	8000614 <main+0xe8>
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY){}
 800061e:	bf00      	nop
 8000620:	4877      	ldr	r0, [pc, #476]	; (8000800 <main+0x2d4>)
 8000622:	f003 f949 	bl	80038b8 <HAL_SPI_GetState>
 8000626:	4603      	mov	r3, r0
 8000628:	2b01      	cmp	r3, #1
 800062a:	d1f9      	bne.n	8000620 <main+0xf4>
				spi2F = 0;
 800062c:	4b75      	ldr	r3, [pc, #468]	; (8000804 <main+0x2d8>)
 800062e:	2200      	movs	r2, #0
 8000630:	701a      	strb	r2, [r3, #0]

				HAL_Delay(100);	//jangan diilangin soalnya bisa bikin error*/
 8000632:	2064      	movs	r0, #100	; 0x64
 8000634:	f001 f8fa 	bl	800182c <HAL_Delay>
				if(HAL_SPI_Receive_IT(&hspi2, (uint8_t*)aRxBuffer, BUFFERSIZE) != HAL_OK)
 8000638:	2264      	movs	r2, #100	; 0x64
 800063a:	4973      	ldr	r1, [pc, #460]	; (8000808 <main+0x2dc>)
 800063c:	4870      	ldr	r0, [pc, #448]	; (8000800 <main+0x2d4>)
 800063e:	f002 ff09 	bl	8003454 <HAL_SPI_Receive_IT>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <main+0x120>
				{
					Error_Handler();
 8000648:	f000 fcd2 	bl	8000ff0 <Error_Handler>
				}

				//while (spi2F == 0){}
				while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY){}
 800064c:	bf00      	nop
 800064e:	486c      	ldr	r0, [pc, #432]	; (8000800 <main+0x2d4>)
 8000650:	f003 f932 	bl	80038b8 <HAL_SPI_GetState>
 8000654:	4603      	mov	r3, r0
 8000656:	2b01      	cmp	r3, #1
 8000658:	d1f9      	bne.n	800064e <main+0x122>
				// CORE SPI MASTER -- END


				if (aRxBuffer[0]==4){
 800065a:	4b6b      	ldr	r3, [pc, #428]	; (8000808 <main+0x2dc>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2b04      	cmp	r3, #4
 8000660:	d105      	bne.n	800066e <main+0x142>
					//memcpy(&sendStr[2], &aRxBuffer[1], CFG_LENGTH * sizeof(&aRxBuffer[1]));
					memcpy(&sendStr[0], &aRxBuffer[1], CFG_LENGTH * sizeof(&aRxBuffer[1]));
 8000662:	2228      	movs	r2, #40	; 0x28
 8000664:	4969      	ldr	r1, [pc, #420]	; (800080c <main+0x2e0>)
 8000666:	4863      	ldr	r0, [pc, #396]	; (80007f4 <main+0x2c8>)
 8000668:	f004 ff4a 	bl	8005500 <memcpy>
 800066c:	e012      	b.n	8000694 <main+0x168>
				}
				else if (aRxBuffer[0]==5){
 800066e:	4b66      	ldr	r3, [pc, #408]	; (8000808 <main+0x2dc>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2b05      	cmp	r3, #5
 8000674:	d105      	bne.n	8000682 <main+0x156>
					//memcpy(&sendStr[42], &aRxBuffer[1], CFG_LENGTH * sizeof(&aRxBuffer[1]));
					memcpy(&sendStr[0], &aRxBuffer[1], CFG_LENGTH * sizeof(&aRxBuffer[1]));
 8000676:	2228      	movs	r2, #40	; 0x28
 8000678:	4964      	ldr	r1, [pc, #400]	; (800080c <main+0x2e0>)
 800067a:	485e      	ldr	r0, [pc, #376]	; (80007f4 <main+0x2c8>)
 800067c:	f004 ff40 	bl	8005500 <memcpy>
 8000680:	e008      	b.n	8000694 <main+0x168>
				}
				else if (aRxBuffer[0]==6){
 8000682:	4b61      	ldr	r3, [pc, #388]	; (8000808 <main+0x2dc>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b06      	cmp	r3, #6
 8000688:	d104      	bne.n	8000694 <main+0x168>
					//memcpy(&sendStr[82], &aRxBuffer[1], CFG_LENGTH * sizeof(&aRxBuffer[1]));
					memcpy(&sendStr[0], &aRxBuffer[1], CFG_LENGTH * sizeof(&aRxBuffer[1]));
 800068a:	2228      	movs	r2, #40	; 0x28
 800068c:	495f      	ldr	r1, [pc, #380]	; (800080c <main+0x2e0>)
 800068e:	4859      	ldr	r0, [pc, #356]	; (80007f4 <main+0x2c8>)
 8000690:	f004 ff36 	bl	8005500 <memcpy>
				}
				HAL_UART_Transmit(&huart2, (uint8_t *)sendStr, 40, 0xFFFF);
 8000694:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000698:	2228      	movs	r2, #40	; 0x28
 800069a:	4956      	ldr	r1, [pc, #344]	; (80007f4 <main+0x2c8>)
 800069c:	4856      	ldr	r0, [pc, #344]	; (80007f8 <main+0x2cc>)
 800069e:	f003 fd0e 	bl	80040be <HAL_UART_Transmit>
			for (uint8_t i=4; i<=6; i++){
 80006a2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80006a6:	3301      	adds	r3, #1
 80006a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80006ac:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80006b0:	2b06      	cmp	r3, #6
 80006b2:	d996      	bls.n	80005e2 <main+0xb6>
			}
			//HAL_UART_Transmit(&huart2, (uint8_t *)sendStr, 120, 0xFFFF);

			bitFlag &= ~BFLAG_SPIM_RBA;
 80006b4:	4b4c      	ldr	r3, [pc, #304]	; (80007e8 <main+0x2bc>)
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	f023 0308 	bic.w	r3, r3, #8
 80006bc:	b29a      	uxth	r2, r3
 80006be:	4b4a      	ldr	r3, [pc, #296]	; (80007e8 <main+0x2bc>)
 80006c0:	801a      	strh	r2, [r3, #0]
		}

		if ((bitFlag & BFLAG_SPIM_WR) || (bitFlag & BFLAG_SPIM_WBA))
 80006c2:	4b49      	ldr	r3, [pc, #292]	; (80007e8 <main+0x2bc>)
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	f003 0304 	and.w	r3, r3, #4
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d106      	bne.n	80006dc <main+0x1b0>
 80006ce:	4b46      	ldr	r3, [pc, #280]	; (80007e8 <main+0x2bc>)
 80006d0:	881b      	ldrh	r3, [r3, #0]
 80006d2:	f003 0310 	and.w	r3, r3, #16
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	f000 814c 	beq.w	8000974 <main+0x448>
		{
			// CORE OF SPI MASTER
			while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY){}
 80006dc:	bf00      	nop
 80006de:	4848      	ldr	r0, [pc, #288]	; (8000800 <main+0x2d4>)
 80006e0:	f003 f8ea 	bl	80038b8 <HAL_SPI_GetState>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d1f9      	bne.n	80006de <main+0x1b2>

			spi2F = 0;
 80006ea:	4b46      	ldr	r3, [pc, #280]	; (8000804 <main+0x2d8>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]

			if(HAL_SPI_Transmit_IT(&hspi2, (uint8_t*)aTxBuffer, BUFFERSIZE) != HAL_OK)
 80006f0:	2264      	movs	r2, #100	; 0x64
 80006f2:	4942      	ldr	r1, [pc, #264]	; (80007fc <main+0x2d0>)
 80006f4:	4842      	ldr	r0, [pc, #264]	; (8000800 <main+0x2d4>)
 80006f6:	f002 fe23 	bl	8003340 <HAL_SPI_Transmit_IT>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <main+0x1d8>
			{
				Error_Handler();
 8000700:	f000 fc76 	bl	8000ff0 <Error_Handler>
			}

			while (spi2F == 0){}
 8000704:	bf00      	nop
 8000706:	4b3f      	ldr	r3, [pc, #252]	; (8000804 <main+0x2d8>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	b2db      	uxtb	r3, r3
 800070c:	2b00      	cmp	r3, #0
 800070e:	d0fa      	beq.n	8000706 <main+0x1da>
			while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY){}
 8000710:	bf00      	nop
 8000712:	483b      	ldr	r0, [pc, #236]	; (8000800 <main+0x2d4>)
 8000714:	f003 f8d0 	bl	80038b8 <HAL_SPI_GetState>
 8000718:	4603      	mov	r3, r0
 800071a:	2b01      	cmp	r3, #1
 800071c:	d1f9      	bne.n	8000712 <main+0x1e6>
			spi2F = 0;
 800071e:	4b39      	ldr	r3, [pc, #228]	; (8000804 <main+0x2d8>)
 8000720:	2200      	movs	r2, #0
 8000722:	701a      	strb	r2, [r3, #0]

			HAL_Delay(100);	//jangan diilangin soalnya bisa bikin error*/
 8000724:	2064      	movs	r0, #100	; 0x64
 8000726:	f001 f881 	bl	800182c <HAL_Delay>
			if(HAL_SPI_Receive_IT(&hspi2, (uint8_t*)aRxBuffer, BUFFERSIZE) != HAL_OK)
 800072a:	2264      	movs	r2, #100	; 0x64
 800072c:	4936      	ldr	r1, [pc, #216]	; (8000808 <main+0x2dc>)
 800072e:	4834      	ldr	r0, [pc, #208]	; (8000800 <main+0x2d4>)
 8000730:	f002 fe90 	bl	8003454 <HAL_SPI_Receive_IT>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <main+0x212>
			{
				Error_Handler();
 800073a:	f000 fc59 	bl	8000ff0 <Error_Handler>
			}

			//while (spi2F == 0){}
			while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY){}
 800073e:	bf00      	nop
 8000740:	482f      	ldr	r0, [pc, #188]	; (8000800 <main+0x2d4>)
 8000742:	f003 f8b9 	bl	80038b8 <HAL_SPI_GetState>
 8000746:	4603      	mov	r3, r0
 8000748:	2b01      	cmp	r3, #1
 800074a:	d1f9      	bne.n	8000740 <main+0x214>
			// CORE SPI MASTER -- END

			if(aRxBuffer[0]==1)		// {WB1:
 800074c:	4b2e      	ldr	r3, [pc, #184]	; (8000808 <main+0x2dc>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b01      	cmp	r3, #1
 8000752:	d10e      	bne.n	8000772 <main+0x246>
			{
				char send[] = {0x14, 0x15,
 8000754:	4b2e      	ldr	r3, [pc, #184]	; (8000810 <main+0x2e4>)
 8000756:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800075a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800075c:	c407      	stmia	r4!, {r0, r1, r2}
 800075e:	8023      	strh	r3, [r4, #0]
					  'S', 'E', 'N', 'D', ' ', 'R', 'E', 'S', '1', ':', 0x0d, 0x0a};
				HAL_UART_Transmit(&huart2, (uint8_t *)send, 14, 0xFFFF);
 8000760:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000764:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000768:	220e      	movs	r2, #14
 800076a:	4823      	ldr	r0, [pc, #140]	; (80007f8 <main+0x2cc>)
 800076c:	f003 fca7 	bl	80040be <HAL_UART_Transmit>
 8000770:	e07b      	b.n	800086a <main+0x33e>
			}
			else if(aRxBuffer[0]==2)		// {WB2:
 8000772:	4b25      	ldr	r3, [pc, #148]	; (8000808 <main+0x2dc>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b02      	cmp	r3, #2
 8000778:	d10e      	bne.n	8000798 <main+0x26c>
			{
				char send[] = {0x14, 0x15,
 800077a:	4b26      	ldr	r3, [pc, #152]	; (8000814 <main+0x2e8>)
 800077c:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000780:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000782:	c407      	stmia	r4!, {r0, r1, r2}
 8000784:	8023      	strh	r3, [r4, #0]
					  'S', 'E', 'N', 'D', ' ', 'R', 'E', 'S', '2', ':', 0x0d, 0x0a};
				HAL_UART_Transmit(&huart2, (uint8_t *)send, 14, 0xFFFF);
 8000786:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800078a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800078e:	220e      	movs	r2, #14
 8000790:	4819      	ldr	r0, [pc, #100]	; (80007f8 <main+0x2cc>)
 8000792:	f003 fc94 	bl	80040be <HAL_UART_Transmit>
 8000796:	e068      	b.n	800086a <main+0x33e>
			}
			else if(aRxBuffer[0]==3)		// {WB3:
 8000798:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <main+0x2dc>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b03      	cmp	r3, #3
 800079e:	d10e      	bne.n	80007be <main+0x292>
			{
				char send[] = {0x14, 0x15,
 80007a0:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <main+0x2ec>)
 80007a2:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80007a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007a8:	c407      	stmia	r4!, {r0, r1, r2}
 80007aa:	8023      	strh	r3, [r4, #0]
					  'S', 'E', 'N', 'D', ' ', 'R', 'E', 'S', '3', ':', 0x0d, 0x0a};
				HAL_UART_Transmit(&huart2, (uint8_t *)send, 14, 0xFFFF);
 80007ac:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80007b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007b4:	220e      	movs	r2, #14
 80007b6:	4810      	ldr	r0, [pc, #64]	; (80007f8 <main+0x2cc>)
 80007b8:	f003 fc81 	bl	80040be <HAL_UART_Transmit>
 80007bc:	e055      	b.n	800086a <main+0x33e>
			}
			else if(aRxBuffer[0]==4)		// {RB1}
 80007be:	4b12      	ldr	r3, [pc, #72]	; (8000808 <main+0x2dc>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2b04      	cmp	r3, #4
 80007c4:	d12c      	bne.n	8000820 <main+0x2f4>
			{
				char send[] = {0x14, 0x15,
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <main+0x2f0>)
 80007c8:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80007cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007ce:	c407      	stmia	r4!, {r0, r1, r2}
 80007d0:	8023      	strh	r3, [r4, #0]
					  'R', 'E', 'A', 'D', ' ', 'R', 'E', 'S', '1', ':', 0x0d, 0x0a};
				HAL_UART_Transmit(&huart2, (uint8_t *)send, 14, 0xFFFF);
 80007d2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80007d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007da:	220e      	movs	r2, #14
 80007dc:	4806      	ldr	r0, [pc, #24]	; (80007f8 <main+0x2cc>)
 80007de:	f003 fc6e 	bl	80040be <HAL_UART_Transmit>
 80007e2:	e042      	b.n	800086a <main+0x33e>
 80007e4:	08005f40 	.word	0x08005f40
 80007e8:	200008c0 	.word	0x200008c0
 80007ec:	2000061a 	.word	0x2000061a
 80007f0:	20000418 	.word	0x20000418
 80007f4:	20000648 	.word	0x20000648
 80007f8:	200001d4 	.word	0x200001d4
 80007fc:	20000000 	.word	0x20000000
 8000800:	2000011c 	.word	0x2000011c
 8000804:	200008c2 	.word	0x200008c2
 8000808:	2000061c 	.word	0x2000061c
 800080c:	20000620 	.word	0x20000620
 8000810:	08005f4c 	.word	0x08005f4c
 8000814:	08005f5c 	.word	0x08005f5c
 8000818:	08005f6c 	.word	0x08005f6c
 800081c:	08005f7c 	.word	0x08005f7c
			}
			else if(aRxBuffer[0]==5)		// {RB2}
 8000820:	4b59      	ldr	r3, [pc, #356]	; (8000988 <main+0x45c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b05      	cmp	r3, #5
 8000826:	d10e      	bne.n	8000846 <main+0x31a>
			{
				char send[] = {0x14, 0x15,
 8000828:	4b58      	ldr	r3, [pc, #352]	; (800098c <main+0x460>)
 800082a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800082e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000830:	c407      	stmia	r4!, {r0, r1, r2}
 8000832:	8023      	strh	r3, [r4, #0]
					  'R', 'E', 'A', 'D', ' ', 'R', 'E', 'S', '2', ':', 0x0d, 0x0a};
				HAL_UART_Transmit(&huart2, (uint8_t *)send, 14, 0xFFFF);
 8000834:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000838:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800083c:	220e      	movs	r2, #14
 800083e:	4854      	ldr	r0, [pc, #336]	; (8000990 <main+0x464>)
 8000840:	f003 fc3d 	bl	80040be <HAL_UART_Transmit>
 8000844:	e011      	b.n	800086a <main+0x33e>
			}
			else if(aRxBuffer[0]==6)		// {RB3}
 8000846:	4b50      	ldr	r3, [pc, #320]	; (8000988 <main+0x45c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2b06      	cmp	r3, #6
 800084c:	d10d      	bne.n	800086a <main+0x33e>
			{
				char send[] = {0x14, 0x15,
 800084e:	4b51      	ldr	r3, [pc, #324]	; (8000994 <main+0x468>)
 8000850:	f107 0420 	add.w	r4, r7, #32
 8000854:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000856:	c407      	stmia	r4!, {r0, r1, r2}
 8000858:	8023      	strh	r3, [r4, #0]
					  'R', 'E', 'A', 'D', ' ', 'R', 'E', 'S', '3', ':', 0x0d, 0x0a};
				HAL_UART_Transmit(&huart2, (uint8_t *)send, 14, 0xFFFF);
 800085a:	f107 0120 	add.w	r1, r7, #32
 800085e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000862:	220e      	movs	r2, #14
 8000864:	484a      	ldr	r0, [pc, #296]	; (8000990 <main+0x464>)
 8000866:	f003 fc2a 	bl	80040be <HAL_UART_Transmit>
			}


			if (aRxBuffer[0]<4)				// Compare TxBuffer and Rx Buffer
 800086a:	4b47      	ldr	r3, [pc, #284]	; (8000988 <main+0x45c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	2b03      	cmp	r3, #3
 8000870:	dc1e      	bgt.n	80008b0 <main+0x384>
			{
				//##-6- Compare the sent and received buffers ##############################
				if(Buffercmp_Byte(aTxBuffer,aRxBuffer, 11))
 8000872:	220b      	movs	r2, #11
 8000874:	4944      	ldr	r1, [pc, #272]	; (8000988 <main+0x45c>)
 8000876:	4848      	ldr	r0, [pc, #288]	; (8000998 <main+0x46c>)
 8000878:	f000 fa68 	bl	8000d4c <Buffercmp_Byte>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d00f      	beq.n	80008a2 <main+0x376>
				{
					char send[] = {0x14, 0x15,
 8000882:	4b46      	ldr	r3, [pc, #280]	; (800099c <main+0x470>)
 8000884:	1d3c      	adds	r4, r7, #4
 8000886:	461d      	mov	r5, r3
 8000888:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800088a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800088c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000890:	c403      	stmia	r4!, {r0, r1}
 8000892:	7022      	strb	r2, [r4, #0]
							'B','u','f','f','e','r',' ','C','o','m','p','a','r','e',' ','F','a','i','l','!','!',0x0d, 0x0a};
					HAL_UART_Transmit(&huart2, (uint8_t *)send, 25, 0xFFFF);
 8000894:	1d39      	adds	r1, r7, #4
 8000896:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800089a:	2219      	movs	r2, #25
 800089c:	483c      	ldr	r0, [pc, #240]	; (8000990 <main+0x464>)
 800089e:	f003 fc0e 	bl	80040be <HAL_UART_Transmit>
				}

				bitFlag &= ~BFLAG_SPIM_WR;
 80008a2:	4b3f      	ldr	r3, [pc, #252]	; (80009a0 <main+0x474>)
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	f023 0304 	bic.w	r3, r3, #4
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	4b3c      	ldr	r3, [pc, #240]	; (80009a0 <main+0x474>)
 80008ae:	801a      	strh	r2, [r3, #0]
			}

			if (aRxBuffer[0] >= 4 && aRxBuffer[0] <= 6)
 80008b0:	4b35      	ldr	r3, [pc, #212]	; (8000988 <main+0x45c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b03      	cmp	r3, #3
 80008b6:	dd2a      	ble.n	800090e <main+0x3e2>
 80008b8:	4b33      	ldr	r3, [pc, #204]	; (8000988 <main+0x45c>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b06      	cmp	r3, #6
 80008be:	dc26      	bgt.n	800090e <main+0x3e2>
			{
				//printf("Master RX: %d %d %d %d\r\n\n", aRxBuffer[0], aRxBuffer[1], aRxBuffer[2], aRxBuffer[3]);
				memset (sendStr, 0, STRLENMAX);
 80008c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c4:	2100      	movs	r1, #0
 80008c6:	4837      	ldr	r0, [pc, #220]	; (80009a4 <main+0x478>)
 80008c8:	f004 fe28 	bl	800551c <memset>
				sendStr[0] = 0x12;
 80008cc:	4b35      	ldr	r3, [pc, #212]	; (80009a4 <main+0x478>)
 80008ce:	2212      	movs	r2, #18
 80008d0:	701a      	strb	r2, [r3, #0]
				sendStr[1] = 0x13;
 80008d2:	4b34      	ldr	r3, [pc, #208]	; (80009a4 <main+0x478>)
 80008d4:	2213      	movs	r2, #19
 80008d6:	705a      	strb	r2, [r3, #1]

				memcpy(&sendStr[2], &aRxBuffer[1], CFG_LENGTH * sizeof(aRxBuffer[0]));
 80008d8:	2228      	movs	r2, #40	; 0x28
 80008da:	4933      	ldr	r1, [pc, #204]	; (80009a8 <main+0x47c>)
 80008dc:	4833      	ldr	r0, [pc, #204]	; (80009ac <main+0x480>)
 80008de:	f004 fe0f 	bl	8005500 <memcpy>

				sendStr[42] = 0x0d;
 80008e2:	4b30      	ldr	r3, [pc, #192]	; (80009a4 <main+0x478>)
 80008e4:	220d      	movs	r2, #13
 80008e6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				sendStr[43] = 0x0a;
 80008ea:	4b2e      	ldr	r3, [pc, #184]	; (80009a4 <main+0x478>)
 80008ec:	220a      	movs	r2, #10
 80008ee:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

				HAL_UART_Transmit(&huart2, (uint8_t *)sendStr, 44, 0xFFFF);
 80008f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008f6:	222c      	movs	r2, #44	; 0x2c
 80008f8:	492a      	ldr	r1, [pc, #168]	; (80009a4 <main+0x478>)
 80008fa:	4825      	ldr	r0, [pc, #148]	; (8000990 <main+0x464>)
 80008fc:	f003 fbdf 	bl	80040be <HAL_UART_Transmit>

				bitFlag &= ~BFLAG_SPIM_WR;
 8000900:	4b27      	ldr	r3, [pc, #156]	; (80009a0 <main+0x474>)
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	f023 0304 	bic.w	r3, r3, #4
 8000908:	b29a      	uxth	r2, r3
 800090a:	4b25      	ldr	r3, [pc, #148]	; (80009a0 <main+0x474>)
 800090c:	801a      	strh	r2, [r3, #0]
			}

			// BFLAG_I2C_RBA			Trigger default input at form
			if (aRxBuffer[0]==7)				//WRA
 800090e:	4b1e      	ldr	r3, [pc, #120]	; (8000988 <main+0x45c>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b07      	cmp	r3, #7
 8000914:	d105      	bne.n	8000922 <main+0x3f6>
			{
				Set_aTxBuffer(8, temp, 10, CFG_LENGTH*sizeof(temp[0]));
 8000916:	2328      	movs	r3, #40	; 0x28
 8000918:	220a      	movs	r2, #10
 800091a:	4925      	ldr	r1, [pc, #148]	; (80009b0 <main+0x484>)
 800091c:	2008      	movs	r0, #8
 800091e:	f000 fa7f 	bl	8000e20 <Set_aTxBuffer>
			}
			if (aRxBuffer[0]==8)
 8000922:	4b19      	ldr	r3, [pc, #100]	; (8000988 <main+0x45c>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b08      	cmp	r3, #8
 8000928:	d105      	bne.n	8000936 <main+0x40a>
			{
				Set_aTxBuffer(9, temp, 20, CFG_LENGTH*sizeof(temp[0]));
 800092a:	2328      	movs	r3, #40	; 0x28
 800092c:	2214      	movs	r2, #20
 800092e:	4920      	ldr	r1, [pc, #128]	; (80009b0 <main+0x484>)
 8000930:	2009      	movs	r0, #9
 8000932:	f000 fa75 	bl	8000e20 <Set_aTxBuffer>
			}
			if (aRxBuffer[0]==9)
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <main+0x45c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2b09      	cmp	r3, #9
 800093c:	d122      	bne.n	8000984 <main+0x458>
			{
				sendStr[0] = 0x10;
 800093e:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <main+0x478>)
 8000940:	2210      	movs	r2, #16
 8000942:	701a      	strb	r2, [r3, #0]
				sendStr[1] = 0x12;
 8000944:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <main+0x478>)
 8000946:	2212      	movs	r2, #18
 8000948:	705a      	strb	r2, [r3, #1]

				HAL_UART_Transmit(&huart2, (uint8_t *)sendStr, 2, 0xFFFF);
 800094a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800094e:	2202      	movs	r2, #2
 8000950:	4914      	ldr	r1, [pc, #80]	; (80009a4 <main+0x478>)
 8000952:	480f      	ldr	r0, [pc, #60]	; (8000990 <main+0x464>)
 8000954:	f003 fbb3 	bl	80040be <HAL_UART_Transmit>
				if(bitFlag & BFLAG_SPIM_WBA){
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <main+0x474>)
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	f003 0310 	and.w	r3, r3, #16
 8000960:	2b00      	cmp	r3, #0
 8000962:	d00f      	beq.n	8000984 <main+0x458>
					bitFlag &= ~BFLAG_SPIM_WBA;
 8000964:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <main+0x474>)
 8000966:	881b      	ldrh	r3, [r3, #0]
 8000968:	f023 0310 	bic.w	r3, r3, #16
 800096c:	b29a      	uxth	r2, r3
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <main+0x474>)
 8000970:	801a      	strh	r2, [r3, #0]
			if (aRxBuffer[0]==9)
 8000972:	e007      	b.n	8000984 <main+0x458>
			}
		}

		else
		{
			HAL_Delay(100);
 8000974:	2064      	movs	r0, #100	; 0x64
 8000976:	f000 ff59 	bl	800182c <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOB, LED2);
 800097a:	2100      	movs	r1, #0
 800097c:	480d      	ldr	r0, [pc, #52]	; (80009b4 <main+0x488>)
 800097e:	f001 fe3a 	bl	80025f6 <HAL_GPIO_TogglePin>
 8000982:	e5e5      	b.n	8000550 <main+0x24>
			if (aRxBuffer[0]==9)
 8000984:	bf00      	nop
		if (bitFlag & BFLAG_UART_RCV)		// UART Processing
 8000986:	e5e3      	b.n	8000550 <main+0x24>
 8000988:	2000061c 	.word	0x2000061c
 800098c:	08005f8c 	.word	0x08005f8c
 8000990:	200001d4 	.word	0x200001d4
 8000994:	08005f9c 	.word	0x08005f9c
 8000998:	20000000 	.word	0x20000000
 800099c:	08005fac 	.word	0x08005fac
 80009a0:	200008c0 	.word	0x200008c0
 80009a4:	20000648 	.word	0x20000648
 80009a8:	20000620 	.word	0x20000620
 80009ac:	2000064a 	.word	0x2000064a
 80009b0:	20000848 	.word	0x20000848
 80009b4:	40020400 	.word	0x40020400

080009b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b094      	sub	sp, #80	; 0x50
 80009bc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	2234      	movs	r2, #52	; 0x34
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f004 fda8 	bl	800551c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009cc:	f107 0308 	add.w	r3, r7, #8
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]

	__HAL_RCC_PWR_CLK_ENABLE();
 80009dc:	2300      	movs	r3, #0
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	4b2a      	ldr	r3, [pc, #168]	; (8000a8c <SystemClock_Config+0xd4>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	4a29      	ldr	r2, [pc, #164]	; (8000a8c <SystemClock_Config+0xd4>)
 80009e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ea:	6413      	str	r3, [r2, #64]	; 0x40
 80009ec:	4b27      	ldr	r3, [pc, #156]	; (8000a8c <SystemClock_Config+0xd4>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009f8:	2300      	movs	r3, #0
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	4b24      	ldr	r3, [pc, #144]	; (8000a90 <SystemClock_Config+0xd8>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a04:	4a22      	ldr	r2, [pc, #136]	; (8000a90 <SystemClock_Config+0xd8>)
 8000a06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0a:	6013      	str	r3, [r2, #0]
 8000a0c:	4b20      	ldr	r3, [pc, #128]	; (8000a90 <SystemClock_Config+0xd8>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a14:	603b      	str	r3, [r7, #0]
 8000a16:	683b      	ldr	r3, [r7, #0]

	RCC_OscInitStruct.OscillatorType 		= RCC_OSCILLATORTYPE_HSI;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState 				= RCC_HSI_ON;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue 	= RCC_HSICALIBRATION_DEFAULT;
 8000a20:	2310      	movs	r3, #16
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState 			= RCC_PLL_ON;
 8000a24:	2302      	movs	r3, #2
 8000a26:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource 		= RCC_PLLSOURCE_HSI;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM 				= 16;
 8000a2c:	2310      	movs	r3, #16
 8000a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN 				= 336;
 8000a30:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a34:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP 				= RCC_PLLP_DIV4;
 8000a36:	2304      	movs	r3, #4
 8000a38:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ 				= 2;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR 				= 2;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4618      	mov	r0, r3
 8000a48:	f002 f952 	bl	8002cf0 <HAL_RCC_OscConfig>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8000a52:	f000 facd 	bl	8000ff0 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType 		= RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a56:	230f      	movs	r3, #15
 8000a58:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource 		= RCC_SYSCLKSOURCE_PLLCLK;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider 	= RCC_SYSCLK_DIV1;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider 	= RCC_HCLK_DIV2;
 8000a62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a66:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider 	= RCC_HCLK_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a6c:	f107 0308 	add.w	r3, r7, #8
 8000a70:	2102      	movs	r1, #2
 8000a72:	4618      	mov	r0, r3
 8000a74:	f001 fdf2 	bl	800265c <HAL_RCC_ClockConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0xca>
	{
		Error_Handler();
 8000a7e:	f000 fab7 	bl	8000ff0 <Error_Handler>
	}
}
 8000a82:	bf00      	nop
 8000a84:	3750      	adds	r7, #80	; 0x50
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40007000 	.word	0x40007000

08000a94 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
	hspi2.Instance 					= SPI2;
 8000a98:	4b18      	ldr	r3, [pc, #96]	; (8000afc <MX_SPI2_Init+0x68>)
 8000a9a:	4a19      	ldr	r2, [pc, #100]	; (8000b00 <MX_SPI2_Init+0x6c>)
 8000a9c:	601a      	str	r2, [r3, #0]
	hspi2.Init.BaudRatePrescaler 	= SPI_BAUDRATEPRESCALER_128;
 8000a9e:	4b17      	ldr	r3, [pc, #92]	; (8000afc <MX_SPI2_Init+0x68>)
 8000aa0:	2230      	movs	r2, #48	; 0x30
 8000aa2:	61da      	str	r2, [r3, #28]
	hspi2.Init.Direction 			= SPI_DIRECTION_2LINES;
 8000aa4:	4b15      	ldr	r3, [pc, #84]	; (8000afc <MX_SPI2_Init+0x68>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
	hspi2.Init.CLKPhase 			= SPI_PHASE_1EDGE;
 8000aaa:	4b14      	ldr	r3, [pc, #80]	; (8000afc <MX_SPI2_Init+0x68>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	615a      	str	r2, [r3, #20]
	hspi2.Init.CLKPolarity 			= SPI_POLARITY_LOW;
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <MX_SPI2_Init+0x68>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]
	hspi2.Init.DataSize 			= SPI_DATASIZE_16BIT;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_SPI2_Init+0x68>)
 8000ab8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000abc:	60da      	str	r2, [r3, #12]
	hspi2.Init.FirstBit 			= SPI_FIRSTBIT_MSB;
 8000abe:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <MX_SPI2_Init+0x68>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode 				= SPI_TIMODE_DISABLE;
 8000ac4:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <MX_SPI2_Init+0x68>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation 		= SPI_CRCCALCULATION_DISABLE;
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_SPI2_Init+0x68>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial 		= 10;
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <MX_SPI2_Init+0x68>)
 8000ad2:	220a      	movs	r2, #10
 8000ad4:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.NSS 					= SPI_NSS_SOFT;
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_SPI2_Init+0x68>)
 8000ad8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000adc:	619a      	str	r2, [r3, #24]
  	#ifdef MASTER_BOARD
	hspi2.Init.Mode 				= SPI_MODE_MASTER;
 8000ade:	4b07      	ldr	r3, [pc, #28]	; (8000afc <MX_SPI2_Init+0x68>)
 8000ae0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ae4:	605a      	str	r2, [r3, #4]
  	#else
	hspi2.Init.Mode 				= SPI_MODE_SLAVE;
  	#endif

	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_SPI2_Init+0x68>)
 8000ae8:	f002 fba0 	bl	800322c <HAL_SPI_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_SPI2_Init+0x62>
	{
		Error_Handler();
 8000af2:	f000 fa7d 	bl	8000ff0 <Error_Handler>
	}
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	2000011c 	.word	0x2000011c
 8000b00:	40003800 	.word	0x40003800

08000b04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	huart2.Instance 		 = USART2;
 8000b08:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b0a:	4a15      	ldr	r2, [pc, #84]	; (8000b60 <MX_USART2_UART_Init+0x5c>)
 8000b0c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate 	 = 115200;
 8000b0e:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b14:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength 	 = UART_WORDLENGTH_8B;
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits 	 = UART_STOPBITS_1;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity 		 = UART_PARITY_NONE;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode 		 = UART_MODE_TX_RX;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl 	 = UART_HWCONTROL_NONE;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b3a:	4808      	ldr	r0, [pc, #32]	; (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b3c:	f003 fa72 	bl	8004024 <HAL_UART_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8000b46:	f000 fa53 	bl	8000ff0 <Error_Handler>
	}

	#ifdef RX_EVENT_CB
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, u8arr_eventBuff, UART_BUF_SZ);
 8000b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b4e:	4905      	ldr	r1, [pc, #20]	; (8000b64 <MX_USART2_UART_Init+0x60>)
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b52:	f003 fb46 	bl	80041e2 <HAL_UARTEx_ReceiveToIdle_DMA>
  	#else
	serial_init();
  	#endif
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200001d4 	.word	0x200001d4
 8000b60:	40004400 	.word	0x40004400
 8000b64:	20000218 	.word	0x20000218

08000b68 <MX_DMA_Init>:

static void MX_DMA_Init(void) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <MX_DMA_Init+0x3c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a0b      	ldr	r2, [pc, #44]	; (8000ba4 <MX_DMA_Init+0x3c>)
 8000b78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_DMA_Init+0x3c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2010      	movs	r0, #16
 8000b90:	f000 ff4b 	bl	8001a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000b94:	2010      	movs	r0, #16
 8000b96:	f000 ff64 	bl	8001a62 <HAL_NVIC_EnableIRQ>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40023800 	.word	0x40023800

08000ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	; 0x28
 8000bac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	4b31      	ldr	r3, [pc, #196]	; (8000c88 <MX_GPIO_Init+0xe0>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a30      	ldr	r2, [pc, #192]	; (8000c88 <MX_GPIO_Init+0xe0>)
 8000bc8:	f043 0304 	orr.w	r3, r3, #4
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b2e      	ldr	r3, [pc, #184]	; (8000c88 <MX_GPIO_Init+0xe0>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0304 	and.w	r3, r3, #4
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	4b2a      	ldr	r3, [pc, #168]	; (8000c88 <MX_GPIO_Init+0xe0>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a29      	ldr	r2, [pc, #164]	; (8000c88 <MX_GPIO_Init+0xe0>)
 8000be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b27      	ldr	r3, [pc, #156]	; (8000c88 <MX_GPIO_Init+0xe0>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	4b23      	ldr	r3, [pc, #140]	; (8000c88 <MX_GPIO_Init+0xe0>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a22      	ldr	r2, [pc, #136]	; (8000c88 <MX_GPIO_Init+0xe0>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b20      	ldr	r3, [pc, #128]	; (8000c88 <MX_GPIO_Init+0xe0>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <MX_GPIO_Init+0xe0>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a1b      	ldr	r2, [pc, #108]	; (8000c88 <MX_GPIO_Init+0xe0>)
 8000c1c:	f043 0302 	orr.w	r3, r3, #2
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <MX_GPIO_Init+0xe0>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0302 	and.w	r3, r3, #2
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]

	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2120      	movs	r1, #32
 8000c32:	4816      	ldr	r0, [pc, #88]	; (8000c8c <MX_GPIO_Init+0xe4>)
 8000c34:	f001 fcc6 	bl	80025c4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : Blue_Btn_Pin */
	GPIO_InitStruct.Pin 	= Blue_Btn_Pin;
 8000c38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c3c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode 	= GPIO_MODE_IT_FALLING;
 8000c3e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c42:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Blue_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4810      	ldr	r0, [pc, #64]	; (8000c90 <MX_GPIO_Init+0xe8>)
 8000c50:	f001 fb24 	bl	800229c <HAL_GPIO_Init>

	/* Enable and set EXTI lines 15 to 10 Interrupt */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2101      	movs	r1, #1
 8000c58:	2028      	movs	r0, #40	; 0x28
 8000c5a:	f000 fee6 	bl	8001a2a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c5e:	2028      	movs	r0, #40	; 0x28
 8000c60:	f000 feff 	bl	8001a62 <HAL_NVIC_EnableIRQ>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin 	= LD2_Pin;
 8000c64:	2320      	movs	r3, #32
 8000c66:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed	= GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4804      	ldr	r0, [pc, #16]	; (8000c8c <MX_GPIO_Init+0xe4>)
 8000c7c:	f001 fb0e 	bl	800229c <HAL_GPIO_Init>
}
 8000c80:	bf00      	nop
 8000c82:	3728      	adds	r7, #40	; 0x28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020000 	.word	0x40020000
 8000c90:	40020800 	.word	0x40020800

08000c94 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	80fb      	strh	r3, [r7, #6]
	if (((GPIO_Pin == Blue_Btn_Pin) && ((bitFlag & BFLAG_BTN) == 0)))
 8000c9e:	88fb      	ldrh	r3, [r7, #6]
 8000ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ca4:	d10c      	bne.n	8000cc0 <HAL_GPIO_EXTI_Callback+0x2c>
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <HAL_GPIO_EXTI_Callback+0x38>)
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	f003 0320 	and.w	r3, r3, #32
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d106      	bne.n	8000cc0 <HAL_GPIO_EXTI_Callback+0x2c>
	{
		bitFlag |= BFLAG_BTN;
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_GPIO_EXTI_Callback+0x38>)
 8000cb4:	881b      	ldrh	r3, [r3, #0]
 8000cb6:	f043 0320 	orr.w	r3, r3, #32
 8000cba:	b29a      	uxth	r2, r3
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <HAL_GPIO_EXTI_Callback+0x38>)
 8000cbe:	801a      	strh	r2, [r3, #0]
	}
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	200008c0 	.word	0x200008c0

08000cd0 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <HAL_SPI_TxCpltCallback>:


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	spi2F = 1;
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <HAL_SPI_TxCpltCallback+0x1c>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	701a      	strb	r2, [r3, #0]
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	200008c2 	.word	0x200008c2

08000d04 <HAL_SPI_RxCpltCallback>:


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	spi2F = 1;
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <HAL_SPI_RxCpltCallback+0x1c>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	701a      	strb	r2, [r3, #0]
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	200008c2 	.word	0x200008c2

08000d24 <HAL_SPI_ErrorCallback>:

/* @brief  I2C error callbacks
   @param  I2cHandle: I2C handle */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi2){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	printf("\r\nSPI ERROR \r\n\n");
 8000d2c:	4805      	ldr	r0, [pc, #20]	; (8000d44 <HAL_SPI_ErrorCallback+0x20>)
 8000d2e:	f004 fc6b 	bl	8005608 <puts>
	while(1) {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000d32:	2120      	movs	r1, #32
 8000d34:	4804      	ldr	r0, [pc, #16]	; (8000d48 <HAL_SPI_ErrorCallback+0x24>)
 8000d36:	f001 fc5e 	bl	80025f6 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000d3a:	2064      	movs	r0, #100	; 0x64
 8000d3c:	f000 fd76 	bl	800182c <HAL_Delay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000d40:	e7f7      	b.n	8000d32 <HAL_SPI_ErrorCallback+0xe>
 8000d42:	bf00      	nop
 8000d44:	08005fc8 	.word	0x08005fc8
 8000d48:	40020000 	.word	0x40020000

08000d4c <Buffercmp_Byte>:
  * @param  BufferLength: buffer's length
  * @retval 0  : pBuffer1 identical to pBuffer2
  *         >0 : pBuffer1 differs from pBuffer2
  */

uint16_t Buffercmp_Byte(int32_t pBuffer1[], int32_t pBuffer2[], uint8_t length){
 8000d4c:	b5b0      	push	{r4, r5, r7, lr}
 8000d4e:	b096      	sub	sp, #88	; 0x58
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	4613      	mov	r3, r2
 8000d58:	71fb      	strb	r3, [r7, #7]
	char send[] = {0x14, 0x15,
 8000d5a:	4b2d      	ldr	r3, [pc, #180]	; (8000e10 <Buffercmp_Byte+0xc4>)
 8000d5c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000d60:	461d      	mov	r5, r3
 8000d62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d66:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d6a:	6020      	str	r0, [r4, #0]
 8000d6c:	3404      	adds	r4, #4
 8000d6e:	7021      	strb	r1, [r4, #0]
			'C','o','m','p','a','r','e',' ','p','r','o','c','e','s','s','.','.',0x0d,0x0a};
	HAL_UART_Transmit(&huart2, (uint8_t *)send, 21, 0xFFFF);
 8000d70:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000d74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d78:	2215      	movs	r2, #21
 8000d7a:	4826      	ldr	r0, [pc, #152]	; (8000e14 <Buffercmp_Byte+0xc8>)
 8000d7c:	f003 f99f 	bl	80040be <HAL_UART_Transmit>
	for (uint8_t i = 0; i < length; i++){
 8000d80:	2300      	movs	r3, #0
 8000d82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000d86:	e029      	b.n	8000ddc <Buffercmp_Byte+0x90>
		if (pBuffer1[i]!=pBuffer2[i]){
 8000d88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	4413      	add	r3, r2
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	68b9      	ldr	r1, [r7, #8]
 8000d9c:	440b      	add	r3, r1
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d016      	beq.n	8000dd2 <Buffercmp_Byte+0x86>
			char comp[] = {0x14, 0x15,
 8000da4:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <Buffercmp_Byte+0xcc>)
 8000da6:	f107 0414 	add.w	r4, r7, #20
 8000daa:	461d      	mov	r5, r3
 8000dac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000db0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000db4:	6020      	str	r0, [r4, #0]
 8000db6:	3404      	adds	r4, #4
 8000db8:	8021      	strh	r1, [r4, #0]
					'B','u','f','f','e','r',' ','D','i','f','f','e','r','e','n','t','!','!',0x0d,0x0a};
			HAL_UART_Transmit(&huart2, (uint8_t *)comp, 22, 0xFFFF);
 8000dba:	f107 0114 	add.w	r1, r7, #20
 8000dbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dc2:	2216      	movs	r2, #22
 8000dc4:	4813      	ldr	r0, [pc, #76]	; (8000e14 <Buffercmp_Byte+0xc8>)
 8000dc6:	f003 f97a 	bl	80040be <HAL_UART_Transmit>
			return i;
 8000dca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	e01a      	b.n	8000e08 <Buffercmp_Byte+0xbc>
	for (uint8_t i = 0; i < length; i++){
 8000dd2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000ddc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d3d0      	bcc.n	8000d88 <Buffercmp_Byte+0x3c>
		}
	}

	char comp[] = {0x14, 0x15,
 8000de6:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <Buffercmp_Byte+0xd0>)
 8000de8:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000dec:	461d      	mov	r5, r3
 8000dee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000df0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000df2:	682b      	ldr	r3, [r5, #0]
 8000df4:	7023      	strb	r3, [r4, #0]
		'B','u','f','f','e','r',' ','s','a','m','e','!','!',0x0d,0x0a};
	HAL_UART_Transmit(&huart2, (uint8_t *)comp, 17, 0xFFFF);
 8000df6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000dfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dfe:	2211      	movs	r2, #17
 8000e00:	4804      	ldr	r0, [pc, #16]	; (8000e14 <Buffercmp_Byte+0xc8>)
 8000e02:	f003 f95c 	bl	80040be <HAL_UART_Transmit>
	return 0;
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3758      	adds	r7, #88	; 0x58
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e10:	08005fd8 	.word	0x08005fd8
 8000e14:	200001d4 	.word	0x200001d4
 8000e18:	08005ff0 	.word	0x08005ff0
 8000e1c:	08006008 	.word	0x08006008

08000e20 <Set_aTxBuffer>:

void Set_aTxBuffer(int16_t idx0, int32_t target[], uint16_t idx_target, uint16_t size){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	4611      	mov	r1, r2
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	81fb      	strh	r3, [r7, #14]
 8000e30:	460b      	mov	r3, r1
 8000e32:	81bb      	strh	r3, [r7, #12]
 8000e34:	4613      	mov	r3, r2
 8000e36:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i=0; i<10; i++){
 8000e38:	2300      	movs	r3, #0
 8000e3a:	75fb      	strb	r3, [r7, #23]
 8000e3c:	e008      	b.n	8000e50 <Set_aTxBuffer+0x30>
		aTxBuffer[i+1] = 0;
 8000e3e:	7dfb      	ldrb	r3, [r7, #23]
 8000e40:	3301      	adds	r3, #1
 8000e42:	4a0d      	ldr	r2, [pc, #52]	; (8000e78 <Set_aTxBuffer+0x58>)
 8000e44:	2100      	movs	r1, #0
 8000e46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint8_t i=0; i<10; i++){
 8000e4a:	7dfb      	ldrb	r3, [r7, #23]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	75fb      	strb	r3, [r7, #23]
 8000e50:	7dfb      	ldrb	r3, [r7, #23]
 8000e52:	2b09      	cmp	r3, #9
 8000e54:	d9f3      	bls.n	8000e3e <Set_aTxBuffer+0x1e>
	}
	memcpy(&aTxBuffer[1], &target[idx_target], size);
 8000e56:	89bb      	ldrh	r3, [r7, #12]
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	88fa      	ldrh	r2, [r7, #6]
 8000e60:	4619      	mov	r1, r3
 8000e62:	4806      	ldr	r0, [pc, #24]	; (8000e7c <Set_aTxBuffer+0x5c>)
 8000e64:	f004 fb4c 	bl	8005500 <memcpy>
	aTxBuffer[0]=idx0;
 8000e68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e6c:	4a02      	ldr	r2, [pc, #8]	; (8000e78 <Set_aTxBuffer+0x58>)
 8000e6e:	6013      	str	r3, [r2, #0]
}
 8000e70:	bf00      	nop
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	20000004 	.word	0x20000004

08000e80 <uartProcessing>:


void uartProcessing (uint8_t *u8p_buffer, uint16_t u16_size){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	807b      	strh	r3, [r7, #2]
	vShell_cmdParse((char*)u8p_buffer);
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f000 faf3 	bl	8001478 <vShell_cmdParse>
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <vUAFE_uart_handle>:
/*****************************************************************
 * @name 	vUAFE_uart_handle
 * @brief	handle afe uart data copy
 ****************************************************************/
static void vUAFE_uart_handle(uint16_t Size)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	80fb      	strh	r3, [r7, #6]
	uint16_t u16_numData;

	/* Check if number of received data in reception buffer has changed */
	if (Size != u16_oldPos)
 8000ea6:	4b3d      	ldr	r3, [pc, #244]	; (8000f9c <vUAFE_uart_handle+0x100>)
 8000ea8:	881b      	ldrh	r3, [r3, #0]
 8000eaa:	88fa      	ldrh	r2, [r7, #6]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d06d      	beq.n	8000f8c <vUAFE_uart_handle+0xf0>
	{
		if (Size > u16_oldPos)
 8000eb0:	4b3a      	ldr	r3, [pc, #232]	; (8000f9c <vUAFE_uart_handle+0x100>)
 8000eb2:	881b      	ldrh	r3, [r3, #0]
 8000eb4:	88fa      	ldrh	r2, [r7, #6]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d91a      	bls.n	8000ef0 <vUAFE_uart_handle+0x54>
		{
			/* Current position is higher than previous one */
			u16_numData = Size - u16_oldPos;
 8000eba:	4b38      	ldr	r3, [pc, #224]	; (8000f9c <vUAFE_uart_handle+0x100>)
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	88fa      	ldrh	r2, [r7, #6]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	81fb      	strh	r3, [r7, #14]
			memcpy(&u8arr_uartEvent[u16_lenCnt],&u8arr_eventBuff[u16_oldPos],u16_numData);
 8000ec4:	4b36      	ldr	r3, [pc, #216]	; (8000fa0 <vUAFE_uart_handle+0x104>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b36      	ldr	r3, [pc, #216]	; (8000fa4 <vUAFE_uart_handle+0x108>)
 8000ecc:	4413      	add	r3, r2
 8000ece:	4a33      	ldr	r2, [pc, #204]	; (8000f9c <vUAFE_uart_handle+0x100>)
 8000ed0:	8812      	ldrh	r2, [r2, #0]
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	4a34      	ldr	r2, [pc, #208]	; (8000fa8 <vUAFE_uart_handle+0x10c>)
 8000ed6:	4411      	add	r1, r2
 8000ed8:	89fa      	ldrh	r2, [r7, #14]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f004 fb10 	bl	8005500 <memcpy>
			u16_lenCnt += u16_numData;
 8000ee0:	4b2f      	ldr	r3, [pc, #188]	; (8000fa0 <vUAFE_uart_handle+0x104>)
 8000ee2:	881a      	ldrh	r2, [r3, #0]
 8000ee4:	89fb      	ldrh	r3, [r7, #14]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <vUAFE_uart_handle+0x104>)
 8000eec:	801a      	strh	r2, [r3, #0]
 8000eee:	e02a      	b.n	8000f46 <vUAFE_uart_handle+0xaa>
		}
		else
		{
			/* End of buffer has been reached */
			u16_numData = UART_BUF_SZ - u16_oldPos;
 8000ef0:	4b2a      	ldr	r3, [pc, #168]	; (8000f9c <vUAFE_uart_handle+0x100>)
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8000ef8:	81fb      	strh	r3, [r7, #14]

			memcpy (&u8arr_uartEvent[u16_lenCnt], 			// copy data in that remaining space
 8000efa:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <vUAFE_uart_handle+0x104>)
 8000efc:	881b      	ldrh	r3, [r3, #0]
 8000efe:	461a      	mov	r2, r3
 8000f00:	4b28      	ldr	r3, [pc, #160]	; (8000fa4 <vUAFE_uart_handle+0x108>)
 8000f02:	4413      	add	r3, r2
					&u8arr_eventBuff[u16_oldPos],
 8000f04:	4a25      	ldr	r2, [pc, #148]	; (8000f9c <vUAFE_uart_handle+0x100>)
 8000f06:	8812      	ldrh	r2, [r2, #0]
 8000f08:	4611      	mov	r1, r2
 8000f0a:	4a27      	ldr	r2, [pc, #156]	; (8000fa8 <vUAFE_uart_handle+0x10c>)
 8000f0c:	4411      	add	r1, r2
			memcpy (&u8arr_uartEvent[u16_lenCnt], 			// copy data in that remaining space
 8000f0e:	89fa      	ldrh	r2, [r7, #14]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f004 faf5 	bl	8005500 <memcpy>
					u16_numData);

			u16_lenCnt += u16_numData;
 8000f16:	4b22      	ldr	r3, [pc, #136]	; (8000fa0 <vUAFE_uart_handle+0x104>)
 8000f18:	881a      	ldrh	r2, [r3, #0]
 8000f1a:	89fb      	ldrh	r3, [r7, #14]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <vUAFE_uart_handle+0x104>)
 8000f22:	801a      	strh	r2, [r3, #0]

			memcpy (&u8arr_uartEvent[u16_lenCnt], 			// copy the remaining data
 8000f24:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <vUAFE_uart_handle+0x104>)
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <vUAFE_uart_handle+0x108>)
 8000f2c:	4413      	add	r3, r2
 8000f2e:	88fa      	ldrh	r2, [r7, #6]
 8000f30:	491d      	ldr	r1, [pc, #116]	; (8000fa8 <vUAFE_uart_handle+0x10c>)
 8000f32:	4618      	mov	r0, r3
 8000f34:	f004 fae4 	bl	8005500 <memcpy>
					&u8arr_eventBuff[0],
					Size);

			u16_lenCnt += Size;
 8000f38:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <vUAFE_uart_handle+0x104>)
 8000f3a:	881a      	ldrh	r2, [r3, #0]
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	4413      	add	r3, r2
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <vUAFE_uart_handle+0x104>)
 8000f44:	801a      	strh	r2, [r3, #0]
		}

		/* Check for ready to process */
		if(((u8arr_uartEvent[u16_lenCnt - 1] == '\n')&&(u8arr_uartEvent[u16_lenCnt - 2]== '\r')) ||
 8000f46:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <vUAFE_uart_handle+0x104>)
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	4a15      	ldr	r2, [pc, #84]	; (8000fa4 <vUAFE_uart_handle+0x108>)
 8000f4e:	5cd3      	ldrb	r3, [r2, r3]
 8000f50:	2b0a      	cmp	r3, #10
 8000f52:	d106      	bne.n	8000f62 <vUAFE_uart_handle+0xc6>
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <vUAFE_uart_handle+0x104>)
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	3b02      	subs	r3, #2
 8000f5a:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <vUAFE_uart_handle+0x108>)
 8000f5c:	5cd3      	ldrb	r3, [r2, r3]
 8000f5e:	2b0d      	cmp	r3, #13
 8000f60:	d00d      	beq.n	8000f7e <vUAFE_uart_handle+0xe2>
				((u8arr_uartEvent[u16_lenCnt - 1] == '\r')&&(u8arr_uartEvent[u16_lenCnt - 2]== '\n')))
 8000f62:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <vUAFE_uart_handle+0x104>)
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	4a0e      	ldr	r2, [pc, #56]	; (8000fa4 <vUAFE_uart_handle+0x108>)
 8000f6a:	5cd3      	ldrb	r3, [r2, r3]
		if(((u8arr_uartEvent[u16_lenCnt - 1] == '\n')&&(u8arr_uartEvent[u16_lenCnt - 2]== '\r')) ||
 8000f6c:	2b0d      	cmp	r3, #13
 8000f6e:	d10d      	bne.n	8000f8c <vUAFE_uart_handle+0xf0>
				((u8arr_uartEvent[u16_lenCnt - 1] == '\r')&&(u8arr_uartEvent[u16_lenCnt - 2]== '\n')))
 8000f70:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <vUAFE_uart_handle+0x104>)
 8000f72:	881b      	ldrh	r3, [r3, #0]
 8000f74:	3b02      	subs	r3, #2
 8000f76:	4a0b      	ldr	r2, [pc, #44]	; (8000fa4 <vUAFE_uart_handle+0x108>)
 8000f78:	5cd3      	ldrb	r3, [r2, r3]
 8000f7a:	2b0a      	cmp	r3, #10
 8000f7c:	d106      	bne.n	8000f8c <vUAFE_uart_handle+0xf0>
		{
			bitFlag |= BFLAG_UART_RCV;
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <vUAFE_uart_handle+0x110>)
 8000f80:	881b      	ldrh	r3, [r3, #0]
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <vUAFE_uart_handle+0x110>)
 8000f8a:	801a      	strh	r2, [r3, #0]
		}

	}

	u16_oldPos = Size;
 8000f8c:	4a03      	ldr	r2, [pc, #12]	; (8000f9c <vUAFE_uart_handle+0x100>)
 8000f8e:	88fb      	ldrh	r3, [r7, #6]
 8000f90:	8013      	strh	r3, [r2, #0]
}
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000618 	.word	0x20000618
 8000fa0:	2000061a 	.word	0x2000061a
 8000fa4:	20000418 	.word	0x20000418
 8000fa8:	20000218 	.word	0x20000218
 8000fac:	200008c0 	.word	0x200008c0

08000fb0 <HAL_UARTEx_RxEventCallback>:
/*****************************************************************
 * @name HAL_UARTEx_RxEventCallback
 * @brief
 ****************************************************************/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	807b      	strh	r3, [r7, #2]
	#ifdef RX_EVENT_CB
	if (huart->Instance == USART2)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a08      	ldr	r2, [pc, #32]	; (8000fe4 <HAL_UARTEx_RxEventCallback+0x34>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d109      	bne.n	8000fda <HAL_UARTEx_RxEventCallback+0x2a>
	{
		vUAFE_uart_handle(Size);
 8000fc6:	887b      	ldrh	r3, [r7, #2]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff67 	bl	8000e9c <vUAFE_uart_handle>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, u8arr_eventBuff, UART_BUF_SZ);
 8000fce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fd2:	4905      	ldr	r1, [pc, #20]	; (8000fe8 <HAL_UARTEx_RxEventCallback+0x38>)
 8000fd4:	4805      	ldr	r0, [pc, #20]	; (8000fec <HAL_UARTEx_RxEventCallback+0x3c>)
 8000fd6:	f003 f904 	bl	80041e2 <HAL_UARTEx_ReceiveToIdle_DMA>
	}
	#endif
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40004400 	.word	0x40004400
 8000fe8:	20000218 	.word	0x20000218
 8000fec:	200001d4 	.word	0x200001d4

08000ff0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	printf("error handler\r\n");
 8000ff4:	4806      	ldr	r0, [pc, #24]	; (8001010 <Error_Handler+0x20>)
 8000ff6:	f004 fb07 	bl	8005608 <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ffa:	b672      	cpsid	i
}
 8000ffc:	bf00      	nop
	__disable_irq();
	while (1)
	{
		HAL_GPIO_TogglePin(GPIOB, LED2);
 8000ffe:	2100      	movs	r1, #0
 8001000:	4804      	ldr	r0, [pc, #16]	; (8001014 <Error_Handler+0x24>)
 8001002:	f001 faf8 	bl	80025f6 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8001006:	2064      	movs	r0, #100	; 0x64
 8001008:	f000 fc10 	bl	800182c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, LED2);
 800100c:	e7f7      	b.n	8000ffe <Error_Handler+0xe>
 800100e:	bf00      	nop
 8001010:	0800601c 	.word	0x0800601c
 8001014:	40020400 	.word	0x40020400

08001018 <HAL_MspInit>:
#include "main.h"

extern DMA_HandleTypeDef hdma_usart2_rx;

void HAL_MspInit(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <HAL_MspInit+0x4c>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	4a0f      	ldr	r2, [pc, #60]	; (8001064 <HAL_MspInit+0x4c>)
 8001028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102c:	6453      	str	r3, [r2, #68]	; 0x44
 800102e:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <HAL_MspInit+0x4c>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	603b      	str	r3, [r7, #0]
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <HAL_MspInit+0x4c>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	4a08      	ldr	r2, [pc, #32]	; (8001064 <HAL_MspInit+0x4c>)
 8001044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001048:	6413      	str	r3, [r2, #64]	; 0x40
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_MspInit+0x4c>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	683b      	ldr	r3, [r7, #0]

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001056:	2007      	movs	r0, #7
 8001058:	f000 fcdc 	bl	8001a14 <HAL_NVIC_SetPriorityGrouping>
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40023800 	.word	0x40023800

08001068 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
	if(hspi->Instance==SPI2)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a34      	ldr	r2, [pc, #208]	; (8001158 <HAL_SPI_MspInit+0xf0>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d162      	bne.n	8001150 <HAL_SPI_MspInit+0xe8>
	{
		/* Peripheral clock enable */
		__HAL_RCC_SPI2_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	4b33      	ldr	r3, [pc, #204]	; (800115c <HAL_SPI_MspInit+0xf4>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	4a32      	ldr	r2, [pc, #200]	; (800115c <HAL_SPI_MspInit+0xf4>)
 8001094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001098:	6413      	str	r3, [r2, #64]	; 0x40
 800109a:	4b30      	ldr	r3, [pc, #192]	; (800115c <HAL_SPI_MspInit+0xf4>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOC_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	4b2c      	ldr	r3, [pc, #176]	; (800115c <HAL_SPI_MspInit+0xf4>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a2b      	ldr	r2, [pc, #172]	; (800115c <HAL_SPI_MspInit+0xf4>)
 80010b0:	f043 0304 	orr.w	r3, r3, #4
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b29      	ldr	r3, [pc, #164]	; (800115c <HAL_SPI_MspInit+0xf4>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0304 	and.w	r3, r3, #4
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	4b25      	ldr	r3, [pc, #148]	; (800115c <HAL_SPI_MspInit+0xf4>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a24      	ldr	r2, [pc, #144]	; (800115c <HAL_SPI_MspInit+0xf4>)
 80010cc:	f043 0302 	orr.w	r3, r3, #2
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b22      	ldr	r3, [pc, #136]	; (800115c <HAL_SPI_MspInit+0xf4>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]

		GPIO_InitStruct.Pin 		= SPI2_MOSI_PIN;
 80010de:	2302      	movs	r3, #2
 80010e0:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull 		= GPIO_PULLDOWN;
 80010e6:	2302      	movs	r3, #2
 80010e8:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 80010ea:	2303      	movs	r3, #3
 80010ec:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate 	= SPI2_MOSI_AF;
 80010ee:	2307      	movs	r3, #7
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(SPI2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	4819      	ldr	r0, [pc, #100]	; (8001160 <HAL_SPI_MspInit+0xf8>)
 80010fa:	f001 f8cf 	bl	800229c <HAL_GPIO_Init>

		GPIO_InitStruct.Pin 		= SPI2_MISO_PIN; //GPIO_PIN_2;
 80010fe:	2304      	movs	r3, #4
 8001100:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull 		= GPIO_PULLDOWN;
 8001106:	2302      	movs	r3, #2
 8001108:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 800110a:	2303      	movs	r3, #3
 800110c:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate 	= SPI2_MISO_AF;
 800110e:	2305      	movs	r3, #5
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(SPI2_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4619      	mov	r1, r3
 8001118:	4811      	ldr	r0, [pc, #68]	; (8001160 <HAL_SPI_MspInit+0xf8>)
 800111a:	f001 f8bf 	bl	800229c <HAL_GPIO_Init>

		GPIO_InitStruct.Pin 		= SPI2_SCK_PIN;
 800111e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001122:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull 		= GPIO_PULLDOWN;
 8001128:	2302      	movs	r3, #2
 800112a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 800112c:	2303      	movs	r3, #3
 800112e:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate 	= SPI2_SCK_AF;
 8001130:	2305      	movs	r3, #5
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(SPI2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	4619      	mov	r1, r3
 800113a:	480a      	ldr	r0, [pc, #40]	; (8001164 <HAL_SPI_MspInit+0xfc>)
 800113c:	f001 f8ae 	bl	800229c <HAL_GPIO_Init>

		/* SPI2 interrupt Init */
		HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	2102      	movs	r1, #2
 8001144:	2024      	movs	r0, #36	; 0x24
 8001146:	f000 fc70 	bl	8001a2a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800114a:	2024      	movs	r0, #36	; 0x24
 800114c:	f000 fc89 	bl	8001a62 <HAL_NVIC_EnableIRQ>
	}
}
 8001150:	bf00      	nop
 8001152:	3728      	adds	r7, #40	; 0x28
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40003800 	.word	0x40003800
 800115c:	40023800 	.word	0x40023800
 8001160:	40020800 	.word	0x40020800
 8001164:	40020400 	.word	0x40020400

08001168 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
	if(huart->Instance==USART2)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a34      	ldr	r2, [pc, #208]	; (8001258 <HAL_UART_MspInit+0xf0>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d162      	bne.n	8001250 <HAL_UART_MspInit+0xe8>
	{
		/* Peripheral clock enable */
		__HAL_RCC_USART2_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	4b33      	ldr	r3, [pc, #204]	; (800125c <HAL_UART_MspInit+0xf4>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	4a32      	ldr	r2, [pc, #200]	; (800125c <HAL_UART_MspInit+0xf4>)
 8001194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001198:	6413      	str	r3, [r2, #64]	; 0x40
 800119a:	4b30      	ldr	r3, [pc, #192]	; (800125c <HAL_UART_MspInit+0xf4>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	4b2c      	ldr	r3, [pc, #176]	; (800125c <HAL_UART_MspInit+0xf4>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a2b      	ldr	r2, [pc, #172]	; (800125c <HAL_UART_MspInit+0xf4>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b29      	ldr	r3, [pc, #164]	; (800125c <HAL_UART_MspInit+0xf4>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
		/**USART2 GPIO Configuration
    	PA2     ------> USART2_TX
    	PA3     ------> USART2_RX
		 */
		GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011c2:	230c      	movs	r3, #12
 80011c4:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ce:	2303      	movs	r3, #3
 80011d0:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011d2:	2307      	movs	r3, #7
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	4820      	ldr	r0, [pc, #128]	; (8001260 <HAL_UART_MspInit+0xf8>)
 80011de:	f001 f85d 	bl	800229c <HAL_GPIO_Init>

	    /* USART2 DMA Init */
	    /* USART2_RX Init */
	    hdma_usart2_rx.Instance 				= DMA1_Stream5;
 80011e2:	4b20      	ldr	r3, [pc, #128]	; (8001264 <HAL_UART_MspInit+0xfc>)
 80011e4:	4a20      	ldr	r2, [pc, #128]	; (8001268 <HAL_UART_MspInit+0x100>)
 80011e6:	601a      	str	r2, [r3, #0]
	    hdma_usart2_rx.Init.Channel 			= DMA_CHANNEL_4;
 80011e8:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <HAL_UART_MspInit+0xfc>)
 80011ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011ee:	605a      	str	r2, [r3, #4]
	    hdma_usart2_rx.Init.Direction 			= DMA_PERIPH_TO_MEMORY;
 80011f0:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <HAL_UART_MspInit+0xfc>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
	    hdma_usart2_rx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 80011f6:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <HAL_UART_MspInit+0xfc>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	60da      	str	r2, [r3, #12]
	    hdma_usart2_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <HAL_UART_MspInit+0xfc>)
 80011fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001202:	611a      	str	r2, [r3, #16]
	    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001204:	4b17      	ldr	r3, [pc, #92]	; (8001264 <HAL_UART_MspInit+0xfc>)
 8001206:	2200      	movs	r2, #0
 8001208:	615a      	str	r2, [r3, #20]
	    hdma_usart2_rx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 800120a:	4b16      	ldr	r3, [pc, #88]	; (8001264 <HAL_UART_MspInit+0xfc>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]
	    hdma_usart2_rx.Init.Mode 				= DMA_CIRCULAR;
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <HAL_UART_MspInit+0xfc>)
 8001212:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001216:	61da      	str	r2, [r3, #28]
	    hdma_usart2_rx.Init.Priority 			= DMA_PRIORITY_LOW;
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_UART_MspInit+0xfc>)
 800121a:	2200      	movs	r2, #0
 800121c:	621a      	str	r2, [r3, #32]
	    hdma_usart2_rx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <HAL_UART_MspInit+0xfc>)
 8001220:	2200      	movs	r2, #0
 8001222:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001224:	480f      	ldr	r0, [pc, #60]	; (8001264 <HAL_UART_MspInit+0xfc>)
 8001226:	f000 fc37 	bl	8001a98 <HAL_DMA_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <HAL_UART_MspInit+0xcc>
	    {
	      Error_Handler();
 8001230:	f7ff fede 	bl	8000ff0 <Error_Handler>
	    }

	    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a0b      	ldr	r2, [pc, #44]	; (8001264 <HAL_UART_MspInit+0xfc>)
 8001238:	639a      	str	r2, [r3, #56]	; 0x38
 800123a:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <HAL_UART_MspInit+0xfc>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6393      	str	r3, [r2, #56]	; 0x38

	    /* USART2 interrupt Init */
	    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001240:	2200      	movs	r2, #0
 8001242:	2105      	movs	r1, #5
 8001244:	2026      	movs	r0, #38	; 0x26
 8001246:	f000 fbf0 	bl	8001a2a <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800124a:	2026      	movs	r0, #38	; 0x26
 800124c:	f000 fc09 	bl	8001a62 <HAL_NVIC_EnableIRQ>
	}

}
 8001250:	bf00      	nop
 8001252:	3728      	adds	r7, #40	; 0x28
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40004400 	.word	0x40004400
 800125c:	40023800 	.word	0x40023800
 8001260:	40020000 	.word	0x40020000
 8001264:	20000174 	.word	0x20000174
 8001268:	40026088 	.word	0x40026088

0800126c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
	while (1)
 8001270:	e7fe      	b.n	8001270 <NMI_Handler+0x4>

08001272 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
	while (1)
 8001276:	e7fe      	b.n	8001276 <HardFault_Handler+0x4>

08001278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
	while (1)
 800127c:	e7fe      	b.n	800127c <MemManage_Handler+0x4>

0800127e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
	while (1)
 8001282:	e7fe      	b.n	8001282 <BusFault_Handler+0x4>

08001284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
	while (1)
 8001288:	e7fe      	b.n	8001288 <UsageFault_Handler+0x4>

0800128a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80012b8:	f000 fa98 	bl	80017ec <HAL_IncTick>
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}

080012c0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi2);
 80012c4:	4802      	ldr	r0, [pc, #8]	; (80012d0 <SPI2_IRQHandler+0x10>)
 80012c6:	f002 f9f7 	bl	80036b8 <HAL_SPI_IRQHandler>
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000011c 	.word	0x2000011c

080012d4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80012d8:	4802      	ldr	r0, [pc, #8]	; (80012e4 <DMA1_Stream5_IRQHandler+0x10>)
 80012da:	f000 fd75 	bl	8001dc8 <HAL_DMA_IRQHandler>
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000174 	.word	0x20000174

080012e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <USART2_IRQHandler+0x10>)
 80012ee:	f002 ffdd 	bl	80042ac <HAL_UART_IRQHandler>
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200001d4 	.word	0x200001d4

080012fc <EXTI15_10_IRQHandler>:
  * @brief  This function handles external lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  *****************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 8001300:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001304:	f001 f992 	bl	800262c <HAL_GPIO_EXTI_IRQHandler>
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}

0800130c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	e00a      	b.n	8001334 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800131e:	f3af 8000 	nop.w
 8001322:	4601      	mov	r1, r0
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	1c5a      	adds	r2, r3, #1
 8001328:	60ba      	str	r2, [r7, #8]
 800132a:	b2ca      	uxtb	r2, r1
 800132c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	3301      	adds	r3, #1
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	697a      	ldr	r2, [r7, #20]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	429a      	cmp	r2, r3
 800133a:	dbf0      	blt.n	800131e <_read+0x12>
  }

  return len;
 800133c:	687b      	ldr	r3, [r7, #4]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b086      	sub	sp, #24
 800134a:	af00      	add	r7, sp, #0
 800134c:	60f8      	str	r0, [r7, #12]
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	e009      	b.n	800136c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	1c5a      	adds	r2, r3, #1
 800135c:	60ba      	str	r2, [r7, #8]
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f8d1 	bl	8000508 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	3301      	adds	r3, #1
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	429a      	cmp	r2, r3
 8001372:	dbf1      	blt.n	8001358 <_write+0x12>
  }
  return len;
 8001374:	687b      	ldr	r3, [r7, #4]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <_close>:

int _close(int file)
{
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001386:	f04f 33ff 	mov.w	r3, #4294967295
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013a6:	605a      	str	r2, [r3, #4]
  return 0;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <_isatty>:

int _isatty(int file)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013be:	2301      	movs	r3, #1
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
	...

080013e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f0:	4a14      	ldr	r2, [pc, #80]	; (8001444 <_sbrk+0x5c>)
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <_sbrk+0x60>)
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013fc:	4b13      	ldr	r3, [pc, #76]	; (800144c <_sbrk+0x64>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d102      	bne.n	800140a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <_sbrk+0x64>)
 8001406:	4a12      	ldr	r2, [pc, #72]	; (8001450 <_sbrk+0x68>)
 8001408:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <_sbrk+0x64>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	429a      	cmp	r2, r3
 8001416:	d207      	bcs.n	8001428 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001418:	f004 f838 	bl	800548c <__errno>
 800141c:	4603      	mov	r3, r0
 800141e:	220c      	movs	r2, #12
 8001420:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	e009      	b.n	800143c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <_sbrk+0x64>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800142e:	4b07      	ldr	r3, [pc, #28]	; (800144c <_sbrk+0x64>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4413      	add	r3, r2
 8001436:	4a05      	ldr	r2, [pc, #20]	; (800144c <_sbrk+0x64>)
 8001438:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800143a:	68fb      	ldr	r3, [r7, #12]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20020000 	.word	0x20020000
 8001448:	00000400 	.word	0x00000400
 800144c:	200008c4 	.word	0x200008c4
 8001450:	200008e0 	.word	0x200008e0

08001454 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <SystemInit+0x20>)
 800145a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800145e:	4a05      	ldr	r2, [pc, #20]	; (8001474 <SystemInit+0x20>)
 8001460:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001464:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <vShell_cmdParse>:

/* Public functions definitions */
/********************************************************
 * 	Parsing incoming message						   	*
 ********************************************************/
void vShell_cmdParse(char *input) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	for(uint8_t u8_idx = 0; u8_idx < CFG_HEADER_NUM; u8_idx++) {
 8001480:	2300      	movs	r3, #0
 8001482:	77fb      	strb	r3, [r7, #31]
 8001484:	e124      	b.n	80016d0 <vShell_cmdParse+0x258>
		if(!memcmp(input,(char*)&str_cfg_header[u8_idx][0], CFG_HEADER_LEN)) {
 8001486:	7ffa      	ldrb	r2, [r7, #31]
 8001488:	4613      	mov	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	4a95      	ldr	r2, [pc, #596]	; (80016e4 <vShell_cmdParse+0x26c>)
 8001490:	4413      	add	r3, r2
 8001492:	2205      	movs	r2, #5
 8001494:	4619      	mov	r1, r3
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f004 f822 	bl	80054e0 <memcmp>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f040 8113 	bne.w	80016ca <vShell_cmdParse+0x252>

			if (u8_idx==1) {
 80014a4:	7ffb      	ldrb	r3, [r7, #31]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d107      	bne.n	80014ba <vShell_cmdParse+0x42>
				bitFlag |= BFLAG_SPIM_RBA;
 80014aa:	4b8f      	ldr	r3, [pc, #572]	; (80016e8 <vShell_cmdParse+0x270>)
 80014ac:	881b      	ldrh	r3, [r3, #0]
 80014ae:	f043 0308 	orr.w	r3, r3, #8
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	4b8c      	ldr	r3, [pc, #560]	; (80016e8 <vShell_cmdParse+0x270>)
 80014b6:	801a      	strh	r2, [r3, #0]
 80014b8:	e107      	b.n	80016ca <vShell_cmdParse+0x252>
			}

			else if (u8_idx>=2 && u8_idx<=4) {					//{WB1: {WB2: WB3:
 80014ba:	7ffb      	ldrb	r3, [r7, #31]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d974      	bls.n	80015aa <vShell_cmdParse+0x132>
 80014c0:	7ffb      	ldrb	r3, [r7, #31]
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	d871      	bhi.n	80015aa <vShell_cmdParse+0x132>
				bitFlag |= BFLAG_SPIM_WR;
 80014c6:	4b88      	ldr	r3, [pc, #544]	; (80016e8 <vShell_cmdParse+0x270>)
 80014c8:	881b      	ldrh	r3, [r3, #0]
 80014ca:	f043 0304 	orr.w	r3, r3, #4
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	4b85      	ldr	r3, [pc, #532]	; (80016e8 <vShell_cmdParse+0x270>)
 80014d2:	801a      	strh	r2, [r3, #0]
				uint32_t num = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61bb      	str	r3, [r7, #24]
				uint8_t start = 5;
 80014d8:	2305      	movs	r3, #5
 80014da:	75fb      	strb	r3, [r7, #23]

				for (uint8_t j = 0; j<CFG_LENGTH; j++)
 80014dc:	2300      	movs	r3, #0
 80014de:	75bb      	strb	r3, [r7, #22]
 80014e0:	e04a      	b.n	8001578 <vShell_cmdParse+0x100>
				{
					if(input[start+3]<128)
 80014e2:	7dfb      	ldrb	r3, [r7, #23]
 80014e4:	3303      	adds	r3, #3
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	b25b      	sxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	db1b      	blt.n	800152a <vShell_cmdParse+0xb2>
					{
						num = input[start]+(input[start+1]*256)+(input[start+2]*65536)+(input[start+3]*16777216);
 80014f2:	7dfb      	ldrb	r3, [r7, #23]
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	4413      	add	r3, r2
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	4619      	mov	r1, r3
 80014fc:	7dfb      	ldrb	r3, [r7, #23]
 80014fe:	3301      	adds	r3, #1
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	4413      	add	r3, r2
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	18ca      	adds	r2, r1, r3
 800150a:	7dfb      	ldrb	r3, [r7, #23]
 800150c:	3302      	adds	r3, #2
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	440b      	add	r3, r1
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	041b      	lsls	r3, r3, #16
 8001516:	441a      	add	r2, r3
 8001518:	7dfb      	ldrb	r3, [r7, #23]
 800151a:	3303      	adds	r3, #3
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	440b      	add	r3, r1
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	061b      	lsls	r3, r3, #24
 8001524:	4413      	add	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
 8001528:	e01a      	b.n	8001560 <vShell_cmdParse+0xe8>
					}
					else
					{
						num = (input[start]+(input[start+1]*256)+(input[start+2]*65536)+(input[start+3]*16777216))-4294967296;
 800152a:	7dfb      	ldrb	r3, [r7, #23]
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	4413      	add	r3, r2
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	4619      	mov	r1, r3
 8001534:	7dfb      	ldrb	r3, [r7, #23]
 8001536:	3301      	adds	r3, #1
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	4413      	add	r3, r2
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	021b      	lsls	r3, r3, #8
 8001540:	18ca      	adds	r2, r1, r3
 8001542:	7dfb      	ldrb	r3, [r7, #23]
 8001544:	3302      	adds	r3, #2
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	440b      	add	r3, r1
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	041b      	lsls	r3, r3, #16
 800154e:	441a      	add	r2, r3
 8001550:	7dfb      	ldrb	r3, [r7, #23]
 8001552:	3303      	adds	r3, #3
 8001554:	6879      	ldr	r1, [r7, #4]
 8001556:	440b      	add	r3, r1
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	061b      	lsls	r3, r3, #24
 800155c:	4413      	add	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
					}
					aTxBuffer[j+1] = num;
 8001560:	7dbb      	ldrb	r3, [r7, #22]
 8001562:	3301      	adds	r3, #1
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4961      	ldr	r1, [pc, #388]	; (80016ec <vShell_cmdParse+0x274>)
 8001568:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					start+=4;
 800156c:	7dfb      	ldrb	r3, [r7, #23]
 800156e:	3304      	adds	r3, #4
 8001570:	75fb      	strb	r3, [r7, #23]
				for (uint8_t j = 0; j<CFG_LENGTH; j++)
 8001572:	7dbb      	ldrb	r3, [r7, #22]
 8001574:	3301      	adds	r3, #1
 8001576:	75bb      	strb	r3, [r7, #22]
 8001578:	7dbb      	ldrb	r3, [r7, #22]
 800157a:	2b09      	cmp	r3, #9
 800157c:	d9b1      	bls.n	80014e2 <vShell_cmdParse+0x6a>
				}
				if(u8_idx==2){aTxBuffer[0] = 1;}
 800157e:	7ffb      	ldrb	r3, [r7, #31]
 8001580:	2b02      	cmp	r3, #2
 8001582:	d103      	bne.n	800158c <vShell_cmdParse+0x114>
 8001584:	4b59      	ldr	r3, [pc, #356]	; (80016ec <vShell_cmdParse+0x274>)
 8001586:	2201      	movs	r2, #1
 8001588:	601a      	str	r2, [r3, #0]
			else if (u8_idx>=2 && u8_idx<=4) {					//{WB1: {WB2: WB3:
 800158a:	e09d      	b.n	80016c8 <vShell_cmdParse+0x250>
				else if(u8_idx==3){aTxBuffer[0] = 2;}
 800158c:	7ffb      	ldrb	r3, [r7, #31]
 800158e:	2b03      	cmp	r3, #3
 8001590:	d103      	bne.n	800159a <vShell_cmdParse+0x122>
 8001592:	4b56      	ldr	r3, [pc, #344]	; (80016ec <vShell_cmdParse+0x274>)
 8001594:	2202      	movs	r2, #2
 8001596:	601a      	str	r2, [r3, #0]
			else if (u8_idx>=2 && u8_idx<=4) {					//{WB1: {WB2: WB3:
 8001598:	e096      	b.n	80016c8 <vShell_cmdParse+0x250>
				else if(u8_idx==4){aTxBuffer[0] = 3;}
 800159a:	7ffb      	ldrb	r3, [r7, #31]
 800159c:	2b04      	cmp	r3, #4
 800159e:	f040 8093 	bne.w	80016c8 <vShell_cmdParse+0x250>
 80015a2:	4b52      	ldr	r3, [pc, #328]	; (80016ec <vShell_cmdParse+0x274>)
 80015a4:	2203      	movs	r2, #3
 80015a6:	601a      	str	r2, [r3, #0]
			else if (u8_idx>=2 && u8_idx<=4) {					//{WB1: {WB2: WB3:
 80015a8:	e08e      	b.n	80016c8 <vShell_cmdParse+0x250>
			}

			else if (u8_idx==5) {					//{RB1}
 80015aa:	7ffb      	ldrb	r3, [r7, #31]
 80015ac:	2b05      	cmp	r3, #5
 80015ae:	d10a      	bne.n	80015c6 <vShell_cmdParse+0x14e>
				bitFlag |= BFLAG_SPIM_WR;
 80015b0:	4b4d      	ldr	r3, [pc, #308]	; (80016e8 <vShell_cmdParse+0x270>)
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	f043 0304 	orr.w	r3, r3, #4
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	4b4b      	ldr	r3, [pc, #300]	; (80016e8 <vShell_cmdParse+0x270>)
 80015bc:	801a      	strh	r2, [r3, #0]
				aTxBuffer[0] = 4;
 80015be:	4b4b      	ldr	r3, [pc, #300]	; (80016ec <vShell_cmdParse+0x274>)
 80015c0:	2204      	movs	r2, #4
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	e081      	b.n	80016ca <vShell_cmdParse+0x252>
			}

			else if (u8_idx==6) {					//{RB2}
 80015c6:	7ffb      	ldrb	r3, [r7, #31]
 80015c8:	2b06      	cmp	r3, #6
 80015ca:	d10a      	bne.n	80015e2 <vShell_cmdParse+0x16a>
				bitFlag |= BFLAG_SPIM_WR;
 80015cc:	4b46      	ldr	r3, [pc, #280]	; (80016e8 <vShell_cmdParse+0x270>)
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	f043 0304 	orr.w	r3, r3, #4
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	4b44      	ldr	r3, [pc, #272]	; (80016e8 <vShell_cmdParse+0x270>)
 80015d8:	801a      	strh	r2, [r3, #0]
				aTxBuffer[0] = 5;
 80015da:	4b44      	ldr	r3, [pc, #272]	; (80016ec <vShell_cmdParse+0x274>)
 80015dc:	2205      	movs	r2, #5
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	e073      	b.n	80016ca <vShell_cmdParse+0x252>
			}

			else if (u8_idx==7) {					//{RB3}
 80015e2:	7ffb      	ldrb	r3, [r7, #31]
 80015e4:	2b07      	cmp	r3, #7
 80015e6:	d10a      	bne.n	80015fe <vShell_cmdParse+0x186>
				bitFlag |= BFLAG_SPIM_WR;
 80015e8:	4b3f      	ldr	r3, [pc, #252]	; (80016e8 <vShell_cmdParse+0x270>)
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	f043 0304 	orr.w	r3, r3, #4
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	4b3d      	ldr	r3, [pc, #244]	; (80016e8 <vShell_cmdParse+0x270>)
 80015f4:	801a      	strh	r2, [r3, #0]
				aTxBuffer[0] = 6;
 80015f6:	4b3d      	ldr	r3, [pc, #244]	; (80016ec <vShell_cmdParse+0x274>)
 80015f8:	2206      	movs	r2, #6
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	e065      	b.n	80016ca <vShell_cmdParse+0x252>
			}

			else if (u8_idx==8) {					//{WBA:
 80015fe:	7ffb      	ldrb	r3, [r7, #31]
 8001600:	2b08      	cmp	r3, #8
 8001602:	d162      	bne.n	80016ca <vShell_cmdParse+0x252>
				bitFlag |= BFLAG_SPIM_WBA;
 8001604:	4b38      	ldr	r3, [pc, #224]	; (80016e8 <vShell_cmdParse+0x270>)
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	f043 0310 	orr.w	r3, r3, #16
 800160c:	b29a      	uxth	r2, r3
 800160e:	4b36      	ldr	r3, [pc, #216]	; (80016e8 <vShell_cmdParse+0x270>)
 8001610:	801a      	strh	r2, [r3, #0]

				uint32_t num = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
				uint8_t start = 5;
 8001616:	2305      	movs	r3, #5
 8001618:	73fb      	strb	r3, [r7, #15]

				for (uint8_t j = 0; j<CFG_LENGTH*3; j++)
 800161a:	2300      	movs	r3, #0
 800161c:	73bb      	strb	r3, [r7, #14]
 800161e:	e049      	b.n	80016b4 <vShell_cmdParse+0x23c>
				{
					if(input[start+3]<128)
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	3303      	adds	r3, #3
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	4413      	add	r3, r2
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	b25b      	sxtb	r3, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	db1b      	blt.n	8001668 <vShell_cmdParse+0x1f0>
					{
						num = input[start]+(input[start+1]*256)+(input[start+2]*65536)+(input[start+3]*16777216);
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	7bfb      	ldrb	r3, [r7, #15]
 800163c:	3301      	adds	r3, #1
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	021b      	lsls	r3, r3, #8
 8001646:	18ca      	adds	r2, r1, r3
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	3302      	adds	r3, #2
 800164c:	6879      	ldr	r1, [r7, #4]
 800164e:	440b      	add	r3, r1
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	041b      	lsls	r3, r3, #16
 8001654:	441a      	add	r2, r3
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	3303      	adds	r3, #3
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	440b      	add	r3, r1
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	061b      	lsls	r3, r3, #24
 8001662:	4413      	add	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	e01a      	b.n	800169e <vShell_cmdParse+0x226>
					}
					else
					{
						num = (input[start]+(input[start+1]*256)+(input[start+2]*65536)+(input[start+3]*16777216))-4294967296;
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4619      	mov	r1, r3
 8001672:	7bfb      	ldrb	r3, [r7, #15]
 8001674:	3301      	adds	r3, #1
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	021b      	lsls	r3, r3, #8
 800167e:	18ca      	adds	r2, r1, r3
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	3302      	adds	r3, #2
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	440b      	add	r3, r1
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	041b      	lsls	r3, r3, #16
 800168c:	441a      	add	r2, r3
 800168e:	7bfb      	ldrb	r3, [r7, #15]
 8001690:	3303      	adds	r3, #3
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	440b      	add	r3, r1
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	061b      	lsls	r3, r3, #24
 800169a:	4413      	add	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
					}
					temp[j] = num;
 800169e:	7bbb      	ldrb	r3, [r7, #14]
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	4913      	ldr	r1, [pc, #76]	; (80016f0 <vShell_cmdParse+0x278>)
 80016a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					start+=4;
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	3304      	adds	r3, #4
 80016ac:	73fb      	strb	r3, [r7, #15]
				for (uint8_t j = 0; j<CFG_LENGTH*3; j++)
 80016ae:	7bbb      	ldrb	r3, [r7, #14]
 80016b0:	3301      	adds	r3, #1
 80016b2:	73bb      	strb	r3, [r7, #14]
 80016b4:	7bbb      	ldrb	r3, [r7, #14]
 80016b6:	2b1d      	cmp	r3, #29
 80016b8:	d9b2      	bls.n	8001620 <vShell_cmdParse+0x1a8>
				}
				Set_aTxBuffer(7, temp, 0, CFG_LENGTH*sizeof(temp[0]));
 80016ba:	2328      	movs	r3, #40	; 0x28
 80016bc:	2200      	movs	r2, #0
 80016be:	490c      	ldr	r1, [pc, #48]	; (80016f0 <vShell_cmdParse+0x278>)
 80016c0:	2007      	movs	r0, #7
 80016c2:	f7ff fbad 	bl	8000e20 <Set_aTxBuffer>
 80016c6:	e000      	b.n	80016ca <vShell_cmdParse+0x252>
			else if (u8_idx>=2 && u8_idx<=4) {					//{WB1: {WB2: WB3:
 80016c8:	bf00      	nop
	for(uint8_t u8_idx = 0; u8_idx < CFG_HEADER_NUM; u8_idx++) {
 80016ca:	7ffb      	ldrb	r3, [r7, #31]
 80016cc:	3301      	adds	r3, #1
 80016ce:	77fb      	strb	r3, [r7, #31]
 80016d0:	7ffb      	ldrb	r3, [r7, #31]
 80016d2:	2b13      	cmp	r3, #19
 80016d4:	f67f aed7 	bls.w	8001486 <vShell_cmdParse+0xe>
			}
		}
	}
}
 80016d8:	bf00      	nop
 80016da:	bf00      	nop
 80016dc:	3720      	adds	r7, #32
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000030 	.word	0x20000030
 80016e8:	200008c0 	.word	0x200008c0
 80016ec:	20000000 	.word	0x20000000
 80016f0:	20000848 	.word	0x20000848

080016f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800172c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016f8:	480d      	ldr	r0, [pc, #52]	; (8001730 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016fa:	490e      	ldr	r1, [pc, #56]	; (8001734 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016fc:	4a0e      	ldr	r2, [pc, #56]	; (8001738 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001700:	e002      	b.n	8001708 <LoopCopyDataInit>

08001702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001706:	3304      	adds	r3, #4

08001708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800170c:	d3f9      	bcc.n	8001702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170e:	4a0b      	ldr	r2, [pc, #44]	; (800173c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001710:	4c0b      	ldr	r4, [pc, #44]	; (8001740 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001714:	e001      	b.n	800171a <LoopFillZerobss>

08001716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001718:	3204      	adds	r2, #4

0800171a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800171c:	d3fb      	bcc.n	8001716 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800171e:	f7ff fe99 	bl	8001454 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001722:	f003 feb9 	bl	8005498 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001726:	f7fe ff01 	bl	800052c <main>
  bx  lr    
 800172a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800172c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001734:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001738:	080060c0 	.word	0x080060c0
  ldr r2, =_sbss
 800173c:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001740:	200008dc 	.word	0x200008dc

08001744 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001744:	e7fe      	b.n	8001744 <ADC_IRQHandler>
	...

08001748 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800174c:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <HAL_Init+0x40>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a0d      	ldr	r2, [pc, #52]	; (8001788 <HAL_Init+0x40>)
 8001752:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001756:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001758:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <HAL_Init+0x40>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <HAL_Init+0x40>)
 800175e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001762:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <HAL_Init+0x40>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a07      	ldr	r2, [pc, #28]	; (8001788 <HAL_Init+0x40>)
 800176a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001770:	2003      	movs	r0, #3
 8001772:	f000 f94f 	bl	8001a14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001776:	2000      	movs	r0, #0
 8001778:	f000 f808 	bl	800178c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800177c:	f7ff fc4c 	bl	8001018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023c00 	.word	0x40023c00

0800178c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_InitTick+0x54>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_InitTick+0x58>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4619      	mov	r1, r3
 800179e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 f967 	bl	8001a7e <HAL_SYSTICK_Config>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e00e      	b.n	80017d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b0f      	cmp	r3, #15
 80017be:	d80a      	bhi.n	80017d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c0:	2200      	movs	r2, #0
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	f04f 30ff 	mov.w	r0, #4294967295
 80017c8:	f000 f92f 	bl	8001a2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017cc:	4a06      	ldr	r2, [pc, #24]	; (80017e8 <HAL_InitTick+0x5c>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
 80017d4:	e000      	b.n	80017d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	2000002c 	.word	0x2000002c
 80017e4:	20000098 	.word	0x20000098
 80017e8:	20000094 	.word	0x20000094

080017ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_IncTick+0x20>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_IncTick+0x24>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	4a04      	ldr	r2, [pc, #16]	; (8001810 <HAL_IncTick+0x24>)
 80017fe:	6013      	str	r3, [r2, #0]
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	20000098 	.word	0x20000098
 8001810:	200008c8 	.word	0x200008c8

08001814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return uwTick;
 8001818:	4b03      	ldr	r3, [pc, #12]	; (8001828 <HAL_GetTick+0x14>)
 800181a:	681b      	ldr	r3, [r3, #0]
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	200008c8 	.word	0x200008c8

0800182c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001834:	f7ff ffee 	bl	8001814 <HAL_GetTick>
 8001838:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001844:	d005      	beq.n	8001852 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_Delay+0x44>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	461a      	mov	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4413      	add	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001852:	bf00      	nop
 8001854:	f7ff ffde 	bl	8001814 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	429a      	cmp	r2, r3
 8001862:	d8f7      	bhi.n	8001854 <HAL_Delay+0x28>
  {
  }
}
 8001864:	bf00      	nop
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000098 	.word	0x20000098

08001874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001890:	4013      	ands	r3, r2
 8001892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800189c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018a6:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <__NVIC_SetPriorityGrouping+0x44>)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	60d3      	str	r3, [r2, #12]
}
 80018ac:	bf00      	nop
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <__NVIC_GetPriorityGrouping+0x18>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	0a1b      	lsrs	r3, r3, #8
 80018c6:	f003 0307 	and.w	r3, r3, #7
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	db0b      	blt.n	8001902 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	f003 021f 	and.w	r2, r3, #31
 80018f0:	4907      	ldr	r1, [pc, #28]	; (8001910 <__NVIC_EnableIRQ+0x38>)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	095b      	lsrs	r3, r3, #5
 80018f8:	2001      	movs	r0, #1
 80018fa:	fa00 f202 	lsl.w	r2, r0, r2
 80018fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000e100 	.word	0xe000e100

08001914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	6039      	str	r1, [r7, #0]
 800191e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001924:	2b00      	cmp	r3, #0
 8001926:	db0a      	blt.n	800193e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	b2da      	uxtb	r2, r3
 800192c:	490c      	ldr	r1, [pc, #48]	; (8001960 <__NVIC_SetPriority+0x4c>)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	0112      	lsls	r2, r2, #4
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	440b      	add	r3, r1
 8001938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800193c:	e00a      	b.n	8001954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4908      	ldr	r1, [pc, #32]	; (8001964 <__NVIC_SetPriority+0x50>)
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	3b04      	subs	r3, #4
 800194c:	0112      	lsls	r2, r2, #4
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	440b      	add	r3, r1
 8001952:	761a      	strb	r2, [r3, #24]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000e100 	.word	0xe000e100
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001968:	b480      	push	{r7}
 800196a:	b089      	sub	sp, #36	; 0x24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f1c3 0307 	rsb	r3, r3, #7
 8001982:	2b04      	cmp	r3, #4
 8001984:	bf28      	it	cs
 8001986:	2304      	movcs	r3, #4
 8001988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3304      	adds	r3, #4
 800198e:	2b06      	cmp	r3, #6
 8001990:	d902      	bls.n	8001998 <NVIC_EncodePriority+0x30>
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3b03      	subs	r3, #3
 8001996:	e000      	b.n	800199a <NVIC_EncodePriority+0x32>
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	f04f 32ff 	mov.w	r2, #4294967295
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43da      	mvns	r2, r3
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	401a      	ands	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b0:	f04f 31ff 	mov.w	r1, #4294967295
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	43d9      	mvns	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	4313      	orrs	r3, r2
         );
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3724      	adds	r7, #36	; 0x24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
	...

080019d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3b01      	subs	r3, #1
 80019dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019e0:	d301      	bcc.n	80019e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019e2:	2301      	movs	r3, #1
 80019e4:	e00f      	b.n	8001a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e6:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <SysTick_Config+0x40>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ee:	210f      	movs	r1, #15
 80019f0:	f04f 30ff 	mov.w	r0, #4294967295
 80019f4:	f7ff ff8e 	bl	8001914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <SysTick_Config+0x40>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fe:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <SysTick_Config+0x40>)
 8001a00:	2207      	movs	r2, #7
 8001a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	e000e010 	.word	0xe000e010

08001a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ff29 	bl	8001874 <__NVIC_SetPriorityGrouping>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b086      	sub	sp, #24
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	4603      	mov	r3, r0
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a3c:	f7ff ff3e 	bl	80018bc <__NVIC_GetPriorityGrouping>
 8001a40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	68b9      	ldr	r1, [r7, #8]
 8001a46:	6978      	ldr	r0, [r7, #20]
 8001a48:	f7ff ff8e 	bl	8001968 <NVIC_EncodePriority>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a52:	4611      	mov	r1, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff5d 	bl	8001914 <__NVIC_SetPriority>
}
 8001a5a:	bf00      	nop
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	4603      	mov	r3, r0
 8001a6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff31 	bl	80018d8 <__NVIC_EnableIRQ>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ffa2 	bl	80019d0 <SysTick_Config>
 8001a8c:	4603      	mov	r3, r0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001aa4:	f7ff feb6 	bl	8001814 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e099      	b.n	8001be8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0201 	bic.w	r2, r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ad4:	e00f      	b.n	8001af6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ad6:	f7ff fe9d 	bl	8001814 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b05      	cmp	r3, #5
 8001ae2:	d908      	bls.n	8001af6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2203      	movs	r2, #3
 8001aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e078      	b.n	8001be8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1e8      	bne.n	8001ad6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	4b38      	ldr	r3, [pc, #224]	; (8001bf0 <HAL_DMA_Init+0x158>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4c:	2b04      	cmp	r3, #4
 8001b4e:	d107      	bne.n	8001b60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f023 0307 	bic.w	r3, r3, #7
 8001b76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	d117      	bne.n	8001bba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d00e      	beq.n	8001bba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 fb01 	bl	80021a4 <DMA_CheckFifoParam>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d008      	beq.n	8001bba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2240      	movs	r2, #64	; 0x40
 8001bac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e016      	b.n	8001be8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 fab8 	bl	8002138 <DMA_CalcBaseAndBitshift>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd0:	223f      	movs	r2, #63	; 0x3f
 8001bd2:	409a      	lsls	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	f010803f 	.word	0xf010803f

08001bf4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
 8001c00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d101      	bne.n	8001c1a <HAL_DMA_Start_IT+0x26>
 8001c16:	2302      	movs	r3, #2
 8001c18:	e040      	b.n	8001c9c <HAL_DMA_Start_IT+0xa8>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d12f      	bne.n	8001c8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2202      	movs	r2, #2
 8001c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	68b9      	ldr	r1, [r7, #8]
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f000 fa4a 	bl	80020dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c4c:	223f      	movs	r2, #63	; 0x3f
 8001c4e:	409a      	lsls	r2, r3
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0216 	orr.w	r2, r2, #22
 8001c62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d007      	beq.n	8001c7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 0208 	orr.w	r2, r2, #8
 8001c7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f042 0201 	orr.w	r2, r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	e005      	b.n	8001c9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c96:	2302      	movs	r3, #2
 8001c98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001cb2:	f7ff fdaf 	bl	8001814 <HAL_GetTick>
 8001cb6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d008      	beq.n	8001cd6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2280      	movs	r2, #128	; 0x80
 8001cc8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e052      	b.n	8001d7c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 0216 	bic.w	r2, r2, #22
 8001ce4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	695a      	ldr	r2, [r3, #20]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cf4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d103      	bne.n	8001d06 <HAL_DMA_Abort+0x62>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d007      	beq.n	8001d16 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 0208 	bic.w	r2, r2, #8
 8001d14:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 0201 	bic.w	r2, r2, #1
 8001d24:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d26:	e013      	b.n	8001d50 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d28:	f7ff fd74 	bl	8001814 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b05      	cmp	r3, #5
 8001d34:	d90c      	bls.n	8001d50 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2220      	movs	r2, #32
 8001d3a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2203      	movs	r2, #3
 8001d40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e015      	b.n	8001d7c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1e4      	bne.n	8001d28 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d62:	223f      	movs	r2, #63	; 0x3f
 8001d64:	409a      	lsls	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d004      	beq.n	8001da2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2280      	movs	r2, #128	; 0x80
 8001d9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e00c      	b.n	8001dbc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2205      	movs	r2, #5
 8001da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 0201 	bic.w	r2, r2, #1
 8001db8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001dd4:	4b8e      	ldr	r3, [pc, #568]	; (8002010 <HAL_DMA_IRQHandler+0x248>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a8e      	ldr	r2, [pc, #568]	; (8002014 <HAL_DMA_IRQHandler+0x24c>)
 8001dda:	fba2 2303 	umull	r2, r3, r2, r3
 8001dde:	0a9b      	lsrs	r3, r3, #10
 8001de0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df2:	2208      	movs	r2, #8
 8001df4:	409a      	lsls	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d01a      	beq.n	8001e34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d013      	beq.n	8001e34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0204 	bic.w	r2, r2, #4
 8001e1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e20:	2208      	movs	r2, #8
 8001e22:	409a      	lsls	r2, r3
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2c:	f043 0201 	orr.w	r2, r3, #1
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e38:	2201      	movs	r2, #1
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d012      	beq.n	8001e6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00b      	beq.n	8001e6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e56:	2201      	movs	r2, #1
 8001e58:	409a      	lsls	r2, r3
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e62:	f043 0202 	orr.w	r2, r3, #2
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6e:	2204      	movs	r2, #4
 8001e70:	409a      	lsls	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4013      	ands	r3, r2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d012      	beq.n	8001ea0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00b      	beq.n	8001ea0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8c:	2204      	movs	r2, #4
 8001e8e:	409a      	lsls	r2, r3
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e98:	f043 0204 	orr.w	r2, r3, #4
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea4:	2210      	movs	r2, #16
 8001ea6:	409a      	lsls	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d043      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d03c      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec2:	2210      	movs	r2, #16
 8001ec4:	409a      	lsls	r2, r3
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d018      	beq.n	8001f0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d108      	bne.n	8001ef8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d024      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	4798      	blx	r3
 8001ef6:	e01f      	b.n	8001f38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d01b      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	4798      	blx	r3
 8001f08:	e016      	b.n	8001f38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d107      	bne.n	8001f28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0208 	bic.w	r2, r2, #8
 8001f26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	409a      	lsls	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4013      	ands	r3, r2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 808f 	beq.w	8002068 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0310 	and.w	r3, r3, #16
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 8087 	beq.w	8002068 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5e:	2220      	movs	r2, #32
 8001f60:	409a      	lsls	r2, r3
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b05      	cmp	r3, #5
 8001f70:	d136      	bne.n	8001fe0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0216 	bic.w	r2, r2, #22
 8001f80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	695a      	ldr	r2, [r3, #20]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d103      	bne.n	8001fa2 <HAL_DMA_IRQHandler+0x1da>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d007      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0208 	bic.w	r2, r2, #8
 8001fb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb6:	223f      	movs	r2, #63	; 0x3f
 8001fb8:	409a      	lsls	r2, r3
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d07e      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	4798      	blx	r3
        }
        return;
 8001fde:	e079      	b.n	80020d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d01d      	beq.n	800202a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10d      	bne.n	8002018 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002000:	2b00      	cmp	r3, #0
 8002002:	d031      	beq.n	8002068 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	4798      	blx	r3
 800200c:	e02c      	b.n	8002068 <HAL_DMA_IRQHandler+0x2a0>
 800200e:	bf00      	nop
 8002010:	2000002c 	.word	0x2000002c
 8002014:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201c:	2b00      	cmp	r3, #0
 800201e:	d023      	beq.n	8002068 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	4798      	blx	r3
 8002028:	e01e      	b.n	8002068 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002034:	2b00      	cmp	r3, #0
 8002036:	d10f      	bne.n	8002058 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0210 	bic.w	r2, r2, #16
 8002046:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206c:	2b00      	cmp	r3, #0
 800206e:	d032      	beq.n	80020d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b00      	cmp	r3, #0
 800207a:	d022      	beq.n	80020c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2205      	movs	r2, #5
 8002080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0201 	bic.w	r2, r2, #1
 8002092:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	3301      	adds	r3, #1
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	429a      	cmp	r2, r3
 800209e:	d307      	bcc.n	80020b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f2      	bne.n	8002094 <HAL_DMA_IRQHandler+0x2cc>
 80020ae:	e000      	b.n	80020b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d005      	beq.n	80020d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	4798      	blx	r3
 80020d2:	e000      	b.n	80020d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80020d4:	bf00      	nop
    }
  }
}
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
 80020e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2b40      	cmp	r3, #64	; 0x40
 8002108:	d108      	bne.n	800211c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800211a:	e007      	b.n	800212c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	60da      	str	r2, [r3, #12]
}
 800212c:	bf00      	nop
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	3b10      	subs	r3, #16
 8002148:	4a14      	ldr	r2, [pc, #80]	; (800219c <DMA_CalcBaseAndBitshift+0x64>)
 800214a:	fba2 2303 	umull	r2, r3, r2, r3
 800214e:	091b      	lsrs	r3, r3, #4
 8002150:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002152:	4a13      	ldr	r2, [pc, #76]	; (80021a0 <DMA_CalcBaseAndBitshift+0x68>)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4413      	add	r3, r2
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2b03      	cmp	r3, #3
 8002164:	d909      	bls.n	800217a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800216e:	f023 0303 	bic.w	r3, r3, #3
 8002172:	1d1a      	adds	r2, r3, #4
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	659a      	str	r2, [r3, #88]	; 0x58
 8002178:	e007      	b.n	800218a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002182:	f023 0303 	bic.w	r3, r3, #3
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800218e:	4618      	mov	r0, r3
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	aaaaaaab 	.word	0xaaaaaaab
 80021a0:	08006044 	.word	0x08006044

080021a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021ac:	2300      	movs	r3, #0
 80021ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d11f      	bne.n	80021fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	d856      	bhi.n	8002272 <DMA_CheckFifoParam+0xce>
 80021c4:	a201      	add	r2, pc, #4	; (adr r2, 80021cc <DMA_CheckFifoParam+0x28>)
 80021c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ca:	bf00      	nop
 80021cc:	080021dd 	.word	0x080021dd
 80021d0:	080021ef 	.word	0x080021ef
 80021d4:	080021dd 	.word	0x080021dd
 80021d8:	08002273 	.word	0x08002273
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d046      	beq.n	8002276 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021ec:	e043      	b.n	8002276 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021f6:	d140      	bne.n	800227a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021fc:	e03d      	b.n	800227a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002206:	d121      	bne.n	800224c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b03      	cmp	r3, #3
 800220c:	d837      	bhi.n	800227e <DMA_CheckFifoParam+0xda>
 800220e:	a201      	add	r2, pc, #4	; (adr r2, 8002214 <DMA_CheckFifoParam+0x70>)
 8002210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002214:	08002225 	.word	0x08002225
 8002218:	0800222b 	.word	0x0800222b
 800221c:	08002225 	.word	0x08002225
 8002220:	0800223d 	.word	0x0800223d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
      break;
 8002228:	e030      	b.n	800228c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d025      	beq.n	8002282 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800223a:	e022      	b.n	8002282 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002240:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002244:	d11f      	bne.n	8002286 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800224a:	e01c      	b.n	8002286 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	2b02      	cmp	r3, #2
 8002250:	d903      	bls.n	800225a <DMA_CheckFifoParam+0xb6>
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2b03      	cmp	r3, #3
 8002256:	d003      	beq.n	8002260 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002258:	e018      	b.n	800228c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	73fb      	strb	r3, [r7, #15]
      break;
 800225e:	e015      	b.n	800228c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00e      	beq.n	800228a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	73fb      	strb	r3, [r7, #15]
      break;
 8002270:	e00b      	b.n	800228a <DMA_CheckFifoParam+0xe6>
      break;
 8002272:	bf00      	nop
 8002274:	e00a      	b.n	800228c <DMA_CheckFifoParam+0xe8>
      break;
 8002276:	bf00      	nop
 8002278:	e008      	b.n	800228c <DMA_CheckFifoParam+0xe8>
      break;
 800227a:	bf00      	nop
 800227c:	e006      	b.n	800228c <DMA_CheckFifoParam+0xe8>
      break;
 800227e:	bf00      	nop
 8002280:	e004      	b.n	800228c <DMA_CheckFifoParam+0xe8>
      break;
 8002282:	bf00      	nop
 8002284:	e002      	b.n	800228c <DMA_CheckFifoParam+0xe8>
      break;   
 8002286:	bf00      	nop
 8002288:	e000      	b.n	800228c <DMA_CheckFifoParam+0xe8>
      break;
 800228a:	bf00      	nop
    }
  } 
  
  return status; 
 800228c:	7bfb      	ldrb	r3, [r7, #15]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop

0800229c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800229c:	b480      	push	{r7}
 800229e:	b089      	sub	sp, #36	; 0x24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	e165      	b.n	8002584 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022b8:	2201      	movs	r2, #1
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	f040 8154 	bne.w	800257e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d005      	beq.n	80022ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d130      	bne.n	8002350 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	2203      	movs	r2, #3
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002324:	2201      	movs	r2, #1
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	f003 0201 	and.w	r2, r3, #1
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	2b03      	cmp	r3, #3
 800235a:	d017      	beq.n	800238c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	2203      	movs	r2, #3
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d123      	bne.n	80023e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	08da      	lsrs	r2, r3, #3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3208      	adds	r2, #8
 80023a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	220f      	movs	r2, #15
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	691a      	ldr	r2, [r3, #16]
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	08da      	lsrs	r2, r3, #3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3208      	adds	r2, #8
 80023da:	69b9      	ldr	r1, [r7, #24]
 80023dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	2203      	movs	r2, #3
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 0203 	and.w	r2, r3, #3
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 80ae 	beq.w	800257e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	4b5d      	ldr	r3, [pc, #372]	; (800259c <HAL_GPIO_Init+0x300>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	4a5c      	ldr	r2, [pc, #368]	; (800259c <HAL_GPIO_Init+0x300>)
 800242c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002430:	6453      	str	r3, [r2, #68]	; 0x44
 8002432:	4b5a      	ldr	r3, [pc, #360]	; (800259c <HAL_GPIO_Init+0x300>)
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800243e:	4a58      	ldr	r2, [pc, #352]	; (80025a0 <HAL_GPIO_Init+0x304>)
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	089b      	lsrs	r3, r3, #2
 8002444:	3302      	adds	r3, #2
 8002446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	220f      	movs	r2, #15
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a4f      	ldr	r2, [pc, #316]	; (80025a4 <HAL_GPIO_Init+0x308>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d025      	beq.n	80024b6 <HAL_GPIO_Init+0x21a>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a4e      	ldr	r2, [pc, #312]	; (80025a8 <HAL_GPIO_Init+0x30c>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d01f      	beq.n	80024b2 <HAL_GPIO_Init+0x216>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a4d      	ldr	r2, [pc, #308]	; (80025ac <HAL_GPIO_Init+0x310>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d019      	beq.n	80024ae <HAL_GPIO_Init+0x212>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a4c      	ldr	r2, [pc, #304]	; (80025b0 <HAL_GPIO_Init+0x314>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d013      	beq.n	80024aa <HAL_GPIO_Init+0x20e>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a4b      	ldr	r2, [pc, #300]	; (80025b4 <HAL_GPIO_Init+0x318>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d00d      	beq.n	80024a6 <HAL_GPIO_Init+0x20a>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a4a      	ldr	r2, [pc, #296]	; (80025b8 <HAL_GPIO_Init+0x31c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d007      	beq.n	80024a2 <HAL_GPIO_Init+0x206>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a49      	ldr	r2, [pc, #292]	; (80025bc <HAL_GPIO_Init+0x320>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d101      	bne.n	800249e <HAL_GPIO_Init+0x202>
 800249a:	2306      	movs	r3, #6
 800249c:	e00c      	b.n	80024b8 <HAL_GPIO_Init+0x21c>
 800249e:	2307      	movs	r3, #7
 80024a0:	e00a      	b.n	80024b8 <HAL_GPIO_Init+0x21c>
 80024a2:	2305      	movs	r3, #5
 80024a4:	e008      	b.n	80024b8 <HAL_GPIO_Init+0x21c>
 80024a6:	2304      	movs	r3, #4
 80024a8:	e006      	b.n	80024b8 <HAL_GPIO_Init+0x21c>
 80024aa:	2303      	movs	r3, #3
 80024ac:	e004      	b.n	80024b8 <HAL_GPIO_Init+0x21c>
 80024ae:	2302      	movs	r3, #2
 80024b0:	e002      	b.n	80024b8 <HAL_GPIO_Init+0x21c>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <HAL_GPIO_Init+0x21c>
 80024b6:	2300      	movs	r3, #0
 80024b8:	69fa      	ldr	r2, [r7, #28]
 80024ba:	f002 0203 	and.w	r2, r2, #3
 80024be:	0092      	lsls	r2, r2, #2
 80024c0:	4093      	lsls	r3, r2
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024c8:	4935      	ldr	r1, [pc, #212]	; (80025a0 <HAL_GPIO_Init+0x304>)
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	089b      	lsrs	r3, r3, #2
 80024ce:	3302      	adds	r3, #2
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024d6:	4b3a      	ldr	r3, [pc, #232]	; (80025c0 <HAL_GPIO_Init+0x324>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	43db      	mvns	r3, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4013      	ands	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024fa:	4a31      	ldr	r2, [pc, #196]	; (80025c0 <HAL_GPIO_Init+0x324>)
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002500:	4b2f      	ldr	r3, [pc, #188]	; (80025c0 <HAL_GPIO_Init+0x324>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	43db      	mvns	r3, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002524:	4a26      	ldr	r2, [pc, #152]	; (80025c0 <HAL_GPIO_Init+0x324>)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800252a:	4b25      	ldr	r3, [pc, #148]	; (80025c0 <HAL_GPIO_Init+0x324>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	43db      	mvns	r3, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4013      	ands	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800254e:	4a1c      	ldr	r2, [pc, #112]	; (80025c0 <HAL_GPIO_Init+0x324>)
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002554:	4b1a      	ldr	r3, [pc, #104]	; (80025c0 <HAL_GPIO_Init+0x324>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002578:	4a11      	ldr	r2, [pc, #68]	; (80025c0 <HAL_GPIO_Init+0x324>)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3301      	adds	r3, #1
 8002582:	61fb      	str	r3, [r7, #28]
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	2b0f      	cmp	r3, #15
 8002588:	f67f ae96 	bls.w	80022b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800258c:	bf00      	nop
 800258e:	bf00      	nop
 8002590:	3724      	adds	r7, #36	; 0x24
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40023800 	.word	0x40023800
 80025a0:	40013800 	.word	0x40013800
 80025a4:	40020000 	.word	0x40020000
 80025a8:	40020400 	.word	0x40020400
 80025ac:	40020800 	.word	0x40020800
 80025b0:	40020c00 	.word	0x40020c00
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40021400 	.word	0x40021400
 80025bc:	40021800 	.word	0x40021800
 80025c0:	40013c00 	.word	0x40013c00

080025c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	807b      	strh	r3, [r7, #2]
 80025d0:	4613      	mov	r3, r2
 80025d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025d4:	787b      	ldrb	r3, [r7, #1]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025da:	887a      	ldrh	r2, [r7, #2]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025e0:	e003      	b.n	80025ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025e2:	887b      	ldrh	r3, [r7, #2]
 80025e4:	041a      	lsls	r2, r3, #16
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	619a      	str	r2, [r3, #24]
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b085      	sub	sp, #20
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	460b      	mov	r3, r1
 8002600:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002608:	887a      	ldrh	r2, [r7, #2]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4013      	ands	r3, r2
 800260e:	041a      	lsls	r2, r3, #16
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	43d9      	mvns	r1, r3
 8002614:	887b      	ldrh	r3, [r7, #2]
 8002616:	400b      	ands	r3, r1
 8002618:	431a      	orrs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	619a      	str	r2, [r3, #24]
}
 800261e:	bf00      	nop
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002636:	4b08      	ldr	r3, [pc, #32]	; (8002658 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002638:	695a      	ldr	r2, [r3, #20]
 800263a:	88fb      	ldrh	r3, [r7, #6]
 800263c:	4013      	ands	r3, r2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d006      	beq.n	8002650 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002642:	4a05      	ldr	r2, [pc, #20]	; (8002658 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002644:	88fb      	ldrh	r3, [r7, #6]
 8002646:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002648:	88fb      	ldrh	r3, [r7, #6]
 800264a:	4618      	mov	r0, r3
 800264c:	f7fe fb22 	bl	8000c94 <HAL_GPIO_EXTI_Callback>
  }
}
 8002650:	bf00      	nop
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40013c00 	.word	0x40013c00

0800265c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e0cc      	b.n	800280a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002670:	4b68      	ldr	r3, [pc, #416]	; (8002814 <HAL_RCC_ClockConfig+0x1b8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 030f 	and.w	r3, r3, #15
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d90c      	bls.n	8002698 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267e:	4b65      	ldr	r3, [pc, #404]	; (8002814 <HAL_RCC_ClockConfig+0x1b8>)
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002686:	4b63      	ldr	r3, [pc, #396]	; (8002814 <HAL_RCC_ClockConfig+0x1b8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	429a      	cmp	r2, r3
 8002692:	d001      	beq.n	8002698 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e0b8      	b.n	800280a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d020      	beq.n	80026e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d005      	beq.n	80026bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026b0:	4b59      	ldr	r3, [pc, #356]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	4a58      	ldr	r2, [pc, #352]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80026b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026c8:	4b53      	ldr	r3, [pc, #332]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	4a52      	ldr	r2, [pc, #328]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026d4:	4b50      	ldr	r3, [pc, #320]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	494d      	ldr	r1, [pc, #308]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d044      	beq.n	800277c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d107      	bne.n	800270a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fa:	4b47      	ldr	r3, [pc, #284]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d119      	bne.n	800273a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e07f      	b.n	800280a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b02      	cmp	r3, #2
 8002710:	d003      	beq.n	800271a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002716:	2b03      	cmp	r3, #3
 8002718:	d107      	bne.n	800272a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800271a:	4b3f      	ldr	r3, [pc, #252]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d109      	bne.n	800273a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e06f      	b.n	800280a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272a:	4b3b      	ldr	r3, [pc, #236]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e067      	b.n	800280a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800273a:	4b37      	ldr	r3, [pc, #220]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f023 0203 	bic.w	r2, r3, #3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	4934      	ldr	r1, [pc, #208]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 8002748:	4313      	orrs	r3, r2
 800274a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800274c:	f7ff f862 	bl	8001814 <HAL_GetTick>
 8002750:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002752:	e00a      	b.n	800276a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002754:	f7ff f85e 	bl	8001814 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e04f      	b.n	800280a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276a:	4b2b      	ldr	r3, [pc, #172]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 020c 	and.w	r2, r3, #12
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	429a      	cmp	r2, r3
 800277a:	d1eb      	bne.n	8002754 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800277c:	4b25      	ldr	r3, [pc, #148]	; (8002814 <HAL_RCC_ClockConfig+0x1b8>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 030f 	and.w	r3, r3, #15
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d20c      	bcs.n	80027a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278a:	4b22      	ldr	r3, [pc, #136]	; (8002814 <HAL_RCC_ClockConfig+0x1b8>)
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002792:	4b20      	ldr	r3, [pc, #128]	; (8002814 <HAL_RCC_ClockConfig+0x1b8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	429a      	cmp	r2, r3
 800279e:	d001      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e032      	b.n	800280a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d008      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027b0:	4b19      	ldr	r3, [pc, #100]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	4916      	ldr	r1, [pc, #88]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d009      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027ce:	4b12      	ldr	r3, [pc, #72]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	490e      	ldr	r1, [pc, #56]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027e2:	f000 f855 	bl	8002890 <HAL_RCC_GetSysClockFreq>
 80027e6:	4602      	mov	r2, r0
 80027e8:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	091b      	lsrs	r3, r3, #4
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	490a      	ldr	r1, [pc, #40]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 80027f4:	5ccb      	ldrb	r3, [r1, r3]
 80027f6:	fa22 f303 	lsr.w	r3, r2, r3
 80027fa:	4a09      	ldr	r2, [pc, #36]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80027fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027fe:	4b09      	ldr	r3, [pc, #36]	; (8002824 <HAL_RCC_ClockConfig+0x1c8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f7fe ffc2 	bl	800178c <HAL_InitTick>

  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40023c00 	.word	0x40023c00
 8002818:	40023800 	.word	0x40023800
 800281c:	0800602c 	.word	0x0800602c
 8002820:	2000002c 	.word	0x2000002c
 8002824:	20000094 	.word	0x20000094

08002828 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800282c:	4b03      	ldr	r3, [pc, #12]	; (800283c <HAL_RCC_GetHCLKFreq+0x14>)
 800282e:	681b      	ldr	r3, [r3, #0]
}
 8002830:	4618      	mov	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	2000002c 	.word	0x2000002c

08002840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002844:	f7ff fff0 	bl	8002828 <HAL_RCC_GetHCLKFreq>
 8002848:	4602      	mov	r2, r0
 800284a:	4b05      	ldr	r3, [pc, #20]	; (8002860 <HAL_RCC_GetPCLK1Freq+0x20>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	0a9b      	lsrs	r3, r3, #10
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	4903      	ldr	r1, [pc, #12]	; (8002864 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002856:	5ccb      	ldrb	r3, [r1, r3]
 8002858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800285c:	4618      	mov	r0, r3
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40023800 	.word	0x40023800
 8002864:	0800603c 	.word	0x0800603c

08002868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800286c:	f7ff ffdc 	bl	8002828 <HAL_RCC_GetHCLKFreq>
 8002870:	4602      	mov	r2, r0
 8002872:	4b05      	ldr	r3, [pc, #20]	; (8002888 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	0b5b      	lsrs	r3, r3, #13
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	4903      	ldr	r1, [pc, #12]	; (800288c <HAL_RCC_GetPCLK2Freq+0x24>)
 800287e:	5ccb      	ldrb	r3, [r1, r3]
 8002880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002884:	4618      	mov	r0, r3
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40023800 	.word	0x40023800
 800288c:	0800603c 	.word	0x0800603c

08002890 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002894:	b0ae      	sub	sp, #184	; 0xb8
 8002896:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800289e:	2300      	movs	r3, #0
 80028a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028b6:	4bcb      	ldr	r3, [pc, #812]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x354>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 030c 	and.w	r3, r3, #12
 80028be:	2b0c      	cmp	r3, #12
 80028c0:	f200 8206 	bhi.w	8002cd0 <HAL_RCC_GetSysClockFreq+0x440>
 80028c4:	a201      	add	r2, pc, #4	; (adr r2, 80028cc <HAL_RCC_GetSysClockFreq+0x3c>)
 80028c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ca:	bf00      	nop
 80028cc:	08002901 	.word	0x08002901
 80028d0:	08002cd1 	.word	0x08002cd1
 80028d4:	08002cd1 	.word	0x08002cd1
 80028d8:	08002cd1 	.word	0x08002cd1
 80028dc:	08002909 	.word	0x08002909
 80028e0:	08002cd1 	.word	0x08002cd1
 80028e4:	08002cd1 	.word	0x08002cd1
 80028e8:	08002cd1 	.word	0x08002cd1
 80028ec:	08002911 	.word	0x08002911
 80028f0:	08002cd1 	.word	0x08002cd1
 80028f4:	08002cd1 	.word	0x08002cd1
 80028f8:	08002cd1 	.word	0x08002cd1
 80028fc:	08002b01 	.word	0x08002b01
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002900:	4bb9      	ldr	r3, [pc, #740]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002902:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002906:	e1e7      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002908:	4bb8      	ldr	r3, [pc, #736]	; (8002bec <HAL_RCC_GetSysClockFreq+0x35c>)
 800290a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800290e:	e1e3      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002910:	4bb4      	ldr	r3, [pc, #720]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002918:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800291c:	4bb1      	ldr	r3, [pc, #708]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x354>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d071      	beq.n	8002a0c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002928:	4bae      	ldr	r3, [pc, #696]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x354>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	099b      	lsrs	r3, r3, #6
 800292e:	2200      	movs	r2, #0
 8002930:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002934:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002938:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800293c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002940:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002944:	2300      	movs	r3, #0
 8002946:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800294a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800294e:	4622      	mov	r2, r4
 8002950:	462b      	mov	r3, r5
 8002952:	f04f 0000 	mov.w	r0, #0
 8002956:	f04f 0100 	mov.w	r1, #0
 800295a:	0159      	lsls	r1, r3, #5
 800295c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002960:	0150      	lsls	r0, r2, #5
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4621      	mov	r1, r4
 8002968:	1a51      	subs	r1, r2, r1
 800296a:	6439      	str	r1, [r7, #64]	; 0x40
 800296c:	4629      	mov	r1, r5
 800296e:	eb63 0301 	sbc.w	r3, r3, r1
 8002972:	647b      	str	r3, [r7, #68]	; 0x44
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002980:	4649      	mov	r1, r9
 8002982:	018b      	lsls	r3, r1, #6
 8002984:	4641      	mov	r1, r8
 8002986:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800298a:	4641      	mov	r1, r8
 800298c:	018a      	lsls	r2, r1, #6
 800298e:	4641      	mov	r1, r8
 8002990:	1a51      	subs	r1, r2, r1
 8002992:	63b9      	str	r1, [r7, #56]	; 0x38
 8002994:	4649      	mov	r1, r9
 8002996:	eb63 0301 	sbc.w	r3, r3, r1
 800299a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80029a8:	4649      	mov	r1, r9
 80029aa:	00cb      	lsls	r3, r1, #3
 80029ac:	4641      	mov	r1, r8
 80029ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029b2:	4641      	mov	r1, r8
 80029b4:	00ca      	lsls	r2, r1, #3
 80029b6:	4610      	mov	r0, r2
 80029b8:	4619      	mov	r1, r3
 80029ba:	4603      	mov	r3, r0
 80029bc:	4622      	mov	r2, r4
 80029be:	189b      	adds	r3, r3, r2
 80029c0:	633b      	str	r3, [r7, #48]	; 0x30
 80029c2:	462b      	mov	r3, r5
 80029c4:	460a      	mov	r2, r1
 80029c6:	eb42 0303 	adc.w	r3, r2, r3
 80029ca:	637b      	str	r3, [r7, #52]	; 0x34
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	f04f 0300 	mov.w	r3, #0
 80029d4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80029d8:	4629      	mov	r1, r5
 80029da:	024b      	lsls	r3, r1, #9
 80029dc:	4621      	mov	r1, r4
 80029de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029e2:	4621      	mov	r1, r4
 80029e4:	024a      	lsls	r2, r1, #9
 80029e6:	4610      	mov	r0, r2
 80029e8:	4619      	mov	r1, r3
 80029ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029ee:	2200      	movs	r2, #0
 80029f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80029f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80029f8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80029fc:	f7fd fc02 	bl	8000204 <__aeabi_uldivmod>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	4613      	mov	r3, r2
 8002a06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a0a:	e067      	b.n	8002adc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a0c:	4b75      	ldr	r3, [pc, #468]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	099b      	lsrs	r3, r3, #6
 8002a12:	2200      	movs	r2, #0
 8002a14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a18:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002a1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a24:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a26:	2300      	movs	r3, #0
 8002a28:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a2a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002a2e:	4622      	mov	r2, r4
 8002a30:	462b      	mov	r3, r5
 8002a32:	f04f 0000 	mov.w	r0, #0
 8002a36:	f04f 0100 	mov.w	r1, #0
 8002a3a:	0159      	lsls	r1, r3, #5
 8002a3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a40:	0150      	lsls	r0, r2, #5
 8002a42:	4602      	mov	r2, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	4621      	mov	r1, r4
 8002a48:	1a51      	subs	r1, r2, r1
 8002a4a:	62b9      	str	r1, [r7, #40]	; 0x28
 8002a4c:	4629      	mov	r1, r5
 8002a4e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002a60:	4649      	mov	r1, r9
 8002a62:	018b      	lsls	r3, r1, #6
 8002a64:	4641      	mov	r1, r8
 8002a66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a6a:	4641      	mov	r1, r8
 8002a6c:	018a      	lsls	r2, r1, #6
 8002a6e:	4641      	mov	r1, r8
 8002a70:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a74:	4649      	mov	r1, r9
 8002a76:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	f04f 0300 	mov.w	r3, #0
 8002a82:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a86:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a8e:	4692      	mov	sl, r2
 8002a90:	469b      	mov	fp, r3
 8002a92:	4623      	mov	r3, r4
 8002a94:	eb1a 0303 	adds.w	r3, sl, r3
 8002a98:	623b      	str	r3, [r7, #32]
 8002a9a:	462b      	mov	r3, r5
 8002a9c:	eb4b 0303 	adc.w	r3, fp, r3
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa2:	f04f 0200 	mov.w	r2, #0
 8002aa6:	f04f 0300 	mov.w	r3, #0
 8002aaa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002aae:	4629      	mov	r1, r5
 8002ab0:	028b      	lsls	r3, r1, #10
 8002ab2:	4621      	mov	r1, r4
 8002ab4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ab8:	4621      	mov	r1, r4
 8002aba:	028a      	lsls	r2, r1, #10
 8002abc:	4610      	mov	r0, r2
 8002abe:	4619      	mov	r1, r3
 8002ac0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	673b      	str	r3, [r7, #112]	; 0x70
 8002ac8:	677a      	str	r2, [r7, #116]	; 0x74
 8002aca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002ace:	f7fd fb99 	bl	8000204 <__aeabi_uldivmod>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002adc:	4b41      	ldr	r3, [pc, #260]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	0c1b      	lsrs	r3, r3, #16
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002aee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002af2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002afe:	e0eb      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b00:	4b38      	ldr	r3, [pc, #224]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b0c:	4b35      	ldr	r3, [pc, #212]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d06b      	beq.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b18:	4b32      	ldr	r3, [pc, #200]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	099b      	lsrs	r3, r3, #6
 8002b1e:	2200      	movs	r2, #0
 8002b20:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b22:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b2a:	663b      	str	r3, [r7, #96]	; 0x60
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	667b      	str	r3, [r7, #100]	; 0x64
 8002b30:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002b34:	4622      	mov	r2, r4
 8002b36:	462b      	mov	r3, r5
 8002b38:	f04f 0000 	mov.w	r0, #0
 8002b3c:	f04f 0100 	mov.w	r1, #0
 8002b40:	0159      	lsls	r1, r3, #5
 8002b42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b46:	0150      	lsls	r0, r2, #5
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4621      	mov	r1, r4
 8002b4e:	1a51      	subs	r1, r2, r1
 8002b50:	61b9      	str	r1, [r7, #24]
 8002b52:	4629      	mov	r1, r5
 8002b54:	eb63 0301 	sbc.w	r3, r3, r1
 8002b58:	61fb      	str	r3, [r7, #28]
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	f04f 0300 	mov.w	r3, #0
 8002b62:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002b66:	4659      	mov	r1, fp
 8002b68:	018b      	lsls	r3, r1, #6
 8002b6a:	4651      	mov	r1, sl
 8002b6c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b70:	4651      	mov	r1, sl
 8002b72:	018a      	lsls	r2, r1, #6
 8002b74:	4651      	mov	r1, sl
 8002b76:	ebb2 0801 	subs.w	r8, r2, r1
 8002b7a:	4659      	mov	r1, fp
 8002b7c:	eb63 0901 	sbc.w	r9, r3, r1
 8002b80:	f04f 0200 	mov.w	r2, #0
 8002b84:	f04f 0300 	mov.w	r3, #0
 8002b88:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b8c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b90:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b94:	4690      	mov	r8, r2
 8002b96:	4699      	mov	r9, r3
 8002b98:	4623      	mov	r3, r4
 8002b9a:	eb18 0303 	adds.w	r3, r8, r3
 8002b9e:	613b      	str	r3, [r7, #16]
 8002ba0:	462b      	mov	r3, r5
 8002ba2:	eb49 0303 	adc.w	r3, r9, r3
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	f04f 0200 	mov.w	r2, #0
 8002bac:	f04f 0300 	mov.w	r3, #0
 8002bb0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002bb4:	4629      	mov	r1, r5
 8002bb6:	024b      	lsls	r3, r1, #9
 8002bb8:	4621      	mov	r1, r4
 8002bba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bbe:	4621      	mov	r1, r4
 8002bc0:	024a      	lsls	r2, r1, #9
 8002bc2:	4610      	mov	r0, r2
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bca:	2200      	movs	r2, #0
 8002bcc:	65bb      	str	r3, [r7, #88]	; 0x58
 8002bce:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002bd0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002bd4:	f7fd fb16 	bl	8000204 <__aeabi_uldivmod>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4613      	mov	r3, r2
 8002bde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002be2:	e065      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x420>
 8002be4:	40023800 	.word	0x40023800
 8002be8:	00f42400 	.word	0x00f42400
 8002bec:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf0:	4b3d      	ldr	r3, [pc, #244]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	099b      	lsrs	r3, r3, #6
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c00:	653b      	str	r3, [r7, #80]	; 0x50
 8002c02:	2300      	movs	r3, #0
 8002c04:	657b      	str	r3, [r7, #84]	; 0x54
 8002c06:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002c0a:	4642      	mov	r2, r8
 8002c0c:	464b      	mov	r3, r9
 8002c0e:	f04f 0000 	mov.w	r0, #0
 8002c12:	f04f 0100 	mov.w	r1, #0
 8002c16:	0159      	lsls	r1, r3, #5
 8002c18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c1c:	0150      	lsls	r0, r2, #5
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4641      	mov	r1, r8
 8002c24:	1a51      	subs	r1, r2, r1
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	4649      	mov	r1, r9
 8002c2a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	f04f 0300 	mov.w	r3, #0
 8002c38:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002c3c:	4659      	mov	r1, fp
 8002c3e:	018b      	lsls	r3, r1, #6
 8002c40:	4651      	mov	r1, sl
 8002c42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c46:	4651      	mov	r1, sl
 8002c48:	018a      	lsls	r2, r1, #6
 8002c4a:	4651      	mov	r1, sl
 8002c4c:	1a54      	subs	r4, r2, r1
 8002c4e:	4659      	mov	r1, fp
 8002c50:	eb63 0501 	sbc.w	r5, r3, r1
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	00eb      	lsls	r3, r5, #3
 8002c5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c62:	00e2      	lsls	r2, r4, #3
 8002c64:	4614      	mov	r4, r2
 8002c66:	461d      	mov	r5, r3
 8002c68:	4643      	mov	r3, r8
 8002c6a:	18e3      	adds	r3, r4, r3
 8002c6c:	603b      	str	r3, [r7, #0]
 8002c6e:	464b      	mov	r3, r9
 8002c70:	eb45 0303 	adc.w	r3, r5, r3
 8002c74:	607b      	str	r3, [r7, #4]
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	f04f 0300 	mov.w	r3, #0
 8002c7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c82:	4629      	mov	r1, r5
 8002c84:	028b      	lsls	r3, r1, #10
 8002c86:	4621      	mov	r1, r4
 8002c88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c8c:	4621      	mov	r1, r4
 8002c8e:	028a      	lsls	r2, r1, #10
 8002c90:	4610      	mov	r0, r2
 8002c92:	4619      	mov	r1, r3
 8002c94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c98:	2200      	movs	r2, #0
 8002c9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c9c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002c9e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ca2:	f7fd faaf 	bl	8000204 <__aeabi_uldivmod>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	4613      	mov	r3, r2
 8002cac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002cb0:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	0f1b      	lsrs	r3, r3, #28
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002cbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002cce:	e003      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cd0:	4b06      	ldr	r3, [pc, #24]	; (8002cec <HAL_RCC_GetSysClockFreq+0x45c>)
 8002cd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002cd6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	37b8      	adds	r7, #184	; 0xb8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	00f42400 	.word	0x00f42400

08002cf0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e28d      	b.n	800321e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 8083 	beq.w	8002e16 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d10:	4b94      	ldr	r3, [pc, #592]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 030c 	and.w	r3, r3, #12
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d019      	beq.n	8002d50 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d1c:	4b91      	ldr	r3, [pc, #580]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d106      	bne.n	8002d36 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d28:	4b8e      	ldr	r3, [pc, #568]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d34:	d00c      	beq.n	8002d50 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d36:	4b8b      	ldr	r3, [pc, #556]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d3e:	2b0c      	cmp	r3, #12
 8002d40:	d112      	bne.n	8002d68 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d42:	4b88      	ldr	r3, [pc, #544]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d4e:	d10b      	bne.n	8002d68 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d50:	4b84      	ldr	r3, [pc, #528]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d05b      	beq.n	8002e14 <HAL_RCC_OscConfig+0x124>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d157      	bne.n	8002e14 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e25a      	b.n	800321e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d70:	d106      	bne.n	8002d80 <HAL_RCC_OscConfig+0x90>
 8002d72:	4b7c      	ldr	r3, [pc, #496]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a7b      	ldr	r2, [pc, #492]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	e01d      	b.n	8002dbc <HAL_RCC_OscConfig+0xcc>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d88:	d10c      	bne.n	8002da4 <HAL_RCC_OscConfig+0xb4>
 8002d8a:	4b76      	ldr	r3, [pc, #472]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a75      	ldr	r2, [pc, #468]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	4b73      	ldr	r3, [pc, #460]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a72      	ldr	r2, [pc, #456]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da0:	6013      	str	r3, [r2, #0]
 8002da2:	e00b      	b.n	8002dbc <HAL_RCC_OscConfig+0xcc>
 8002da4:	4b6f      	ldr	r3, [pc, #444]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a6e      	ldr	r2, [pc, #440]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dae:	6013      	str	r3, [r2, #0]
 8002db0:	4b6c      	ldr	r3, [pc, #432]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a6b      	ldr	r2, [pc, #428]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d013      	beq.n	8002dec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc4:	f7fe fd26 	bl	8001814 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dcc:	f7fe fd22 	bl	8001814 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b64      	cmp	r3, #100	; 0x64
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e21f      	b.n	800321e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dde:	4b61      	ldr	r3, [pc, #388]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0f0      	beq.n	8002dcc <HAL_RCC_OscConfig+0xdc>
 8002dea:	e014      	b.n	8002e16 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dec:	f7fe fd12 	bl	8001814 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002df4:	f7fe fd0e 	bl	8001814 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b64      	cmp	r3, #100	; 0x64
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e20b      	b.n	800321e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e06:	4b57      	ldr	r3, [pc, #348]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f0      	bne.n	8002df4 <HAL_RCC_OscConfig+0x104>
 8002e12:	e000      	b.n	8002e16 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d06f      	beq.n	8002f02 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e22:	4b50      	ldr	r3, [pc, #320]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 030c 	and.w	r3, r3, #12
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d017      	beq.n	8002e5e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e2e:	4b4d      	ldr	r3, [pc, #308]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d105      	bne.n	8002e46 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e3a:	4b4a      	ldr	r3, [pc, #296]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00b      	beq.n	8002e5e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e46:	4b47      	ldr	r3, [pc, #284]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e4e:	2b0c      	cmp	r3, #12
 8002e50:	d11c      	bne.n	8002e8c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e52:	4b44      	ldr	r3, [pc, #272]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d116      	bne.n	8002e8c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e5e:	4b41      	ldr	r3, [pc, #260]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d005      	beq.n	8002e76 <HAL_RCC_OscConfig+0x186>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d001      	beq.n	8002e76 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e1d3      	b.n	800321e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e76:	4b3b      	ldr	r3, [pc, #236]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4937      	ldr	r1, [pc, #220]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e8a:	e03a      	b.n	8002f02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d020      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e94:	4b34      	ldr	r3, [pc, #208]	; (8002f68 <HAL_RCC_OscConfig+0x278>)
 8002e96:	2201      	movs	r2, #1
 8002e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9a:	f7fe fcbb 	bl	8001814 <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ea2:	f7fe fcb7 	bl	8001814 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e1b4      	b.n	800321e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb4:	4b2b      	ldr	r3, [pc, #172]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0f0      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec0:	4b28      	ldr	r3, [pc, #160]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	4925      	ldr	r1, [pc, #148]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	600b      	str	r3, [r1, #0]
 8002ed4:	e015      	b.n	8002f02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ed6:	4b24      	ldr	r3, [pc, #144]	; (8002f68 <HAL_RCC_OscConfig+0x278>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002edc:	f7fe fc9a 	bl	8001814 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ee4:	f7fe fc96 	bl	8001814 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e193      	b.n	800321e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ef6:	4b1b      	ldr	r3, [pc, #108]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f0      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d036      	beq.n	8002f7c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d016      	beq.n	8002f44 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f16:	4b15      	ldr	r3, [pc, #84]	; (8002f6c <HAL_RCC_OscConfig+0x27c>)
 8002f18:	2201      	movs	r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1c:	f7fe fc7a 	bl	8001814 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f24:	f7fe fc76 	bl	8001814 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e173      	b.n	800321e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f36:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <HAL_RCC_OscConfig+0x274>)
 8002f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0f0      	beq.n	8002f24 <HAL_RCC_OscConfig+0x234>
 8002f42:	e01b      	b.n	8002f7c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f44:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <HAL_RCC_OscConfig+0x27c>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4a:	f7fe fc63 	bl	8001814 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f50:	e00e      	b.n	8002f70 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f52:	f7fe fc5f 	bl	8001814 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d907      	bls.n	8002f70 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e15c      	b.n	800321e <HAL_RCC_OscConfig+0x52e>
 8002f64:	40023800 	.word	0x40023800
 8002f68:	42470000 	.word	0x42470000
 8002f6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f70:	4b8a      	ldr	r3, [pc, #552]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 8002f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1ea      	bne.n	8002f52 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 8097 	beq.w	80030b8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f8e:	4b83      	ldr	r3, [pc, #524]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10f      	bne.n	8002fba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60bb      	str	r3, [r7, #8]
 8002f9e:	4b7f      	ldr	r3, [pc, #508]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	4a7e      	ldr	r2, [pc, #504]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 8002fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8002faa:	4b7c      	ldr	r3, [pc, #496]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	60bb      	str	r3, [r7, #8]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fba:	4b79      	ldr	r3, [pc, #484]	; (80031a0 <HAL_RCC_OscConfig+0x4b0>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d118      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fc6:	4b76      	ldr	r3, [pc, #472]	; (80031a0 <HAL_RCC_OscConfig+0x4b0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a75      	ldr	r2, [pc, #468]	; (80031a0 <HAL_RCC_OscConfig+0x4b0>)
 8002fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fd2:	f7fe fc1f 	bl	8001814 <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fda:	f7fe fc1b 	bl	8001814 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e118      	b.n	800321e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fec:	4b6c      	ldr	r3, [pc, #432]	; (80031a0 <HAL_RCC_OscConfig+0x4b0>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0f0      	beq.n	8002fda <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d106      	bne.n	800300e <HAL_RCC_OscConfig+0x31e>
 8003000:	4b66      	ldr	r3, [pc, #408]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 8003002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003004:	4a65      	ldr	r2, [pc, #404]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 8003006:	f043 0301 	orr.w	r3, r3, #1
 800300a:	6713      	str	r3, [r2, #112]	; 0x70
 800300c:	e01c      	b.n	8003048 <HAL_RCC_OscConfig+0x358>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2b05      	cmp	r3, #5
 8003014:	d10c      	bne.n	8003030 <HAL_RCC_OscConfig+0x340>
 8003016:	4b61      	ldr	r3, [pc, #388]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 8003018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301a:	4a60      	ldr	r2, [pc, #384]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 800301c:	f043 0304 	orr.w	r3, r3, #4
 8003020:	6713      	str	r3, [r2, #112]	; 0x70
 8003022:	4b5e      	ldr	r3, [pc, #376]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 8003024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003026:	4a5d      	ldr	r2, [pc, #372]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 8003028:	f043 0301 	orr.w	r3, r3, #1
 800302c:	6713      	str	r3, [r2, #112]	; 0x70
 800302e:	e00b      	b.n	8003048 <HAL_RCC_OscConfig+0x358>
 8003030:	4b5a      	ldr	r3, [pc, #360]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 8003032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003034:	4a59      	ldr	r2, [pc, #356]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 8003036:	f023 0301 	bic.w	r3, r3, #1
 800303a:	6713      	str	r3, [r2, #112]	; 0x70
 800303c:	4b57      	ldr	r3, [pc, #348]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 800303e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003040:	4a56      	ldr	r2, [pc, #344]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 8003042:	f023 0304 	bic.w	r3, r3, #4
 8003046:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d015      	beq.n	800307c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003050:	f7fe fbe0 	bl	8001814 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003056:	e00a      	b.n	800306e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003058:	f7fe fbdc 	bl	8001814 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	f241 3288 	movw	r2, #5000	; 0x1388
 8003066:	4293      	cmp	r3, r2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e0d7      	b.n	800321e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800306e:	4b4b      	ldr	r3, [pc, #300]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 8003070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0ee      	beq.n	8003058 <HAL_RCC_OscConfig+0x368>
 800307a:	e014      	b.n	80030a6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307c:	f7fe fbca 	bl	8001814 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003082:	e00a      	b.n	800309a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003084:	f7fe fbc6 	bl	8001814 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003092:	4293      	cmp	r3, r2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e0c1      	b.n	800321e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800309a:	4b40      	ldr	r3, [pc, #256]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 800309c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1ee      	bne.n	8003084 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030a6:	7dfb      	ldrb	r3, [r7, #23]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d105      	bne.n	80030b8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ac:	4b3b      	ldr	r3, [pc, #236]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	4a3a      	ldr	r2, [pc, #232]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 80030b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 80ad 	beq.w	800321c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030c2:	4b36      	ldr	r3, [pc, #216]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
 80030ca:	2b08      	cmp	r3, #8
 80030cc:	d060      	beq.n	8003190 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d145      	bne.n	8003162 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d6:	4b33      	ldr	r3, [pc, #204]	; (80031a4 <HAL_RCC_OscConfig+0x4b4>)
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030dc:	f7fe fb9a 	bl	8001814 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e4:	f7fe fb96 	bl	8001814 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e093      	b.n	800321e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f6:	4b29      	ldr	r3, [pc, #164]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f0      	bne.n	80030e4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69da      	ldr	r2, [r3, #28]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	019b      	lsls	r3, r3, #6
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003118:	085b      	lsrs	r3, r3, #1
 800311a:	3b01      	subs	r3, #1
 800311c:	041b      	lsls	r3, r3, #16
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003124:	061b      	lsls	r3, r3, #24
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312c:	071b      	lsls	r3, r3, #28
 800312e:	491b      	ldr	r1, [pc, #108]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 8003130:	4313      	orrs	r3, r2
 8003132:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003134:	4b1b      	ldr	r3, [pc, #108]	; (80031a4 <HAL_RCC_OscConfig+0x4b4>)
 8003136:	2201      	movs	r2, #1
 8003138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313a:	f7fe fb6b 	bl	8001814 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003142:	f7fe fb67 	bl	8001814 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e064      	b.n	800321e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003154:	4b11      	ldr	r3, [pc, #68]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0f0      	beq.n	8003142 <HAL_RCC_OscConfig+0x452>
 8003160:	e05c      	b.n	800321c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003162:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <HAL_RCC_OscConfig+0x4b4>)
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003168:	f7fe fb54 	bl	8001814 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003170:	f7fe fb50 	bl	8001814 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e04d      	b.n	800321e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003182:	4b06      	ldr	r3, [pc, #24]	; (800319c <HAL_RCC_OscConfig+0x4ac>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f0      	bne.n	8003170 <HAL_RCC_OscConfig+0x480>
 800318e:	e045      	b.n	800321c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d107      	bne.n	80031a8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e040      	b.n	800321e <HAL_RCC_OscConfig+0x52e>
 800319c:	40023800 	.word	0x40023800
 80031a0:	40007000 	.word	0x40007000
 80031a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031a8:	4b1f      	ldr	r3, [pc, #124]	; (8003228 <HAL_RCC_OscConfig+0x538>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d030      	beq.n	8003218 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d129      	bne.n	8003218 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d122      	bne.n	8003218 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031d8:	4013      	ands	r3, r2
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d119      	bne.n	8003218 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ee:	085b      	lsrs	r3, r3, #1
 80031f0:	3b01      	subs	r3, #1
 80031f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d10f      	bne.n	8003218 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003202:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003204:	429a      	cmp	r2, r3
 8003206:	d107      	bne.n	8003218 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003214:	429a      	cmp	r2, r3
 8003216:	d001      	beq.n	800321c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e000      	b.n	800321e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40023800 	.word	0x40023800

0800322c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e07b      	b.n	8003336 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	2b00      	cmp	r3, #0
 8003244:	d108      	bne.n	8003258 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800324e:	d009      	beq.n	8003264 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	61da      	str	r2, [r3, #28]
 8003256:	e005      	b.n	8003264 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d106      	bne.n	8003284 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7fd fef2 	bl	8001068 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800329a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032d4:	431a      	orrs	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e8:	ea42 0103 	orr.w	r1, r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	0c1b      	lsrs	r3, r3, #16
 8003302:	f003 0104 	and.w	r1, r3, #4
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	f003 0210 	and.w	r2, r3, #16
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	69da      	ldr	r2, [r3, #28]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003324:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
	...

08003340 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003340:	b480      	push	{r7}
 8003342:	b087      	sub	sp, #28
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	4613      	mov	r3, r2
 800334c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800334e:	2300      	movs	r3, #0
 8003350:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <HAL_SPI_Transmit_IT+0x20>
 800335c:	2302      	movs	r3, #2
 800335e:	e06f      	b.n	8003440 <HAL_SPI_Transmit_IT+0x100>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d002      	beq.n	8003374 <HAL_SPI_Transmit_IT+0x34>
 800336e:	88fb      	ldrh	r3, [r7, #6]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d102      	bne.n	800337a <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003378:	e05d      	b.n	8003436 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b01      	cmp	r3, #1
 8003384:	d002      	beq.n	800338c <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8003386:	2302      	movs	r3, #2
 8003388:	75fb      	strb	r3, [r7, #23]
    goto error;
 800338a:	e054      	b.n	8003436 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2203      	movs	r2, #3
 8003390:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	88fa      	ldrh	r2, [r7, #6]
 80033a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	88fa      	ldrh	r2, [r7, #6]
 80033aa:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4a1f      	ldr	r2, [pc, #124]	; (800344c <HAL_SPI_Transmit_IT+0x10c>)
 80033d0:	645a      	str	r2, [r3, #68]	; 0x44
 80033d2:	e002      	b.n	80033da <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4a1e      	ldr	r2, [pc, #120]	; (8003450 <HAL_SPI_Transmit_IT+0x110>)
 80033d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033e2:	d10f      	bne.n	8003404 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003402:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8003412:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341e:	2b40      	cmp	r3, #64	; 0x40
 8003420:	d008      	beq.n	8003434 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	e000      	b.n	8003436 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8003434:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800343e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003440:	4618      	mov	r0, r3
 8003442:	371c      	adds	r7, #28
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	08003b55 	.word	0x08003b55
 8003450:	08003b0f 	.word	0x08003b0f

08003454 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	4613      	mov	r3, r2
 8003460:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003462:	2300      	movs	r3, #0
 8003464:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d110      	bne.n	8003490 <HAL_SPI_Receive_IT+0x3c>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003476:	d10b      	bne.n	8003490 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2204      	movs	r2, #4
 800347c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8003480:	88fb      	ldrh	r3, [r7, #6]
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	68b9      	ldr	r1, [r7, #8]
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 f882 	bl	8003590 <HAL_SPI_TransmitReceive_IT>
 800348c:	4603      	mov	r3, r0
 800348e:	e076      	b.n	800357e <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003496:	2b01      	cmp	r3, #1
 8003498:	d101      	bne.n	800349e <HAL_SPI_Receive_IT+0x4a>
 800349a:	2302      	movs	r3, #2
 800349c:	e06f      	b.n	800357e <HAL_SPI_Receive_IT+0x12a>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d002      	beq.n	80034b8 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 80034b2:	2302      	movs	r3, #2
 80034b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034b6:	e05d      	b.n	8003574 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d002      	beq.n	80034c4 <HAL_SPI_Receive_IT+0x70>
 80034be:	88fb      	ldrh	r3, [r7, #6]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d102      	bne.n	80034ca <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034c8:	e054      	b.n	8003574 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2204      	movs	r2, #4
 80034ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	88fa      	ldrh	r2, [r7, #6]
 80034e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	88fa      	ldrh	r2, [r7, #6]
 80034e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	4a1e      	ldr	r2, [pc, #120]	; (8003588 <HAL_SPI_Receive_IT+0x134>)
 800350e:	641a      	str	r2, [r3, #64]	; 0x40
 8003510:	e002      	b.n	8003518 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	4a1d      	ldr	r2, [pc, #116]	; (800358c <HAL_SPI_Receive_IT+0x138>)
 8003516:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003520:	d10f      	bne.n	8003542 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003530:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003540:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003550:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355c:	2b40      	cmp	r3, #64	; 0x40
 800355e:	d008      	beq.n	8003572 <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	e000      	b.n	8003574 <HAL_SPI_Receive_IT+0x120>
  }

error :
 8003572:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800357c:	7dfb      	ldrb	r3, [r7, #23]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	08003ac9 	.word	0x08003ac9
 800358c:	08003a7f 	.word	0x08003a7f

08003590 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8003590:	b480      	push	{r7}
 8003592:	b087      	sub	sp, #28
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d101      	bne.n	80035b0 <HAL_SPI_TransmitReceive_IT+0x20>
 80035ac:	2302      	movs	r3, #2
 80035ae:	e075      	b.n	800369c <HAL_SPI_TransmitReceive_IT+0x10c>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035be:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80035c6:	7dbb      	ldrb	r3, [r7, #22]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d00d      	beq.n	80035e8 <HAL_SPI_TransmitReceive_IT+0x58>
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035d2:	d106      	bne.n	80035e2 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d102      	bne.n	80035e2 <HAL_SPI_TransmitReceive_IT+0x52>
 80035dc:	7dbb      	ldrb	r3, [r7, #22]
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d002      	beq.n	80035e8 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80035e2:	2302      	movs	r3, #2
 80035e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035e6:	e054      	b.n	8003692 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d005      	beq.n	80035fa <HAL_SPI_TransmitReceive_IT+0x6a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d002      	beq.n	80035fa <HAL_SPI_TransmitReceive_IT+0x6a>
 80035f4:	887b      	ldrh	r3, [r7, #2]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d102      	bne.n	8003600 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035fe:	e048      	b.n	8003692 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b04      	cmp	r3, #4
 800360a:	d003      	beq.n	8003614 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2205      	movs	r2, #5
 8003610:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	887a      	ldrh	r2, [r7, #2]
 8003624:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	887a      	ldrh	r2, [r7, #2]
 800362a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	887a      	ldrh	r2, [r7, #2]
 8003636:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	887a      	ldrh	r2, [r7, #2]
 800363c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d006      	beq.n	8003654 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4a17      	ldr	r2, [pc, #92]	; (80036a8 <HAL_SPI_TransmitReceive_IT+0x118>)
 800364a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4a17      	ldr	r2, [pc, #92]	; (80036ac <HAL_SPI_TransmitReceive_IT+0x11c>)
 8003650:	645a      	str	r2, [r3, #68]	; 0x44
 8003652:	e005      	b.n	8003660 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4a16      	ldr	r2, [pc, #88]	; (80036b0 <HAL_SPI_TransmitReceive_IT+0x120>)
 8003658:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4a15      	ldr	r2, [pc, #84]	; (80036b4 <HAL_SPI_TransmitReceive_IT+0x124>)
 800365e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800366e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367a:	2b40      	cmp	r3, #64	; 0x40
 800367c:	d008      	beq.n	8003690 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	e000      	b.n	8003692 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8003690:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800369a:	7dfb      	ldrb	r3, [r7, #23]
}
 800369c:	4618      	mov	r0, r3
 800369e:	371c      	adds	r7, #28
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	080039c1 	.word	0x080039c1
 80036ac:	08003a21 	.word	0x08003a21
 80036b0:	080038fd 	.word	0x080038fd
 80036b4:	08003961 	.word	0x08003961

080036b8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b088      	sub	sp, #32
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	099b      	lsrs	r3, r3, #6
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10f      	bne.n	80036fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	099b      	lsrs	r3, r3, #6
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d004      	beq.n	80036fc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	4798      	blx	r3
    return;
 80036fa:	e0d7      	b.n	80038ac <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	085b      	lsrs	r3, r3, #1
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <HAL_SPI_IRQHandler+0x66>
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	09db      	lsrs	r3, r3, #7
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b00      	cmp	r3, #0
 8003712:	d004      	beq.n	800371e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	4798      	blx	r3
    return;
 800371c:	e0c6      	b.n	80038ac <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	095b      	lsrs	r3, r3, #5
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10c      	bne.n	8003744 <HAL_SPI_IRQHandler+0x8c>
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	099b      	lsrs	r3, r3, #6
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	0a1b      	lsrs	r3, r3, #8
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 80b4 	beq.w	80038ac <HAL_SPI_IRQHandler+0x1f4>
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	095b      	lsrs	r3, r3, #5
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 80ad 	beq.w	80038ac <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	099b      	lsrs	r3, r3, #6
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d023      	beq.n	80037a6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b03      	cmp	r3, #3
 8003768:	d011      	beq.n	800378e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376e:	f043 0204 	orr.w	r2, r3, #4
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003776:	2300      	movs	r3, #0
 8003778:	617b      	str	r3, [r7, #20]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	617b      	str	r3, [r7, #20]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	617b      	str	r3, [r7, #20]
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	e00b      	b.n	80037a6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800378e:	2300      	movs	r3, #0
 8003790:	613b      	str	r3, [r7, #16]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	613b      	str	r3, [r7, #16]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	613b      	str	r3, [r7, #16]
 80037a2:	693b      	ldr	r3, [r7, #16]
        return;
 80037a4:	e082      	b.n	80038ac <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	095b      	lsrs	r3, r3, #5
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d014      	beq.n	80037dc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b6:	f043 0201 	orr.w	r2, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80037be:	2300      	movs	r3, #0
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	0a1b      	lsrs	r3, r3, #8
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00c      	beq.n	8003802 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ec:	f043 0208 	orr.w	r2, r3, #8
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80037f4:	2300      	movs	r3, #0
 80037f6:	60bb      	str	r3, [r7, #8]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	60bb      	str	r3, [r7, #8]
 8003800:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003806:	2b00      	cmp	r3, #0
 8003808:	d04f      	beq.n	80038aa <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003818:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d104      	bne.n	8003836 <HAL_SPI_IRQHandler+0x17e>
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	d034      	beq.n	80038a0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0203 	bic.w	r2, r2, #3
 8003844:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800384a:	2b00      	cmp	r3, #0
 800384c:	d011      	beq.n	8003872 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003852:	4a18      	ldr	r2, [pc, #96]	; (80038b4 <HAL_SPI_IRQHandler+0x1fc>)
 8003854:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385a:	4618      	mov	r0, r3
 800385c:	f7fe fa92 	bl	8001d84 <HAL_DMA_Abort_IT>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d005      	beq.n	8003872 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003876:	2b00      	cmp	r3, #0
 8003878:	d016      	beq.n	80038a8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800387e:	4a0d      	ldr	r2, [pc, #52]	; (80038b4 <HAL_SPI_IRQHandler+0x1fc>)
 8003880:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003886:	4618      	mov	r0, r3
 8003888:	f7fe fa7c 	bl	8001d84 <HAL_DMA_Abort_IT>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003896:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800389e:	e003      	b.n	80038a8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7fd fa3f 	bl	8000d24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80038a6:	e000      	b.n	80038aa <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80038a8:	bf00      	nop
    return;
 80038aa:	bf00      	nop
  }
}
 80038ac:	3720      	adds	r7, #32
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	080038d5 	.word	0x080038d5

080038b8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038c6:	b2db      	uxtb	r3, r3
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f7fd fa18 	bl	8000d24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80038f4:	bf00      	nop
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f103 020c 	add.w	r2, r3, #12
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003910:	7812      	ldrb	r2, [r2, #0]
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003924:	b29b      	uxth	r3, r3
 8003926:	3b01      	subs	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003932:	b29b      	uxth	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10f      	bne.n	8003958 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003946:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800394c:	b29b      	uxth	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d102      	bne.n	8003958 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 fa50 	bl	8003df8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003958:	bf00      	nop
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	330c      	adds	r3, #12
 8003972:	7812      	ldrb	r2, [r2, #0]
 8003974:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003984:	b29b      	uxth	r3, r3
 8003986:	3b01      	subs	r3, #1
 8003988:	b29a      	uxth	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003992:	b29b      	uxth	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10f      	bne.n	80039b8 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039a6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d102      	bne.n	80039b8 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 fa20 	bl	8003df8 <SPI_CloseRxTx_ISR>
    }
  }
}
 80039b8:	bf00      	nop
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d2:	b292      	uxth	r2, r2
 80039d4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039da:	1c9a      	adds	r2, r3, #2
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	3b01      	subs	r3, #1
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10f      	bne.n	8003a18 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a06:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d102      	bne.n	8003a18 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f9f0 	bl	8003df8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003a18:	bf00      	nop
 8003a1a:	3708      	adds	r7, #8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2c:	881a      	ldrh	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a38:	1c9a      	adds	r2, r3, #2
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	3b01      	subs	r3, #1
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10f      	bne.n	8003a76 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a64:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d102      	bne.n	8003a76 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f9c1 	bl	8003df8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003a76:	bf00      	nop
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b082      	sub	sp, #8
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f103 020c 	add.w	r2, r3, #12
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a92:	7812      	ldrb	r2, [r2, #0]
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9c:	1c5a      	adds	r2, r3, #1
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d102      	bne.n	8003ac0 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 fa10 	bl	8003ee0 <SPI_CloseRx_ISR>
  }
}
 8003ac0:	bf00      	nop
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ada:	b292      	uxth	r2, r2
 8003adc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae2:	1c9a      	adds	r2, r3, #2
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d102      	bne.n	8003b06 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f9ed 	bl	8003ee0 <SPI_CloseRx_ISR>
  }
}
 8003b06:	bf00      	nop
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b082      	sub	sp, #8
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	330c      	adds	r3, #12
 8003b20:	7812      	ldrb	r2, [r2, #0]
 8003b22:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b28:	1c5a      	adds	r2, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d102      	bne.n	8003b4c <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 fa0a 	bl	8003f60 <SPI_CloseTx_ISR>
  }
}
 8003b4c:	bf00      	nop
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b60:	881a      	ldrh	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6c:	1c9a      	adds	r2, r3, #2
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d102      	bne.n	8003b90 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f9e8 	bl	8003f60 <SPI_CloseTx_ISR>
  }
}
 8003b90:	bf00      	nop
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b088      	sub	sp, #32
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	603b      	str	r3, [r7, #0]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ba8:	f7fd fe34 	bl	8001814 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb0:	1a9b      	subs	r3, r3, r2
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003bb8:	f7fd fe2c 	bl	8001814 <HAL_GetTick>
 8003bbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003bbe:	4b39      	ldr	r3, [pc, #228]	; (8003ca4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	015b      	lsls	r3, r3, #5
 8003bc4:	0d1b      	lsrs	r3, r3, #20
 8003bc6:	69fa      	ldr	r2, [r7, #28]
 8003bc8:	fb02 f303 	mul.w	r3, r2, r3
 8003bcc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bce:	e054      	b.n	8003c7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd6:	d050      	beq.n	8003c7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bd8:	f7fd fe1c 	bl	8001814 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	69fa      	ldr	r2, [r7, #28]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d902      	bls.n	8003bee <SPI_WaitFlagStateUntilTimeout+0x56>
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d13d      	bne.n	8003c6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c06:	d111      	bne.n	8003c2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c10:	d004      	beq.n	8003c1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c1a:	d107      	bne.n	8003c2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c34:	d10f      	bne.n	8003c56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e017      	b.n	8003c9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	3b01      	subs	r3, #1
 8003c78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	4013      	ands	r3, r2
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	bf0c      	ite	eq
 8003c8a:	2301      	moveq	r3, #1
 8003c8c:	2300      	movne	r3, #0
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	461a      	mov	r2, r3
 8003c92:	79fb      	ldrb	r3, [r7, #7]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d19b      	bne.n	8003bd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3720      	adds	r7, #32
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	2000002c 	.word	0x2000002c

08003ca8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af02      	add	r7, sp, #8
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cbc:	d111      	bne.n	8003ce2 <SPI_EndRxTransaction+0x3a>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cc6:	d004      	beq.n	8003cd2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd0:	d107      	bne.n	8003ce2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ce0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cea:	d12a      	bne.n	8003d42 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf4:	d012      	beq.n	8003d1c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	2180      	movs	r1, #128	; 0x80
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f7ff ff49 	bl	8003b98 <SPI_WaitFlagStateUntilTimeout>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d02d      	beq.n	8003d68 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d10:	f043 0220 	orr.w	r2, r3, #32
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e026      	b.n	8003d6a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2200      	movs	r2, #0
 8003d24:	2101      	movs	r1, #1
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f7ff ff36 	bl	8003b98 <SPI_WaitFlagStateUntilTimeout>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d01a      	beq.n	8003d68 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d36:	f043 0220 	orr.w	r2, r3, #32
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e013      	b.n	8003d6a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f7ff ff23 	bl	8003b98 <SPI_WaitFlagStateUntilTimeout>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d007      	beq.n	8003d68 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5c:	f043 0220 	orr.w	r2, r3, #32
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e000      	b.n	8003d6a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
	...

08003d74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b088      	sub	sp, #32
 8003d78:	af02      	add	r7, sp, #8
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d80:	4b1b      	ldr	r3, [pc, #108]	; (8003df0 <SPI_EndRxTxTransaction+0x7c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a1b      	ldr	r2, [pc, #108]	; (8003df4 <SPI_EndRxTxTransaction+0x80>)
 8003d86:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8a:	0d5b      	lsrs	r3, r3, #21
 8003d8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d90:	fb02 f303 	mul.w	r3, r2, r3
 8003d94:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d9e:	d112      	bne.n	8003dc6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	2200      	movs	r2, #0
 8003da8:	2180      	movs	r1, #128	; 0x80
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f7ff fef4 	bl	8003b98 <SPI_WaitFlagStateUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d016      	beq.n	8003de4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dba:	f043 0220 	orr.w	r2, r3, #32
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e00f      	b.n	8003de6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00a      	beq.n	8003de2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ddc:	2b80      	cmp	r3, #128	; 0x80
 8003dde:	d0f2      	beq.n	8003dc6 <SPI_EndRxTxTransaction+0x52>
 8003de0:	e000      	b.n	8003de4 <SPI_EndRxTxTransaction+0x70>
        break;
 8003de2:	bf00      	nop
  }

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	2000002c 	.word	0x2000002c
 8003df4:	165e9f81 	.word	0x165e9f81

08003df8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003e00:	4b35      	ldr	r3, [pc, #212]	; (8003ed8 <SPI_CloseRxTx_ISR+0xe0>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a35      	ldr	r2, [pc, #212]	; (8003edc <SPI_CloseRxTx_ISR+0xe4>)
 8003e06:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0a:	0a5b      	lsrs	r3, r3, #9
 8003e0c:	2264      	movs	r2, #100	; 0x64
 8003e0e:	fb02 f303 	mul.w	r3, r2, r3
 8003e12:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e14:	f7fd fcfe 	bl	8001814 <HAL_GetTick>
 8003e18:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0220 	bic.w	r2, r2, #32
 8003e28:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d106      	bne.n	8003e3e <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e34:	f043 0220 	orr.w	r2, r3, #32
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e3c:	e009      	b.n	8003e52 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	3b01      	subs	r3, #1
 8003e42:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0eb      	beq.n	8003e2a <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	2164      	movs	r1, #100	; 0x64
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7ff ff8c 	bl	8003d74 <SPI_EndRxTxTransaction>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d005      	beq.n	8003e6e <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e66:	f043 0220 	orr.w	r2, r3, #32
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10a      	bne.n	8003e8c <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e76:	2300      	movs	r3, #0
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d115      	bne.n	8003ec0 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d107      	bne.n	8003eb0 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f7fc ff2b 	bl	8000d04 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003eae:	e00e      	b.n	8003ece <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f7fc ff09 	bl	8000cd0 <HAL_SPI_TxRxCpltCallback>
}
 8003ebe:	e006      	b.n	8003ece <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f7fc ff2b 	bl	8000d24 <HAL_SPI_ErrorCallback>
}
 8003ece:	bf00      	nop
 8003ed0:	3718      	adds	r7, #24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	2000002c 	.word	0x2000002c
 8003edc:	057619f1 	.word	0x057619f1

08003ee0 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ef6:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003ef8:	f7fd fc8c 	bl	8001814 <HAL_GetTick>
 8003efc:	4603      	mov	r3, r0
 8003efe:	461a      	mov	r2, r3
 8003f00:	2164      	movs	r1, #100	; 0x64
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7ff fed0 	bl	8003ca8 <SPI_EndRxTransaction>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d005      	beq.n	8003f1a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f12:	f043 0220 	orr.w	r2, r3, #32
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10a      	bne.n	8003f38 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f22:	2300      	movs	r3, #0
 8003f24:	60fb      	str	r3, [r7, #12]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	60fb      	str	r3, [r7, #12]
 8003f36:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d103      	bne.n	8003f50 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7fc fedb 	bl	8000d04 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003f4e:	e002      	b.n	8003f56 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f7fc fee7 	bl	8000d24 <HAL_SPI_ErrorCallback>
}
 8003f56:	bf00      	nop
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003f68:	4b2c      	ldr	r3, [pc, #176]	; (800401c <SPI_CloseTx_ISR+0xbc>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a2c      	ldr	r2, [pc, #176]	; (8004020 <SPI_CloseTx_ISR+0xc0>)
 8003f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f72:	0a5b      	lsrs	r3, r3, #9
 8003f74:	2264      	movs	r2, #100	; 0x64
 8003f76:	fb02 f303 	mul.w	r3, r2, r3
 8003f7a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f7c:	f7fd fc4a 	bl	8001814 <HAL_GetTick>
 8003f80:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d106      	bne.n	8003f96 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8c:	f043 0220 	orr.w	r2, r3, #32
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f94:	e009      	b.n	8003faa <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0eb      	beq.n	8003f82 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fb8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	2164      	movs	r1, #100	; 0x64
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7ff fed8 	bl	8003d74 <SPI_EndRxTxTransaction>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d005      	beq.n	8003fd6 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fce:	f043 0220 	orr.w	r2, r3, #32
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10a      	bne.n	8003ff4 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7fc fe8d 	bl	8000d24 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800400a:	e002      	b.n	8004012 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7fc fe69 	bl	8000ce4 <HAL_SPI_TxCpltCallback>
}
 8004012:	bf00      	nop
 8004014:	3718      	adds	r7, #24
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	2000002c 	.word	0x2000002c
 8004020:	057619f1 	.word	0x057619f1

08004024 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e03f      	b.n	80040b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d106      	bne.n	8004050 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7fd f88c 	bl	8001168 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2224      	movs	r2, #36	; 0x24
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004066:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 ff9b 	bl	8004fa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	691a      	ldr	r2, [r3, #16]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800407c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	695a      	ldr	r2, [r3, #20]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800408c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800409c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2220      	movs	r2, #32
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b08a      	sub	sp, #40	; 0x28
 80040c2:	af02      	add	r7, sp, #8
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	603b      	str	r3, [r7, #0]
 80040ca:	4613      	mov	r3, r2
 80040cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040ce:	2300      	movs	r3, #0
 80040d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b20      	cmp	r3, #32
 80040dc:	d17c      	bne.n	80041d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d002      	beq.n	80040ea <HAL_UART_Transmit+0x2c>
 80040e4:	88fb      	ldrh	r3, [r7, #6]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e075      	b.n	80041da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d101      	bne.n	80040fc <HAL_UART_Transmit+0x3e>
 80040f8:	2302      	movs	r3, #2
 80040fa:	e06e      	b.n	80041da <HAL_UART_Transmit+0x11c>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2221      	movs	r2, #33	; 0x21
 800410e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004112:	f7fd fb7f 	bl	8001814 <HAL_GetTick>
 8004116:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	88fa      	ldrh	r2, [r7, #6]
 800411c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	88fa      	ldrh	r2, [r7, #6]
 8004122:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800412c:	d108      	bne.n	8004140 <HAL_UART_Transmit+0x82>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d104      	bne.n	8004140 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004136:	2300      	movs	r3, #0
 8004138:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	61bb      	str	r3, [r7, #24]
 800413e:	e003      	b.n	8004148 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004144:	2300      	movs	r3, #0
 8004146:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004150:	e02a      	b.n	80041a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	2200      	movs	r2, #0
 800415a:	2180      	movs	r1, #128	; 0x80
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 fc53 	bl	8004a08 <UART_WaitOnFlagUntilTimeout>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e036      	b.n	80041da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10b      	bne.n	800418a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	461a      	mov	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004180:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	3302      	adds	r3, #2
 8004186:	61bb      	str	r3, [r7, #24]
 8004188:	e007      	b.n	800419a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	781a      	ldrb	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	3301      	adds	r3, #1
 8004198:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1cf      	bne.n	8004152 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	2200      	movs	r2, #0
 80041ba:	2140      	movs	r1, #64	; 0x40
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 fc23 	bl	8004a08 <UART_WaitOnFlagUntilTimeout>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e006      	b.n	80041da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041d4:	2300      	movs	r3, #0
 80041d6:	e000      	b.n	80041da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80041d8:	2302      	movs	r3, #2
  }
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3720      	adds	r7, #32
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b08c      	sub	sp, #48	; 0x30
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	60f8      	str	r0, [r7, #12]
 80041ea:	60b9      	str	r1, [r7, #8]
 80041ec:	4613      	mov	r3, r2
 80041ee:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b20      	cmp	r3, #32
 80041fa:	d152      	bne.n	80042a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d002      	beq.n	8004208 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004202:	88fb      	ldrh	r3, [r7, #6]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e04b      	b.n	80042a4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004212:	2b01      	cmp	r3, #1
 8004214:	d101      	bne.n	800421a <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8004216:	2302      	movs	r3, #2
 8004218:	e044      	b.n	80042a4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2201      	movs	r2, #1
 8004226:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004228:	88fb      	ldrh	r3, [r7, #6]
 800422a:	461a      	mov	r2, r3
 800422c:	68b9      	ldr	r1, [r7, #8]
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 fc58 	bl	8004ae4 <UART_Start_Receive_DMA>
 8004234:	4603      	mov	r3, r0
 8004236:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800423a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800423e:	2b00      	cmp	r3, #0
 8004240:	d12c      	bne.n	800429c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004246:	2b01      	cmp	r3, #1
 8004248:	d125      	bne.n	8004296 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800424a:	2300      	movs	r3, #0
 800424c:	613b      	str	r3, [r7, #16]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	613b      	str	r3, [r7, #16]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	613b      	str	r3, [r7, #16]
 800425e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	330c      	adds	r3, #12
 8004266:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	e853 3f00 	ldrex	r3, [r3]
 800426e:	617b      	str	r3, [r7, #20]
   return(result);
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f043 0310 	orr.w	r3, r3, #16
 8004276:	62bb      	str	r3, [r7, #40]	; 0x28
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	330c      	adds	r3, #12
 800427e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004280:	627a      	str	r2, [r7, #36]	; 0x24
 8004282:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004284:	6a39      	ldr	r1, [r7, #32]
 8004286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004288:	e841 2300 	strex	r3, r2, [r1]
 800428c:	61fb      	str	r3, [r7, #28]
   return(result);
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1e5      	bne.n	8004260 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8004294:	e002      	b.n	800429c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800429c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80042a0:	e000      	b.n	80042a4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80042a2:	2302      	movs	r3, #2
  }
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3730      	adds	r7, #48	; 0x30
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b0ba      	sub	sp, #232	; 0xe8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80042d8:	2300      	movs	r3, #0
 80042da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042e2:	f003 030f 	and.w	r3, r3, #15
 80042e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80042ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10f      	bne.n	8004312 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042f6:	f003 0320 	and.w	r3, r3, #32
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d009      	beq.n	8004312 <HAL_UART_IRQHandler+0x66>
 80042fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004302:	f003 0320 	and.w	r3, r3, #32
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 fd8f 	bl	8004e2e <UART_Receive_IT>
      return;
 8004310:	e256      	b.n	80047c0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004312:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 80de 	beq.w	80044d8 <HAL_UART_IRQHandler+0x22c>
 800431c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b00      	cmp	r3, #0
 8004326:	d106      	bne.n	8004336 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800432c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 80d1 	beq.w	80044d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00b      	beq.n	800435a <HAL_UART_IRQHandler+0xae>
 8004342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434a:	2b00      	cmp	r3, #0
 800434c:	d005      	beq.n	800435a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	f043 0201 	orr.w	r2, r3, #1
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800435a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800435e:	f003 0304 	and.w	r3, r3, #4
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00b      	beq.n	800437e <HAL_UART_IRQHandler+0xd2>
 8004366:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d005      	beq.n	800437e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	f043 0202 	orr.w	r2, r3, #2
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800437e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00b      	beq.n	80043a2 <HAL_UART_IRQHandler+0xf6>
 800438a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d005      	beq.n	80043a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	f043 0204 	orr.w	r2, r3, #4
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80043a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043a6:	f003 0308 	and.w	r3, r3, #8
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d011      	beq.n	80043d2 <HAL_UART_IRQHandler+0x126>
 80043ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043b2:	f003 0320 	and.w	r3, r3, #32
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d105      	bne.n	80043c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d005      	beq.n	80043d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	f043 0208 	orr.w	r2, r3, #8
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f000 81ed 	beq.w	80047b6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043e0:	f003 0320 	and.w	r3, r3, #32
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d008      	beq.n	80043fa <HAL_UART_IRQHandler+0x14e>
 80043e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ec:	f003 0320 	and.w	r3, r3, #32
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d002      	beq.n	80043fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 fd1a 	bl	8004e2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004404:	2b40      	cmp	r3, #64	; 0x40
 8004406:	bf0c      	ite	eq
 8004408:	2301      	moveq	r3, #1
 800440a:	2300      	movne	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	f003 0308 	and.w	r3, r3, #8
 800441a:	2b00      	cmp	r3, #0
 800441c:	d103      	bne.n	8004426 <HAL_UART_IRQHandler+0x17a>
 800441e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004422:	2b00      	cmp	r3, #0
 8004424:	d04f      	beq.n	80044c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fc22 	bl	8004c70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004436:	2b40      	cmp	r3, #64	; 0x40
 8004438:	d141      	bne.n	80044be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	3314      	adds	r3, #20
 8004440:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004444:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004448:	e853 3f00 	ldrex	r3, [r3]
 800444c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004450:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004454:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004458:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3314      	adds	r3, #20
 8004462:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004466:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800446a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004472:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004476:	e841 2300 	strex	r3, r2, [r1]
 800447a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800447e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1d9      	bne.n	800443a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448a:	2b00      	cmp	r3, #0
 800448c:	d013      	beq.n	80044b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004492:	4a7d      	ldr	r2, [pc, #500]	; (8004688 <HAL_UART_IRQHandler+0x3dc>)
 8004494:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449a:	4618      	mov	r0, r3
 800449c:	f7fd fc72 	bl	8001d84 <HAL_DMA_Abort_IT>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d016      	beq.n	80044d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044b0:	4610      	mov	r0, r2
 80044b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b4:	e00e      	b.n	80044d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f9a4 	bl	8004804 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044bc:	e00a      	b.n	80044d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f9a0 	bl	8004804 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044c4:	e006      	b.n	80044d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f99c 	bl	8004804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80044d2:	e170      	b.n	80047b6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d4:	bf00      	nop
    return;
 80044d6:	e16e      	b.n	80047b6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044dc:	2b01      	cmp	r3, #1
 80044de:	f040 814a 	bne.w	8004776 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044e6:	f003 0310 	and.w	r3, r3, #16
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 8143 	beq.w	8004776 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80044f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044f4:	f003 0310 	and.w	r3, r3, #16
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 813c 	beq.w	8004776 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044fe:	2300      	movs	r3, #0
 8004500:	60bb      	str	r3, [r7, #8]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	60bb      	str	r3, [r7, #8]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	60bb      	str	r3, [r7, #8]
 8004512:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451e:	2b40      	cmp	r3, #64	; 0x40
 8004520:	f040 80b4 	bne.w	800468c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004530:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 8140 	beq.w	80047ba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800453e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004542:	429a      	cmp	r2, r3
 8004544:	f080 8139 	bcs.w	80047ba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800454e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800455a:	f000 8088 	beq.w	800466e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	330c      	adds	r3, #12
 8004564:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004568:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800456c:	e853 3f00 	ldrex	r3, [r3]
 8004570:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004574:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004578:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800457c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	330c      	adds	r3, #12
 8004586:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800458a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800458e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004592:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004596:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800459a:	e841 2300 	strex	r3, r2, [r1]
 800459e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80045a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1d9      	bne.n	800455e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	3314      	adds	r3, #20
 80045b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045b4:	e853 3f00 	ldrex	r3, [r3]
 80045b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80045ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045bc:	f023 0301 	bic.w	r3, r3, #1
 80045c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3314      	adds	r3, #20
 80045ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80045d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80045d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80045da:	e841 2300 	strex	r3, r2, [r1]
 80045de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80045e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1e1      	bne.n	80045aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	3314      	adds	r3, #20
 80045ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045f0:	e853 3f00 	ldrex	r3, [r3]
 80045f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80045f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	3314      	adds	r3, #20
 8004606:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800460a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800460c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004610:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004612:	e841 2300 	strex	r3, r2, [r1]
 8004616:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004618:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1e3      	bne.n	80045e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2220      	movs	r2, #32
 8004622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	330c      	adds	r3, #12
 8004632:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004636:	e853 3f00 	ldrex	r3, [r3]
 800463a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800463c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800463e:	f023 0310 	bic.w	r3, r3, #16
 8004642:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	330c      	adds	r3, #12
 800464c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004650:	65ba      	str	r2, [r7, #88]	; 0x58
 8004652:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004654:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004656:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004658:	e841 2300 	strex	r3, r2, [r1]
 800465c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800465e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1e3      	bne.n	800462c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004668:	4618      	mov	r0, r3
 800466a:	f7fd fb1b 	bl	8001ca4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004676:	b29b      	uxth	r3, r3
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	b29b      	uxth	r3, r3
 800467c:	4619      	mov	r1, r3
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7fc fc96 	bl	8000fb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004684:	e099      	b.n	80047ba <HAL_UART_IRQHandler+0x50e>
 8004686:	bf00      	nop
 8004688:	08004d37 	.word	0x08004d37
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004694:	b29b      	uxth	r3, r3
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 808b 	beq.w	80047be <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80046a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 8086 	beq.w	80047be <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	330c      	adds	r3, #12
 80046b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046bc:	e853 3f00 	ldrex	r3, [r3]
 80046c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	330c      	adds	r3, #12
 80046d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80046d6:	647a      	str	r2, [r7, #68]	; 0x44
 80046d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046de:	e841 2300 	strex	r3, r2, [r1]
 80046e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1e3      	bne.n	80046b2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	3314      	adds	r3, #20
 80046f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f4:	e853 3f00 	ldrex	r3, [r3]
 80046f8:	623b      	str	r3, [r7, #32]
   return(result);
 80046fa:	6a3b      	ldr	r3, [r7, #32]
 80046fc:	f023 0301 	bic.w	r3, r3, #1
 8004700:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	3314      	adds	r3, #20
 800470a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800470e:	633a      	str	r2, [r7, #48]	; 0x30
 8004710:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004712:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004716:	e841 2300 	strex	r3, r2, [r1]
 800471a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800471c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1e3      	bne.n	80046ea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2220      	movs	r2, #32
 8004726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	330c      	adds	r3, #12
 8004736:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	e853 3f00 	ldrex	r3, [r3]
 800473e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f023 0310 	bic.w	r3, r3, #16
 8004746:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	330c      	adds	r3, #12
 8004750:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004754:	61fa      	str	r2, [r7, #28]
 8004756:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004758:	69b9      	ldr	r1, [r7, #24]
 800475a:	69fa      	ldr	r2, [r7, #28]
 800475c:	e841 2300 	strex	r3, r2, [r1]
 8004760:	617b      	str	r3, [r7, #20]
   return(result);
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1e3      	bne.n	8004730 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004768:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800476c:	4619      	mov	r1, r3
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7fc fc1e 	bl	8000fb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004774:	e023      	b.n	80047be <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800477a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800477e:	2b00      	cmp	r3, #0
 8004780:	d009      	beq.n	8004796 <HAL_UART_IRQHandler+0x4ea>
 8004782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fae5 	bl	8004d5e <UART_Transmit_IT>
    return;
 8004794:	e014      	b.n	80047c0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800479a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00e      	beq.n	80047c0 <HAL_UART_IRQHandler+0x514>
 80047a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d008      	beq.n	80047c0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 fb25 	bl	8004dfe <UART_EndTransmit_IT>
    return;
 80047b4:	e004      	b.n	80047c0 <HAL_UART_IRQHandler+0x514>
    return;
 80047b6:	bf00      	nop
 80047b8:	e002      	b.n	80047c0 <HAL_UART_IRQHandler+0x514>
      return;
 80047ba:	bf00      	nop
 80047bc:	e000      	b.n	80047c0 <HAL_UART_IRQHandler+0x514>
      return;
 80047be:	bf00      	nop
  }
}
 80047c0:	37e8      	adds	r7, #232	; 0xe8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop

080047c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b09c      	sub	sp, #112	; 0x70
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004824:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004830:	2b00      	cmp	r3, #0
 8004832:	d172      	bne.n	800491a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004836:	2200      	movs	r2, #0
 8004838:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800483a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	330c      	adds	r3, #12
 8004840:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004844:	e853 3f00 	ldrex	r3, [r3]
 8004848:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800484a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800484c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004850:	66bb      	str	r3, [r7, #104]	; 0x68
 8004852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	330c      	adds	r3, #12
 8004858:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800485a:	65ba      	str	r2, [r7, #88]	; 0x58
 800485c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004860:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004862:	e841 2300 	strex	r3, r2, [r1]
 8004866:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1e5      	bne.n	800483a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800486e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3314      	adds	r3, #20
 8004874:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004878:	e853 3f00 	ldrex	r3, [r3]
 800487c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800487e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004880:	f023 0301 	bic.w	r3, r3, #1
 8004884:	667b      	str	r3, [r7, #100]	; 0x64
 8004886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	3314      	adds	r3, #20
 800488c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800488e:	647a      	str	r2, [r7, #68]	; 0x44
 8004890:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004892:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004894:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004896:	e841 2300 	strex	r3, r2, [r1]
 800489a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800489c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1e5      	bne.n	800486e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	3314      	adds	r3, #20
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	e853 3f00 	ldrex	r3, [r3]
 80048b0:	623b      	str	r3, [r7, #32]
   return(result);
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048b8:	663b      	str	r3, [r7, #96]	; 0x60
 80048ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	3314      	adds	r3, #20
 80048c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048c2:	633a      	str	r2, [r7, #48]	; 0x30
 80048c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ca:	e841 2300 	strex	r3, r2, [r1]
 80048ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1e5      	bne.n	80048a2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80048d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d8:	2220      	movs	r2, #32
 80048da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d119      	bne.n	800491a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	330c      	adds	r3, #12
 80048ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	e853 3f00 	ldrex	r3, [r3]
 80048f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f023 0310 	bic.w	r3, r3, #16
 80048fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	330c      	adds	r3, #12
 8004904:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004906:	61fa      	str	r2, [r7, #28]
 8004908:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490a:	69b9      	ldr	r1, [r7, #24]
 800490c:	69fa      	ldr	r2, [r7, #28]
 800490e:	e841 2300 	strex	r3, r2, [r1]
 8004912:	617b      	str	r3, [r7, #20]
   return(result);
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1e5      	bne.n	80048e6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800491a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800491c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491e:	2b01      	cmp	r3, #1
 8004920:	d106      	bne.n	8004930 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004924:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004926:	4619      	mov	r1, r3
 8004928:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800492a:	f7fc fb41 	bl	8000fb0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800492e:	e002      	b.n	8004936 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004930:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004932:	f7ff ff53 	bl	80047dc <HAL_UART_RxCpltCallback>
}
 8004936:	bf00      	nop
 8004938:	3770      	adds	r7, #112	; 0x70
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b084      	sub	sp, #16
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004950:	2b01      	cmp	r3, #1
 8004952:	d108      	bne.n	8004966 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004958:	085b      	lsrs	r3, r3, #1
 800495a:	b29b      	uxth	r3, r3
 800495c:	4619      	mov	r1, r3
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f7fc fb26 	bl	8000fb0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004964:	e002      	b.n	800496c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f7ff ff42 	bl	80047f0 <HAL_UART_RxHalfCpltCallback>
}
 800496c:	bf00      	nop
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800497c:	2300      	movs	r3, #0
 800497e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004984:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004990:	2b80      	cmp	r3, #128	; 0x80
 8004992:	bf0c      	ite	eq
 8004994:	2301      	moveq	r3, #1
 8004996:	2300      	movne	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b21      	cmp	r3, #33	; 0x21
 80049a6:	d108      	bne.n	80049ba <UART_DMAError+0x46>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d005      	beq.n	80049ba <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2200      	movs	r2, #0
 80049b2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80049b4:	68b8      	ldr	r0, [r7, #8]
 80049b6:	f000 f933 	bl	8004c20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c4:	2b40      	cmp	r3, #64	; 0x40
 80049c6:	bf0c      	ite	eq
 80049c8:	2301      	moveq	r3, #1
 80049ca:	2300      	movne	r3, #0
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b22      	cmp	r3, #34	; 0x22
 80049da:	d108      	bne.n	80049ee <UART_DMAError+0x7a>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d005      	beq.n	80049ee <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2200      	movs	r2, #0
 80049e6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80049e8:	68b8      	ldr	r0, [r7, #8]
 80049ea:	f000 f941 	bl	8004c70 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	f043 0210 	orr.w	r2, r3, #16
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049fa:	68b8      	ldr	r0, [r7, #8]
 80049fc:	f7ff ff02 	bl	8004804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a00:	bf00      	nop
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b090      	sub	sp, #64	; 0x40
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	603b      	str	r3, [r7, #0]
 8004a14:	4613      	mov	r3, r2
 8004a16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a18:	e050      	b.n	8004abc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a20:	d04c      	beq.n	8004abc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d007      	beq.n	8004a38 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a28:	f7fc fef4 	bl	8001814 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d241      	bcs.n	8004abc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	330c      	adds	r3, #12
 8004a3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a42:	e853 3f00 	ldrex	r3, [r3]
 8004a46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	330c      	adds	r3, #12
 8004a56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a58:	637a      	str	r2, [r7, #52]	; 0x34
 8004a5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a60:	e841 2300 	strex	r3, r2, [r1]
 8004a64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1e5      	bne.n	8004a38 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	3314      	adds	r3, #20
 8004a72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	e853 3f00 	ldrex	r3, [r3]
 8004a7a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f023 0301 	bic.w	r3, r3, #1
 8004a82:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	3314      	adds	r3, #20
 8004a8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a8c:	623a      	str	r2, [r7, #32]
 8004a8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a90:	69f9      	ldr	r1, [r7, #28]
 8004a92:	6a3a      	ldr	r2, [r7, #32]
 8004a94:	e841 2300 	strex	r3, r2, [r1]
 8004a98:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1e5      	bne.n	8004a6c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e00f      	b.n	8004adc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	bf0c      	ite	eq
 8004acc:	2301      	moveq	r3, #1
 8004ace:	2300      	movne	r3, #0
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	79fb      	ldrb	r3, [r7, #7]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d09f      	beq.n	8004a1a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3740      	adds	r7, #64	; 0x40
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b098      	sub	sp, #96	; 0x60
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	4613      	mov	r3, r2
 8004af0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	88fa      	ldrh	r2, [r7, #6]
 8004afc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2222      	movs	r2, #34	; 0x22
 8004b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b10:	4a40      	ldr	r2, [pc, #256]	; (8004c14 <UART_Start_Receive_DMA+0x130>)
 8004b12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b18:	4a3f      	ldr	r2, [pc, #252]	; (8004c18 <UART_Start_Receive_DMA+0x134>)
 8004b1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b20:	4a3e      	ldr	r2, [pc, #248]	; (8004c1c <UART_Start_Receive_DMA+0x138>)
 8004b22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b28:	2200      	movs	r2, #0
 8004b2a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004b2c:	f107 0308 	add.w	r3, r7, #8
 8004b30:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	3304      	adds	r3, #4
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	88fb      	ldrh	r3, [r7, #6]
 8004b44:	f7fd f856 	bl	8001bf4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004b48:	2300      	movs	r3, #0
 8004b4a:	613b      	str	r3, [r7, #16]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	613b      	str	r3, [r7, #16]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	613b      	str	r3, [r7, #16]
 8004b5c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d019      	beq.n	8004ba2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	330c      	adds	r3, #12
 8004b74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b78:	e853 3f00 	ldrex	r3, [r3]
 8004b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b84:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	330c      	adds	r3, #12
 8004b8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b8e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004b90:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b92:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004b94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b96:	e841 2300 	strex	r3, r2, [r1]
 8004b9a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1e5      	bne.n	8004b6e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	3314      	adds	r3, #20
 8004ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bac:	e853 3f00 	ldrex	r3, [r3]
 8004bb0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb4:	f043 0301 	orr.w	r3, r3, #1
 8004bb8:	657b      	str	r3, [r7, #84]	; 0x54
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	3314      	adds	r3, #20
 8004bc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004bc2:	63ba      	str	r2, [r7, #56]	; 0x38
 8004bc4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004bc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bca:	e841 2300 	strex	r3, r2, [r1]
 8004bce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1e5      	bne.n	8004ba2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	3314      	adds	r3, #20
 8004bdc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	e853 3f00 	ldrex	r3, [r3]
 8004be4:	617b      	str	r3, [r7, #20]
   return(result);
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bec:	653b      	str	r3, [r7, #80]	; 0x50
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	3314      	adds	r3, #20
 8004bf4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004bf6:	627a      	str	r2, [r7, #36]	; 0x24
 8004bf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfa:	6a39      	ldr	r1, [r7, #32]
 8004bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bfe:	e841 2300 	strex	r3, r2, [r1]
 8004c02:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1e5      	bne.n	8004bd6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3760      	adds	r7, #96	; 0x60
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	08004819 	.word	0x08004819
 8004c18:	0800493f 	.word	0x0800493f
 8004c1c:	08004975 	.word	0x08004975

08004c20 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b089      	sub	sp, #36	; 0x24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	330c      	adds	r3, #12
 8004c2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	e853 3f00 	ldrex	r3, [r3]
 8004c36:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004c3e:	61fb      	str	r3, [r7, #28]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	330c      	adds	r3, #12
 8004c46:	69fa      	ldr	r2, [r7, #28]
 8004c48:	61ba      	str	r2, [r7, #24]
 8004c4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4c:	6979      	ldr	r1, [r7, #20]
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	e841 2300 	strex	r3, r2, [r1]
 8004c54:	613b      	str	r3, [r7, #16]
   return(result);
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1e5      	bne.n	8004c28 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004c64:	bf00      	nop
 8004c66:	3724      	adds	r7, #36	; 0x24
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b095      	sub	sp, #84	; 0x54
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	330c      	adds	r3, #12
 8004c7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c82:	e853 3f00 	ldrex	r3, [r3]
 8004c86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	330c      	adds	r3, #12
 8004c96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c98:	643a      	str	r2, [r7, #64]	; 0x40
 8004c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ca0:	e841 2300 	strex	r3, r2, [r1]
 8004ca4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1e5      	bne.n	8004c78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	3314      	adds	r3, #20
 8004cb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	e853 3f00 	ldrex	r3, [r3]
 8004cba:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	f023 0301 	bic.w	r3, r3, #1
 8004cc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3314      	adds	r3, #20
 8004cca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ccc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cd4:	e841 2300 	strex	r3, r2, [r1]
 8004cd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1e5      	bne.n	8004cac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d119      	bne.n	8004d1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	330c      	adds	r3, #12
 8004cee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	e853 3f00 	ldrex	r3, [r3]
 8004cf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f023 0310 	bic.w	r3, r3, #16
 8004cfe:	647b      	str	r3, [r7, #68]	; 0x44
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	330c      	adds	r3, #12
 8004d06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d08:	61ba      	str	r2, [r7, #24]
 8004d0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0c:	6979      	ldr	r1, [r7, #20]
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	e841 2300 	strex	r3, r2, [r1]
 8004d14:	613b      	str	r3, [r7, #16]
   return(result);
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1e5      	bne.n	8004ce8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d2a:	bf00      	nop
 8004d2c:	3754      	adds	r7, #84	; 0x54
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b084      	sub	sp, #16
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f7ff fd57 	bl	8004804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d56:	bf00      	nop
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b085      	sub	sp, #20
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b21      	cmp	r3, #33	; 0x21
 8004d70:	d13e      	bne.n	8004df0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d7a:	d114      	bne.n	8004da6 <UART_Transmit_IT+0x48>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d110      	bne.n	8004da6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d98:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	1c9a      	adds	r2, r3, #2
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	621a      	str	r2, [r3, #32]
 8004da4:	e008      	b.n	8004db8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	1c59      	adds	r1, r3, #1
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6211      	str	r1, [r2, #32]
 8004db0:	781a      	ldrb	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10f      	bne.n	8004dec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68da      	ldr	r2, [r3, #12]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dda:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68da      	ldr	r2, [r3, #12]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004dec:	2300      	movs	r3, #0
 8004dee:	e000      	b.n	8004df2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004df0:	2302      	movs	r3, #2
  }
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b082      	sub	sp, #8
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68da      	ldr	r2, [r3, #12]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7ff fcd2 	bl	80047c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b08c      	sub	sp, #48	; 0x30
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b22      	cmp	r3, #34	; 0x22
 8004e40:	f040 80ab 	bne.w	8004f9a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e4c:	d117      	bne.n	8004e7e <UART_Receive_IT+0x50>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d113      	bne.n	8004e7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e56:	2300      	movs	r3, #0
 8004e58:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e76:	1c9a      	adds	r2, r3, #2
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	629a      	str	r2, [r3, #40]	; 0x28
 8004e7c:	e026      	b.n	8004ecc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e82:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004e84:	2300      	movs	r3, #0
 8004e86:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e90:	d007      	beq.n	8004ea2 <UART_Receive_IT+0x74>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10a      	bne.n	8004eb0 <UART_Receive_IT+0x82>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d106      	bne.n	8004eb0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eac:	701a      	strb	r2, [r3, #0]
 8004eae:	e008      	b.n	8004ec2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec6:	1c5a      	adds	r2, r3, #1
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	4619      	mov	r1, r3
 8004eda:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d15a      	bne.n	8004f96 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68da      	ldr	r2, [r3, #12]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 0220 	bic.w	r2, r2, #32
 8004eee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68da      	ldr	r2, [r3, #12]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004efe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	695a      	ldr	r2, [r3, #20]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 0201 	bic.w	r2, r2, #1
 8004f0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2220      	movs	r2, #32
 8004f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d135      	bne.n	8004f8c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	330c      	adds	r3, #12
 8004f2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	e853 3f00 	ldrex	r3, [r3]
 8004f34:	613b      	str	r3, [r7, #16]
   return(result);
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	f023 0310 	bic.w	r3, r3, #16
 8004f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	330c      	adds	r3, #12
 8004f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f46:	623a      	str	r2, [r7, #32]
 8004f48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4a:	69f9      	ldr	r1, [r7, #28]
 8004f4c:	6a3a      	ldr	r2, [r7, #32]
 8004f4e:	e841 2300 	strex	r3, r2, [r1]
 8004f52:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1e5      	bne.n	8004f26 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0310 	and.w	r3, r3, #16
 8004f64:	2b10      	cmp	r3, #16
 8004f66:	d10a      	bne.n	8004f7e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f82:	4619      	mov	r1, r3
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7fc f813 	bl	8000fb0 <HAL_UARTEx_RxEventCallback>
 8004f8a:	e002      	b.n	8004f92 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f7ff fc25 	bl	80047dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f92:	2300      	movs	r3, #0
 8004f94:	e002      	b.n	8004f9c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	e000      	b.n	8004f9c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004f9a:	2302      	movs	r3, #2
  }
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3730      	adds	r7, #48	; 0x30
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fa8:	b0c0      	sub	sp, #256	; 0x100
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc0:	68d9      	ldr	r1, [r3, #12]
 8004fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	ea40 0301 	orr.w	r3, r0, r1
 8004fcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ffc:	f021 010c 	bic.w	r1, r1, #12
 8005000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800500a:	430b      	orrs	r3, r1
 800500c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800500e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800501a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800501e:	6999      	ldr	r1, [r3, #24]
 8005020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	ea40 0301 	orr.w	r3, r0, r1
 800502a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800502c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	4b8f      	ldr	r3, [pc, #572]	; (8005270 <UART_SetConfig+0x2cc>)
 8005034:	429a      	cmp	r2, r3
 8005036:	d005      	beq.n	8005044 <UART_SetConfig+0xa0>
 8005038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	4b8d      	ldr	r3, [pc, #564]	; (8005274 <UART_SetConfig+0x2d0>)
 8005040:	429a      	cmp	r2, r3
 8005042:	d104      	bne.n	800504e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005044:	f7fd fc10 	bl	8002868 <HAL_RCC_GetPCLK2Freq>
 8005048:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800504c:	e003      	b.n	8005056 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800504e:	f7fd fbf7 	bl	8002840 <HAL_RCC_GetPCLK1Freq>
 8005052:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505a:	69db      	ldr	r3, [r3, #28]
 800505c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005060:	f040 810c 	bne.w	800527c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005064:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005068:	2200      	movs	r2, #0
 800506a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800506e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005072:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005076:	4622      	mov	r2, r4
 8005078:	462b      	mov	r3, r5
 800507a:	1891      	adds	r1, r2, r2
 800507c:	65b9      	str	r1, [r7, #88]	; 0x58
 800507e:	415b      	adcs	r3, r3
 8005080:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005082:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005086:	4621      	mov	r1, r4
 8005088:	eb12 0801 	adds.w	r8, r2, r1
 800508c:	4629      	mov	r1, r5
 800508e:	eb43 0901 	adc.w	r9, r3, r1
 8005092:	f04f 0200 	mov.w	r2, #0
 8005096:	f04f 0300 	mov.w	r3, #0
 800509a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800509e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050a6:	4690      	mov	r8, r2
 80050a8:	4699      	mov	r9, r3
 80050aa:	4623      	mov	r3, r4
 80050ac:	eb18 0303 	adds.w	r3, r8, r3
 80050b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80050b4:	462b      	mov	r3, r5
 80050b6:	eb49 0303 	adc.w	r3, r9, r3
 80050ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80050be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80050ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80050ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80050d2:	460b      	mov	r3, r1
 80050d4:	18db      	adds	r3, r3, r3
 80050d6:	653b      	str	r3, [r7, #80]	; 0x50
 80050d8:	4613      	mov	r3, r2
 80050da:	eb42 0303 	adc.w	r3, r2, r3
 80050de:	657b      	str	r3, [r7, #84]	; 0x54
 80050e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80050e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80050e8:	f7fb f88c 	bl	8000204 <__aeabi_uldivmod>
 80050ec:	4602      	mov	r2, r0
 80050ee:	460b      	mov	r3, r1
 80050f0:	4b61      	ldr	r3, [pc, #388]	; (8005278 <UART_SetConfig+0x2d4>)
 80050f2:	fba3 2302 	umull	r2, r3, r3, r2
 80050f6:	095b      	lsrs	r3, r3, #5
 80050f8:	011c      	lsls	r4, r3, #4
 80050fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050fe:	2200      	movs	r2, #0
 8005100:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005104:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005108:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800510c:	4642      	mov	r2, r8
 800510e:	464b      	mov	r3, r9
 8005110:	1891      	adds	r1, r2, r2
 8005112:	64b9      	str	r1, [r7, #72]	; 0x48
 8005114:	415b      	adcs	r3, r3
 8005116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005118:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800511c:	4641      	mov	r1, r8
 800511e:	eb12 0a01 	adds.w	sl, r2, r1
 8005122:	4649      	mov	r1, r9
 8005124:	eb43 0b01 	adc.w	fp, r3, r1
 8005128:	f04f 0200 	mov.w	r2, #0
 800512c:	f04f 0300 	mov.w	r3, #0
 8005130:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005134:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005138:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800513c:	4692      	mov	sl, r2
 800513e:	469b      	mov	fp, r3
 8005140:	4643      	mov	r3, r8
 8005142:	eb1a 0303 	adds.w	r3, sl, r3
 8005146:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800514a:	464b      	mov	r3, r9
 800514c:	eb4b 0303 	adc.w	r3, fp, r3
 8005150:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005160:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005164:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005168:	460b      	mov	r3, r1
 800516a:	18db      	adds	r3, r3, r3
 800516c:	643b      	str	r3, [r7, #64]	; 0x40
 800516e:	4613      	mov	r3, r2
 8005170:	eb42 0303 	adc.w	r3, r2, r3
 8005174:	647b      	str	r3, [r7, #68]	; 0x44
 8005176:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800517a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800517e:	f7fb f841 	bl	8000204 <__aeabi_uldivmod>
 8005182:	4602      	mov	r2, r0
 8005184:	460b      	mov	r3, r1
 8005186:	4611      	mov	r1, r2
 8005188:	4b3b      	ldr	r3, [pc, #236]	; (8005278 <UART_SetConfig+0x2d4>)
 800518a:	fba3 2301 	umull	r2, r3, r3, r1
 800518e:	095b      	lsrs	r3, r3, #5
 8005190:	2264      	movs	r2, #100	; 0x64
 8005192:	fb02 f303 	mul.w	r3, r2, r3
 8005196:	1acb      	subs	r3, r1, r3
 8005198:	00db      	lsls	r3, r3, #3
 800519a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800519e:	4b36      	ldr	r3, [pc, #216]	; (8005278 <UART_SetConfig+0x2d4>)
 80051a0:	fba3 2302 	umull	r2, r3, r3, r2
 80051a4:	095b      	lsrs	r3, r3, #5
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051ac:	441c      	add	r4, r3
 80051ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051b2:	2200      	movs	r2, #0
 80051b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80051bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80051c0:	4642      	mov	r2, r8
 80051c2:	464b      	mov	r3, r9
 80051c4:	1891      	adds	r1, r2, r2
 80051c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80051c8:	415b      	adcs	r3, r3
 80051ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80051d0:	4641      	mov	r1, r8
 80051d2:	1851      	adds	r1, r2, r1
 80051d4:	6339      	str	r1, [r7, #48]	; 0x30
 80051d6:	4649      	mov	r1, r9
 80051d8:	414b      	adcs	r3, r1
 80051da:	637b      	str	r3, [r7, #52]	; 0x34
 80051dc:	f04f 0200 	mov.w	r2, #0
 80051e0:	f04f 0300 	mov.w	r3, #0
 80051e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80051e8:	4659      	mov	r1, fp
 80051ea:	00cb      	lsls	r3, r1, #3
 80051ec:	4651      	mov	r1, sl
 80051ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051f2:	4651      	mov	r1, sl
 80051f4:	00ca      	lsls	r2, r1, #3
 80051f6:	4610      	mov	r0, r2
 80051f8:	4619      	mov	r1, r3
 80051fa:	4603      	mov	r3, r0
 80051fc:	4642      	mov	r2, r8
 80051fe:	189b      	adds	r3, r3, r2
 8005200:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005204:	464b      	mov	r3, r9
 8005206:	460a      	mov	r2, r1
 8005208:	eb42 0303 	adc.w	r3, r2, r3
 800520c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800521c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005220:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005224:	460b      	mov	r3, r1
 8005226:	18db      	adds	r3, r3, r3
 8005228:	62bb      	str	r3, [r7, #40]	; 0x28
 800522a:	4613      	mov	r3, r2
 800522c:	eb42 0303 	adc.w	r3, r2, r3
 8005230:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005232:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005236:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800523a:	f7fa ffe3 	bl	8000204 <__aeabi_uldivmod>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	4b0d      	ldr	r3, [pc, #52]	; (8005278 <UART_SetConfig+0x2d4>)
 8005244:	fba3 1302 	umull	r1, r3, r3, r2
 8005248:	095b      	lsrs	r3, r3, #5
 800524a:	2164      	movs	r1, #100	; 0x64
 800524c:	fb01 f303 	mul.w	r3, r1, r3
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	3332      	adds	r3, #50	; 0x32
 8005256:	4a08      	ldr	r2, [pc, #32]	; (8005278 <UART_SetConfig+0x2d4>)
 8005258:	fba2 2303 	umull	r2, r3, r2, r3
 800525c:	095b      	lsrs	r3, r3, #5
 800525e:	f003 0207 	and.w	r2, r3, #7
 8005262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4422      	add	r2, r4
 800526a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800526c:	e105      	b.n	800547a <UART_SetConfig+0x4d6>
 800526e:	bf00      	nop
 8005270:	40011000 	.word	0x40011000
 8005274:	40011400 	.word	0x40011400
 8005278:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800527c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005280:	2200      	movs	r2, #0
 8005282:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005286:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800528a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800528e:	4642      	mov	r2, r8
 8005290:	464b      	mov	r3, r9
 8005292:	1891      	adds	r1, r2, r2
 8005294:	6239      	str	r1, [r7, #32]
 8005296:	415b      	adcs	r3, r3
 8005298:	627b      	str	r3, [r7, #36]	; 0x24
 800529a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800529e:	4641      	mov	r1, r8
 80052a0:	1854      	adds	r4, r2, r1
 80052a2:	4649      	mov	r1, r9
 80052a4:	eb43 0501 	adc.w	r5, r3, r1
 80052a8:	f04f 0200 	mov.w	r2, #0
 80052ac:	f04f 0300 	mov.w	r3, #0
 80052b0:	00eb      	lsls	r3, r5, #3
 80052b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052b6:	00e2      	lsls	r2, r4, #3
 80052b8:	4614      	mov	r4, r2
 80052ba:	461d      	mov	r5, r3
 80052bc:	4643      	mov	r3, r8
 80052be:	18e3      	adds	r3, r4, r3
 80052c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80052c4:	464b      	mov	r3, r9
 80052c6:	eb45 0303 	adc.w	r3, r5, r3
 80052ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80052ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80052da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80052de:	f04f 0200 	mov.w	r2, #0
 80052e2:	f04f 0300 	mov.w	r3, #0
 80052e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80052ea:	4629      	mov	r1, r5
 80052ec:	008b      	lsls	r3, r1, #2
 80052ee:	4621      	mov	r1, r4
 80052f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052f4:	4621      	mov	r1, r4
 80052f6:	008a      	lsls	r2, r1, #2
 80052f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80052fc:	f7fa ff82 	bl	8000204 <__aeabi_uldivmod>
 8005300:	4602      	mov	r2, r0
 8005302:	460b      	mov	r3, r1
 8005304:	4b60      	ldr	r3, [pc, #384]	; (8005488 <UART_SetConfig+0x4e4>)
 8005306:	fba3 2302 	umull	r2, r3, r3, r2
 800530a:	095b      	lsrs	r3, r3, #5
 800530c:	011c      	lsls	r4, r3, #4
 800530e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005312:	2200      	movs	r2, #0
 8005314:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005318:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800531c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005320:	4642      	mov	r2, r8
 8005322:	464b      	mov	r3, r9
 8005324:	1891      	adds	r1, r2, r2
 8005326:	61b9      	str	r1, [r7, #24]
 8005328:	415b      	adcs	r3, r3
 800532a:	61fb      	str	r3, [r7, #28]
 800532c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005330:	4641      	mov	r1, r8
 8005332:	1851      	adds	r1, r2, r1
 8005334:	6139      	str	r1, [r7, #16]
 8005336:	4649      	mov	r1, r9
 8005338:	414b      	adcs	r3, r1
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	f04f 0200 	mov.w	r2, #0
 8005340:	f04f 0300 	mov.w	r3, #0
 8005344:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005348:	4659      	mov	r1, fp
 800534a:	00cb      	lsls	r3, r1, #3
 800534c:	4651      	mov	r1, sl
 800534e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005352:	4651      	mov	r1, sl
 8005354:	00ca      	lsls	r2, r1, #3
 8005356:	4610      	mov	r0, r2
 8005358:	4619      	mov	r1, r3
 800535a:	4603      	mov	r3, r0
 800535c:	4642      	mov	r2, r8
 800535e:	189b      	adds	r3, r3, r2
 8005360:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005364:	464b      	mov	r3, r9
 8005366:	460a      	mov	r2, r1
 8005368:	eb42 0303 	adc.w	r3, r2, r3
 800536c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	67bb      	str	r3, [r7, #120]	; 0x78
 800537a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800537c:	f04f 0200 	mov.w	r2, #0
 8005380:	f04f 0300 	mov.w	r3, #0
 8005384:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005388:	4649      	mov	r1, r9
 800538a:	008b      	lsls	r3, r1, #2
 800538c:	4641      	mov	r1, r8
 800538e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005392:	4641      	mov	r1, r8
 8005394:	008a      	lsls	r2, r1, #2
 8005396:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800539a:	f7fa ff33 	bl	8000204 <__aeabi_uldivmod>
 800539e:	4602      	mov	r2, r0
 80053a0:	460b      	mov	r3, r1
 80053a2:	4b39      	ldr	r3, [pc, #228]	; (8005488 <UART_SetConfig+0x4e4>)
 80053a4:	fba3 1302 	umull	r1, r3, r3, r2
 80053a8:	095b      	lsrs	r3, r3, #5
 80053aa:	2164      	movs	r1, #100	; 0x64
 80053ac:	fb01 f303 	mul.w	r3, r1, r3
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	011b      	lsls	r3, r3, #4
 80053b4:	3332      	adds	r3, #50	; 0x32
 80053b6:	4a34      	ldr	r2, [pc, #208]	; (8005488 <UART_SetConfig+0x4e4>)
 80053b8:	fba2 2303 	umull	r2, r3, r2, r3
 80053bc:	095b      	lsrs	r3, r3, #5
 80053be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053c2:	441c      	add	r4, r3
 80053c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053c8:	2200      	movs	r2, #0
 80053ca:	673b      	str	r3, [r7, #112]	; 0x70
 80053cc:	677a      	str	r2, [r7, #116]	; 0x74
 80053ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80053d2:	4642      	mov	r2, r8
 80053d4:	464b      	mov	r3, r9
 80053d6:	1891      	adds	r1, r2, r2
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	415b      	adcs	r3, r3
 80053dc:	60fb      	str	r3, [r7, #12]
 80053de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053e2:	4641      	mov	r1, r8
 80053e4:	1851      	adds	r1, r2, r1
 80053e6:	6039      	str	r1, [r7, #0]
 80053e8:	4649      	mov	r1, r9
 80053ea:	414b      	adcs	r3, r1
 80053ec:	607b      	str	r3, [r7, #4]
 80053ee:	f04f 0200 	mov.w	r2, #0
 80053f2:	f04f 0300 	mov.w	r3, #0
 80053f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80053fa:	4659      	mov	r1, fp
 80053fc:	00cb      	lsls	r3, r1, #3
 80053fe:	4651      	mov	r1, sl
 8005400:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005404:	4651      	mov	r1, sl
 8005406:	00ca      	lsls	r2, r1, #3
 8005408:	4610      	mov	r0, r2
 800540a:	4619      	mov	r1, r3
 800540c:	4603      	mov	r3, r0
 800540e:	4642      	mov	r2, r8
 8005410:	189b      	adds	r3, r3, r2
 8005412:	66bb      	str	r3, [r7, #104]	; 0x68
 8005414:	464b      	mov	r3, r9
 8005416:	460a      	mov	r2, r1
 8005418:	eb42 0303 	adc.w	r3, r2, r3
 800541c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800541e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	663b      	str	r3, [r7, #96]	; 0x60
 8005428:	667a      	str	r2, [r7, #100]	; 0x64
 800542a:	f04f 0200 	mov.w	r2, #0
 800542e:	f04f 0300 	mov.w	r3, #0
 8005432:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005436:	4649      	mov	r1, r9
 8005438:	008b      	lsls	r3, r1, #2
 800543a:	4641      	mov	r1, r8
 800543c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005440:	4641      	mov	r1, r8
 8005442:	008a      	lsls	r2, r1, #2
 8005444:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005448:	f7fa fedc 	bl	8000204 <__aeabi_uldivmod>
 800544c:	4602      	mov	r2, r0
 800544e:	460b      	mov	r3, r1
 8005450:	4b0d      	ldr	r3, [pc, #52]	; (8005488 <UART_SetConfig+0x4e4>)
 8005452:	fba3 1302 	umull	r1, r3, r3, r2
 8005456:	095b      	lsrs	r3, r3, #5
 8005458:	2164      	movs	r1, #100	; 0x64
 800545a:	fb01 f303 	mul.w	r3, r1, r3
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	011b      	lsls	r3, r3, #4
 8005462:	3332      	adds	r3, #50	; 0x32
 8005464:	4a08      	ldr	r2, [pc, #32]	; (8005488 <UART_SetConfig+0x4e4>)
 8005466:	fba2 2303 	umull	r2, r3, r2, r3
 800546a:	095b      	lsrs	r3, r3, #5
 800546c:	f003 020f 	and.w	r2, r3, #15
 8005470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4422      	add	r2, r4
 8005478:	609a      	str	r2, [r3, #8]
}
 800547a:	bf00      	nop
 800547c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005480:	46bd      	mov	sp, r7
 8005482:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005486:	bf00      	nop
 8005488:	51eb851f 	.word	0x51eb851f

0800548c <__errno>:
 800548c:	4b01      	ldr	r3, [pc, #4]	; (8005494 <__errno+0x8>)
 800548e:	6818      	ldr	r0, [r3, #0]
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	2000009c 	.word	0x2000009c

08005498 <__libc_init_array>:
 8005498:	b570      	push	{r4, r5, r6, lr}
 800549a:	4d0d      	ldr	r5, [pc, #52]	; (80054d0 <__libc_init_array+0x38>)
 800549c:	4c0d      	ldr	r4, [pc, #52]	; (80054d4 <__libc_init_array+0x3c>)
 800549e:	1b64      	subs	r4, r4, r5
 80054a0:	10a4      	asrs	r4, r4, #2
 80054a2:	2600      	movs	r6, #0
 80054a4:	42a6      	cmp	r6, r4
 80054a6:	d109      	bne.n	80054bc <__libc_init_array+0x24>
 80054a8:	4d0b      	ldr	r5, [pc, #44]	; (80054d8 <__libc_init_array+0x40>)
 80054aa:	4c0c      	ldr	r4, [pc, #48]	; (80054dc <__libc_init_array+0x44>)
 80054ac:	f000 fd3c 	bl	8005f28 <_init>
 80054b0:	1b64      	subs	r4, r4, r5
 80054b2:	10a4      	asrs	r4, r4, #2
 80054b4:	2600      	movs	r6, #0
 80054b6:	42a6      	cmp	r6, r4
 80054b8:	d105      	bne.n	80054c6 <__libc_init_array+0x2e>
 80054ba:	bd70      	pop	{r4, r5, r6, pc}
 80054bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80054c0:	4798      	blx	r3
 80054c2:	3601      	adds	r6, #1
 80054c4:	e7ee      	b.n	80054a4 <__libc_init_array+0xc>
 80054c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ca:	4798      	blx	r3
 80054cc:	3601      	adds	r6, #1
 80054ce:	e7f2      	b.n	80054b6 <__libc_init_array+0x1e>
 80054d0:	080060b8 	.word	0x080060b8
 80054d4:	080060b8 	.word	0x080060b8
 80054d8:	080060b8 	.word	0x080060b8
 80054dc:	080060bc 	.word	0x080060bc

080054e0 <memcmp>:
 80054e0:	b510      	push	{r4, lr}
 80054e2:	3901      	subs	r1, #1
 80054e4:	4402      	add	r2, r0
 80054e6:	4290      	cmp	r0, r2
 80054e8:	d101      	bne.n	80054ee <memcmp+0xe>
 80054ea:	2000      	movs	r0, #0
 80054ec:	e005      	b.n	80054fa <memcmp+0x1a>
 80054ee:	7803      	ldrb	r3, [r0, #0]
 80054f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80054f4:	42a3      	cmp	r3, r4
 80054f6:	d001      	beq.n	80054fc <memcmp+0x1c>
 80054f8:	1b18      	subs	r0, r3, r4
 80054fa:	bd10      	pop	{r4, pc}
 80054fc:	3001      	adds	r0, #1
 80054fe:	e7f2      	b.n	80054e6 <memcmp+0x6>

08005500 <memcpy>:
 8005500:	440a      	add	r2, r1
 8005502:	4291      	cmp	r1, r2
 8005504:	f100 33ff 	add.w	r3, r0, #4294967295
 8005508:	d100      	bne.n	800550c <memcpy+0xc>
 800550a:	4770      	bx	lr
 800550c:	b510      	push	{r4, lr}
 800550e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005512:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005516:	4291      	cmp	r1, r2
 8005518:	d1f9      	bne.n	800550e <memcpy+0xe>
 800551a:	bd10      	pop	{r4, pc}

0800551c <memset>:
 800551c:	4402      	add	r2, r0
 800551e:	4603      	mov	r3, r0
 8005520:	4293      	cmp	r3, r2
 8005522:	d100      	bne.n	8005526 <memset+0xa>
 8005524:	4770      	bx	lr
 8005526:	f803 1b01 	strb.w	r1, [r3], #1
 800552a:	e7f9      	b.n	8005520 <memset+0x4>

0800552c <_puts_r>:
 800552c:	b570      	push	{r4, r5, r6, lr}
 800552e:	460e      	mov	r6, r1
 8005530:	4605      	mov	r5, r0
 8005532:	b118      	cbz	r0, 800553c <_puts_r+0x10>
 8005534:	6983      	ldr	r3, [r0, #24]
 8005536:	b90b      	cbnz	r3, 800553c <_puts_r+0x10>
 8005538:	f000 fa48 	bl	80059cc <__sinit>
 800553c:	69ab      	ldr	r3, [r5, #24]
 800553e:	68ac      	ldr	r4, [r5, #8]
 8005540:	b913      	cbnz	r3, 8005548 <_puts_r+0x1c>
 8005542:	4628      	mov	r0, r5
 8005544:	f000 fa42 	bl	80059cc <__sinit>
 8005548:	4b2c      	ldr	r3, [pc, #176]	; (80055fc <_puts_r+0xd0>)
 800554a:	429c      	cmp	r4, r3
 800554c:	d120      	bne.n	8005590 <_puts_r+0x64>
 800554e:	686c      	ldr	r4, [r5, #4]
 8005550:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005552:	07db      	lsls	r3, r3, #31
 8005554:	d405      	bmi.n	8005562 <_puts_r+0x36>
 8005556:	89a3      	ldrh	r3, [r4, #12]
 8005558:	0598      	lsls	r0, r3, #22
 800555a:	d402      	bmi.n	8005562 <_puts_r+0x36>
 800555c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800555e:	f000 fad3 	bl	8005b08 <__retarget_lock_acquire_recursive>
 8005562:	89a3      	ldrh	r3, [r4, #12]
 8005564:	0719      	lsls	r1, r3, #28
 8005566:	d51d      	bpl.n	80055a4 <_puts_r+0x78>
 8005568:	6923      	ldr	r3, [r4, #16]
 800556a:	b1db      	cbz	r3, 80055a4 <_puts_r+0x78>
 800556c:	3e01      	subs	r6, #1
 800556e:	68a3      	ldr	r3, [r4, #8]
 8005570:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005574:	3b01      	subs	r3, #1
 8005576:	60a3      	str	r3, [r4, #8]
 8005578:	bb39      	cbnz	r1, 80055ca <_puts_r+0x9e>
 800557a:	2b00      	cmp	r3, #0
 800557c:	da38      	bge.n	80055f0 <_puts_r+0xc4>
 800557e:	4622      	mov	r2, r4
 8005580:	210a      	movs	r1, #10
 8005582:	4628      	mov	r0, r5
 8005584:	f000 f848 	bl	8005618 <__swbuf_r>
 8005588:	3001      	adds	r0, #1
 800558a:	d011      	beq.n	80055b0 <_puts_r+0x84>
 800558c:	250a      	movs	r5, #10
 800558e:	e011      	b.n	80055b4 <_puts_r+0x88>
 8005590:	4b1b      	ldr	r3, [pc, #108]	; (8005600 <_puts_r+0xd4>)
 8005592:	429c      	cmp	r4, r3
 8005594:	d101      	bne.n	800559a <_puts_r+0x6e>
 8005596:	68ac      	ldr	r4, [r5, #8]
 8005598:	e7da      	b.n	8005550 <_puts_r+0x24>
 800559a:	4b1a      	ldr	r3, [pc, #104]	; (8005604 <_puts_r+0xd8>)
 800559c:	429c      	cmp	r4, r3
 800559e:	bf08      	it	eq
 80055a0:	68ec      	ldreq	r4, [r5, #12]
 80055a2:	e7d5      	b.n	8005550 <_puts_r+0x24>
 80055a4:	4621      	mov	r1, r4
 80055a6:	4628      	mov	r0, r5
 80055a8:	f000 f888 	bl	80056bc <__swsetup_r>
 80055ac:	2800      	cmp	r0, #0
 80055ae:	d0dd      	beq.n	800556c <_puts_r+0x40>
 80055b0:	f04f 35ff 	mov.w	r5, #4294967295
 80055b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055b6:	07da      	lsls	r2, r3, #31
 80055b8:	d405      	bmi.n	80055c6 <_puts_r+0x9a>
 80055ba:	89a3      	ldrh	r3, [r4, #12]
 80055bc:	059b      	lsls	r3, r3, #22
 80055be:	d402      	bmi.n	80055c6 <_puts_r+0x9a>
 80055c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055c2:	f000 faa2 	bl	8005b0a <__retarget_lock_release_recursive>
 80055c6:	4628      	mov	r0, r5
 80055c8:	bd70      	pop	{r4, r5, r6, pc}
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	da04      	bge.n	80055d8 <_puts_r+0xac>
 80055ce:	69a2      	ldr	r2, [r4, #24]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	dc06      	bgt.n	80055e2 <_puts_r+0xb6>
 80055d4:	290a      	cmp	r1, #10
 80055d6:	d004      	beq.n	80055e2 <_puts_r+0xb6>
 80055d8:	6823      	ldr	r3, [r4, #0]
 80055da:	1c5a      	adds	r2, r3, #1
 80055dc:	6022      	str	r2, [r4, #0]
 80055de:	7019      	strb	r1, [r3, #0]
 80055e0:	e7c5      	b.n	800556e <_puts_r+0x42>
 80055e2:	4622      	mov	r2, r4
 80055e4:	4628      	mov	r0, r5
 80055e6:	f000 f817 	bl	8005618 <__swbuf_r>
 80055ea:	3001      	adds	r0, #1
 80055ec:	d1bf      	bne.n	800556e <_puts_r+0x42>
 80055ee:	e7df      	b.n	80055b0 <_puts_r+0x84>
 80055f0:	6823      	ldr	r3, [r4, #0]
 80055f2:	250a      	movs	r5, #10
 80055f4:	1c5a      	adds	r2, r3, #1
 80055f6:	6022      	str	r2, [r4, #0]
 80055f8:	701d      	strb	r5, [r3, #0]
 80055fa:	e7db      	b.n	80055b4 <_puts_r+0x88>
 80055fc:	08006070 	.word	0x08006070
 8005600:	08006090 	.word	0x08006090
 8005604:	08006050 	.word	0x08006050

08005608 <puts>:
 8005608:	4b02      	ldr	r3, [pc, #8]	; (8005614 <puts+0xc>)
 800560a:	4601      	mov	r1, r0
 800560c:	6818      	ldr	r0, [r3, #0]
 800560e:	f7ff bf8d 	b.w	800552c <_puts_r>
 8005612:	bf00      	nop
 8005614:	2000009c 	.word	0x2000009c

08005618 <__swbuf_r>:
 8005618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561a:	460e      	mov	r6, r1
 800561c:	4614      	mov	r4, r2
 800561e:	4605      	mov	r5, r0
 8005620:	b118      	cbz	r0, 800562a <__swbuf_r+0x12>
 8005622:	6983      	ldr	r3, [r0, #24]
 8005624:	b90b      	cbnz	r3, 800562a <__swbuf_r+0x12>
 8005626:	f000 f9d1 	bl	80059cc <__sinit>
 800562a:	4b21      	ldr	r3, [pc, #132]	; (80056b0 <__swbuf_r+0x98>)
 800562c:	429c      	cmp	r4, r3
 800562e:	d12b      	bne.n	8005688 <__swbuf_r+0x70>
 8005630:	686c      	ldr	r4, [r5, #4]
 8005632:	69a3      	ldr	r3, [r4, #24]
 8005634:	60a3      	str	r3, [r4, #8]
 8005636:	89a3      	ldrh	r3, [r4, #12]
 8005638:	071a      	lsls	r2, r3, #28
 800563a:	d52f      	bpl.n	800569c <__swbuf_r+0x84>
 800563c:	6923      	ldr	r3, [r4, #16]
 800563e:	b36b      	cbz	r3, 800569c <__swbuf_r+0x84>
 8005640:	6923      	ldr	r3, [r4, #16]
 8005642:	6820      	ldr	r0, [r4, #0]
 8005644:	1ac0      	subs	r0, r0, r3
 8005646:	6963      	ldr	r3, [r4, #20]
 8005648:	b2f6      	uxtb	r6, r6
 800564a:	4283      	cmp	r3, r0
 800564c:	4637      	mov	r7, r6
 800564e:	dc04      	bgt.n	800565a <__swbuf_r+0x42>
 8005650:	4621      	mov	r1, r4
 8005652:	4628      	mov	r0, r5
 8005654:	f000 f926 	bl	80058a4 <_fflush_r>
 8005658:	bb30      	cbnz	r0, 80056a8 <__swbuf_r+0x90>
 800565a:	68a3      	ldr	r3, [r4, #8]
 800565c:	3b01      	subs	r3, #1
 800565e:	60a3      	str	r3, [r4, #8]
 8005660:	6823      	ldr	r3, [r4, #0]
 8005662:	1c5a      	adds	r2, r3, #1
 8005664:	6022      	str	r2, [r4, #0]
 8005666:	701e      	strb	r6, [r3, #0]
 8005668:	6963      	ldr	r3, [r4, #20]
 800566a:	3001      	adds	r0, #1
 800566c:	4283      	cmp	r3, r0
 800566e:	d004      	beq.n	800567a <__swbuf_r+0x62>
 8005670:	89a3      	ldrh	r3, [r4, #12]
 8005672:	07db      	lsls	r3, r3, #31
 8005674:	d506      	bpl.n	8005684 <__swbuf_r+0x6c>
 8005676:	2e0a      	cmp	r6, #10
 8005678:	d104      	bne.n	8005684 <__swbuf_r+0x6c>
 800567a:	4621      	mov	r1, r4
 800567c:	4628      	mov	r0, r5
 800567e:	f000 f911 	bl	80058a4 <_fflush_r>
 8005682:	b988      	cbnz	r0, 80056a8 <__swbuf_r+0x90>
 8005684:	4638      	mov	r0, r7
 8005686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005688:	4b0a      	ldr	r3, [pc, #40]	; (80056b4 <__swbuf_r+0x9c>)
 800568a:	429c      	cmp	r4, r3
 800568c:	d101      	bne.n	8005692 <__swbuf_r+0x7a>
 800568e:	68ac      	ldr	r4, [r5, #8]
 8005690:	e7cf      	b.n	8005632 <__swbuf_r+0x1a>
 8005692:	4b09      	ldr	r3, [pc, #36]	; (80056b8 <__swbuf_r+0xa0>)
 8005694:	429c      	cmp	r4, r3
 8005696:	bf08      	it	eq
 8005698:	68ec      	ldreq	r4, [r5, #12]
 800569a:	e7ca      	b.n	8005632 <__swbuf_r+0x1a>
 800569c:	4621      	mov	r1, r4
 800569e:	4628      	mov	r0, r5
 80056a0:	f000 f80c 	bl	80056bc <__swsetup_r>
 80056a4:	2800      	cmp	r0, #0
 80056a6:	d0cb      	beq.n	8005640 <__swbuf_r+0x28>
 80056a8:	f04f 37ff 	mov.w	r7, #4294967295
 80056ac:	e7ea      	b.n	8005684 <__swbuf_r+0x6c>
 80056ae:	bf00      	nop
 80056b0:	08006070 	.word	0x08006070
 80056b4:	08006090 	.word	0x08006090
 80056b8:	08006050 	.word	0x08006050

080056bc <__swsetup_r>:
 80056bc:	4b32      	ldr	r3, [pc, #200]	; (8005788 <__swsetup_r+0xcc>)
 80056be:	b570      	push	{r4, r5, r6, lr}
 80056c0:	681d      	ldr	r5, [r3, #0]
 80056c2:	4606      	mov	r6, r0
 80056c4:	460c      	mov	r4, r1
 80056c6:	b125      	cbz	r5, 80056d2 <__swsetup_r+0x16>
 80056c8:	69ab      	ldr	r3, [r5, #24]
 80056ca:	b913      	cbnz	r3, 80056d2 <__swsetup_r+0x16>
 80056cc:	4628      	mov	r0, r5
 80056ce:	f000 f97d 	bl	80059cc <__sinit>
 80056d2:	4b2e      	ldr	r3, [pc, #184]	; (800578c <__swsetup_r+0xd0>)
 80056d4:	429c      	cmp	r4, r3
 80056d6:	d10f      	bne.n	80056f8 <__swsetup_r+0x3c>
 80056d8:	686c      	ldr	r4, [r5, #4]
 80056da:	89a3      	ldrh	r3, [r4, #12]
 80056dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056e0:	0719      	lsls	r1, r3, #28
 80056e2:	d42c      	bmi.n	800573e <__swsetup_r+0x82>
 80056e4:	06dd      	lsls	r5, r3, #27
 80056e6:	d411      	bmi.n	800570c <__swsetup_r+0x50>
 80056e8:	2309      	movs	r3, #9
 80056ea:	6033      	str	r3, [r6, #0]
 80056ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80056f0:	81a3      	strh	r3, [r4, #12]
 80056f2:	f04f 30ff 	mov.w	r0, #4294967295
 80056f6:	e03e      	b.n	8005776 <__swsetup_r+0xba>
 80056f8:	4b25      	ldr	r3, [pc, #148]	; (8005790 <__swsetup_r+0xd4>)
 80056fa:	429c      	cmp	r4, r3
 80056fc:	d101      	bne.n	8005702 <__swsetup_r+0x46>
 80056fe:	68ac      	ldr	r4, [r5, #8]
 8005700:	e7eb      	b.n	80056da <__swsetup_r+0x1e>
 8005702:	4b24      	ldr	r3, [pc, #144]	; (8005794 <__swsetup_r+0xd8>)
 8005704:	429c      	cmp	r4, r3
 8005706:	bf08      	it	eq
 8005708:	68ec      	ldreq	r4, [r5, #12]
 800570a:	e7e6      	b.n	80056da <__swsetup_r+0x1e>
 800570c:	0758      	lsls	r0, r3, #29
 800570e:	d512      	bpl.n	8005736 <__swsetup_r+0x7a>
 8005710:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005712:	b141      	cbz	r1, 8005726 <__swsetup_r+0x6a>
 8005714:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005718:	4299      	cmp	r1, r3
 800571a:	d002      	beq.n	8005722 <__swsetup_r+0x66>
 800571c:	4630      	mov	r0, r6
 800571e:	f000 fa5b 	bl	8005bd8 <_free_r>
 8005722:	2300      	movs	r3, #0
 8005724:	6363      	str	r3, [r4, #52]	; 0x34
 8005726:	89a3      	ldrh	r3, [r4, #12]
 8005728:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800572c:	81a3      	strh	r3, [r4, #12]
 800572e:	2300      	movs	r3, #0
 8005730:	6063      	str	r3, [r4, #4]
 8005732:	6923      	ldr	r3, [r4, #16]
 8005734:	6023      	str	r3, [r4, #0]
 8005736:	89a3      	ldrh	r3, [r4, #12]
 8005738:	f043 0308 	orr.w	r3, r3, #8
 800573c:	81a3      	strh	r3, [r4, #12]
 800573e:	6923      	ldr	r3, [r4, #16]
 8005740:	b94b      	cbnz	r3, 8005756 <__swsetup_r+0x9a>
 8005742:	89a3      	ldrh	r3, [r4, #12]
 8005744:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800574c:	d003      	beq.n	8005756 <__swsetup_r+0x9a>
 800574e:	4621      	mov	r1, r4
 8005750:	4630      	mov	r0, r6
 8005752:	f000 fa01 	bl	8005b58 <__smakebuf_r>
 8005756:	89a0      	ldrh	r0, [r4, #12]
 8005758:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800575c:	f010 0301 	ands.w	r3, r0, #1
 8005760:	d00a      	beq.n	8005778 <__swsetup_r+0xbc>
 8005762:	2300      	movs	r3, #0
 8005764:	60a3      	str	r3, [r4, #8]
 8005766:	6963      	ldr	r3, [r4, #20]
 8005768:	425b      	negs	r3, r3
 800576a:	61a3      	str	r3, [r4, #24]
 800576c:	6923      	ldr	r3, [r4, #16]
 800576e:	b943      	cbnz	r3, 8005782 <__swsetup_r+0xc6>
 8005770:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005774:	d1ba      	bne.n	80056ec <__swsetup_r+0x30>
 8005776:	bd70      	pop	{r4, r5, r6, pc}
 8005778:	0781      	lsls	r1, r0, #30
 800577a:	bf58      	it	pl
 800577c:	6963      	ldrpl	r3, [r4, #20]
 800577e:	60a3      	str	r3, [r4, #8]
 8005780:	e7f4      	b.n	800576c <__swsetup_r+0xb0>
 8005782:	2000      	movs	r0, #0
 8005784:	e7f7      	b.n	8005776 <__swsetup_r+0xba>
 8005786:	bf00      	nop
 8005788:	2000009c 	.word	0x2000009c
 800578c:	08006070 	.word	0x08006070
 8005790:	08006090 	.word	0x08006090
 8005794:	08006050 	.word	0x08006050

08005798 <__sflush_r>:
 8005798:	898a      	ldrh	r2, [r1, #12]
 800579a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800579e:	4605      	mov	r5, r0
 80057a0:	0710      	lsls	r0, r2, #28
 80057a2:	460c      	mov	r4, r1
 80057a4:	d458      	bmi.n	8005858 <__sflush_r+0xc0>
 80057a6:	684b      	ldr	r3, [r1, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	dc05      	bgt.n	80057b8 <__sflush_r+0x20>
 80057ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	dc02      	bgt.n	80057b8 <__sflush_r+0x20>
 80057b2:	2000      	movs	r0, #0
 80057b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057ba:	2e00      	cmp	r6, #0
 80057bc:	d0f9      	beq.n	80057b2 <__sflush_r+0x1a>
 80057be:	2300      	movs	r3, #0
 80057c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057c4:	682f      	ldr	r7, [r5, #0]
 80057c6:	602b      	str	r3, [r5, #0]
 80057c8:	d032      	beq.n	8005830 <__sflush_r+0x98>
 80057ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057cc:	89a3      	ldrh	r3, [r4, #12]
 80057ce:	075a      	lsls	r2, r3, #29
 80057d0:	d505      	bpl.n	80057de <__sflush_r+0x46>
 80057d2:	6863      	ldr	r3, [r4, #4]
 80057d4:	1ac0      	subs	r0, r0, r3
 80057d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80057d8:	b10b      	cbz	r3, 80057de <__sflush_r+0x46>
 80057da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057dc:	1ac0      	subs	r0, r0, r3
 80057de:	2300      	movs	r3, #0
 80057e0:	4602      	mov	r2, r0
 80057e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057e4:	6a21      	ldr	r1, [r4, #32]
 80057e6:	4628      	mov	r0, r5
 80057e8:	47b0      	blx	r6
 80057ea:	1c43      	adds	r3, r0, #1
 80057ec:	89a3      	ldrh	r3, [r4, #12]
 80057ee:	d106      	bne.n	80057fe <__sflush_r+0x66>
 80057f0:	6829      	ldr	r1, [r5, #0]
 80057f2:	291d      	cmp	r1, #29
 80057f4:	d82c      	bhi.n	8005850 <__sflush_r+0xb8>
 80057f6:	4a2a      	ldr	r2, [pc, #168]	; (80058a0 <__sflush_r+0x108>)
 80057f8:	40ca      	lsrs	r2, r1
 80057fa:	07d6      	lsls	r6, r2, #31
 80057fc:	d528      	bpl.n	8005850 <__sflush_r+0xb8>
 80057fe:	2200      	movs	r2, #0
 8005800:	6062      	str	r2, [r4, #4]
 8005802:	04d9      	lsls	r1, r3, #19
 8005804:	6922      	ldr	r2, [r4, #16]
 8005806:	6022      	str	r2, [r4, #0]
 8005808:	d504      	bpl.n	8005814 <__sflush_r+0x7c>
 800580a:	1c42      	adds	r2, r0, #1
 800580c:	d101      	bne.n	8005812 <__sflush_r+0x7a>
 800580e:	682b      	ldr	r3, [r5, #0]
 8005810:	b903      	cbnz	r3, 8005814 <__sflush_r+0x7c>
 8005812:	6560      	str	r0, [r4, #84]	; 0x54
 8005814:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005816:	602f      	str	r7, [r5, #0]
 8005818:	2900      	cmp	r1, #0
 800581a:	d0ca      	beq.n	80057b2 <__sflush_r+0x1a>
 800581c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005820:	4299      	cmp	r1, r3
 8005822:	d002      	beq.n	800582a <__sflush_r+0x92>
 8005824:	4628      	mov	r0, r5
 8005826:	f000 f9d7 	bl	8005bd8 <_free_r>
 800582a:	2000      	movs	r0, #0
 800582c:	6360      	str	r0, [r4, #52]	; 0x34
 800582e:	e7c1      	b.n	80057b4 <__sflush_r+0x1c>
 8005830:	6a21      	ldr	r1, [r4, #32]
 8005832:	2301      	movs	r3, #1
 8005834:	4628      	mov	r0, r5
 8005836:	47b0      	blx	r6
 8005838:	1c41      	adds	r1, r0, #1
 800583a:	d1c7      	bne.n	80057cc <__sflush_r+0x34>
 800583c:	682b      	ldr	r3, [r5, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d0c4      	beq.n	80057cc <__sflush_r+0x34>
 8005842:	2b1d      	cmp	r3, #29
 8005844:	d001      	beq.n	800584a <__sflush_r+0xb2>
 8005846:	2b16      	cmp	r3, #22
 8005848:	d101      	bne.n	800584e <__sflush_r+0xb6>
 800584a:	602f      	str	r7, [r5, #0]
 800584c:	e7b1      	b.n	80057b2 <__sflush_r+0x1a>
 800584e:	89a3      	ldrh	r3, [r4, #12]
 8005850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005854:	81a3      	strh	r3, [r4, #12]
 8005856:	e7ad      	b.n	80057b4 <__sflush_r+0x1c>
 8005858:	690f      	ldr	r7, [r1, #16]
 800585a:	2f00      	cmp	r7, #0
 800585c:	d0a9      	beq.n	80057b2 <__sflush_r+0x1a>
 800585e:	0793      	lsls	r3, r2, #30
 8005860:	680e      	ldr	r6, [r1, #0]
 8005862:	bf08      	it	eq
 8005864:	694b      	ldreq	r3, [r1, #20]
 8005866:	600f      	str	r7, [r1, #0]
 8005868:	bf18      	it	ne
 800586a:	2300      	movne	r3, #0
 800586c:	eba6 0807 	sub.w	r8, r6, r7
 8005870:	608b      	str	r3, [r1, #8]
 8005872:	f1b8 0f00 	cmp.w	r8, #0
 8005876:	dd9c      	ble.n	80057b2 <__sflush_r+0x1a>
 8005878:	6a21      	ldr	r1, [r4, #32]
 800587a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800587c:	4643      	mov	r3, r8
 800587e:	463a      	mov	r2, r7
 8005880:	4628      	mov	r0, r5
 8005882:	47b0      	blx	r6
 8005884:	2800      	cmp	r0, #0
 8005886:	dc06      	bgt.n	8005896 <__sflush_r+0xfe>
 8005888:	89a3      	ldrh	r3, [r4, #12]
 800588a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800588e:	81a3      	strh	r3, [r4, #12]
 8005890:	f04f 30ff 	mov.w	r0, #4294967295
 8005894:	e78e      	b.n	80057b4 <__sflush_r+0x1c>
 8005896:	4407      	add	r7, r0
 8005898:	eba8 0800 	sub.w	r8, r8, r0
 800589c:	e7e9      	b.n	8005872 <__sflush_r+0xda>
 800589e:	bf00      	nop
 80058a0:	20400001 	.word	0x20400001

080058a4 <_fflush_r>:
 80058a4:	b538      	push	{r3, r4, r5, lr}
 80058a6:	690b      	ldr	r3, [r1, #16]
 80058a8:	4605      	mov	r5, r0
 80058aa:	460c      	mov	r4, r1
 80058ac:	b913      	cbnz	r3, 80058b4 <_fflush_r+0x10>
 80058ae:	2500      	movs	r5, #0
 80058b0:	4628      	mov	r0, r5
 80058b2:	bd38      	pop	{r3, r4, r5, pc}
 80058b4:	b118      	cbz	r0, 80058be <_fflush_r+0x1a>
 80058b6:	6983      	ldr	r3, [r0, #24]
 80058b8:	b90b      	cbnz	r3, 80058be <_fflush_r+0x1a>
 80058ba:	f000 f887 	bl	80059cc <__sinit>
 80058be:	4b14      	ldr	r3, [pc, #80]	; (8005910 <_fflush_r+0x6c>)
 80058c0:	429c      	cmp	r4, r3
 80058c2:	d11b      	bne.n	80058fc <_fflush_r+0x58>
 80058c4:	686c      	ldr	r4, [r5, #4]
 80058c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d0ef      	beq.n	80058ae <_fflush_r+0xa>
 80058ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80058d0:	07d0      	lsls	r0, r2, #31
 80058d2:	d404      	bmi.n	80058de <_fflush_r+0x3a>
 80058d4:	0599      	lsls	r1, r3, #22
 80058d6:	d402      	bmi.n	80058de <_fflush_r+0x3a>
 80058d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058da:	f000 f915 	bl	8005b08 <__retarget_lock_acquire_recursive>
 80058de:	4628      	mov	r0, r5
 80058e0:	4621      	mov	r1, r4
 80058e2:	f7ff ff59 	bl	8005798 <__sflush_r>
 80058e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058e8:	07da      	lsls	r2, r3, #31
 80058ea:	4605      	mov	r5, r0
 80058ec:	d4e0      	bmi.n	80058b0 <_fflush_r+0xc>
 80058ee:	89a3      	ldrh	r3, [r4, #12]
 80058f0:	059b      	lsls	r3, r3, #22
 80058f2:	d4dd      	bmi.n	80058b0 <_fflush_r+0xc>
 80058f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058f6:	f000 f908 	bl	8005b0a <__retarget_lock_release_recursive>
 80058fa:	e7d9      	b.n	80058b0 <_fflush_r+0xc>
 80058fc:	4b05      	ldr	r3, [pc, #20]	; (8005914 <_fflush_r+0x70>)
 80058fe:	429c      	cmp	r4, r3
 8005900:	d101      	bne.n	8005906 <_fflush_r+0x62>
 8005902:	68ac      	ldr	r4, [r5, #8]
 8005904:	e7df      	b.n	80058c6 <_fflush_r+0x22>
 8005906:	4b04      	ldr	r3, [pc, #16]	; (8005918 <_fflush_r+0x74>)
 8005908:	429c      	cmp	r4, r3
 800590a:	bf08      	it	eq
 800590c:	68ec      	ldreq	r4, [r5, #12]
 800590e:	e7da      	b.n	80058c6 <_fflush_r+0x22>
 8005910:	08006070 	.word	0x08006070
 8005914:	08006090 	.word	0x08006090
 8005918:	08006050 	.word	0x08006050

0800591c <std>:
 800591c:	2300      	movs	r3, #0
 800591e:	b510      	push	{r4, lr}
 8005920:	4604      	mov	r4, r0
 8005922:	e9c0 3300 	strd	r3, r3, [r0]
 8005926:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800592a:	6083      	str	r3, [r0, #8]
 800592c:	8181      	strh	r1, [r0, #12]
 800592e:	6643      	str	r3, [r0, #100]	; 0x64
 8005930:	81c2      	strh	r2, [r0, #14]
 8005932:	6183      	str	r3, [r0, #24]
 8005934:	4619      	mov	r1, r3
 8005936:	2208      	movs	r2, #8
 8005938:	305c      	adds	r0, #92	; 0x5c
 800593a:	f7ff fdef 	bl	800551c <memset>
 800593e:	4b05      	ldr	r3, [pc, #20]	; (8005954 <std+0x38>)
 8005940:	6263      	str	r3, [r4, #36]	; 0x24
 8005942:	4b05      	ldr	r3, [pc, #20]	; (8005958 <std+0x3c>)
 8005944:	62a3      	str	r3, [r4, #40]	; 0x28
 8005946:	4b05      	ldr	r3, [pc, #20]	; (800595c <std+0x40>)
 8005948:	62e3      	str	r3, [r4, #44]	; 0x2c
 800594a:	4b05      	ldr	r3, [pc, #20]	; (8005960 <std+0x44>)
 800594c:	6224      	str	r4, [r4, #32]
 800594e:	6323      	str	r3, [r4, #48]	; 0x30
 8005950:	bd10      	pop	{r4, pc}
 8005952:	bf00      	nop
 8005954:	08005db9 	.word	0x08005db9
 8005958:	08005ddb 	.word	0x08005ddb
 800595c:	08005e13 	.word	0x08005e13
 8005960:	08005e37 	.word	0x08005e37

08005964 <_cleanup_r>:
 8005964:	4901      	ldr	r1, [pc, #4]	; (800596c <_cleanup_r+0x8>)
 8005966:	f000 b8af 	b.w	8005ac8 <_fwalk_reent>
 800596a:	bf00      	nop
 800596c:	080058a5 	.word	0x080058a5

08005970 <__sfmoreglue>:
 8005970:	b570      	push	{r4, r5, r6, lr}
 8005972:	2268      	movs	r2, #104	; 0x68
 8005974:	1e4d      	subs	r5, r1, #1
 8005976:	4355      	muls	r5, r2
 8005978:	460e      	mov	r6, r1
 800597a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800597e:	f000 f997 	bl	8005cb0 <_malloc_r>
 8005982:	4604      	mov	r4, r0
 8005984:	b140      	cbz	r0, 8005998 <__sfmoreglue+0x28>
 8005986:	2100      	movs	r1, #0
 8005988:	e9c0 1600 	strd	r1, r6, [r0]
 800598c:	300c      	adds	r0, #12
 800598e:	60a0      	str	r0, [r4, #8]
 8005990:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005994:	f7ff fdc2 	bl	800551c <memset>
 8005998:	4620      	mov	r0, r4
 800599a:	bd70      	pop	{r4, r5, r6, pc}

0800599c <__sfp_lock_acquire>:
 800599c:	4801      	ldr	r0, [pc, #4]	; (80059a4 <__sfp_lock_acquire+0x8>)
 800599e:	f000 b8b3 	b.w	8005b08 <__retarget_lock_acquire_recursive>
 80059a2:	bf00      	nop
 80059a4:	200008cd 	.word	0x200008cd

080059a8 <__sfp_lock_release>:
 80059a8:	4801      	ldr	r0, [pc, #4]	; (80059b0 <__sfp_lock_release+0x8>)
 80059aa:	f000 b8ae 	b.w	8005b0a <__retarget_lock_release_recursive>
 80059ae:	bf00      	nop
 80059b0:	200008cd 	.word	0x200008cd

080059b4 <__sinit_lock_acquire>:
 80059b4:	4801      	ldr	r0, [pc, #4]	; (80059bc <__sinit_lock_acquire+0x8>)
 80059b6:	f000 b8a7 	b.w	8005b08 <__retarget_lock_acquire_recursive>
 80059ba:	bf00      	nop
 80059bc:	200008ce 	.word	0x200008ce

080059c0 <__sinit_lock_release>:
 80059c0:	4801      	ldr	r0, [pc, #4]	; (80059c8 <__sinit_lock_release+0x8>)
 80059c2:	f000 b8a2 	b.w	8005b0a <__retarget_lock_release_recursive>
 80059c6:	bf00      	nop
 80059c8:	200008ce 	.word	0x200008ce

080059cc <__sinit>:
 80059cc:	b510      	push	{r4, lr}
 80059ce:	4604      	mov	r4, r0
 80059d0:	f7ff fff0 	bl	80059b4 <__sinit_lock_acquire>
 80059d4:	69a3      	ldr	r3, [r4, #24]
 80059d6:	b11b      	cbz	r3, 80059e0 <__sinit+0x14>
 80059d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059dc:	f7ff bff0 	b.w	80059c0 <__sinit_lock_release>
 80059e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80059e4:	6523      	str	r3, [r4, #80]	; 0x50
 80059e6:	4b13      	ldr	r3, [pc, #76]	; (8005a34 <__sinit+0x68>)
 80059e8:	4a13      	ldr	r2, [pc, #76]	; (8005a38 <__sinit+0x6c>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80059ee:	42a3      	cmp	r3, r4
 80059f0:	bf04      	itt	eq
 80059f2:	2301      	moveq	r3, #1
 80059f4:	61a3      	streq	r3, [r4, #24]
 80059f6:	4620      	mov	r0, r4
 80059f8:	f000 f820 	bl	8005a3c <__sfp>
 80059fc:	6060      	str	r0, [r4, #4]
 80059fe:	4620      	mov	r0, r4
 8005a00:	f000 f81c 	bl	8005a3c <__sfp>
 8005a04:	60a0      	str	r0, [r4, #8]
 8005a06:	4620      	mov	r0, r4
 8005a08:	f000 f818 	bl	8005a3c <__sfp>
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	60e0      	str	r0, [r4, #12]
 8005a10:	2104      	movs	r1, #4
 8005a12:	6860      	ldr	r0, [r4, #4]
 8005a14:	f7ff ff82 	bl	800591c <std>
 8005a18:	68a0      	ldr	r0, [r4, #8]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	2109      	movs	r1, #9
 8005a1e:	f7ff ff7d 	bl	800591c <std>
 8005a22:	68e0      	ldr	r0, [r4, #12]
 8005a24:	2202      	movs	r2, #2
 8005a26:	2112      	movs	r1, #18
 8005a28:	f7ff ff78 	bl	800591c <std>
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	61a3      	str	r3, [r4, #24]
 8005a30:	e7d2      	b.n	80059d8 <__sinit+0xc>
 8005a32:	bf00      	nop
 8005a34:	0800604c 	.word	0x0800604c
 8005a38:	08005965 	.word	0x08005965

08005a3c <__sfp>:
 8005a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a3e:	4607      	mov	r7, r0
 8005a40:	f7ff ffac 	bl	800599c <__sfp_lock_acquire>
 8005a44:	4b1e      	ldr	r3, [pc, #120]	; (8005ac0 <__sfp+0x84>)
 8005a46:	681e      	ldr	r6, [r3, #0]
 8005a48:	69b3      	ldr	r3, [r6, #24]
 8005a4a:	b913      	cbnz	r3, 8005a52 <__sfp+0x16>
 8005a4c:	4630      	mov	r0, r6
 8005a4e:	f7ff ffbd 	bl	80059cc <__sinit>
 8005a52:	3648      	adds	r6, #72	; 0x48
 8005a54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	d503      	bpl.n	8005a64 <__sfp+0x28>
 8005a5c:	6833      	ldr	r3, [r6, #0]
 8005a5e:	b30b      	cbz	r3, 8005aa4 <__sfp+0x68>
 8005a60:	6836      	ldr	r6, [r6, #0]
 8005a62:	e7f7      	b.n	8005a54 <__sfp+0x18>
 8005a64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a68:	b9d5      	cbnz	r5, 8005aa0 <__sfp+0x64>
 8005a6a:	4b16      	ldr	r3, [pc, #88]	; (8005ac4 <__sfp+0x88>)
 8005a6c:	60e3      	str	r3, [r4, #12]
 8005a6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005a72:	6665      	str	r5, [r4, #100]	; 0x64
 8005a74:	f000 f847 	bl	8005b06 <__retarget_lock_init_recursive>
 8005a78:	f7ff ff96 	bl	80059a8 <__sfp_lock_release>
 8005a7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005a80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005a84:	6025      	str	r5, [r4, #0]
 8005a86:	61a5      	str	r5, [r4, #24]
 8005a88:	2208      	movs	r2, #8
 8005a8a:	4629      	mov	r1, r5
 8005a8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005a90:	f7ff fd44 	bl	800551c <memset>
 8005a94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005a98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005aa0:	3468      	adds	r4, #104	; 0x68
 8005aa2:	e7d9      	b.n	8005a58 <__sfp+0x1c>
 8005aa4:	2104      	movs	r1, #4
 8005aa6:	4638      	mov	r0, r7
 8005aa8:	f7ff ff62 	bl	8005970 <__sfmoreglue>
 8005aac:	4604      	mov	r4, r0
 8005aae:	6030      	str	r0, [r6, #0]
 8005ab0:	2800      	cmp	r0, #0
 8005ab2:	d1d5      	bne.n	8005a60 <__sfp+0x24>
 8005ab4:	f7ff ff78 	bl	80059a8 <__sfp_lock_release>
 8005ab8:	230c      	movs	r3, #12
 8005aba:	603b      	str	r3, [r7, #0]
 8005abc:	e7ee      	b.n	8005a9c <__sfp+0x60>
 8005abe:	bf00      	nop
 8005ac0:	0800604c 	.word	0x0800604c
 8005ac4:	ffff0001 	.word	0xffff0001

08005ac8 <_fwalk_reent>:
 8005ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005acc:	4606      	mov	r6, r0
 8005ace:	4688      	mov	r8, r1
 8005ad0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005ad4:	2700      	movs	r7, #0
 8005ad6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ada:	f1b9 0901 	subs.w	r9, r9, #1
 8005ade:	d505      	bpl.n	8005aec <_fwalk_reent+0x24>
 8005ae0:	6824      	ldr	r4, [r4, #0]
 8005ae2:	2c00      	cmp	r4, #0
 8005ae4:	d1f7      	bne.n	8005ad6 <_fwalk_reent+0xe>
 8005ae6:	4638      	mov	r0, r7
 8005ae8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005aec:	89ab      	ldrh	r3, [r5, #12]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d907      	bls.n	8005b02 <_fwalk_reent+0x3a>
 8005af2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005af6:	3301      	adds	r3, #1
 8005af8:	d003      	beq.n	8005b02 <_fwalk_reent+0x3a>
 8005afa:	4629      	mov	r1, r5
 8005afc:	4630      	mov	r0, r6
 8005afe:	47c0      	blx	r8
 8005b00:	4307      	orrs	r7, r0
 8005b02:	3568      	adds	r5, #104	; 0x68
 8005b04:	e7e9      	b.n	8005ada <_fwalk_reent+0x12>

08005b06 <__retarget_lock_init_recursive>:
 8005b06:	4770      	bx	lr

08005b08 <__retarget_lock_acquire_recursive>:
 8005b08:	4770      	bx	lr

08005b0a <__retarget_lock_release_recursive>:
 8005b0a:	4770      	bx	lr

08005b0c <__swhatbuf_r>:
 8005b0c:	b570      	push	{r4, r5, r6, lr}
 8005b0e:	460e      	mov	r6, r1
 8005b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b14:	2900      	cmp	r1, #0
 8005b16:	b096      	sub	sp, #88	; 0x58
 8005b18:	4614      	mov	r4, r2
 8005b1a:	461d      	mov	r5, r3
 8005b1c:	da08      	bge.n	8005b30 <__swhatbuf_r+0x24>
 8005b1e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	602a      	str	r2, [r5, #0]
 8005b26:	061a      	lsls	r2, r3, #24
 8005b28:	d410      	bmi.n	8005b4c <__swhatbuf_r+0x40>
 8005b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b2e:	e00e      	b.n	8005b4e <__swhatbuf_r+0x42>
 8005b30:	466a      	mov	r2, sp
 8005b32:	f000 f9a7 	bl	8005e84 <_fstat_r>
 8005b36:	2800      	cmp	r0, #0
 8005b38:	dbf1      	blt.n	8005b1e <__swhatbuf_r+0x12>
 8005b3a:	9a01      	ldr	r2, [sp, #4]
 8005b3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b44:	425a      	negs	r2, r3
 8005b46:	415a      	adcs	r2, r3
 8005b48:	602a      	str	r2, [r5, #0]
 8005b4a:	e7ee      	b.n	8005b2a <__swhatbuf_r+0x1e>
 8005b4c:	2340      	movs	r3, #64	; 0x40
 8005b4e:	2000      	movs	r0, #0
 8005b50:	6023      	str	r3, [r4, #0]
 8005b52:	b016      	add	sp, #88	; 0x58
 8005b54:	bd70      	pop	{r4, r5, r6, pc}
	...

08005b58 <__smakebuf_r>:
 8005b58:	898b      	ldrh	r3, [r1, #12]
 8005b5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b5c:	079d      	lsls	r5, r3, #30
 8005b5e:	4606      	mov	r6, r0
 8005b60:	460c      	mov	r4, r1
 8005b62:	d507      	bpl.n	8005b74 <__smakebuf_r+0x1c>
 8005b64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b68:	6023      	str	r3, [r4, #0]
 8005b6a:	6123      	str	r3, [r4, #16]
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	6163      	str	r3, [r4, #20]
 8005b70:	b002      	add	sp, #8
 8005b72:	bd70      	pop	{r4, r5, r6, pc}
 8005b74:	ab01      	add	r3, sp, #4
 8005b76:	466a      	mov	r2, sp
 8005b78:	f7ff ffc8 	bl	8005b0c <__swhatbuf_r>
 8005b7c:	9900      	ldr	r1, [sp, #0]
 8005b7e:	4605      	mov	r5, r0
 8005b80:	4630      	mov	r0, r6
 8005b82:	f000 f895 	bl	8005cb0 <_malloc_r>
 8005b86:	b948      	cbnz	r0, 8005b9c <__smakebuf_r+0x44>
 8005b88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b8c:	059a      	lsls	r2, r3, #22
 8005b8e:	d4ef      	bmi.n	8005b70 <__smakebuf_r+0x18>
 8005b90:	f023 0303 	bic.w	r3, r3, #3
 8005b94:	f043 0302 	orr.w	r3, r3, #2
 8005b98:	81a3      	strh	r3, [r4, #12]
 8005b9a:	e7e3      	b.n	8005b64 <__smakebuf_r+0xc>
 8005b9c:	4b0d      	ldr	r3, [pc, #52]	; (8005bd4 <__smakebuf_r+0x7c>)
 8005b9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005ba0:	89a3      	ldrh	r3, [r4, #12]
 8005ba2:	6020      	str	r0, [r4, #0]
 8005ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ba8:	81a3      	strh	r3, [r4, #12]
 8005baa:	9b00      	ldr	r3, [sp, #0]
 8005bac:	6163      	str	r3, [r4, #20]
 8005bae:	9b01      	ldr	r3, [sp, #4]
 8005bb0:	6120      	str	r0, [r4, #16]
 8005bb2:	b15b      	cbz	r3, 8005bcc <__smakebuf_r+0x74>
 8005bb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bb8:	4630      	mov	r0, r6
 8005bba:	f000 f975 	bl	8005ea8 <_isatty_r>
 8005bbe:	b128      	cbz	r0, 8005bcc <__smakebuf_r+0x74>
 8005bc0:	89a3      	ldrh	r3, [r4, #12]
 8005bc2:	f023 0303 	bic.w	r3, r3, #3
 8005bc6:	f043 0301 	orr.w	r3, r3, #1
 8005bca:	81a3      	strh	r3, [r4, #12]
 8005bcc:	89a0      	ldrh	r0, [r4, #12]
 8005bce:	4305      	orrs	r5, r0
 8005bd0:	81a5      	strh	r5, [r4, #12]
 8005bd2:	e7cd      	b.n	8005b70 <__smakebuf_r+0x18>
 8005bd4:	08005965 	.word	0x08005965

08005bd8 <_free_r>:
 8005bd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bda:	2900      	cmp	r1, #0
 8005bdc:	d044      	beq.n	8005c68 <_free_r+0x90>
 8005bde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005be2:	9001      	str	r0, [sp, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f1a1 0404 	sub.w	r4, r1, #4
 8005bea:	bfb8      	it	lt
 8005bec:	18e4      	addlt	r4, r4, r3
 8005bee:	f000 f97d 	bl	8005eec <__malloc_lock>
 8005bf2:	4a1e      	ldr	r2, [pc, #120]	; (8005c6c <_free_r+0x94>)
 8005bf4:	9801      	ldr	r0, [sp, #4]
 8005bf6:	6813      	ldr	r3, [r2, #0]
 8005bf8:	b933      	cbnz	r3, 8005c08 <_free_r+0x30>
 8005bfa:	6063      	str	r3, [r4, #4]
 8005bfc:	6014      	str	r4, [r2, #0]
 8005bfe:	b003      	add	sp, #12
 8005c00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c04:	f000 b978 	b.w	8005ef8 <__malloc_unlock>
 8005c08:	42a3      	cmp	r3, r4
 8005c0a:	d908      	bls.n	8005c1e <_free_r+0x46>
 8005c0c:	6825      	ldr	r5, [r4, #0]
 8005c0e:	1961      	adds	r1, r4, r5
 8005c10:	428b      	cmp	r3, r1
 8005c12:	bf01      	itttt	eq
 8005c14:	6819      	ldreq	r1, [r3, #0]
 8005c16:	685b      	ldreq	r3, [r3, #4]
 8005c18:	1949      	addeq	r1, r1, r5
 8005c1a:	6021      	streq	r1, [r4, #0]
 8005c1c:	e7ed      	b.n	8005bfa <_free_r+0x22>
 8005c1e:	461a      	mov	r2, r3
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	b10b      	cbz	r3, 8005c28 <_free_r+0x50>
 8005c24:	42a3      	cmp	r3, r4
 8005c26:	d9fa      	bls.n	8005c1e <_free_r+0x46>
 8005c28:	6811      	ldr	r1, [r2, #0]
 8005c2a:	1855      	adds	r5, r2, r1
 8005c2c:	42a5      	cmp	r5, r4
 8005c2e:	d10b      	bne.n	8005c48 <_free_r+0x70>
 8005c30:	6824      	ldr	r4, [r4, #0]
 8005c32:	4421      	add	r1, r4
 8005c34:	1854      	adds	r4, r2, r1
 8005c36:	42a3      	cmp	r3, r4
 8005c38:	6011      	str	r1, [r2, #0]
 8005c3a:	d1e0      	bne.n	8005bfe <_free_r+0x26>
 8005c3c:	681c      	ldr	r4, [r3, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	6053      	str	r3, [r2, #4]
 8005c42:	4421      	add	r1, r4
 8005c44:	6011      	str	r1, [r2, #0]
 8005c46:	e7da      	b.n	8005bfe <_free_r+0x26>
 8005c48:	d902      	bls.n	8005c50 <_free_r+0x78>
 8005c4a:	230c      	movs	r3, #12
 8005c4c:	6003      	str	r3, [r0, #0]
 8005c4e:	e7d6      	b.n	8005bfe <_free_r+0x26>
 8005c50:	6825      	ldr	r5, [r4, #0]
 8005c52:	1961      	adds	r1, r4, r5
 8005c54:	428b      	cmp	r3, r1
 8005c56:	bf04      	itt	eq
 8005c58:	6819      	ldreq	r1, [r3, #0]
 8005c5a:	685b      	ldreq	r3, [r3, #4]
 8005c5c:	6063      	str	r3, [r4, #4]
 8005c5e:	bf04      	itt	eq
 8005c60:	1949      	addeq	r1, r1, r5
 8005c62:	6021      	streq	r1, [r4, #0]
 8005c64:	6054      	str	r4, [r2, #4]
 8005c66:	e7ca      	b.n	8005bfe <_free_r+0x26>
 8005c68:	b003      	add	sp, #12
 8005c6a:	bd30      	pop	{r4, r5, pc}
 8005c6c:	200008d0 	.word	0x200008d0

08005c70 <sbrk_aligned>:
 8005c70:	b570      	push	{r4, r5, r6, lr}
 8005c72:	4e0e      	ldr	r6, [pc, #56]	; (8005cac <sbrk_aligned+0x3c>)
 8005c74:	460c      	mov	r4, r1
 8005c76:	6831      	ldr	r1, [r6, #0]
 8005c78:	4605      	mov	r5, r0
 8005c7a:	b911      	cbnz	r1, 8005c82 <sbrk_aligned+0x12>
 8005c7c:	f000 f88c 	bl	8005d98 <_sbrk_r>
 8005c80:	6030      	str	r0, [r6, #0]
 8005c82:	4621      	mov	r1, r4
 8005c84:	4628      	mov	r0, r5
 8005c86:	f000 f887 	bl	8005d98 <_sbrk_r>
 8005c8a:	1c43      	adds	r3, r0, #1
 8005c8c:	d00a      	beq.n	8005ca4 <sbrk_aligned+0x34>
 8005c8e:	1cc4      	adds	r4, r0, #3
 8005c90:	f024 0403 	bic.w	r4, r4, #3
 8005c94:	42a0      	cmp	r0, r4
 8005c96:	d007      	beq.n	8005ca8 <sbrk_aligned+0x38>
 8005c98:	1a21      	subs	r1, r4, r0
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	f000 f87c 	bl	8005d98 <_sbrk_r>
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	d101      	bne.n	8005ca8 <sbrk_aligned+0x38>
 8005ca4:	f04f 34ff 	mov.w	r4, #4294967295
 8005ca8:	4620      	mov	r0, r4
 8005caa:	bd70      	pop	{r4, r5, r6, pc}
 8005cac:	200008d4 	.word	0x200008d4

08005cb0 <_malloc_r>:
 8005cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cb4:	1ccd      	adds	r5, r1, #3
 8005cb6:	f025 0503 	bic.w	r5, r5, #3
 8005cba:	3508      	adds	r5, #8
 8005cbc:	2d0c      	cmp	r5, #12
 8005cbe:	bf38      	it	cc
 8005cc0:	250c      	movcc	r5, #12
 8005cc2:	2d00      	cmp	r5, #0
 8005cc4:	4607      	mov	r7, r0
 8005cc6:	db01      	blt.n	8005ccc <_malloc_r+0x1c>
 8005cc8:	42a9      	cmp	r1, r5
 8005cca:	d905      	bls.n	8005cd8 <_malloc_r+0x28>
 8005ccc:	230c      	movs	r3, #12
 8005cce:	603b      	str	r3, [r7, #0]
 8005cd0:	2600      	movs	r6, #0
 8005cd2:	4630      	mov	r0, r6
 8005cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cd8:	4e2e      	ldr	r6, [pc, #184]	; (8005d94 <_malloc_r+0xe4>)
 8005cda:	f000 f907 	bl	8005eec <__malloc_lock>
 8005cde:	6833      	ldr	r3, [r6, #0]
 8005ce0:	461c      	mov	r4, r3
 8005ce2:	bb34      	cbnz	r4, 8005d32 <_malloc_r+0x82>
 8005ce4:	4629      	mov	r1, r5
 8005ce6:	4638      	mov	r0, r7
 8005ce8:	f7ff ffc2 	bl	8005c70 <sbrk_aligned>
 8005cec:	1c43      	adds	r3, r0, #1
 8005cee:	4604      	mov	r4, r0
 8005cf0:	d14d      	bne.n	8005d8e <_malloc_r+0xde>
 8005cf2:	6834      	ldr	r4, [r6, #0]
 8005cf4:	4626      	mov	r6, r4
 8005cf6:	2e00      	cmp	r6, #0
 8005cf8:	d140      	bne.n	8005d7c <_malloc_r+0xcc>
 8005cfa:	6823      	ldr	r3, [r4, #0]
 8005cfc:	4631      	mov	r1, r6
 8005cfe:	4638      	mov	r0, r7
 8005d00:	eb04 0803 	add.w	r8, r4, r3
 8005d04:	f000 f848 	bl	8005d98 <_sbrk_r>
 8005d08:	4580      	cmp	r8, r0
 8005d0a:	d13a      	bne.n	8005d82 <_malloc_r+0xd2>
 8005d0c:	6821      	ldr	r1, [r4, #0]
 8005d0e:	3503      	adds	r5, #3
 8005d10:	1a6d      	subs	r5, r5, r1
 8005d12:	f025 0503 	bic.w	r5, r5, #3
 8005d16:	3508      	adds	r5, #8
 8005d18:	2d0c      	cmp	r5, #12
 8005d1a:	bf38      	it	cc
 8005d1c:	250c      	movcc	r5, #12
 8005d1e:	4629      	mov	r1, r5
 8005d20:	4638      	mov	r0, r7
 8005d22:	f7ff ffa5 	bl	8005c70 <sbrk_aligned>
 8005d26:	3001      	adds	r0, #1
 8005d28:	d02b      	beq.n	8005d82 <_malloc_r+0xd2>
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	442b      	add	r3, r5
 8005d2e:	6023      	str	r3, [r4, #0]
 8005d30:	e00e      	b.n	8005d50 <_malloc_r+0xa0>
 8005d32:	6822      	ldr	r2, [r4, #0]
 8005d34:	1b52      	subs	r2, r2, r5
 8005d36:	d41e      	bmi.n	8005d76 <_malloc_r+0xc6>
 8005d38:	2a0b      	cmp	r2, #11
 8005d3a:	d916      	bls.n	8005d6a <_malloc_r+0xba>
 8005d3c:	1961      	adds	r1, r4, r5
 8005d3e:	42a3      	cmp	r3, r4
 8005d40:	6025      	str	r5, [r4, #0]
 8005d42:	bf18      	it	ne
 8005d44:	6059      	strne	r1, [r3, #4]
 8005d46:	6863      	ldr	r3, [r4, #4]
 8005d48:	bf08      	it	eq
 8005d4a:	6031      	streq	r1, [r6, #0]
 8005d4c:	5162      	str	r2, [r4, r5]
 8005d4e:	604b      	str	r3, [r1, #4]
 8005d50:	4638      	mov	r0, r7
 8005d52:	f104 060b 	add.w	r6, r4, #11
 8005d56:	f000 f8cf 	bl	8005ef8 <__malloc_unlock>
 8005d5a:	f026 0607 	bic.w	r6, r6, #7
 8005d5e:	1d23      	adds	r3, r4, #4
 8005d60:	1af2      	subs	r2, r6, r3
 8005d62:	d0b6      	beq.n	8005cd2 <_malloc_r+0x22>
 8005d64:	1b9b      	subs	r3, r3, r6
 8005d66:	50a3      	str	r3, [r4, r2]
 8005d68:	e7b3      	b.n	8005cd2 <_malloc_r+0x22>
 8005d6a:	6862      	ldr	r2, [r4, #4]
 8005d6c:	42a3      	cmp	r3, r4
 8005d6e:	bf0c      	ite	eq
 8005d70:	6032      	streq	r2, [r6, #0]
 8005d72:	605a      	strne	r2, [r3, #4]
 8005d74:	e7ec      	b.n	8005d50 <_malloc_r+0xa0>
 8005d76:	4623      	mov	r3, r4
 8005d78:	6864      	ldr	r4, [r4, #4]
 8005d7a:	e7b2      	b.n	8005ce2 <_malloc_r+0x32>
 8005d7c:	4634      	mov	r4, r6
 8005d7e:	6876      	ldr	r6, [r6, #4]
 8005d80:	e7b9      	b.n	8005cf6 <_malloc_r+0x46>
 8005d82:	230c      	movs	r3, #12
 8005d84:	603b      	str	r3, [r7, #0]
 8005d86:	4638      	mov	r0, r7
 8005d88:	f000 f8b6 	bl	8005ef8 <__malloc_unlock>
 8005d8c:	e7a1      	b.n	8005cd2 <_malloc_r+0x22>
 8005d8e:	6025      	str	r5, [r4, #0]
 8005d90:	e7de      	b.n	8005d50 <_malloc_r+0xa0>
 8005d92:	bf00      	nop
 8005d94:	200008d0 	.word	0x200008d0

08005d98 <_sbrk_r>:
 8005d98:	b538      	push	{r3, r4, r5, lr}
 8005d9a:	4d06      	ldr	r5, [pc, #24]	; (8005db4 <_sbrk_r+0x1c>)
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	4604      	mov	r4, r0
 8005da0:	4608      	mov	r0, r1
 8005da2:	602b      	str	r3, [r5, #0]
 8005da4:	f7fb fb20 	bl	80013e8 <_sbrk>
 8005da8:	1c43      	adds	r3, r0, #1
 8005daa:	d102      	bne.n	8005db2 <_sbrk_r+0x1a>
 8005dac:	682b      	ldr	r3, [r5, #0]
 8005dae:	b103      	cbz	r3, 8005db2 <_sbrk_r+0x1a>
 8005db0:	6023      	str	r3, [r4, #0]
 8005db2:	bd38      	pop	{r3, r4, r5, pc}
 8005db4:	200008d8 	.word	0x200008d8

08005db8 <__sread>:
 8005db8:	b510      	push	{r4, lr}
 8005dba:	460c      	mov	r4, r1
 8005dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dc0:	f000 f8a0 	bl	8005f04 <_read_r>
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	bfab      	itete	ge
 8005dc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005dca:	89a3      	ldrhlt	r3, [r4, #12]
 8005dcc:	181b      	addge	r3, r3, r0
 8005dce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005dd2:	bfac      	ite	ge
 8005dd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005dd6:	81a3      	strhlt	r3, [r4, #12]
 8005dd8:	bd10      	pop	{r4, pc}

08005dda <__swrite>:
 8005dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dde:	461f      	mov	r7, r3
 8005de0:	898b      	ldrh	r3, [r1, #12]
 8005de2:	05db      	lsls	r3, r3, #23
 8005de4:	4605      	mov	r5, r0
 8005de6:	460c      	mov	r4, r1
 8005de8:	4616      	mov	r6, r2
 8005dea:	d505      	bpl.n	8005df8 <__swrite+0x1e>
 8005dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005df0:	2302      	movs	r3, #2
 8005df2:	2200      	movs	r2, #0
 8005df4:	f000 f868 	bl	8005ec8 <_lseek_r>
 8005df8:	89a3      	ldrh	r3, [r4, #12]
 8005dfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e02:	81a3      	strh	r3, [r4, #12]
 8005e04:	4632      	mov	r2, r6
 8005e06:	463b      	mov	r3, r7
 8005e08:	4628      	mov	r0, r5
 8005e0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e0e:	f000 b817 	b.w	8005e40 <_write_r>

08005e12 <__sseek>:
 8005e12:	b510      	push	{r4, lr}
 8005e14:	460c      	mov	r4, r1
 8005e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e1a:	f000 f855 	bl	8005ec8 <_lseek_r>
 8005e1e:	1c43      	adds	r3, r0, #1
 8005e20:	89a3      	ldrh	r3, [r4, #12]
 8005e22:	bf15      	itete	ne
 8005e24:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e2e:	81a3      	strheq	r3, [r4, #12]
 8005e30:	bf18      	it	ne
 8005e32:	81a3      	strhne	r3, [r4, #12]
 8005e34:	bd10      	pop	{r4, pc}

08005e36 <__sclose>:
 8005e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e3a:	f000 b813 	b.w	8005e64 <_close_r>
	...

08005e40 <_write_r>:
 8005e40:	b538      	push	{r3, r4, r5, lr}
 8005e42:	4d07      	ldr	r5, [pc, #28]	; (8005e60 <_write_r+0x20>)
 8005e44:	4604      	mov	r4, r0
 8005e46:	4608      	mov	r0, r1
 8005e48:	4611      	mov	r1, r2
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	602a      	str	r2, [r5, #0]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	f7fb fa79 	bl	8001346 <_write>
 8005e54:	1c43      	adds	r3, r0, #1
 8005e56:	d102      	bne.n	8005e5e <_write_r+0x1e>
 8005e58:	682b      	ldr	r3, [r5, #0]
 8005e5a:	b103      	cbz	r3, 8005e5e <_write_r+0x1e>
 8005e5c:	6023      	str	r3, [r4, #0]
 8005e5e:	bd38      	pop	{r3, r4, r5, pc}
 8005e60:	200008d8 	.word	0x200008d8

08005e64 <_close_r>:
 8005e64:	b538      	push	{r3, r4, r5, lr}
 8005e66:	4d06      	ldr	r5, [pc, #24]	; (8005e80 <_close_r+0x1c>)
 8005e68:	2300      	movs	r3, #0
 8005e6a:	4604      	mov	r4, r0
 8005e6c:	4608      	mov	r0, r1
 8005e6e:	602b      	str	r3, [r5, #0]
 8005e70:	f7fb fa85 	bl	800137e <_close>
 8005e74:	1c43      	adds	r3, r0, #1
 8005e76:	d102      	bne.n	8005e7e <_close_r+0x1a>
 8005e78:	682b      	ldr	r3, [r5, #0]
 8005e7a:	b103      	cbz	r3, 8005e7e <_close_r+0x1a>
 8005e7c:	6023      	str	r3, [r4, #0]
 8005e7e:	bd38      	pop	{r3, r4, r5, pc}
 8005e80:	200008d8 	.word	0x200008d8

08005e84 <_fstat_r>:
 8005e84:	b538      	push	{r3, r4, r5, lr}
 8005e86:	4d07      	ldr	r5, [pc, #28]	; (8005ea4 <_fstat_r+0x20>)
 8005e88:	2300      	movs	r3, #0
 8005e8a:	4604      	mov	r4, r0
 8005e8c:	4608      	mov	r0, r1
 8005e8e:	4611      	mov	r1, r2
 8005e90:	602b      	str	r3, [r5, #0]
 8005e92:	f7fb fa80 	bl	8001396 <_fstat>
 8005e96:	1c43      	adds	r3, r0, #1
 8005e98:	d102      	bne.n	8005ea0 <_fstat_r+0x1c>
 8005e9a:	682b      	ldr	r3, [r5, #0]
 8005e9c:	b103      	cbz	r3, 8005ea0 <_fstat_r+0x1c>
 8005e9e:	6023      	str	r3, [r4, #0]
 8005ea0:	bd38      	pop	{r3, r4, r5, pc}
 8005ea2:	bf00      	nop
 8005ea4:	200008d8 	.word	0x200008d8

08005ea8 <_isatty_r>:
 8005ea8:	b538      	push	{r3, r4, r5, lr}
 8005eaa:	4d06      	ldr	r5, [pc, #24]	; (8005ec4 <_isatty_r+0x1c>)
 8005eac:	2300      	movs	r3, #0
 8005eae:	4604      	mov	r4, r0
 8005eb0:	4608      	mov	r0, r1
 8005eb2:	602b      	str	r3, [r5, #0]
 8005eb4:	f7fb fa7f 	bl	80013b6 <_isatty>
 8005eb8:	1c43      	adds	r3, r0, #1
 8005eba:	d102      	bne.n	8005ec2 <_isatty_r+0x1a>
 8005ebc:	682b      	ldr	r3, [r5, #0]
 8005ebe:	b103      	cbz	r3, 8005ec2 <_isatty_r+0x1a>
 8005ec0:	6023      	str	r3, [r4, #0]
 8005ec2:	bd38      	pop	{r3, r4, r5, pc}
 8005ec4:	200008d8 	.word	0x200008d8

08005ec8 <_lseek_r>:
 8005ec8:	b538      	push	{r3, r4, r5, lr}
 8005eca:	4d07      	ldr	r5, [pc, #28]	; (8005ee8 <_lseek_r+0x20>)
 8005ecc:	4604      	mov	r4, r0
 8005ece:	4608      	mov	r0, r1
 8005ed0:	4611      	mov	r1, r2
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	602a      	str	r2, [r5, #0]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	f7fb fa78 	bl	80013cc <_lseek>
 8005edc:	1c43      	adds	r3, r0, #1
 8005ede:	d102      	bne.n	8005ee6 <_lseek_r+0x1e>
 8005ee0:	682b      	ldr	r3, [r5, #0]
 8005ee2:	b103      	cbz	r3, 8005ee6 <_lseek_r+0x1e>
 8005ee4:	6023      	str	r3, [r4, #0]
 8005ee6:	bd38      	pop	{r3, r4, r5, pc}
 8005ee8:	200008d8 	.word	0x200008d8

08005eec <__malloc_lock>:
 8005eec:	4801      	ldr	r0, [pc, #4]	; (8005ef4 <__malloc_lock+0x8>)
 8005eee:	f7ff be0b 	b.w	8005b08 <__retarget_lock_acquire_recursive>
 8005ef2:	bf00      	nop
 8005ef4:	200008cc 	.word	0x200008cc

08005ef8 <__malloc_unlock>:
 8005ef8:	4801      	ldr	r0, [pc, #4]	; (8005f00 <__malloc_unlock+0x8>)
 8005efa:	f7ff be06 	b.w	8005b0a <__retarget_lock_release_recursive>
 8005efe:	bf00      	nop
 8005f00:	200008cc 	.word	0x200008cc

08005f04 <_read_r>:
 8005f04:	b538      	push	{r3, r4, r5, lr}
 8005f06:	4d07      	ldr	r5, [pc, #28]	; (8005f24 <_read_r+0x20>)
 8005f08:	4604      	mov	r4, r0
 8005f0a:	4608      	mov	r0, r1
 8005f0c:	4611      	mov	r1, r2
 8005f0e:	2200      	movs	r2, #0
 8005f10:	602a      	str	r2, [r5, #0]
 8005f12:	461a      	mov	r2, r3
 8005f14:	f7fb f9fa 	bl	800130c <_read>
 8005f18:	1c43      	adds	r3, r0, #1
 8005f1a:	d102      	bne.n	8005f22 <_read_r+0x1e>
 8005f1c:	682b      	ldr	r3, [r5, #0]
 8005f1e:	b103      	cbz	r3, 8005f22 <_read_r+0x1e>
 8005f20:	6023      	str	r3, [r4, #0]
 8005f22:	bd38      	pop	{r3, r4, r5, pc}
 8005f24:	200008d8 	.word	0x200008d8

08005f28 <_init>:
 8005f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f2a:	bf00      	nop
 8005f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f2e:	bc08      	pop	{r3}
 8005f30:	469e      	mov	lr, r3
 8005f32:	4770      	bx	lr

08005f34 <_fini>:
 8005f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f36:	bf00      	nop
 8005f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f3a:	bc08      	pop	{r3}
 8005f3c:	469e      	mov	lr, r3
 8005f3e:	4770      	bx	lr
