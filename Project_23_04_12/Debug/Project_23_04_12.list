
Project_23_04_12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008148  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08008318  08008318  00018318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008580  08008580  000200e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008580  08008580  00018580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008588  08008588  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008588  08008588  00018588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800858c  0800858c  0001858c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08008590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  200000e0  08008670  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000638  08008670  00020638  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d807  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000220e  00000000  00000000  0002d917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0002fb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a28  00000000  00000000  00030618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000230b0  00000000  00000000  00031040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f71b  00000000  00000000  000540f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc648  00000000  00000000  0006380b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012fe53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033d8  00000000  00000000  0012fea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000e0 	.word	0x200000e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008300 	.word	0x08008300

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000e4 	.word	0x200000e4
 800020c:	08008300 	.word	0x08008300

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <__io_putchar>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

/* @brief  Retargets the C library printf function to the USART. */
PUTCHAR_PROTOTYPE {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80005bc:	1d39      	adds	r1, r7, #4
 80005be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005c2:	2201      	movs	r2, #1
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <__io_putchar+0x20>)
 80005c6:	f005 fc30 	bl	8005e2a <HAL_UART_Transmit>
  return ch;
 80005ca:	687b      	ldr	r3, [r7, #4]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200001b4 	.word	0x200001b4

080005d8 <main>:
uint16_t bitFlag;
volatile uint8_t spi2F;

/* @brief  Main program */
int main(void)
{
 80005d8:	b5b0      	push	{r4, r5, r7, lr}
 80005da:	b0a2      	sub	sp, #136	; 0x88
 80005dc:	af02      	add	r7, sp, #8
	HAL_Init();
 80005de:	f002 fcb7 	bl	8002f50 <HAL_Init>

	SystemClock_Config();
 80005e2:	f000 fa05 	bl	80009f0 <SystemClock_Config>

	MX_GPIO_Init();
 80005e6:	f000 faf3 	bl	8000bd0 <MX_GPIO_Init>
	MX_SPI2_Init();
 80005ea:	f000 fa6f 	bl	8000acc <MX_SPI2_Init>
	MX_DMA_Init();
 80005ee:	f000 facf 	bl	8000b90 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80005f2:	f000 faa3 	bl	8000b3c <MX_USART2_UART_Init>

	serial_init();
 80005f6:	f000 fcf3 	bl	8000fe0 <serial_init>
	#ifdef MASTER_BOARD
	printf("Init OKE\r\n");
 80005fa:	48b3      	ldr	r0, [pc, #716]	; (80008c8 <main+0x2f0>)
 80005fc:	f006 ff02 	bl	8007404 <puts>
		//printf("Delay...\r\n");
		//HAL_Delay(2000);
		#endif


		if (bitFlag & BFLAG_UART_RCV)		// UART Processing
 8000600:	4bb2      	ldr	r3, [pc, #712]	; (80008cc <main+0x2f4>)
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	f003 0301 	and.w	r3, r3, #1
 8000608:	2b00      	cmp	r3, #0
 800060a:	d01a      	beq.n	8000642 <main+0x6a>
		{
			printf("UART...\r\n");
 800060c:	48b0      	ldr	r0, [pc, #704]	; (80008d0 <main+0x2f8>)
 800060e:	f006 fef9 	bl	8007404 <puts>
			uartProcessing (u8arr_uartEvent, u16_lenCnt - 2); // remove \r & \n
 8000612:	4bb0      	ldr	r3, [pc, #704]	; (80008d4 <main+0x2fc>)
 8000614:	881b      	ldrh	r3, [r3, #0]
 8000616:	3b02      	subs	r3, #2
 8000618:	b29b      	uxth	r3, r3
 800061a:	4619      	mov	r1, r3
 800061c:	48ae      	ldr	r0, [pc, #696]	; (80008d8 <main+0x300>)
 800061e:	f000 fc15 	bl	8000e4c <uartProcessing>
			memset(u8arr_uartEvent, 0, UART_BUF_SZ);
 8000622:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000626:	2100      	movs	r1, #0
 8000628:	48ab      	ldr	r0, [pc, #684]	; (80008d8 <main+0x300>)
 800062a:	f006 fe5d 	bl	80072e8 <memset>
			u16_lenCnt = 0;
 800062e:	4ba9      	ldr	r3, [pc, #676]	; (80008d4 <main+0x2fc>)
 8000630:	2200      	movs	r2, #0
 8000632:	801a      	strh	r2, [r3, #0]
			bitFlag 	&= ~BFLAG_UART_RCV;
 8000634:	4ba5      	ldr	r3, [pc, #660]	; (80008cc <main+0x2f4>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	f023 0301 	bic.w	r3, r3, #1
 800063c:	b29a      	uxth	r2, r3
 800063e:	4ba3      	ldr	r3, [pc, #652]	; (80008cc <main+0x2f4>)
 8000640:	801a      	strh	r2, [r3, #0]

		memset(aRxBuffer, 0, sizeof(aRxBuffer));
	  	#endif

	  	#ifdef MASTER_BOARD
		if (bitFlag & BFLAG_BTN)
 8000642:	4ba2      	ldr	r3, [pc, #648]	; (80008cc <main+0x2f4>)
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	f003 0320 	and.w	r3, r3, #32
 800064a:	2b00      	cmp	r3, #0
 800064c:	d077      	beq.n	800073e <main+0x166>
		{
			printf("Button Pressed\r\n");
 800064e:	48a3      	ldr	r0, [pc, #652]	; (80008dc <main+0x304>)
 8000650:	f006 fed8 	bl	8007404 <puts>
			while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY){}
 8000654:	bf00      	nop
 8000656:	48a2      	ldr	r0, [pc, #648]	; (80008e0 <main+0x308>)
 8000658:	f004 ffe4 	bl	8005624 <HAL_SPI_GetState>
 800065c:	4603      	mov	r3, r0
 800065e:	2b01      	cmp	r3, #1
 8000660:	d1f9      	bne.n	8000656 <main+0x7e>

			spi2F = 0;
 8000662:	4ba0      	ldr	r3, [pc, #640]	; (80008e4 <main+0x30c>)
 8000664:	2200      	movs	r2, #0
 8000666:	701a      	strb	r2, [r3, #0]

			printf("MASTER TX: %d %d %d %d\r\n\n", aTxBuffer[0], aTxBuffer[1], aTxBuffer[2], aTxBuffer[3]);
 8000668:	4b9f      	ldr	r3, [pc, #636]	; (80008e8 <main+0x310>)
 800066a:	f993 3000 	ldrsb.w	r3, [r3]
 800066e:	4619      	mov	r1, r3
 8000670:	4b9d      	ldr	r3, [pc, #628]	; (80008e8 <main+0x310>)
 8000672:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000676:	461a      	mov	r2, r3
 8000678:	4b9b      	ldr	r3, [pc, #620]	; (80008e8 <main+0x310>)
 800067a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800067e:	4618      	mov	r0, r3
 8000680:	4b99      	ldr	r3, [pc, #612]	; (80008e8 <main+0x310>)
 8000682:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	4603      	mov	r3, r0
 800068a:	4898      	ldr	r0, [pc, #608]	; (80008ec <main+0x314>)
 800068c:	f006 fe34 	bl	80072f8 <iprintf>
			if(HAL_SPI_Transmit_IT(&hspi2, (uint8_t*)aTxBuffer, 10) != HAL_OK)
 8000690:	220a      	movs	r2, #10
 8000692:	4995      	ldr	r1, [pc, #596]	; (80008e8 <main+0x310>)
 8000694:	4892      	ldr	r0, [pc, #584]	; (80008e0 <main+0x308>)
 8000696:	f004 fd09 	bl	80050ac <HAL_SPI_Transmit_IT>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <main+0xcc>
			{
				Error_Handler();
 80006a0:	f000 fc8a 	bl	8000fb8 <Error_Handler>
			}

			while (spi2F == 0){}
 80006a4:	bf00      	nop
 80006a6:	4b8f      	ldr	r3, [pc, #572]	; (80008e4 <main+0x30c>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d0fa      	beq.n	80006a6 <main+0xce>
			while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY){}
 80006b0:	bf00      	nop
 80006b2:	488b      	ldr	r0, [pc, #556]	; (80008e0 <main+0x308>)
 80006b4:	f004 ffb6 	bl	8005624 <HAL_SPI_GetState>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d1f9      	bne.n	80006b2 <main+0xda>
			printf("Send Success\r\n");
 80006be:	488c      	ldr	r0, [pc, #560]	; (80008f0 <main+0x318>)
 80006c0:	f006 fea0 	bl	8007404 <puts>
			spi2F = 0;
 80006c4:	4b87      	ldr	r3, [pc, #540]	; (80008e4 <main+0x30c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]

			HAL_Delay(100);	//jangan diilangin soalnya bisa bikin error
 80006ca:	2064      	movs	r0, #100	; 0x64
 80006cc:	f002 fcb2 	bl	8003034 <HAL_Delay>
			if(HAL_SPI_Receive_IT(&hspi2, (uint8_t*)aRxBuffer, 10) != HAL_OK)
 80006d0:	220a      	movs	r2, #10
 80006d2:	4988      	ldr	r1, [pc, #544]	; (80008f4 <main+0x31c>)
 80006d4:	4882      	ldr	r0, [pc, #520]	; (80008e0 <main+0x308>)
 80006d6:	f004 fd73 	bl	80051c0 <HAL_SPI_Receive_IT>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <main+0x10c>
			{
				Error_Handler();
 80006e0:	f000 fc6a 	bl	8000fb8 <Error_Handler>
			}

			while (spi2F == 0){}
 80006e4:	bf00      	nop
 80006e6:	4b7f      	ldr	r3, [pc, #508]	; (80008e4 <main+0x30c>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d0fa      	beq.n	80006e6 <main+0x10e>
			while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY){}
 80006f0:	bf00      	nop
 80006f2:	487b      	ldr	r0, [pc, #492]	; (80008e0 <main+0x308>)
 80006f4:	f004 ff96 	bl	8005624 <HAL_SPI_GetState>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d1f9      	bne.n	80006f2 <main+0x11a>

			printf("MASTER RX: %d %d %d %d\r\n\n", aRxBuffer[0], aRxBuffer[1], aRxBuffer[2], aRxBuffer[3]);
 80006fe:	4b7d      	ldr	r3, [pc, #500]	; (80008f4 <main+0x31c>)
 8000700:	f993 3000 	ldrsb.w	r3, [r3]
 8000704:	4619      	mov	r1, r3
 8000706:	4b7b      	ldr	r3, [pc, #492]	; (80008f4 <main+0x31c>)
 8000708:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800070c:	461a      	mov	r2, r3
 800070e:	4b79      	ldr	r3, [pc, #484]	; (80008f4 <main+0x31c>)
 8000710:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000714:	4618      	mov	r0, r3
 8000716:	4b77      	ldr	r3, [pc, #476]	; (80008f4 <main+0x31c>)
 8000718:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	4603      	mov	r3, r0
 8000720:	4875      	ldr	r0, [pc, #468]	; (80008f8 <main+0x320>)
 8000722:	f006 fde9 	bl	80072f8 <iprintf>

			memset(aRxBuffer, 0, sizeof(aRxBuffer));
 8000726:	220b      	movs	r2, #11
 8000728:	2100      	movs	r1, #0
 800072a:	4872      	ldr	r0, [pc, #456]	; (80008f4 <main+0x31c>)
 800072c:	f006 fddc 	bl	80072e8 <memset>

			bitFlag &= ~BFLAG_BTN;
 8000730:	4b66      	ldr	r3, [pc, #408]	; (80008cc <main+0x2f4>)
 8000732:	881b      	ldrh	r3, [r3, #0]
 8000734:	f023 0320 	bic.w	r3, r3, #32
 8000738:	b29a      	uxth	r2, r3
 800073a:	4b64      	ldr	r3, [pc, #400]	; (80008cc <main+0x2f4>)
 800073c:	801a      	strh	r2, [r3, #0]
		}

		if (bitFlag & BFLAG_SPIM_WR)
 800073e:	4b63      	ldr	r3, [pc, #396]	; (80008cc <main+0x2f4>)
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	2b00      	cmp	r3, #0
 8000748:	f000 813a 	beq.w	80009c0 <main+0x3e8>
		{
			printf("Master TX: %d %d %d %d\r\n\n", aTxBuffer[0], aTxBuffer[1], aTxBuffer[2], aTxBuffer[3]);
 800074c:	4b66      	ldr	r3, [pc, #408]	; (80008e8 <main+0x310>)
 800074e:	f993 3000 	ldrsb.w	r3, [r3]
 8000752:	4619      	mov	r1, r3
 8000754:	4b64      	ldr	r3, [pc, #400]	; (80008e8 <main+0x310>)
 8000756:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800075a:	461a      	mov	r2, r3
 800075c:	4b62      	ldr	r3, [pc, #392]	; (80008e8 <main+0x310>)
 800075e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000762:	4618      	mov	r0, r3
 8000764:	4b60      	ldr	r3, [pc, #384]	; (80008e8 <main+0x310>)
 8000766:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	4603      	mov	r3, r0
 800076e:	4863      	ldr	r0, [pc, #396]	; (80008fc <main+0x324>)
 8000770:	f006 fdc2 	bl	80072f8 <iprintf>

			// CORE OF SPI MASTER
			//HAL_Delay(100);
			while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY){}
 8000774:	bf00      	nop
 8000776:	485a      	ldr	r0, [pc, #360]	; (80008e0 <main+0x308>)
 8000778:	f004 ff54 	bl	8005624 <HAL_SPI_GetState>
 800077c:	4603      	mov	r3, r0
 800077e:	2b01      	cmp	r3, #1
 8000780:	d1f9      	bne.n	8000776 <main+0x19e>

			spi2F = 0;
 8000782:	4b58      	ldr	r3, [pc, #352]	; (80008e4 <main+0x30c>)
 8000784:	2200      	movs	r2, #0
 8000786:	701a      	strb	r2, [r3, #0]
			while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY){}
			printf("Send Success\r\n");
			spi2F = 0;

			HAL_Delay(100);	//jangan diilangin soalnya bisa bikin error*/
			if(HAL_SPI_Receive(&hspi2, (uint8_t*)aRxBuffer, 10, 100) != HAL_OK)
 8000788:	2364      	movs	r3, #100	; 0x64
 800078a:	220a      	movs	r2, #10
 800078c:	4959      	ldr	r1, [pc, #356]	; (80008f4 <main+0x31c>)
 800078e:	4854      	ldr	r0, [pc, #336]	; (80008e0 <main+0x308>)
 8000790:	f004 f9d9 	bl	8004b46 <HAL_SPI_Receive>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <main+0x1c6>
			{
				Error_Handler();
 800079a:	f000 fc0d 	bl	8000fb8 <Error_Handler>
			}

			//while (spi2F == 0){}
			while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY){}
 800079e:	bf00      	nop
 80007a0:	484f      	ldr	r0, [pc, #316]	; (80008e0 <main+0x308>)
 80007a2:	f004 ff3f 	bl	8005624 <HAL_SPI_GetState>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d1f9      	bne.n	80007a0 <main+0x1c8>
			// CORE SPI MASTER -- END*/

			if(aRxBuffer[0]==1)		// {WB1:
 80007ac:	4b51      	ldr	r3, [pc, #324]	; (80008f4 <main+0x31c>)
 80007ae:	f993 3000 	ldrsb.w	r3, [r3]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d138      	bne.n	8000828 <main+0x250>
			{
				char send[] = {0x14, 0x15,
 80007b6:	2314      	movs	r3, #20
 80007b8:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 80007bc:	2315      	movs	r3, #21
 80007be:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
 80007c2:	2353      	movs	r3, #83	; 0x53
 80007c4:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 80007c8:	2345      	movs	r3, #69	; 0x45
 80007ca:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80007ce:	234e      	movs	r3, #78	; 0x4e
 80007d0:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
 80007d4:	2344      	movs	r3, #68	; 0x44
 80007d6:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 80007da:	2320      	movs	r3, #32
 80007dc:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 80007e0:	2352      	movs	r3, #82	; 0x52
 80007e2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80007e6:	2345      	movs	r3, #69	; 0x45
 80007e8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
 80007ec:	2353      	movs	r3, #83	; 0x53
 80007ee:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
 80007f2:	2331      	movs	r3, #49	; 0x31
 80007f4:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
 80007f8:	233a      	movs	r3, #58	; 0x3a
 80007fa:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
					  'S', 'E', 'N', 'D', ' ', 'R', 'E', 'S', '1', ':', aTxBuffer[0], 0x0d, 0x0a};
 80007fe:	4b3a      	ldr	r3, [pc, #232]	; (80008e8 <main+0x310>)
 8000800:	f993 3000 	ldrsb.w	r3, [r3]
 8000804:	b2db      	uxtb	r3, r3
				char send[] = {0x14, 0x15,
 8000806:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
 800080a:	230d      	movs	r3, #13
 800080c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8000810:	230a      	movs	r3, #10
 8000812:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
				HAL_UART_Transmit(&huart2, (uint8_t *)send, 18, 0xFFFF);
 8000816:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800081a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800081e:	2212      	movs	r2, #18
 8000820:	4837      	ldr	r0, [pc, #220]	; (8000900 <main+0x328>)
 8000822:	f005 fb02 	bl	8005e2a <HAL_UART_Transmit>
 8000826:	e088      	b.n	800093a <main+0x362>
			}
			else if(aRxBuffer[0]==2)		// {WB2:
 8000828:	4b32      	ldr	r3, [pc, #200]	; (80008f4 <main+0x31c>)
 800082a:	f993 3000 	ldrsb.w	r3, [r3]
 800082e:	2b02      	cmp	r3, #2
 8000830:	d10e      	bne.n	8000850 <main+0x278>
			{
				char send[] = {0x14, 0x15,
 8000832:	4b34      	ldr	r3, [pc, #208]	; (8000904 <main+0x32c>)
 8000834:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000838:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800083a:	c407      	stmia	r4!, {r0, r1, r2}
 800083c:	8023      	strh	r3, [r4, #0]
					  'S', 'E', 'N', 'D', ' ', 'R', 'E', 'S', '2', ':', 0x0d, 0x0a};
				HAL_UART_Transmit(&huart2, (uint8_t *)send, 14, 0xFFFF);
 800083e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000842:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000846:	220e      	movs	r2, #14
 8000848:	482d      	ldr	r0, [pc, #180]	; (8000900 <main+0x328>)
 800084a:	f005 faee 	bl	8005e2a <HAL_UART_Transmit>
 800084e:	e074      	b.n	800093a <main+0x362>
			}
			else if(aRxBuffer[0]==3)		// {WB3:
 8000850:	4b28      	ldr	r3, [pc, #160]	; (80008f4 <main+0x31c>)
 8000852:	f993 3000 	ldrsb.w	r3, [r3]
 8000856:	2b03      	cmp	r3, #3
 8000858:	d10e      	bne.n	8000878 <main+0x2a0>
			{
				char send[] = {0x14, 0x15,
 800085a:	4b2b      	ldr	r3, [pc, #172]	; (8000908 <main+0x330>)
 800085c:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000860:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000862:	c407      	stmia	r4!, {r0, r1, r2}
 8000864:	8023      	strh	r3, [r4, #0]
					  'S', 'E', 'N', 'D', ' ', 'R', 'E', 'S', '3', ':', 0x0d, 0x0a};
				HAL_UART_Transmit(&huart2, (uint8_t *)send, 14, 0xFFFF);
 8000866:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800086a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800086e:	220e      	movs	r2, #14
 8000870:	4823      	ldr	r0, [pc, #140]	; (8000900 <main+0x328>)
 8000872:	f005 fada 	bl	8005e2a <HAL_UART_Transmit>
 8000876:	e060      	b.n	800093a <main+0x362>
			}
			else if(aRxBuffer[0]==4)		// {RB1}
 8000878:	4b1e      	ldr	r3, [pc, #120]	; (80008f4 <main+0x31c>)
 800087a:	f993 3000 	ldrsb.w	r3, [r3]
 800087e:	2b04      	cmp	r3, #4
 8000880:	d10e      	bne.n	80008a0 <main+0x2c8>
			{
				char send[] = {0x14, 0x15,
 8000882:	4b22      	ldr	r3, [pc, #136]	; (800090c <main+0x334>)
 8000884:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000888:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800088a:	c407      	stmia	r4!, {r0, r1, r2}
 800088c:	8023      	strh	r3, [r4, #0]
					  'R', 'E', 'A', 'D', ' ', 'R', 'E', 'S', '1', ':', 0x0d, 0x0a};
				HAL_UART_Transmit(&huart2, (uint8_t *)send, 14, 0xFFFF);
 800088e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000892:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000896:	220e      	movs	r2, #14
 8000898:	4819      	ldr	r0, [pc, #100]	; (8000900 <main+0x328>)
 800089a:	f005 fac6 	bl	8005e2a <HAL_UART_Transmit>
 800089e:	e04c      	b.n	800093a <main+0x362>
			}
			else if(aRxBuffer[0]==5)		// {RB2}
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <main+0x31c>)
 80008a2:	f993 3000 	ldrsb.w	r3, [r3]
 80008a6:	2b05      	cmp	r3, #5
 80008a8:	d134      	bne.n	8000914 <main+0x33c>
			{
				char send[] = {0x14, 0x15,
 80008aa:	4b19      	ldr	r3, [pc, #100]	; (8000910 <main+0x338>)
 80008ac:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80008b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008b2:	c407      	stmia	r4!, {r0, r1, r2}
 80008b4:	8023      	strh	r3, [r4, #0]
					  'R', 'E', 'A', 'D', ' ', 'R', 'E', 'S', '2', ':', 0x0d, 0x0a};
				HAL_UART_Transmit(&huart2, (uint8_t *)send, 14, 0xFFFF);
 80008b6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80008ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008be:	220e      	movs	r2, #14
 80008c0:	480f      	ldr	r0, [pc, #60]	; (8000900 <main+0x328>)
 80008c2:	f005 fab2 	bl	8005e2a <HAL_UART_Transmit>
 80008c6:	e038      	b.n	800093a <main+0x362>
 80008c8:	08008318 	.word	0x08008318
 80008cc:	20000408 	.word	0x20000408
 80008d0:	08008324 	.word	0x08008324
 80008d4:	200003fa 	.word	0x200003fa
 80008d8:	200002f8 	.word	0x200002f8
 80008dc:	08008330 	.word	0x08008330
 80008e0:	200000fc 	.word	0x200000fc
 80008e4:	2000040a 	.word	0x2000040a
 80008e8:	20000000 	.word	0x20000000
 80008ec:	08008340 	.word	0x08008340
 80008f0:	0800835c 	.word	0x0800835c
 80008f4:	200003fc 	.word	0x200003fc
 80008f8:	0800836c 	.word	0x0800836c
 80008fc:	08008388 	.word	0x08008388
 8000900:	200001b4 	.word	0x200001b4
 8000904:	080083c0 	.word	0x080083c0
 8000908:	080083d0 	.word	0x080083d0
 800090c:	080083e0 	.word	0x080083e0
 8000910:	080083f0 	.word	0x080083f0
			}
			else if(aRxBuffer[0]==6)		// {RB3}
 8000914:	4b2e      	ldr	r3, [pc, #184]	; (80009d0 <main+0x3f8>)
 8000916:	f993 3000 	ldrsb.w	r3, [r3]
 800091a:	2b06      	cmp	r3, #6
 800091c:	d10d      	bne.n	800093a <main+0x362>
			{
				char send[] = {0x14, 0x15,
 800091e:	4b2d      	ldr	r3, [pc, #180]	; (80009d4 <main+0x3fc>)
 8000920:	f107 0420 	add.w	r4, r7, #32
 8000924:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000926:	c407      	stmia	r4!, {r0, r1, r2}
 8000928:	8023      	strh	r3, [r4, #0]
					  'R', 'E', 'A', 'D', ' ', 'R', 'E', 'S', '3', ':', 0x0d, 0x0a};
				HAL_UART_Transmit(&huart2, (uint8_t *)send, 14, 0xFFFF);
 800092a:	f107 0120 	add.w	r1, r7, #32
 800092e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000932:	220e      	movs	r2, #14
 8000934:	4828      	ldr	r0, [pc, #160]	; (80009d8 <main+0x400>)
 8000936:	f005 fa78 	bl	8005e2a <HAL_UART_Transmit>
			}


			if (aRxBuffer[0]<4)				// Compare TxBuffer and Rx Buffer
 800093a:	4b25      	ldr	r3, [pc, #148]	; (80009d0 <main+0x3f8>)
 800093c:	f993 3000 	ldrsb.w	r3, [r3]
 8000940:	2b03      	cmp	r3, #3
 8000942:	dc17      	bgt.n	8000974 <main+0x39c>
			{
				//##-6- Compare the sent and received buffers ##############################
				if(Buffercmp_Byte(aTxBuffer,aRxBuffer, 11))
 8000944:	220b      	movs	r2, #11
 8000946:	4922      	ldr	r1, [pc, #136]	; (80009d0 <main+0x3f8>)
 8000948:	4824      	ldr	r0, [pc, #144]	; (80009dc <main+0x404>)
 800094a:	f000 fa15 	bl	8000d78 <Buffercmp_Byte>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d00f      	beq.n	8000974 <main+0x39c>
				{
					char send[] = {0x14, 0x15,
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <main+0x408>)
 8000956:	1d3c      	adds	r4, r7, #4
 8000958:	461d      	mov	r5, r3
 800095a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800095c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800095e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000962:	c403      	stmia	r4!, {r0, r1}
 8000964:	7022      	strb	r2, [r4, #0]
							'B','u','f','f','e','r',' ','C','o','m','p','a','r','e',' ','F','a','i','l','!','!',0x0d, 0x0a};
					HAL_UART_Transmit(&huart2, (uint8_t *)send, 25, 0xFFFF);
 8000966:	1d39      	adds	r1, r7, #4
 8000968:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800096c:	2219      	movs	r2, #25
 800096e:	481a      	ldr	r0, [pc, #104]	; (80009d8 <main+0x400>)
 8000970:	f005 fa5b 	bl	8005e2a <HAL_UART_Transmit>
				}
			}

			if (aRxBuffer[0] >= 4 && aRxBuffer[0] <= 6)
 8000974:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <main+0x3f8>)
 8000976:	f993 3000 	ldrsb.w	r3, [r3]
 800097a:	2b03      	cmp	r3, #3
 800097c:	dd18      	ble.n	80009b0 <main+0x3d8>
 800097e:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <main+0x3f8>)
 8000980:	f993 3000 	ldrsb.w	r3, [r3]
 8000984:	2b06      	cmp	r3, #6
 8000986:	dc13      	bgt.n	80009b0 <main+0x3d8>
			{
				printf("Master RX: %d %d %d %d\r\n\n", aRxBuffer[0], aRxBuffer[1], aRxBuffer[2], aRxBuffer[3]);
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <main+0x3f8>)
 800098a:	f993 3000 	ldrsb.w	r3, [r3]
 800098e:	4619      	mov	r1, r3
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <main+0x3f8>)
 8000992:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000996:	461a      	mov	r2, r3
 8000998:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <main+0x3f8>)
 800099a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800099e:	4618      	mov	r0, r3
 80009a0:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <main+0x3f8>)
 80009a2:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	4603      	mov	r3, r0
 80009aa:	480e      	ldr	r0, [pc, #56]	; (80009e4 <main+0x40c>)
 80009ac:	f006 fca4 	bl	80072f8 <iprintf>
				sendStr[43] = 0x0a;

				HAL_UART_Transmit(&huart2, (uint8_t *)sendStr, 44, 0xFFFF);*/
			}

			bitFlag &= ~BFLAG_SPIM_WR;
 80009b0:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <main+0x410>)
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	f023 0304 	bic.w	r3, r3, #4
 80009b8:	b29a      	uxth	r2, r3
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <main+0x410>)
 80009bc:	801a      	strh	r2, [r3, #0]
 80009be:	e61f      	b.n	8000600 <main+0x28>
		}

		else
		{
			HAL_Delay(100);
 80009c0:	2064      	movs	r0, #100	; 0x64
 80009c2:	f002 fb37 	bl	8003034 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOB, LED2);
 80009c6:	2100      	movs	r1, #0
 80009c8:	4808      	ldr	r0, [pc, #32]	; (80009ec <main+0x414>)
 80009ca:	f003 fa18 	bl	8003dfe <HAL_GPIO_TogglePin>
		if (bitFlag & BFLAG_UART_RCV)		// UART Processing
 80009ce:	e617      	b.n	8000600 <main+0x28>
 80009d0:	200003fc 	.word	0x200003fc
 80009d4:	08008400 	.word	0x08008400
 80009d8:	200001b4 	.word	0x200001b4
 80009dc:	20000000 	.word	0x20000000
 80009e0:	08008410 	.word	0x08008410
 80009e4:	080083a4 	.word	0x080083a4
 80009e8:	20000408 	.word	0x20000408
 80009ec:	40020400 	.word	0x40020400

080009f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b094      	sub	sp, #80	; 0x50
 80009f4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	2234      	movs	r2, #52	; 0x34
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f006 fc72 	bl	80072e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a04:	f107 0308 	add.w	r3, r7, #8
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]

	__HAL_RCC_PWR_CLK_ENABLE();
 8000a14:	2300      	movs	r3, #0
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	4b2a      	ldr	r3, [pc, #168]	; (8000ac4 <SystemClock_Config+0xd4>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	4a29      	ldr	r2, [pc, #164]	; (8000ac4 <SystemClock_Config+0xd4>)
 8000a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a22:	6413      	str	r3, [r2, #64]	; 0x40
 8000a24:	4b27      	ldr	r3, [pc, #156]	; (8000ac4 <SystemClock_Config+0xd4>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a30:	2300      	movs	r3, #0
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	4b24      	ldr	r3, [pc, #144]	; (8000ac8 <SystemClock_Config+0xd8>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a3c:	4a22      	ldr	r2, [pc, #136]	; (8000ac8 <SystemClock_Config+0xd8>)
 8000a3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a42:	6013      	str	r3, [r2, #0]
 8000a44:	4b20      	ldr	r3, [pc, #128]	; (8000ac8 <SystemClock_Config+0xd8>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a4c:	603b      	str	r3, [r7, #0]
 8000a4e:	683b      	ldr	r3, [r7, #0]

	RCC_OscInitStruct.OscillatorType 		= RCC_OSCILLATORTYPE_HSI;
 8000a50:	2302      	movs	r3, #2
 8000a52:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState 				= RCC_HSI_ON;
 8000a54:	2301      	movs	r3, #1
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue 	= RCC_HSICALIBRATION_DEFAULT;
 8000a58:	2310      	movs	r3, #16
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState 			= RCC_PLL_ON;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource 		= RCC_PLLSOURCE_HSI;
 8000a60:	2300      	movs	r3, #0
 8000a62:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM 				= 16;
 8000a64:	2310      	movs	r3, #16
 8000a66:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN 				= 336;
 8000a68:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a6c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP 				= RCC_PLLP_DIV4;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ 				= 2;
 8000a72:	2302      	movs	r3, #2
 8000a74:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR 				= 2;
 8000a76:	2302      	movs	r3, #2
 8000a78:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f003 fd3a 	bl	80044f8 <HAL_RCC_OscConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8000a8a:	f000 fa95 	bl	8000fb8 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType 		= RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a8e:	230f      	movs	r3, #15
 8000a90:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource 		= RCC_SYSCLKSOURCE_PLLCLK;
 8000a92:	2302      	movs	r3, #2
 8000a94:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider 	= RCC_SYSCLK_DIV1;
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider 	= RCC_HCLK_DIV2;
 8000a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider 	= RCC_HCLK_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aa4:	f107 0308 	add.w	r3, r7, #8
 8000aa8:	2102      	movs	r1, #2
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f003 f9da 	bl	8003e64 <HAL_RCC_ClockConfig>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <SystemClock_Config+0xca>
	{
		Error_Handler();
 8000ab6:	f000 fa7f 	bl	8000fb8 <Error_Handler>
	}
}
 8000aba:	bf00      	nop
 8000abc:	3750      	adds	r7, #80	; 0x50
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40007000 	.word	0x40007000

08000acc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	hspi2.Instance 					= SPI2;
 8000ad0:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <MX_SPI2_Init+0x68>)
 8000ad2:	4a19      	ldr	r2, [pc, #100]	; (8000b38 <MX_SPI2_Init+0x6c>)
 8000ad4:	601a      	str	r2, [r3, #0]
	hspi2.Init.BaudRatePrescaler 	= SPI_BAUDRATEPRESCALER_128;
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <MX_SPI2_Init+0x68>)
 8000ad8:	2230      	movs	r2, #48	; 0x30
 8000ada:	61da      	str	r2, [r3, #28]
	hspi2.Init.Direction 			= SPI_DIRECTION_2LINES;
 8000adc:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <MX_SPI2_Init+0x68>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
	hspi2.Init.CLKPhase 			= SPI_PHASE_1EDGE;
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <MX_SPI2_Init+0x68>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	615a      	str	r2, [r3, #20]
	hspi2.Init.CLKPolarity 			= SPI_POLARITY_LOW;
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <MX_SPI2_Init+0x68>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
	hspi2.Init.DataSize 			= SPI_DATASIZE_16BIT;
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_SPI2_Init+0x68>)
 8000af0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000af4:	60da      	str	r2, [r3, #12]
	hspi2.Init.FirstBit 			= SPI_FIRSTBIT_MSB;
 8000af6:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_SPI2_Init+0x68>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode 				= SPI_TIMODE_DISABLE;
 8000afc:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <MX_SPI2_Init+0x68>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation 		= SPI_CRCCALCULATION_DISABLE;
 8000b02:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_SPI2_Init+0x68>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial 		= 10;
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <MX_SPI2_Init+0x68>)
 8000b0a:	220a      	movs	r2, #10
 8000b0c:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.NSS 					= SPI_NSS_SOFT;
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_SPI2_Init+0x68>)
 8000b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b14:	619a      	str	r2, [r3, #24]
  	#ifdef MASTER_BOARD
	hspi2.Init.Mode 				= SPI_MODE_MASTER;
 8000b16:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <MX_SPI2_Init+0x68>)
 8000b18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b1c:	605a      	str	r2, [r3, #4]
  	#else
	hspi2.Init.Mode 				= SPI_MODE_SLAVE;
  	#endif

	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b1e:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_SPI2_Init+0x68>)
 8000b20:	f003 ff88 	bl	8004a34 <HAL_SPI_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_SPI2_Init+0x62>
	{
		Error_Handler();
 8000b2a:	f000 fa45 	bl	8000fb8 <Error_Handler>
	}
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	200000fc 	.word	0x200000fc
 8000b38:	40003800 	.word	0x40003800

08000b3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	huart2.Instance 		 = USART2;
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b42:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <MX_USART2_UART_Init+0x50>)
 8000b44:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate 	 = 115200;
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b4c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength 	 = UART_WORDLENGTH_8B;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits 	 = UART_STOPBITS_1;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity 		 = UART_PARITY_NONE;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode 		 = UART_MODE_TX_RX;
 8000b60:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b62:	220c      	movs	r2, #12
 8000b64:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl 	 = UART_HWCONTROL_NONE;
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b74:	f005 f90c 	bl	8005d90 <HAL_UART_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8000b7e:	f000 fa1b 	bl	8000fb8 <Error_Handler>
	#ifdef RX_EVENT_CB
	//HAL_UARTEx_ReceiveToIdle_DMA(&huart2, u8arr_eventBuff, UART_BUF_SZ);
  	#else
	serial_init();
  	#endif
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200001b4 	.word	0x200001b4
 8000b8c:	40004400 	.word	0x40004400

08000b90 <MX_DMA_Init>:

static void MX_DMA_Init(void) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <MX_DMA_Init+0x3c>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <MX_DMA_Init+0x3c>)
 8000ba0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <MX_DMA_Init+0x3c>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2105      	movs	r1, #5
 8000bb6:	2010      	movs	r0, #16
 8000bb8:	f002 fb3b 	bl	8003232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000bbc:	2010      	movs	r0, #16
 8000bbe:	f002 fb54 	bl	800326a <HAL_NVIC_EnableIRQ>
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023800 	.word	0x40023800

08000bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
 8000be4:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	4b31      	ldr	r3, [pc, #196]	; (8000cb0 <MX_GPIO_Init+0xe0>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a30      	ldr	r2, [pc, #192]	; (8000cb0 <MX_GPIO_Init+0xe0>)
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b2e      	ldr	r3, [pc, #184]	; (8000cb0 <MX_GPIO_Init+0xe0>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	4b2a      	ldr	r3, [pc, #168]	; (8000cb0 <MX_GPIO_Init+0xe0>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a29      	ldr	r2, [pc, #164]	; (8000cb0 <MX_GPIO_Init+0xe0>)
 8000c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b27      	ldr	r3, [pc, #156]	; (8000cb0 <MX_GPIO_Init+0xe0>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	4b23      	ldr	r3, [pc, #140]	; (8000cb0 <MX_GPIO_Init+0xe0>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a22      	ldr	r2, [pc, #136]	; (8000cb0 <MX_GPIO_Init+0xe0>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <MX_GPIO_Init+0xe0>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <MX_GPIO_Init+0xe0>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a1b      	ldr	r2, [pc, #108]	; (8000cb0 <MX_GPIO_Init+0xe0>)
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <MX_GPIO_Init+0xe0>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]

	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2120      	movs	r1, #32
 8000c5a:	4816      	ldr	r0, [pc, #88]	; (8000cb4 <MX_GPIO_Init+0xe4>)
 8000c5c:	f003 f8b6 	bl	8003dcc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : Blue_Btn_Pin */
	GPIO_InitStruct.Pin 	= Blue_Btn_Pin;
 8000c60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c64:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode 	= GPIO_MODE_IT_FALLING;
 8000c66:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c6a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Blue_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4619      	mov	r1, r3
 8000c76:	4810      	ldr	r0, [pc, #64]	; (8000cb8 <MX_GPIO_Init+0xe8>)
 8000c78:	f002 ff14 	bl	8003aa4 <HAL_GPIO_Init>

	/* Enable and set EXTI lines 15 to 10 Interrupt */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2101      	movs	r1, #1
 8000c80:	2028      	movs	r0, #40	; 0x28
 8000c82:	f002 fad6 	bl	8003232 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c86:	2028      	movs	r0, #40	; 0x28
 8000c88:	f002 faef 	bl	800326a <HAL_NVIC_EnableIRQ>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin 	= LD2_Pin;
 8000c8c:	2320      	movs	r3, #32
 8000c8e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed	= GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <MX_GPIO_Init+0xe4>)
 8000ca4:	f002 fefe 	bl	8003aa4 <HAL_GPIO_Init>
}
 8000ca8:	bf00      	nop
 8000caa:	3728      	adds	r7, #40	; 0x28
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40020000 	.word	0x40020000
 8000cb8:	40020800 	.word	0x40020800

08000cbc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	80fb      	strh	r3, [r7, #6]
	if (((GPIO_Pin == Blue_Btn_Pin) && ((bitFlag & BFLAG_BTN) == 0)))
 8000cc6:	88fb      	ldrh	r3, [r7, #6]
 8000cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ccc:	d10c      	bne.n	8000ce8 <HAL_GPIO_EXTI_Callback+0x2c>
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <HAL_GPIO_EXTI_Callback+0x38>)
 8000cd0:	881b      	ldrh	r3, [r3, #0]
 8000cd2:	f003 0320 	and.w	r3, r3, #32
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d106      	bne.n	8000ce8 <HAL_GPIO_EXTI_Callback+0x2c>
		  //USER_BUTTON_PIN) && ((bitFlag & BFLAG_BTN) == 0)))
	{
		bitFlag |= BFLAG_BTN;
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_GPIO_EXTI_Callback+0x38>)
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	f043 0320 	orr.w	r3, r3, #32
 8000ce2:	b29a      	uxth	r2, r3
 8000ce4:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <HAL_GPIO_EXTI_Callback+0x38>)
 8000ce6:	801a      	strh	r2, [r3, #0]
	}
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	20000408 	.word	0x20000408

08000cf8 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <HAL_SPI_TxCpltCallback>:


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	spi2F = 1;
 8000d14:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <HAL_SPI_TxCpltCallback+0x1c>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	2000040a 	.word	0x2000040a

08000d2c <HAL_SPI_RxCpltCallback>:


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
#ifdef MASTER_BOARD
	printf("RX CLBCK\r\n");
 8000d34:	4804      	ldr	r0, [pc, #16]	; (8000d48 <HAL_SPI_RxCpltCallback+0x1c>)
 8000d36:	f006 fb65 	bl	8007404 <puts>
#endif
	spi2F = 1;
 8000d3a:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <HAL_SPI_RxCpltCallback+0x20>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	701a      	strb	r2, [r3, #0]
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	0800842c 	.word	0x0800842c
 8000d4c:	2000040a 	.word	0x2000040a

08000d50 <HAL_SPI_ErrorCallback>:

/* @brief  I2C error callbacks
   @param  I2cHandle: I2C handle */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi2){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	printf("\r\nSPI ERROR \r\n\n");
 8000d58:	4805      	ldr	r0, [pc, #20]	; (8000d70 <HAL_SPI_ErrorCallback+0x20>)
 8000d5a:	f006 fb53 	bl	8007404 <puts>
	while(1) {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000d5e:	2120      	movs	r1, #32
 8000d60:	4804      	ldr	r0, [pc, #16]	; (8000d74 <HAL_SPI_ErrorCallback+0x24>)
 8000d62:	f003 f84c 	bl	8003dfe <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000d66:	2064      	movs	r0, #100	; 0x64
 8000d68:	f002 f964 	bl	8003034 <HAL_Delay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000d6c:	e7f7      	b.n	8000d5e <HAL_SPI_ErrorCallback+0xe>
 8000d6e:	bf00      	nop
 8000d70:	08008438 	.word	0x08008438
 8000d74:	40020000 	.word	0x40020000

08000d78 <Buffercmp_Byte>:
  * @param  BufferLength: buffer's length
  * @retval 0  : pBuffer1 identical to pBuffer2
  *         >0 : pBuffer1 differs from pBuffer2
  */

uint16_t Buffercmp_Byte(int32_t pBuffer1[], int32_t pBuffer2[], uint8_t length){
 8000d78:	b5b0      	push	{r4, r5, r7, lr}
 8000d7a:	b096      	sub	sp, #88	; 0x58
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	4613      	mov	r3, r2
 8000d84:	71fb      	strb	r3, [r7, #7]
	char send[] = {0x14, 0x15,
 8000d86:	4b2d      	ldr	r3, [pc, #180]	; (8000e3c <Buffercmp_Byte+0xc4>)
 8000d88:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000d8c:	461d      	mov	r5, r3
 8000d8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d92:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d96:	6020      	str	r0, [r4, #0]
 8000d98:	3404      	adds	r4, #4
 8000d9a:	7021      	strb	r1, [r4, #0]
			'C','o','m','p','a','r','e',' ','p','r','o','c','e','s','s','.','.',0x0d,0x0a};
	HAL_UART_Transmit(&huart2, (uint8_t *)send, 21, 0xFFFF);
 8000d9c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000da0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000da4:	2215      	movs	r2, #21
 8000da6:	4826      	ldr	r0, [pc, #152]	; (8000e40 <Buffercmp_Byte+0xc8>)
 8000da8:	f005 f83f 	bl	8005e2a <HAL_UART_Transmit>
	for (uint8_t i = 0; i < length; i++){
 8000dac:	2300      	movs	r3, #0
 8000dae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000db2:	e029      	b.n	8000e08 <Buffercmp_Byte+0x90>
		if (pBuffer1[i]!=pBuffer2[i]){
 8000db4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	68b9      	ldr	r1, [r7, #8]
 8000dc8:	440b      	add	r3, r1
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d016      	beq.n	8000dfe <Buffercmp_Byte+0x86>
			char comp[] = {0x14, 0x15,
 8000dd0:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <Buffercmp_Byte+0xcc>)
 8000dd2:	f107 0414 	add.w	r4, r7, #20
 8000dd6:	461d      	mov	r5, r3
 8000dd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ddc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000de0:	6020      	str	r0, [r4, #0]
 8000de2:	3404      	adds	r4, #4
 8000de4:	8021      	strh	r1, [r4, #0]
					'B','u','f','f','e','r',' ','D','i','f','f','e','r','e','n','t','!','!',0x0d,0x0a};
			HAL_UART_Transmit(&huart2, (uint8_t *)comp, 22, 0xFFFF);
 8000de6:	f107 0114 	add.w	r1, r7, #20
 8000dea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dee:	2216      	movs	r2, #22
 8000df0:	4813      	ldr	r0, [pc, #76]	; (8000e40 <Buffercmp_Byte+0xc8>)
 8000df2:	f005 f81a 	bl	8005e2a <HAL_UART_Transmit>
			return i;
 8000df6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	e01a      	b.n	8000e34 <Buffercmp_Byte+0xbc>
	for (uint8_t i = 0; i < length; i++){
 8000dfe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e02:	3301      	adds	r3, #1
 8000e04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000e08:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d3d0      	bcc.n	8000db4 <Buffercmp_Byte+0x3c>
		}
	}

	char comp[] = {0x14, 0x15,
 8000e12:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <Buffercmp_Byte+0xd0>)
 8000e14:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000e18:	461d      	mov	r5, r3
 8000e1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e1e:	682b      	ldr	r3, [r5, #0]
 8000e20:	7023      	strb	r3, [r4, #0]
		'B','u','f','f','e','r',' ','s','a','m','e','!','!',0x0d,0x0a};
	HAL_UART_Transmit(&huart2, (uint8_t *)comp, 17, 0xFFFF);
 8000e22:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000e26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e2a:	2211      	movs	r2, #17
 8000e2c:	4804      	ldr	r0, [pc, #16]	; (8000e40 <Buffercmp_Byte+0xc8>)
 8000e2e:	f004 fffc 	bl	8005e2a <HAL_UART_Transmit>
	return 0;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3758      	adds	r7, #88	; 0x58
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e3c:	08008448 	.word	0x08008448
 8000e40:	200001b4 	.word	0x200001b4
 8000e44:	08008460 	.word	0x08008460
 8000e48:	08008478 	.word	0x08008478

08000e4c <uartProcessing>:


void uartProcessing (uint8_t *u8p_buffer, uint16_t u16_size){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	807b      	strh	r3, [r7, #2]
	printf("UART Pross: %s\r\n", (char*)u8p_buffer);
 8000e58:	6879      	ldr	r1, [r7, #4]
 8000e5a:	4807      	ldr	r0, [pc, #28]	; (8000e78 <uartProcessing+0x2c>)
 8000e5c:	f006 fa4c 	bl	80072f8 <iprintf>

	HAL_GPIO_TogglePin(GPIOB, LED2);
 8000e60:	2100      	movs	r1, #0
 8000e62:	4806      	ldr	r0, [pc, #24]	; (8000e7c <uartProcessing+0x30>)
 8000e64:	f002 ffcb 	bl	8003dfe <HAL_GPIO_TogglePin>

	vShell_cmdParse((char*)u8p_buffer);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f001 ff83 	bl	8002d74 <vShell_cmdParse>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	0800848c 	.word	0x0800848c
 8000e7c:	40020400 	.word	0x40020400

08000e80 <vUAFE_uart_handle>:
/*****************************************************************
 * @name 	vUAFE_uart_handle
 * @brief	handle afe uart data copy
 ****************************************************************/
static void vUAFE_uart_handle(uint16_t Size)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	80fb      	strh	r3, [r7, #6]
	uint16_t u16_numData;

	/* Check if number of received data in reception buffer has changed */
	if (Size != u16_oldPos)
 8000e8a:	4b36      	ldr	r3, [pc, #216]	; (8000f64 <vUAFE_uart_handle+0xe4>)
 8000e8c:	881b      	ldrh	r3, [r3, #0]
 8000e8e:	88fa      	ldrh	r2, [r7, #6]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d05f      	beq.n	8000f54 <vUAFE_uart_handle+0xd4>
	{
		if (Size > u16_oldPos)
 8000e94:	4b33      	ldr	r3, [pc, #204]	; (8000f64 <vUAFE_uart_handle+0xe4>)
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	88fa      	ldrh	r2, [r7, #6]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d91a      	bls.n	8000ed4 <vUAFE_uart_handle+0x54>
		{
			/* Current position is higher than previous one */
			u16_numData = Size - u16_oldPos;
 8000e9e:	4b31      	ldr	r3, [pc, #196]	; (8000f64 <vUAFE_uart_handle+0xe4>)
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	88fa      	ldrh	r2, [r7, #6]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	81fb      	strh	r3, [r7, #14]
			memcpy(&u8arr_uartEvent[u16_lenCnt],&u8arr_eventBuff[u16_oldPos],u16_numData);
 8000ea8:	4b2f      	ldr	r3, [pc, #188]	; (8000f68 <vUAFE_uart_handle+0xe8>)
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b2f      	ldr	r3, [pc, #188]	; (8000f6c <vUAFE_uart_handle+0xec>)
 8000eb0:	4413      	add	r3, r2
 8000eb2:	4a2c      	ldr	r2, [pc, #176]	; (8000f64 <vUAFE_uart_handle+0xe4>)
 8000eb4:	8812      	ldrh	r2, [r2, #0]
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	4a2d      	ldr	r2, [pc, #180]	; (8000f70 <vUAFE_uart_handle+0xf0>)
 8000eba:	4411      	add	r1, r2
 8000ebc:	89fa      	ldrh	r2, [r7, #14]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f006 fa04 	bl	80072cc <memcpy>
			u16_lenCnt += u16_numData;
 8000ec4:	4b28      	ldr	r3, [pc, #160]	; (8000f68 <vUAFE_uart_handle+0xe8>)
 8000ec6:	881a      	ldrh	r2, [r3, #0]
 8000ec8:	89fb      	ldrh	r3, [r7, #14]
 8000eca:	4413      	add	r3, r2
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	4b26      	ldr	r3, [pc, #152]	; (8000f68 <vUAFE_uart_handle+0xe8>)
 8000ed0:	801a      	strh	r2, [r3, #0]
 8000ed2:	e02a      	b.n	8000f2a <vUAFE_uart_handle+0xaa>
		}
		else
		{
			/* End of buffer has been reached */
			u16_numData = UART_BUF_SZ - u16_oldPos;
 8000ed4:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <vUAFE_uart_handle+0xe4>)
 8000ed6:	881b      	ldrh	r3, [r3, #0]
 8000ed8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000edc:	81fb      	strh	r3, [r7, #14]

			memcpy (&u8arr_uartEvent[u16_lenCnt], 			// copy data in that remaining space
 8000ede:	4b22      	ldr	r3, [pc, #136]	; (8000f68 <vUAFE_uart_handle+0xe8>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	4b21      	ldr	r3, [pc, #132]	; (8000f6c <vUAFE_uart_handle+0xec>)
 8000ee6:	4413      	add	r3, r2
					&u8arr_eventBuff[u16_oldPos],
 8000ee8:	4a1e      	ldr	r2, [pc, #120]	; (8000f64 <vUAFE_uart_handle+0xe4>)
 8000eea:	8812      	ldrh	r2, [r2, #0]
 8000eec:	4611      	mov	r1, r2
 8000eee:	4a20      	ldr	r2, [pc, #128]	; (8000f70 <vUAFE_uart_handle+0xf0>)
 8000ef0:	4411      	add	r1, r2
			memcpy (&u8arr_uartEvent[u16_lenCnt], 			// copy data in that remaining space
 8000ef2:	89fa      	ldrh	r2, [r7, #14]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f006 f9e9 	bl	80072cc <memcpy>
					u16_numData);

			u16_lenCnt += u16_numData;
 8000efa:	4b1b      	ldr	r3, [pc, #108]	; (8000f68 <vUAFE_uart_handle+0xe8>)
 8000efc:	881a      	ldrh	r2, [r3, #0]
 8000efe:	89fb      	ldrh	r3, [r7, #14]
 8000f00:	4413      	add	r3, r2
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <vUAFE_uart_handle+0xe8>)
 8000f06:	801a      	strh	r2, [r3, #0]

			memcpy (&u8arr_uartEvent[u16_lenCnt], 			// copy the remaining data
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <vUAFE_uart_handle+0xe8>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <vUAFE_uart_handle+0xec>)
 8000f10:	4413      	add	r3, r2
 8000f12:	88fa      	ldrh	r2, [r7, #6]
 8000f14:	4916      	ldr	r1, [pc, #88]	; (8000f70 <vUAFE_uart_handle+0xf0>)
 8000f16:	4618      	mov	r0, r3
 8000f18:	f006 f9d8 	bl	80072cc <memcpy>
					&u8arr_eventBuff[0],
					Size);

			u16_lenCnt += Size;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <vUAFE_uart_handle+0xe8>)
 8000f1e:	881a      	ldrh	r2, [r3, #0]
 8000f20:	88fb      	ldrh	r3, [r7, #6]
 8000f22:	4413      	add	r3, r2
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <vUAFE_uart_handle+0xe8>)
 8000f28:	801a      	strh	r2, [r3, #0]
		}

		/* Check for ready to process */
		if((u8arr_uartEvent[u16_lenCnt - 1] == '\n')&&(u8arr_uartEvent[u16_lenCnt - 2]== '\r'))
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <vUAFE_uart_handle+0xe8>)
 8000f2c:	881b      	ldrh	r3, [r3, #0]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <vUAFE_uart_handle+0xec>)
 8000f32:	5cd3      	ldrb	r3, [r2, r3]
 8000f34:	2b0a      	cmp	r3, #10
 8000f36:	d10d      	bne.n	8000f54 <vUAFE_uart_handle+0xd4>
 8000f38:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <vUAFE_uart_handle+0xe8>)
 8000f3a:	881b      	ldrh	r3, [r3, #0]
 8000f3c:	3b02      	subs	r3, #2
 8000f3e:	4a0b      	ldr	r2, [pc, #44]	; (8000f6c <vUAFE_uart_handle+0xec>)
 8000f40:	5cd3      	ldrb	r3, [r2, r3]
 8000f42:	2b0d      	cmp	r3, #13
 8000f44:	d106      	bne.n	8000f54 <vUAFE_uart_handle+0xd4>
		{
			bitFlag |= BFLAG_UART_RCV;
 8000f46:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <vUAFE_uart_handle+0xf4>)
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <vUAFE_uart_handle+0xf4>)
 8000f52:	801a      	strh	r2, [r3, #0]
		}

	}

	u16_oldPos = Size;
 8000f54:	4a03      	ldr	r2, [pc, #12]	; (8000f64 <vUAFE_uart_handle+0xe4>)
 8000f56:	88fb      	ldrh	r3, [r7, #6]
 8000f58:	8013      	strh	r3, [r2, #0]
}
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200003f8 	.word	0x200003f8
 8000f68:	200003fa 	.word	0x200003fa
 8000f6c:	200002f8 	.word	0x200002f8
 8000f70:	200001f8 	.word	0x200001f8
 8000f74:	20000408 	.word	0x20000408

08000f78 <HAL_UARTEx_RxEventCallback>:
/*****************************************************************
 * @name HAL_UARTEx_RxEventCallback
 * @brief
 ****************************************************************/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	460b      	mov	r3, r1
 8000f82:	807b      	strh	r3, [r7, #2]
	#ifdef RX_EVENT_CB
	if (huart->Instance == USART2)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a08      	ldr	r2, [pc, #32]	; (8000fac <HAL_UARTEx_RxEventCallback+0x34>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d109      	bne.n	8000fa2 <HAL_UARTEx_RxEventCallback+0x2a>
	{
		vUAFE_uart_handle(Size);
 8000f8e:	887b      	ldrh	r3, [r7, #2]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff75 	bl	8000e80 <vUAFE_uart_handle>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, u8arr_eventBuff, UART_BUF_SZ);
 8000f96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f9a:	4905      	ldr	r1, [pc, #20]	; (8000fb0 <HAL_UARTEx_RxEventCallback+0x38>)
 8000f9c:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <HAL_UARTEx_RxEventCallback+0x3c>)
 8000f9e:	f005 f806 	bl	8005fae <HAL_UARTEx_ReceiveToIdle_DMA>
	}
	#endif
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40004400 	.word	0x40004400
 8000fb0:	200001f8 	.word	0x200001f8
 8000fb4:	200001b4 	.word	0x200001b4

08000fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	printf("error handler\r\n");
 8000fbc:	4806      	ldr	r0, [pc, #24]	; (8000fd8 <Error_Handler+0x20>)
 8000fbe:	f006 fa21 	bl	8007404 <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc2:	b672      	cpsid	i
}
 8000fc4:	bf00      	nop
	__disable_irq();
	while (1)
	{
		HAL_GPIO_TogglePin(GPIOB, LED2);
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4804      	ldr	r0, [pc, #16]	; (8000fdc <Error_Handler+0x24>)
 8000fca:	f002 ff18 	bl	8003dfe <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000fce:	2064      	movs	r0, #100	; 0x64
 8000fd0:	f002 f830 	bl	8003034 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, LED2);
 8000fd4:	e7f7      	b.n	8000fc6 <Error_Handler+0xe>
 8000fd6:	bf00      	nop
 8000fd8:	080084a0 	.word	0x080084a0
 8000fdc:	40020400 	.word	0x40020400

08000fe0 <serial_init>:
static uint8_t u8arr_uart[UART_BUF_SZ];
static uint8_t u8idx;

/* Public functions definitions */
void serial_init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* initialize serial */
  stdin_init(&hstdin, &huart2, u8arr_buffer, UART_BUF_SZ);
 8000fe4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fe8:	4a06      	ldr	r2, [pc, #24]	; (8001004 <serial_init+0x24>)
 8000fea:	4907      	ldr	r1, [pc, #28]	; (8001008 <serial_init+0x28>)
 8000fec:	4807      	ldr	r0, [pc, #28]	; (800100c <serial_init+0x2c>)
 8000fee:	f000 f865 	bl	80010bc <stdin_init>
  stdin_set_callback(&hstdin, stdin_callback);
 8000ff2:	4907      	ldr	r1, [pc, #28]	; (8001010 <serial_init+0x30>)
 8000ff4:	4805      	ldr	r0, [pc, #20]	; (800100c <serial_init+0x2c>)
 8000ff6:	f000 f878 	bl	80010ea <stdin_set_callback>
  stdin_start(&hstdin);
 8000ffa:	4804      	ldr	r0, [pc, #16]	; (800100c <serial_init+0x2c>)
 8000ffc:	f000 f896 	bl	800112c <stdin_start>
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	2000041c 	.word	0x2000041c
 8001008:	200001b4 	.word	0x200001b4
 800100c:	2000040c 	.word	0x2000040c
 8001010:	0800103d 	.word	0x0800103d

08001014 <serial_handlerUART>:

void serial_handlerUART(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  stdin_irq_uart(&hstdin);
 8001018:	4802      	ldr	r0, [pc, #8]	; (8001024 <serial_handlerUART+0x10>)
 800101a:	f001 fbf5 	bl	8002808 <stdin_irq_uart>
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	2000040c 	.word	0x2000040c

08001028 <serial_handlerDMA>:

void serial_handlerDMA(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  stdin_irq_dma(&hstdin);
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <serial_handlerDMA+0x10>)
 800102e:	f000 f8b3 	bl	8001198 <stdin_irq_dma>
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	2000040c 	.word	0x2000040c

0800103c <stdin_callback>:

/* Private function definitions */
static void stdin_callback(uint8_t *u8p_buffer, uint16_t u16_size)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	807b      	strh	r3, [r7, #2]
	//printf("UART RX Handler\r\n\n");

	memcpy(&u8arr_uart[u8idx], u8p_buffer, u16_size);
 8001048:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <stdin_callback+0x78>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <stdin_callback+0x7c>)
 8001050:	4413      	add	r3, r2
 8001052:	887a      	ldrh	r2, [r7, #2]
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	4618      	mov	r0, r3
 8001058:	f006 f938 	bl	80072cc <memcpy>
	u8idx += u16_size;
 800105c:	887b      	ldrh	r3, [r7, #2]
 800105e:	b2da      	uxtb	r2, r3
 8001060:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <stdin_callback+0x78>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4413      	add	r3, r2
 8001066:	b2da      	uxtb	r2, r3
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <stdin_callback+0x78>)
 800106a:	701a      	strb	r2, [r3, #0]

	if((u8p_buffer[u16_size - 1] == '\n')&&(u8p_buffer[u16_size - 2]== '\r'))
 800106c:	887b      	ldrh	r3, [r7, #2]
 800106e:	3b01      	subs	r3, #1
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	4413      	add	r3, r2
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b0a      	cmp	r3, #10
 8001078:	d118      	bne.n	80010ac <stdin_callback+0x70>
 800107a:	887b      	ldrh	r3, [r7, #2]
 800107c:	3b02      	subs	r3, #2
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b0d      	cmp	r3, #13
 8001086:	d111      	bne.n	80010ac <stdin_callback+0x70>
	{
		uartProcessing (u8arr_uart, u8idx - 2);
 8001088:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <stdin_callback+0x78>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b29b      	uxth	r3, r3
 800108e:	3b02      	subs	r3, #2
 8001090:	b29b      	uxth	r3, r3
 8001092:	4619      	mov	r1, r3
 8001094:	4808      	ldr	r0, [pc, #32]	; (80010b8 <stdin_callback+0x7c>)
 8001096:	f7ff fed9 	bl	8000e4c <uartProcessing>
		memset(u8arr_uart, 0, UART_BUF_SZ);
 800109a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800109e:	2100      	movs	r1, #0
 80010a0:	4805      	ldr	r0, [pc, #20]	; (80010b8 <stdin_callback+0x7c>)
 80010a2:	f006 f921 	bl	80072e8 <memset>
		u8idx = 0;
 80010a6:	4b03      	ldr	r3, [pc, #12]	; (80010b4 <stdin_callback+0x78>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
	}
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	2000061c 	.word	0x2000061c
 80010b8:	2000051c 	.word	0x2000051c

080010bc <stdin_init>:
static void fill_buffer(stdin_t *in, uint16_t pos, uint16_t size);

/* Public function implementations
 * --------------------------------------------*/
void stdin_init(stdin_t *in, UART_HandleTypeDef *uart, uint8_t *buffer, uint16_t size)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
 80010c8:	807b      	strh	r3, [r7, #2]
  in->huart = uart;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	68ba      	ldr	r2, [r7, #8]
 80010ce:	601a      	str	r2, [r3, #0]
  in->buffer = buffer;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	609a      	str	r2, [r3, #8]
  in->size = size;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	887a      	ldrh	r2, [r7, #2]
 80010da:	819a      	strh	r2, [r3, #12]

  stdin_flush(in);
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f000 f812 	bl	8001106 <stdin_flush>
}
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <stdin_set_callback>:

void stdin_set_callback(stdin_t *in, stdin_callback_t cb)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	6039      	str	r1, [r7, #0]
  in->callback = cb;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	605a      	str	r2, [r3, #4]
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <stdin_flush>:

void stdin_flush(stdin_t *in)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  memset(in->buffer, 0, in->size);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6898      	ldr	r0, [r3, #8]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	899b      	ldrh	r3, [r3, #12]
 8001116:	461a      	mov	r2, r3
 8001118:	2100      	movs	r1, #0
 800111a:	f006 f8e5 	bl	80072e8 <memset>
  in->pos = 0;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	81da      	strh	r2, [r3, #14]
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <stdin_start>:

HAL_StatusTypeDef stdin_start(stdin_t *in)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Enable interrupts */
  __HAL_UART_ENABLE_IT(in->huart, UART_IT_IDLE);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	68da      	ldr	r2, [r3, #12]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f042 0210 	orr.w	r2, r2, #16
 8001146:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(HDMA(in), DMA_IT_TC);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 0210 	orr.w	r2, r2, #16
 800115e:	601a      	str	r2, [r3, #0]
  __HAL_DMA_ENABLE_IT(HDMA(in), DMA_IT_HT);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f042 0208 	orr.w	r2, r2, #8
 8001176:	601a      	str	r2, [r3, #0]

  /* Start receiving UART in DMA mode */
  status = HAL_UART_Receive_DMA(in->huart, in->buffer, in->size);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6899      	ldr	r1, [r3, #8]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	899b      	ldrh	r3, [r3, #12]
 8001184:	461a      	mov	r2, r3
 8001186:	f004 fee2 	bl	8005f4e <HAL_UART_Receive_DMA>
 800118a:	4603      	mov	r3, r0
 800118c:	73fb      	strb	r3, [r7, #15]
  return (status);
 800118e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <stdin_irq_dma>:
  status = HAL_UART_DMAStop(in->huart);
  return (status);
}

void stdin_irq_dma(stdin_t *in)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Handle HT interrupt */
  if (__HAL_DMA_GET_IT_SOURCE(HDMA(in), DMA_IT_HT))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0308 	and.w	r3, r3, #8
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 823c 	beq.w	800162c <stdin_irq_dma+0x494>
  {
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_HT_FLAG_INDEX(HDMA(in)));
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	4b7f      	ldr	r3, [pc, #508]	; (80013bc <stdin_irq_dma+0x224>)
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d978      	bls.n	80012b6 <stdin_irq_dma+0x11e>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a7c      	ldr	r2, [pc, #496]	; (80013c0 <stdin_irq_dma+0x228>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d06d      	beq.n	80012ae <stdin_irq_dma+0x116>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a7a      	ldr	r2, [pc, #488]	; (80013c4 <stdin_irq_dma+0x22c>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d064      	beq.n	80012aa <stdin_irq_dma+0x112>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a77      	ldr	r2, [pc, #476]	; (80013c8 <stdin_irq_dma+0x230>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d05b      	beq.n	80012a6 <stdin_irq_dma+0x10e>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a75      	ldr	r2, [pc, #468]	; (80013cc <stdin_irq_dma+0x234>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d052      	beq.n	80012a2 <stdin_irq_dma+0x10a>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a72      	ldr	r2, [pc, #456]	; (80013d0 <stdin_irq_dma+0x238>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d048      	beq.n	800129c <stdin_irq_dma+0x104>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a70      	ldr	r2, [pc, #448]	; (80013d4 <stdin_irq_dma+0x23c>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d03e      	beq.n	8001296 <stdin_irq_dma+0xfe>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a6d      	ldr	r2, [pc, #436]	; (80013d8 <stdin_irq_dma+0x240>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d034      	beq.n	8001290 <stdin_irq_dma+0xf8>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a6b      	ldr	r2, [pc, #428]	; (80013dc <stdin_irq_dma+0x244>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d02a      	beq.n	800128a <stdin_irq_dma+0xf2>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a68      	ldr	r2, [pc, #416]	; (80013e0 <stdin_irq_dma+0x248>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d020      	beq.n	8001284 <stdin_irq_dma+0xec>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a66      	ldr	r2, [pc, #408]	; (80013e4 <stdin_irq_dma+0x24c>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d016      	beq.n	800127e <stdin_irq_dma+0xe6>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a63      	ldr	r2, [pc, #396]	; (80013e8 <stdin_irq_dma+0x250>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d00c      	beq.n	8001278 <stdin_irq_dma+0xe0>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a61      	ldr	r2, [pc, #388]	; (80013ec <stdin_irq_dma+0x254>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d102      	bne.n	8001272 <stdin_irq_dma+0xda>
 800126c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001270:	e01e      	b.n	80012b0 <stdin_irq_dma+0x118>
 8001272:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001276:	e01b      	b.n	80012b0 <stdin_irq_dma+0x118>
 8001278:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800127c:	e018      	b.n	80012b0 <stdin_irq_dma+0x118>
 800127e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001282:	e015      	b.n	80012b0 <stdin_irq_dma+0x118>
 8001284:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001288:	e012      	b.n	80012b0 <stdin_irq_dma+0x118>
 800128a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800128e:	e00f      	b.n	80012b0 <stdin_irq_dma+0x118>
 8001290:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001294:	e00c      	b.n	80012b0 <stdin_irq_dma+0x118>
 8001296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800129a:	e009      	b.n	80012b0 <stdin_irq_dma+0x118>
 800129c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012a0:	e006      	b.n	80012b0 <stdin_irq_dma+0x118>
 80012a2:	2310      	movs	r3, #16
 80012a4:	e004      	b.n	80012b0 <stdin_irq_dma+0x118>
 80012a6:	2310      	movs	r3, #16
 80012a8:	e002      	b.n	80012b0 <stdin_irq_dma+0x118>
 80012aa:	2310      	movs	r3, #16
 80012ac:	e000      	b.n	80012b0 <stdin_irq_dma+0x118>
 80012ae:	2310      	movs	r3, #16
 80012b0:	4a4f      	ldr	r2, [pc, #316]	; (80013f0 <stdin_irq_dma+0x258>)
 80012b2:	60d3      	str	r3, [r2, #12]
 80012b4:	e199      	b.n	80015ea <stdin_irq_dma+0x452>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	461a      	mov	r2, r3
 80012c0:	4b4c      	ldr	r3, [pc, #304]	; (80013f4 <stdin_irq_dma+0x25c>)
 80012c2:	429a      	cmp	r2, r3
 80012c4:	f240 8098 	bls.w	80013f8 <stdin_irq_dma+0x260>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a3b      	ldr	r2, [pc, #236]	; (80013c0 <stdin_irq_dma+0x228>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d06d      	beq.n	80013b2 <stdin_irq_dma+0x21a>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a39      	ldr	r2, [pc, #228]	; (80013c4 <stdin_irq_dma+0x22c>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d064      	beq.n	80013ae <stdin_irq_dma+0x216>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a36      	ldr	r2, [pc, #216]	; (80013c8 <stdin_irq_dma+0x230>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d05b      	beq.n	80013aa <stdin_irq_dma+0x212>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a34      	ldr	r2, [pc, #208]	; (80013cc <stdin_irq_dma+0x234>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d052      	beq.n	80013a6 <stdin_irq_dma+0x20e>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a31      	ldr	r2, [pc, #196]	; (80013d0 <stdin_irq_dma+0x238>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d048      	beq.n	80013a0 <stdin_irq_dma+0x208>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a2f      	ldr	r2, [pc, #188]	; (80013d4 <stdin_irq_dma+0x23c>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d03e      	beq.n	800139a <stdin_irq_dma+0x202>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a2c      	ldr	r2, [pc, #176]	; (80013d8 <stdin_irq_dma+0x240>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d034      	beq.n	8001394 <stdin_irq_dma+0x1fc>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a2a      	ldr	r2, [pc, #168]	; (80013dc <stdin_irq_dma+0x244>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d02a      	beq.n	800138e <stdin_irq_dma+0x1f6>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a27      	ldr	r2, [pc, #156]	; (80013e0 <stdin_irq_dma+0x248>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d020      	beq.n	8001388 <stdin_irq_dma+0x1f0>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a25      	ldr	r2, [pc, #148]	; (80013e4 <stdin_irq_dma+0x24c>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d016      	beq.n	8001382 <stdin_irq_dma+0x1ea>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a22      	ldr	r2, [pc, #136]	; (80013e8 <stdin_irq_dma+0x250>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d00c      	beq.n	800137c <stdin_irq_dma+0x1e4>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a20      	ldr	r2, [pc, #128]	; (80013ec <stdin_irq_dma+0x254>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d102      	bne.n	8001376 <stdin_irq_dma+0x1de>
 8001370:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001374:	e01e      	b.n	80013b4 <stdin_irq_dma+0x21c>
 8001376:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800137a:	e01b      	b.n	80013b4 <stdin_irq_dma+0x21c>
 800137c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001380:	e018      	b.n	80013b4 <stdin_irq_dma+0x21c>
 8001382:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001386:	e015      	b.n	80013b4 <stdin_irq_dma+0x21c>
 8001388:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800138c:	e012      	b.n	80013b4 <stdin_irq_dma+0x21c>
 800138e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001392:	e00f      	b.n	80013b4 <stdin_irq_dma+0x21c>
 8001394:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001398:	e00c      	b.n	80013b4 <stdin_irq_dma+0x21c>
 800139a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800139e:	e009      	b.n	80013b4 <stdin_irq_dma+0x21c>
 80013a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013a4:	e006      	b.n	80013b4 <stdin_irq_dma+0x21c>
 80013a6:	2310      	movs	r3, #16
 80013a8:	e004      	b.n	80013b4 <stdin_irq_dma+0x21c>
 80013aa:	2310      	movs	r3, #16
 80013ac:	e002      	b.n	80013b4 <stdin_irq_dma+0x21c>
 80013ae:	2310      	movs	r3, #16
 80013b0:	e000      	b.n	80013b4 <stdin_irq_dma+0x21c>
 80013b2:	2310      	movs	r3, #16
 80013b4:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <stdin_irq_dma+0x258>)
 80013b6:	6093      	str	r3, [r2, #8]
 80013b8:	e117      	b.n	80015ea <stdin_irq_dma+0x452>
 80013ba:	bf00      	nop
 80013bc:	40026458 	.word	0x40026458
 80013c0:	40026010 	.word	0x40026010
 80013c4:	40026410 	.word	0x40026410
 80013c8:	40026070 	.word	0x40026070
 80013cc:	40026470 	.word	0x40026470
 80013d0:	40026028 	.word	0x40026028
 80013d4:	40026428 	.word	0x40026428
 80013d8:	40026088 	.word	0x40026088
 80013dc:	40026488 	.word	0x40026488
 80013e0:	40026040 	.word	0x40026040
 80013e4:	40026440 	.word	0x40026440
 80013e8:	400260a0 	.word	0x400260a0
 80013ec:	400264a0 	.word	0x400264a0
 80013f0:	40026400 	.word	0x40026400
 80013f4:	400260b8 	.word	0x400260b8
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	4b7c      	ldr	r3, [pc, #496]	; (80015f4 <stdin_irq_dma+0x45c>)
 8001404:	429a      	cmp	r2, r3
 8001406:	d978      	bls.n	80014fa <stdin_irq_dma+0x362>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a79      	ldr	r2, [pc, #484]	; (80015f8 <stdin_irq_dma+0x460>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d06d      	beq.n	80014f2 <stdin_irq_dma+0x35a>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a77      	ldr	r2, [pc, #476]	; (80015fc <stdin_irq_dma+0x464>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d064      	beq.n	80014ee <stdin_irq_dma+0x356>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a74      	ldr	r2, [pc, #464]	; (8001600 <stdin_irq_dma+0x468>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d05b      	beq.n	80014ea <stdin_irq_dma+0x352>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a72      	ldr	r2, [pc, #456]	; (8001604 <stdin_irq_dma+0x46c>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d052      	beq.n	80014e6 <stdin_irq_dma+0x34e>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a6f      	ldr	r2, [pc, #444]	; (8001608 <stdin_irq_dma+0x470>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d048      	beq.n	80014e0 <stdin_irq_dma+0x348>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a6d      	ldr	r2, [pc, #436]	; (800160c <stdin_irq_dma+0x474>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d03e      	beq.n	80014da <stdin_irq_dma+0x342>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a6a      	ldr	r2, [pc, #424]	; (8001610 <stdin_irq_dma+0x478>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d034      	beq.n	80014d4 <stdin_irq_dma+0x33c>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a68      	ldr	r2, [pc, #416]	; (8001614 <stdin_irq_dma+0x47c>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d02a      	beq.n	80014ce <stdin_irq_dma+0x336>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a65      	ldr	r2, [pc, #404]	; (8001618 <stdin_irq_dma+0x480>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d020      	beq.n	80014c8 <stdin_irq_dma+0x330>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a63      	ldr	r2, [pc, #396]	; (800161c <stdin_irq_dma+0x484>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d016      	beq.n	80014c2 <stdin_irq_dma+0x32a>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a60      	ldr	r2, [pc, #384]	; (8001620 <stdin_irq_dma+0x488>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d00c      	beq.n	80014bc <stdin_irq_dma+0x324>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a5e      	ldr	r2, [pc, #376]	; (8001624 <stdin_irq_dma+0x48c>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d102      	bne.n	80014b6 <stdin_irq_dma+0x31e>
 80014b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014b4:	e01e      	b.n	80014f4 <stdin_irq_dma+0x35c>
 80014b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80014ba:	e01b      	b.n	80014f4 <stdin_irq_dma+0x35c>
 80014bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014c0:	e018      	b.n	80014f4 <stdin_irq_dma+0x35c>
 80014c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014c6:	e015      	b.n	80014f4 <stdin_irq_dma+0x35c>
 80014c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014cc:	e012      	b.n	80014f4 <stdin_irq_dma+0x35c>
 80014ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014d2:	e00f      	b.n	80014f4 <stdin_irq_dma+0x35c>
 80014d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014d8:	e00c      	b.n	80014f4 <stdin_irq_dma+0x35c>
 80014da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014de:	e009      	b.n	80014f4 <stdin_irq_dma+0x35c>
 80014e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014e4:	e006      	b.n	80014f4 <stdin_irq_dma+0x35c>
 80014e6:	2310      	movs	r3, #16
 80014e8:	e004      	b.n	80014f4 <stdin_irq_dma+0x35c>
 80014ea:	2310      	movs	r3, #16
 80014ec:	e002      	b.n	80014f4 <stdin_irq_dma+0x35c>
 80014ee:	2310      	movs	r3, #16
 80014f0:	e000      	b.n	80014f4 <stdin_irq_dma+0x35c>
 80014f2:	2310      	movs	r3, #16
 80014f4:	4a4c      	ldr	r2, [pc, #304]	; (8001628 <stdin_irq_dma+0x490>)
 80014f6:	60d3      	str	r3, [r2, #12]
 80014f8:	e077      	b.n	80015ea <stdin_irq_dma+0x452>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a3d      	ldr	r2, [pc, #244]	; (80015f8 <stdin_irq_dma+0x460>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d06d      	beq.n	80015e4 <stdin_irq_dma+0x44c>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a3a      	ldr	r2, [pc, #232]	; (80015fc <stdin_irq_dma+0x464>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d064      	beq.n	80015e0 <stdin_irq_dma+0x448>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a38      	ldr	r2, [pc, #224]	; (8001600 <stdin_irq_dma+0x468>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d05b      	beq.n	80015dc <stdin_irq_dma+0x444>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a35      	ldr	r2, [pc, #212]	; (8001604 <stdin_irq_dma+0x46c>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d052      	beq.n	80015d8 <stdin_irq_dma+0x440>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a33      	ldr	r2, [pc, #204]	; (8001608 <stdin_irq_dma+0x470>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d048      	beq.n	80015d2 <stdin_irq_dma+0x43a>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a30      	ldr	r2, [pc, #192]	; (800160c <stdin_irq_dma+0x474>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d03e      	beq.n	80015cc <stdin_irq_dma+0x434>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a2e      	ldr	r2, [pc, #184]	; (8001610 <stdin_irq_dma+0x478>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d034      	beq.n	80015c6 <stdin_irq_dma+0x42e>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a2b      	ldr	r2, [pc, #172]	; (8001614 <stdin_irq_dma+0x47c>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d02a      	beq.n	80015c0 <stdin_irq_dma+0x428>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a29      	ldr	r2, [pc, #164]	; (8001618 <stdin_irq_dma+0x480>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d020      	beq.n	80015ba <stdin_irq_dma+0x422>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a26      	ldr	r2, [pc, #152]	; (800161c <stdin_irq_dma+0x484>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d016      	beq.n	80015b4 <stdin_irq_dma+0x41c>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a24      	ldr	r2, [pc, #144]	; (8001620 <stdin_irq_dma+0x488>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d00c      	beq.n	80015ae <stdin_irq_dma+0x416>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a21      	ldr	r2, [pc, #132]	; (8001624 <stdin_irq_dma+0x48c>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d102      	bne.n	80015a8 <stdin_irq_dma+0x410>
 80015a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015a6:	e01e      	b.n	80015e6 <stdin_irq_dma+0x44e>
 80015a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80015ac:	e01b      	b.n	80015e6 <stdin_irq_dma+0x44e>
 80015ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015b2:	e018      	b.n	80015e6 <stdin_irq_dma+0x44e>
 80015b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015b8:	e015      	b.n	80015e6 <stdin_irq_dma+0x44e>
 80015ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015be:	e012      	b.n	80015e6 <stdin_irq_dma+0x44e>
 80015c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015c4:	e00f      	b.n	80015e6 <stdin_irq_dma+0x44e>
 80015c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015ca:	e00c      	b.n	80015e6 <stdin_irq_dma+0x44e>
 80015cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015d0:	e009      	b.n	80015e6 <stdin_irq_dma+0x44e>
 80015d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015d6:	e006      	b.n	80015e6 <stdin_irq_dma+0x44e>
 80015d8:	2310      	movs	r3, #16
 80015da:	e004      	b.n	80015e6 <stdin_irq_dma+0x44e>
 80015dc:	2310      	movs	r3, #16
 80015de:	e002      	b.n	80015e6 <stdin_irq_dma+0x44e>
 80015e0:	2310      	movs	r3, #16
 80015e2:	e000      	b.n	80015e6 <stdin_irq_dma+0x44e>
 80015e4:	2310      	movs	r3, #16
 80015e6:	4a10      	ldr	r2, [pc, #64]	; (8001628 <stdin_irq_dma+0x490>)
 80015e8:	6093      	str	r3, [r2, #8]
    check_buffer(in);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f001 f92c 	bl	8002848 <check_buffer>
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_FE_FLAG_INDEX(HDMA(in)));
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_DME_FLAG_INDEX(HDMA(in)));

    HAL_UART_Receive_DMA(in->huart, in->buffer, in->size);
  }
}
 80015f0:	f001 b8ea 	b.w	80027c8 <stdin_irq_dma+0x1630>
 80015f4:	40026058 	.word	0x40026058
 80015f8:	40026010 	.word	0x40026010
 80015fc:	40026410 	.word	0x40026410
 8001600:	40026070 	.word	0x40026070
 8001604:	40026470 	.word	0x40026470
 8001608:	40026028 	.word	0x40026028
 800160c:	40026428 	.word	0x40026428
 8001610:	40026088 	.word	0x40026088
 8001614:	40026488 	.word	0x40026488
 8001618:	40026040 	.word	0x40026040
 800161c:	40026440 	.word	0x40026440
 8001620:	400260a0 	.word	0x400260a0
 8001624:	400264a0 	.word	0x400264a0
 8001628:	40026000 	.word	0x40026000
  else if (__HAL_DMA_GET_IT_SOURCE(HDMA(in), DMA_IT_TC))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0310 	and.w	r3, r3, #16
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 823c 	beq.w	8001ab8 <stdin_irq_dma+0x920>
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_TC_FLAG_INDEX(HDMA(in)));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4b7f      	ldr	r3, [pc, #508]	; (8001848 <stdin_irq_dma+0x6b0>)
 800164c:	429a      	cmp	r2, r3
 800164e:	d978      	bls.n	8001742 <stdin_irq_dma+0x5aa>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a7c      	ldr	r2, [pc, #496]	; (800184c <stdin_irq_dma+0x6b4>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d06d      	beq.n	800173a <stdin_irq_dma+0x5a2>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a7a      	ldr	r2, [pc, #488]	; (8001850 <stdin_irq_dma+0x6b8>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d064      	beq.n	8001736 <stdin_irq_dma+0x59e>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a77      	ldr	r2, [pc, #476]	; (8001854 <stdin_irq_dma+0x6bc>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d05b      	beq.n	8001732 <stdin_irq_dma+0x59a>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a75      	ldr	r2, [pc, #468]	; (8001858 <stdin_irq_dma+0x6c0>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d052      	beq.n	800172e <stdin_irq_dma+0x596>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a72      	ldr	r2, [pc, #456]	; (800185c <stdin_irq_dma+0x6c4>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d048      	beq.n	8001728 <stdin_irq_dma+0x590>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a70      	ldr	r2, [pc, #448]	; (8001860 <stdin_irq_dma+0x6c8>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d03e      	beq.n	8001722 <stdin_irq_dma+0x58a>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a6d      	ldr	r2, [pc, #436]	; (8001864 <stdin_irq_dma+0x6cc>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d034      	beq.n	800171c <stdin_irq_dma+0x584>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a6b      	ldr	r2, [pc, #428]	; (8001868 <stdin_irq_dma+0x6d0>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d02a      	beq.n	8001716 <stdin_irq_dma+0x57e>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a68      	ldr	r2, [pc, #416]	; (800186c <stdin_irq_dma+0x6d4>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d020      	beq.n	8001710 <stdin_irq_dma+0x578>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a66      	ldr	r2, [pc, #408]	; (8001870 <stdin_irq_dma+0x6d8>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d016      	beq.n	800170a <stdin_irq_dma+0x572>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a63      	ldr	r2, [pc, #396]	; (8001874 <stdin_irq_dma+0x6dc>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d00c      	beq.n	8001704 <stdin_irq_dma+0x56c>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a61      	ldr	r2, [pc, #388]	; (8001878 <stdin_irq_dma+0x6e0>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d102      	bne.n	80016fe <stdin_irq_dma+0x566>
 80016f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016fc:	e01e      	b.n	800173c <stdin_irq_dma+0x5a4>
 80016fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001702:	e01b      	b.n	800173c <stdin_irq_dma+0x5a4>
 8001704:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001708:	e018      	b.n	800173c <stdin_irq_dma+0x5a4>
 800170a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800170e:	e015      	b.n	800173c <stdin_irq_dma+0x5a4>
 8001710:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001714:	e012      	b.n	800173c <stdin_irq_dma+0x5a4>
 8001716:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800171a:	e00f      	b.n	800173c <stdin_irq_dma+0x5a4>
 800171c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001720:	e00c      	b.n	800173c <stdin_irq_dma+0x5a4>
 8001722:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001726:	e009      	b.n	800173c <stdin_irq_dma+0x5a4>
 8001728:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800172c:	e006      	b.n	800173c <stdin_irq_dma+0x5a4>
 800172e:	2320      	movs	r3, #32
 8001730:	e004      	b.n	800173c <stdin_irq_dma+0x5a4>
 8001732:	2320      	movs	r3, #32
 8001734:	e002      	b.n	800173c <stdin_irq_dma+0x5a4>
 8001736:	2320      	movs	r3, #32
 8001738:	e000      	b.n	800173c <stdin_irq_dma+0x5a4>
 800173a:	2320      	movs	r3, #32
 800173c:	4a4f      	ldr	r2, [pc, #316]	; (800187c <stdin_irq_dma+0x6e4>)
 800173e:	60d3      	str	r3, [r2, #12]
 8001740:	e199      	b.n	8001a76 <stdin_irq_dma+0x8de>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	461a      	mov	r2, r3
 800174c:	4b4c      	ldr	r3, [pc, #304]	; (8001880 <stdin_irq_dma+0x6e8>)
 800174e:	429a      	cmp	r2, r3
 8001750:	f240 8098 	bls.w	8001884 <stdin_irq_dma+0x6ec>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a3b      	ldr	r2, [pc, #236]	; (800184c <stdin_irq_dma+0x6b4>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d06d      	beq.n	800183e <stdin_irq_dma+0x6a6>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a39      	ldr	r2, [pc, #228]	; (8001850 <stdin_irq_dma+0x6b8>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d064      	beq.n	800183a <stdin_irq_dma+0x6a2>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a36      	ldr	r2, [pc, #216]	; (8001854 <stdin_irq_dma+0x6bc>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d05b      	beq.n	8001836 <stdin_irq_dma+0x69e>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a34      	ldr	r2, [pc, #208]	; (8001858 <stdin_irq_dma+0x6c0>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d052      	beq.n	8001832 <stdin_irq_dma+0x69a>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a31      	ldr	r2, [pc, #196]	; (800185c <stdin_irq_dma+0x6c4>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d048      	beq.n	800182c <stdin_irq_dma+0x694>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a2f      	ldr	r2, [pc, #188]	; (8001860 <stdin_irq_dma+0x6c8>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d03e      	beq.n	8001826 <stdin_irq_dma+0x68e>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a2c      	ldr	r2, [pc, #176]	; (8001864 <stdin_irq_dma+0x6cc>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d034      	beq.n	8001820 <stdin_irq_dma+0x688>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a2a      	ldr	r2, [pc, #168]	; (8001868 <stdin_irq_dma+0x6d0>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d02a      	beq.n	800181a <stdin_irq_dma+0x682>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a27      	ldr	r2, [pc, #156]	; (800186c <stdin_irq_dma+0x6d4>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d020      	beq.n	8001814 <stdin_irq_dma+0x67c>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a25      	ldr	r2, [pc, #148]	; (8001870 <stdin_irq_dma+0x6d8>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d016      	beq.n	800180e <stdin_irq_dma+0x676>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a22      	ldr	r2, [pc, #136]	; (8001874 <stdin_irq_dma+0x6dc>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d00c      	beq.n	8001808 <stdin_irq_dma+0x670>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a20      	ldr	r2, [pc, #128]	; (8001878 <stdin_irq_dma+0x6e0>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d102      	bne.n	8001802 <stdin_irq_dma+0x66a>
 80017fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001800:	e01e      	b.n	8001840 <stdin_irq_dma+0x6a8>
 8001802:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001806:	e01b      	b.n	8001840 <stdin_irq_dma+0x6a8>
 8001808:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800180c:	e018      	b.n	8001840 <stdin_irq_dma+0x6a8>
 800180e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001812:	e015      	b.n	8001840 <stdin_irq_dma+0x6a8>
 8001814:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001818:	e012      	b.n	8001840 <stdin_irq_dma+0x6a8>
 800181a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800181e:	e00f      	b.n	8001840 <stdin_irq_dma+0x6a8>
 8001820:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001824:	e00c      	b.n	8001840 <stdin_irq_dma+0x6a8>
 8001826:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800182a:	e009      	b.n	8001840 <stdin_irq_dma+0x6a8>
 800182c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001830:	e006      	b.n	8001840 <stdin_irq_dma+0x6a8>
 8001832:	2320      	movs	r3, #32
 8001834:	e004      	b.n	8001840 <stdin_irq_dma+0x6a8>
 8001836:	2320      	movs	r3, #32
 8001838:	e002      	b.n	8001840 <stdin_irq_dma+0x6a8>
 800183a:	2320      	movs	r3, #32
 800183c:	e000      	b.n	8001840 <stdin_irq_dma+0x6a8>
 800183e:	2320      	movs	r3, #32
 8001840:	4a0e      	ldr	r2, [pc, #56]	; (800187c <stdin_irq_dma+0x6e4>)
 8001842:	6093      	str	r3, [r2, #8]
 8001844:	e117      	b.n	8001a76 <stdin_irq_dma+0x8de>
 8001846:	bf00      	nop
 8001848:	40026458 	.word	0x40026458
 800184c:	40026010 	.word	0x40026010
 8001850:	40026410 	.word	0x40026410
 8001854:	40026070 	.word	0x40026070
 8001858:	40026470 	.word	0x40026470
 800185c:	40026028 	.word	0x40026028
 8001860:	40026428 	.word	0x40026428
 8001864:	40026088 	.word	0x40026088
 8001868:	40026488 	.word	0x40026488
 800186c:	40026040 	.word	0x40026040
 8001870:	40026440 	.word	0x40026440
 8001874:	400260a0 	.word	0x400260a0
 8001878:	400264a0 	.word	0x400264a0
 800187c:	40026400 	.word	0x40026400
 8001880:	400260b8 	.word	0x400260b8
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	4b7c      	ldr	r3, [pc, #496]	; (8001a80 <stdin_irq_dma+0x8e8>)
 8001890:	429a      	cmp	r2, r3
 8001892:	d978      	bls.n	8001986 <stdin_irq_dma+0x7ee>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a79      	ldr	r2, [pc, #484]	; (8001a84 <stdin_irq_dma+0x8ec>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d06d      	beq.n	800197e <stdin_irq_dma+0x7e6>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a77      	ldr	r2, [pc, #476]	; (8001a88 <stdin_irq_dma+0x8f0>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d064      	beq.n	800197a <stdin_irq_dma+0x7e2>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a74      	ldr	r2, [pc, #464]	; (8001a8c <stdin_irq_dma+0x8f4>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d05b      	beq.n	8001976 <stdin_irq_dma+0x7de>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a72      	ldr	r2, [pc, #456]	; (8001a90 <stdin_irq_dma+0x8f8>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d052      	beq.n	8001972 <stdin_irq_dma+0x7da>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a6f      	ldr	r2, [pc, #444]	; (8001a94 <stdin_irq_dma+0x8fc>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d048      	beq.n	800196c <stdin_irq_dma+0x7d4>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a6d      	ldr	r2, [pc, #436]	; (8001a98 <stdin_irq_dma+0x900>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d03e      	beq.n	8001966 <stdin_irq_dma+0x7ce>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a6a      	ldr	r2, [pc, #424]	; (8001a9c <stdin_irq_dma+0x904>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d034      	beq.n	8001960 <stdin_irq_dma+0x7c8>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a68      	ldr	r2, [pc, #416]	; (8001aa0 <stdin_irq_dma+0x908>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d02a      	beq.n	800195a <stdin_irq_dma+0x7c2>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a65      	ldr	r2, [pc, #404]	; (8001aa4 <stdin_irq_dma+0x90c>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d020      	beq.n	8001954 <stdin_irq_dma+0x7bc>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a63      	ldr	r2, [pc, #396]	; (8001aa8 <stdin_irq_dma+0x910>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d016      	beq.n	800194e <stdin_irq_dma+0x7b6>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a60      	ldr	r2, [pc, #384]	; (8001aac <stdin_irq_dma+0x914>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d00c      	beq.n	8001948 <stdin_irq_dma+0x7b0>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a5e      	ldr	r2, [pc, #376]	; (8001ab0 <stdin_irq_dma+0x918>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d102      	bne.n	8001942 <stdin_irq_dma+0x7aa>
 800193c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001940:	e01e      	b.n	8001980 <stdin_irq_dma+0x7e8>
 8001942:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001946:	e01b      	b.n	8001980 <stdin_irq_dma+0x7e8>
 8001948:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800194c:	e018      	b.n	8001980 <stdin_irq_dma+0x7e8>
 800194e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001952:	e015      	b.n	8001980 <stdin_irq_dma+0x7e8>
 8001954:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001958:	e012      	b.n	8001980 <stdin_irq_dma+0x7e8>
 800195a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800195e:	e00f      	b.n	8001980 <stdin_irq_dma+0x7e8>
 8001960:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001964:	e00c      	b.n	8001980 <stdin_irq_dma+0x7e8>
 8001966:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800196a:	e009      	b.n	8001980 <stdin_irq_dma+0x7e8>
 800196c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001970:	e006      	b.n	8001980 <stdin_irq_dma+0x7e8>
 8001972:	2320      	movs	r3, #32
 8001974:	e004      	b.n	8001980 <stdin_irq_dma+0x7e8>
 8001976:	2320      	movs	r3, #32
 8001978:	e002      	b.n	8001980 <stdin_irq_dma+0x7e8>
 800197a:	2320      	movs	r3, #32
 800197c:	e000      	b.n	8001980 <stdin_irq_dma+0x7e8>
 800197e:	2320      	movs	r3, #32
 8001980:	4a4c      	ldr	r2, [pc, #304]	; (8001ab4 <stdin_irq_dma+0x91c>)
 8001982:	60d3      	str	r3, [r2, #12]
 8001984:	e077      	b.n	8001a76 <stdin_irq_dma+0x8de>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a3d      	ldr	r2, [pc, #244]	; (8001a84 <stdin_irq_dma+0x8ec>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d06d      	beq.n	8001a70 <stdin_irq_dma+0x8d8>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a3a      	ldr	r2, [pc, #232]	; (8001a88 <stdin_irq_dma+0x8f0>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d064      	beq.n	8001a6c <stdin_irq_dma+0x8d4>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a38      	ldr	r2, [pc, #224]	; (8001a8c <stdin_irq_dma+0x8f4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d05b      	beq.n	8001a68 <stdin_irq_dma+0x8d0>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a35      	ldr	r2, [pc, #212]	; (8001a90 <stdin_irq_dma+0x8f8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d052      	beq.n	8001a64 <stdin_irq_dma+0x8cc>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a33      	ldr	r2, [pc, #204]	; (8001a94 <stdin_irq_dma+0x8fc>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d048      	beq.n	8001a5e <stdin_irq_dma+0x8c6>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a30      	ldr	r2, [pc, #192]	; (8001a98 <stdin_irq_dma+0x900>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d03e      	beq.n	8001a58 <stdin_irq_dma+0x8c0>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a2e      	ldr	r2, [pc, #184]	; (8001a9c <stdin_irq_dma+0x904>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d034      	beq.n	8001a52 <stdin_irq_dma+0x8ba>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a2b      	ldr	r2, [pc, #172]	; (8001aa0 <stdin_irq_dma+0x908>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d02a      	beq.n	8001a4c <stdin_irq_dma+0x8b4>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a29      	ldr	r2, [pc, #164]	; (8001aa4 <stdin_irq_dma+0x90c>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d020      	beq.n	8001a46 <stdin_irq_dma+0x8ae>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a26      	ldr	r2, [pc, #152]	; (8001aa8 <stdin_irq_dma+0x910>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d016      	beq.n	8001a40 <stdin_irq_dma+0x8a8>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a24      	ldr	r2, [pc, #144]	; (8001aac <stdin_irq_dma+0x914>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d00c      	beq.n	8001a3a <stdin_irq_dma+0x8a2>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a21      	ldr	r2, [pc, #132]	; (8001ab0 <stdin_irq_dma+0x918>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d102      	bne.n	8001a34 <stdin_irq_dma+0x89c>
 8001a2e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a32:	e01e      	b.n	8001a72 <stdin_irq_dma+0x8da>
 8001a34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001a38:	e01b      	b.n	8001a72 <stdin_irq_dma+0x8da>
 8001a3a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a3e:	e018      	b.n	8001a72 <stdin_irq_dma+0x8da>
 8001a40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a44:	e015      	b.n	8001a72 <stdin_irq_dma+0x8da>
 8001a46:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a4a:	e012      	b.n	8001a72 <stdin_irq_dma+0x8da>
 8001a4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a50:	e00f      	b.n	8001a72 <stdin_irq_dma+0x8da>
 8001a52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a56:	e00c      	b.n	8001a72 <stdin_irq_dma+0x8da>
 8001a58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a5c:	e009      	b.n	8001a72 <stdin_irq_dma+0x8da>
 8001a5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a62:	e006      	b.n	8001a72 <stdin_irq_dma+0x8da>
 8001a64:	2320      	movs	r3, #32
 8001a66:	e004      	b.n	8001a72 <stdin_irq_dma+0x8da>
 8001a68:	2320      	movs	r3, #32
 8001a6a:	e002      	b.n	8001a72 <stdin_irq_dma+0x8da>
 8001a6c:	2320      	movs	r3, #32
 8001a6e:	e000      	b.n	8001a72 <stdin_irq_dma+0x8da>
 8001a70:	2320      	movs	r3, #32
 8001a72:	4a10      	ldr	r2, [pc, #64]	; (8001ab4 <stdin_irq_dma+0x91c>)
 8001a74:	6093      	str	r3, [r2, #8]
    check_buffer(in);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 fee6 	bl	8002848 <check_buffer>
}
 8001a7c:	f000 bea4 	b.w	80027c8 <stdin_irq_dma+0x1630>
 8001a80:	40026058 	.word	0x40026058
 8001a84:	40026010 	.word	0x40026010
 8001a88:	40026410 	.word	0x40026410
 8001a8c:	40026070 	.word	0x40026070
 8001a90:	40026470 	.word	0x40026470
 8001a94:	40026028 	.word	0x40026028
 8001a98:	40026428 	.word	0x40026428
 8001a9c:	40026088 	.word	0x40026088
 8001aa0:	40026488 	.word	0x40026488
 8001aa4:	40026040 	.word	0x40026040
 8001aa8:	40026440 	.word	0x40026440
 8001aac:	400260a0 	.word	0x400260a0
 8001ab0:	400264a0 	.word	0x400264a0
 8001ab4:	40026000 	.word	0x40026000
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_TE_FLAG_INDEX(HDMA(in)));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4b7f      	ldr	r3, [pc, #508]	; (8001cc0 <stdin_irq_dma+0xb28>)
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d978      	bls.n	8001bba <stdin_irq_dma+0xa22>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a7c      	ldr	r2, [pc, #496]	; (8001cc4 <stdin_irq_dma+0xb2c>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d06d      	beq.n	8001bb2 <stdin_irq_dma+0xa1a>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a7a      	ldr	r2, [pc, #488]	; (8001cc8 <stdin_irq_dma+0xb30>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d064      	beq.n	8001bae <stdin_irq_dma+0xa16>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a77      	ldr	r2, [pc, #476]	; (8001ccc <stdin_irq_dma+0xb34>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d05b      	beq.n	8001baa <stdin_irq_dma+0xa12>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a75      	ldr	r2, [pc, #468]	; (8001cd0 <stdin_irq_dma+0xb38>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d052      	beq.n	8001ba6 <stdin_irq_dma+0xa0e>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a72      	ldr	r2, [pc, #456]	; (8001cd4 <stdin_irq_dma+0xb3c>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d048      	beq.n	8001ba0 <stdin_irq_dma+0xa08>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a70      	ldr	r2, [pc, #448]	; (8001cd8 <stdin_irq_dma+0xb40>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d03e      	beq.n	8001b9a <stdin_irq_dma+0xa02>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a6d      	ldr	r2, [pc, #436]	; (8001cdc <stdin_irq_dma+0xb44>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d034      	beq.n	8001b94 <stdin_irq_dma+0x9fc>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a6b      	ldr	r2, [pc, #428]	; (8001ce0 <stdin_irq_dma+0xb48>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d02a      	beq.n	8001b8e <stdin_irq_dma+0x9f6>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a68      	ldr	r2, [pc, #416]	; (8001ce4 <stdin_irq_dma+0xb4c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d020      	beq.n	8001b88 <stdin_irq_dma+0x9f0>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a66      	ldr	r2, [pc, #408]	; (8001ce8 <stdin_irq_dma+0xb50>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d016      	beq.n	8001b82 <stdin_irq_dma+0x9ea>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a63      	ldr	r2, [pc, #396]	; (8001cec <stdin_irq_dma+0xb54>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d00c      	beq.n	8001b7c <stdin_irq_dma+0x9e4>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a61      	ldr	r2, [pc, #388]	; (8001cf0 <stdin_irq_dma+0xb58>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d102      	bne.n	8001b76 <stdin_irq_dma+0x9de>
 8001b70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001b74:	e01e      	b.n	8001bb4 <stdin_irq_dma+0xa1c>
 8001b76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b7a:	e01b      	b.n	8001bb4 <stdin_irq_dma+0xa1c>
 8001b7c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001b80:	e018      	b.n	8001bb4 <stdin_irq_dma+0xa1c>
 8001b82:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001b86:	e015      	b.n	8001bb4 <stdin_irq_dma+0xa1c>
 8001b88:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001b8c:	e012      	b.n	8001bb4 <stdin_irq_dma+0xa1c>
 8001b8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b92:	e00f      	b.n	8001bb4 <stdin_irq_dma+0xa1c>
 8001b94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b98:	e00c      	b.n	8001bb4 <stdin_irq_dma+0xa1c>
 8001b9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b9e:	e009      	b.n	8001bb4 <stdin_irq_dma+0xa1c>
 8001ba0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ba4:	e006      	b.n	8001bb4 <stdin_irq_dma+0xa1c>
 8001ba6:	2308      	movs	r3, #8
 8001ba8:	e004      	b.n	8001bb4 <stdin_irq_dma+0xa1c>
 8001baa:	2308      	movs	r3, #8
 8001bac:	e002      	b.n	8001bb4 <stdin_irq_dma+0xa1c>
 8001bae:	2308      	movs	r3, #8
 8001bb0:	e000      	b.n	8001bb4 <stdin_irq_dma+0xa1c>
 8001bb2:	2308      	movs	r3, #8
 8001bb4:	4a4f      	ldr	r2, [pc, #316]	; (8001cf4 <stdin_irq_dma+0xb5c>)
 8001bb6:	60d3      	str	r3, [r2, #12]
 8001bb8:	e1b7      	b.n	8001f2a <stdin_irq_dma+0xd92>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	4b4c      	ldr	r3, [pc, #304]	; (8001cf8 <stdin_irq_dma+0xb60>)
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	f240 8098 	bls.w	8001cfc <stdin_irq_dma+0xb64>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a3b      	ldr	r2, [pc, #236]	; (8001cc4 <stdin_irq_dma+0xb2c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d06d      	beq.n	8001cb6 <stdin_irq_dma+0xb1e>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a39      	ldr	r2, [pc, #228]	; (8001cc8 <stdin_irq_dma+0xb30>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d064      	beq.n	8001cb2 <stdin_irq_dma+0xb1a>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a36      	ldr	r2, [pc, #216]	; (8001ccc <stdin_irq_dma+0xb34>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d05b      	beq.n	8001cae <stdin_irq_dma+0xb16>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a34      	ldr	r2, [pc, #208]	; (8001cd0 <stdin_irq_dma+0xb38>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d052      	beq.n	8001caa <stdin_irq_dma+0xb12>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a31      	ldr	r2, [pc, #196]	; (8001cd4 <stdin_irq_dma+0xb3c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d048      	beq.n	8001ca4 <stdin_irq_dma+0xb0c>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a2f      	ldr	r2, [pc, #188]	; (8001cd8 <stdin_irq_dma+0xb40>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d03e      	beq.n	8001c9e <stdin_irq_dma+0xb06>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a2c      	ldr	r2, [pc, #176]	; (8001cdc <stdin_irq_dma+0xb44>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d034      	beq.n	8001c98 <stdin_irq_dma+0xb00>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a2a      	ldr	r2, [pc, #168]	; (8001ce0 <stdin_irq_dma+0xb48>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d02a      	beq.n	8001c92 <stdin_irq_dma+0xafa>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a27      	ldr	r2, [pc, #156]	; (8001ce4 <stdin_irq_dma+0xb4c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d020      	beq.n	8001c8c <stdin_irq_dma+0xaf4>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a25      	ldr	r2, [pc, #148]	; (8001ce8 <stdin_irq_dma+0xb50>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d016      	beq.n	8001c86 <stdin_irq_dma+0xaee>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a22      	ldr	r2, [pc, #136]	; (8001cec <stdin_irq_dma+0xb54>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d00c      	beq.n	8001c80 <stdin_irq_dma+0xae8>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a20      	ldr	r2, [pc, #128]	; (8001cf0 <stdin_irq_dma+0xb58>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d102      	bne.n	8001c7a <stdin_irq_dma+0xae2>
 8001c74:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001c78:	e01e      	b.n	8001cb8 <stdin_irq_dma+0xb20>
 8001c7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c7e:	e01b      	b.n	8001cb8 <stdin_irq_dma+0xb20>
 8001c80:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001c84:	e018      	b.n	8001cb8 <stdin_irq_dma+0xb20>
 8001c86:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001c8a:	e015      	b.n	8001cb8 <stdin_irq_dma+0xb20>
 8001c8c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001c90:	e012      	b.n	8001cb8 <stdin_irq_dma+0xb20>
 8001c92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c96:	e00f      	b.n	8001cb8 <stdin_irq_dma+0xb20>
 8001c98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c9c:	e00c      	b.n	8001cb8 <stdin_irq_dma+0xb20>
 8001c9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ca2:	e009      	b.n	8001cb8 <stdin_irq_dma+0xb20>
 8001ca4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ca8:	e006      	b.n	8001cb8 <stdin_irq_dma+0xb20>
 8001caa:	2308      	movs	r3, #8
 8001cac:	e004      	b.n	8001cb8 <stdin_irq_dma+0xb20>
 8001cae:	2308      	movs	r3, #8
 8001cb0:	e002      	b.n	8001cb8 <stdin_irq_dma+0xb20>
 8001cb2:	2308      	movs	r3, #8
 8001cb4:	e000      	b.n	8001cb8 <stdin_irq_dma+0xb20>
 8001cb6:	2308      	movs	r3, #8
 8001cb8:	4a0e      	ldr	r2, [pc, #56]	; (8001cf4 <stdin_irq_dma+0xb5c>)
 8001cba:	6093      	str	r3, [r2, #8]
 8001cbc:	e135      	b.n	8001f2a <stdin_irq_dma+0xd92>
 8001cbe:	bf00      	nop
 8001cc0:	40026458 	.word	0x40026458
 8001cc4:	40026010 	.word	0x40026010
 8001cc8:	40026410 	.word	0x40026410
 8001ccc:	40026070 	.word	0x40026070
 8001cd0:	40026470 	.word	0x40026470
 8001cd4:	40026028 	.word	0x40026028
 8001cd8:	40026428 	.word	0x40026428
 8001cdc:	40026088 	.word	0x40026088
 8001ce0:	40026488 	.word	0x40026488
 8001ce4:	40026040 	.word	0x40026040
 8001ce8:	40026440 	.word	0x40026440
 8001cec:	400260a0 	.word	0x400260a0
 8001cf0:	400264a0 	.word	0x400264a0
 8001cf4:	40026400 	.word	0x40026400
 8001cf8:	400260b8 	.word	0x400260b8
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b79      	ldr	r3, [pc, #484]	; (8001eec <stdin_irq_dma+0xd54>)
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d978      	bls.n	8001dfe <stdin_irq_dma+0xc66>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a76      	ldr	r2, [pc, #472]	; (8001ef0 <stdin_irq_dma+0xd58>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d06d      	beq.n	8001df6 <stdin_irq_dma+0xc5e>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a74      	ldr	r2, [pc, #464]	; (8001ef4 <stdin_irq_dma+0xd5c>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d064      	beq.n	8001df2 <stdin_irq_dma+0xc5a>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a71      	ldr	r2, [pc, #452]	; (8001ef8 <stdin_irq_dma+0xd60>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d05b      	beq.n	8001dee <stdin_irq_dma+0xc56>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a6f      	ldr	r2, [pc, #444]	; (8001efc <stdin_irq_dma+0xd64>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d052      	beq.n	8001dea <stdin_irq_dma+0xc52>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a6c      	ldr	r2, [pc, #432]	; (8001f00 <stdin_irq_dma+0xd68>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d048      	beq.n	8001de4 <stdin_irq_dma+0xc4c>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a6a      	ldr	r2, [pc, #424]	; (8001f04 <stdin_irq_dma+0xd6c>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d03e      	beq.n	8001dde <stdin_irq_dma+0xc46>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a67      	ldr	r2, [pc, #412]	; (8001f08 <stdin_irq_dma+0xd70>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d034      	beq.n	8001dd8 <stdin_irq_dma+0xc40>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a65      	ldr	r2, [pc, #404]	; (8001f0c <stdin_irq_dma+0xd74>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d02a      	beq.n	8001dd2 <stdin_irq_dma+0xc3a>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a62      	ldr	r2, [pc, #392]	; (8001f10 <stdin_irq_dma+0xd78>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d020      	beq.n	8001dcc <stdin_irq_dma+0xc34>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a60      	ldr	r2, [pc, #384]	; (8001f14 <stdin_irq_dma+0xd7c>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d016      	beq.n	8001dc6 <stdin_irq_dma+0xc2e>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a5d      	ldr	r2, [pc, #372]	; (8001f18 <stdin_irq_dma+0xd80>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d00c      	beq.n	8001dc0 <stdin_irq_dma+0xc28>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a5b      	ldr	r2, [pc, #364]	; (8001f1c <stdin_irq_dma+0xd84>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d102      	bne.n	8001dba <stdin_irq_dma+0xc22>
 8001db4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001db8:	e01e      	b.n	8001df8 <stdin_irq_dma+0xc60>
 8001dba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dbe:	e01b      	b.n	8001df8 <stdin_irq_dma+0xc60>
 8001dc0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001dc4:	e018      	b.n	8001df8 <stdin_irq_dma+0xc60>
 8001dc6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001dca:	e015      	b.n	8001df8 <stdin_irq_dma+0xc60>
 8001dcc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001dd0:	e012      	b.n	8001df8 <stdin_irq_dma+0xc60>
 8001dd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dd6:	e00f      	b.n	8001df8 <stdin_irq_dma+0xc60>
 8001dd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ddc:	e00c      	b.n	8001df8 <stdin_irq_dma+0xc60>
 8001dde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001de2:	e009      	b.n	8001df8 <stdin_irq_dma+0xc60>
 8001de4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001de8:	e006      	b.n	8001df8 <stdin_irq_dma+0xc60>
 8001dea:	2308      	movs	r3, #8
 8001dec:	e004      	b.n	8001df8 <stdin_irq_dma+0xc60>
 8001dee:	2308      	movs	r3, #8
 8001df0:	e002      	b.n	8001df8 <stdin_irq_dma+0xc60>
 8001df2:	2308      	movs	r3, #8
 8001df4:	e000      	b.n	8001df8 <stdin_irq_dma+0xc60>
 8001df6:	2308      	movs	r3, #8
 8001df8:	4a49      	ldr	r2, [pc, #292]	; (8001f20 <stdin_irq_dma+0xd88>)
 8001dfa:	60d3      	str	r3, [r2, #12]
 8001dfc:	e095      	b.n	8001f2a <stdin_irq_dma+0xd92>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a3a      	ldr	r2, [pc, #232]	; (8001ef0 <stdin_irq_dma+0xd58>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	f000 808b 	beq.w	8001f24 <stdin_irq_dma+0xd8c>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a37      	ldr	r2, [pc, #220]	; (8001ef4 <stdin_irq_dma+0xd5c>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d064      	beq.n	8001ee6 <stdin_irq_dma+0xd4e>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a34      	ldr	r2, [pc, #208]	; (8001ef8 <stdin_irq_dma+0xd60>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d05b      	beq.n	8001ee2 <stdin_irq_dma+0xd4a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a32      	ldr	r2, [pc, #200]	; (8001efc <stdin_irq_dma+0xd64>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d052      	beq.n	8001ede <stdin_irq_dma+0xd46>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a2f      	ldr	r2, [pc, #188]	; (8001f00 <stdin_irq_dma+0xd68>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d048      	beq.n	8001ed8 <stdin_irq_dma+0xd40>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a2d      	ldr	r2, [pc, #180]	; (8001f04 <stdin_irq_dma+0xd6c>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d03e      	beq.n	8001ed2 <stdin_irq_dma+0xd3a>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a2a      	ldr	r2, [pc, #168]	; (8001f08 <stdin_irq_dma+0xd70>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d034      	beq.n	8001ecc <stdin_irq_dma+0xd34>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a28      	ldr	r2, [pc, #160]	; (8001f0c <stdin_irq_dma+0xd74>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d02a      	beq.n	8001ec6 <stdin_irq_dma+0xd2e>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a25      	ldr	r2, [pc, #148]	; (8001f10 <stdin_irq_dma+0xd78>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d020      	beq.n	8001ec0 <stdin_irq_dma+0xd28>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a23      	ldr	r2, [pc, #140]	; (8001f14 <stdin_irq_dma+0xd7c>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d016      	beq.n	8001eba <stdin_irq_dma+0xd22>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a20      	ldr	r2, [pc, #128]	; (8001f18 <stdin_irq_dma+0xd80>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d00c      	beq.n	8001eb4 <stdin_irq_dma+0xd1c>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a1e      	ldr	r2, [pc, #120]	; (8001f1c <stdin_irq_dma+0xd84>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d102      	bne.n	8001eae <stdin_irq_dma+0xd16>
 8001ea8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001eac:	e03b      	b.n	8001f26 <stdin_irq_dma+0xd8e>
 8001eae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eb2:	e038      	b.n	8001f26 <stdin_irq_dma+0xd8e>
 8001eb4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001eb8:	e035      	b.n	8001f26 <stdin_irq_dma+0xd8e>
 8001eba:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001ebe:	e032      	b.n	8001f26 <stdin_irq_dma+0xd8e>
 8001ec0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001ec4:	e02f      	b.n	8001f26 <stdin_irq_dma+0xd8e>
 8001ec6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eca:	e02c      	b.n	8001f26 <stdin_irq_dma+0xd8e>
 8001ecc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ed0:	e029      	b.n	8001f26 <stdin_irq_dma+0xd8e>
 8001ed2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ed6:	e026      	b.n	8001f26 <stdin_irq_dma+0xd8e>
 8001ed8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001edc:	e023      	b.n	8001f26 <stdin_irq_dma+0xd8e>
 8001ede:	2308      	movs	r3, #8
 8001ee0:	e021      	b.n	8001f26 <stdin_irq_dma+0xd8e>
 8001ee2:	2308      	movs	r3, #8
 8001ee4:	e01f      	b.n	8001f26 <stdin_irq_dma+0xd8e>
 8001ee6:	2308      	movs	r3, #8
 8001ee8:	e01d      	b.n	8001f26 <stdin_irq_dma+0xd8e>
 8001eea:	bf00      	nop
 8001eec:	40026058 	.word	0x40026058
 8001ef0:	40026010 	.word	0x40026010
 8001ef4:	40026410 	.word	0x40026410
 8001ef8:	40026070 	.word	0x40026070
 8001efc:	40026470 	.word	0x40026470
 8001f00:	40026028 	.word	0x40026028
 8001f04:	40026428 	.word	0x40026428
 8001f08:	40026088 	.word	0x40026088
 8001f0c:	40026488 	.word	0x40026488
 8001f10:	40026040 	.word	0x40026040
 8001f14:	40026440 	.word	0x40026440
 8001f18:	400260a0 	.word	0x400260a0
 8001f1c:	400264a0 	.word	0x400264a0
 8001f20:	40026000 	.word	0x40026000
 8001f24:	2308      	movs	r3, #8
 8001f26:	4a7e      	ldr	r2, [pc, #504]	; (8002120 <stdin_irq_dma+0xf88>)
 8001f28:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_FE_FLAG_INDEX(HDMA(in)));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	461a      	mov	r2, r3
 8001f34:	4b7b      	ldr	r3, [pc, #492]	; (8002124 <stdin_irq_dma+0xf8c>)
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d974      	bls.n	8002024 <stdin_irq_dma+0xe8c>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a79      	ldr	r2, [pc, #484]	; (8002128 <stdin_irq_dma+0xf90>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d069      	beq.n	800201c <stdin_irq_dma+0xe84>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a76      	ldr	r2, [pc, #472]	; (800212c <stdin_irq_dma+0xf94>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d060      	beq.n	8002018 <stdin_irq_dma+0xe80>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a74      	ldr	r2, [pc, #464]	; (8002130 <stdin_irq_dma+0xf98>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d057      	beq.n	8002014 <stdin_irq_dma+0xe7c>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a71      	ldr	r2, [pc, #452]	; (8002134 <stdin_irq_dma+0xf9c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d04e      	beq.n	8002010 <stdin_irq_dma+0xe78>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a6f      	ldr	r2, [pc, #444]	; (8002138 <stdin_irq_dma+0xfa0>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d045      	beq.n	800200c <stdin_irq_dma+0xe74>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a6c      	ldr	r2, [pc, #432]	; (800213c <stdin_irq_dma+0xfa4>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d03c      	beq.n	8002008 <stdin_irq_dma+0xe70>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a6a      	ldr	r2, [pc, #424]	; (8002140 <stdin_irq_dma+0xfa8>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d033      	beq.n	8002004 <stdin_irq_dma+0xe6c>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a67      	ldr	r2, [pc, #412]	; (8002144 <stdin_irq_dma+0xfac>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d02a      	beq.n	8002000 <stdin_irq_dma+0xe68>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a65      	ldr	r2, [pc, #404]	; (8002148 <stdin_irq_dma+0xfb0>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d020      	beq.n	8001ffa <stdin_irq_dma+0xe62>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a62      	ldr	r2, [pc, #392]	; (800214c <stdin_irq_dma+0xfb4>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d016      	beq.n	8001ff4 <stdin_irq_dma+0xe5c>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a60      	ldr	r2, [pc, #384]	; (8002150 <stdin_irq_dma+0xfb8>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d00c      	beq.n	8001fee <stdin_irq_dma+0xe56>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a5d      	ldr	r2, [pc, #372]	; (8002154 <stdin_irq_dma+0xfbc>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d102      	bne.n	8001fe8 <stdin_irq_dma+0xe50>
 8001fe2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fe6:	e01a      	b.n	800201e <stdin_irq_dma+0xe86>
 8001fe8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fec:	e017      	b.n	800201e <stdin_irq_dma+0xe86>
 8001fee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ff2:	e014      	b.n	800201e <stdin_irq_dma+0xe86>
 8001ff4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ff8:	e011      	b.n	800201e <stdin_irq_dma+0xe86>
 8001ffa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ffe:	e00e      	b.n	800201e <stdin_irq_dma+0xe86>
 8002000:	2340      	movs	r3, #64	; 0x40
 8002002:	e00c      	b.n	800201e <stdin_irq_dma+0xe86>
 8002004:	2340      	movs	r3, #64	; 0x40
 8002006:	e00a      	b.n	800201e <stdin_irq_dma+0xe86>
 8002008:	2340      	movs	r3, #64	; 0x40
 800200a:	e008      	b.n	800201e <stdin_irq_dma+0xe86>
 800200c:	2340      	movs	r3, #64	; 0x40
 800200e:	e006      	b.n	800201e <stdin_irq_dma+0xe86>
 8002010:	2301      	movs	r3, #1
 8002012:	e004      	b.n	800201e <stdin_irq_dma+0xe86>
 8002014:	2301      	movs	r3, #1
 8002016:	e002      	b.n	800201e <stdin_irq_dma+0xe86>
 8002018:	2301      	movs	r3, #1
 800201a:	e000      	b.n	800201e <stdin_irq_dma+0xe86>
 800201c:	2301      	movs	r3, #1
 800201e:	4a4e      	ldr	r2, [pc, #312]	; (8002158 <stdin_irq_dma+0xfc0>)
 8002020:	60d3      	str	r3, [r2, #12]
 8002022:	e1ac      	b.n	800237e <stdin_irq_dma+0x11e6>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	4b4b      	ldr	r3, [pc, #300]	; (800215c <stdin_irq_dma+0xfc4>)
 8002030:	429a      	cmp	r2, r3
 8002032:	f240 8095 	bls.w	8002160 <stdin_irq_dma+0xfc8>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a3a      	ldr	r2, [pc, #232]	; (8002128 <stdin_irq_dma+0xf90>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d069      	beq.n	8002118 <stdin_irq_dma+0xf80>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a37      	ldr	r2, [pc, #220]	; (800212c <stdin_irq_dma+0xf94>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d060      	beq.n	8002114 <stdin_irq_dma+0xf7c>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a35      	ldr	r2, [pc, #212]	; (8002130 <stdin_irq_dma+0xf98>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d057      	beq.n	8002110 <stdin_irq_dma+0xf78>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a32      	ldr	r2, [pc, #200]	; (8002134 <stdin_irq_dma+0xf9c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d04e      	beq.n	800210c <stdin_irq_dma+0xf74>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a30      	ldr	r2, [pc, #192]	; (8002138 <stdin_irq_dma+0xfa0>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d045      	beq.n	8002108 <stdin_irq_dma+0xf70>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a2d      	ldr	r2, [pc, #180]	; (800213c <stdin_irq_dma+0xfa4>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d03c      	beq.n	8002104 <stdin_irq_dma+0xf6c>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a2b      	ldr	r2, [pc, #172]	; (8002140 <stdin_irq_dma+0xfa8>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d033      	beq.n	8002100 <stdin_irq_dma+0xf68>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a28      	ldr	r2, [pc, #160]	; (8002144 <stdin_irq_dma+0xfac>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d02a      	beq.n	80020fc <stdin_irq_dma+0xf64>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a26      	ldr	r2, [pc, #152]	; (8002148 <stdin_irq_dma+0xfb0>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d020      	beq.n	80020f6 <stdin_irq_dma+0xf5e>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a23      	ldr	r2, [pc, #140]	; (800214c <stdin_irq_dma+0xfb4>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d016      	beq.n	80020f0 <stdin_irq_dma+0xf58>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a21      	ldr	r2, [pc, #132]	; (8002150 <stdin_irq_dma+0xfb8>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d00c      	beq.n	80020ea <stdin_irq_dma+0xf52>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a1e      	ldr	r2, [pc, #120]	; (8002154 <stdin_irq_dma+0xfbc>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d102      	bne.n	80020e4 <stdin_irq_dma+0xf4c>
 80020de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020e2:	e01a      	b.n	800211a <stdin_irq_dma+0xf82>
 80020e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020e8:	e017      	b.n	800211a <stdin_irq_dma+0xf82>
 80020ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020ee:	e014      	b.n	800211a <stdin_irq_dma+0xf82>
 80020f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020f4:	e011      	b.n	800211a <stdin_irq_dma+0xf82>
 80020f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020fa:	e00e      	b.n	800211a <stdin_irq_dma+0xf82>
 80020fc:	2340      	movs	r3, #64	; 0x40
 80020fe:	e00c      	b.n	800211a <stdin_irq_dma+0xf82>
 8002100:	2340      	movs	r3, #64	; 0x40
 8002102:	e00a      	b.n	800211a <stdin_irq_dma+0xf82>
 8002104:	2340      	movs	r3, #64	; 0x40
 8002106:	e008      	b.n	800211a <stdin_irq_dma+0xf82>
 8002108:	2340      	movs	r3, #64	; 0x40
 800210a:	e006      	b.n	800211a <stdin_irq_dma+0xf82>
 800210c:	2301      	movs	r3, #1
 800210e:	e004      	b.n	800211a <stdin_irq_dma+0xf82>
 8002110:	2301      	movs	r3, #1
 8002112:	e002      	b.n	800211a <stdin_irq_dma+0xf82>
 8002114:	2301      	movs	r3, #1
 8002116:	e000      	b.n	800211a <stdin_irq_dma+0xf82>
 8002118:	2301      	movs	r3, #1
 800211a:	4a0f      	ldr	r2, [pc, #60]	; (8002158 <stdin_irq_dma+0xfc0>)
 800211c:	6093      	str	r3, [r2, #8]
 800211e:	e12e      	b.n	800237e <stdin_irq_dma+0x11e6>
 8002120:	40026000 	.word	0x40026000
 8002124:	40026458 	.word	0x40026458
 8002128:	40026010 	.word	0x40026010
 800212c:	40026410 	.word	0x40026410
 8002130:	40026070 	.word	0x40026070
 8002134:	40026470 	.word	0x40026470
 8002138:	40026028 	.word	0x40026028
 800213c:	40026428 	.word	0x40026428
 8002140:	40026088 	.word	0x40026088
 8002144:	40026488 	.word	0x40026488
 8002148:	40026040 	.word	0x40026040
 800214c:	40026440 	.word	0x40026440
 8002150:	400260a0 	.word	0x400260a0
 8002154:	400264a0 	.word	0x400264a0
 8002158:	40026400 	.word	0x40026400
 800215c:	400260b8 	.word	0x400260b8
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	461a      	mov	r2, r3
 800216a:	4b75      	ldr	r3, [pc, #468]	; (8002340 <stdin_irq_dma+0x11a8>)
 800216c:	429a      	cmp	r2, r3
 800216e:	d974      	bls.n	800225a <stdin_irq_dma+0x10c2>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a72      	ldr	r2, [pc, #456]	; (8002344 <stdin_irq_dma+0x11ac>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d069      	beq.n	8002252 <stdin_irq_dma+0x10ba>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a70      	ldr	r2, [pc, #448]	; (8002348 <stdin_irq_dma+0x11b0>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d060      	beq.n	800224e <stdin_irq_dma+0x10b6>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a6d      	ldr	r2, [pc, #436]	; (800234c <stdin_irq_dma+0x11b4>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d057      	beq.n	800224a <stdin_irq_dma+0x10b2>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a6b      	ldr	r2, [pc, #428]	; (8002350 <stdin_irq_dma+0x11b8>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d04e      	beq.n	8002246 <stdin_irq_dma+0x10ae>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a68      	ldr	r2, [pc, #416]	; (8002354 <stdin_irq_dma+0x11bc>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d045      	beq.n	8002242 <stdin_irq_dma+0x10aa>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a66      	ldr	r2, [pc, #408]	; (8002358 <stdin_irq_dma+0x11c0>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d03c      	beq.n	800223e <stdin_irq_dma+0x10a6>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a63      	ldr	r2, [pc, #396]	; (800235c <stdin_irq_dma+0x11c4>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d033      	beq.n	800223a <stdin_irq_dma+0x10a2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a61      	ldr	r2, [pc, #388]	; (8002360 <stdin_irq_dma+0x11c8>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d02a      	beq.n	8002236 <stdin_irq_dma+0x109e>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a5e      	ldr	r2, [pc, #376]	; (8002364 <stdin_irq_dma+0x11cc>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d020      	beq.n	8002230 <stdin_irq_dma+0x1098>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a5c      	ldr	r2, [pc, #368]	; (8002368 <stdin_irq_dma+0x11d0>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d016      	beq.n	800222a <stdin_irq_dma+0x1092>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a59      	ldr	r2, [pc, #356]	; (800236c <stdin_irq_dma+0x11d4>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d00c      	beq.n	8002224 <stdin_irq_dma+0x108c>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a57      	ldr	r2, [pc, #348]	; (8002370 <stdin_irq_dma+0x11d8>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d102      	bne.n	800221e <stdin_irq_dma+0x1086>
 8002218:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800221c:	e01a      	b.n	8002254 <stdin_irq_dma+0x10bc>
 800221e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002222:	e017      	b.n	8002254 <stdin_irq_dma+0x10bc>
 8002224:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002228:	e014      	b.n	8002254 <stdin_irq_dma+0x10bc>
 800222a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800222e:	e011      	b.n	8002254 <stdin_irq_dma+0x10bc>
 8002230:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002234:	e00e      	b.n	8002254 <stdin_irq_dma+0x10bc>
 8002236:	2340      	movs	r3, #64	; 0x40
 8002238:	e00c      	b.n	8002254 <stdin_irq_dma+0x10bc>
 800223a:	2340      	movs	r3, #64	; 0x40
 800223c:	e00a      	b.n	8002254 <stdin_irq_dma+0x10bc>
 800223e:	2340      	movs	r3, #64	; 0x40
 8002240:	e008      	b.n	8002254 <stdin_irq_dma+0x10bc>
 8002242:	2340      	movs	r3, #64	; 0x40
 8002244:	e006      	b.n	8002254 <stdin_irq_dma+0x10bc>
 8002246:	2301      	movs	r3, #1
 8002248:	e004      	b.n	8002254 <stdin_irq_dma+0x10bc>
 800224a:	2301      	movs	r3, #1
 800224c:	e002      	b.n	8002254 <stdin_irq_dma+0x10bc>
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <stdin_irq_dma+0x10bc>
 8002252:	2301      	movs	r3, #1
 8002254:	4a47      	ldr	r2, [pc, #284]	; (8002374 <stdin_irq_dma+0x11dc>)
 8002256:	60d3      	str	r3, [r2, #12]
 8002258:	e091      	b.n	800237e <stdin_irq_dma+0x11e6>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a38      	ldr	r2, [pc, #224]	; (8002344 <stdin_irq_dma+0x11ac>)
 8002264:	4293      	cmp	r3, r2
 8002266:	f000 8087 	beq.w	8002378 <stdin_irq_dma+0x11e0>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a35      	ldr	r2, [pc, #212]	; (8002348 <stdin_irq_dma+0x11b0>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d060      	beq.n	800233a <stdin_irq_dma+0x11a2>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a32      	ldr	r2, [pc, #200]	; (800234c <stdin_irq_dma+0x11b4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d057      	beq.n	8002336 <stdin_irq_dma+0x119e>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a30      	ldr	r2, [pc, #192]	; (8002350 <stdin_irq_dma+0x11b8>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d04e      	beq.n	8002332 <stdin_irq_dma+0x119a>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a2d      	ldr	r2, [pc, #180]	; (8002354 <stdin_irq_dma+0x11bc>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d045      	beq.n	800232e <stdin_irq_dma+0x1196>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a2b      	ldr	r2, [pc, #172]	; (8002358 <stdin_irq_dma+0x11c0>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d03c      	beq.n	800232a <stdin_irq_dma+0x1192>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a28      	ldr	r2, [pc, #160]	; (800235c <stdin_irq_dma+0x11c4>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d033      	beq.n	8002326 <stdin_irq_dma+0x118e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a26      	ldr	r2, [pc, #152]	; (8002360 <stdin_irq_dma+0x11c8>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d02a      	beq.n	8002322 <stdin_irq_dma+0x118a>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a23      	ldr	r2, [pc, #140]	; (8002364 <stdin_irq_dma+0x11cc>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d020      	beq.n	800231c <stdin_irq_dma+0x1184>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a21      	ldr	r2, [pc, #132]	; (8002368 <stdin_irq_dma+0x11d0>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d016      	beq.n	8002316 <stdin_irq_dma+0x117e>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a1e      	ldr	r2, [pc, #120]	; (800236c <stdin_irq_dma+0x11d4>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d00c      	beq.n	8002310 <stdin_irq_dma+0x1178>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a1c      	ldr	r2, [pc, #112]	; (8002370 <stdin_irq_dma+0x11d8>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d102      	bne.n	800230a <stdin_irq_dma+0x1172>
 8002304:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002308:	e037      	b.n	800237a <stdin_irq_dma+0x11e2>
 800230a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800230e:	e034      	b.n	800237a <stdin_irq_dma+0x11e2>
 8002310:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002314:	e031      	b.n	800237a <stdin_irq_dma+0x11e2>
 8002316:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800231a:	e02e      	b.n	800237a <stdin_irq_dma+0x11e2>
 800231c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002320:	e02b      	b.n	800237a <stdin_irq_dma+0x11e2>
 8002322:	2340      	movs	r3, #64	; 0x40
 8002324:	e029      	b.n	800237a <stdin_irq_dma+0x11e2>
 8002326:	2340      	movs	r3, #64	; 0x40
 8002328:	e027      	b.n	800237a <stdin_irq_dma+0x11e2>
 800232a:	2340      	movs	r3, #64	; 0x40
 800232c:	e025      	b.n	800237a <stdin_irq_dma+0x11e2>
 800232e:	2340      	movs	r3, #64	; 0x40
 8002330:	e023      	b.n	800237a <stdin_irq_dma+0x11e2>
 8002332:	2301      	movs	r3, #1
 8002334:	e021      	b.n	800237a <stdin_irq_dma+0x11e2>
 8002336:	2301      	movs	r3, #1
 8002338:	e01f      	b.n	800237a <stdin_irq_dma+0x11e2>
 800233a:	2301      	movs	r3, #1
 800233c:	e01d      	b.n	800237a <stdin_irq_dma+0x11e2>
 800233e:	bf00      	nop
 8002340:	40026058 	.word	0x40026058
 8002344:	40026010 	.word	0x40026010
 8002348:	40026410 	.word	0x40026410
 800234c:	40026070 	.word	0x40026070
 8002350:	40026470 	.word	0x40026470
 8002354:	40026028 	.word	0x40026028
 8002358:	40026428 	.word	0x40026428
 800235c:	40026088 	.word	0x40026088
 8002360:	40026488 	.word	0x40026488
 8002364:	40026040 	.word	0x40026040
 8002368:	40026440 	.word	0x40026440
 800236c:	400260a0 	.word	0x400260a0
 8002370:	400264a0 	.word	0x400264a0
 8002374:	40026000 	.word	0x40026000
 8002378:	2301      	movs	r3, #1
 800237a:	4a82      	ldr	r2, [pc, #520]	; (8002584 <stdin_irq_dma+0x13ec>)
 800237c:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_DME_FLAG_INDEX(HDMA(in)));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	461a      	mov	r2, r3
 8002388:	4b7f      	ldr	r3, [pc, #508]	; (8002588 <stdin_irq_dma+0x13f0>)
 800238a:	429a      	cmp	r2, r3
 800238c:	d978      	bls.n	8002480 <stdin_irq_dma+0x12e8>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a7d      	ldr	r2, [pc, #500]	; (800258c <stdin_irq_dma+0x13f4>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d06d      	beq.n	8002478 <stdin_irq_dma+0x12e0>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a7a      	ldr	r2, [pc, #488]	; (8002590 <stdin_irq_dma+0x13f8>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d064      	beq.n	8002474 <stdin_irq_dma+0x12dc>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a78      	ldr	r2, [pc, #480]	; (8002594 <stdin_irq_dma+0x13fc>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d05b      	beq.n	8002470 <stdin_irq_dma+0x12d8>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a75      	ldr	r2, [pc, #468]	; (8002598 <stdin_irq_dma+0x1400>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d052      	beq.n	800246c <stdin_irq_dma+0x12d4>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a73      	ldr	r2, [pc, #460]	; (800259c <stdin_irq_dma+0x1404>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d048      	beq.n	8002466 <stdin_irq_dma+0x12ce>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a70      	ldr	r2, [pc, #448]	; (80025a0 <stdin_irq_dma+0x1408>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d03e      	beq.n	8002460 <stdin_irq_dma+0x12c8>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a6e      	ldr	r2, [pc, #440]	; (80025a4 <stdin_irq_dma+0x140c>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d034      	beq.n	800245a <stdin_irq_dma+0x12c2>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a6b      	ldr	r2, [pc, #428]	; (80025a8 <stdin_irq_dma+0x1410>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d02a      	beq.n	8002454 <stdin_irq_dma+0x12bc>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a69      	ldr	r2, [pc, #420]	; (80025ac <stdin_irq_dma+0x1414>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d020      	beq.n	800244e <stdin_irq_dma+0x12b6>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a66      	ldr	r2, [pc, #408]	; (80025b0 <stdin_irq_dma+0x1418>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d016      	beq.n	8002448 <stdin_irq_dma+0x12b0>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a64      	ldr	r2, [pc, #400]	; (80025b4 <stdin_irq_dma+0x141c>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d00c      	beq.n	8002442 <stdin_irq_dma+0x12aa>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a61      	ldr	r2, [pc, #388]	; (80025b8 <stdin_irq_dma+0x1420>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d102      	bne.n	800243c <stdin_irq_dma+0x12a4>
 8002436:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800243a:	e01e      	b.n	800247a <stdin_irq_dma+0x12e2>
 800243c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002440:	e01b      	b.n	800247a <stdin_irq_dma+0x12e2>
 8002442:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002446:	e018      	b.n	800247a <stdin_irq_dma+0x12e2>
 8002448:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800244c:	e015      	b.n	800247a <stdin_irq_dma+0x12e2>
 800244e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002452:	e012      	b.n	800247a <stdin_irq_dma+0x12e2>
 8002454:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002458:	e00f      	b.n	800247a <stdin_irq_dma+0x12e2>
 800245a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800245e:	e00c      	b.n	800247a <stdin_irq_dma+0x12e2>
 8002460:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002464:	e009      	b.n	800247a <stdin_irq_dma+0x12e2>
 8002466:	f44f 7380 	mov.w	r3, #256	; 0x100
 800246a:	e006      	b.n	800247a <stdin_irq_dma+0x12e2>
 800246c:	2304      	movs	r3, #4
 800246e:	e004      	b.n	800247a <stdin_irq_dma+0x12e2>
 8002470:	2304      	movs	r3, #4
 8002472:	e002      	b.n	800247a <stdin_irq_dma+0x12e2>
 8002474:	2304      	movs	r3, #4
 8002476:	e000      	b.n	800247a <stdin_irq_dma+0x12e2>
 8002478:	2304      	movs	r3, #4
 800247a:	4a50      	ldr	r2, [pc, #320]	; (80025bc <stdin_irq_dma+0x1424>)
 800247c:	60d3      	str	r3, [r2, #12]
 800247e:	e19a      	b.n	80027b6 <stdin_irq_dma+0x161e>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	461a      	mov	r2, r3
 800248a:	4b4d      	ldr	r3, [pc, #308]	; (80025c0 <stdin_irq_dma+0x1428>)
 800248c:	429a      	cmp	r2, r3
 800248e:	f240 8099 	bls.w	80025c4 <stdin_irq_dma+0x142c>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a3c      	ldr	r2, [pc, #240]	; (800258c <stdin_irq_dma+0x13f4>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d06d      	beq.n	800257c <stdin_irq_dma+0x13e4>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a39      	ldr	r2, [pc, #228]	; (8002590 <stdin_irq_dma+0x13f8>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d064      	beq.n	8002578 <stdin_irq_dma+0x13e0>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a37      	ldr	r2, [pc, #220]	; (8002594 <stdin_irq_dma+0x13fc>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d05b      	beq.n	8002574 <stdin_irq_dma+0x13dc>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a34      	ldr	r2, [pc, #208]	; (8002598 <stdin_irq_dma+0x1400>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d052      	beq.n	8002570 <stdin_irq_dma+0x13d8>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a32      	ldr	r2, [pc, #200]	; (800259c <stdin_irq_dma+0x1404>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d048      	beq.n	800256a <stdin_irq_dma+0x13d2>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a2f      	ldr	r2, [pc, #188]	; (80025a0 <stdin_irq_dma+0x1408>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d03e      	beq.n	8002564 <stdin_irq_dma+0x13cc>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a2d      	ldr	r2, [pc, #180]	; (80025a4 <stdin_irq_dma+0x140c>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d034      	beq.n	800255e <stdin_irq_dma+0x13c6>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a2a      	ldr	r2, [pc, #168]	; (80025a8 <stdin_irq_dma+0x1410>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d02a      	beq.n	8002558 <stdin_irq_dma+0x13c0>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a28      	ldr	r2, [pc, #160]	; (80025ac <stdin_irq_dma+0x1414>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d020      	beq.n	8002552 <stdin_irq_dma+0x13ba>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a25      	ldr	r2, [pc, #148]	; (80025b0 <stdin_irq_dma+0x1418>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d016      	beq.n	800254c <stdin_irq_dma+0x13b4>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a23      	ldr	r2, [pc, #140]	; (80025b4 <stdin_irq_dma+0x141c>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d00c      	beq.n	8002546 <stdin_irq_dma+0x13ae>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a20      	ldr	r2, [pc, #128]	; (80025b8 <stdin_irq_dma+0x1420>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d102      	bne.n	8002540 <stdin_irq_dma+0x13a8>
 800253a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800253e:	e01e      	b.n	800257e <stdin_irq_dma+0x13e6>
 8002540:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002544:	e01b      	b.n	800257e <stdin_irq_dma+0x13e6>
 8002546:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800254a:	e018      	b.n	800257e <stdin_irq_dma+0x13e6>
 800254c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002550:	e015      	b.n	800257e <stdin_irq_dma+0x13e6>
 8002552:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002556:	e012      	b.n	800257e <stdin_irq_dma+0x13e6>
 8002558:	f44f 7380 	mov.w	r3, #256	; 0x100
 800255c:	e00f      	b.n	800257e <stdin_irq_dma+0x13e6>
 800255e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002562:	e00c      	b.n	800257e <stdin_irq_dma+0x13e6>
 8002564:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002568:	e009      	b.n	800257e <stdin_irq_dma+0x13e6>
 800256a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800256e:	e006      	b.n	800257e <stdin_irq_dma+0x13e6>
 8002570:	2304      	movs	r3, #4
 8002572:	e004      	b.n	800257e <stdin_irq_dma+0x13e6>
 8002574:	2304      	movs	r3, #4
 8002576:	e002      	b.n	800257e <stdin_irq_dma+0x13e6>
 8002578:	2304      	movs	r3, #4
 800257a:	e000      	b.n	800257e <stdin_irq_dma+0x13e6>
 800257c:	2304      	movs	r3, #4
 800257e:	4a0f      	ldr	r2, [pc, #60]	; (80025bc <stdin_irq_dma+0x1424>)
 8002580:	6093      	str	r3, [r2, #8]
 8002582:	e118      	b.n	80027b6 <stdin_irq_dma+0x161e>
 8002584:	40026000 	.word	0x40026000
 8002588:	40026458 	.word	0x40026458
 800258c:	40026010 	.word	0x40026010
 8002590:	40026410 	.word	0x40026410
 8002594:	40026070 	.word	0x40026070
 8002598:	40026470 	.word	0x40026470
 800259c:	40026028 	.word	0x40026028
 80025a0:	40026428 	.word	0x40026428
 80025a4:	40026088 	.word	0x40026088
 80025a8:	40026488 	.word	0x40026488
 80025ac:	40026040 	.word	0x40026040
 80025b0:	40026440 	.word	0x40026440
 80025b4:	400260a0 	.word	0x400260a0
 80025b8:	400264a0 	.word	0x400264a0
 80025bc:	40026400 	.word	0x40026400
 80025c0:	400260b8 	.word	0x400260b8
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	461a      	mov	r2, r3
 80025ce:	4b80      	ldr	r3, [pc, #512]	; (80027d0 <stdin_irq_dma+0x1638>)
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d978      	bls.n	80026c6 <stdin_irq_dma+0x152e>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a7d      	ldr	r2, [pc, #500]	; (80027d4 <stdin_irq_dma+0x163c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d06d      	beq.n	80026be <stdin_irq_dma+0x1526>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a7b      	ldr	r2, [pc, #492]	; (80027d8 <stdin_irq_dma+0x1640>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d064      	beq.n	80026ba <stdin_irq_dma+0x1522>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a78      	ldr	r2, [pc, #480]	; (80027dc <stdin_irq_dma+0x1644>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d05b      	beq.n	80026b6 <stdin_irq_dma+0x151e>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a76      	ldr	r2, [pc, #472]	; (80027e0 <stdin_irq_dma+0x1648>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d052      	beq.n	80026b2 <stdin_irq_dma+0x151a>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a73      	ldr	r2, [pc, #460]	; (80027e4 <stdin_irq_dma+0x164c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d048      	beq.n	80026ac <stdin_irq_dma+0x1514>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a71      	ldr	r2, [pc, #452]	; (80027e8 <stdin_irq_dma+0x1650>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d03e      	beq.n	80026a6 <stdin_irq_dma+0x150e>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a6e      	ldr	r2, [pc, #440]	; (80027ec <stdin_irq_dma+0x1654>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d034      	beq.n	80026a0 <stdin_irq_dma+0x1508>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a6c      	ldr	r2, [pc, #432]	; (80027f0 <stdin_irq_dma+0x1658>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d02a      	beq.n	800269a <stdin_irq_dma+0x1502>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a69      	ldr	r2, [pc, #420]	; (80027f4 <stdin_irq_dma+0x165c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d020      	beq.n	8002694 <stdin_irq_dma+0x14fc>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a67      	ldr	r2, [pc, #412]	; (80027f8 <stdin_irq_dma+0x1660>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d016      	beq.n	800268e <stdin_irq_dma+0x14f6>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a64      	ldr	r2, [pc, #400]	; (80027fc <stdin_irq_dma+0x1664>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d00c      	beq.n	8002688 <stdin_irq_dma+0x14f0>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a62      	ldr	r2, [pc, #392]	; (8002800 <stdin_irq_dma+0x1668>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d102      	bne.n	8002682 <stdin_irq_dma+0x14ea>
 800267c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002680:	e01e      	b.n	80026c0 <stdin_irq_dma+0x1528>
 8002682:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002686:	e01b      	b.n	80026c0 <stdin_irq_dma+0x1528>
 8002688:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800268c:	e018      	b.n	80026c0 <stdin_irq_dma+0x1528>
 800268e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002692:	e015      	b.n	80026c0 <stdin_irq_dma+0x1528>
 8002694:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002698:	e012      	b.n	80026c0 <stdin_irq_dma+0x1528>
 800269a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800269e:	e00f      	b.n	80026c0 <stdin_irq_dma+0x1528>
 80026a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026a4:	e00c      	b.n	80026c0 <stdin_irq_dma+0x1528>
 80026a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026aa:	e009      	b.n	80026c0 <stdin_irq_dma+0x1528>
 80026ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026b0:	e006      	b.n	80026c0 <stdin_irq_dma+0x1528>
 80026b2:	2304      	movs	r3, #4
 80026b4:	e004      	b.n	80026c0 <stdin_irq_dma+0x1528>
 80026b6:	2304      	movs	r3, #4
 80026b8:	e002      	b.n	80026c0 <stdin_irq_dma+0x1528>
 80026ba:	2304      	movs	r3, #4
 80026bc:	e000      	b.n	80026c0 <stdin_irq_dma+0x1528>
 80026be:	2304      	movs	r3, #4
 80026c0:	4a50      	ldr	r2, [pc, #320]	; (8002804 <stdin_irq_dma+0x166c>)
 80026c2:	60d3      	str	r3, [r2, #12]
 80026c4:	e077      	b.n	80027b6 <stdin_irq_dma+0x161e>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a41      	ldr	r2, [pc, #260]	; (80027d4 <stdin_irq_dma+0x163c>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d06d      	beq.n	80027b0 <stdin_irq_dma+0x1618>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a3e      	ldr	r2, [pc, #248]	; (80027d8 <stdin_irq_dma+0x1640>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d064      	beq.n	80027ac <stdin_irq_dma+0x1614>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a3c      	ldr	r2, [pc, #240]	; (80027dc <stdin_irq_dma+0x1644>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d05b      	beq.n	80027a8 <stdin_irq_dma+0x1610>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a39      	ldr	r2, [pc, #228]	; (80027e0 <stdin_irq_dma+0x1648>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d052      	beq.n	80027a4 <stdin_irq_dma+0x160c>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a37      	ldr	r2, [pc, #220]	; (80027e4 <stdin_irq_dma+0x164c>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d048      	beq.n	800279e <stdin_irq_dma+0x1606>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a34      	ldr	r2, [pc, #208]	; (80027e8 <stdin_irq_dma+0x1650>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d03e      	beq.n	8002798 <stdin_irq_dma+0x1600>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a32      	ldr	r2, [pc, #200]	; (80027ec <stdin_irq_dma+0x1654>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d034      	beq.n	8002792 <stdin_irq_dma+0x15fa>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a2f      	ldr	r2, [pc, #188]	; (80027f0 <stdin_irq_dma+0x1658>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d02a      	beq.n	800278c <stdin_irq_dma+0x15f4>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a2d      	ldr	r2, [pc, #180]	; (80027f4 <stdin_irq_dma+0x165c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d020      	beq.n	8002786 <stdin_irq_dma+0x15ee>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a2a      	ldr	r2, [pc, #168]	; (80027f8 <stdin_irq_dma+0x1660>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d016      	beq.n	8002780 <stdin_irq_dma+0x15e8>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a28      	ldr	r2, [pc, #160]	; (80027fc <stdin_irq_dma+0x1664>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d00c      	beq.n	800277a <stdin_irq_dma+0x15e2>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a25      	ldr	r2, [pc, #148]	; (8002800 <stdin_irq_dma+0x1668>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d102      	bne.n	8002774 <stdin_irq_dma+0x15dc>
 800276e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002772:	e01e      	b.n	80027b2 <stdin_irq_dma+0x161a>
 8002774:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002778:	e01b      	b.n	80027b2 <stdin_irq_dma+0x161a>
 800277a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800277e:	e018      	b.n	80027b2 <stdin_irq_dma+0x161a>
 8002780:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002784:	e015      	b.n	80027b2 <stdin_irq_dma+0x161a>
 8002786:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800278a:	e012      	b.n	80027b2 <stdin_irq_dma+0x161a>
 800278c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002790:	e00f      	b.n	80027b2 <stdin_irq_dma+0x161a>
 8002792:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002796:	e00c      	b.n	80027b2 <stdin_irq_dma+0x161a>
 8002798:	f44f 7380 	mov.w	r3, #256	; 0x100
 800279c:	e009      	b.n	80027b2 <stdin_irq_dma+0x161a>
 800279e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027a2:	e006      	b.n	80027b2 <stdin_irq_dma+0x161a>
 80027a4:	2304      	movs	r3, #4
 80027a6:	e004      	b.n	80027b2 <stdin_irq_dma+0x161a>
 80027a8:	2304      	movs	r3, #4
 80027aa:	e002      	b.n	80027b2 <stdin_irq_dma+0x161a>
 80027ac:	2304      	movs	r3, #4
 80027ae:	e000      	b.n	80027b2 <stdin_irq_dma+0x161a>
 80027b0:	2304      	movs	r3, #4
 80027b2:	4a14      	ldr	r2, [pc, #80]	; (8002804 <stdin_irq_dma+0x166c>)
 80027b4:	6093      	str	r3, [r2, #8]
    HAL_UART_Receive_DMA(in->huart, in->buffer, in->size);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6818      	ldr	r0, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6899      	ldr	r1, [r3, #8]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	899b      	ldrh	r3, [r3, #12]
 80027c2:	461a      	mov	r2, r3
 80027c4:	f003 fbc3 	bl	8005f4e <HAL_UART_Receive_DMA>
}
 80027c8:	bf00      	nop
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40026058 	.word	0x40026058
 80027d4:	40026010 	.word	0x40026010
 80027d8:	40026410 	.word	0x40026410
 80027dc:	40026070 	.word	0x40026070
 80027e0:	40026470 	.word	0x40026470
 80027e4:	40026028 	.word	0x40026028
 80027e8:	40026428 	.word	0x40026428
 80027ec:	40026088 	.word	0x40026088
 80027f0:	40026488 	.word	0x40026488
 80027f4:	40026040 	.word	0x40026040
 80027f8:	40026440 	.word	0x40026440
 80027fc:	400260a0 	.word	0x400260a0
 8002800:	400264a0 	.word	0x400264a0
 8002804:	40026000 	.word	0x40026000

08002808 <stdin_irq_uart>:

void stdin_irq_uart(stdin_t *in)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  if (__HAL_UART_GET_FLAG(in->huart, UART_FLAG_IDLE))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0310 	and.w	r3, r3, #16
 800281c:	2b10      	cmp	r3, #16
 800281e:	d10f      	bne.n	8002840 <stdin_irq_uart+0x38>
  {
    __HAL_UART_CLEAR_IDLEFLAG(in->huart);
 8002820:	2300      	movs	r3, #0
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
    check_buffer(in);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f804 	bl	8002848 <check_buffer>
  }
}
 8002840:	bf00      	nop
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <check_buffer>:

/* Private function implementations
 * --------------------------------------------*/
static void check_buffer(stdin_t *in)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint16_t pos;
  uint16_t new;

  /* Calculate current position in buffer */
  new = __HAL_DMA_GET_COUNTER(HDMA(in));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	81fb      	strh	r3, [r7, #14]
  pos = in->size - new;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	899a      	ldrh	r2, [r3, #12]
 8002860:	89fb      	ldrh	r3, [r7, #14]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	81bb      	strh	r3, [r7, #12]

  /* Check change in received data */
  if (pos != in->pos)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	89db      	ldrh	r3, [r3, #14]
 800286a:	89ba      	ldrh	r2, [r7, #12]
 800286c:	429a      	cmp	r2, r3
 800286e:	d025      	beq.n	80028bc <check_buffer+0x74>
  {
    if (pos > in->pos)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	89db      	ldrh	r3, [r3, #14]
 8002874:	89ba      	ldrh	r2, [r7, #12]
 8002876:	429a      	cmp	r2, r3
 8002878:	d90b      	bls.n	8002892 <check_buffer+0x4a>
      /* Current position is over previous one */
      /* We are in "linear" mode */
      /* Process data directly by subtracting "pointers" */
      fill_buffer(in, in->pos, pos - in->pos);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	89d9      	ldrh	r1, [r3, #14]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	89db      	ldrh	r3, [r3, #14]
 8002882:	89ba      	ldrh	r2, [r7, #12]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	b29b      	uxth	r3, r3
 8002888:	461a      	mov	r2, r3
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f824 	bl	80028d8 <fill_buffer>
 8002890:	e014      	b.n	80028bc <check_buffer+0x74>
    else
    {
      /* We are in "overflow" mode */
      /* First process data to the end of buffer */
      fill_buffer(in, in->pos, in->size - in->pos);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	89d9      	ldrh	r1, [r3, #14]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	899a      	ldrh	r2, [r3, #12]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	89db      	ldrh	r3, [r3, #14]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	461a      	mov	r2, r3
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f817 	bl	80028d8 <fill_buffer>
      /* Check and continue with beginning of buffer */
      if (pos > 0)
 80028aa:	89bb      	ldrh	r3, [r7, #12]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d005      	beq.n	80028bc <check_buffer+0x74>
        fill_buffer(in, 0, pos);
 80028b0:	89bb      	ldrh	r3, [r7, #12]
 80028b2:	461a      	mov	r2, r3
 80028b4:	2100      	movs	r1, #0
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f80e 	bl	80028d8 <fill_buffer>
    }
  }

  /* Check and manually update if we reached end of buffer */
  in->pos = (pos == in->size) ? 0 : pos;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	899b      	ldrh	r3, [r3, #12]
 80028c0:	89ba      	ldrh	r2, [r7, #12]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d001      	beq.n	80028ca <check_buffer+0x82>
 80028c6:	89ba      	ldrh	r2, [r7, #12]
 80028c8:	e000      	b.n	80028cc <check_buffer+0x84>
 80028ca:	2200      	movs	r2, #0
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	81da      	strh	r2, [r3, #14]
}
 80028d0:	bf00      	nop
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <fill_buffer>:

static void fill_buffer(stdin_t *in, uint16_t pos, uint16_t size)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	807b      	strh	r3, [r7, #2]
 80028e4:	4613      	mov	r3, r2
 80028e6:	803b      	strh	r3, [r7, #0]
  if (NULL == in->callback)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d009      	beq.n	8002904 <fill_buffer+0x2c>
    return;

  in->callback(&in->buffer[pos], size);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6891      	ldr	r1, [r2, #8]
 80028f8:	887a      	ldrh	r2, [r7, #2]
 80028fa:	440a      	add	r2, r1
 80028fc:	8839      	ldrh	r1, [r7, #0]
 80028fe:	4610      	mov	r0, r2
 8002900:	4798      	blx	r3
 8002902:	e000      	b.n	8002906 <fill_buffer+0x2e>
    return;
 8002904:	bf00      	nop
}
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <HAL_MspInit>:
#include "main.h"

extern DMA_HandleTypeDef hdma_usart2_rx;

void HAL_MspInit(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	607b      	str	r3, [r7, #4]
 8002916:	4b10      	ldr	r3, [pc, #64]	; (8002958 <HAL_MspInit+0x4c>)
 8002918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291a:	4a0f      	ldr	r2, [pc, #60]	; (8002958 <HAL_MspInit+0x4c>)
 800291c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002920:	6453      	str	r3, [r2, #68]	; 0x44
 8002922:	4b0d      	ldr	r3, [pc, #52]	; (8002958 <HAL_MspInit+0x4c>)
 8002924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800292a:	607b      	str	r3, [r7, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	603b      	str	r3, [r7, #0]
 8002932:	4b09      	ldr	r3, [pc, #36]	; (8002958 <HAL_MspInit+0x4c>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	4a08      	ldr	r2, [pc, #32]	; (8002958 <HAL_MspInit+0x4c>)
 8002938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800293c:	6413      	str	r3, [r2, #64]	; 0x40
 800293e:	4b06      	ldr	r3, [pc, #24]	; (8002958 <HAL_MspInit+0x4c>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	683b      	ldr	r3, [r7, #0]

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800294a:	2007      	movs	r0, #7
 800294c:	f000 fc66 	bl	800321c <HAL_NVIC_SetPriorityGrouping>
}
 8002950:	bf00      	nop
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40023800 	.word	0x40023800

0800295c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08a      	sub	sp, #40	; 0x28
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002964:	f107 0314 	add.w	r3, r7, #20
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]
 8002972:	611a      	str	r2, [r3, #16]
	if(hspi->Instance==SPI2)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a34      	ldr	r2, [pc, #208]	; (8002a4c <HAL_SPI_MspInit+0xf0>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d162      	bne.n	8002a44 <HAL_SPI_MspInit+0xe8>
	{
		/* Peripheral clock enable */
		__HAL_RCC_SPI2_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	613b      	str	r3, [r7, #16]
 8002982:	4b33      	ldr	r3, [pc, #204]	; (8002a50 <HAL_SPI_MspInit+0xf4>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	4a32      	ldr	r2, [pc, #200]	; (8002a50 <HAL_SPI_MspInit+0xf4>)
 8002988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800298c:	6413      	str	r3, [r2, #64]	; 0x40
 800298e:	4b30      	ldr	r3, [pc, #192]	; (8002a50 <HAL_SPI_MspInit+0xf4>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOC_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	4b2c      	ldr	r3, [pc, #176]	; (8002a50 <HAL_SPI_MspInit+0xf4>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	4a2b      	ldr	r2, [pc, #172]	; (8002a50 <HAL_SPI_MspInit+0xf4>)
 80029a4:	f043 0304 	orr.w	r3, r3, #4
 80029a8:	6313      	str	r3, [r2, #48]	; 0x30
 80029aa:	4b29      	ldr	r3, [pc, #164]	; (8002a50 <HAL_SPI_MspInit+0xf4>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	4b25      	ldr	r3, [pc, #148]	; (8002a50 <HAL_SPI_MspInit+0xf4>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	4a24      	ldr	r2, [pc, #144]	; (8002a50 <HAL_SPI_MspInit+0xf4>)
 80029c0:	f043 0302 	orr.w	r3, r3, #2
 80029c4:	6313      	str	r3, [r2, #48]	; 0x30
 80029c6:	4b22      	ldr	r3, [pc, #136]	; (8002a50 <HAL_SPI_MspInit+0xf4>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	68bb      	ldr	r3, [r7, #8]

		GPIO_InitStruct.Pin 		= SPI2_MOSI_PIN;
 80029d2:	2302      	movs	r3, #2
 80029d4:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 80029d6:	2302      	movs	r3, #2
 80029d8:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull 		= GPIO_PULLDOWN;
 80029da:	2302      	movs	r3, #2
 80029dc:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 80029de:	2303      	movs	r3, #3
 80029e0:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate 	= SPI2_MOSI_AF;
 80029e2:	2307      	movs	r3, #7
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(SPI2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80029e6:	f107 0314 	add.w	r3, r7, #20
 80029ea:	4619      	mov	r1, r3
 80029ec:	4819      	ldr	r0, [pc, #100]	; (8002a54 <HAL_SPI_MspInit+0xf8>)
 80029ee:	f001 f859 	bl	8003aa4 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin 		= SPI2_MISO_PIN; //GPIO_PIN_2;
 80029f2:	2304      	movs	r3, #4
 80029f4:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 80029f6:	2302      	movs	r3, #2
 80029f8:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull 		= GPIO_PULLDOWN;
 80029fa:	2302      	movs	r3, #2
 80029fc:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 80029fe:	2303      	movs	r3, #3
 8002a00:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate 	= SPI2_MISO_AF;
 8002a02:	2305      	movs	r3, #5
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(SPI2_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002a06:	f107 0314 	add.w	r3, r7, #20
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4811      	ldr	r0, [pc, #68]	; (8002a54 <HAL_SPI_MspInit+0xf8>)
 8002a0e:	f001 f849 	bl	8003aa4 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin 		= SPI2_SCK_PIN;
 8002a12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a16:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull 		= GPIO_PULLDOWN;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 8002a20:	2303      	movs	r3, #3
 8002a22:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate 	= SPI2_SCK_AF;
 8002a24:	2305      	movs	r3, #5
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(SPI2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002a28:	f107 0314 	add.w	r3, r7, #20
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	480a      	ldr	r0, [pc, #40]	; (8002a58 <HAL_SPI_MspInit+0xfc>)
 8002a30:	f001 f838 	bl	8003aa4 <HAL_GPIO_Init>

		/* SPI2 interrupt Init */
		HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 8002a34:	2200      	movs	r2, #0
 8002a36:	2102      	movs	r1, #2
 8002a38:	2024      	movs	r0, #36	; 0x24
 8002a3a:	f000 fbfa 	bl	8003232 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002a3e:	2024      	movs	r0, #36	; 0x24
 8002a40:	f000 fc13 	bl	800326a <HAL_NVIC_EnableIRQ>
	}
}
 8002a44:	bf00      	nop
 8002a46:	3728      	adds	r7, #40	; 0x28
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40003800 	.word	0x40003800
 8002a50:	40023800 	.word	0x40023800
 8002a54:	40020800 	.word	0x40020800
 8002a58:	40020400 	.word	0x40020400

08002a5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08a      	sub	sp, #40	; 0x28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a64:	f107 0314 	add.w	r3, r7, #20
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	605a      	str	r2, [r3, #4]
 8002a6e:	609a      	str	r2, [r3, #8]
 8002a70:	60da      	str	r2, [r3, #12]
 8002a72:	611a      	str	r2, [r3, #16]
	if(huart->Instance==USART2)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a34      	ldr	r2, [pc, #208]	; (8002b4c <HAL_UART_MspInit+0xf0>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d162      	bne.n	8002b44 <HAL_UART_MspInit+0xe8>
	{
		/* Peripheral clock enable */
		__HAL_RCC_USART2_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	613b      	str	r3, [r7, #16]
 8002a82:	4b33      	ldr	r3, [pc, #204]	; (8002b50 <HAL_UART_MspInit+0xf4>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	4a32      	ldr	r2, [pc, #200]	; (8002b50 <HAL_UART_MspInit+0xf4>)
 8002a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a8e:	4b30      	ldr	r3, [pc, #192]	; (8002b50 <HAL_UART_MspInit+0xf4>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a96:	613b      	str	r3, [r7, #16]
 8002a98:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	4b2c      	ldr	r3, [pc, #176]	; (8002b50 <HAL_UART_MspInit+0xf4>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	4a2b      	ldr	r2, [pc, #172]	; (8002b50 <HAL_UART_MspInit+0xf4>)
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aaa:	4b29      	ldr	r3, [pc, #164]	; (8002b50 <HAL_UART_MspInit+0xf4>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
		/**USART2 GPIO Configuration
    	PA2     ------> USART2_TX
    	PA3     ------> USART2_RX
		 */
		GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002ab6:	230c      	movs	r3, #12
 8002ab8:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aba:	2302      	movs	r3, #2
 8002abc:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ac6:	2307      	movs	r3, #7
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aca:	f107 0314 	add.w	r3, r7, #20
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4820      	ldr	r0, [pc, #128]	; (8002b54 <HAL_UART_MspInit+0xf8>)
 8002ad2:	f000 ffe7 	bl	8003aa4 <HAL_GPIO_Init>

	    /* USART2 DMA Init */
	    /* USART2_RX Init */
	    hdma_usart2_rx.Instance 				= DMA1_Stream5;
 8002ad6:	4b20      	ldr	r3, [pc, #128]	; (8002b58 <HAL_UART_MspInit+0xfc>)
 8002ad8:	4a20      	ldr	r2, [pc, #128]	; (8002b5c <HAL_UART_MspInit+0x100>)
 8002ada:	601a      	str	r2, [r3, #0]
	    hdma_usart2_rx.Init.Channel 			= DMA_CHANNEL_4;
 8002adc:	4b1e      	ldr	r3, [pc, #120]	; (8002b58 <HAL_UART_MspInit+0xfc>)
 8002ade:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ae2:	605a      	str	r2, [r3, #4]
	    hdma_usart2_rx.Init.Direction 			= DMA_PERIPH_TO_MEMORY;
 8002ae4:	4b1c      	ldr	r3, [pc, #112]	; (8002b58 <HAL_UART_MspInit+0xfc>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	609a      	str	r2, [r3, #8]
	    hdma_usart2_rx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8002aea:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <HAL_UART_MspInit+0xfc>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	60da      	str	r2, [r3, #12]
	    hdma_usart2_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8002af0:	4b19      	ldr	r3, [pc, #100]	; (8002b58 <HAL_UART_MspInit+0xfc>)
 8002af2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002af6:	611a      	str	r2, [r3, #16]
	    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002af8:	4b17      	ldr	r3, [pc, #92]	; (8002b58 <HAL_UART_MspInit+0xfc>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	615a      	str	r2, [r3, #20]
	    hdma_usart2_rx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8002afe:	4b16      	ldr	r3, [pc, #88]	; (8002b58 <HAL_UART_MspInit+0xfc>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	619a      	str	r2, [r3, #24]
	    hdma_usart2_rx.Init.Mode 				= DMA_CIRCULAR;
 8002b04:	4b14      	ldr	r3, [pc, #80]	; (8002b58 <HAL_UART_MspInit+0xfc>)
 8002b06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b0a:	61da      	str	r2, [r3, #28]
	    hdma_usart2_rx.Init.Priority 			= DMA_PRIORITY_LOW;
 8002b0c:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <HAL_UART_MspInit+0xfc>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	621a      	str	r2, [r3, #32]
	    hdma_usart2_rx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 8002b12:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <HAL_UART_MspInit+0xfc>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002b18:	480f      	ldr	r0, [pc, #60]	; (8002b58 <HAL_UART_MspInit+0xfc>)
 8002b1a:	f000 fbc1 	bl	80032a0 <HAL_DMA_Init>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <HAL_UART_MspInit+0xcc>
	    {
	      Error_Handler();
 8002b24:	f7fe fa48 	bl	8000fb8 <Error_Handler>
	    }

	    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a0b      	ldr	r2, [pc, #44]	; (8002b58 <HAL_UART_MspInit+0xfc>)
 8002b2c:	639a      	str	r2, [r3, #56]	; 0x38
 8002b2e:	4a0a      	ldr	r2, [pc, #40]	; (8002b58 <HAL_UART_MspInit+0xfc>)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6393      	str	r3, [r2, #56]	; 0x38

	    /* USART2 interrupt Init */
	    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002b34:	2200      	movs	r2, #0
 8002b36:	2105      	movs	r1, #5
 8002b38:	2026      	movs	r0, #38	; 0x26
 8002b3a:	f000 fb7a 	bl	8003232 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b3e:	2026      	movs	r0, #38	; 0x26
 8002b40:	f000 fb93 	bl	800326a <HAL_NVIC_EnableIRQ>
	}

}
 8002b44:	bf00      	nop
 8002b46:	3728      	adds	r7, #40	; 0x28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40004400 	.word	0x40004400
 8002b50:	40023800 	.word	0x40023800
 8002b54:	40020000 	.word	0x40020000
 8002b58:	20000154 	.word	0x20000154
 8002b5c:	40026088 	.word	0x40026088

08002b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
	while (1)
 8002b64:	e7fe      	b.n	8002b64 <NMI_Handler+0x4>

08002b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b66:	b480      	push	{r7}
 8002b68:	af00      	add	r7, sp, #0
	while (1)
 8002b6a:	e7fe      	b.n	8002b6a <HardFault_Handler+0x4>

08002b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
	while (1)
 8002b70:	e7fe      	b.n	8002b70 <MemManage_Handler+0x4>

08002b72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b72:	b480      	push	{r7}
 8002b74:	af00      	add	r7, sp, #0
	while (1)
 8002b76:	e7fe      	b.n	8002b76 <BusFault_Handler+0x4>

08002b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
	while (1)
 8002b7c:	e7fe      	b.n	8002b7c <UsageFault_Handler+0x4>

08002b7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	af00      	add	r7, sp, #0
}
 8002b82:	bf00      	nop
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
}
 8002b90:	bf00      	nop
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	af00      	add	r7, sp, #0
}
 8002b9e:	bf00      	nop
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8002bac:	f000 fa22 	bl	8002ff4 <HAL_IncTick>
}
 8002bb0:	bf00      	nop
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi2);
 8002bb8:	4802      	ldr	r0, [pc, #8]	; (8002bc4 <SPI2_IRQHandler+0x10>)
 8002bba:	f002 fc33 	bl	8005424 <HAL_SPI_IRQHandler>
}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	200000fc 	.word	0x200000fc

08002bc8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002bcc:	4803      	ldr	r0, [pc, #12]	; (8002bdc <DMA1_Stream5_IRQHandler+0x14>)
 8002bce:	f000 fcff 	bl	80035d0 <HAL_DMA_IRQHandler>
  serial_handlerDMA();
 8002bd2:	f7fe fa29 	bl	8001028 <serial_handlerDMA>
}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20000154 	.word	0x20000154

08002be0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 8002be4:	4803      	ldr	r0, [pc, #12]	; (8002bf4 <USART2_IRQHandler+0x14>)
 8002be6:	f003 fa47 	bl	8006078 <HAL_UART_IRQHandler>
	serial_handlerUART();
 8002bea:	f7fe fa13 	bl	8001014 <serial_handlerUART>
}
 8002bee:	bf00      	nop
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	200001b4 	.word	0x200001b4

08002bf8 <EXTI15_10_IRQHandler>:
  * @brief  This function handles external lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  *****************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 8002bfc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002c00:	f001 f918 	bl	8003e34 <HAL_GPIO_EXTI_IRQHandler>
}
 8002c04:	bf00      	nop
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]
 8002c18:	e00a      	b.n	8002c30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c1a:	f3af 8000 	nop.w
 8002c1e:	4601      	mov	r1, r0
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	60ba      	str	r2, [r7, #8]
 8002c26:	b2ca      	uxtb	r2, r1
 8002c28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	dbf0      	blt.n	8002c1a <_read+0x12>
  }

  return len;
 8002c38:	687b      	ldr	r3, [r7, #4]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b086      	sub	sp, #24
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	60f8      	str	r0, [r7, #12]
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	e009      	b.n	8002c68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	1c5a      	adds	r2, r3, #1
 8002c58:	60ba      	str	r2, [r7, #8]
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fd fca9 	bl	80005b4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	3301      	adds	r3, #1
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	dbf1      	blt.n	8002c54 <_write+0x12>
  }
  return len;
 8002c70:	687b      	ldr	r3, [r7, #4]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3718      	adds	r7, #24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <_close>:

int _close(int file)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
 8002c9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ca2:	605a      	str	r2, [r3, #4]
  return 0;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <_isatty>:

int _isatty(int file)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cba:	2301      	movs	r3, #1
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
	...

08002ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cec:	4a14      	ldr	r2, [pc, #80]	; (8002d40 <_sbrk+0x5c>)
 8002cee:	4b15      	ldr	r3, [pc, #84]	; (8002d44 <_sbrk+0x60>)
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cf8:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <_sbrk+0x64>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d102      	bne.n	8002d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d00:	4b11      	ldr	r3, [pc, #68]	; (8002d48 <_sbrk+0x64>)
 8002d02:	4a12      	ldr	r2, [pc, #72]	; (8002d4c <_sbrk+0x68>)
 8002d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d06:	4b10      	ldr	r3, [pc, #64]	; (8002d48 <_sbrk+0x64>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d207      	bcs.n	8002d24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d14:	f004 faa0 	bl	8007258 <__errno>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	220c      	movs	r2, #12
 8002d1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d22:	e009      	b.n	8002d38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d24:	4b08      	ldr	r3, [pc, #32]	; (8002d48 <_sbrk+0x64>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d2a:	4b07      	ldr	r3, [pc, #28]	; (8002d48 <_sbrk+0x64>)
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4413      	add	r3, r2
 8002d32:	4a05      	ldr	r2, [pc, #20]	; (8002d48 <_sbrk+0x64>)
 8002d34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d36:	68fb      	ldr	r3, [r7, #12]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	20020000 	.word	0x20020000
 8002d44:	00000400 	.word	0x00000400
 8002d48:	20000620 	.word	0x20000620
 8002d4c:	20000638 	.word	0x20000638

08002d50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d54:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <SystemInit+0x20>)
 8002d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5a:	4a05      	ldr	r2, [pc, #20]	; (8002d70 <SystemInit+0x20>)
 8002d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d64:	bf00      	nop
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	e000ed00 	.word	0xe000ed00

08002d74 <vShell_cmdParse>:

/* Public functions definitions */
/********************************************************
 * 	Parsing incoming message						   	*
 ********************************************************/
void vShell_cmdParse(char *input) {
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
	for(uint8_t u8_idx = 0; u8_idx < CFG_HEADER_NUM; u8_idx++) {
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	75fb      	strb	r3, [r7, #23]
 8002d80:	e0aa      	b.n	8002ed8 <vShell_cmdParse+0x164>
		if(!memcmp(input,(char*)&str_cfg_header[u8_idx][0], CFG_HEADER_LEN)) {
 8002d82:	7dfa      	ldrb	r2, [r7, #23]
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	4a58      	ldr	r2, [pc, #352]	; (8002eec <vShell_cmdParse+0x178>)
 8002d8c:	4413      	add	r3, r2
 8002d8e:	2205      	movs	r2, #5
 8002d90:	4619      	mov	r1, r3
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f004 fa8a 	bl	80072ac <memcmp>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f040 8099 	bne.w	8002ed2 <vShell_cmdParse+0x15e>
			bitFlag |= BFLAG_SPIM_WR;
 8002da0:	4b53      	ldr	r3, [pc, #332]	; (8002ef0 <vShell_cmdParse+0x17c>)
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	f043 0304 	orr.w	r3, r3, #4
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	4b51      	ldr	r3, [pc, #324]	; (8002ef0 <vShell_cmdParse+0x17c>)
 8002dac:	801a      	strh	r2, [r3, #0]

			if (u8_idx==1) {
 8002dae:	7dfb      	ldrb	r3, [r7, #23]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	f000 8086 	beq.w	8002ec2 <vShell_cmdParse+0x14e>

			}

			else if (u8_idx>=2 && u8_idx<=4) {					//{WB1: {WB2: WB3:
 8002db6:	7dfb      	ldrb	r3, [r7, #23]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d96c      	bls.n	8002e96 <vShell_cmdParse+0x122>
 8002dbc:	7dfb      	ldrb	r3, [r7, #23]
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d869      	bhi.n	8002e96 <vShell_cmdParse+0x122>
				uint32_t num = 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	613b      	str	r3, [r7, #16]
				uint8_t start = 5;
 8002dc6:	2305      	movs	r3, #5
 8002dc8:	73fb      	strb	r3, [r7, #15]

				for (uint8_t j = 0; j<CFG_LENGTH; j++)
 8002dca:	2300      	movs	r3, #0
 8002dcc:	73bb      	strb	r3, [r7, #14]
 8002dce:	e04a      	b.n	8002e66 <vShell_cmdParse+0xf2>
				{
					if(input[start+3]<128)
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
 8002dd2:	3303      	adds	r3, #3
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	b25b      	sxtb	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	db1b      	blt.n	8002e18 <vShell_cmdParse+0xa4>
					{
						num = input[start]+(input[start+1]*256)+(input[start+2]*65536)+(input[start+3]*16777216);
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	4413      	add	r3, r2
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	4619      	mov	r1, r3
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
 8002dec:	3301      	adds	r3, #1
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	4413      	add	r3, r2
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	021b      	lsls	r3, r3, #8
 8002df6:	18ca      	adds	r2, r1, r3
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
 8002dfa:	3302      	adds	r3, #2
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	440b      	add	r3, r1
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	041b      	lsls	r3, r3, #16
 8002e04:	441a      	add	r2, r3
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
 8002e08:	3303      	adds	r3, #3
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	440b      	add	r3, r1
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	061b      	lsls	r3, r3, #24
 8002e12:	4413      	add	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
 8002e16:	e01a      	b.n	8002e4e <vShell_cmdParse+0xda>
					}
					else
					{
						num = (input[start]+(input[start+1]*256)+(input[start+2]*65536)+(input[start+3]*16777216))-4294967296;
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	4619      	mov	r1, r3
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
 8002e24:	3301      	adds	r3, #1
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	4413      	add	r3, r2
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	021b      	lsls	r3, r3, #8
 8002e2e:	18ca      	adds	r2, r1, r3
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
 8002e32:	3302      	adds	r3, #2
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	440b      	add	r3, r1
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	041b      	lsls	r3, r3, #16
 8002e3c:	441a      	add	r2, r3
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
 8002e40:	3303      	adds	r3, #3
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	440b      	add	r3, r1
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	061b      	lsls	r3, r3, #24
 8002e4a:	4413      	add	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
					}
					aTxBuffer[j+1] = num;
 8002e4e:	7bbb      	ldrb	r3, [r7, #14]
 8002e50:	3301      	adds	r3, #1
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	4927      	ldr	r1, [pc, #156]	; (8002ef4 <vShell_cmdParse+0x180>)
 8002e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					start+=4;
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	73fb      	strb	r3, [r7, #15]
				for (uint8_t j = 0; j<CFG_LENGTH; j++)
 8002e60:	7bbb      	ldrb	r3, [r7, #14]
 8002e62:	3301      	adds	r3, #1
 8002e64:	73bb      	strb	r3, [r7, #14]
 8002e66:	7bbb      	ldrb	r3, [r7, #14]
 8002e68:	2b09      	cmp	r3, #9
 8002e6a:	d9b1      	bls.n	8002dd0 <vShell_cmdParse+0x5c>
				}
				if(u8_idx==2){aTxBuffer[0] = 1;}
 8002e6c:	7dfb      	ldrb	r3, [r7, #23]
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d103      	bne.n	8002e7a <vShell_cmdParse+0x106>
 8002e72:	4b20      	ldr	r3, [pc, #128]	; (8002ef4 <vShell_cmdParse+0x180>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	601a      	str	r2, [r3, #0]
			else if (u8_idx>=2 && u8_idx<=4) {					//{WB1: {WB2: WB3:
 8002e78:	e022      	b.n	8002ec0 <vShell_cmdParse+0x14c>
				else if(u8_idx==3){aTxBuffer[0] = 2;}
 8002e7a:	7dfb      	ldrb	r3, [r7, #23]
 8002e7c:	2b03      	cmp	r3, #3
 8002e7e:	d103      	bne.n	8002e88 <vShell_cmdParse+0x114>
 8002e80:	4b1c      	ldr	r3, [pc, #112]	; (8002ef4 <vShell_cmdParse+0x180>)
 8002e82:	2202      	movs	r2, #2
 8002e84:	601a      	str	r2, [r3, #0]
			else if (u8_idx>=2 && u8_idx<=4) {					//{WB1: {WB2: WB3:
 8002e86:	e01b      	b.n	8002ec0 <vShell_cmdParse+0x14c>
				else if(u8_idx==4){aTxBuffer[0] = 3;}
 8002e88:	7dfb      	ldrb	r3, [r7, #23]
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	d118      	bne.n	8002ec0 <vShell_cmdParse+0x14c>
 8002e8e:	4b19      	ldr	r3, [pc, #100]	; (8002ef4 <vShell_cmdParse+0x180>)
 8002e90:	2203      	movs	r2, #3
 8002e92:	601a      	str	r2, [r3, #0]
			else if (u8_idx>=2 && u8_idx<=4) {					//{WB1: {WB2: WB3:
 8002e94:	e014      	b.n	8002ec0 <vShell_cmdParse+0x14c>
			}

			else if (u8_idx==5) {					//{RB1}
 8002e96:	7dfb      	ldrb	r3, [r7, #23]
 8002e98:	2b05      	cmp	r3, #5
 8002e9a:	d103      	bne.n	8002ea4 <vShell_cmdParse+0x130>
				aTxBuffer[0] = 4;
 8002e9c:	4b15      	ldr	r3, [pc, #84]	; (8002ef4 <vShell_cmdParse+0x180>)
 8002e9e:	2204      	movs	r2, #4
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	e00e      	b.n	8002ec2 <vShell_cmdParse+0x14e>
			}

			else if (u8_idx==6) {					//{RB2}
 8002ea4:	7dfb      	ldrb	r3, [r7, #23]
 8002ea6:	2b06      	cmp	r3, #6
 8002ea8:	d103      	bne.n	8002eb2 <vShell_cmdParse+0x13e>
				aTxBuffer[0] = 5;
 8002eaa:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <vShell_cmdParse+0x180>)
 8002eac:	2205      	movs	r2, #5
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	e007      	b.n	8002ec2 <vShell_cmdParse+0x14e>
			}

			else if (u8_idx==7) {					//{RB3}
 8002eb2:	7dfb      	ldrb	r3, [r7, #23]
 8002eb4:	2b07      	cmp	r3, #7
 8002eb6:	d104      	bne.n	8002ec2 <vShell_cmdParse+0x14e>
				aTxBuffer[0] = 6;
 8002eb8:	4b0e      	ldr	r3, [pc, #56]	; (8002ef4 <vShell_cmdParse+0x180>)
 8002eba:	2206      	movs	r2, #6
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	e000      	b.n	8002ec2 <vShell_cmdParse+0x14e>
			else if (u8_idx>=2 && u8_idx<=4) {					//{WB1: {WB2: WB3:
 8002ec0:	bf00      	nop
			}

			printf("Prove me UART: %d %d\r\n", aTxBuffer[0], aTxBuffer[1]);
 8002ec2:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <vShell_cmdParse+0x180>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a0b      	ldr	r2, [pc, #44]	; (8002ef4 <vShell_cmdParse+0x180>)
 8002ec8:	6852      	ldr	r2, [r2, #4]
 8002eca:	4619      	mov	r1, r3
 8002ecc:	480a      	ldr	r0, [pc, #40]	; (8002ef8 <vShell_cmdParse+0x184>)
 8002ece:	f004 fa13 	bl	80072f8 <iprintf>
	for(uint8_t u8_idx = 0; u8_idx < CFG_HEADER_NUM; u8_idx++) {
 8002ed2:	7dfb      	ldrb	r3, [r7, #23]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	75fb      	strb	r3, [r7, #23]
 8002ed8:	7dfb      	ldrb	r3, [r7, #23]
 8002eda:	2b13      	cmp	r3, #19
 8002edc:	f67f af51 	bls.w	8002d82 <vShell_cmdParse+0xe>
		}
	}
}
 8002ee0:	bf00      	nop
 8002ee2:	bf00      	nop
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	20000010 	.word	0x20000010
 8002ef0:	20000408 	.word	0x20000408
 8002ef4:	20000000 	.word	0x20000000
 8002ef8:	080084b0 	.word	0x080084b0

08002efc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f00:	480d      	ldr	r0, [pc, #52]	; (8002f38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f02:	490e      	ldr	r1, [pc, #56]	; (8002f3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f04:	4a0e      	ldr	r2, [pc, #56]	; (8002f40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f08:	e002      	b.n	8002f10 <LoopCopyDataInit>

08002f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f0e:	3304      	adds	r3, #4

08002f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f14:	d3f9      	bcc.n	8002f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f16:	4a0b      	ldr	r2, [pc, #44]	; (8002f44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f18:	4c0b      	ldr	r4, [pc, #44]	; (8002f48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f1c:	e001      	b.n	8002f22 <LoopFillZerobss>

08002f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f20:	3204      	adds	r2, #4

08002f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f24:	d3fb      	bcc.n	8002f1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f26:	f7ff ff13 	bl	8002d50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f2a:	f004 f99b 	bl	8007264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f2e:	f7fd fb53 	bl	80005d8 <main>
  bx  lr    
 8002f32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f3c:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8002f40:	08008590 	.word	0x08008590
  ldr r2, =_sbss
 8002f44:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8002f48:	20000638 	.word	0x20000638

08002f4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f4c:	e7fe      	b.n	8002f4c <ADC_IRQHandler>
	...

08002f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f54:	4b0e      	ldr	r3, [pc, #56]	; (8002f90 <HAL_Init+0x40>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a0d      	ldr	r2, [pc, #52]	; (8002f90 <HAL_Init+0x40>)
 8002f5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f60:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <HAL_Init+0x40>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a0a      	ldr	r2, [pc, #40]	; (8002f90 <HAL_Init+0x40>)
 8002f66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f6c:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <HAL_Init+0x40>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a07      	ldr	r2, [pc, #28]	; (8002f90 <HAL_Init+0x40>)
 8002f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f78:	2003      	movs	r0, #3
 8002f7a:	f000 f94f 	bl	800321c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f7e:	2000      	movs	r0, #0
 8002f80:	f000 f808 	bl	8002f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f84:	f7ff fcc2 	bl	800290c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40023c00 	.word	0x40023c00

08002f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f9c:	4b12      	ldr	r3, [pc, #72]	; (8002fe8 <HAL_InitTick+0x54>)
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	4b12      	ldr	r3, [pc, #72]	; (8002fec <HAL_InitTick+0x58>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 f967 	bl	8003286 <HAL_SYSTICK_Config>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e00e      	b.n	8002fe0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b0f      	cmp	r3, #15
 8002fc6:	d80a      	bhi.n	8002fde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fc8:	2200      	movs	r2, #0
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd0:	f000 f92f 	bl	8003232 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fd4:	4a06      	ldr	r2, [pc, #24]	; (8002ff0 <HAL_InitTick+0x5c>)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	e000      	b.n	8002fe0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	2000000c 	.word	0x2000000c
 8002fec:	20000078 	.word	0x20000078
 8002ff0:	20000074 	.word	0x20000074

08002ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ff8:	4b06      	ldr	r3, [pc, #24]	; (8003014 <HAL_IncTick+0x20>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	4b06      	ldr	r3, [pc, #24]	; (8003018 <HAL_IncTick+0x24>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4413      	add	r3, r2
 8003004:	4a04      	ldr	r2, [pc, #16]	; (8003018 <HAL_IncTick+0x24>)
 8003006:	6013      	str	r3, [r2, #0]
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	20000078 	.word	0x20000078
 8003018:	20000624 	.word	0x20000624

0800301c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  return uwTick;
 8003020:	4b03      	ldr	r3, [pc, #12]	; (8003030 <HAL_GetTick+0x14>)
 8003022:	681b      	ldr	r3, [r3, #0]
}
 8003024:	4618      	mov	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	20000624 	.word	0x20000624

08003034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800303c:	f7ff ffee 	bl	800301c <HAL_GetTick>
 8003040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304c:	d005      	beq.n	800305a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800304e:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <HAL_Delay+0x44>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4413      	add	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800305a:	bf00      	nop
 800305c:	f7ff ffde 	bl	800301c <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	429a      	cmp	r2, r3
 800306a:	d8f7      	bhi.n	800305c <HAL_Delay+0x28>
  {
  }
}
 800306c:	bf00      	nop
 800306e:	bf00      	nop
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	20000078 	.word	0x20000078

0800307c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800308c:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <__NVIC_SetPriorityGrouping+0x44>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003098:	4013      	ands	r3, r2
 800309a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ae:	4a04      	ldr	r2, [pc, #16]	; (80030c0 <__NVIC_SetPriorityGrouping+0x44>)
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	60d3      	str	r3, [r2, #12]
}
 80030b4:	bf00      	nop
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	e000ed00 	.word	0xe000ed00

080030c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030c8:	4b04      	ldr	r3, [pc, #16]	; (80030dc <__NVIC_GetPriorityGrouping+0x18>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	0a1b      	lsrs	r3, r3, #8
 80030ce:	f003 0307 	and.w	r3, r3, #7
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	e000ed00 	.word	0xe000ed00

080030e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	db0b      	blt.n	800310a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	f003 021f 	and.w	r2, r3, #31
 80030f8:	4907      	ldr	r1, [pc, #28]	; (8003118 <__NVIC_EnableIRQ+0x38>)
 80030fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	2001      	movs	r0, #1
 8003102:	fa00 f202 	lsl.w	r2, r0, r2
 8003106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	e000e100 	.word	0xe000e100

0800311c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	6039      	str	r1, [r7, #0]
 8003126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312c:	2b00      	cmp	r3, #0
 800312e:	db0a      	blt.n	8003146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	b2da      	uxtb	r2, r3
 8003134:	490c      	ldr	r1, [pc, #48]	; (8003168 <__NVIC_SetPriority+0x4c>)
 8003136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313a:	0112      	lsls	r2, r2, #4
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	440b      	add	r3, r1
 8003140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003144:	e00a      	b.n	800315c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	b2da      	uxtb	r2, r3
 800314a:	4908      	ldr	r1, [pc, #32]	; (800316c <__NVIC_SetPriority+0x50>)
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	3b04      	subs	r3, #4
 8003154:	0112      	lsls	r2, r2, #4
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	440b      	add	r3, r1
 800315a:	761a      	strb	r2, [r3, #24]
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	e000e100 	.word	0xe000e100
 800316c:	e000ed00 	.word	0xe000ed00

08003170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003170:	b480      	push	{r7}
 8003172:	b089      	sub	sp, #36	; 0x24
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f1c3 0307 	rsb	r3, r3, #7
 800318a:	2b04      	cmp	r3, #4
 800318c:	bf28      	it	cs
 800318e:	2304      	movcs	r3, #4
 8003190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	3304      	adds	r3, #4
 8003196:	2b06      	cmp	r3, #6
 8003198:	d902      	bls.n	80031a0 <NVIC_EncodePriority+0x30>
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	3b03      	subs	r3, #3
 800319e:	e000      	b.n	80031a2 <NVIC_EncodePriority+0x32>
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a4:	f04f 32ff 	mov.w	r2, #4294967295
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43da      	mvns	r2, r3
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	401a      	ands	r2, r3
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031b8:	f04f 31ff 	mov.w	r1, #4294967295
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	fa01 f303 	lsl.w	r3, r1, r3
 80031c2:	43d9      	mvns	r1, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c8:	4313      	orrs	r3, r2
         );
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3724      	adds	r7, #36	; 0x24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
	...

080031d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031e8:	d301      	bcc.n	80031ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031ea:	2301      	movs	r3, #1
 80031ec:	e00f      	b.n	800320e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ee:	4a0a      	ldr	r2, [pc, #40]	; (8003218 <SysTick_Config+0x40>)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3b01      	subs	r3, #1
 80031f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031f6:	210f      	movs	r1, #15
 80031f8:	f04f 30ff 	mov.w	r0, #4294967295
 80031fc:	f7ff ff8e 	bl	800311c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003200:	4b05      	ldr	r3, [pc, #20]	; (8003218 <SysTick_Config+0x40>)
 8003202:	2200      	movs	r2, #0
 8003204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003206:	4b04      	ldr	r3, [pc, #16]	; (8003218 <SysTick_Config+0x40>)
 8003208:	2207      	movs	r2, #7
 800320a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	e000e010 	.word	0xe000e010

0800321c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7ff ff29 	bl	800307c <__NVIC_SetPriorityGrouping>
}
 800322a:	bf00      	nop
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003232:	b580      	push	{r7, lr}
 8003234:	b086      	sub	sp, #24
 8003236:	af00      	add	r7, sp, #0
 8003238:	4603      	mov	r3, r0
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	607a      	str	r2, [r7, #4]
 800323e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003244:	f7ff ff3e 	bl	80030c4 <__NVIC_GetPriorityGrouping>
 8003248:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	68b9      	ldr	r1, [r7, #8]
 800324e:	6978      	ldr	r0, [r7, #20]
 8003250:	f7ff ff8e 	bl	8003170 <NVIC_EncodePriority>
 8003254:	4602      	mov	r2, r0
 8003256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800325a:	4611      	mov	r1, r2
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff ff5d 	bl	800311c <__NVIC_SetPriority>
}
 8003262:	bf00      	nop
 8003264:	3718      	adds	r7, #24
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b082      	sub	sp, #8
 800326e:	af00      	add	r7, sp, #0
 8003270:	4603      	mov	r3, r0
 8003272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff ff31 	bl	80030e0 <__NVIC_EnableIRQ>
}
 800327e:	bf00      	nop
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b082      	sub	sp, #8
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7ff ffa2 	bl	80031d8 <SysTick_Config>
 8003294:	4603      	mov	r3, r0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032ac:	f7ff feb6 	bl	800301c <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e099      	b.n	80033f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0201 	bic.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032dc:	e00f      	b.n	80032fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032de:	f7ff fe9d 	bl	800301c <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b05      	cmp	r3, #5
 80032ea:	d908      	bls.n	80032fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2220      	movs	r2, #32
 80032f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2203      	movs	r2, #3
 80032f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e078      	b.n	80033f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1e8      	bne.n	80032de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	4b38      	ldr	r3, [pc, #224]	; (80033f8 <HAL_DMA_Init+0x158>)
 8003318:	4013      	ands	r3, r2
 800331a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800332a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003336:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003342:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	4313      	orrs	r3, r2
 800334e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	2b04      	cmp	r3, #4
 8003356:	d107      	bne.n	8003368 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003360:	4313      	orrs	r3, r2
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	4313      	orrs	r3, r2
 8003366:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f023 0307 	bic.w	r3, r3, #7
 800337e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	4313      	orrs	r3, r2
 8003388:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	2b04      	cmp	r3, #4
 8003390:	d117      	bne.n	80033c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	4313      	orrs	r3, r2
 800339a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00e      	beq.n	80033c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 fb01 	bl	80039ac <DMA_CheckFifoParam>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d008      	beq.n	80033c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2240      	movs	r2, #64	; 0x40
 80033b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80033be:	2301      	movs	r3, #1
 80033c0:	e016      	b.n	80033f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 fab8 	bl	8003940 <DMA_CalcBaseAndBitshift>
 80033d0:	4603      	mov	r3, r0
 80033d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d8:	223f      	movs	r2, #63	; 0x3f
 80033da:	409a      	lsls	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3718      	adds	r7, #24
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	f010803f 	.word	0xf010803f

080033fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
 8003408:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800340a:	2300      	movs	r3, #0
 800340c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003412:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800341a:	2b01      	cmp	r3, #1
 800341c:	d101      	bne.n	8003422 <HAL_DMA_Start_IT+0x26>
 800341e:	2302      	movs	r3, #2
 8003420:	e040      	b.n	80034a4 <HAL_DMA_Start_IT+0xa8>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b01      	cmp	r3, #1
 8003434:	d12f      	bne.n	8003496 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2202      	movs	r2, #2
 800343a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	68b9      	ldr	r1, [r7, #8]
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 fa4a 	bl	80038e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003454:	223f      	movs	r2, #63	; 0x3f
 8003456:	409a      	lsls	r2, r3
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0216 	orr.w	r2, r2, #22
 800346a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	2b00      	cmp	r3, #0
 8003472:	d007      	beq.n	8003484 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0208 	orr.w	r2, r2, #8
 8003482:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0201 	orr.w	r2, r2, #1
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	e005      	b.n	80034a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800349e:	2302      	movs	r3, #2
 80034a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034ba:	f7ff fdaf 	bl	800301c <HAL_GetTick>
 80034be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d008      	beq.n	80034de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2280      	movs	r2, #128	; 0x80
 80034d0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e052      	b.n	8003584 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0216 	bic.w	r2, r2, #22
 80034ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695a      	ldr	r2, [r3, #20]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	2b00      	cmp	r3, #0
 8003504:	d103      	bne.n	800350e <HAL_DMA_Abort+0x62>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800350a:	2b00      	cmp	r3, #0
 800350c:	d007      	beq.n	800351e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0208 	bic.w	r2, r2, #8
 800351c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0201 	bic.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800352e:	e013      	b.n	8003558 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003530:	f7ff fd74 	bl	800301c <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b05      	cmp	r3, #5
 800353c:	d90c      	bls.n	8003558 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2220      	movs	r2, #32
 8003542:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2203      	movs	r2, #3
 8003548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e015      	b.n	8003584 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1e4      	bne.n	8003530 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356a:	223f      	movs	r2, #63	; 0x3f
 800356c:	409a      	lsls	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d004      	beq.n	80035aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2280      	movs	r2, #128	; 0x80
 80035a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e00c      	b.n	80035c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2205      	movs	r2, #5
 80035ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0201 	bic.w	r2, r2, #1
 80035c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035dc:	4b8e      	ldr	r3, [pc, #568]	; (8003818 <HAL_DMA_IRQHandler+0x248>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a8e      	ldr	r2, [pc, #568]	; (800381c <HAL_DMA_IRQHandler+0x24c>)
 80035e2:	fba2 2303 	umull	r2, r3, r2, r3
 80035e6:	0a9b      	lsrs	r3, r3, #10
 80035e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035fa:	2208      	movs	r2, #8
 80035fc:	409a      	lsls	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	4013      	ands	r3, r2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d01a      	beq.n	800363c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b00      	cmp	r3, #0
 8003612:	d013      	beq.n	800363c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0204 	bic.w	r2, r2, #4
 8003622:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003628:	2208      	movs	r2, #8
 800362a:	409a      	lsls	r2, r3
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003634:	f043 0201 	orr.w	r2, r3, #1
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003640:	2201      	movs	r2, #1
 8003642:	409a      	lsls	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	4013      	ands	r3, r2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d012      	beq.n	8003672 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00b      	beq.n	8003672 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365e:	2201      	movs	r2, #1
 8003660:	409a      	lsls	r2, r3
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366a:	f043 0202 	orr.w	r2, r3, #2
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003676:	2204      	movs	r2, #4
 8003678:	409a      	lsls	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	4013      	ands	r3, r2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d012      	beq.n	80036a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00b      	beq.n	80036a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003694:	2204      	movs	r2, #4
 8003696:	409a      	lsls	r2, r3
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a0:	f043 0204 	orr.w	r2, r3, #4
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ac:	2210      	movs	r2, #16
 80036ae:	409a      	lsls	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d043      	beq.n	8003740 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d03c      	beq.n	8003740 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ca:	2210      	movs	r2, #16
 80036cc:	409a      	lsls	r2, r3
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d018      	beq.n	8003712 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d108      	bne.n	8003700 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d024      	beq.n	8003740 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	4798      	blx	r3
 80036fe:	e01f      	b.n	8003740 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003704:	2b00      	cmp	r3, #0
 8003706:	d01b      	beq.n	8003740 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	4798      	blx	r3
 8003710:	e016      	b.n	8003740 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371c:	2b00      	cmp	r3, #0
 800371e:	d107      	bne.n	8003730 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0208 	bic.w	r2, r2, #8
 800372e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003744:	2220      	movs	r2, #32
 8003746:	409a      	lsls	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4013      	ands	r3, r2
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 808f 	beq.w	8003870 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0310 	and.w	r3, r3, #16
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 8087 	beq.w	8003870 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003766:	2220      	movs	r2, #32
 8003768:	409a      	lsls	r2, r3
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b05      	cmp	r3, #5
 8003778:	d136      	bne.n	80037e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0216 	bic.w	r2, r2, #22
 8003788:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	695a      	ldr	r2, [r3, #20]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003798:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d103      	bne.n	80037aa <HAL_DMA_IRQHandler+0x1da>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d007      	beq.n	80037ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0208 	bic.w	r2, r2, #8
 80037b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037be:	223f      	movs	r2, #63	; 0x3f
 80037c0:	409a      	lsls	r2, r3
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d07e      	beq.n	80038dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	4798      	blx	r3
        }
        return;
 80037e6:	e079      	b.n	80038dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d01d      	beq.n	8003832 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10d      	bne.n	8003820 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003808:	2b00      	cmp	r3, #0
 800380a:	d031      	beq.n	8003870 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	4798      	blx	r3
 8003814:	e02c      	b.n	8003870 <HAL_DMA_IRQHandler+0x2a0>
 8003816:	bf00      	nop
 8003818:	2000000c 	.word	0x2000000c
 800381c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003824:	2b00      	cmp	r3, #0
 8003826:	d023      	beq.n	8003870 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	4798      	blx	r3
 8003830:	e01e      	b.n	8003870 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10f      	bne.n	8003860 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0210 	bic.w	r2, r2, #16
 800384e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003874:	2b00      	cmp	r3, #0
 8003876:	d032      	beq.n	80038de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b00      	cmp	r3, #0
 8003882:	d022      	beq.n	80038ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2205      	movs	r2, #5
 8003888:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0201 	bic.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	3301      	adds	r3, #1
 80038a0:	60bb      	str	r3, [r7, #8]
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d307      	bcc.n	80038b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f2      	bne.n	800389c <HAL_DMA_IRQHandler+0x2cc>
 80038b6:	e000      	b.n	80038ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80038b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d005      	beq.n	80038de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	4798      	blx	r3
 80038da:	e000      	b.n	80038de <HAL_DMA_IRQHandler+0x30e>
        return;
 80038dc:	bf00      	nop
    }
  }
}
 80038de:	3718      	adds	r7, #24
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
 80038f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003900:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b40      	cmp	r3, #64	; 0x40
 8003910:	d108      	bne.n	8003924 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003922:	e007      	b.n	8003934 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	60da      	str	r2, [r3, #12]
}
 8003934:	bf00      	nop
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	b2db      	uxtb	r3, r3
 800394e:	3b10      	subs	r3, #16
 8003950:	4a14      	ldr	r2, [pc, #80]	; (80039a4 <DMA_CalcBaseAndBitshift+0x64>)
 8003952:	fba2 2303 	umull	r2, r3, r2, r3
 8003956:	091b      	lsrs	r3, r3, #4
 8003958:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800395a:	4a13      	ldr	r2, [pc, #76]	; (80039a8 <DMA_CalcBaseAndBitshift+0x68>)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4413      	add	r3, r2
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2b03      	cmp	r3, #3
 800396c:	d909      	bls.n	8003982 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003976:	f023 0303 	bic.w	r3, r3, #3
 800397a:	1d1a      	adds	r2, r3, #4
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	659a      	str	r2, [r3, #88]	; 0x58
 8003980:	e007      	b.n	8003992 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800398a:	f023 0303 	bic.w	r3, r3, #3
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003996:	4618      	mov	r0, r3
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	aaaaaaab 	.word	0xaaaaaaab
 80039a8:	080084e0 	.word	0x080084e0

080039ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039b4:	2300      	movs	r3, #0
 80039b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d11f      	bne.n	8003a06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d856      	bhi.n	8003a7a <DMA_CheckFifoParam+0xce>
 80039cc:	a201      	add	r2, pc, #4	; (adr r2, 80039d4 <DMA_CheckFifoParam+0x28>)
 80039ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d2:	bf00      	nop
 80039d4:	080039e5 	.word	0x080039e5
 80039d8:	080039f7 	.word	0x080039f7
 80039dc:	080039e5 	.word	0x080039e5
 80039e0:	08003a7b 	.word	0x08003a7b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d046      	beq.n	8003a7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039f4:	e043      	b.n	8003a7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039fe:	d140      	bne.n	8003a82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a04:	e03d      	b.n	8003a82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a0e:	d121      	bne.n	8003a54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	d837      	bhi.n	8003a86 <DMA_CheckFifoParam+0xda>
 8003a16:	a201      	add	r2, pc, #4	; (adr r2, 8003a1c <DMA_CheckFifoParam+0x70>)
 8003a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1c:	08003a2d 	.word	0x08003a2d
 8003a20:	08003a33 	.word	0x08003a33
 8003a24:	08003a2d 	.word	0x08003a2d
 8003a28:	08003a45 	.word	0x08003a45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a30:	e030      	b.n	8003a94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d025      	beq.n	8003a8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a42:	e022      	b.n	8003a8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a4c:	d11f      	bne.n	8003a8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a52:	e01c      	b.n	8003a8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d903      	bls.n	8003a62 <DMA_CheckFifoParam+0xb6>
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	2b03      	cmp	r3, #3
 8003a5e:	d003      	beq.n	8003a68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a60:	e018      	b.n	8003a94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	73fb      	strb	r3, [r7, #15]
      break;
 8003a66:	e015      	b.n	8003a94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00e      	beq.n	8003a92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	73fb      	strb	r3, [r7, #15]
      break;
 8003a78:	e00b      	b.n	8003a92 <DMA_CheckFifoParam+0xe6>
      break;
 8003a7a:	bf00      	nop
 8003a7c:	e00a      	b.n	8003a94 <DMA_CheckFifoParam+0xe8>
      break;
 8003a7e:	bf00      	nop
 8003a80:	e008      	b.n	8003a94 <DMA_CheckFifoParam+0xe8>
      break;
 8003a82:	bf00      	nop
 8003a84:	e006      	b.n	8003a94 <DMA_CheckFifoParam+0xe8>
      break;
 8003a86:	bf00      	nop
 8003a88:	e004      	b.n	8003a94 <DMA_CheckFifoParam+0xe8>
      break;
 8003a8a:	bf00      	nop
 8003a8c:	e002      	b.n	8003a94 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a8e:	bf00      	nop
 8003a90:	e000      	b.n	8003a94 <DMA_CheckFifoParam+0xe8>
      break;
 8003a92:	bf00      	nop
    }
  } 
  
  return status; 
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop

08003aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b089      	sub	sp, #36	; 0x24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aba:	2300      	movs	r3, #0
 8003abc:	61fb      	str	r3, [r7, #28]
 8003abe:	e165      	b.n	8003d8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	f040 8154 	bne.w	8003d86 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d005      	beq.n	8003af6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d130      	bne.n	8003b58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	2203      	movs	r2, #3
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	43db      	mvns	r3, r3
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68da      	ldr	r2, [r3, #12]
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	43db      	mvns	r3, r3
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	091b      	lsrs	r3, r3, #4
 8003b42:	f003 0201 	and.w	r2, r3, #1
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f003 0303 	and.w	r3, r3, #3
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d017      	beq.n	8003b94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	2203      	movs	r2, #3
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	43db      	mvns	r3, r3
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f003 0303 	and.w	r3, r3, #3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d123      	bne.n	8003be8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	08da      	lsrs	r2, r3, #3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3208      	adds	r2, #8
 8003ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	220f      	movs	r2, #15
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	691a      	ldr	r2, [r3, #16]
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	08da      	lsrs	r2, r3, #3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	3208      	adds	r2, #8
 8003be2:	69b9      	ldr	r1, [r7, #24]
 8003be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	2203      	movs	r2, #3
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f003 0203 	and.w	r2, r3, #3
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 80ae 	beq.w	8003d86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60fb      	str	r3, [r7, #12]
 8003c2e:	4b5d      	ldr	r3, [pc, #372]	; (8003da4 <HAL_GPIO_Init+0x300>)
 8003c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c32:	4a5c      	ldr	r2, [pc, #368]	; (8003da4 <HAL_GPIO_Init+0x300>)
 8003c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c38:	6453      	str	r3, [r2, #68]	; 0x44
 8003c3a:	4b5a      	ldr	r3, [pc, #360]	; (8003da4 <HAL_GPIO_Init+0x300>)
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c46:	4a58      	ldr	r2, [pc, #352]	; (8003da8 <HAL_GPIO_Init+0x304>)
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	089b      	lsrs	r3, r3, #2
 8003c4c:	3302      	adds	r3, #2
 8003c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	220f      	movs	r2, #15
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c62:	43db      	mvns	r3, r3
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	4013      	ands	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a4f      	ldr	r2, [pc, #316]	; (8003dac <HAL_GPIO_Init+0x308>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d025      	beq.n	8003cbe <HAL_GPIO_Init+0x21a>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a4e      	ldr	r2, [pc, #312]	; (8003db0 <HAL_GPIO_Init+0x30c>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d01f      	beq.n	8003cba <HAL_GPIO_Init+0x216>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a4d      	ldr	r2, [pc, #308]	; (8003db4 <HAL_GPIO_Init+0x310>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d019      	beq.n	8003cb6 <HAL_GPIO_Init+0x212>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a4c      	ldr	r2, [pc, #304]	; (8003db8 <HAL_GPIO_Init+0x314>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d013      	beq.n	8003cb2 <HAL_GPIO_Init+0x20e>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a4b      	ldr	r2, [pc, #300]	; (8003dbc <HAL_GPIO_Init+0x318>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d00d      	beq.n	8003cae <HAL_GPIO_Init+0x20a>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a4a      	ldr	r2, [pc, #296]	; (8003dc0 <HAL_GPIO_Init+0x31c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d007      	beq.n	8003caa <HAL_GPIO_Init+0x206>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a49      	ldr	r2, [pc, #292]	; (8003dc4 <HAL_GPIO_Init+0x320>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d101      	bne.n	8003ca6 <HAL_GPIO_Init+0x202>
 8003ca2:	2306      	movs	r3, #6
 8003ca4:	e00c      	b.n	8003cc0 <HAL_GPIO_Init+0x21c>
 8003ca6:	2307      	movs	r3, #7
 8003ca8:	e00a      	b.n	8003cc0 <HAL_GPIO_Init+0x21c>
 8003caa:	2305      	movs	r3, #5
 8003cac:	e008      	b.n	8003cc0 <HAL_GPIO_Init+0x21c>
 8003cae:	2304      	movs	r3, #4
 8003cb0:	e006      	b.n	8003cc0 <HAL_GPIO_Init+0x21c>
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e004      	b.n	8003cc0 <HAL_GPIO_Init+0x21c>
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	e002      	b.n	8003cc0 <HAL_GPIO_Init+0x21c>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e000      	b.n	8003cc0 <HAL_GPIO_Init+0x21c>
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	69fa      	ldr	r2, [r7, #28]
 8003cc2:	f002 0203 	and.w	r2, r2, #3
 8003cc6:	0092      	lsls	r2, r2, #2
 8003cc8:	4093      	lsls	r3, r2
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cd0:	4935      	ldr	r1, [pc, #212]	; (8003da8 <HAL_GPIO_Init+0x304>)
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	089b      	lsrs	r3, r3, #2
 8003cd6:	3302      	adds	r3, #2
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cde:	4b3a      	ldr	r3, [pc, #232]	; (8003dc8 <HAL_GPIO_Init+0x324>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	43db      	mvns	r3, r3
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	4013      	ands	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d02:	4a31      	ldr	r2, [pc, #196]	; (8003dc8 <HAL_GPIO_Init+0x324>)
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d08:	4b2f      	ldr	r3, [pc, #188]	; (8003dc8 <HAL_GPIO_Init+0x324>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	43db      	mvns	r3, r3
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	4013      	ands	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d2c:	4a26      	ldr	r2, [pc, #152]	; (8003dc8 <HAL_GPIO_Init+0x324>)
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d32:	4b25      	ldr	r3, [pc, #148]	; (8003dc8 <HAL_GPIO_Init+0x324>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	43db      	mvns	r3, r3
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d56:	4a1c      	ldr	r2, [pc, #112]	; (8003dc8 <HAL_GPIO_Init+0x324>)
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d5c:	4b1a      	ldr	r3, [pc, #104]	; (8003dc8 <HAL_GPIO_Init+0x324>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	43db      	mvns	r3, r3
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d80:	4a11      	ldr	r2, [pc, #68]	; (8003dc8 <HAL_GPIO_Init+0x324>)
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	61fb      	str	r3, [r7, #28]
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	2b0f      	cmp	r3, #15
 8003d90:	f67f ae96 	bls.w	8003ac0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d94:	bf00      	nop
 8003d96:	bf00      	nop
 8003d98:	3724      	adds	r7, #36	; 0x24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40023800 	.word	0x40023800
 8003da8:	40013800 	.word	0x40013800
 8003dac:	40020000 	.word	0x40020000
 8003db0:	40020400 	.word	0x40020400
 8003db4:	40020800 	.word	0x40020800
 8003db8:	40020c00 	.word	0x40020c00
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	40021400 	.word	0x40021400
 8003dc4:	40021800 	.word	0x40021800
 8003dc8:	40013c00 	.word	0x40013c00

08003dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	807b      	strh	r3, [r7, #2]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ddc:	787b      	ldrb	r3, [r7, #1]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003de2:	887a      	ldrh	r2, [r7, #2]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003de8:	e003      	b.n	8003df2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dea:	887b      	ldrh	r3, [r7, #2]
 8003dec:	041a      	lsls	r2, r3, #16
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	619a      	str	r2, [r3, #24]
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b085      	sub	sp, #20
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	460b      	mov	r3, r1
 8003e08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e10:	887a      	ldrh	r2, [r7, #2]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4013      	ands	r3, r2
 8003e16:	041a      	lsls	r2, r3, #16
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	43d9      	mvns	r1, r3
 8003e1c:	887b      	ldrh	r3, [r7, #2]
 8003e1e:	400b      	ands	r3, r1
 8003e20:	431a      	orrs	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	619a      	str	r2, [r3, #24]
}
 8003e26:	bf00      	nop
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
	...

08003e34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003e3e:	4b08      	ldr	r3, [pc, #32]	; (8003e60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e40:	695a      	ldr	r2, [r3, #20]
 8003e42:	88fb      	ldrh	r3, [r7, #6]
 8003e44:	4013      	ands	r3, r2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d006      	beq.n	8003e58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e4a:	4a05      	ldr	r2, [pc, #20]	; (8003e60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e4c:	88fb      	ldrh	r3, [r7, #6]
 8003e4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e50:	88fb      	ldrh	r3, [r7, #6]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fc ff32 	bl	8000cbc <HAL_GPIO_EXTI_Callback>
  }
}
 8003e58:	bf00      	nop
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40013c00 	.word	0x40013c00

08003e64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e0cc      	b.n	8004012 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e78:	4b68      	ldr	r3, [pc, #416]	; (800401c <HAL_RCC_ClockConfig+0x1b8>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 030f 	and.w	r3, r3, #15
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d90c      	bls.n	8003ea0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e86:	4b65      	ldr	r3, [pc, #404]	; (800401c <HAL_RCC_ClockConfig+0x1b8>)
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8e:	4b63      	ldr	r3, [pc, #396]	; (800401c <HAL_RCC_ClockConfig+0x1b8>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 030f 	and.w	r3, r3, #15
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d001      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e0b8      	b.n	8004012 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d020      	beq.n	8003eee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d005      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003eb8:	4b59      	ldr	r3, [pc, #356]	; (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	4a58      	ldr	r2, [pc, #352]	; (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ec2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0308 	and.w	r3, r3, #8
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d005      	beq.n	8003edc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ed0:	4b53      	ldr	r3, [pc, #332]	; (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	4a52      	ldr	r2, [pc, #328]	; (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003eda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003edc:	4b50      	ldr	r3, [pc, #320]	; (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	494d      	ldr	r1, [pc, #308]	; (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d044      	beq.n	8003f84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d107      	bne.n	8003f12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f02:	4b47      	ldr	r3, [pc, #284]	; (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d119      	bne.n	8003f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e07f      	b.n	8004012 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d003      	beq.n	8003f22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f1e:	2b03      	cmp	r3, #3
 8003f20:	d107      	bne.n	8003f32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f22:	4b3f      	ldr	r3, [pc, #252]	; (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d109      	bne.n	8003f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e06f      	b.n	8004012 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f32:	4b3b      	ldr	r3, [pc, #236]	; (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e067      	b.n	8004012 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f42:	4b37      	ldr	r3, [pc, #220]	; (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f023 0203 	bic.w	r2, r3, #3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	4934      	ldr	r1, [pc, #208]	; (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f54:	f7ff f862 	bl	800301c <HAL_GetTick>
 8003f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5a:	e00a      	b.n	8003f72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f5c:	f7ff f85e 	bl	800301c <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e04f      	b.n	8004012 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f72:	4b2b      	ldr	r3, [pc, #172]	; (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 020c 	and.w	r2, r3, #12
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d1eb      	bne.n	8003f5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f84:	4b25      	ldr	r3, [pc, #148]	; (800401c <HAL_RCC_ClockConfig+0x1b8>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 030f 	and.w	r3, r3, #15
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d20c      	bcs.n	8003fac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f92:	4b22      	ldr	r3, [pc, #136]	; (800401c <HAL_RCC_ClockConfig+0x1b8>)
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	b2d2      	uxtb	r2, r2
 8003f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9a:	4b20      	ldr	r3, [pc, #128]	; (800401c <HAL_RCC_ClockConfig+0x1b8>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d001      	beq.n	8003fac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e032      	b.n	8004012 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d008      	beq.n	8003fca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fb8:	4b19      	ldr	r3, [pc, #100]	; (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	4916      	ldr	r1, [pc, #88]	; (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d009      	beq.n	8003fea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fd6:	4b12      	ldr	r3, [pc, #72]	; (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	490e      	ldr	r1, [pc, #56]	; (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fea:	f000 f855 	bl	8004098 <HAL_RCC_GetSysClockFreq>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	091b      	lsrs	r3, r3, #4
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	490a      	ldr	r1, [pc, #40]	; (8004024 <HAL_RCC_ClockConfig+0x1c0>)
 8003ffc:	5ccb      	ldrb	r3, [r1, r3]
 8003ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8004002:	4a09      	ldr	r2, [pc, #36]	; (8004028 <HAL_RCC_ClockConfig+0x1c4>)
 8004004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004006:	4b09      	ldr	r3, [pc, #36]	; (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f7fe ffc2 	bl	8002f94 <HAL_InitTick>

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	40023c00 	.word	0x40023c00
 8004020:	40023800 	.word	0x40023800
 8004024:	080084c8 	.word	0x080084c8
 8004028:	2000000c 	.word	0x2000000c
 800402c:	20000074 	.word	0x20000074

08004030 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004034:	4b03      	ldr	r3, [pc, #12]	; (8004044 <HAL_RCC_GetHCLKFreq+0x14>)
 8004036:	681b      	ldr	r3, [r3, #0]
}
 8004038:	4618      	mov	r0, r3
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	2000000c 	.word	0x2000000c

08004048 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800404c:	f7ff fff0 	bl	8004030 <HAL_RCC_GetHCLKFreq>
 8004050:	4602      	mov	r2, r0
 8004052:	4b05      	ldr	r3, [pc, #20]	; (8004068 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	0a9b      	lsrs	r3, r3, #10
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	4903      	ldr	r1, [pc, #12]	; (800406c <HAL_RCC_GetPCLK1Freq+0x24>)
 800405e:	5ccb      	ldrb	r3, [r1, r3]
 8004060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004064:	4618      	mov	r0, r3
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40023800 	.word	0x40023800
 800406c:	080084d8 	.word	0x080084d8

08004070 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004074:	f7ff ffdc 	bl	8004030 <HAL_RCC_GetHCLKFreq>
 8004078:	4602      	mov	r2, r0
 800407a:	4b05      	ldr	r3, [pc, #20]	; (8004090 <HAL_RCC_GetPCLK2Freq+0x20>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	0b5b      	lsrs	r3, r3, #13
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	4903      	ldr	r1, [pc, #12]	; (8004094 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004086:	5ccb      	ldrb	r3, [r1, r3]
 8004088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800408c:	4618      	mov	r0, r3
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40023800 	.word	0x40023800
 8004094:	080084d8 	.word	0x080084d8

08004098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800409c:	b0ae      	sub	sp, #184	; 0xb8
 800409e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040be:	4bcb      	ldr	r3, [pc, #812]	; (80043ec <HAL_RCC_GetSysClockFreq+0x354>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 030c 	and.w	r3, r3, #12
 80040c6:	2b0c      	cmp	r3, #12
 80040c8:	f200 8206 	bhi.w	80044d8 <HAL_RCC_GetSysClockFreq+0x440>
 80040cc:	a201      	add	r2, pc, #4	; (adr r2, 80040d4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80040ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d2:	bf00      	nop
 80040d4:	08004109 	.word	0x08004109
 80040d8:	080044d9 	.word	0x080044d9
 80040dc:	080044d9 	.word	0x080044d9
 80040e0:	080044d9 	.word	0x080044d9
 80040e4:	08004111 	.word	0x08004111
 80040e8:	080044d9 	.word	0x080044d9
 80040ec:	080044d9 	.word	0x080044d9
 80040f0:	080044d9 	.word	0x080044d9
 80040f4:	08004119 	.word	0x08004119
 80040f8:	080044d9 	.word	0x080044d9
 80040fc:	080044d9 	.word	0x080044d9
 8004100:	080044d9 	.word	0x080044d9
 8004104:	08004309 	.word	0x08004309
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004108:	4bb9      	ldr	r3, [pc, #740]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x358>)
 800410a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800410e:	e1e7      	b.n	80044e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004110:	4bb8      	ldr	r3, [pc, #736]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004112:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004116:	e1e3      	b.n	80044e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004118:	4bb4      	ldr	r3, [pc, #720]	; (80043ec <HAL_RCC_GetSysClockFreq+0x354>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004120:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004124:	4bb1      	ldr	r3, [pc, #708]	; (80043ec <HAL_RCC_GetSysClockFreq+0x354>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d071      	beq.n	8004214 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004130:	4bae      	ldr	r3, [pc, #696]	; (80043ec <HAL_RCC_GetSysClockFreq+0x354>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	099b      	lsrs	r3, r3, #6
 8004136:	2200      	movs	r2, #0
 8004138:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800413c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004140:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004148:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800414c:	2300      	movs	r3, #0
 800414e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004152:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004156:	4622      	mov	r2, r4
 8004158:	462b      	mov	r3, r5
 800415a:	f04f 0000 	mov.w	r0, #0
 800415e:	f04f 0100 	mov.w	r1, #0
 8004162:	0159      	lsls	r1, r3, #5
 8004164:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004168:	0150      	lsls	r0, r2, #5
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	4621      	mov	r1, r4
 8004170:	1a51      	subs	r1, r2, r1
 8004172:	6439      	str	r1, [r7, #64]	; 0x40
 8004174:	4629      	mov	r1, r5
 8004176:	eb63 0301 	sbc.w	r3, r3, r1
 800417a:	647b      	str	r3, [r7, #68]	; 0x44
 800417c:	f04f 0200 	mov.w	r2, #0
 8004180:	f04f 0300 	mov.w	r3, #0
 8004184:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004188:	4649      	mov	r1, r9
 800418a:	018b      	lsls	r3, r1, #6
 800418c:	4641      	mov	r1, r8
 800418e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004192:	4641      	mov	r1, r8
 8004194:	018a      	lsls	r2, r1, #6
 8004196:	4641      	mov	r1, r8
 8004198:	1a51      	subs	r1, r2, r1
 800419a:	63b9      	str	r1, [r7, #56]	; 0x38
 800419c:	4649      	mov	r1, r9
 800419e:	eb63 0301 	sbc.w	r3, r3, r1
 80041a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	f04f 0300 	mov.w	r3, #0
 80041ac:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80041b0:	4649      	mov	r1, r9
 80041b2:	00cb      	lsls	r3, r1, #3
 80041b4:	4641      	mov	r1, r8
 80041b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041ba:	4641      	mov	r1, r8
 80041bc:	00ca      	lsls	r2, r1, #3
 80041be:	4610      	mov	r0, r2
 80041c0:	4619      	mov	r1, r3
 80041c2:	4603      	mov	r3, r0
 80041c4:	4622      	mov	r2, r4
 80041c6:	189b      	adds	r3, r3, r2
 80041c8:	633b      	str	r3, [r7, #48]	; 0x30
 80041ca:	462b      	mov	r3, r5
 80041cc:	460a      	mov	r2, r1
 80041ce:	eb42 0303 	adc.w	r3, r2, r3
 80041d2:	637b      	str	r3, [r7, #52]	; 0x34
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	f04f 0300 	mov.w	r3, #0
 80041dc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80041e0:	4629      	mov	r1, r5
 80041e2:	024b      	lsls	r3, r1, #9
 80041e4:	4621      	mov	r1, r4
 80041e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041ea:	4621      	mov	r1, r4
 80041ec:	024a      	lsls	r2, r1, #9
 80041ee:	4610      	mov	r0, r2
 80041f0:	4619      	mov	r1, r3
 80041f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041f6:	2200      	movs	r2, #0
 80041f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004200:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004204:	f7fc f854 	bl	80002b0 <__aeabi_uldivmod>
 8004208:	4602      	mov	r2, r0
 800420a:	460b      	mov	r3, r1
 800420c:	4613      	mov	r3, r2
 800420e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004212:	e067      	b.n	80042e4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004214:	4b75      	ldr	r3, [pc, #468]	; (80043ec <HAL_RCC_GetSysClockFreq+0x354>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	099b      	lsrs	r3, r3, #6
 800421a:	2200      	movs	r2, #0
 800421c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004220:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004224:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800422c:	67bb      	str	r3, [r7, #120]	; 0x78
 800422e:	2300      	movs	r3, #0
 8004230:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004232:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004236:	4622      	mov	r2, r4
 8004238:	462b      	mov	r3, r5
 800423a:	f04f 0000 	mov.w	r0, #0
 800423e:	f04f 0100 	mov.w	r1, #0
 8004242:	0159      	lsls	r1, r3, #5
 8004244:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004248:	0150      	lsls	r0, r2, #5
 800424a:	4602      	mov	r2, r0
 800424c:	460b      	mov	r3, r1
 800424e:	4621      	mov	r1, r4
 8004250:	1a51      	subs	r1, r2, r1
 8004252:	62b9      	str	r1, [r7, #40]	; 0x28
 8004254:	4629      	mov	r1, r5
 8004256:	eb63 0301 	sbc.w	r3, r3, r1
 800425a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	f04f 0300 	mov.w	r3, #0
 8004264:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004268:	4649      	mov	r1, r9
 800426a:	018b      	lsls	r3, r1, #6
 800426c:	4641      	mov	r1, r8
 800426e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004272:	4641      	mov	r1, r8
 8004274:	018a      	lsls	r2, r1, #6
 8004276:	4641      	mov	r1, r8
 8004278:	ebb2 0a01 	subs.w	sl, r2, r1
 800427c:	4649      	mov	r1, r9
 800427e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004282:	f04f 0200 	mov.w	r2, #0
 8004286:	f04f 0300 	mov.w	r3, #0
 800428a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800428e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004292:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004296:	4692      	mov	sl, r2
 8004298:	469b      	mov	fp, r3
 800429a:	4623      	mov	r3, r4
 800429c:	eb1a 0303 	adds.w	r3, sl, r3
 80042a0:	623b      	str	r3, [r7, #32]
 80042a2:	462b      	mov	r3, r5
 80042a4:	eb4b 0303 	adc.w	r3, fp, r3
 80042a8:	627b      	str	r3, [r7, #36]	; 0x24
 80042aa:	f04f 0200 	mov.w	r2, #0
 80042ae:	f04f 0300 	mov.w	r3, #0
 80042b2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80042b6:	4629      	mov	r1, r5
 80042b8:	028b      	lsls	r3, r1, #10
 80042ba:	4621      	mov	r1, r4
 80042bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042c0:	4621      	mov	r1, r4
 80042c2:	028a      	lsls	r2, r1, #10
 80042c4:	4610      	mov	r0, r2
 80042c6:	4619      	mov	r1, r3
 80042c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042cc:	2200      	movs	r2, #0
 80042ce:	673b      	str	r3, [r7, #112]	; 0x70
 80042d0:	677a      	str	r2, [r7, #116]	; 0x74
 80042d2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80042d6:	f7fb ffeb 	bl	80002b0 <__aeabi_uldivmod>
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4613      	mov	r3, r2
 80042e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042e4:	4b41      	ldr	r3, [pc, #260]	; (80043ec <HAL_RCC_GetSysClockFreq+0x354>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	0c1b      	lsrs	r3, r3, #16
 80042ea:	f003 0303 	and.w	r3, r3, #3
 80042ee:	3301      	adds	r3, #1
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80042f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80042fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80042fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004302:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004306:	e0eb      	b.n	80044e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004308:	4b38      	ldr	r3, [pc, #224]	; (80043ec <HAL_RCC_GetSysClockFreq+0x354>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004310:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004314:	4b35      	ldr	r3, [pc, #212]	; (80043ec <HAL_RCC_GetSysClockFreq+0x354>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d06b      	beq.n	80043f8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004320:	4b32      	ldr	r3, [pc, #200]	; (80043ec <HAL_RCC_GetSysClockFreq+0x354>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	099b      	lsrs	r3, r3, #6
 8004326:	2200      	movs	r2, #0
 8004328:	66bb      	str	r3, [r7, #104]	; 0x68
 800432a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800432c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800432e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004332:	663b      	str	r3, [r7, #96]	; 0x60
 8004334:	2300      	movs	r3, #0
 8004336:	667b      	str	r3, [r7, #100]	; 0x64
 8004338:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800433c:	4622      	mov	r2, r4
 800433e:	462b      	mov	r3, r5
 8004340:	f04f 0000 	mov.w	r0, #0
 8004344:	f04f 0100 	mov.w	r1, #0
 8004348:	0159      	lsls	r1, r3, #5
 800434a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800434e:	0150      	lsls	r0, r2, #5
 8004350:	4602      	mov	r2, r0
 8004352:	460b      	mov	r3, r1
 8004354:	4621      	mov	r1, r4
 8004356:	1a51      	subs	r1, r2, r1
 8004358:	61b9      	str	r1, [r7, #24]
 800435a:	4629      	mov	r1, r5
 800435c:	eb63 0301 	sbc.w	r3, r3, r1
 8004360:	61fb      	str	r3, [r7, #28]
 8004362:	f04f 0200 	mov.w	r2, #0
 8004366:	f04f 0300 	mov.w	r3, #0
 800436a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800436e:	4659      	mov	r1, fp
 8004370:	018b      	lsls	r3, r1, #6
 8004372:	4651      	mov	r1, sl
 8004374:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004378:	4651      	mov	r1, sl
 800437a:	018a      	lsls	r2, r1, #6
 800437c:	4651      	mov	r1, sl
 800437e:	ebb2 0801 	subs.w	r8, r2, r1
 8004382:	4659      	mov	r1, fp
 8004384:	eb63 0901 	sbc.w	r9, r3, r1
 8004388:	f04f 0200 	mov.w	r2, #0
 800438c:	f04f 0300 	mov.w	r3, #0
 8004390:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004394:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004398:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800439c:	4690      	mov	r8, r2
 800439e:	4699      	mov	r9, r3
 80043a0:	4623      	mov	r3, r4
 80043a2:	eb18 0303 	adds.w	r3, r8, r3
 80043a6:	613b      	str	r3, [r7, #16]
 80043a8:	462b      	mov	r3, r5
 80043aa:	eb49 0303 	adc.w	r3, r9, r3
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	f04f 0300 	mov.w	r3, #0
 80043b8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80043bc:	4629      	mov	r1, r5
 80043be:	024b      	lsls	r3, r1, #9
 80043c0:	4621      	mov	r1, r4
 80043c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043c6:	4621      	mov	r1, r4
 80043c8:	024a      	lsls	r2, r1, #9
 80043ca:	4610      	mov	r0, r2
 80043cc:	4619      	mov	r1, r3
 80043ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043d2:	2200      	movs	r2, #0
 80043d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80043d6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80043d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80043dc:	f7fb ff68 	bl	80002b0 <__aeabi_uldivmod>
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4613      	mov	r3, r2
 80043e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043ea:	e065      	b.n	80044b8 <HAL_RCC_GetSysClockFreq+0x420>
 80043ec:	40023800 	.word	0x40023800
 80043f0:	00f42400 	.word	0x00f42400
 80043f4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043f8:	4b3d      	ldr	r3, [pc, #244]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	099b      	lsrs	r3, r3, #6
 80043fe:	2200      	movs	r2, #0
 8004400:	4618      	mov	r0, r3
 8004402:	4611      	mov	r1, r2
 8004404:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004408:	653b      	str	r3, [r7, #80]	; 0x50
 800440a:	2300      	movs	r3, #0
 800440c:	657b      	str	r3, [r7, #84]	; 0x54
 800440e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004412:	4642      	mov	r2, r8
 8004414:	464b      	mov	r3, r9
 8004416:	f04f 0000 	mov.w	r0, #0
 800441a:	f04f 0100 	mov.w	r1, #0
 800441e:	0159      	lsls	r1, r3, #5
 8004420:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004424:	0150      	lsls	r0, r2, #5
 8004426:	4602      	mov	r2, r0
 8004428:	460b      	mov	r3, r1
 800442a:	4641      	mov	r1, r8
 800442c:	1a51      	subs	r1, r2, r1
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	4649      	mov	r1, r9
 8004432:	eb63 0301 	sbc.w	r3, r3, r1
 8004436:	60fb      	str	r3, [r7, #12]
 8004438:	f04f 0200 	mov.w	r2, #0
 800443c:	f04f 0300 	mov.w	r3, #0
 8004440:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004444:	4659      	mov	r1, fp
 8004446:	018b      	lsls	r3, r1, #6
 8004448:	4651      	mov	r1, sl
 800444a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800444e:	4651      	mov	r1, sl
 8004450:	018a      	lsls	r2, r1, #6
 8004452:	4651      	mov	r1, sl
 8004454:	1a54      	subs	r4, r2, r1
 8004456:	4659      	mov	r1, fp
 8004458:	eb63 0501 	sbc.w	r5, r3, r1
 800445c:	f04f 0200 	mov.w	r2, #0
 8004460:	f04f 0300 	mov.w	r3, #0
 8004464:	00eb      	lsls	r3, r5, #3
 8004466:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800446a:	00e2      	lsls	r2, r4, #3
 800446c:	4614      	mov	r4, r2
 800446e:	461d      	mov	r5, r3
 8004470:	4643      	mov	r3, r8
 8004472:	18e3      	adds	r3, r4, r3
 8004474:	603b      	str	r3, [r7, #0]
 8004476:	464b      	mov	r3, r9
 8004478:	eb45 0303 	adc.w	r3, r5, r3
 800447c:	607b      	str	r3, [r7, #4]
 800447e:	f04f 0200 	mov.w	r2, #0
 8004482:	f04f 0300 	mov.w	r3, #0
 8004486:	e9d7 4500 	ldrd	r4, r5, [r7]
 800448a:	4629      	mov	r1, r5
 800448c:	028b      	lsls	r3, r1, #10
 800448e:	4621      	mov	r1, r4
 8004490:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004494:	4621      	mov	r1, r4
 8004496:	028a      	lsls	r2, r1, #10
 8004498:	4610      	mov	r0, r2
 800449a:	4619      	mov	r1, r3
 800449c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044a0:	2200      	movs	r2, #0
 80044a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80044a4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80044a6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80044aa:	f7fb ff01 	bl	80002b0 <__aeabi_uldivmod>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	4613      	mov	r3, r2
 80044b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80044b8:	4b0d      	ldr	r3, [pc, #52]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	0f1b      	lsrs	r3, r3, #28
 80044be:	f003 0307 	and.w	r3, r3, #7
 80044c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80044c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80044ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80044d6:	e003      	b.n	80044e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044d8:	4b06      	ldr	r3, [pc, #24]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80044da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80044de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	37b8      	adds	r7, #184	; 0xb8
 80044e8:	46bd      	mov	sp, r7
 80044ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044ee:	bf00      	nop
 80044f0:	40023800 	.word	0x40023800
 80044f4:	00f42400 	.word	0x00f42400

080044f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e28d      	b.n	8004a26 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 8083 	beq.w	800461e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004518:	4b94      	ldr	r3, [pc, #592]	; (800476c <HAL_RCC_OscConfig+0x274>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f003 030c 	and.w	r3, r3, #12
 8004520:	2b04      	cmp	r3, #4
 8004522:	d019      	beq.n	8004558 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004524:	4b91      	ldr	r3, [pc, #580]	; (800476c <HAL_RCC_OscConfig+0x274>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800452c:	2b08      	cmp	r3, #8
 800452e:	d106      	bne.n	800453e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004530:	4b8e      	ldr	r3, [pc, #568]	; (800476c <HAL_RCC_OscConfig+0x274>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004538:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800453c:	d00c      	beq.n	8004558 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800453e:	4b8b      	ldr	r3, [pc, #556]	; (800476c <HAL_RCC_OscConfig+0x274>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004546:	2b0c      	cmp	r3, #12
 8004548:	d112      	bne.n	8004570 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800454a:	4b88      	ldr	r3, [pc, #544]	; (800476c <HAL_RCC_OscConfig+0x274>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004552:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004556:	d10b      	bne.n	8004570 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004558:	4b84      	ldr	r3, [pc, #528]	; (800476c <HAL_RCC_OscConfig+0x274>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d05b      	beq.n	800461c <HAL_RCC_OscConfig+0x124>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d157      	bne.n	800461c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e25a      	b.n	8004a26 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004578:	d106      	bne.n	8004588 <HAL_RCC_OscConfig+0x90>
 800457a:	4b7c      	ldr	r3, [pc, #496]	; (800476c <HAL_RCC_OscConfig+0x274>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a7b      	ldr	r2, [pc, #492]	; (800476c <HAL_RCC_OscConfig+0x274>)
 8004580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	e01d      	b.n	80045c4 <HAL_RCC_OscConfig+0xcc>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004590:	d10c      	bne.n	80045ac <HAL_RCC_OscConfig+0xb4>
 8004592:	4b76      	ldr	r3, [pc, #472]	; (800476c <HAL_RCC_OscConfig+0x274>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a75      	ldr	r2, [pc, #468]	; (800476c <HAL_RCC_OscConfig+0x274>)
 8004598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	4b73      	ldr	r3, [pc, #460]	; (800476c <HAL_RCC_OscConfig+0x274>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a72      	ldr	r2, [pc, #456]	; (800476c <HAL_RCC_OscConfig+0x274>)
 80045a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a8:	6013      	str	r3, [r2, #0]
 80045aa:	e00b      	b.n	80045c4 <HAL_RCC_OscConfig+0xcc>
 80045ac:	4b6f      	ldr	r3, [pc, #444]	; (800476c <HAL_RCC_OscConfig+0x274>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a6e      	ldr	r2, [pc, #440]	; (800476c <HAL_RCC_OscConfig+0x274>)
 80045b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045b6:	6013      	str	r3, [r2, #0]
 80045b8:	4b6c      	ldr	r3, [pc, #432]	; (800476c <HAL_RCC_OscConfig+0x274>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a6b      	ldr	r2, [pc, #428]	; (800476c <HAL_RCC_OscConfig+0x274>)
 80045be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d013      	beq.n	80045f4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045cc:	f7fe fd26 	bl	800301c <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045d4:	f7fe fd22 	bl	800301c <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b64      	cmp	r3, #100	; 0x64
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e21f      	b.n	8004a26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e6:	4b61      	ldr	r3, [pc, #388]	; (800476c <HAL_RCC_OscConfig+0x274>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0f0      	beq.n	80045d4 <HAL_RCC_OscConfig+0xdc>
 80045f2:	e014      	b.n	800461e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f4:	f7fe fd12 	bl	800301c <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045fc:	f7fe fd0e 	bl	800301c <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b64      	cmp	r3, #100	; 0x64
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e20b      	b.n	8004a26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800460e:	4b57      	ldr	r3, [pc, #348]	; (800476c <HAL_RCC_OscConfig+0x274>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f0      	bne.n	80045fc <HAL_RCC_OscConfig+0x104>
 800461a:	e000      	b.n	800461e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800461c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d06f      	beq.n	800470a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800462a:	4b50      	ldr	r3, [pc, #320]	; (800476c <HAL_RCC_OscConfig+0x274>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 030c 	and.w	r3, r3, #12
 8004632:	2b00      	cmp	r3, #0
 8004634:	d017      	beq.n	8004666 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004636:	4b4d      	ldr	r3, [pc, #308]	; (800476c <HAL_RCC_OscConfig+0x274>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800463e:	2b08      	cmp	r3, #8
 8004640:	d105      	bne.n	800464e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004642:	4b4a      	ldr	r3, [pc, #296]	; (800476c <HAL_RCC_OscConfig+0x274>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00b      	beq.n	8004666 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800464e:	4b47      	ldr	r3, [pc, #284]	; (800476c <HAL_RCC_OscConfig+0x274>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004656:	2b0c      	cmp	r3, #12
 8004658:	d11c      	bne.n	8004694 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800465a:	4b44      	ldr	r3, [pc, #272]	; (800476c <HAL_RCC_OscConfig+0x274>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d116      	bne.n	8004694 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004666:	4b41      	ldr	r3, [pc, #260]	; (800476c <HAL_RCC_OscConfig+0x274>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d005      	beq.n	800467e <HAL_RCC_OscConfig+0x186>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d001      	beq.n	800467e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e1d3      	b.n	8004a26 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800467e:	4b3b      	ldr	r3, [pc, #236]	; (800476c <HAL_RCC_OscConfig+0x274>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	4937      	ldr	r1, [pc, #220]	; (800476c <HAL_RCC_OscConfig+0x274>)
 800468e:	4313      	orrs	r3, r2
 8004690:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004692:	e03a      	b.n	800470a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d020      	beq.n	80046de <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800469c:	4b34      	ldr	r3, [pc, #208]	; (8004770 <HAL_RCC_OscConfig+0x278>)
 800469e:	2201      	movs	r2, #1
 80046a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a2:	f7fe fcbb 	bl	800301c <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a8:	e008      	b.n	80046bc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046aa:	f7fe fcb7 	bl	800301c <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e1b4      	b.n	8004a26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046bc:	4b2b      	ldr	r3, [pc, #172]	; (800476c <HAL_RCC_OscConfig+0x274>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0f0      	beq.n	80046aa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c8:	4b28      	ldr	r3, [pc, #160]	; (800476c <HAL_RCC_OscConfig+0x274>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	4925      	ldr	r1, [pc, #148]	; (800476c <HAL_RCC_OscConfig+0x274>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	600b      	str	r3, [r1, #0]
 80046dc:	e015      	b.n	800470a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046de:	4b24      	ldr	r3, [pc, #144]	; (8004770 <HAL_RCC_OscConfig+0x278>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e4:	f7fe fc9a 	bl	800301c <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046ec:	f7fe fc96 	bl	800301c <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e193      	b.n	8004a26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046fe:	4b1b      	ldr	r3, [pc, #108]	; (800476c <HAL_RCC_OscConfig+0x274>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1f0      	bne.n	80046ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0308 	and.w	r3, r3, #8
 8004712:	2b00      	cmp	r3, #0
 8004714:	d036      	beq.n	8004784 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d016      	beq.n	800474c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800471e:	4b15      	ldr	r3, [pc, #84]	; (8004774 <HAL_RCC_OscConfig+0x27c>)
 8004720:	2201      	movs	r2, #1
 8004722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004724:	f7fe fc7a 	bl	800301c <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800472c:	f7fe fc76 	bl	800301c <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e173      	b.n	8004a26 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800473e:	4b0b      	ldr	r3, [pc, #44]	; (800476c <HAL_RCC_OscConfig+0x274>)
 8004740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0f0      	beq.n	800472c <HAL_RCC_OscConfig+0x234>
 800474a:	e01b      	b.n	8004784 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800474c:	4b09      	ldr	r3, [pc, #36]	; (8004774 <HAL_RCC_OscConfig+0x27c>)
 800474e:	2200      	movs	r2, #0
 8004750:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004752:	f7fe fc63 	bl	800301c <HAL_GetTick>
 8004756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004758:	e00e      	b.n	8004778 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800475a:	f7fe fc5f 	bl	800301c <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b02      	cmp	r3, #2
 8004766:	d907      	bls.n	8004778 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e15c      	b.n	8004a26 <HAL_RCC_OscConfig+0x52e>
 800476c:	40023800 	.word	0x40023800
 8004770:	42470000 	.word	0x42470000
 8004774:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004778:	4b8a      	ldr	r3, [pc, #552]	; (80049a4 <HAL_RCC_OscConfig+0x4ac>)
 800477a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1ea      	bne.n	800475a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 8097 	beq.w	80048c0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004792:	2300      	movs	r3, #0
 8004794:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004796:	4b83      	ldr	r3, [pc, #524]	; (80049a4 <HAL_RCC_OscConfig+0x4ac>)
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10f      	bne.n	80047c2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047a2:	2300      	movs	r3, #0
 80047a4:	60bb      	str	r3, [r7, #8]
 80047a6:	4b7f      	ldr	r3, [pc, #508]	; (80049a4 <HAL_RCC_OscConfig+0x4ac>)
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	4a7e      	ldr	r2, [pc, #504]	; (80049a4 <HAL_RCC_OscConfig+0x4ac>)
 80047ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b0:	6413      	str	r3, [r2, #64]	; 0x40
 80047b2:	4b7c      	ldr	r3, [pc, #496]	; (80049a4 <HAL_RCC_OscConfig+0x4ac>)
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ba:	60bb      	str	r3, [r7, #8]
 80047bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047be:	2301      	movs	r3, #1
 80047c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c2:	4b79      	ldr	r3, [pc, #484]	; (80049a8 <HAL_RCC_OscConfig+0x4b0>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d118      	bne.n	8004800 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047ce:	4b76      	ldr	r3, [pc, #472]	; (80049a8 <HAL_RCC_OscConfig+0x4b0>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a75      	ldr	r2, [pc, #468]	; (80049a8 <HAL_RCC_OscConfig+0x4b0>)
 80047d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047da:	f7fe fc1f 	bl	800301c <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e0:	e008      	b.n	80047f4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e2:	f7fe fc1b 	bl	800301c <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e118      	b.n	8004a26 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f4:	4b6c      	ldr	r3, [pc, #432]	; (80049a8 <HAL_RCC_OscConfig+0x4b0>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0f0      	beq.n	80047e2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d106      	bne.n	8004816 <HAL_RCC_OscConfig+0x31e>
 8004808:	4b66      	ldr	r3, [pc, #408]	; (80049a4 <HAL_RCC_OscConfig+0x4ac>)
 800480a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480c:	4a65      	ldr	r2, [pc, #404]	; (80049a4 <HAL_RCC_OscConfig+0x4ac>)
 800480e:	f043 0301 	orr.w	r3, r3, #1
 8004812:	6713      	str	r3, [r2, #112]	; 0x70
 8004814:	e01c      	b.n	8004850 <HAL_RCC_OscConfig+0x358>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	2b05      	cmp	r3, #5
 800481c:	d10c      	bne.n	8004838 <HAL_RCC_OscConfig+0x340>
 800481e:	4b61      	ldr	r3, [pc, #388]	; (80049a4 <HAL_RCC_OscConfig+0x4ac>)
 8004820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004822:	4a60      	ldr	r2, [pc, #384]	; (80049a4 <HAL_RCC_OscConfig+0x4ac>)
 8004824:	f043 0304 	orr.w	r3, r3, #4
 8004828:	6713      	str	r3, [r2, #112]	; 0x70
 800482a:	4b5e      	ldr	r3, [pc, #376]	; (80049a4 <HAL_RCC_OscConfig+0x4ac>)
 800482c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482e:	4a5d      	ldr	r2, [pc, #372]	; (80049a4 <HAL_RCC_OscConfig+0x4ac>)
 8004830:	f043 0301 	orr.w	r3, r3, #1
 8004834:	6713      	str	r3, [r2, #112]	; 0x70
 8004836:	e00b      	b.n	8004850 <HAL_RCC_OscConfig+0x358>
 8004838:	4b5a      	ldr	r3, [pc, #360]	; (80049a4 <HAL_RCC_OscConfig+0x4ac>)
 800483a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483c:	4a59      	ldr	r2, [pc, #356]	; (80049a4 <HAL_RCC_OscConfig+0x4ac>)
 800483e:	f023 0301 	bic.w	r3, r3, #1
 8004842:	6713      	str	r3, [r2, #112]	; 0x70
 8004844:	4b57      	ldr	r3, [pc, #348]	; (80049a4 <HAL_RCC_OscConfig+0x4ac>)
 8004846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004848:	4a56      	ldr	r2, [pc, #344]	; (80049a4 <HAL_RCC_OscConfig+0x4ac>)
 800484a:	f023 0304 	bic.w	r3, r3, #4
 800484e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d015      	beq.n	8004884 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004858:	f7fe fbe0 	bl	800301c <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800485e:	e00a      	b.n	8004876 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004860:	f7fe fbdc 	bl	800301c <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	f241 3288 	movw	r2, #5000	; 0x1388
 800486e:	4293      	cmp	r3, r2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e0d7      	b.n	8004a26 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004876:	4b4b      	ldr	r3, [pc, #300]	; (80049a4 <HAL_RCC_OscConfig+0x4ac>)
 8004878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0ee      	beq.n	8004860 <HAL_RCC_OscConfig+0x368>
 8004882:	e014      	b.n	80048ae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004884:	f7fe fbca 	bl	800301c <HAL_GetTick>
 8004888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800488a:	e00a      	b.n	80048a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800488c:	f7fe fbc6 	bl	800301c <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	f241 3288 	movw	r2, #5000	; 0x1388
 800489a:	4293      	cmp	r3, r2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e0c1      	b.n	8004a26 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048a2:	4b40      	ldr	r3, [pc, #256]	; (80049a4 <HAL_RCC_OscConfig+0x4ac>)
 80048a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1ee      	bne.n	800488c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048ae:	7dfb      	ldrb	r3, [r7, #23]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d105      	bne.n	80048c0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048b4:	4b3b      	ldr	r3, [pc, #236]	; (80049a4 <HAL_RCC_OscConfig+0x4ac>)
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	4a3a      	ldr	r2, [pc, #232]	; (80049a4 <HAL_RCC_OscConfig+0x4ac>)
 80048ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 80ad 	beq.w	8004a24 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048ca:	4b36      	ldr	r3, [pc, #216]	; (80049a4 <HAL_RCC_OscConfig+0x4ac>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 030c 	and.w	r3, r3, #12
 80048d2:	2b08      	cmp	r3, #8
 80048d4:	d060      	beq.n	8004998 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d145      	bne.n	800496a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048de:	4b33      	ldr	r3, [pc, #204]	; (80049ac <HAL_RCC_OscConfig+0x4b4>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e4:	f7fe fb9a 	bl	800301c <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048ec:	f7fe fb96 	bl	800301c <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e093      	b.n	8004a26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048fe:	4b29      	ldr	r3, [pc, #164]	; (80049a4 <HAL_RCC_OscConfig+0x4ac>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1f0      	bne.n	80048ec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	69da      	ldr	r2, [r3, #28]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	019b      	lsls	r3, r3, #6
 800491a:	431a      	orrs	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004920:	085b      	lsrs	r3, r3, #1
 8004922:	3b01      	subs	r3, #1
 8004924:	041b      	lsls	r3, r3, #16
 8004926:	431a      	orrs	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492c:	061b      	lsls	r3, r3, #24
 800492e:	431a      	orrs	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004934:	071b      	lsls	r3, r3, #28
 8004936:	491b      	ldr	r1, [pc, #108]	; (80049a4 <HAL_RCC_OscConfig+0x4ac>)
 8004938:	4313      	orrs	r3, r2
 800493a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800493c:	4b1b      	ldr	r3, [pc, #108]	; (80049ac <HAL_RCC_OscConfig+0x4b4>)
 800493e:	2201      	movs	r2, #1
 8004940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004942:	f7fe fb6b 	bl	800301c <HAL_GetTick>
 8004946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004948:	e008      	b.n	800495c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800494a:	f7fe fb67 	bl	800301c <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d901      	bls.n	800495c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e064      	b.n	8004a26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800495c:	4b11      	ldr	r3, [pc, #68]	; (80049a4 <HAL_RCC_OscConfig+0x4ac>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0f0      	beq.n	800494a <HAL_RCC_OscConfig+0x452>
 8004968:	e05c      	b.n	8004a24 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800496a:	4b10      	ldr	r3, [pc, #64]	; (80049ac <HAL_RCC_OscConfig+0x4b4>)
 800496c:	2200      	movs	r2, #0
 800496e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004970:	f7fe fb54 	bl	800301c <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004978:	f7fe fb50 	bl	800301c <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e04d      	b.n	8004a26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800498a:	4b06      	ldr	r3, [pc, #24]	; (80049a4 <HAL_RCC_OscConfig+0x4ac>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1f0      	bne.n	8004978 <HAL_RCC_OscConfig+0x480>
 8004996:	e045      	b.n	8004a24 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d107      	bne.n	80049b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e040      	b.n	8004a26 <HAL_RCC_OscConfig+0x52e>
 80049a4:	40023800 	.word	0x40023800
 80049a8:	40007000 	.word	0x40007000
 80049ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049b0:	4b1f      	ldr	r3, [pc, #124]	; (8004a30 <HAL_RCC_OscConfig+0x538>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d030      	beq.n	8004a20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d129      	bne.n	8004a20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d122      	bne.n	8004a20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049e0:	4013      	ands	r3, r2
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d119      	bne.n	8004a20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f6:	085b      	lsrs	r3, r3, #1
 80049f8:	3b01      	subs	r3, #1
 80049fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d10f      	bne.n	8004a20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d107      	bne.n	8004a20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d001      	beq.n	8004a24 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e000      	b.n	8004a26 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	40023800 	.word	0x40023800

08004a34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e07b      	b.n	8004b3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d108      	bne.n	8004a60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a56:	d009      	beq.n	8004a6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	61da      	str	r2, [r3, #28]
 8004a5e:	e005      	b.n	8004a6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d106      	bne.n	8004a8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7fd ff68 	bl	800295c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aa2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004adc:	431a      	orrs	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af0:	ea42 0103 	orr.w	r1, r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	430a      	orrs	r2, r1
 8004b02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	0c1b      	lsrs	r3, r3, #16
 8004b0a:	f003 0104 	and.w	r1, r3, #4
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b12:	f003 0210 	and.w	r2, r3, #16
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	69da      	ldr	r2, [r3, #28]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b088      	sub	sp, #32
 8004b4a:	af02      	add	r7, sp, #8
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	603b      	str	r3, [r7, #0]
 8004b52:	4613      	mov	r3, r2
 8004b54:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b56:	2300      	movs	r3, #0
 8004b58:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b62:	d112      	bne.n	8004b8a <HAL_SPI_Receive+0x44>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10e      	bne.n	8004b8a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2204      	movs	r2, #4
 8004b70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b74:	88fa      	ldrh	r2, [r7, #6]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	68b9      	ldr	r1, [r7, #8]
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 f8f1 	bl	8004d68 <HAL_SPI_TransmitReceive>
 8004b86:	4603      	mov	r3, r0
 8004b88:	e0ea      	b.n	8004d60 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d101      	bne.n	8004b98 <HAL_SPI_Receive+0x52>
 8004b94:	2302      	movs	r3, #2
 8004b96:	e0e3      	b.n	8004d60 <HAL_SPI_Receive+0x21a>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ba0:	f7fe fa3c 	bl	800301c <HAL_GetTick>
 8004ba4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d002      	beq.n	8004bb8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bb6:	e0ca      	b.n	8004d4e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <HAL_SPI_Receive+0x7e>
 8004bbe:	88fb      	ldrh	r3, [r7, #6]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d102      	bne.n	8004bca <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bc8:	e0c1      	b.n	8004d4e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2204      	movs	r2, #4
 8004bce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	88fa      	ldrh	r2, [r7, #6]
 8004be2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	88fa      	ldrh	r2, [r7, #6]
 8004be8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c10:	d10f      	bne.n	8004c32 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c20:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c30:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3c:	2b40      	cmp	r3, #64	; 0x40
 8004c3e:	d007      	beq.n	8004c50 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c4e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d162      	bne.n	8004d1e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004c58:	e02e      	b.n	8004cb8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d115      	bne.n	8004c94 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f103 020c 	add.w	r2, r3, #12
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c74:	7812      	ldrb	r2, [r2, #0]
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7e:	1c5a      	adds	r2, r3, #1
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c92:	e011      	b.n	8004cb8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c94:	f7fe f9c2 	bl	800301c <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d803      	bhi.n	8004cac <HAL_SPI_Receive+0x166>
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004caa:	d102      	bne.n	8004cb2 <HAL_SPI_Receive+0x16c>
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d102      	bne.n	8004cb8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004cb6:	e04a      	b.n	8004d4e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1cb      	bne.n	8004c5a <HAL_SPI_Receive+0x114>
 8004cc2:	e031      	b.n	8004d28 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d113      	bne.n	8004cfa <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68da      	ldr	r2, [r3, #12]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cdc:	b292      	uxth	r2, r2
 8004cde:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce4:	1c9a      	adds	r2, r3, #2
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cf8:	e011      	b.n	8004d1e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cfa:	f7fe f98f 	bl	800301c <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	683a      	ldr	r2, [r7, #0]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d803      	bhi.n	8004d12 <HAL_SPI_Receive+0x1cc>
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d10:	d102      	bne.n	8004d18 <HAL_SPI_Receive+0x1d2>
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d102      	bne.n	8004d1e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d1c:	e017      	b.n	8004d4e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1cd      	bne.n	8004cc4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	6839      	ldr	r1, [r7, #0]
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 fe71 	bl	8005a14 <SPI_EndRxTransaction>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d002      	beq.n	8004d4c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	75fb      	strb	r3, [r7, #23]
 8004d4a:	e000      	b.n	8004d4e <HAL_SPI_Receive+0x208>
  }

error :
 8004d4c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3718      	adds	r7, #24
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b08c      	sub	sp, #48	; 0x30
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d76:	2301      	movs	r3, #1
 8004d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d101      	bne.n	8004d8e <HAL_SPI_TransmitReceive+0x26>
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	e18a      	b.n	80050a4 <HAL_SPI_TransmitReceive+0x33c>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d96:	f7fe f941 	bl	800301c <HAL_GetTick>
 8004d9a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004dac:	887b      	ldrh	r3, [r7, #2]
 8004dae:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004db0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d00f      	beq.n	8004dd8 <HAL_SPI_TransmitReceive+0x70>
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dbe:	d107      	bne.n	8004dd0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d103      	bne.n	8004dd0 <HAL_SPI_TransmitReceive+0x68>
 8004dc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004dcc:	2b04      	cmp	r3, #4
 8004dce:	d003      	beq.n	8004dd8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004dd6:	e15b      	b.n	8005090 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d005      	beq.n	8004dea <HAL_SPI_TransmitReceive+0x82>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <HAL_SPI_TransmitReceive+0x82>
 8004de4:	887b      	ldrh	r3, [r7, #2]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d103      	bne.n	8004df2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004df0:	e14e      	b.n	8005090 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	d003      	beq.n	8004e06 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2205      	movs	r2, #5
 8004e02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	887a      	ldrh	r2, [r7, #2]
 8004e16:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	887a      	ldrh	r2, [r7, #2]
 8004e1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	887a      	ldrh	r2, [r7, #2]
 8004e28:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	887a      	ldrh	r2, [r7, #2]
 8004e2e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e46:	2b40      	cmp	r3, #64	; 0x40
 8004e48:	d007      	beq.n	8004e5a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e62:	d178      	bne.n	8004f56 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d002      	beq.n	8004e72 <HAL_SPI_TransmitReceive+0x10a>
 8004e6c:	8b7b      	ldrh	r3, [r7, #26]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d166      	bne.n	8004f40 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e76:	881a      	ldrh	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e82:	1c9a      	adds	r2, r3, #2
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e96:	e053      	b.n	8004f40 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d11b      	bne.n	8004ede <HAL_SPI_TransmitReceive+0x176>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d016      	beq.n	8004ede <HAL_SPI_TransmitReceive+0x176>
 8004eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d113      	bne.n	8004ede <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eba:	881a      	ldrh	r2, [r3, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec6:	1c9a      	adds	r2, r3, #2
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d119      	bne.n	8004f20 <HAL_SPI_TransmitReceive+0x1b8>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d014      	beq.n	8004f20 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68da      	ldr	r2, [r3, #12]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f00:	b292      	uxth	r2, r2
 8004f02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f08:	1c9a      	adds	r2, r3, #2
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	3b01      	subs	r3, #1
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f20:	f7fe f87c 	bl	800301c <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d807      	bhi.n	8004f40 <HAL_SPI_TransmitReceive+0x1d8>
 8004f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f36:	d003      	beq.n	8004f40 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f3e:	e0a7      	b.n	8005090 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1a6      	bne.n	8004e98 <HAL_SPI_TransmitReceive+0x130>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1a1      	bne.n	8004e98 <HAL_SPI_TransmitReceive+0x130>
 8004f54:	e07c      	b.n	8005050 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d002      	beq.n	8004f64 <HAL_SPI_TransmitReceive+0x1fc>
 8004f5e:	8b7b      	ldrh	r3, [r7, #26]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d16b      	bne.n	800503c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	330c      	adds	r3, #12
 8004f6e:	7812      	ldrb	r2, [r2, #0]
 8004f70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f76:	1c5a      	adds	r2, r3, #1
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	3b01      	subs	r3, #1
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f8a:	e057      	b.n	800503c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d11c      	bne.n	8004fd4 <HAL_SPI_TransmitReceive+0x26c>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d017      	beq.n	8004fd4 <HAL_SPI_TransmitReceive+0x26c>
 8004fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d114      	bne.n	8004fd4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	330c      	adds	r3, #12
 8004fb4:	7812      	ldrb	r2, [r2, #0]
 8004fb6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbc:	1c5a      	adds	r2, r3, #1
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d119      	bne.n	8005016 <HAL_SPI_TransmitReceive+0x2ae>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d014      	beq.n	8005016 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68da      	ldr	r2, [r3, #12]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff6:	b2d2      	uxtb	r2, r2
 8004ff8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffe:	1c5a      	adds	r2, r3, #1
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005008:	b29b      	uxth	r3, r3
 800500a:	3b01      	subs	r3, #1
 800500c:	b29a      	uxth	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005012:	2301      	movs	r3, #1
 8005014:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005016:	f7fe f801 	bl	800301c <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005022:	429a      	cmp	r2, r3
 8005024:	d803      	bhi.n	800502e <HAL_SPI_TransmitReceive+0x2c6>
 8005026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502c:	d102      	bne.n	8005034 <HAL_SPI_TransmitReceive+0x2cc>
 800502e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005030:	2b00      	cmp	r3, #0
 8005032:	d103      	bne.n	800503c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800503a:	e029      	b.n	8005090 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005040:	b29b      	uxth	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1a2      	bne.n	8004f8c <HAL_SPI_TransmitReceive+0x224>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800504a:	b29b      	uxth	r3, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	d19d      	bne.n	8004f8c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005052:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f000 fd43 	bl	8005ae0 <SPI_EndRxTxTransaction>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d006      	beq.n	800506e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2220      	movs	r2, #32
 800506a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800506c:	e010      	b.n	8005090 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10b      	bne.n	800508e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005076:	2300      	movs	r3, #0
 8005078:	617b      	str	r3, [r7, #20]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	617b      	str	r3, [r7, #20]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	617b      	str	r3, [r7, #20]
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	e000      	b.n	8005090 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800508e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3730      	adds	r7, #48	; 0x30
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b087      	sub	sp, #28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	4613      	mov	r3, r2
 80050b8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d101      	bne.n	80050cc <HAL_SPI_Transmit_IT+0x20>
 80050c8:	2302      	movs	r3, #2
 80050ca:	e06f      	b.n	80051ac <HAL_SPI_Transmit_IT+0x100>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d002      	beq.n	80050e0 <HAL_SPI_Transmit_IT+0x34>
 80050da:	88fb      	ldrh	r3, [r7, #6]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d102      	bne.n	80050e6 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80050e4:	e05d      	b.n	80051a2 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d002      	beq.n	80050f8 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80050f2:	2302      	movs	r3, #2
 80050f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80050f6:	e054      	b.n	80051a2 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2203      	movs	r2, #3
 80050fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	88fa      	ldrh	r2, [r7, #6]
 8005110:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	88fa      	ldrh	r2, [r7, #6]
 8005116:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d003      	beq.n	8005140 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4a1f      	ldr	r2, [pc, #124]	; (80051b8 <HAL_SPI_Transmit_IT+0x10c>)
 800513c:	645a      	str	r2, [r3, #68]	; 0x44
 800513e:	e002      	b.n	8005146 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4a1e      	ldr	r2, [pc, #120]	; (80051bc <HAL_SPI_Transmit_IT+0x110>)
 8005144:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800514e:	d10f      	bne.n	8005170 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800515e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800516e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800517e:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800518a:	2b40      	cmp	r3, #64	; 0x40
 800518c:	d008      	beq.n	80051a0 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800519c:	601a      	str	r2, [r3, #0]
 800519e:	e000      	b.n	80051a2 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 80051a0:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80051aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	371c      	adds	r7, #28
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	080058c1 	.word	0x080058c1
 80051bc:	0800587b 	.word	0x0800587b

080051c0 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	4613      	mov	r3, r2
 80051cc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051ce:	2300      	movs	r3, #0
 80051d0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d110      	bne.n	80051fc <HAL_SPI_Receive_IT+0x3c>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051e2:	d10b      	bne.n	80051fc <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2204      	movs	r2, #4
 80051e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80051ec:	88fb      	ldrh	r3, [r7, #6]
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	68b9      	ldr	r1, [r7, #8]
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f000 f882 	bl	80052fc <HAL_SPI_TransmitReceive_IT>
 80051f8:	4603      	mov	r3, r0
 80051fa:	e076      	b.n	80052ea <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005202:	2b01      	cmp	r3, #1
 8005204:	d101      	bne.n	800520a <HAL_SPI_Receive_IT+0x4a>
 8005206:	2302      	movs	r3, #2
 8005208:	e06f      	b.n	80052ea <HAL_SPI_Receive_IT+0x12a>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b01      	cmp	r3, #1
 800521c:	d002      	beq.n	8005224 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800521e:	2302      	movs	r3, #2
 8005220:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005222:	e05d      	b.n	80052e0 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d002      	beq.n	8005230 <HAL_SPI_Receive_IT+0x70>
 800522a:	88fb      	ldrh	r3, [r7, #6]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d102      	bne.n	8005236 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005234:	e054      	b.n	80052e0 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2204      	movs	r2, #4
 800523a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	88fa      	ldrh	r2, [r7, #6]
 800524e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	88fa      	ldrh	r2, [r7, #6]
 8005254:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4a1e      	ldr	r2, [pc, #120]	; (80052f4 <HAL_SPI_Receive_IT+0x134>)
 800527a:	641a      	str	r2, [r3, #64]	; 0x40
 800527c:	e002      	b.n	8005284 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	4a1d      	ldr	r2, [pc, #116]	; (80052f8 <HAL_SPI_Receive_IT+0x138>)
 8005282:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800528c:	d10f      	bne.n	80052ae <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800529c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80052ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80052bc:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c8:	2b40      	cmp	r3, #64	; 0x40
 80052ca:	d008      	beq.n	80052de <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	e000      	b.n	80052e0 <HAL_SPI_Receive_IT+0x120>
  }

error :
 80052de:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3718      	adds	r7, #24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	08005835 	.word	0x08005835
 80052f8:	080057eb 	.word	0x080057eb

080052fc <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b087      	sub	sp, #28
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005314:	2b01      	cmp	r3, #1
 8005316:	d101      	bne.n	800531c <HAL_SPI_TransmitReceive_IT+0x20>
 8005318:	2302      	movs	r3, #2
 800531a:	e075      	b.n	8005408 <HAL_SPI_TransmitReceive_IT+0x10c>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800532a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005332:	7dbb      	ldrb	r3, [r7, #22]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d00d      	beq.n	8005354 <HAL_SPI_TransmitReceive_IT+0x58>
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800533e:	d106      	bne.n	800534e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d102      	bne.n	800534e <HAL_SPI_TransmitReceive_IT+0x52>
 8005348:	7dbb      	ldrb	r3, [r7, #22]
 800534a:	2b04      	cmp	r3, #4
 800534c:	d002      	beq.n	8005354 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800534e:	2302      	movs	r3, #2
 8005350:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005352:	e054      	b.n	80053fe <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d005      	beq.n	8005366 <HAL_SPI_TransmitReceive_IT+0x6a>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d002      	beq.n	8005366 <HAL_SPI_TransmitReceive_IT+0x6a>
 8005360:	887b      	ldrh	r3, [r7, #2]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d102      	bne.n	800536c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	75fb      	strb	r3, [r7, #23]
    goto error;
 800536a:	e048      	b.n	80053fe <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b04      	cmp	r3, #4
 8005376:	d003      	beq.n	8005380 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2205      	movs	r2, #5
 800537c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	887a      	ldrh	r2, [r7, #2]
 8005390:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	887a      	ldrh	r2, [r7, #2]
 8005396:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	887a      	ldrh	r2, [r7, #2]
 80053a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	887a      	ldrh	r2, [r7, #2]
 80053a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d006      	beq.n	80053c0 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4a17      	ldr	r2, [pc, #92]	; (8005414 <HAL_SPI_TransmitReceive_IT+0x118>)
 80053b6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	4a17      	ldr	r2, [pc, #92]	; (8005418 <HAL_SPI_TransmitReceive_IT+0x11c>)
 80053bc:	645a      	str	r2, [r3, #68]	; 0x44
 80053be:	e005      	b.n	80053cc <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4a16      	ldr	r2, [pc, #88]	; (800541c <HAL_SPI_TransmitReceive_IT+0x120>)
 80053c4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	4a15      	ldr	r2, [pc, #84]	; (8005420 <HAL_SPI_TransmitReceive_IT+0x124>)
 80053ca:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80053da:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e6:	2b40      	cmp	r3, #64	; 0x40
 80053e8:	d008      	beq.n	80053fc <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	e000      	b.n	80053fe <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 80053fc:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005406:	7dfb      	ldrb	r3, [r7, #23]
}
 8005408:	4618      	mov	r0, r3
 800540a:	371c      	adds	r7, #28
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	0800572d 	.word	0x0800572d
 8005418:	0800578d 	.word	0x0800578d
 800541c:	08005669 	.word	0x08005669
 8005420:	080056cd 	.word	0x080056cd

08005424 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b088      	sub	sp, #32
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	099b      	lsrs	r3, r3, #6
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10f      	bne.n	8005468 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00a      	beq.n	8005468 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	099b      	lsrs	r3, r3, #6
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d004      	beq.n	8005468 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	4798      	blx	r3
    return;
 8005466:	e0d7      	b.n	8005618 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	085b      	lsrs	r3, r3, #1
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00a      	beq.n	800548a <HAL_SPI_IRQHandler+0x66>
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	09db      	lsrs	r3, r3, #7
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b00      	cmp	r3, #0
 800547e:	d004      	beq.n	800548a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	4798      	blx	r3
    return;
 8005488:	e0c6      	b.n	8005618 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	095b      	lsrs	r3, r3, #5
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10c      	bne.n	80054b0 <HAL_SPI_IRQHandler+0x8c>
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	099b      	lsrs	r3, r3, #6
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d106      	bne.n	80054b0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	0a1b      	lsrs	r3, r3, #8
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 80b4 	beq.w	8005618 <HAL_SPI_IRQHandler+0x1f4>
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	095b      	lsrs	r3, r3, #5
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	f000 80ad 	beq.w	8005618 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	099b      	lsrs	r3, r3, #6
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d023      	beq.n	8005512 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b03      	cmp	r3, #3
 80054d4:	d011      	beq.n	80054fa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054da:	f043 0204 	orr.w	r2, r3, #4
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054e2:	2300      	movs	r3, #0
 80054e4:	617b      	str	r3, [r7, #20]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	617b      	str	r3, [r7, #20]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	617b      	str	r3, [r7, #20]
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	e00b      	b.n	8005512 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054fa:	2300      	movs	r3, #0
 80054fc:	613b      	str	r3, [r7, #16]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	613b      	str	r3, [r7, #16]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	613b      	str	r3, [r7, #16]
 800550e:	693b      	ldr	r3, [r7, #16]
        return;
 8005510:	e082      	b.n	8005618 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	095b      	lsrs	r3, r3, #5
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b00      	cmp	r3, #0
 800551c:	d014      	beq.n	8005548 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005522:	f043 0201 	orr.w	r2, r3, #1
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800552a:	2300      	movs	r3, #0
 800552c:	60fb      	str	r3, [r7, #12]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	0a1b      	lsrs	r3, r3, #8
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00c      	beq.n	800556e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005558:	f043 0208 	orr.w	r2, r3, #8
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005560:	2300      	movs	r3, #0
 8005562:	60bb      	str	r3, [r7, #8]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	60bb      	str	r3, [r7, #8]
 800556c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005572:	2b00      	cmp	r3, #0
 8005574:	d04f      	beq.n	8005616 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005584:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b00      	cmp	r3, #0
 8005596:	d104      	bne.n	80055a2 <HAL_SPI_IRQHandler+0x17e>
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d034      	beq.n	800560c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f022 0203 	bic.w	r2, r2, #3
 80055b0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d011      	beq.n	80055de <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055be:	4a18      	ldr	r2, [pc, #96]	; (8005620 <HAL_SPI_IRQHandler+0x1fc>)
 80055c0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fd ffe0 	bl	800358c <HAL_DMA_Abort_IT>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d005      	beq.n	80055de <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d016      	beq.n	8005614 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ea:	4a0d      	ldr	r2, [pc, #52]	; (8005620 <HAL_SPI_IRQHandler+0x1fc>)
 80055ec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7fd ffca 	bl	800358c <HAL_DMA_Abort_IT>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00a      	beq.n	8005614 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005602:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800560a:	e003      	b.n	8005614 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f7fb fb9f 	bl	8000d50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005612:	e000      	b.n	8005616 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005614:	bf00      	nop
    return;
 8005616:	bf00      	nop
  }
}
 8005618:	3720      	adds	r7, #32
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	08005641 	.word	0x08005641

08005624 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005632:	b2db      	uxtb	r3, r3
}
 8005634:	4618      	mov	r0, r3
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f7fb fb78 	bl	8000d50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005660:	bf00      	nop
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f103 020c 	add.w	r2, r3, #12
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567c:	7812      	ldrb	r2, [r2, #0]
 800567e:	b2d2      	uxtb	r2, r2
 8005680:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005686:	1c5a      	adds	r2, r3, #1
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005690:	b29b      	uxth	r3, r3
 8005692:	3b01      	subs	r3, #1
 8005694:	b29a      	uxth	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800569e:	b29b      	uxth	r3, r3
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10f      	bne.n	80056c4 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80056b2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d102      	bne.n	80056c4 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 fa50 	bl	8005b64 <SPI_CloseRxTx_ISR>
    }
  }
}
 80056c4:	bf00      	nop
 80056c6:	3708      	adds	r7, #8
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	330c      	adds	r3, #12
 80056de:	7812      	ldrb	r2, [r2, #0]
 80056e0:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	3b01      	subs	r3, #1
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056fe:	b29b      	uxth	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10f      	bne.n	8005724 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005712:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005718:	b29b      	uxth	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d102      	bne.n	8005724 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 fa20 	bl	8005b64 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005724:	bf00      	nop
 8005726:	3708      	adds	r7, #8
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68da      	ldr	r2, [r3, #12]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573e:	b292      	uxth	r2, r2
 8005740:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005746:	1c9a      	adds	r2, r3, #2
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005750:	b29b      	uxth	r3, r3
 8005752:	3b01      	subs	r3, #1
 8005754:	b29a      	uxth	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800575e:	b29b      	uxth	r3, r3
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10f      	bne.n	8005784 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005772:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005778:	b29b      	uxth	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d102      	bne.n	8005784 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f9f0 	bl	8005b64 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005784:	bf00      	nop
 8005786:	3708      	adds	r7, #8
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005798:	881a      	ldrh	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a4:	1c9a      	adds	r2, r3, #2
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	3b01      	subs	r3, #1
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057bc:	b29b      	uxth	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10f      	bne.n	80057e2 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057d0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d102      	bne.n	80057e2 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f9c1 	bl	8005b64 <SPI_CloseRxTx_ISR>
    }
  }
}
 80057e2:	bf00      	nop
 80057e4:	3708      	adds	r7, #8
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b082      	sub	sp, #8
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f103 020c 	add.w	r2, r3, #12
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fe:	7812      	ldrb	r2, [r2, #0]
 8005800:	b2d2      	uxtb	r2, r2
 8005802:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005808:	1c5a      	adds	r2, r3, #1
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005812:	b29b      	uxth	r3, r3
 8005814:	3b01      	subs	r3, #1
 8005816:	b29a      	uxth	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005820:	b29b      	uxth	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d102      	bne.n	800582c <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 fa10 	bl	8005c4c <SPI_CloseRx_ISR>
  }
}
 800582c:	bf00      	nop
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68da      	ldr	r2, [r3, #12]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005846:	b292      	uxth	r2, r2
 8005848:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584e:	1c9a      	adds	r2, r3, #2
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005858:	b29b      	uxth	r3, r3
 800585a:	3b01      	subs	r3, #1
 800585c:	b29a      	uxth	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005866:	b29b      	uxth	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	d102      	bne.n	8005872 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 f9ed 	bl	8005c4c <SPI_CloseRx_ISR>
  }
}
 8005872:	bf00      	nop
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b082      	sub	sp, #8
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	330c      	adds	r3, #12
 800588c:	7812      	ldrb	r2, [r2, #0]
 800588e:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005894:	1c5a      	adds	r2, r3, #1
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800589e:	b29b      	uxth	r3, r3
 80058a0:	3b01      	subs	r3, #1
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d102      	bne.n	80058b8 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 fa0a 	bl	8005ccc <SPI_CloseTx_ISR>
  }
}
 80058b8:	bf00      	nop
 80058ba:	3708      	adds	r7, #8
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058cc:	881a      	ldrh	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d8:	1c9a      	adds	r2, r3, #2
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	3b01      	subs	r3, #1
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d102      	bne.n	80058fc <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f9e8 	bl	8005ccc <SPI_CloseTx_ISR>
  }
}
 80058fc:	bf00      	nop
 80058fe:	3708      	adds	r7, #8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b088      	sub	sp, #32
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	603b      	str	r3, [r7, #0]
 8005910:	4613      	mov	r3, r2
 8005912:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005914:	f7fd fb82 	bl	800301c <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591c:	1a9b      	subs	r3, r3, r2
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	4413      	add	r3, r2
 8005922:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005924:	f7fd fb7a 	bl	800301c <HAL_GetTick>
 8005928:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800592a:	4b39      	ldr	r3, [pc, #228]	; (8005a10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	015b      	lsls	r3, r3, #5
 8005930:	0d1b      	lsrs	r3, r3, #20
 8005932:	69fa      	ldr	r2, [r7, #28]
 8005934:	fb02 f303 	mul.w	r3, r2, r3
 8005938:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800593a:	e054      	b.n	80059e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005942:	d050      	beq.n	80059e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005944:	f7fd fb6a 	bl	800301c <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	69fa      	ldr	r2, [r7, #28]
 8005950:	429a      	cmp	r2, r3
 8005952:	d902      	bls.n	800595a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d13d      	bne.n	80059d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005968:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005972:	d111      	bne.n	8005998 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800597c:	d004      	beq.n	8005988 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005986:	d107      	bne.n	8005998 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005996:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059a0:	d10f      	bne.n	80059c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059b0:	601a      	str	r2, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e017      	b.n	8005a06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80059dc:	2300      	movs	r3, #0
 80059de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	3b01      	subs	r3, #1
 80059e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	689a      	ldr	r2, [r3, #8]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	4013      	ands	r3, r2
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	bf0c      	ite	eq
 80059f6:	2301      	moveq	r3, #1
 80059f8:	2300      	movne	r3, #0
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	461a      	mov	r2, r3
 80059fe:	79fb      	ldrb	r3, [r7, #7]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d19b      	bne.n	800593c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3720      	adds	r7, #32
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	2000000c 	.word	0x2000000c

08005a14 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b086      	sub	sp, #24
 8005a18:	af02      	add	r7, sp, #8
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a28:	d111      	bne.n	8005a4e <SPI_EndRxTransaction+0x3a>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a32:	d004      	beq.n	8005a3e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a3c:	d107      	bne.n	8005a4e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a4c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a56:	d12a      	bne.n	8005aae <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a60:	d012      	beq.n	8005a88 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	2180      	movs	r1, #128	; 0x80
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f7ff ff49 	bl	8005904 <SPI_WaitFlagStateUntilTimeout>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d02d      	beq.n	8005ad4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a7c:	f043 0220 	orr.w	r2, r3, #32
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e026      	b.n	8005ad6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	2101      	movs	r1, #1
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f7ff ff36 	bl	8005904 <SPI_WaitFlagStateUntilTimeout>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d01a      	beq.n	8005ad4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa2:	f043 0220 	orr.w	r2, r3, #32
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e013      	b.n	8005ad6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	2101      	movs	r1, #1
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f7ff ff23 	bl	8005904 <SPI_WaitFlagStateUntilTimeout>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d007      	beq.n	8005ad4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac8:	f043 0220 	orr.w	r2, r3, #32
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e000      	b.n	8005ad6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
	...

08005ae0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b088      	sub	sp, #32
 8005ae4:	af02      	add	r7, sp, #8
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005aec:	4b1b      	ldr	r3, [pc, #108]	; (8005b5c <SPI_EndRxTxTransaction+0x7c>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a1b      	ldr	r2, [pc, #108]	; (8005b60 <SPI_EndRxTxTransaction+0x80>)
 8005af2:	fba2 2303 	umull	r2, r3, r2, r3
 8005af6:	0d5b      	lsrs	r3, r3, #21
 8005af8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005afc:	fb02 f303 	mul.w	r3, r2, r3
 8005b00:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b0a:	d112      	bne.n	8005b32 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	2200      	movs	r2, #0
 8005b14:	2180      	movs	r1, #128	; 0x80
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f7ff fef4 	bl	8005904 <SPI_WaitFlagStateUntilTimeout>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d016      	beq.n	8005b50 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b26:	f043 0220 	orr.w	r2, r3, #32
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e00f      	b.n	8005b52 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00a      	beq.n	8005b4e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b48:	2b80      	cmp	r3, #128	; 0x80
 8005b4a:	d0f2      	beq.n	8005b32 <SPI_EndRxTxTransaction+0x52>
 8005b4c:	e000      	b.n	8005b50 <SPI_EndRxTxTransaction+0x70>
        break;
 8005b4e:	bf00      	nop
  }

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3718      	adds	r7, #24
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	2000000c 	.word	0x2000000c
 8005b60:	165e9f81 	.word	0x165e9f81

08005b64 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005b6c:	4b35      	ldr	r3, [pc, #212]	; (8005c44 <SPI_CloseRxTx_ISR+0xe0>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a35      	ldr	r2, [pc, #212]	; (8005c48 <SPI_CloseRxTx_ISR+0xe4>)
 8005b72:	fba2 2303 	umull	r2, r3, r2, r3
 8005b76:	0a5b      	lsrs	r3, r3, #9
 8005b78:	2264      	movs	r2, #100	; 0x64
 8005b7a:	fb02 f303 	mul.w	r3, r2, r3
 8005b7e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b80:	f7fd fa4c 	bl	800301c <HAL_GetTick>
 8005b84:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 0220 	bic.w	r2, r2, #32
 8005b94:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d106      	bne.n	8005baa <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba0:	f043 0220 	orr.w	r2, r3, #32
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ba8:	e009      	b.n	8005bbe <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	3b01      	subs	r3, #1
 8005bae:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f003 0302 	and.w	r3, r3, #2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d0eb      	beq.n	8005b96 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	2164      	movs	r1, #100	; 0x64
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7ff ff8c 	bl	8005ae0 <SPI_EndRxTxTransaction>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d005      	beq.n	8005bda <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd2:	f043 0220 	orr.w	r2, r3, #32
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10a      	bne.n	8005bf8 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005be2:	2300      	movs	r3, #0
 8005be4:	60fb      	str	r3, [r7, #12]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	60fb      	str	r3, [r7, #12]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d115      	bne.n	8005c2c <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	2b04      	cmp	r3, #4
 8005c0a:	d107      	bne.n	8005c1c <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f7fb f889 	bl	8000d2c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005c1a:	e00e      	b.n	8005c3a <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f7fb f867 	bl	8000cf8 <HAL_SPI_TxRxCpltCallback>
}
 8005c2a:	e006      	b.n	8005c3a <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f7fb f88b 	bl	8000d50 <HAL_SPI_ErrorCallback>
}
 8005c3a:	bf00      	nop
 8005c3c:	3718      	adds	r7, #24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	2000000c 	.word	0x2000000c
 8005c48:	057619f1 	.word	0x057619f1

08005c4c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	685a      	ldr	r2, [r3, #4]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c62:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8005c64:	f7fd f9da 	bl	800301c <HAL_GetTick>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	2164      	movs	r1, #100	; 0x64
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7ff fed0 	bl	8005a14 <SPI_EndRxTransaction>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d005      	beq.n	8005c86 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c7e:	f043 0220 	orr.w	r2, r3, #32
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10a      	bne.n	8005ca4 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c8e:	2300      	movs	r3, #0
 8005c90:	60fb      	str	r3, [r7, #12]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	60fb      	str	r3, [r7, #12]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	60fb      	str	r3, [r7, #12]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d103      	bne.n	8005cbc <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7fb f839 	bl	8000d2c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005cba:	e002      	b.n	8005cc2 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f7fb f847 	bl	8000d50 <HAL_SPI_ErrorCallback>
}
 8005cc2:	bf00      	nop
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
	...

08005ccc <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005cd4:	4b2c      	ldr	r3, [pc, #176]	; (8005d88 <SPI_CloseTx_ISR+0xbc>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a2c      	ldr	r2, [pc, #176]	; (8005d8c <SPI_CloseTx_ISR+0xc0>)
 8005cda:	fba2 2303 	umull	r2, r3, r2, r3
 8005cde:	0a5b      	lsrs	r3, r3, #9
 8005ce0:	2264      	movs	r2, #100	; 0x64
 8005ce2:	fb02 f303 	mul.w	r3, r2, r3
 8005ce6:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ce8:	f7fd f998 	bl	800301c <HAL_GetTick>
 8005cec:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d106      	bne.n	8005d02 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf8:	f043 0220 	orr.w	r2, r3, #32
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d00:	e009      	b.n	8005d16 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	3b01      	subs	r3, #1
 8005d06:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d0eb      	beq.n	8005cee <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d24:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	2164      	movs	r1, #100	; 0x64
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7ff fed8 	bl	8005ae0 <SPI_EndRxTxTransaction>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d005      	beq.n	8005d42 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d3a:	f043 0220 	orr.w	r2, r3, #32
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10a      	bne.n	8005d60 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60fb      	str	r3, [r7, #12]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	60fb      	str	r3, [r7, #12]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	60fb      	str	r3, [r7, #12]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d003      	beq.n	8005d78 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f7fa ffed 	bl	8000d50 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8005d76:	e002      	b.n	8005d7e <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f7fa ffc7 	bl	8000d0c <HAL_SPI_TxCpltCallback>
}
 8005d7e:	bf00      	nop
 8005d80:	3718      	adds	r7, #24
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	2000000c 	.word	0x2000000c
 8005d8c:	057619f1 	.word	0x057619f1

08005d90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e03f      	b.n	8005e22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d106      	bne.n	8005dbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7fc fe50 	bl	8002a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2224      	movs	r2, #36	; 0x24
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68da      	ldr	r2, [r3, #12]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 ffcb 	bl	8006d70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	691a      	ldr	r2, [r3, #16]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005de8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	695a      	ldr	r2, [r3, #20]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005df8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68da      	ldr	r2, [r3, #12]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2220      	movs	r2, #32
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2220      	movs	r2, #32
 8005e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b08a      	sub	sp, #40	; 0x28
 8005e2e:	af02      	add	r7, sp, #8
 8005e30:	60f8      	str	r0, [r7, #12]
 8005e32:	60b9      	str	r1, [r7, #8]
 8005e34:	603b      	str	r3, [r7, #0]
 8005e36:	4613      	mov	r3, r2
 8005e38:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b20      	cmp	r3, #32
 8005e48:	d17c      	bne.n	8005f44 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d002      	beq.n	8005e56 <HAL_UART_Transmit+0x2c>
 8005e50:	88fb      	ldrh	r3, [r7, #6]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e075      	b.n	8005f46 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d101      	bne.n	8005e68 <HAL_UART_Transmit+0x3e>
 8005e64:	2302      	movs	r3, #2
 8005e66:	e06e      	b.n	8005f46 <HAL_UART_Transmit+0x11c>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2221      	movs	r2, #33	; 0x21
 8005e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e7e:	f7fd f8cd 	bl	800301c <HAL_GetTick>
 8005e82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	88fa      	ldrh	r2, [r7, #6]
 8005e88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	88fa      	ldrh	r2, [r7, #6]
 8005e8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e98:	d108      	bne.n	8005eac <HAL_UART_Transmit+0x82>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d104      	bne.n	8005eac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	61bb      	str	r3, [r7, #24]
 8005eaa:	e003      	b.n	8005eb4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005ebc:	e02a      	b.n	8005f14 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	9300      	str	r3, [sp, #0]
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	2180      	movs	r1, #128	; 0x80
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f000 fc83 	bl	80067d4 <UART_WaitOnFlagUntilTimeout>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d001      	beq.n	8005ed8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e036      	b.n	8005f46 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10b      	bne.n	8005ef6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	881b      	ldrh	r3, [r3, #0]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005eec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	3302      	adds	r3, #2
 8005ef2:	61bb      	str	r3, [r7, #24]
 8005ef4:	e007      	b.n	8005f06 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	781a      	ldrb	r2, [r3, #0]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	3301      	adds	r3, #1
 8005f04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1cf      	bne.n	8005ebe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2200      	movs	r2, #0
 8005f26:	2140      	movs	r1, #64	; 0x40
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f000 fc53 	bl	80067d4 <UART_WaitOnFlagUntilTimeout>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d001      	beq.n	8005f38 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e006      	b.n	8005f46 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005f40:	2300      	movs	r3, #0
 8005f42:	e000      	b.n	8005f46 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005f44:	2302      	movs	r3, #2
  }
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3720      	adds	r7, #32
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b084      	sub	sp, #16
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	60f8      	str	r0, [r7, #12]
 8005f56:	60b9      	str	r1, [r7, #8]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b20      	cmp	r3, #32
 8005f66:	d11d      	bne.n	8005fa4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d002      	beq.n	8005f74 <HAL_UART_Receive_DMA+0x26>
 8005f6e:	88fb      	ldrh	r3, [r7, #6]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e016      	b.n	8005fa6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d101      	bne.n	8005f86 <HAL_UART_Receive_DMA+0x38>
 8005f82:	2302      	movs	r3, #2
 8005f84:	e00f      	b.n	8005fa6 <HAL_UART_Receive_DMA+0x58>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005f94:	88fb      	ldrh	r3, [r7, #6]
 8005f96:	461a      	mov	r2, r3
 8005f98:	68b9      	ldr	r1, [r7, #8]
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f000 fc88 	bl	80068b0 <UART_Start_Receive_DMA>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	e000      	b.n	8005fa6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005fa4:	2302      	movs	r3, #2
  }
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b08c      	sub	sp, #48	; 0x30
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	60f8      	str	r0, [r7, #12]
 8005fb6:	60b9      	str	r1, [r7, #8]
 8005fb8:	4613      	mov	r3, r2
 8005fba:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	2b20      	cmp	r3, #32
 8005fc6:	d152      	bne.n	800606e <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d002      	beq.n	8005fd4 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005fce:	88fb      	ldrh	r3, [r7, #6]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d101      	bne.n	8005fd8 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e04b      	b.n	8006070 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d101      	bne.n	8005fe6 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8005fe2:	2302      	movs	r3, #2
 8005fe4:	e044      	b.n	8006070 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005ff4:	88fb      	ldrh	r3, [r7, #6]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	68b9      	ldr	r1, [r7, #8]
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f000 fc58 	bl	80068b0 <UART_Start_Receive_DMA>
 8006000:	4603      	mov	r3, r0
 8006002:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006006:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800600a:	2b00      	cmp	r3, #0
 800600c:	d12c      	bne.n	8006068 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006012:	2b01      	cmp	r3, #1
 8006014:	d125      	bne.n	8006062 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006016:	2300      	movs	r3, #0
 8006018:	613b      	str	r3, [r7, #16]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	613b      	str	r3, [r7, #16]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	613b      	str	r3, [r7, #16]
 800602a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	330c      	adds	r3, #12
 8006032:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	e853 3f00 	ldrex	r3, [r3]
 800603a:	617b      	str	r3, [r7, #20]
   return(result);
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f043 0310 	orr.w	r3, r3, #16
 8006042:	62bb      	str	r3, [r7, #40]	; 0x28
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	330c      	adds	r3, #12
 800604a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800604c:	627a      	str	r2, [r7, #36]	; 0x24
 800604e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006050:	6a39      	ldr	r1, [r7, #32]
 8006052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006054:	e841 2300 	strex	r3, r2, [r1]
 8006058:	61fb      	str	r3, [r7, #28]
   return(result);
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1e5      	bne.n	800602c <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8006060:	e002      	b.n	8006068 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006068:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800606c:	e000      	b.n	8006070 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800606e:	2302      	movs	r3, #2
  }
}
 8006070:	4618      	mov	r0, r3
 8006072:	3730      	adds	r7, #48	; 0x30
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b0ba      	sub	sp, #232	; 0xe8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800609e:	2300      	movs	r3, #0
 80060a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80060a4:	2300      	movs	r3, #0
 80060a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80060aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ae:	f003 030f 	and.w	r3, r3, #15
 80060b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80060b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10f      	bne.n	80060de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060c2:	f003 0320 	and.w	r3, r3, #32
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d009      	beq.n	80060de <HAL_UART_IRQHandler+0x66>
 80060ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060ce:	f003 0320 	and.w	r3, r3, #32
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d003      	beq.n	80060de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fd8f 	bl	8006bfa <UART_Receive_IT>
      return;
 80060dc:	e256      	b.n	800658c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80060de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f000 80de 	beq.w	80062a4 <HAL_UART_IRQHandler+0x22c>
 80060e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d106      	bne.n	8006102 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80060f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 80d1 	beq.w	80062a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00b      	beq.n	8006126 <HAL_UART_IRQHandler+0xae>
 800610e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006116:	2b00      	cmp	r3, #0
 8006118:	d005      	beq.n	8006126 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611e:	f043 0201 	orr.w	r2, r3, #1
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800612a:	f003 0304 	and.w	r3, r3, #4
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00b      	beq.n	800614a <HAL_UART_IRQHandler+0xd2>
 8006132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006136:	f003 0301 	and.w	r3, r3, #1
 800613a:	2b00      	cmp	r3, #0
 800613c:	d005      	beq.n	800614a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006142:	f043 0202 	orr.w	r2, r3, #2
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800614a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00b      	beq.n	800616e <HAL_UART_IRQHandler+0xf6>
 8006156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	2b00      	cmp	r3, #0
 8006160:	d005      	beq.n	800616e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006166:	f043 0204 	orr.w	r2, r3, #4
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800616e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006172:	f003 0308 	and.w	r3, r3, #8
 8006176:	2b00      	cmp	r3, #0
 8006178:	d011      	beq.n	800619e <HAL_UART_IRQHandler+0x126>
 800617a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800617e:	f003 0320 	and.w	r3, r3, #32
 8006182:	2b00      	cmp	r3, #0
 8006184:	d105      	bne.n	8006192 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006186:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	2b00      	cmp	r3, #0
 8006190:	d005      	beq.n	800619e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006196:	f043 0208 	orr.w	r2, r3, #8
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 81ed 	beq.w	8006582 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ac:	f003 0320 	and.w	r3, r3, #32
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d008      	beq.n	80061c6 <HAL_UART_IRQHandler+0x14e>
 80061b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061b8:	f003 0320 	and.w	r3, r3, #32
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d002      	beq.n	80061c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 fd1a 	bl	8006bfa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d0:	2b40      	cmp	r3, #64	; 0x40
 80061d2:	bf0c      	ite	eq
 80061d4:	2301      	moveq	r3, #1
 80061d6:	2300      	movne	r3, #0
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e2:	f003 0308 	and.w	r3, r3, #8
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d103      	bne.n	80061f2 <HAL_UART_IRQHandler+0x17a>
 80061ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d04f      	beq.n	8006292 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fc22 	bl	8006a3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006202:	2b40      	cmp	r3, #64	; 0x40
 8006204:	d141      	bne.n	800628a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	3314      	adds	r3, #20
 800620c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006210:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006214:	e853 3f00 	ldrex	r3, [r3]
 8006218:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800621c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006220:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006224:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3314      	adds	r3, #20
 800622e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006232:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006236:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800623e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006242:	e841 2300 	strex	r3, r2, [r1]
 8006246:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800624a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1d9      	bne.n	8006206 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006256:	2b00      	cmp	r3, #0
 8006258:	d013      	beq.n	8006282 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625e:	4a7d      	ldr	r2, [pc, #500]	; (8006454 <HAL_UART_IRQHandler+0x3dc>)
 8006260:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006266:	4618      	mov	r0, r3
 8006268:	f7fd f990 	bl	800358c <HAL_DMA_Abort_IT>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d016      	beq.n	80062a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800627c:	4610      	mov	r0, r2
 800627e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006280:	e00e      	b.n	80062a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 f9a4 	bl	80065d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006288:	e00a      	b.n	80062a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f9a0 	bl	80065d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006290:	e006      	b.n	80062a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f99c 	bl	80065d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800629e:	e170      	b.n	8006582 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062a0:	bf00      	nop
    return;
 80062a2:	e16e      	b.n	8006582 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	f040 814a 	bne.w	8006542 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80062ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062b2:	f003 0310 	and.w	r3, r3, #16
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 8143 	beq.w	8006542 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80062bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062c0:	f003 0310 	and.w	r3, r3, #16
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 813c 	beq.w	8006542 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062ca:	2300      	movs	r3, #0
 80062cc:	60bb      	str	r3, [r7, #8]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	60bb      	str	r3, [r7, #8]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	60bb      	str	r3, [r7, #8]
 80062de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ea:	2b40      	cmp	r3, #64	; 0x40
 80062ec:	f040 80b4 	bne.w	8006458 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 8140 	beq.w	8006586 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800630a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800630e:	429a      	cmp	r2, r3
 8006310:	f080 8139 	bcs.w	8006586 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800631a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006326:	f000 8088 	beq.w	800643a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	330c      	adds	r3, #12
 8006330:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006334:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006338:	e853 3f00 	ldrex	r3, [r3]
 800633c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006340:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006344:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006348:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	330c      	adds	r3, #12
 8006352:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006356:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800635a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006362:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006366:	e841 2300 	strex	r3, r2, [r1]
 800636a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800636e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1d9      	bne.n	800632a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	3314      	adds	r3, #20
 800637c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006380:	e853 3f00 	ldrex	r3, [r3]
 8006384:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006386:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006388:	f023 0301 	bic.w	r3, r3, #1
 800638c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	3314      	adds	r3, #20
 8006396:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800639a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800639e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80063a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80063a6:	e841 2300 	strex	r3, r2, [r1]
 80063aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80063ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1e1      	bne.n	8006376 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	3314      	adds	r3, #20
 80063b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063bc:	e853 3f00 	ldrex	r3, [r3]
 80063c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80063c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	3314      	adds	r3, #20
 80063d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80063d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80063d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80063dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80063de:	e841 2300 	strex	r3, r2, [r1]
 80063e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80063e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1e3      	bne.n	80063b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2220      	movs	r2, #32
 80063ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	330c      	adds	r3, #12
 80063fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006402:	e853 3f00 	ldrex	r3, [r3]
 8006406:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800640a:	f023 0310 	bic.w	r3, r3, #16
 800640e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	330c      	adds	r3, #12
 8006418:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800641c:	65ba      	str	r2, [r7, #88]	; 0x58
 800641e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006420:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006422:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006424:	e841 2300 	strex	r3, r2, [r1]
 8006428:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800642a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1e3      	bne.n	80063f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006434:	4618      	mov	r0, r3
 8006436:	f7fd f839 	bl	80034ac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006442:	b29b      	uxth	r3, r3
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	b29b      	uxth	r3, r3
 8006448:	4619      	mov	r1, r3
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f7fa fd94 	bl	8000f78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006450:	e099      	b.n	8006586 <HAL_UART_IRQHandler+0x50e>
 8006452:	bf00      	nop
 8006454:	08006b03 	.word	0x08006b03
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006460:	b29b      	uxth	r3, r3
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800646c:	b29b      	uxth	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	f000 808b 	beq.w	800658a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006474:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006478:	2b00      	cmp	r3, #0
 800647a:	f000 8086 	beq.w	800658a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	330c      	adds	r3, #12
 8006484:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006488:	e853 3f00 	ldrex	r3, [r3]
 800648c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800648e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006490:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006494:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	330c      	adds	r3, #12
 800649e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80064a2:	647a      	str	r2, [r7, #68]	; 0x44
 80064a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064aa:	e841 2300 	strex	r3, r2, [r1]
 80064ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1e3      	bne.n	800647e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	3314      	adds	r3, #20
 80064bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c0:	e853 3f00 	ldrex	r3, [r3]
 80064c4:	623b      	str	r3, [r7, #32]
   return(result);
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	f023 0301 	bic.w	r3, r3, #1
 80064cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3314      	adds	r3, #20
 80064d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80064da:	633a      	str	r2, [r7, #48]	; 0x30
 80064dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064e2:	e841 2300 	strex	r3, r2, [r1]
 80064e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1e3      	bne.n	80064b6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2220      	movs	r2, #32
 80064f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	330c      	adds	r3, #12
 8006502:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	e853 3f00 	ldrex	r3, [r3]
 800650a:	60fb      	str	r3, [r7, #12]
   return(result);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f023 0310 	bic.w	r3, r3, #16
 8006512:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	330c      	adds	r3, #12
 800651c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006520:	61fa      	str	r2, [r7, #28]
 8006522:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006524:	69b9      	ldr	r1, [r7, #24]
 8006526:	69fa      	ldr	r2, [r7, #28]
 8006528:	e841 2300 	strex	r3, r2, [r1]
 800652c:	617b      	str	r3, [r7, #20]
   return(result);
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1e3      	bne.n	80064fc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006534:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006538:	4619      	mov	r1, r3
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7fa fd1c 	bl	8000f78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006540:	e023      	b.n	800658a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800654a:	2b00      	cmp	r3, #0
 800654c:	d009      	beq.n	8006562 <HAL_UART_IRQHandler+0x4ea>
 800654e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fae5 	bl	8006b2a <UART_Transmit_IT>
    return;
 8006560:	e014      	b.n	800658c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00e      	beq.n	800658c <HAL_UART_IRQHandler+0x514>
 800656e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006576:	2b00      	cmp	r3, #0
 8006578:	d008      	beq.n	800658c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fb25 	bl	8006bca <UART_EndTransmit_IT>
    return;
 8006580:	e004      	b.n	800658c <HAL_UART_IRQHandler+0x514>
    return;
 8006582:	bf00      	nop
 8006584:	e002      	b.n	800658c <HAL_UART_IRQHandler+0x514>
      return;
 8006586:	bf00      	nop
 8006588:	e000      	b.n	800658c <HAL_UART_IRQHandler+0x514>
      return;
 800658a:	bf00      	nop
  }
}
 800658c:	37e8      	adds	r7, #232	; 0xe8
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop

08006594 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b09c      	sub	sp, #112	; 0x70
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d172      	bne.n	80066e6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006602:	2200      	movs	r2, #0
 8006604:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	330c      	adds	r3, #12
 800660c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006610:	e853 3f00 	ldrex	r3, [r3]
 8006614:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006618:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800661c:	66bb      	str	r3, [r7, #104]	; 0x68
 800661e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	330c      	adds	r3, #12
 8006624:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006626:	65ba      	str	r2, [r7, #88]	; 0x58
 8006628:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800662c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800662e:	e841 2300 	strex	r3, r2, [r1]
 8006632:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1e5      	bne.n	8006606 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800663a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	3314      	adds	r3, #20
 8006640:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006644:	e853 3f00 	ldrex	r3, [r3]
 8006648:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800664a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800664c:	f023 0301 	bic.w	r3, r3, #1
 8006650:	667b      	str	r3, [r7, #100]	; 0x64
 8006652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	3314      	adds	r3, #20
 8006658:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800665a:	647a      	str	r2, [r7, #68]	; 0x44
 800665c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006660:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006662:	e841 2300 	strex	r3, r2, [r1]
 8006666:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1e5      	bne.n	800663a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800666e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	3314      	adds	r3, #20
 8006674:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006678:	e853 3f00 	ldrex	r3, [r3]
 800667c:	623b      	str	r3, [r7, #32]
   return(result);
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006684:	663b      	str	r3, [r7, #96]	; 0x60
 8006686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	3314      	adds	r3, #20
 800668c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800668e:	633a      	str	r2, [r7, #48]	; 0x30
 8006690:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006692:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006696:	e841 2300 	strex	r3, r2, [r1]
 800669a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800669c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1e5      	bne.n	800666e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80066a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066a4:	2220      	movs	r2, #32
 80066a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d119      	bne.n	80066e6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	330c      	adds	r3, #12
 80066b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	e853 3f00 	ldrex	r3, [r3]
 80066c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f023 0310 	bic.w	r3, r3, #16
 80066c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	330c      	adds	r3, #12
 80066d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80066d2:	61fa      	str	r2, [r7, #28]
 80066d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d6:	69b9      	ldr	r1, [r7, #24]
 80066d8:	69fa      	ldr	r2, [r7, #28]
 80066da:	e841 2300 	strex	r3, r2, [r1]
 80066de:	617b      	str	r3, [r7, #20]
   return(result);
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1e5      	bne.n	80066b2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d106      	bne.n	80066fc <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066f2:	4619      	mov	r1, r3
 80066f4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80066f6:	f7fa fc3f 	bl	8000f78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80066fa:	e002      	b.n	8006702 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80066fc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80066fe:	f7ff ff53 	bl	80065a8 <HAL_UART_RxCpltCallback>
}
 8006702:	bf00      	nop
 8006704:	3770      	adds	r7, #112	; 0x70
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b084      	sub	sp, #16
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006716:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671c:	2b01      	cmp	r3, #1
 800671e:	d108      	bne.n	8006732 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006724:	085b      	lsrs	r3, r3, #1
 8006726:	b29b      	uxth	r3, r3
 8006728:	4619      	mov	r1, r3
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f7fa fc24 	bl	8000f78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006730:	e002      	b.n	8006738 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f7ff ff42 	bl	80065bc <HAL_UART_RxHalfCpltCallback>
}
 8006738:	bf00      	nop
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006748:	2300      	movs	r3, #0
 800674a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006750:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	695b      	ldr	r3, [r3, #20]
 8006758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800675c:	2b80      	cmp	r3, #128	; 0x80
 800675e:	bf0c      	ite	eq
 8006760:	2301      	moveq	r3, #1
 8006762:	2300      	movne	r3, #0
 8006764:	b2db      	uxtb	r3, r3
 8006766:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800676e:	b2db      	uxtb	r3, r3
 8006770:	2b21      	cmp	r3, #33	; 0x21
 8006772:	d108      	bne.n	8006786 <UART_DMAError+0x46>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d005      	beq.n	8006786 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	2200      	movs	r2, #0
 800677e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006780:	68b8      	ldr	r0, [r7, #8]
 8006782:	f000 f933 	bl	80069ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006790:	2b40      	cmp	r3, #64	; 0x40
 8006792:	bf0c      	ite	eq
 8006794:	2301      	moveq	r3, #1
 8006796:	2300      	movne	r3, #0
 8006798:	b2db      	uxtb	r3, r3
 800679a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	2b22      	cmp	r3, #34	; 0x22
 80067a6:	d108      	bne.n	80067ba <UART_DMAError+0x7a>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d005      	beq.n	80067ba <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	2200      	movs	r2, #0
 80067b2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80067b4:	68b8      	ldr	r0, [r7, #8]
 80067b6:	f000 f941 	bl	8006a3c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067be:	f043 0210 	orr.w	r2, r3, #16
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067c6:	68b8      	ldr	r0, [r7, #8]
 80067c8:	f7ff ff02 	bl	80065d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067cc:	bf00      	nop
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b090      	sub	sp, #64	; 0x40
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	603b      	str	r3, [r7, #0]
 80067e0:	4613      	mov	r3, r2
 80067e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067e4:	e050      	b.n	8006888 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ec:	d04c      	beq.n	8006888 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80067ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d007      	beq.n	8006804 <UART_WaitOnFlagUntilTimeout+0x30>
 80067f4:	f7fc fc12 	bl	800301c <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006800:	429a      	cmp	r2, r3
 8006802:	d241      	bcs.n	8006888 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	330c      	adds	r3, #12
 800680a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680e:	e853 3f00 	ldrex	r3, [r3]
 8006812:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006816:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800681a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	330c      	adds	r3, #12
 8006822:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006824:	637a      	str	r2, [r7, #52]	; 0x34
 8006826:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006828:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800682a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800682c:	e841 2300 	strex	r3, r2, [r1]
 8006830:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1e5      	bne.n	8006804 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	3314      	adds	r3, #20
 800683e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	e853 3f00 	ldrex	r3, [r3]
 8006846:	613b      	str	r3, [r7, #16]
   return(result);
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	f023 0301 	bic.w	r3, r3, #1
 800684e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	3314      	adds	r3, #20
 8006856:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006858:	623a      	str	r2, [r7, #32]
 800685a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685c:	69f9      	ldr	r1, [r7, #28]
 800685e:	6a3a      	ldr	r2, [r7, #32]
 8006860:	e841 2300 	strex	r3, r2, [r1]
 8006864:	61bb      	str	r3, [r7, #24]
   return(result);
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1e5      	bne.n	8006838 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2220      	movs	r2, #32
 8006870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2220      	movs	r2, #32
 8006878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e00f      	b.n	80068a8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	4013      	ands	r3, r2
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	429a      	cmp	r2, r3
 8006896:	bf0c      	ite	eq
 8006898:	2301      	moveq	r3, #1
 800689a:	2300      	movne	r3, #0
 800689c:	b2db      	uxtb	r3, r3
 800689e:	461a      	mov	r2, r3
 80068a0:	79fb      	ldrb	r3, [r7, #7]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d09f      	beq.n	80067e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3740      	adds	r7, #64	; 0x40
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b098      	sub	sp, #96	; 0x60
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	4613      	mov	r3, r2
 80068bc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	88fa      	ldrh	r2, [r7, #6]
 80068c8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2222      	movs	r2, #34	; 0x22
 80068d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068dc:	4a40      	ldr	r2, [pc, #256]	; (80069e0 <UART_Start_Receive_DMA+0x130>)
 80068de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e4:	4a3f      	ldr	r2, [pc, #252]	; (80069e4 <UART_Start_Receive_DMA+0x134>)
 80068e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ec:	4a3e      	ldr	r2, [pc, #248]	; (80069e8 <UART_Start_Receive_DMA+0x138>)
 80068ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f4:	2200      	movs	r2, #0
 80068f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80068f8:	f107 0308 	add.w	r3, r7, #8
 80068fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	3304      	adds	r3, #4
 8006908:	4619      	mov	r1, r3
 800690a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	88fb      	ldrh	r3, [r7, #6]
 8006910:	f7fc fd74 	bl	80033fc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006914:	2300      	movs	r3, #0
 8006916:	613b      	str	r3, [r7, #16]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	613b      	str	r3, [r7, #16]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	613b      	str	r3, [r7, #16]
 8006928:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d019      	beq.n	800696e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	330c      	adds	r3, #12
 8006940:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006944:	e853 3f00 	ldrex	r3, [r3]
 8006948:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800694a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800694c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006950:	65bb      	str	r3, [r7, #88]	; 0x58
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	330c      	adds	r3, #12
 8006958:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800695a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800695c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006960:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006962:	e841 2300 	strex	r3, r2, [r1]
 8006966:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1e5      	bne.n	800693a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3314      	adds	r3, #20
 8006974:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006978:	e853 3f00 	ldrex	r3, [r3]
 800697c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800697e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006980:	f043 0301 	orr.w	r3, r3, #1
 8006984:	657b      	str	r3, [r7, #84]	; 0x54
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	3314      	adds	r3, #20
 800698c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800698e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006990:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006992:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006994:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006996:	e841 2300 	strex	r3, r2, [r1]
 800699a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800699c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1e5      	bne.n	800696e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	3314      	adds	r3, #20
 80069a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	e853 3f00 	ldrex	r3, [r3]
 80069b0:	617b      	str	r3, [r7, #20]
   return(result);
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069b8:	653b      	str	r3, [r7, #80]	; 0x50
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	3314      	adds	r3, #20
 80069c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069c2:	627a      	str	r2, [r7, #36]	; 0x24
 80069c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c6:	6a39      	ldr	r1, [r7, #32]
 80069c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ca:	e841 2300 	strex	r3, r2, [r1]
 80069ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1e5      	bne.n	80069a2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3760      	adds	r7, #96	; 0x60
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	080065e5 	.word	0x080065e5
 80069e4:	0800670b 	.word	0x0800670b
 80069e8:	08006741 	.word	0x08006741

080069ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b089      	sub	sp, #36	; 0x24
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	330c      	adds	r3, #12
 80069fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	e853 3f00 	ldrex	r3, [r3]
 8006a02:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006a0a:	61fb      	str	r3, [r7, #28]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	330c      	adds	r3, #12
 8006a12:	69fa      	ldr	r2, [r7, #28]
 8006a14:	61ba      	str	r2, [r7, #24]
 8006a16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a18:	6979      	ldr	r1, [r7, #20]
 8006a1a:	69ba      	ldr	r2, [r7, #24]
 8006a1c:	e841 2300 	strex	r3, r2, [r1]
 8006a20:	613b      	str	r3, [r7, #16]
   return(result);
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1e5      	bne.n	80069f4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006a30:	bf00      	nop
 8006a32:	3724      	adds	r7, #36	; 0x24
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b095      	sub	sp, #84	; 0x54
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	330c      	adds	r3, #12
 8006a4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a4e:	e853 3f00 	ldrex	r3, [r3]
 8006a52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	330c      	adds	r3, #12
 8006a62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a64:	643a      	str	r2, [r7, #64]	; 0x40
 8006a66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a6c:	e841 2300 	strex	r3, r2, [r1]
 8006a70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1e5      	bne.n	8006a44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	3314      	adds	r3, #20
 8006a7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a80:	6a3b      	ldr	r3, [r7, #32]
 8006a82:	e853 3f00 	ldrex	r3, [r3]
 8006a86:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	f023 0301 	bic.w	r3, r3, #1
 8006a8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	3314      	adds	r3, #20
 8006a96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aa0:	e841 2300 	strex	r3, r2, [r1]
 8006aa4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1e5      	bne.n	8006a78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d119      	bne.n	8006ae8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	330c      	adds	r3, #12
 8006aba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	e853 3f00 	ldrex	r3, [r3]
 8006ac2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	f023 0310 	bic.w	r3, r3, #16
 8006aca:	647b      	str	r3, [r7, #68]	; 0x44
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	330c      	adds	r3, #12
 8006ad2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ad4:	61ba      	str	r2, [r7, #24]
 8006ad6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad8:	6979      	ldr	r1, [r7, #20]
 8006ada:	69ba      	ldr	r2, [r7, #24]
 8006adc:	e841 2300 	strex	r3, r2, [r1]
 8006ae0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1e5      	bne.n	8006ab4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2220      	movs	r2, #32
 8006aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006af6:	bf00      	nop
 8006af8:	3754      	adds	r7, #84	; 0x54
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr

08006b02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b084      	sub	sp, #16
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f7ff fd57 	bl	80065d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b22:	bf00      	nop
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b085      	sub	sp, #20
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b21      	cmp	r3, #33	; 0x21
 8006b3c:	d13e      	bne.n	8006bbc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b46:	d114      	bne.n	8006b72 <UART_Transmit_IT+0x48>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d110      	bne.n	8006b72 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	881b      	ldrh	r3, [r3, #0]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b64:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	1c9a      	adds	r2, r3, #2
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	621a      	str	r2, [r3, #32]
 8006b70:	e008      	b.n	8006b84 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a1b      	ldr	r3, [r3, #32]
 8006b76:	1c59      	adds	r1, r3, #1
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	6211      	str	r1, [r2, #32]
 8006b7c:	781a      	ldrb	r2, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	4619      	mov	r1, r3
 8006b92:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10f      	bne.n	8006bb8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68da      	ldr	r2, [r3, #12]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ba6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68da      	ldr	r2, [r3, #12]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bb6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	e000      	b.n	8006bbe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006bbc:	2302      	movs	r3, #2
  }
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b082      	sub	sp, #8
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68da      	ldr	r2, [r3, #12]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006be0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2220      	movs	r2, #32
 8006be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f7ff fcd2 	bl	8006594 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b08c      	sub	sp, #48	; 0x30
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b22      	cmp	r3, #34	; 0x22
 8006c0c:	f040 80ab 	bne.w	8006d66 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c18:	d117      	bne.n	8006c4a <UART_Receive_IT+0x50>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d113      	bne.n	8006c4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006c22:	2300      	movs	r3, #0
 8006c24:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c2a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c42:	1c9a      	adds	r2, r3, #2
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	629a      	str	r2, [r3, #40]	; 0x28
 8006c48:	e026      	b.n	8006c98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006c50:	2300      	movs	r3, #0
 8006c52:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c5c:	d007      	beq.n	8006c6e <UART_Receive_IT+0x74>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10a      	bne.n	8006c7c <UART_Receive_IT+0x82>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d106      	bne.n	8006c7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c78:	701a      	strb	r2, [r3, #0]
 8006c7a:	e008      	b.n	8006c8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c88:	b2da      	uxtb	r2, r3
 8006c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c92:	1c5a      	adds	r2, r3, #1
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d15a      	bne.n	8006d62 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68da      	ldr	r2, [r3, #12]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f022 0220 	bic.w	r2, r2, #32
 8006cba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68da      	ldr	r2, [r3, #12]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006cca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	695a      	ldr	r2, [r3, #20]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f022 0201 	bic.w	r2, r2, #1
 8006cda:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2220      	movs	r2, #32
 8006ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d135      	bne.n	8006d58 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	330c      	adds	r3, #12
 8006cf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	e853 3f00 	ldrex	r3, [r3]
 8006d00:	613b      	str	r3, [r7, #16]
   return(result);
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	f023 0310 	bic.w	r3, r3, #16
 8006d08:	627b      	str	r3, [r7, #36]	; 0x24
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	330c      	adds	r3, #12
 8006d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d12:	623a      	str	r2, [r7, #32]
 8006d14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d16:	69f9      	ldr	r1, [r7, #28]
 8006d18:	6a3a      	ldr	r2, [r7, #32]
 8006d1a:	e841 2300 	strex	r3, r2, [r1]
 8006d1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1e5      	bne.n	8006cf2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0310 	and.w	r3, r3, #16
 8006d30:	2b10      	cmp	r3, #16
 8006d32:	d10a      	bne.n	8006d4a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d34:	2300      	movs	r3, #0
 8006d36:	60fb      	str	r3, [r7, #12]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	60fb      	str	r3, [r7, #12]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	60fb      	str	r3, [r7, #12]
 8006d48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d4e:	4619      	mov	r1, r3
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f7fa f911 	bl	8000f78 <HAL_UARTEx_RxEventCallback>
 8006d56:	e002      	b.n	8006d5e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f7ff fc25 	bl	80065a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	e002      	b.n	8006d68 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006d62:	2300      	movs	r3, #0
 8006d64:	e000      	b.n	8006d68 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006d66:	2302      	movs	r3, #2
  }
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3730      	adds	r7, #48	; 0x30
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d74:	b0c0      	sub	sp, #256	; 0x100
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d8c:	68d9      	ldr	r1, [r3, #12]
 8006d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	ea40 0301 	orr.w	r3, r0, r1
 8006d98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d9e:	689a      	ldr	r2, [r3, #8]
 8006da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	431a      	orrs	r2, r3
 8006da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	431a      	orrs	r2, r3
 8006db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006db4:	69db      	ldr	r3, [r3, #28]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006dc8:	f021 010c 	bic.w	r1, r1, #12
 8006dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006dd6:	430b      	orrs	r3, r1
 8006dd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dea:	6999      	ldr	r1, [r3, #24]
 8006dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	ea40 0301 	orr.w	r3, r0, r1
 8006df6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	4b8f      	ldr	r3, [pc, #572]	; (800703c <UART_SetConfig+0x2cc>)
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d005      	beq.n	8006e10 <UART_SetConfig+0xa0>
 8006e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	4b8d      	ldr	r3, [pc, #564]	; (8007040 <UART_SetConfig+0x2d0>)
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d104      	bne.n	8006e1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e10:	f7fd f92e 	bl	8004070 <HAL_RCC_GetPCLK2Freq>
 8006e14:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006e18:	e003      	b.n	8006e22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e1a:	f7fd f915 	bl	8004048 <HAL_RCC_GetPCLK1Freq>
 8006e1e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e26:	69db      	ldr	r3, [r3, #28]
 8006e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e2c:	f040 810c 	bne.w	8007048 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e34:	2200      	movs	r2, #0
 8006e36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e3a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006e3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006e42:	4622      	mov	r2, r4
 8006e44:	462b      	mov	r3, r5
 8006e46:	1891      	adds	r1, r2, r2
 8006e48:	65b9      	str	r1, [r7, #88]	; 0x58
 8006e4a:	415b      	adcs	r3, r3
 8006e4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006e52:	4621      	mov	r1, r4
 8006e54:	eb12 0801 	adds.w	r8, r2, r1
 8006e58:	4629      	mov	r1, r5
 8006e5a:	eb43 0901 	adc.w	r9, r3, r1
 8006e5e:	f04f 0200 	mov.w	r2, #0
 8006e62:	f04f 0300 	mov.w	r3, #0
 8006e66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e72:	4690      	mov	r8, r2
 8006e74:	4699      	mov	r9, r3
 8006e76:	4623      	mov	r3, r4
 8006e78:	eb18 0303 	adds.w	r3, r8, r3
 8006e7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e80:	462b      	mov	r3, r5
 8006e82:	eb49 0303 	adc.w	r3, r9, r3
 8006e86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e96:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006e9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	18db      	adds	r3, r3, r3
 8006ea2:	653b      	str	r3, [r7, #80]	; 0x50
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	eb42 0303 	adc.w	r3, r2, r3
 8006eaa:	657b      	str	r3, [r7, #84]	; 0x54
 8006eac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006eb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006eb4:	f7f9 f9fc 	bl	80002b0 <__aeabi_uldivmod>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	460b      	mov	r3, r1
 8006ebc:	4b61      	ldr	r3, [pc, #388]	; (8007044 <UART_SetConfig+0x2d4>)
 8006ebe:	fba3 2302 	umull	r2, r3, r3, r2
 8006ec2:	095b      	lsrs	r3, r3, #5
 8006ec4:	011c      	lsls	r4, r3, #4
 8006ec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ed0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006ed4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006ed8:	4642      	mov	r2, r8
 8006eda:	464b      	mov	r3, r9
 8006edc:	1891      	adds	r1, r2, r2
 8006ede:	64b9      	str	r1, [r7, #72]	; 0x48
 8006ee0:	415b      	adcs	r3, r3
 8006ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ee4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006ee8:	4641      	mov	r1, r8
 8006eea:	eb12 0a01 	adds.w	sl, r2, r1
 8006eee:	4649      	mov	r1, r9
 8006ef0:	eb43 0b01 	adc.w	fp, r3, r1
 8006ef4:	f04f 0200 	mov.w	r2, #0
 8006ef8:	f04f 0300 	mov.w	r3, #0
 8006efc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f08:	4692      	mov	sl, r2
 8006f0a:	469b      	mov	fp, r3
 8006f0c:	4643      	mov	r3, r8
 8006f0e:	eb1a 0303 	adds.w	r3, sl, r3
 8006f12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f16:	464b      	mov	r3, r9
 8006f18:	eb4b 0303 	adc.w	r3, fp, r3
 8006f1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f2c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006f30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006f34:	460b      	mov	r3, r1
 8006f36:	18db      	adds	r3, r3, r3
 8006f38:	643b      	str	r3, [r7, #64]	; 0x40
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	eb42 0303 	adc.w	r3, r2, r3
 8006f40:	647b      	str	r3, [r7, #68]	; 0x44
 8006f42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006f4a:	f7f9 f9b1 	bl	80002b0 <__aeabi_uldivmod>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	460b      	mov	r3, r1
 8006f52:	4611      	mov	r1, r2
 8006f54:	4b3b      	ldr	r3, [pc, #236]	; (8007044 <UART_SetConfig+0x2d4>)
 8006f56:	fba3 2301 	umull	r2, r3, r3, r1
 8006f5a:	095b      	lsrs	r3, r3, #5
 8006f5c:	2264      	movs	r2, #100	; 0x64
 8006f5e:	fb02 f303 	mul.w	r3, r2, r3
 8006f62:	1acb      	subs	r3, r1, r3
 8006f64:	00db      	lsls	r3, r3, #3
 8006f66:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006f6a:	4b36      	ldr	r3, [pc, #216]	; (8007044 <UART_SetConfig+0x2d4>)
 8006f6c:	fba3 2302 	umull	r2, r3, r3, r2
 8006f70:	095b      	lsrs	r3, r3, #5
 8006f72:	005b      	lsls	r3, r3, #1
 8006f74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f78:	441c      	add	r4, r3
 8006f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f84:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006f88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006f8c:	4642      	mov	r2, r8
 8006f8e:	464b      	mov	r3, r9
 8006f90:	1891      	adds	r1, r2, r2
 8006f92:	63b9      	str	r1, [r7, #56]	; 0x38
 8006f94:	415b      	adcs	r3, r3
 8006f96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f9c:	4641      	mov	r1, r8
 8006f9e:	1851      	adds	r1, r2, r1
 8006fa0:	6339      	str	r1, [r7, #48]	; 0x30
 8006fa2:	4649      	mov	r1, r9
 8006fa4:	414b      	adcs	r3, r1
 8006fa6:	637b      	str	r3, [r7, #52]	; 0x34
 8006fa8:	f04f 0200 	mov.w	r2, #0
 8006fac:	f04f 0300 	mov.w	r3, #0
 8006fb0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006fb4:	4659      	mov	r1, fp
 8006fb6:	00cb      	lsls	r3, r1, #3
 8006fb8:	4651      	mov	r1, sl
 8006fba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fbe:	4651      	mov	r1, sl
 8006fc0:	00ca      	lsls	r2, r1, #3
 8006fc2:	4610      	mov	r0, r2
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	4642      	mov	r2, r8
 8006fca:	189b      	adds	r3, r3, r2
 8006fcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fd0:	464b      	mov	r3, r9
 8006fd2:	460a      	mov	r2, r1
 8006fd4:	eb42 0303 	adc.w	r3, r2, r3
 8006fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006fe8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006fec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	18db      	adds	r3, r3, r3
 8006ff4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	eb42 0303 	adc.w	r3, r2, r3
 8006ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ffe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007002:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007006:	f7f9 f953 	bl	80002b0 <__aeabi_uldivmod>
 800700a:	4602      	mov	r2, r0
 800700c:	460b      	mov	r3, r1
 800700e:	4b0d      	ldr	r3, [pc, #52]	; (8007044 <UART_SetConfig+0x2d4>)
 8007010:	fba3 1302 	umull	r1, r3, r3, r2
 8007014:	095b      	lsrs	r3, r3, #5
 8007016:	2164      	movs	r1, #100	; 0x64
 8007018:	fb01 f303 	mul.w	r3, r1, r3
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	00db      	lsls	r3, r3, #3
 8007020:	3332      	adds	r3, #50	; 0x32
 8007022:	4a08      	ldr	r2, [pc, #32]	; (8007044 <UART_SetConfig+0x2d4>)
 8007024:	fba2 2303 	umull	r2, r3, r2, r3
 8007028:	095b      	lsrs	r3, r3, #5
 800702a:	f003 0207 	and.w	r2, r3, #7
 800702e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4422      	add	r2, r4
 8007036:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007038:	e105      	b.n	8007246 <UART_SetConfig+0x4d6>
 800703a:	bf00      	nop
 800703c:	40011000 	.word	0x40011000
 8007040:	40011400 	.word	0x40011400
 8007044:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007048:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800704c:	2200      	movs	r2, #0
 800704e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007052:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007056:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800705a:	4642      	mov	r2, r8
 800705c:	464b      	mov	r3, r9
 800705e:	1891      	adds	r1, r2, r2
 8007060:	6239      	str	r1, [r7, #32]
 8007062:	415b      	adcs	r3, r3
 8007064:	627b      	str	r3, [r7, #36]	; 0x24
 8007066:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800706a:	4641      	mov	r1, r8
 800706c:	1854      	adds	r4, r2, r1
 800706e:	4649      	mov	r1, r9
 8007070:	eb43 0501 	adc.w	r5, r3, r1
 8007074:	f04f 0200 	mov.w	r2, #0
 8007078:	f04f 0300 	mov.w	r3, #0
 800707c:	00eb      	lsls	r3, r5, #3
 800707e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007082:	00e2      	lsls	r2, r4, #3
 8007084:	4614      	mov	r4, r2
 8007086:	461d      	mov	r5, r3
 8007088:	4643      	mov	r3, r8
 800708a:	18e3      	adds	r3, r4, r3
 800708c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007090:	464b      	mov	r3, r9
 8007092:	eb45 0303 	adc.w	r3, r5, r3
 8007096:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800709a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80070a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80070aa:	f04f 0200 	mov.w	r2, #0
 80070ae:	f04f 0300 	mov.w	r3, #0
 80070b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80070b6:	4629      	mov	r1, r5
 80070b8:	008b      	lsls	r3, r1, #2
 80070ba:	4621      	mov	r1, r4
 80070bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070c0:	4621      	mov	r1, r4
 80070c2:	008a      	lsls	r2, r1, #2
 80070c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80070c8:	f7f9 f8f2 	bl	80002b0 <__aeabi_uldivmod>
 80070cc:	4602      	mov	r2, r0
 80070ce:	460b      	mov	r3, r1
 80070d0:	4b60      	ldr	r3, [pc, #384]	; (8007254 <UART_SetConfig+0x4e4>)
 80070d2:	fba3 2302 	umull	r2, r3, r3, r2
 80070d6:	095b      	lsrs	r3, r3, #5
 80070d8:	011c      	lsls	r4, r3, #4
 80070da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070de:	2200      	movs	r2, #0
 80070e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80070e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80070e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80070ec:	4642      	mov	r2, r8
 80070ee:	464b      	mov	r3, r9
 80070f0:	1891      	adds	r1, r2, r2
 80070f2:	61b9      	str	r1, [r7, #24]
 80070f4:	415b      	adcs	r3, r3
 80070f6:	61fb      	str	r3, [r7, #28]
 80070f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070fc:	4641      	mov	r1, r8
 80070fe:	1851      	adds	r1, r2, r1
 8007100:	6139      	str	r1, [r7, #16]
 8007102:	4649      	mov	r1, r9
 8007104:	414b      	adcs	r3, r1
 8007106:	617b      	str	r3, [r7, #20]
 8007108:	f04f 0200 	mov.w	r2, #0
 800710c:	f04f 0300 	mov.w	r3, #0
 8007110:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007114:	4659      	mov	r1, fp
 8007116:	00cb      	lsls	r3, r1, #3
 8007118:	4651      	mov	r1, sl
 800711a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800711e:	4651      	mov	r1, sl
 8007120:	00ca      	lsls	r2, r1, #3
 8007122:	4610      	mov	r0, r2
 8007124:	4619      	mov	r1, r3
 8007126:	4603      	mov	r3, r0
 8007128:	4642      	mov	r2, r8
 800712a:	189b      	adds	r3, r3, r2
 800712c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007130:	464b      	mov	r3, r9
 8007132:	460a      	mov	r2, r1
 8007134:	eb42 0303 	adc.w	r3, r2, r3
 8007138:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800713c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	67bb      	str	r3, [r7, #120]	; 0x78
 8007146:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007148:	f04f 0200 	mov.w	r2, #0
 800714c:	f04f 0300 	mov.w	r3, #0
 8007150:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007154:	4649      	mov	r1, r9
 8007156:	008b      	lsls	r3, r1, #2
 8007158:	4641      	mov	r1, r8
 800715a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800715e:	4641      	mov	r1, r8
 8007160:	008a      	lsls	r2, r1, #2
 8007162:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007166:	f7f9 f8a3 	bl	80002b0 <__aeabi_uldivmod>
 800716a:	4602      	mov	r2, r0
 800716c:	460b      	mov	r3, r1
 800716e:	4b39      	ldr	r3, [pc, #228]	; (8007254 <UART_SetConfig+0x4e4>)
 8007170:	fba3 1302 	umull	r1, r3, r3, r2
 8007174:	095b      	lsrs	r3, r3, #5
 8007176:	2164      	movs	r1, #100	; 0x64
 8007178:	fb01 f303 	mul.w	r3, r1, r3
 800717c:	1ad3      	subs	r3, r2, r3
 800717e:	011b      	lsls	r3, r3, #4
 8007180:	3332      	adds	r3, #50	; 0x32
 8007182:	4a34      	ldr	r2, [pc, #208]	; (8007254 <UART_SetConfig+0x4e4>)
 8007184:	fba2 2303 	umull	r2, r3, r2, r3
 8007188:	095b      	lsrs	r3, r3, #5
 800718a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800718e:	441c      	add	r4, r3
 8007190:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007194:	2200      	movs	r2, #0
 8007196:	673b      	str	r3, [r7, #112]	; 0x70
 8007198:	677a      	str	r2, [r7, #116]	; 0x74
 800719a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800719e:	4642      	mov	r2, r8
 80071a0:	464b      	mov	r3, r9
 80071a2:	1891      	adds	r1, r2, r2
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	415b      	adcs	r3, r3
 80071a8:	60fb      	str	r3, [r7, #12]
 80071aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071ae:	4641      	mov	r1, r8
 80071b0:	1851      	adds	r1, r2, r1
 80071b2:	6039      	str	r1, [r7, #0]
 80071b4:	4649      	mov	r1, r9
 80071b6:	414b      	adcs	r3, r1
 80071b8:	607b      	str	r3, [r7, #4]
 80071ba:	f04f 0200 	mov.w	r2, #0
 80071be:	f04f 0300 	mov.w	r3, #0
 80071c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80071c6:	4659      	mov	r1, fp
 80071c8:	00cb      	lsls	r3, r1, #3
 80071ca:	4651      	mov	r1, sl
 80071cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071d0:	4651      	mov	r1, sl
 80071d2:	00ca      	lsls	r2, r1, #3
 80071d4:	4610      	mov	r0, r2
 80071d6:	4619      	mov	r1, r3
 80071d8:	4603      	mov	r3, r0
 80071da:	4642      	mov	r2, r8
 80071dc:	189b      	adds	r3, r3, r2
 80071de:	66bb      	str	r3, [r7, #104]	; 0x68
 80071e0:	464b      	mov	r3, r9
 80071e2:	460a      	mov	r2, r1
 80071e4:	eb42 0303 	adc.w	r3, r2, r3
 80071e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	663b      	str	r3, [r7, #96]	; 0x60
 80071f4:	667a      	str	r2, [r7, #100]	; 0x64
 80071f6:	f04f 0200 	mov.w	r2, #0
 80071fa:	f04f 0300 	mov.w	r3, #0
 80071fe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007202:	4649      	mov	r1, r9
 8007204:	008b      	lsls	r3, r1, #2
 8007206:	4641      	mov	r1, r8
 8007208:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800720c:	4641      	mov	r1, r8
 800720e:	008a      	lsls	r2, r1, #2
 8007210:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007214:	f7f9 f84c 	bl	80002b0 <__aeabi_uldivmod>
 8007218:	4602      	mov	r2, r0
 800721a:	460b      	mov	r3, r1
 800721c:	4b0d      	ldr	r3, [pc, #52]	; (8007254 <UART_SetConfig+0x4e4>)
 800721e:	fba3 1302 	umull	r1, r3, r3, r2
 8007222:	095b      	lsrs	r3, r3, #5
 8007224:	2164      	movs	r1, #100	; 0x64
 8007226:	fb01 f303 	mul.w	r3, r1, r3
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	011b      	lsls	r3, r3, #4
 800722e:	3332      	adds	r3, #50	; 0x32
 8007230:	4a08      	ldr	r2, [pc, #32]	; (8007254 <UART_SetConfig+0x4e4>)
 8007232:	fba2 2303 	umull	r2, r3, r2, r3
 8007236:	095b      	lsrs	r3, r3, #5
 8007238:	f003 020f 	and.w	r2, r3, #15
 800723c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4422      	add	r2, r4
 8007244:	609a      	str	r2, [r3, #8]
}
 8007246:	bf00      	nop
 8007248:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800724c:	46bd      	mov	sp, r7
 800724e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007252:	bf00      	nop
 8007254:	51eb851f 	.word	0x51eb851f

08007258 <__errno>:
 8007258:	4b01      	ldr	r3, [pc, #4]	; (8007260 <__errno+0x8>)
 800725a:	6818      	ldr	r0, [r3, #0]
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	2000007c 	.word	0x2000007c

08007264 <__libc_init_array>:
 8007264:	b570      	push	{r4, r5, r6, lr}
 8007266:	4d0d      	ldr	r5, [pc, #52]	; (800729c <__libc_init_array+0x38>)
 8007268:	4c0d      	ldr	r4, [pc, #52]	; (80072a0 <__libc_init_array+0x3c>)
 800726a:	1b64      	subs	r4, r4, r5
 800726c:	10a4      	asrs	r4, r4, #2
 800726e:	2600      	movs	r6, #0
 8007270:	42a6      	cmp	r6, r4
 8007272:	d109      	bne.n	8007288 <__libc_init_array+0x24>
 8007274:	4d0b      	ldr	r5, [pc, #44]	; (80072a4 <__libc_init_array+0x40>)
 8007276:	4c0c      	ldr	r4, [pc, #48]	; (80072a8 <__libc_init_array+0x44>)
 8007278:	f001 f842 	bl	8008300 <_init>
 800727c:	1b64      	subs	r4, r4, r5
 800727e:	10a4      	asrs	r4, r4, #2
 8007280:	2600      	movs	r6, #0
 8007282:	42a6      	cmp	r6, r4
 8007284:	d105      	bne.n	8007292 <__libc_init_array+0x2e>
 8007286:	bd70      	pop	{r4, r5, r6, pc}
 8007288:	f855 3b04 	ldr.w	r3, [r5], #4
 800728c:	4798      	blx	r3
 800728e:	3601      	adds	r6, #1
 8007290:	e7ee      	b.n	8007270 <__libc_init_array+0xc>
 8007292:	f855 3b04 	ldr.w	r3, [r5], #4
 8007296:	4798      	blx	r3
 8007298:	3601      	adds	r6, #1
 800729a:	e7f2      	b.n	8007282 <__libc_init_array+0x1e>
 800729c:	08008588 	.word	0x08008588
 80072a0:	08008588 	.word	0x08008588
 80072a4:	08008588 	.word	0x08008588
 80072a8:	0800858c 	.word	0x0800858c

080072ac <memcmp>:
 80072ac:	b510      	push	{r4, lr}
 80072ae:	3901      	subs	r1, #1
 80072b0:	4402      	add	r2, r0
 80072b2:	4290      	cmp	r0, r2
 80072b4:	d101      	bne.n	80072ba <memcmp+0xe>
 80072b6:	2000      	movs	r0, #0
 80072b8:	e005      	b.n	80072c6 <memcmp+0x1a>
 80072ba:	7803      	ldrb	r3, [r0, #0]
 80072bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80072c0:	42a3      	cmp	r3, r4
 80072c2:	d001      	beq.n	80072c8 <memcmp+0x1c>
 80072c4:	1b18      	subs	r0, r3, r4
 80072c6:	bd10      	pop	{r4, pc}
 80072c8:	3001      	adds	r0, #1
 80072ca:	e7f2      	b.n	80072b2 <memcmp+0x6>

080072cc <memcpy>:
 80072cc:	440a      	add	r2, r1
 80072ce:	4291      	cmp	r1, r2
 80072d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80072d4:	d100      	bne.n	80072d8 <memcpy+0xc>
 80072d6:	4770      	bx	lr
 80072d8:	b510      	push	{r4, lr}
 80072da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072e2:	4291      	cmp	r1, r2
 80072e4:	d1f9      	bne.n	80072da <memcpy+0xe>
 80072e6:	bd10      	pop	{r4, pc}

080072e8 <memset>:
 80072e8:	4402      	add	r2, r0
 80072ea:	4603      	mov	r3, r0
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d100      	bne.n	80072f2 <memset+0xa>
 80072f0:	4770      	bx	lr
 80072f2:	f803 1b01 	strb.w	r1, [r3], #1
 80072f6:	e7f9      	b.n	80072ec <memset+0x4>

080072f8 <iprintf>:
 80072f8:	b40f      	push	{r0, r1, r2, r3}
 80072fa:	4b0a      	ldr	r3, [pc, #40]	; (8007324 <iprintf+0x2c>)
 80072fc:	b513      	push	{r0, r1, r4, lr}
 80072fe:	681c      	ldr	r4, [r3, #0]
 8007300:	b124      	cbz	r4, 800730c <iprintf+0x14>
 8007302:	69a3      	ldr	r3, [r4, #24]
 8007304:	b913      	cbnz	r3, 800730c <iprintf+0x14>
 8007306:	4620      	mov	r0, r4
 8007308:	f000 fa5e 	bl	80077c8 <__sinit>
 800730c:	ab05      	add	r3, sp, #20
 800730e:	9a04      	ldr	r2, [sp, #16]
 8007310:	68a1      	ldr	r1, [r4, #8]
 8007312:	9301      	str	r3, [sp, #4]
 8007314:	4620      	mov	r0, r4
 8007316:	f000 fc67 	bl	8007be8 <_vfiprintf_r>
 800731a:	b002      	add	sp, #8
 800731c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007320:	b004      	add	sp, #16
 8007322:	4770      	bx	lr
 8007324:	2000007c 	.word	0x2000007c

08007328 <_puts_r>:
 8007328:	b570      	push	{r4, r5, r6, lr}
 800732a:	460e      	mov	r6, r1
 800732c:	4605      	mov	r5, r0
 800732e:	b118      	cbz	r0, 8007338 <_puts_r+0x10>
 8007330:	6983      	ldr	r3, [r0, #24]
 8007332:	b90b      	cbnz	r3, 8007338 <_puts_r+0x10>
 8007334:	f000 fa48 	bl	80077c8 <__sinit>
 8007338:	69ab      	ldr	r3, [r5, #24]
 800733a:	68ac      	ldr	r4, [r5, #8]
 800733c:	b913      	cbnz	r3, 8007344 <_puts_r+0x1c>
 800733e:	4628      	mov	r0, r5
 8007340:	f000 fa42 	bl	80077c8 <__sinit>
 8007344:	4b2c      	ldr	r3, [pc, #176]	; (80073f8 <_puts_r+0xd0>)
 8007346:	429c      	cmp	r4, r3
 8007348:	d120      	bne.n	800738c <_puts_r+0x64>
 800734a:	686c      	ldr	r4, [r5, #4]
 800734c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800734e:	07db      	lsls	r3, r3, #31
 8007350:	d405      	bmi.n	800735e <_puts_r+0x36>
 8007352:	89a3      	ldrh	r3, [r4, #12]
 8007354:	0598      	lsls	r0, r3, #22
 8007356:	d402      	bmi.n	800735e <_puts_r+0x36>
 8007358:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800735a:	f000 fad3 	bl	8007904 <__retarget_lock_acquire_recursive>
 800735e:	89a3      	ldrh	r3, [r4, #12]
 8007360:	0719      	lsls	r1, r3, #28
 8007362:	d51d      	bpl.n	80073a0 <_puts_r+0x78>
 8007364:	6923      	ldr	r3, [r4, #16]
 8007366:	b1db      	cbz	r3, 80073a0 <_puts_r+0x78>
 8007368:	3e01      	subs	r6, #1
 800736a:	68a3      	ldr	r3, [r4, #8]
 800736c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007370:	3b01      	subs	r3, #1
 8007372:	60a3      	str	r3, [r4, #8]
 8007374:	bb39      	cbnz	r1, 80073c6 <_puts_r+0x9e>
 8007376:	2b00      	cmp	r3, #0
 8007378:	da38      	bge.n	80073ec <_puts_r+0xc4>
 800737a:	4622      	mov	r2, r4
 800737c:	210a      	movs	r1, #10
 800737e:	4628      	mov	r0, r5
 8007380:	f000 f848 	bl	8007414 <__swbuf_r>
 8007384:	3001      	adds	r0, #1
 8007386:	d011      	beq.n	80073ac <_puts_r+0x84>
 8007388:	250a      	movs	r5, #10
 800738a:	e011      	b.n	80073b0 <_puts_r+0x88>
 800738c:	4b1b      	ldr	r3, [pc, #108]	; (80073fc <_puts_r+0xd4>)
 800738e:	429c      	cmp	r4, r3
 8007390:	d101      	bne.n	8007396 <_puts_r+0x6e>
 8007392:	68ac      	ldr	r4, [r5, #8]
 8007394:	e7da      	b.n	800734c <_puts_r+0x24>
 8007396:	4b1a      	ldr	r3, [pc, #104]	; (8007400 <_puts_r+0xd8>)
 8007398:	429c      	cmp	r4, r3
 800739a:	bf08      	it	eq
 800739c:	68ec      	ldreq	r4, [r5, #12]
 800739e:	e7d5      	b.n	800734c <_puts_r+0x24>
 80073a0:	4621      	mov	r1, r4
 80073a2:	4628      	mov	r0, r5
 80073a4:	f000 f888 	bl	80074b8 <__swsetup_r>
 80073a8:	2800      	cmp	r0, #0
 80073aa:	d0dd      	beq.n	8007368 <_puts_r+0x40>
 80073ac:	f04f 35ff 	mov.w	r5, #4294967295
 80073b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073b2:	07da      	lsls	r2, r3, #31
 80073b4:	d405      	bmi.n	80073c2 <_puts_r+0x9a>
 80073b6:	89a3      	ldrh	r3, [r4, #12]
 80073b8:	059b      	lsls	r3, r3, #22
 80073ba:	d402      	bmi.n	80073c2 <_puts_r+0x9a>
 80073bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073be:	f000 faa2 	bl	8007906 <__retarget_lock_release_recursive>
 80073c2:	4628      	mov	r0, r5
 80073c4:	bd70      	pop	{r4, r5, r6, pc}
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	da04      	bge.n	80073d4 <_puts_r+0xac>
 80073ca:	69a2      	ldr	r2, [r4, #24]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	dc06      	bgt.n	80073de <_puts_r+0xb6>
 80073d0:	290a      	cmp	r1, #10
 80073d2:	d004      	beq.n	80073de <_puts_r+0xb6>
 80073d4:	6823      	ldr	r3, [r4, #0]
 80073d6:	1c5a      	adds	r2, r3, #1
 80073d8:	6022      	str	r2, [r4, #0]
 80073da:	7019      	strb	r1, [r3, #0]
 80073dc:	e7c5      	b.n	800736a <_puts_r+0x42>
 80073de:	4622      	mov	r2, r4
 80073e0:	4628      	mov	r0, r5
 80073e2:	f000 f817 	bl	8007414 <__swbuf_r>
 80073e6:	3001      	adds	r0, #1
 80073e8:	d1bf      	bne.n	800736a <_puts_r+0x42>
 80073ea:	e7df      	b.n	80073ac <_puts_r+0x84>
 80073ec:	6823      	ldr	r3, [r4, #0]
 80073ee:	250a      	movs	r5, #10
 80073f0:	1c5a      	adds	r2, r3, #1
 80073f2:	6022      	str	r2, [r4, #0]
 80073f4:	701d      	strb	r5, [r3, #0]
 80073f6:	e7db      	b.n	80073b0 <_puts_r+0x88>
 80073f8:	0800850c 	.word	0x0800850c
 80073fc:	0800852c 	.word	0x0800852c
 8007400:	080084ec 	.word	0x080084ec

08007404 <puts>:
 8007404:	4b02      	ldr	r3, [pc, #8]	; (8007410 <puts+0xc>)
 8007406:	4601      	mov	r1, r0
 8007408:	6818      	ldr	r0, [r3, #0]
 800740a:	f7ff bf8d 	b.w	8007328 <_puts_r>
 800740e:	bf00      	nop
 8007410:	2000007c 	.word	0x2000007c

08007414 <__swbuf_r>:
 8007414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007416:	460e      	mov	r6, r1
 8007418:	4614      	mov	r4, r2
 800741a:	4605      	mov	r5, r0
 800741c:	b118      	cbz	r0, 8007426 <__swbuf_r+0x12>
 800741e:	6983      	ldr	r3, [r0, #24]
 8007420:	b90b      	cbnz	r3, 8007426 <__swbuf_r+0x12>
 8007422:	f000 f9d1 	bl	80077c8 <__sinit>
 8007426:	4b21      	ldr	r3, [pc, #132]	; (80074ac <__swbuf_r+0x98>)
 8007428:	429c      	cmp	r4, r3
 800742a:	d12b      	bne.n	8007484 <__swbuf_r+0x70>
 800742c:	686c      	ldr	r4, [r5, #4]
 800742e:	69a3      	ldr	r3, [r4, #24]
 8007430:	60a3      	str	r3, [r4, #8]
 8007432:	89a3      	ldrh	r3, [r4, #12]
 8007434:	071a      	lsls	r2, r3, #28
 8007436:	d52f      	bpl.n	8007498 <__swbuf_r+0x84>
 8007438:	6923      	ldr	r3, [r4, #16]
 800743a:	b36b      	cbz	r3, 8007498 <__swbuf_r+0x84>
 800743c:	6923      	ldr	r3, [r4, #16]
 800743e:	6820      	ldr	r0, [r4, #0]
 8007440:	1ac0      	subs	r0, r0, r3
 8007442:	6963      	ldr	r3, [r4, #20]
 8007444:	b2f6      	uxtb	r6, r6
 8007446:	4283      	cmp	r3, r0
 8007448:	4637      	mov	r7, r6
 800744a:	dc04      	bgt.n	8007456 <__swbuf_r+0x42>
 800744c:	4621      	mov	r1, r4
 800744e:	4628      	mov	r0, r5
 8007450:	f000 f926 	bl	80076a0 <_fflush_r>
 8007454:	bb30      	cbnz	r0, 80074a4 <__swbuf_r+0x90>
 8007456:	68a3      	ldr	r3, [r4, #8]
 8007458:	3b01      	subs	r3, #1
 800745a:	60a3      	str	r3, [r4, #8]
 800745c:	6823      	ldr	r3, [r4, #0]
 800745e:	1c5a      	adds	r2, r3, #1
 8007460:	6022      	str	r2, [r4, #0]
 8007462:	701e      	strb	r6, [r3, #0]
 8007464:	6963      	ldr	r3, [r4, #20]
 8007466:	3001      	adds	r0, #1
 8007468:	4283      	cmp	r3, r0
 800746a:	d004      	beq.n	8007476 <__swbuf_r+0x62>
 800746c:	89a3      	ldrh	r3, [r4, #12]
 800746e:	07db      	lsls	r3, r3, #31
 8007470:	d506      	bpl.n	8007480 <__swbuf_r+0x6c>
 8007472:	2e0a      	cmp	r6, #10
 8007474:	d104      	bne.n	8007480 <__swbuf_r+0x6c>
 8007476:	4621      	mov	r1, r4
 8007478:	4628      	mov	r0, r5
 800747a:	f000 f911 	bl	80076a0 <_fflush_r>
 800747e:	b988      	cbnz	r0, 80074a4 <__swbuf_r+0x90>
 8007480:	4638      	mov	r0, r7
 8007482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007484:	4b0a      	ldr	r3, [pc, #40]	; (80074b0 <__swbuf_r+0x9c>)
 8007486:	429c      	cmp	r4, r3
 8007488:	d101      	bne.n	800748e <__swbuf_r+0x7a>
 800748a:	68ac      	ldr	r4, [r5, #8]
 800748c:	e7cf      	b.n	800742e <__swbuf_r+0x1a>
 800748e:	4b09      	ldr	r3, [pc, #36]	; (80074b4 <__swbuf_r+0xa0>)
 8007490:	429c      	cmp	r4, r3
 8007492:	bf08      	it	eq
 8007494:	68ec      	ldreq	r4, [r5, #12]
 8007496:	e7ca      	b.n	800742e <__swbuf_r+0x1a>
 8007498:	4621      	mov	r1, r4
 800749a:	4628      	mov	r0, r5
 800749c:	f000 f80c 	bl	80074b8 <__swsetup_r>
 80074a0:	2800      	cmp	r0, #0
 80074a2:	d0cb      	beq.n	800743c <__swbuf_r+0x28>
 80074a4:	f04f 37ff 	mov.w	r7, #4294967295
 80074a8:	e7ea      	b.n	8007480 <__swbuf_r+0x6c>
 80074aa:	bf00      	nop
 80074ac:	0800850c 	.word	0x0800850c
 80074b0:	0800852c 	.word	0x0800852c
 80074b4:	080084ec 	.word	0x080084ec

080074b8 <__swsetup_r>:
 80074b8:	4b32      	ldr	r3, [pc, #200]	; (8007584 <__swsetup_r+0xcc>)
 80074ba:	b570      	push	{r4, r5, r6, lr}
 80074bc:	681d      	ldr	r5, [r3, #0]
 80074be:	4606      	mov	r6, r0
 80074c0:	460c      	mov	r4, r1
 80074c2:	b125      	cbz	r5, 80074ce <__swsetup_r+0x16>
 80074c4:	69ab      	ldr	r3, [r5, #24]
 80074c6:	b913      	cbnz	r3, 80074ce <__swsetup_r+0x16>
 80074c8:	4628      	mov	r0, r5
 80074ca:	f000 f97d 	bl	80077c8 <__sinit>
 80074ce:	4b2e      	ldr	r3, [pc, #184]	; (8007588 <__swsetup_r+0xd0>)
 80074d0:	429c      	cmp	r4, r3
 80074d2:	d10f      	bne.n	80074f4 <__swsetup_r+0x3c>
 80074d4:	686c      	ldr	r4, [r5, #4]
 80074d6:	89a3      	ldrh	r3, [r4, #12]
 80074d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074dc:	0719      	lsls	r1, r3, #28
 80074de:	d42c      	bmi.n	800753a <__swsetup_r+0x82>
 80074e0:	06dd      	lsls	r5, r3, #27
 80074e2:	d411      	bmi.n	8007508 <__swsetup_r+0x50>
 80074e4:	2309      	movs	r3, #9
 80074e6:	6033      	str	r3, [r6, #0]
 80074e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80074ec:	81a3      	strh	r3, [r4, #12]
 80074ee:	f04f 30ff 	mov.w	r0, #4294967295
 80074f2:	e03e      	b.n	8007572 <__swsetup_r+0xba>
 80074f4:	4b25      	ldr	r3, [pc, #148]	; (800758c <__swsetup_r+0xd4>)
 80074f6:	429c      	cmp	r4, r3
 80074f8:	d101      	bne.n	80074fe <__swsetup_r+0x46>
 80074fa:	68ac      	ldr	r4, [r5, #8]
 80074fc:	e7eb      	b.n	80074d6 <__swsetup_r+0x1e>
 80074fe:	4b24      	ldr	r3, [pc, #144]	; (8007590 <__swsetup_r+0xd8>)
 8007500:	429c      	cmp	r4, r3
 8007502:	bf08      	it	eq
 8007504:	68ec      	ldreq	r4, [r5, #12]
 8007506:	e7e6      	b.n	80074d6 <__swsetup_r+0x1e>
 8007508:	0758      	lsls	r0, r3, #29
 800750a:	d512      	bpl.n	8007532 <__swsetup_r+0x7a>
 800750c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800750e:	b141      	cbz	r1, 8007522 <__swsetup_r+0x6a>
 8007510:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007514:	4299      	cmp	r1, r3
 8007516:	d002      	beq.n	800751e <__swsetup_r+0x66>
 8007518:	4630      	mov	r0, r6
 800751a:	f000 fa5b 	bl	80079d4 <_free_r>
 800751e:	2300      	movs	r3, #0
 8007520:	6363      	str	r3, [r4, #52]	; 0x34
 8007522:	89a3      	ldrh	r3, [r4, #12]
 8007524:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007528:	81a3      	strh	r3, [r4, #12]
 800752a:	2300      	movs	r3, #0
 800752c:	6063      	str	r3, [r4, #4]
 800752e:	6923      	ldr	r3, [r4, #16]
 8007530:	6023      	str	r3, [r4, #0]
 8007532:	89a3      	ldrh	r3, [r4, #12]
 8007534:	f043 0308 	orr.w	r3, r3, #8
 8007538:	81a3      	strh	r3, [r4, #12]
 800753a:	6923      	ldr	r3, [r4, #16]
 800753c:	b94b      	cbnz	r3, 8007552 <__swsetup_r+0x9a>
 800753e:	89a3      	ldrh	r3, [r4, #12]
 8007540:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007548:	d003      	beq.n	8007552 <__swsetup_r+0x9a>
 800754a:	4621      	mov	r1, r4
 800754c:	4630      	mov	r0, r6
 800754e:	f000 fa01 	bl	8007954 <__smakebuf_r>
 8007552:	89a0      	ldrh	r0, [r4, #12]
 8007554:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007558:	f010 0301 	ands.w	r3, r0, #1
 800755c:	d00a      	beq.n	8007574 <__swsetup_r+0xbc>
 800755e:	2300      	movs	r3, #0
 8007560:	60a3      	str	r3, [r4, #8]
 8007562:	6963      	ldr	r3, [r4, #20]
 8007564:	425b      	negs	r3, r3
 8007566:	61a3      	str	r3, [r4, #24]
 8007568:	6923      	ldr	r3, [r4, #16]
 800756a:	b943      	cbnz	r3, 800757e <__swsetup_r+0xc6>
 800756c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007570:	d1ba      	bne.n	80074e8 <__swsetup_r+0x30>
 8007572:	bd70      	pop	{r4, r5, r6, pc}
 8007574:	0781      	lsls	r1, r0, #30
 8007576:	bf58      	it	pl
 8007578:	6963      	ldrpl	r3, [r4, #20]
 800757a:	60a3      	str	r3, [r4, #8]
 800757c:	e7f4      	b.n	8007568 <__swsetup_r+0xb0>
 800757e:	2000      	movs	r0, #0
 8007580:	e7f7      	b.n	8007572 <__swsetup_r+0xba>
 8007582:	bf00      	nop
 8007584:	2000007c 	.word	0x2000007c
 8007588:	0800850c 	.word	0x0800850c
 800758c:	0800852c 	.word	0x0800852c
 8007590:	080084ec 	.word	0x080084ec

08007594 <__sflush_r>:
 8007594:	898a      	ldrh	r2, [r1, #12]
 8007596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800759a:	4605      	mov	r5, r0
 800759c:	0710      	lsls	r0, r2, #28
 800759e:	460c      	mov	r4, r1
 80075a0:	d458      	bmi.n	8007654 <__sflush_r+0xc0>
 80075a2:	684b      	ldr	r3, [r1, #4]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	dc05      	bgt.n	80075b4 <__sflush_r+0x20>
 80075a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	dc02      	bgt.n	80075b4 <__sflush_r+0x20>
 80075ae:	2000      	movs	r0, #0
 80075b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075b6:	2e00      	cmp	r6, #0
 80075b8:	d0f9      	beq.n	80075ae <__sflush_r+0x1a>
 80075ba:	2300      	movs	r3, #0
 80075bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075c0:	682f      	ldr	r7, [r5, #0]
 80075c2:	602b      	str	r3, [r5, #0]
 80075c4:	d032      	beq.n	800762c <__sflush_r+0x98>
 80075c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075c8:	89a3      	ldrh	r3, [r4, #12]
 80075ca:	075a      	lsls	r2, r3, #29
 80075cc:	d505      	bpl.n	80075da <__sflush_r+0x46>
 80075ce:	6863      	ldr	r3, [r4, #4]
 80075d0:	1ac0      	subs	r0, r0, r3
 80075d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075d4:	b10b      	cbz	r3, 80075da <__sflush_r+0x46>
 80075d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075d8:	1ac0      	subs	r0, r0, r3
 80075da:	2300      	movs	r3, #0
 80075dc:	4602      	mov	r2, r0
 80075de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075e0:	6a21      	ldr	r1, [r4, #32]
 80075e2:	4628      	mov	r0, r5
 80075e4:	47b0      	blx	r6
 80075e6:	1c43      	adds	r3, r0, #1
 80075e8:	89a3      	ldrh	r3, [r4, #12]
 80075ea:	d106      	bne.n	80075fa <__sflush_r+0x66>
 80075ec:	6829      	ldr	r1, [r5, #0]
 80075ee:	291d      	cmp	r1, #29
 80075f0:	d82c      	bhi.n	800764c <__sflush_r+0xb8>
 80075f2:	4a2a      	ldr	r2, [pc, #168]	; (800769c <__sflush_r+0x108>)
 80075f4:	40ca      	lsrs	r2, r1
 80075f6:	07d6      	lsls	r6, r2, #31
 80075f8:	d528      	bpl.n	800764c <__sflush_r+0xb8>
 80075fa:	2200      	movs	r2, #0
 80075fc:	6062      	str	r2, [r4, #4]
 80075fe:	04d9      	lsls	r1, r3, #19
 8007600:	6922      	ldr	r2, [r4, #16]
 8007602:	6022      	str	r2, [r4, #0]
 8007604:	d504      	bpl.n	8007610 <__sflush_r+0x7c>
 8007606:	1c42      	adds	r2, r0, #1
 8007608:	d101      	bne.n	800760e <__sflush_r+0x7a>
 800760a:	682b      	ldr	r3, [r5, #0]
 800760c:	b903      	cbnz	r3, 8007610 <__sflush_r+0x7c>
 800760e:	6560      	str	r0, [r4, #84]	; 0x54
 8007610:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007612:	602f      	str	r7, [r5, #0]
 8007614:	2900      	cmp	r1, #0
 8007616:	d0ca      	beq.n	80075ae <__sflush_r+0x1a>
 8007618:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800761c:	4299      	cmp	r1, r3
 800761e:	d002      	beq.n	8007626 <__sflush_r+0x92>
 8007620:	4628      	mov	r0, r5
 8007622:	f000 f9d7 	bl	80079d4 <_free_r>
 8007626:	2000      	movs	r0, #0
 8007628:	6360      	str	r0, [r4, #52]	; 0x34
 800762a:	e7c1      	b.n	80075b0 <__sflush_r+0x1c>
 800762c:	6a21      	ldr	r1, [r4, #32]
 800762e:	2301      	movs	r3, #1
 8007630:	4628      	mov	r0, r5
 8007632:	47b0      	blx	r6
 8007634:	1c41      	adds	r1, r0, #1
 8007636:	d1c7      	bne.n	80075c8 <__sflush_r+0x34>
 8007638:	682b      	ldr	r3, [r5, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d0c4      	beq.n	80075c8 <__sflush_r+0x34>
 800763e:	2b1d      	cmp	r3, #29
 8007640:	d001      	beq.n	8007646 <__sflush_r+0xb2>
 8007642:	2b16      	cmp	r3, #22
 8007644:	d101      	bne.n	800764a <__sflush_r+0xb6>
 8007646:	602f      	str	r7, [r5, #0]
 8007648:	e7b1      	b.n	80075ae <__sflush_r+0x1a>
 800764a:	89a3      	ldrh	r3, [r4, #12]
 800764c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007650:	81a3      	strh	r3, [r4, #12]
 8007652:	e7ad      	b.n	80075b0 <__sflush_r+0x1c>
 8007654:	690f      	ldr	r7, [r1, #16]
 8007656:	2f00      	cmp	r7, #0
 8007658:	d0a9      	beq.n	80075ae <__sflush_r+0x1a>
 800765a:	0793      	lsls	r3, r2, #30
 800765c:	680e      	ldr	r6, [r1, #0]
 800765e:	bf08      	it	eq
 8007660:	694b      	ldreq	r3, [r1, #20]
 8007662:	600f      	str	r7, [r1, #0]
 8007664:	bf18      	it	ne
 8007666:	2300      	movne	r3, #0
 8007668:	eba6 0807 	sub.w	r8, r6, r7
 800766c:	608b      	str	r3, [r1, #8]
 800766e:	f1b8 0f00 	cmp.w	r8, #0
 8007672:	dd9c      	ble.n	80075ae <__sflush_r+0x1a>
 8007674:	6a21      	ldr	r1, [r4, #32]
 8007676:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007678:	4643      	mov	r3, r8
 800767a:	463a      	mov	r2, r7
 800767c:	4628      	mov	r0, r5
 800767e:	47b0      	blx	r6
 8007680:	2800      	cmp	r0, #0
 8007682:	dc06      	bgt.n	8007692 <__sflush_r+0xfe>
 8007684:	89a3      	ldrh	r3, [r4, #12]
 8007686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800768a:	81a3      	strh	r3, [r4, #12]
 800768c:	f04f 30ff 	mov.w	r0, #4294967295
 8007690:	e78e      	b.n	80075b0 <__sflush_r+0x1c>
 8007692:	4407      	add	r7, r0
 8007694:	eba8 0800 	sub.w	r8, r8, r0
 8007698:	e7e9      	b.n	800766e <__sflush_r+0xda>
 800769a:	bf00      	nop
 800769c:	20400001 	.word	0x20400001

080076a0 <_fflush_r>:
 80076a0:	b538      	push	{r3, r4, r5, lr}
 80076a2:	690b      	ldr	r3, [r1, #16]
 80076a4:	4605      	mov	r5, r0
 80076a6:	460c      	mov	r4, r1
 80076a8:	b913      	cbnz	r3, 80076b0 <_fflush_r+0x10>
 80076aa:	2500      	movs	r5, #0
 80076ac:	4628      	mov	r0, r5
 80076ae:	bd38      	pop	{r3, r4, r5, pc}
 80076b0:	b118      	cbz	r0, 80076ba <_fflush_r+0x1a>
 80076b2:	6983      	ldr	r3, [r0, #24]
 80076b4:	b90b      	cbnz	r3, 80076ba <_fflush_r+0x1a>
 80076b6:	f000 f887 	bl	80077c8 <__sinit>
 80076ba:	4b14      	ldr	r3, [pc, #80]	; (800770c <_fflush_r+0x6c>)
 80076bc:	429c      	cmp	r4, r3
 80076be:	d11b      	bne.n	80076f8 <_fflush_r+0x58>
 80076c0:	686c      	ldr	r4, [r5, #4]
 80076c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d0ef      	beq.n	80076aa <_fflush_r+0xa>
 80076ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076cc:	07d0      	lsls	r0, r2, #31
 80076ce:	d404      	bmi.n	80076da <_fflush_r+0x3a>
 80076d0:	0599      	lsls	r1, r3, #22
 80076d2:	d402      	bmi.n	80076da <_fflush_r+0x3a>
 80076d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076d6:	f000 f915 	bl	8007904 <__retarget_lock_acquire_recursive>
 80076da:	4628      	mov	r0, r5
 80076dc:	4621      	mov	r1, r4
 80076de:	f7ff ff59 	bl	8007594 <__sflush_r>
 80076e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076e4:	07da      	lsls	r2, r3, #31
 80076e6:	4605      	mov	r5, r0
 80076e8:	d4e0      	bmi.n	80076ac <_fflush_r+0xc>
 80076ea:	89a3      	ldrh	r3, [r4, #12]
 80076ec:	059b      	lsls	r3, r3, #22
 80076ee:	d4dd      	bmi.n	80076ac <_fflush_r+0xc>
 80076f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076f2:	f000 f908 	bl	8007906 <__retarget_lock_release_recursive>
 80076f6:	e7d9      	b.n	80076ac <_fflush_r+0xc>
 80076f8:	4b05      	ldr	r3, [pc, #20]	; (8007710 <_fflush_r+0x70>)
 80076fa:	429c      	cmp	r4, r3
 80076fc:	d101      	bne.n	8007702 <_fflush_r+0x62>
 80076fe:	68ac      	ldr	r4, [r5, #8]
 8007700:	e7df      	b.n	80076c2 <_fflush_r+0x22>
 8007702:	4b04      	ldr	r3, [pc, #16]	; (8007714 <_fflush_r+0x74>)
 8007704:	429c      	cmp	r4, r3
 8007706:	bf08      	it	eq
 8007708:	68ec      	ldreq	r4, [r5, #12]
 800770a:	e7da      	b.n	80076c2 <_fflush_r+0x22>
 800770c:	0800850c 	.word	0x0800850c
 8007710:	0800852c 	.word	0x0800852c
 8007714:	080084ec 	.word	0x080084ec

08007718 <std>:
 8007718:	2300      	movs	r3, #0
 800771a:	b510      	push	{r4, lr}
 800771c:	4604      	mov	r4, r0
 800771e:	e9c0 3300 	strd	r3, r3, [r0]
 8007722:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007726:	6083      	str	r3, [r0, #8]
 8007728:	8181      	strh	r1, [r0, #12]
 800772a:	6643      	str	r3, [r0, #100]	; 0x64
 800772c:	81c2      	strh	r2, [r0, #14]
 800772e:	6183      	str	r3, [r0, #24]
 8007730:	4619      	mov	r1, r3
 8007732:	2208      	movs	r2, #8
 8007734:	305c      	adds	r0, #92	; 0x5c
 8007736:	f7ff fdd7 	bl	80072e8 <memset>
 800773a:	4b05      	ldr	r3, [pc, #20]	; (8007750 <std+0x38>)
 800773c:	6263      	str	r3, [r4, #36]	; 0x24
 800773e:	4b05      	ldr	r3, [pc, #20]	; (8007754 <std+0x3c>)
 8007740:	62a3      	str	r3, [r4, #40]	; 0x28
 8007742:	4b05      	ldr	r3, [pc, #20]	; (8007758 <std+0x40>)
 8007744:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007746:	4b05      	ldr	r3, [pc, #20]	; (800775c <std+0x44>)
 8007748:	6224      	str	r4, [r4, #32]
 800774a:	6323      	str	r3, [r4, #48]	; 0x30
 800774c:	bd10      	pop	{r4, pc}
 800774e:	bf00      	nop
 8007750:	08008191 	.word	0x08008191
 8007754:	080081b3 	.word	0x080081b3
 8007758:	080081eb 	.word	0x080081eb
 800775c:	0800820f 	.word	0x0800820f

08007760 <_cleanup_r>:
 8007760:	4901      	ldr	r1, [pc, #4]	; (8007768 <_cleanup_r+0x8>)
 8007762:	f000 b8af 	b.w	80078c4 <_fwalk_reent>
 8007766:	bf00      	nop
 8007768:	080076a1 	.word	0x080076a1

0800776c <__sfmoreglue>:
 800776c:	b570      	push	{r4, r5, r6, lr}
 800776e:	2268      	movs	r2, #104	; 0x68
 8007770:	1e4d      	subs	r5, r1, #1
 8007772:	4355      	muls	r5, r2
 8007774:	460e      	mov	r6, r1
 8007776:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800777a:	f000 f997 	bl	8007aac <_malloc_r>
 800777e:	4604      	mov	r4, r0
 8007780:	b140      	cbz	r0, 8007794 <__sfmoreglue+0x28>
 8007782:	2100      	movs	r1, #0
 8007784:	e9c0 1600 	strd	r1, r6, [r0]
 8007788:	300c      	adds	r0, #12
 800778a:	60a0      	str	r0, [r4, #8]
 800778c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007790:	f7ff fdaa 	bl	80072e8 <memset>
 8007794:	4620      	mov	r0, r4
 8007796:	bd70      	pop	{r4, r5, r6, pc}

08007798 <__sfp_lock_acquire>:
 8007798:	4801      	ldr	r0, [pc, #4]	; (80077a0 <__sfp_lock_acquire+0x8>)
 800779a:	f000 b8b3 	b.w	8007904 <__retarget_lock_acquire_recursive>
 800779e:	bf00      	nop
 80077a0:	20000629 	.word	0x20000629

080077a4 <__sfp_lock_release>:
 80077a4:	4801      	ldr	r0, [pc, #4]	; (80077ac <__sfp_lock_release+0x8>)
 80077a6:	f000 b8ae 	b.w	8007906 <__retarget_lock_release_recursive>
 80077aa:	bf00      	nop
 80077ac:	20000629 	.word	0x20000629

080077b0 <__sinit_lock_acquire>:
 80077b0:	4801      	ldr	r0, [pc, #4]	; (80077b8 <__sinit_lock_acquire+0x8>)
 80077b2:	f000 b8a7 	b.w	8007904 <__retarget_lock_acquire_recursive>
 80077b6:	bf00      	nop
 80077b8:	2000062a 	.word	0x2000062a

080077bc <__sinit_lock_release>:
 80077bc:	4801      	ldr	r0, [pc, #4]	; (80077c4 <__sinit_lock_release+0x8>)
 80077be:	f000 b8a2 	b.w	8007906 <__retarget_lock_release_recursive>
 80077c2:	bf00      	nop
 80077c4:	2000062a 	.word	0x2000062a

080077c8 <__sinit>:
 80077c8:	b510      	push	{r4, lr}
 80077ca:	4604      	mov	r4, r0
 80077cc:	f7ff fff0 	bl	80077b0 <__sinit_lock_acquire>
 80077d0:	69a3      	ldr	r3, [r4, #24]
 80077d2:	b11b      	cbz	r3, 80077dc <__sinit+0x14>
 80077d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077d8:	f7ff bff0 	b.w	80077bc <__sinit_lock_release>
 80077dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80077e0:	6523      	str	r3, [r4, #80]	; 0x50
 80077e2:	4b13      	ldr	r3, [pc, #76]	; (8007830 <__sinit+0x68>)
 80077e4:	4a13      	ldr	r2, [pc, #76]	; (8007834 <__sinit+0x6c>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80077ea:	42a3      	cmp	r3, r4
 80077ec:	bf04      	itt	eq
 80077ee:	2301      	moveq	r3, #1
 80077f0:	61a3      	streq	r3, [r4, #24]
 80077f2:	4620      	mov	r0, r4
 80077f4:	f000 f820 	bl	8007838 <__sfp>
 80077f8:	6060      	str	r0, [r4, #4]
 80077fa:	4620      	mov	r0, r4
 80077fc:	f000 f81c 	bl	8007838 <__sfp>
 8007800:	60a0      	str	r0, [r4, #8]
 8007802:	4620      	mov	r0, r4
 8007804:	f000 f818 	bl	8007838 <__sfp>
 8007808:	2200      	movs	r2, #0
 800780a:	60e0      	str	r0, [r4, #12]
 800780c:	2104      	movs	r1, #4
 800780e:	6860      	ldr	r0, [r4, #4]
 8007810:	f7ff ff82 	bl	8007718 <std>
 8007814:	68a0      	ldr	r0, [r4, #8]
 8007816:	2201      	movs	r2, #1
 8007818:	2109      	movs	r1, #9
 800781a:	f7ff ff7d 	bl	8007718 <std>
 800781e:	68e0      	ldr	r0, [r4, #12]
 8007820:	2202      	movs	r2, #2
 8007822:	2112      	movs	r1, #18
 8007824:	f7ff ff78 	bl	8007718 <std>
 8007828:	2301      	movs	r3, #1
 800782a:	61a3      	str	r3, [r4, #24]
 800782c:	e7d2      	b.n	80077d4 <__sinit+0xc>
 800782e:	bf00      	nop
 8007830:	080084e8 	.word	0x080084e8
 8007834:	08007761 	.word	0x08007761

08007838 <__sfp>:
 8007838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783a:	4607      	mov	r7, r0
 800783c:	f7ff ffac 	bl	8007798 <__sfp_lock_acquire>
 8007840:	4b1e      	ldr	r3, [pc, #120]	; (80078bc <__sfp+0x84>)
 8007842:	681e      	ldr	r6, [r3, #0]
 8007844:	69b3      	ldr	r3, [r6, #24]
 8007846:	b913      	cbnz	r3, 800784e <__sfp+0x16>
 8007848:	4630      	mov	r0, r6
 800784a:	f7ff ffbd 	bl	80077c8 <__sinit>
 800784e:	3648      	adds	r6, #72	; 0x48
 8007850:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007854:	3b01      	subs	r3, #1
 8007856:	d503      	bpl.n	8007860 <__sfp+0x28>
 8007858:	6833      	ldr	r3, [r6, #0]
 800785a:	b30b      	cbz	r3, 80078a0 <__sfp+0x68>
 800785c:	6836      	ldr	r6, [r6, #0]
 800785e:	e7f7      	b.n	8007850 <__sfp+0x18>
 8007860:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007864:	b9d5      	cbnz	r5, 800789c <__sfp+0x64>
 8007866:	4b16      	ldr	r3, [pc, #88]	; (80078c0 <__sfp+0x88>)
 8007868:	60e3      	str	r3, [r4, #12]
 800786a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800786e:	6665      	str	r5, [r4, #100]	; 0x64
 8007870:	f000 f847 	bl	8007902 <__retarget_lock_init_recursive>
 8007874:	f7ff ff96 	bl	80077a4 <__sfp_lock_release>
 8007878:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800787c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007880:	6025      	str	r5, [r4, #0]
 8007882:	61a5      	str	r5, [r4, #24]
 8007884:	2208      	movs	r2, #8
 8007886:	4629      	mov	r1, r5
 8007888:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800788c:	f7ff fd2c 	bl	80072e8 <memset>
 8007890:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007894:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007898:	4620      	mov	r0, r4
 800789a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800789c:	3468      	adds	r4, #104	; 0x68
 800789e:	e7d9      	b.n	8007854 <__sfp+0x1c>
 80078a0:	2104      	movs	r1, #4
 80078a2:	4638      	mov	r0, r7
 80078a4:	f7ff ff62 	bl	800776c <__sfmoreglue>
 80078a8:	4604      	mov	r4, r0
 80078aa:	6030      	str	r0, [r6, #0]
 80078ac:	2800      	cmp	r0, #0
 80078ae:	d1d5      	bne.n	800785c <__sfp+0x24>
 80078b0:	f7ff ff78 	bl	80077a4 <__sfp_lock_release>
 80078b4:	230c      	movs	r3, #12
 80078b6:	603b      	str	r3, [r7, #0]
 80078b8:	e7ee      	b.n	8007898 <__sfp+0x60>
 80078ba:	bf00      	nop
 80078bc:	080084e8 	.word	0x080084e8
 80078c0:	ffff0001 	.word	0xffff0001

080078c4 <_fwalk_reent>:
 80078c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078c8:	4606      	mov	r6, r0
 80078ca:	4688      	mov	r8, r1
 80078cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80078d0:	2700      	movs	r7, #0
 80078d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078d6:	f1b9 0901 	subs.w	r9, r9, #1
 80078da:	d505      	bpl.n	80078e8 <_fwalk_reent+0x24>
 80078dc:	6824      	ldr	r4, [r4, #0]
 80078de:	2c00      	cmp	r4, #0
 80078e0:	d1f7      	bne.n	80078d2 <_fwalk_reent+0xe>
 80078e2:	4638      	mov	r0, r7
 80078e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078e8:	89ab      	ldrh	r3, [r5, #12]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d907      	bls.n	80078fe <_fwalk_reent+0x3a>
 80078ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078f2:	3301      	adds	r3, #1
 80078f4:	d003      	beq.n	80078fe <_fwalk_reent+0x3a>
 80078f6:	4629      	mov	r1, r5
 80078f8:	4630      	mov	r0, r6
 80078fa:	47c0      	blx	r8
 80078fc:	4307      	orrs	r7, r0
 80078fe:	3568      	adds	r5, #104	; 0x68
 8007900:	e7e9      	b.n	80078d6 <_fwalk_reent+0x12>

08007902 <__retarget_lock_init_recursive>:
 8007902:	4770      	bx	lr

08007904 <__retarget_lock_acquire_recursive>:
 8007904:	4770      	bx	lr

08007906 <__retarget_lock_release_recursive>:
 8007906:	4770      	bx	lr

08007908 <__swhatbuf_r>:
 8007908:	b570      	push	{r4, r5, r6, lr}
 800790a:	460e      	mov	r6, r1
 800790c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007910:	2900      	cmp	r1, #0
 8007912:	b096      	sub	sp, #88	; 0x58
 8007914:	4614      	mov	r4, r2
 8007916:	461d      	mov	r5, r3
 8007918:	da08      	bge.n	800792c <__swhatbuf_r+0x24>
 800791a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800791e:	2200      	movs	r2, #0
 8007920:	602a      	str	r2, [r5, #0]
 8007922:	061a      	lsls	r2, r3, #24
 8007924:	d410      	bmi.n	8007948 <__swhatbuf_r+0x40>
 8007926:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800792a:	e00e      	b.n	800794a <__swhatbuf_r+0x42>
 800792c:	466a      	mov	r2, sp
 800792e:	f000 fc95 	bl	800825c <_fstat_r>
 8007932:	2800      	cmp	r0, #0
 8007934:	dbf1      	blt.n	800791a <__swhatbuf_r+0x12>
 8007936:	9a01      	ldr	r2, [sp, #4]
 8007938:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800793c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007940:	425a      	negs	r2, r3
 8007942:	415a      	adcs	r2, r3
 8007944:	602a      	str	r2, [r5, #0]
 8007946:	e7ee      	b.n	8007926 <__swhatbuf_r+0x1e>
 8007948:	2340      	movs	r3, #64	; 0x40
 800794a:	2000      	movs	r0, #0
 800794c:	6023      	str	r3, [r4, #0]
 800794e:	b016      	add	sp, #88	; 0x58
 8007950:	bd70      	pop	{r4, r5, r6, pc}
	...

08007954 <__smakebuf_r>:
 8007954:	898b      	ldrh	r3, [r1, #12]
 8007956:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007958:	079d      	lsls	r5, r3, #30
 800795a:	4606      	mov	r6, r0
 800795c:	460c      	mov	r4, r1
 800795e:	d507      	bpl.n	8007970 <__smakebuf_r+0x1c>
 8007960:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007964:	6023      	str	r3, [r4, #0]
 8007966:	6123      	str	r3, [r4, #16]
 8007968:	2301      	movs	r3, #1
 800796a:	6163      	str	r3, [r4, #20]
 800796c:	b002      	add	sp, #8
 800796e:	bd70      	pop	{r4, r5, r6, pc}
 8007970:	ab01      	add	r3, sp, #4
 8007972:	466a      	mov	r2, sp
 8007974:	f7ff ffc8 	bl	8007908 <__swhatbuf_r>
 8007978:	9900      	ldr	r1, [sp, #0]
 800797a:	4605      	mov	r5, r0
 800797c:	4630      	mov	r0, r6
 800797e:	f000 f895 	bl	8007aac <_malloc_r>
 8007982:	b948      	cbnz	r0, 8007998 <__smakebuf_r+0x44>
 8007984:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007988:	059a      	lsls	r2, r3, #22
 800798a:	d4ef      	bmi.n	800796c <__smakebuf_r+0x18>
 800798c:	f023 0303 	bic.w	r3, r3, #3
 8007990:	f043 0302 	orr.w	r3, r3, #2
 8007994:	81a3      	strh	r3, [r4, #12]
 8007996:	e7e3      	b.n	8007960 <__smakebuf_r+0xc>
 8007998:	4b0d      	ldr	r3, [pc, #52]	; (80079d0 <__smakebuf_r+0x7c>)
 800799a:	62b3      	str	r3, [r6, #40]	; 0x28
 800799c:	89a3      	ldrh	r3, [r4, #12]
 800799e:	6020      	str	r0, [r4, #0]
 80079a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079a4:	81a3      	strh	r3, [r4, #12]
 80079a6:	9b00      	ldr	r3, [sp, #0]
 80079a8:	6163      	str	r3, [r4, #20]
 80079aa:	9b01      	ldr	r3, [sp, #4]
 80079ac:	6120      	str	r0, [r4, #16]
 80079ae:	b15b      	cbz	r3, 80079c8 <__smakebuf_r+0x74>
 80079b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079b4:	4630      	mov	r0, r6
 80079b6:	f000 fc63 	bl	8008280 <_isatty_r>
 80079ba:	b128      	cbz	r0, 80079c8 <__smakebuf_r+0x74>
 80079bc:	89a3      	ldrh	r3, [r4, #12]
 80079be:	f023 0303 	bic.w	r3, r3, #3
 80079c2:	f043 0301 	orr.w	r3, r3, #1
 80079c6:	81a3      	strh	r3, [r4, #12]
 80079c8:	89a0      	ldrh	r0, [r4, #12]
 80079ca:	4305      	orrs	r5, r0
 80079cc:	81a5      	strh	r5, [r4, #12]
 80079ce:	e7cd      	b.n	800796c <__smakebuf_r+0x18>
 80079d0:	08007761 	.word	0x08007761

080079d4 <_free_r>:
 80079d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079d6:	2900      	cmp	r1, #0
 80079d8:	d044      	beq.n	8007a64 <_free_r+0x90>
 80079da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079de:	9001      	str	r0, [sp, #4]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f1a1 0404 	sub.w	r4, r1, #4
 80079e6:	bfb8      	it	lt
 80079e8:	18e4      	addlt	r4, r4, r3
 80079ea:	f000 fc6b 	bl	80082c4 <__malloc_lock>
 80079ee:	4a1e      	ldr	r2, [pc, #120]	; (8007a68 <_free_r+0x94>)
 80079f0:	9801      	ldr	r0, [sp, #4]
 80079f2:	6813      	ldr	r3, [r2, #0]
 80079f4:	b933      	cbnz	r3, 8007a04 <_free_r+0x30>
 80079f6:	6063      	str	r3, [r4, #4]
 80079f8:	6014      	str	r4, [r2, #0]
 80079fa:	b003      	add	sp, #12
 80079fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a00:	f000 bc66 	b.w	80082d0 <__malloc_unlock>
 8007a04:	42a3      	cmp	r3, r4
 8007a06:	d908      	bls.n	8007a1a <_free_r+0x46>
 8007a08:	6825      	ldr	r5, [r4, #0]
 8007a0a:	1961      	adds	r1, r4, r5
 8007a0c:	428b      	cmp	r3, r1
 8007a0e:	bf01      	itttt	eq
 8007a10:	6819      	ldreq	r1, [r3, #0]
 8007a12:	685b      	ldreq	r3, [r3, #4]
 8007a14:	1949      	addeq	r1, r1, r5
 8007a16:	6021      	streq	r1, [r4, #0]
 8007a18:	e7ed      	b.n	80079f6 <_free_r+0x22>
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	b10b      	cbz	r3, 8007a24 <_free_r+0x50>
 8007a20:	42a3      	cmp	r3, r4
 8007a22:	d9fa      	bls.n	8007a1a <_free_r+0x46>
 8007a24:	6811      	ldr	r1, [r2, #0]
 8007a26:	1855      	adds	r5, r2, r1
 8007a28:	42a5      	cmp	r5, r4
 8007a2a:	d10b      	bne.n	8007a44 <_free_r+0x70>
 8007a2c:	6824      	ldr	r4, [r4, #0]
 8007a2e:	4421      	add	r1, r4
 8007a30:	1854      	adds	r4, r2, r1
 8007a32:	42a3      	cmp	r3, r4
 8007a34:	6011      	str	r1, [r2, #0]
 8007a36:	d1e0      	bne.n	80079fa <_free_r+0x26>
 8007a38:	681c      	ldr	r4, [r3, #0]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	6053      	str	r3, [r2, #4]
 8007a3e:	4421      	add	r1, r4
 8007a40:	6011      	str	r1, [r2, #0]
 8007a42:	e7da      	b.n	80079fa <_free_r+0x26>
 8007a44:	d902      	bls.n	8007a4c <_free_r+0x78>
 8007a46:	230c      	movs	r3, #12
 8007a48:	6003      	str	r3, [r0, #0]
 8007a4a:	e7d6      	b.n	80079fa <_free_r+0x26>
 8007a4c:	6825      	ldr	r5, [r4, #0]
 8007a4e:	1961      	adds	r1, r4, r5
 8007a50:	428b      	cmp	r3, r1
 8007a52:	bf04      	itt	eq
 8007a54:	6819      	ldreq	r1, [r3, #0]
 8007a56:	685b      	ldreq	r3, [r3, #4]
 8007a58:	6063      	str	r3, [r4, #4]
 8007a5a:	bf04      	itt	eq
 8007a5c:	1949      	addeq	r1, r1, r5
 8007a5e:	6021      	streq	r1, [r4, #0]
 8007a60:	6054      	str	r4, [r2, #4]
 8007a62:	e7ca      	b.n	80079fa <_free_r+0x26>
 8007a64:	b003      	add	sp, #12
 8007a66:	bd30      	pop	{r4, r5, pc}
 8007a68:	2000062c 	.word	0x2000062c

08007a6c <sbrk_aligned>:
 8007a6c:	b570      	push	{r4, r5, r6, lr}
 8007a6e:	4e0e      	ldr	r6, [pc, #56]	; (8007aa8 <sbrk_aligned+0x3c>)
 8007a70:	460c      	mov	r4, r1
 8007a72:	6831      	ldr	r1, [r6, #0]
 8007a74:	4605      	mov	r5, r0
 8007a76:	b911      	cbnz	r1, 8007a7e <sbrk_aligned+0x12>
 8007a78:	f000 fb7a 	bl	8008170 <_sbrk_r>
 8007a7c:	6030      	str	r0, [r6, #0]
 8007a7e:	4621      	mov	r1, r4
 8007a80:	4628      	mov	r0, r5
 8007a82:	f000 fb75 	bl	8008170 <_sbrk_r>
 8007a86:	1c43      	adds	r3, r0, #1
 8007a88:	d00a      	beq.n	8007aa0 <sbrk_aligned+0x34>
 8007a8a:	1cc4      	adds	r4, r0, #3
 8007a8c:	f024 0403 	bic.w	r4, r4, #3
 8007a90:	42a0      	cmp	r0, r4
 8007a92:	d007      	beq.n	8007aa4 <sbrk_aligned+0x38>
 8007a94:	1a21      	subs	r1, r4, r0
 8007a96:	4628      	mov	r0, r5
 8007a98:	f000 fb6a 	bl	8008170 <_sbrk_r>
 8007a9c:	3001      	adds	r0, #1
 8007a9e:	d101      	bne.n	8007aa4 <sbrk_aligned+0x38>
 8007aa0:	f04f 34ff 	mov.w	r4, #4294967295
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	bd70      	pop	{r4, r5, r6, pc}
 8007aa8:	20000630 	.word	0x20000630

08007aac <_malloc_r>:
 8007aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab0:	1ccd      	adds	r5, r1, #3
 8007ab2:	f025 0503 	bic.w	r5, r5, #3
 8007ab6:	3508      	adds	r5, #8
 8007ab8:	2d0c      	cmp	r5, #12
 8007aba:	bf38      	it	cc
 8007abc:	250c      	movcc	r5, #12
 8007abe:	2d00      	cmp	r5, #0
 8007ac0:	4607      	mov	r7, r0
 8007ac2:	db01      	blt.n	8007ac8 <_malloc_r+0x1c>
 8007ac4:	42a9      	cmp	r1, r5
 8007ac6:	d905      	bls.n	8007ad4 <_malloc_r+0x28>
 8007ac8:	230c      	movs	r3, #12
 8007aca:	603b      	str	r3, [r7, #0]
 8007acc:	2600      	movs	r6, #0
 8007ace:	4630      	mov	r0, r6
 8007ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ad4:	4e2e      	ldr	r6, [pc, #184]	; (8007b90 <_malloc_r+0xe4>)
 8007ad6:	f000 fbf5 	bl	80082c4 <__malloc_lock>
 8007ada:	6833      	ldr	r3, [r6, #0]
 8007adc:	461c      	mov	r4, r3
 8007ade:	bb34      	cbnz	r4, 8007b2e <_malloc_r+0x82>
 8007ae0:	4629      	mov	r1, r5
 8007ae2:	4638      	mov	r0, r7
 8007ae4:	f7ff ffc2 	bl	8007a6c <sbrk_aligned>
 8007ae8:	1c43      	adds	r3, r0, #1
 8007aea:	4604      	mov	r4, r0
 8007aec:	d14d      	bne.n	8007b8a <_malloc_r+0xde>
 8007aee:	6834      	ldr	r4, [r6, #0]
 8007af0:	4626      	mov	r6, r4
 8007af2:	2e00      	cmp	r6, #0
 8007af4:	d140      	bne.n	8007b78 <_malloc_r+0xcc>
 8007af6:	6823      	ldr	r3, [r4, #0]
 8007af8:	4631      	mov	r1, r6
 8007afa:	4638      	mov	r0, r7
 8007afc:	eb04 0803 	add.w	r8, r4, r3
 8007b00:	f000 fb36 	bl	8008170 <_sbrk_r>
 8007b04:	4580      	cmp	r8, r0
 8007b06:	d13a      	bne.n	8007b7e <_malloc_r+0xd2>
 8007b08:	6821      	ldr	r1, [r4, #0]
 8007b0a:	3503      	adds	r5, #3
 8007b0c:	1a6d      	subs	r5, r5, r1
 8007b0e:	f025 0503 	bic.w	r5, r5, #3
 8007b12:	3508      	adds	r5, #8
 8007b14:	2d0c      	cmp	r5, #12
 8007b16:	bf38      	it	cc
 8007b18:	250c      	movcc	r5, #12
 8007b1a:	4629      	mov	r1, r5
 8007b1c:	4638      	mov	r0, r7
 8007b1e:	f7ff ffa5 	bl	8007a6c <sbrk_aligned>
 8007b22:	3001      	adds	r0, #1
 8007b24:	d02b      	beq.n	8007b7e <_malloc_r+0xd2>
 8007b26:	6823      	ldr	r3, [r4, #0]
 8007b28:	442b      	add	r3, r5
 8007b2a:	6023      	str	r3, [r4, #0]
 8007b2c:	e00e      	b.n	8007b4c <_malloc_r+0xa0>
 8007b2e:	6822      	ldr	r2, [r4, #0]
 8007b30:	1b52      	subs	r2, r2, r5
 8007b32:	d41e      	bmi.n	8007b72 <_malloc_r+0xc6>
 8007b34:	2a0b      	cmp	r2, #11
 8007b36:	d916      	bls.n	8007b66 <_malloc_r+0xba>
 8007b38:	1961      	adds	r1, r4, r5
 8007b3a:	42a3      	cmp	r3, r4
 8007b3c:	6025      	str	r5, [r4, #0]
 8007b3e:	bf18      	it	ne
 8007b40:	6059      	strne	r1, [r3, #4]
 8007b42:	6863      	ldr	r3, [r4, #4]
 8007b44:	bf08      	it	eq
 8007b46:	6031      	streq	r1, [r6, #0]
 8007b48:	5162      	str	r2, [r4, r5]
 8007b4a:	604b      	str	r3, [r1, #4]
 8007b4c:	4638      	mov	r0, r7
 8007b4e:	f104 060b 	add.w	r6, r4, #11
 8007b52:	f000 fbbd 	bl	80082d0 <__malloc_unlock>
 8007b56:	f026 0607 	bic.w	r6, r6, #7
 8007b5a:	1d23      	adds	r3, r4, #4
 8007b5c:	1af2      	subs	r2, r6, r3
 8007b5e:	d0b6      	beq.n	8007ace <_malloc_r+0x22>
 8007b60:	1b9b      	subs	r3, r3, r6
 8007b62:	50a3      	str	r3, [r4, r2]
 8007b64:	e7b3      	b.n	8007ace <_malloc_r+0x22>
 8007b66:	6862      	ldr	r2, [r4, #4]
 8007b68:	42a3      	cmp	r3, r4
 8007b6a:	bf0c      	ite	eq
 8007b6c:	6032      	streq	r2, [r6, #0]
 8007b6e:	605a      	strne	r2, [r3, #4]
 8007b70:	e7ec      	b.n	8007b4c <_malloc_r+0xa0>
 8007b72:	4623      	mov	r3, r4
 8007b74:	6864      	ldr	r4, [r4, #4]
 8007b76:	e7b2      	b.n	8007ade <_malloc_r+0x32>
 8007b78:	4634      	mov	r4, r6
 8007b7a:	6876      	ldr	r6, [r6, #4]
 8007b7c:	e7b9      	b.n	8007af2 <_malloc_r+0x46>
 8007b7e:	230c      	movs	r3, #12
 8007b80:	603b      	str	r3, [r7, #0]
 8007b82:	4638      	mov	r0, r7
 8007b84:	f000 fba4 	bl	80082d0 <__malloc_unlock>
 8007b88:	e7a1      	b.n	8007ace <_malloc_r+0x22>
 8007b8a:	6025      	str	r5, [r4, #0]
 8007b8c:	e7de      	b.n	8007b4c <_malloc_r+0xa0>
 8007b8e:	bf00      	nop
 8007b90:	2000062c 	.word	0x2000062c

08007b94 <__sfputc_r>:
 8007b94:	6893      	ldr	r3, [r2, #8]
 8007b96:	3b01      	subs	r3, #1
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	b410      	push	{r4}
 8007b9c:	6093      	str	r3, [r2, #8]
 8007b9e:	da08      	bge.n	8007bb2 <__sfputc_r+0x1e>
 8007ba0:	6994      	ldr	r4, [r2, #24]
 8007ba2:	42a3      	cmp	r3, r4
 8007ba4:	db01      	blt.n	8007baa <__sfputc_r+0x16>
 8007ba6:	290a      	cmp	r1, #10
 8007ba8:	d103      	bne.n	8007bb2 <__sfputc_r+0x1e>
 8007baa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bae:	f7ff bc31 	b.w	8007414 <__swbuf_r>
 8007bb2:	6813      	ldr	r3, [r2, #0]
 8007bb4:	1c58      	adds	r0, r3, #1
 8007bb6:	6010      	str	r0, [r2, #0]
 8007bb8:	7019      	strb	r1, [r3, #0]
 8007bba:	4608      	mov	r0, r1
 8007bbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bc0:	4770      	bx	lr

08007bc2 <__sfputs_r>:
 8007bc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bc4:	4606      	mov	r6, r0
 8007bc6:	460f      	mov	r7, r1
 8007bc8:	4614      	mov	r4, r2
 8007bca:	18d5      	adds	r5, r2, r3
 8007bcc:	42ac      	cmp	r4, r5
 8007bce:	d101      	bne.n	8007bd4 <__sfputs_r+0x12>
 8007bd0:	2000      	movs	r0, #0
 8007bd2:	e007      	b.n	8007be4 <__sfputs_r+0x22>
 8007bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bd8:	463a      	mov	r2, r7
 8007bda:	4630      	mov	r0, r6
 8007bdc:	f7ff ffda 	bl	8007b94 <__sfputc_r>
 8007be0:	1c43      	adds	r3, r0, #1
 8007be2:	d1f3      	bne.n	8007bcc <__sfputs_r+0xa>
 8007be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007be8 <_vfiprintf_r>:
 8007be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bec:	460d      	mov	r5, r1
 8007bee:	b09d      	sub	sp, #116	; 0x74
 8007bf0:	4614      	mov	r4, r2
 8007bf2:	4698      	mov	r8, r3
 8007bf4:	4606      	mov	r6, r0
 8007bf6:	b118      	cbz	r0, 8007c00 <_vfiprintf_r+0x18>
 8007bf8:	6983      	ldr	r3, [r0, #24]
 8007bfa:	b90b      	cbnz	r3, 8007c00 <_vfiprintf_r+0x18>
 8007bfc:	f7ff fde4 	bl	80077c8 <__sinit>
 8007c00:	4b89      	ldr	r3, [pc, #548]	; (8007e28 <_vfiprintf_r+0x240>)
 8007c02:	429d      	cmp	r5, r3
 8007c04:	d11b      	bne.n	8007c3e <_vfiprintf_r+0x56>
 8007c06:	6875      	ldr	r5, [r6, #4]
 8007c08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c0a:	07d9      	lsls	r1, r3, #31
 8007c0c:	d405      	bmi.n	8007c1a <_vfiprintf_r+0x32>
 8007c0e:	89ab      	ldrh	r3, [r5, #12]
 8007c10:	059a      	lsls	r2, r3, #22
 8007c12:	d402      	bmi.n	8007c1a <_vfiprintf_r+0x32>
 8007c14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c16:	f7ff fe75 	bl	8007904 <__retarget_lock_acquire_recursive>
 8007c1a:	89ab      	ldrh	r3, [r5, #12]
 8007c1c:	071b      	lsls	r3, r3, #28
 8007c1e:	d501      	bpl.n	8007c24 <_vfiprintf_r+0x3c>
 8007c20:	692b      	ldr	r3, [r5, #16]
 8007c22:	b9eb      	cbnz	r3, 8007c60 <_vfiprintf_r+0x78>
 8007c24:	4629      	mov	r1, r5
 8007c26:	4630      	mov	r0, r6
 8007c28:	f7ff fc46 	bl	80074b8 <__swsetup_r>
 8007c2c:	b1c0      	cbz	r0, 8007c60 <_vfiprintf_r+0x78>
 8007c2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c30:	07dc      	lsls	r4, r3, #31
 8007c32:	d50e      	bpl.n	8007c52 <_vfiprintf_r+0x6a>
 8007c34:	f04f 30ff 	mov.w	r0, #4294967295
 8007c38:	b01d      	add	sp, #116	; 0x74
 8007c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c3e:	4b7b      	ldr	r3, [pc, #492]	; (8007e2c <_vfiprintf_r+0x244>)
 8007c40:	429d      	cmp	r5, r3
 8007c42:	d101      	bne.n	8007c48 <_vfiprintf_r+0x60>
 8007c44:	68b5      	ldr	r5, [r6, #8]
 8007c46:	e7df      	b.n	8007c08 <_vfiprintf_r+0x20>
 8007c48:	4b79      	ldr	r3, [pc, #484]	; (8007e30 <_vfiprintf_r+0x248>)
 8007c4a:	429d      	cmp	r5, r3
 8007c4c:	bf08      	it	eq
 8007c4e:	68f5      	ldreq	r5, [r6, #12]
 8007c50:	e7da      	b.n	8007c08 <_vfiprintf_r+0x20>
 8007c52:	89ab      	ldrh	r3, [r5, #12]
 8007c54:	0598      	lsls	r0, r3, #22
 8007c56:	d4ed      	bmi.n	8007c34 <_vfiprintf_r+0x4c>
 8007c58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c5a:	f7ff fe54 	bl	8007906 <__retarget_lock_release_recursive>
 8007c5e:	e7e9      	b.n	8007c34 <_vfiprintf_r+0x4c>
 8007c60:	2300      	movs	r3, #0
 8007c62:	9309      	str	r3, [sp, #36]	; 0x24
 8007c64:	2320      	movs	r3, #32
 8007c66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c6e:	2330      	movs	r3, #48	; 0x30
 8007c70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007e34 <_vfiprintf_r+0x24c>
 8007c74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c78:	f04f 0901 	mov.w	r9, #1
 8007c7c:	4623      	mov	r3, r4
 8007c7e:	469a      	mov	sl, r3
 8007c80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c84:	b10a      	cbz	r2, 8007c8a <_vfiprintf_r+0xa2>
 8007c86:	2a25      	cmp	r2, #37	; 0x25
 8007c88:	d1f9      	bne.n	8007c7e <_vfiprintf_r+0x96>
 8007c8a:	ebba 0b04 	subs.w	fp, sl, r4
 8007c8e:	d00b      	beq.n	8007ca8 <_vfiprintf_r+0xc0>
 8007c90:	465b      	mov	r3, fp
 8007c92:	4622      	mov	r2, r4
 8007c94:	4629      	mov	r1, r5
 8007c96:	4630      	mov	r0, r6
 8007c98:	f7ff ff93 	bl	8007bc2 <__sfputs_r>
 8007c9c:	3001      	adds	r0, #1
 8007c9e:	f000 80aa 	beq.w	8007df6 <_vfiprintf_r+0x20e>
 8007ca2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ca4:	445a      	add	r2, fp
 8007ca6:	9209      	str	r2, [sp, #36]	; 0x24
 8007ca8:	f89a 3000 	ldrb.w	r3, [sl]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	f000 80a2 	beq.w	8007df6 <_vfiprintf_r+0x20e>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8007cb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cbc:	f10a 0a01 	add.w	sl, sl, #1
 8007cc0:	9304      	str	r3, [sp, #16]
 8007cc2:	9307      	str	r3, [sp, #28]
 8007cc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cc8:	931a      	str	r3, [sp, #104]	; 0x68
 8007cca:	4654      	mov	r4, sl
 8007ccc:	2205      	movs	r2, #5
 8007cce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cd2:	4858      	ldr	r0, [pc, #352]	; (8007e34 <_vfiprintf_r+0x24c>)
 8007cd4:	f7f8 fa9c 	bl	8000210 <memchr>
 8007cd8:	9a04      	ldr	r2, [sp, #16]
 8007cda:	b9d8      	cbnz	r0, 8007d14 <_vfiprintf_r+0x12c>
 8007cdc:	06d1      	lsls	r1, r2, #27
 8007cde:	bf44      	itt	mi
 8007ce0:	2320      	movmi	r3, #32
 8007ce2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ce6:	0713      	lsls	r3, r2, #28
 8007ce8:	bf44      	itt	mi
 8007cea:	232b      	movmi	r3, #43	; 0x2b
 8007cec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cf0:	f89a 3000 	ldrb.w	r3, [sl]
 8007cf4:	2b2a      	cmp	r3, #42	; 0x2a
 8007cf6:	d015      	beq.n	8007d24 <_vfiprintf_r+0x13c>
 8007cf8:	9a07      	ldr	r2, [sp, #28]
 8007cfa:	4654      	mov	r4, sl
 8007cfc:	2000      	movs	r0, #0
 8007cfe:	f04f 0c0a 	mov.w	ip, #10
 8007d02:	4621      	mov	r1, r4
 8007d04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d08:	3b30      	subs	r3, #48	; 0x30
 8007d0a:	2b09      	cmp	r3, #9
 8007d0c:	d94e      	bls.n	8007dac <_vfiprintf_r+0x1c4>
 8007d0e:	b1b0      	cbz	r0, 8007d3e <_vfiprintf_r+0x156>
 8007d10:	9207      	str	r2, [sp, #28]
 8007d12:	e014      	b.n	8007d3e <_vfiprintf_r+0x156>
 8007d14:	eba0 0308 	sub.w	r3, r0, r8
 8007d18:	fa09 f303 	lsl.w	r3, r9, r3
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	9304      	str	r3, [sp, #16]
 8007d20:	46a2      	mov	sl, r4
 8007d22:	e7d2      	b.n	8007cca <_vfiprintf_r+0xe2>
 8007d24:	9b03      	ldr	r3, [sp, #12]
 8007d26:	1d19      	adds	r1, r3, #4
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	9103      	str	r1, [sp, #12]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	bfbb      	ittet	lt
 8007d30:	425b      	neglt	r3, r3
 8007d32:	f042 0202 	orrlt.w	r2, r2, #2
 8007d36:	9307      	strge	r3, [sp, #28]
 8007d38:	9307      	strlt	r3, [sp, #28]
 8007d3a:	bfb8      	it	lt
 8007d3c:	9204      	strlt	r2, [sp, #16]
 8007d3e:	7823      	ldrb	r3, [r4, #0]
 8007d40:	2b2e      	cmp	r3, #46	; 0x2e
 8007d42:	d10c      	bne.n	8007d5e <_vfiprintf_r+0x176>
 8007d44:	7863      	ldrb	r3, [r4, #1]
 8007d46:	2b2a      	cmp	r3, #42	; 0x2a
 8007d48:	d135      	bne.n	8007db6 <_vfiprintf_r+0x1ce>
 8007d4a:	9b03      	ldr	r3, [sp, #12]
 8007d4c:	1d1a      	adds	r2, r3, #4
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	9203      	str	r2, [sp, #12]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	bfb8      	it	lt
 8007d56:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d5a:	3402      	adds	r4, #2
 8007d5c:	9305      	str	r3, [sp, #20]
 8007d5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007e44 <_vfiprintf_r+0x25c>
 8007d62:	7821      	ldrb	r1, [r4, #0]
 8007d64:	2203      	movs	r2, #3
 8007d66:	4650      	mov	r0, sl
 8007d68:	f7f8 fa52 	bl	8000210 <memchr>
 8007d6c:	b140      	cbz	r0, 8007d80 <_vfiprintf_r+0x198>
 8007d6e:	2340      	movs	r3, #64	; 0x40
 8007d70:	eba0 000a 	sub.w	r0, r0, sl
 8007d74:	fa03 f000 	lsl.w	r0, r3, r0
 8007d78:	9b04      	ldr	r3, [sp, #16]
 8007d7a:	4303      	orrs	r3, r0
 8007d7c:	3401      	adds	r4, #1
 8007d7e:	9304      	str	r3, [sp, #16]
 8007d80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d84:	482c      	ldr	r0, [pc, #176]	; (8007e38 <_vfiprintf_r+0x250>)
 8007d86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d8a:	2206      	movs	r2, #6
 8007d8c:	f7f8 fa40 	bl	8000210 <memchr>
 8007d90:	2800      	cmp	r0, #0
 8007d92:	d03f      	beq.n	8007e14 <_vfiprintf_r+0x22c>
 8007d94:	4b29      	ldr	r3, [pc, #164]	; (8007e3c <_vfiprintf_r+0x254>)
 8007d96:	bb1b      	cbnz	r3, 8007de0 <_vfiprintf_r+0x1f8>
 8007d98:	9b03      	ldr	r3, [sp, #12]
 8007d9a:	3307      	adds	r3, #7
 8007d9c:	f023 0307 	bic.w	r3, r3, #7
 8007da0:	3308      	adds	r3, #8
 8007da2:	9303      	str	r3, [sp, #12]
 8007da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007da6:	443b      	add	r3, r7
 8007da8:	9309      	str	r3, [sp, #36]	; 0x24
 8007daa:	e767      	b.n	8007c7c <_vfiprintf_r+0x94>
 8007dac:	fb0c 3202 	mla	r2, ip, r2, r3
 8007db0:	460c      	mov	r4, r1
 8007db2:	2001      	movs	r0, #1
 8007db4:	e7a5      	b.n	8007d02 <_vfiprintf_r+0x11a>
 8007db6:	2300      	movs	r3, #0
 8007db8:	3401      	adds	r4, #1
 8007dba:	9305      	str	r3, [sp, #20]
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	f04f 0c0a 	mov.w	ip, #10
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dc8:	3a30      	subs	r2, #48	; 0x30
 8007dca:	2a09      	cmp	r2, #9
 8007dcc:	d903      	bls.n	8007dd6 <_vfiprintf_r+0x1ee>
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d0c5      	beq.n	8007d5e <_vfiprintf_r+0x176>
 8007dd2:	9105      	str	r1, [sp, #20]
 8007dd4:	e7c3      	b.n	8007d5e <_vfiprintf_r+0x176>
 8007dd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dda:	4604      	mov	r4, r0
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e7f0      	b.n	8007dc2 <_vfiprintf_r+0x1da>
 8007de0:	ab03      	add	r3, sp, #12
 8007de2:	9300      	str	r3, [sp, #0]
 8007de4:	462a      	mov	r2, r5
 8007de6:	4b16      	ldr	r3, [pc, #88]	; (8007e40 <_vfiprintf_r+0x258>)
 8007de8:	a904      	add	r1, sp, #16
 8007dea:	4630      	mov	r0, r6
 8007dec:	f3af 8000 	nop.w
 8007df0:	4607      	mov	r7, r0
 8007df2:	1c78      	adds	r0, r7, #1
 8007df4:	d1d6      	bne.n	8007da4 <_vfiprintf_r+0x1bc>
 8007df6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007df8:	07d9      	lsls	r1, r3, #31
 8007dfa:	d405      	bmi.n	8007e08 <_vfiprintf_r+0x220>
 8007dfc:	89ab      	ldrh	r3, [r5, #12]
 8007dfe:	059a      	lsls	r2, r3, #22
 8007e00:	d402      	bmi.n	8007e08 <_vfiprintf_r+0x220>
 8007e02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e04:	f7ff fd7f 	bl	8007906 <__retarget_lock_release_recursive>
 8007e08:	89ab      	ldrh	r3, [r5, #12]
 8007e0a:	065b      	lsls	r3, r3, #25
 8007e0c:	f53f af12 	bmi.w	8007c34 <_vfiprintf_r+0x4c>
 8007e10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e12:	e711      	b.n	8007c38 <_vfiprintf_r+0x50>
 8007e14:	ab03      	add	r3, sp, #12
 8007e16:	9300      	str	r3, [sp, #0]
 8007e18:	462a      	mov	r2, r5
 8007e1a:	4b09      	ldr	r3, [pc, #36]	; (8007e40 <_vfiprintf_r+0x258>)
 8007e1c:	a904      	add	r1, sp, #16
 8007e1e:	4630      	mov	r0, r6
 8007e20:	f000 f880 	bl	8007f24 <_printf_i>
 8007e24:	e7e4      	b.n	8007df0 <_vfiprintf_r+0x208>
 8007e26:	bf00      	nop
 8007e28:	0800850c 	.word	0x0800850c
 8007e2c:	0800852c 	.word	0x0800852c
 8007e30:	080084ec 	.word	0x080084ec
 8007e34:	0800854c 	.word	0x0800854c
 8007e38:	08008556 	.word	0x08008556
 8007e3c:	00000000 	.word	0x00000000
 8007e40:	08007bc3 	.word	0x08007bc3
 8007e44:	08008552 	.word	0x08008552

08007e48 <_printf_common>:
 8007e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e4c:	4616      	mov	r6, r2
 8007e4e:	4699      	mov	r9, r3
 8007e50:	688a      	ldr	r2, [r1, #8]
 8007e52:	690b      	ldr	r3, [r1, #16]
 8007e54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	bfb8      	it	lt
 8007e5c:	4613      	movlt	r3, r2
 8007e5e:	6033      	str	r3, [r6, #0]
 8007e60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e64:	4607      	mov	r7, r0
 8007e66:	460c      	mov	r4, r1
 8007e68:	b10a      	cbz	r2, 8007e6e <_printf_common+0x26>
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	6033      	str	r3, [r6, #0]
 8007e6e:	6823      	ldr	r3, [r4, #0]
 8007e70:	0699      	lsls	r1, r3, #26
 8007e72:	bf42      	ittt	mi
 8007e74:	6833      	ldrmi	r3, [r6, #0]
 8007e76:	3302      	addmi	r3, #2
 8007e78:	6033      	strmi	r3, [r6, #0]
 8007e7a:	6825      	ldr	r5, [r4, #0]
 8007e7c:	f015 0506 	ands.w	r5, r5, #6
 8007e80:	d106      	bne.n	8007e90 <_printf_common+0x48>
 8007e82:	f104 0a19 	add.w	sl, r4, #25
 8007e86:	68e3      	ldr	r3, [r4, #12]
 8007e88:	6832      	ldr	r2, [r6, #0]
 8007e8a:	1a9b      	subs	r3, r3, r2
 8007e8c:	42ab      	cmp	r3, r5
 8007e8e:	dc26      	bgt.n	8007ede <_printf_common+0x96>
 8007e90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e94:	1e13      	subs	r3, r2, #0
 8007e96:	6822      	ldr	r2, [r4, #0]
 8007e98:	bf18      	it	ne
 8007e9a:	2301      	movne	r3, #1
 8007e9c:	0692      	lsls	r2, r2, #26
 8007e9e:	d42b      	bmi.n	8007ef8 <_printf_common+0xb0>
 8007ea0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ea4:	4649      	mov	r1, r9
 8007ea6:	4638      	mov	r0, r7
 8007ea8:	47c0      	blx	r8
 8007eaa:	3001      	adds	r0, #1
 8007eac:	d01e      	beq.n	8007eec <_printf_common+0xa4>
 8007eae:	6823      	ldr	r3, [r4, #0]
 8007eb0:	68e5      	ldr	r5, [r4, #12]
 8007eb2:	6832      	ldr	r2, [r6, #0]
 8007eb4:	f003 0306 	and.w	r3, r3, #6
 8007eb8:	2b04      	cmp	r3, #4
 8007eba:	bf08      	it	eq
 8007ebc:	1aad      	subeq	r5, r5, r2
 8007ebe:	68a3      	ldr	r3, [r4, #8]
 8007ec0:	6922      	ldr	r2, [r4, #16]
 8007ec2:	bf0c      	ite	eq
 8007ec4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ec8:	2500      	movne	r5, #0
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	bfc4      	itt	gt
 8007ece:	1a9b      	subgt	r3, r3, r2
 8007ed0:	18ed      	addgt	r5, r5, r3
 8007ed2:	2600      	movs	r6, #0
 8007ed4:	341a      	adds	r4, #26
 8007ed6:	42b5      	cmp	r5, r6
 8007ed8:	d11a      	bne.n	8007f10 <_printf_common+0xc8>
 8007eda:	2000      	movs	r0, #0
 8007edc:	e008      	b.n	8007ef0 <_printf_common+0xa8>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	4652      	mov	r2, sl
 8007ee2:	4649      	mov	r1, r9
 8007ee4:	4638      	mov	r0, r7
 8007ee6:	47c0      	blx	r8
 8007ee8:	3001      	adds	r0, #1
 8007eea:	d103      	bne.n	8007ef4 <_printf_common+0xac>
 8007eec:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ef4:	3501      	adds	r5, #1
 8007ef6:	e7c6      	b.n	8007e86 <_printf_common+0x3e>
 8007ef8:	18e1      	adds	r1, r4, r3
 8007efa:	1c5a      	adds	r2, r3, #1
 8007efc:	2030      	movs	r0, #48	; 0x30
 8007efe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f02:	4422      	add	r2, r4
 8007f04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f0c:	3302      	adds	r3, #2
 8007f0e:	e7c7      	b.n	8007ea0 <_printf_common+0x58>
 8007f10:	2301      	movs	r3, #1
 8007f12:	4622      	mov	r2, r4
 8007f14:	4649      	mov	r1, r9
 8007f16:	4638      	mov	r0, r7
 8007f18:	47c0      	blx	r8
 8007f1a:	3001      	adds	r0, #1
 8007f1c:	d0e6      	beq.n	8007eec <_printf_common+0xa4>
 8007f1e:	3601      	adds	r6, #1
 8007f20:	e7d9      	b.n	8007ed6 <_printf_common+0x8e>
	...

08007f24 <_printf_i>:
 8007f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f28:	7e0f      	ldrb	r7, [r1, #24]
 8007f2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f2c:	2f78      	cmp	r7, #120	; 0x78
 8007f2e:	4691      	mov	r9, r2
 8007f30:	4680      	mov	r8, r0
 8007f32:	460c      	mov	r4, r1
 8007f34:	469a      	mov	sl, r3
 8007f36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f3a:	d807      	bhi.n	8007f4c <_printf_i+0x28>
 8007f3c:	2f62      	cmp	r7, #98	; 0x62
 8007f3e:	d80a      	bhi.n	8007f56 <_printf_i+0x32>
 8007f40:	2f00      	cmp	r7, #0
 8007f42:	f000 80d8 	beq.w	80080f6 <_printf_i+0x1d2>
 8007f46:	2f58      	cmp	r7, #88	; 0x58
 8007f48:	f000 80a3 	beq.w	8008092 <_printf_i+0x16e>
 8007f4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f54:	e03a      	b.n	8007fcc <_printf_i+0xa8>
 8007f56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f5a:	2b15      	cmp	r3, #21
 8007f5c:	d8f6      	bhi.n	8007f4c <_printf_i+0x28>
 8007f5e:	a101      	add	r1, pc, #4	; (adr r1, 8007f64 <_printf_i+0x40>)
 8007f60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f64:	08007fbd 	.word	0x08007fbd
 8007f68:	08007fd1 	.word	0x08007fd1
 8007f6c:	08007f4d 	.word	0x08007f4d
 8007f70:	08007f4d 	.word	0x08007f4d
 8007f74:	08007f4d 	.word	0x08007f4d
 8007f78:	08007f4d 	.word	0x08007f4d
 8007f7c:	08007fd1 	.word	0x08007fd1
 8007f80:	08007f4d 	.word	0x08007f4d
 8007f84:	08007f4d 	.word	0x08007f4d
 8007f88:	08007f4d 	.word	0x08007f4d
 8007f8c:	08007f4d 	.word	0x08007f4d
 8007f90:	080080dd 	.word	0x080080dd
 8007f94:	08008001 	.word	0x08008001
 8007f98:	080080bf 	.word	0x080080bf
 8007f9c:	08007f4d 	.word	0x08007f4d
 8007fa0:	08007f4d 	.word	0x08007f4d
 8007fa4:	080080ff 	.word	0x080080ff
 8007fa8:	08007f4d 	.word	0x08007f4d
 8007fac:	08008001 	.word	0x08008001
 8007fb0:	08007f4d 	.word	0x08007f4d
 8007fb4:	08007f4d 	.word	0x08007f4d
 8007fb8:	080080c7 	.word	0x080080c7
 8007fbc:	682b      	ldr	r3, [r5, #0]
 8007fbe:	1d1a      	adds	r2, r3, #4
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	602a      	str	r2, [r5, #0]
 8007fc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e0a3      	b.n	8008118 <_printf_i+0x1f4>
 8007fd0:	6820      	ldr	r0, [r4, #0]
 8007fd2:	6829      	ldr	r1, [r5, #0]
 8007fd4:	0606      	lsls	r6, r0, #24
 8007fd6:	f101 0304 	add.w	r3, r1, #4
 8007fda:	d50a      	bpl.n	8007ff2 <_printf_i+0xce>
 8007fdc:	680e      	ldr	r6, [r1, #0]
 8007fde:	602b      	str	r3, [r5, #0]
 8007fe0:	2e00      	cmp	r6, #0
 8007fe2:	da03      	bge.n	8007fec <_printf_i+0xc8>
 8007fe4:	232d      	movs	r3, #45	; 0x2d
 8007fe6:	4276      	negs	r6, r6
 8007fe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fec:	485e      	ldr	r0, [pc, #376]	; (8008168 <_printf_i+0x244>)
 8007fee:	230a      	movs	r3, #10
 8007ff0:	e019      	b.n	8008026 <_printf_i+0x102>
 8007ff2:	680e      	ldr	r6, [r1, #0]
 8007ff4:	602b      	str	r3, [r5, #0]
 8007ff6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ffa:	bf18      	it	ne
 8007ffc:	b236      	sxthne	r6, r6
 8007ffe:	e7ef      	b.n	8007fe0 <_printf_i+0xbc>
 8008000:	682b      	ldr	r3, [r5, #0]
 8008002:	6820      	ldr	r0, [r4, #0]
 8008004:	1d19      	adds	r1, r3, #4
 8008006:	6029      	str	r1, [r5, #0]
 8008008:	0601      	lsls	r1, r0, #24
 800800a:	d501      	bpl.n	8008010 <_printf_i+0xec>
 800800c:	681e      	ldr	r6, [r3, #0]
 800800e:	e002      	b.n	8008016 <_printf_i+0xf2>
 8008010:	0646      	lsls	r6, r0, #25
 8008012:	d5fb      	bpl.n	800800c <_printf_i+0xe8>
 8008014:	881e      	ldrh	r6, [r3, #0]
 8008016:	4854      	ldr	r0, [pc, #336]	; (8008168 <_printf_i+0x244>)
 8008018:	2f6f      	cmp	r7, #111	; 0x6f
 800801a:	bf0c      	ite	eq
 800801c:	2308      	moveq	r3, #8
 800801e:	230a      	movne	r3, #10
 8008020:	2100      	movs	r1, #0
 8008022:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008026:	6865      	ldr	r5, [r4, #4]
 8008028:	60a5      	str	r5, [r4, #8]
 800802a:	2d00      	cmp	r5, #0
 800802c:	bfa2      	ittt	ge
 800802e:	6821      	ldrge	r1, [r4, #0]
 8008030:	f021 0104 	bicge.w	r1, r1, #4
 8008034:	6021      	strge	r1, [r4, #0]
 8008036:	b90e      	cbnz	r6, 800803c <_printf_i+0x118>
 8008038:	2d00      	cmp	r5, #0
 800803a:	d04d      	beq.n	80080d8 <_printf_i+0x1b4>
 800803c:	4615      	mov	r5, r2
 800803e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008042:	fb03 6711 	mls	r7, r3, r1, r6
 8008046:	5dc7      	ldrb	r7, [r0, r7]
 8008048:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800804c:	4637      	mov	r7, r6
 800804e:	42bb      	cmp	r3, r7
 8008050:	460e      	mov	r6, r1
 8008052:	d9f4      	bls.n	800803e <_printf_i+0x11a>
 8008054:	2b08      	cmp	r3, #8
 8008056:	d10b      	bne.n	8008070 <_printf_i+0x14c>
 8008058:	6823      	ldr	r3, [r4, #0]
 800805a:	07de      	lsls	r6, r3, #31
 800805c:	d508      	bpl.n	8008070 <_printf_i+0x14c>
 800805e:	6923      	ldr	r3, [r4, #16]
 8008060:	6861      	ldr	r1, [r4, #4]
 8008062:	4299      	cmp	r1, r3
 8008064:	bfde      	ittt	le
 8008066:	2330      	movle	r3, #48	; 0x30
 8008068:	f805 3c01 	strble.w	r3, [r5, #-1]
 800806c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008070:	1b52      	subs	r2, r2, r5
 8008072:	6122      	str	r2, [r4, #16]
 8008074:	f8cd a000 	str.w	sl, [sp]
 8008078:	464b      	mov	r3, r9
 800807a:	aa03      	add	r2, sp, #12
 800807c:	4621      	mov	r1, r4
 800807e:	4640      	mov	r0, r8
 8008080:	f7ff fee2 	bl	8007e48 <_printf_common>
 8008084:	3001      	adds	r0, #1
 8008086:	d14c      	bne.n	8008122 <_printf_i+0x1fe>
 8008088:	f04f 30ff 	mov.w	r0, #4294967295
 800808c:	b004      	add	sp, #16
 800808e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008092:	4835      	ldr	r0, [pc, #212]	; (8008168 <_printf_i+0x244>)
 8008094:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008098:	6829      	ldr	r1, [r5, #0]
 800809a:	6823      	ldr	r3, [r4, #0]
 800809c:	f851 6b04 	ldr.w	r6, [r1], #4
 80080a0:	6029      	str	r1, [r5, #0]
 80080a2:	061d      	lsls	r5, r3, #24
 80080a4:	d514      	bpl.n	80080d0 <_printf_i+0x1ac>
 80080a6:	07df      	lsls	r7, r3, #31
 80080a8:	bf44      	itt	mi
 80080aa:	f043 0320 	orrmi.w	r3, r3, #32
 80080ae:	6023      	strmi	r3, [r4, #0]
 80080b0:	b91e      	cbnz	r6, 80080ba <_printf_i+0x196>
 80080b2:	6823      	ldr	r3, [r4, #0]
 80080b4:	f023 0320 	bic.w	r3, r3, #32
 80080b8:	6023      	str	r3, [r4, #0]
 80080ba:	2310      	movs	r3, #16
 80080bc:	e7b0      	b.n	8008020 <_printf_i+0xfc>
 80080be:	6823      	ldr	r3, [r4, #0]
 80080c0:	f043 0320 	orr.w	r3, r3, #32
 80080c4:	6023      	str	r3, [r4, #0]
 80080c6:	2378      	movs	r3, #120	; 0x78
 80080c8:	4828      	ldr	r0, [pc, #160]	; (800816c <_printf_i+0x248>)
 80080ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80080ce:	e7e3      	b.n	8008098 <_printf_i+0x174>
 80080d0:	0659      	lsls	r1, r3, #25
 80080d2:	bf48      	it	mi
 80080d4:	b2b6      	uxthmi	r6, r6
 80080d6:	e7e6      	b.n	80080a6 <_printf_i+0x182>
 80080d8:	4615      	mov	r5, r2
 80080da:	e7bb      	b.n	8008054 <_printf_i+0x130>
 80080dc:	682b      	ldr	r3, [r5, #0]
 80080de:	6826      	ldr	r6, [r4, #0]
 80080e0:	6961      	ldr	r1, [r4, #20]
 80080e2:	1d18      	adds	r0, r3, #4
 80080e4:	6028      	str	r0, [r5, #0]
 80080e6:	0635      	lsls	r5, r6, #24
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	d501      	bpl.n	80080f0 <_printf_i+0x1cc>
 80080ec:	6019      	str	r1, [r3, #0]
 80080ee:	e002      	b.n	80080f6 <_printf_i+0x1d2>
 80080f0:	0670      	lsls	r0, r6, #25
 80080f2:	d5fb      	bpl.n	80080ec <_printf_i+0x1c8>
 80080f4:	8019      	strh	r1, [r3, #0]
 80080f6:	2300      	movs	r3, #0
 80080f8:	6123      	str	r3, [r4, #16]
 80080fa:	4615      	mov	r5, r2
 80080fc:	e7ba      	b.n	8008074 <_printf_i+0x150>
 80080fe:	682b      	ldr	r3, [r5, #0]
 8008100:	1d1a      	adds	r2, r3, #4
 8008102:	602a      	str	r2, [r5, #0]
 8008104:	681d      	ldr	r5, [r3, #0]
 8008106:	6862      	ldr	r2, [r4, #4]
 8008108:	2100      	movs	r1, #0
 800810a:	4628      	mov	r0, r5
 800810c:	f7f8 f880 	bl	8000210 <memchr>
 8008110:	b108      	cbz	r0, 8008116 <_printf_i+0x1f2>
 8008112:	1b40      	subs	r0, r0, r5
 8008114:	6060      	str	r0, [r4, #4]
 8008116:	6863      	ldr	r3, [r4, #4]
 8008118:	6123      	str	r3, [r4, #16]
 800811a:	2300      	movs	r3, #0
 800811c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008120:	e7a8      	b.n	8008074 <_printf_i+0x150>
 8008122:	6923      	ldr	r3, [r4, #16]
 8008124:	462a      	mov	r2, r5
 8008126:	4649      	mov	r1, r9
 8008128:	4640      	mov	r0, r8
 800812a:	47d0      	blx	sl
 800812c:	3001      	adds	r0, #1
 800812e:	d0ab      	beq.n	8008088 <_printf_i+0x164>
 8008130:	6823      	ldr	r3, [r4, #0]
 8008132:	079b      	lsls	r3, r3, #30
 8008134:	d413      	bmi.n	800815e <_printf_i+0x23a>
 8008136:	68e0      	ldr	r0, [r4, #12]
 8008138:	9b03      	ldr	r3, [sp, #12]
 800813a:	4298      	cmp	r0, r3
 800813c:	bfb8      	it	lt
 800813e:	4618      	movlt	r0, r3
 8008140:	e7a4      	b.n	800808c <_printf_i+0x168>
 8008142:	2301      	movs	r3, #1
 8008144:	4632      	mov	r2, r6
 8008146:	4649      	mov	r1, r9
 8008148:	4640      	mov	r0, r8
 800814a:	47d0      	blx	sl
 800814c:	3001      	adds	r0, #1
 800814e:	d09b      	beq.n	8008088 <_printf_i+0x164>
 8008150:	3501      	adds	r5, #1
 8008152:	68e3      	ldr	r3, [r4, #12]
 8008154:	9903      	ldr	r1, [sp, #12]
 8008156:	1a5b      	subs	r3, r3, r1
 8008158:	42ab      	cmp	r3, r5
 800815a:	dcf2      	bgt.n	8008142 <_printf_i+0x21e>
 800815c:	e7eb      	b.n	8008136 <_printf_i+0x212>
 800815e:	2500      	movs	r5, #0
 8008160:	f104 0619 	add.w	r6, r4, #25
 8008164:	e7f5      	b.n	8008152 <_printf_i+0x22e>
 8008166:	bf00      	nop
 8008168:	0800855d 	.word	0x0800855d
 800816c:	0800856e 	.word	0x0800856e

08008170 <_sbrk_r>:
 8008170:	b538      	push	{r3, r4, r5, lr}
 8008172:	4d06      	ldr	r5, [pc, #24]	; (800818c <_sbrk_r+0x1c>)
 8008174:	2300      	movs	r3, #0
 8008176:	4604      	mov	r4, r0
 8008178:	4608      	mov	r0, r1
 800817a:	602b      	str	r3, [r5, #0]
 800817c:	f7fa fdb2 	bl	8002ce4 <_sbrk>
 8008180:	1c43      	adds	r3, r0, #1
 8008182:	d102      	bne.n	800818a <_sbrk_r+0x1a>
 8008184:	682b      	ldr	r3, [r5, #0]
 8008186:	b103      	cbz	r3, 800818a <_sbrk_r+0x1a>
 8008188:	6023      	str	r3, [r4, #0]
 800818a:	bd38      	pop	{r3, r4, r5, pc}
 800818c:	20000634 	.word	0x20000634

08008190 <__sread>:
 8008190:	b510      	push	{r4, lr}
 8008192:	460c      	mov	r4, r1
 8008194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008198:	f000 f8a0 	bl	80082dc <_read_r>
 800819c:	2800      	cmp	r0, #0
 800819e:	bfab      	itete	ge
 80081a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80081a2:	89a3      	ldrhlt	r3, [r4, #12]
 80081a4:	181b      	addge	r3, r3, r0
 80081a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80081aa:	bfac      	ite	ge
 80081ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80081ae:	81a3      	strhlt	r3, [r4, #12]
 80081b0:	bd10      	pop	{r4, pc}

080081b2 <__swrite>:
 80081b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081b6:	461f      	mov	r7, r3
 80081b8:	898b      	ldrh	r3, [r1, #12]
 80081ba:	05db      	lsls	r3, r3, #23
 80081bc:	4605      	mov	r5, r0
 80081be:	460c      	mov	r4, r1
 80081c0:	4616      	mov	r6, r2
 80081c2:	d505      	bpl.n	80081d0 <__swrite+0x1e>
 80081c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081c8:	2302      	movs	r3, #2
 80081ca:	2200      	movs	r2, #0
 80081cc:	f000 f868 	bl	80082a0 <_lseek_r>
 80081d0:	89a3      	ldrh	r3, [r4, #12]
 80081d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081da:	81a3      	strh	r3, [r4, #12]
 80081dc:	4632      	mov	r2, r6
 80081de:	463b      	mov	r3, r7
 80081e0:	4628      	mov	r0, r5
 80081e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081e6:	f000 b817 	b.w	8008218 <_write_r>

080081ea <__sseek>:
 80081ea:	b510      	push	{r4, lr}
 80081ec:	460c      	mov	r4, r1
 80081ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081f2:	f000 f855 	bl	80082a0 <_lseek_r>
 80081f6:	1c43      	adds	r3, r0, #1
 80081f8:	89a3      	ldrh	r3, [r4, #12]
 80081fa:	bf15      	itete	ne
 80081fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80081fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008202:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008206:	81a3      	strheq	r3, [r4, #12]
 8008208:	bf18      	it	ne
 800820a:	81a3      	strhne	r3, [r4, #12]
 800820c:	bd10      	pop	{r4, pc}

0800820e <__sclose>:
 800820e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008212:	f000 b813 	b.w	800823c <_close_r>
	...

08008218 <_write_r>:
 8008218:	b538      	push	{r3, r4, r5, lr}
 800821a:	4d07      	ldr	r5, [pc, #28]	; (8008238 <_write_r+0x20>)
 800821c:	4604      	mov	r4, r0
 800821e:	4608      	mov	r0, r1
 8008220:	4611      	mov	r1, r2
 8008222:	2200      	movs	r2, #0
 8008224:	602a      	str	r2, [r5, #0]
 8008226:	461a      	mov	r2, r3
 8008228:	f7fa fd0b 	bl	8002c42 <_write>
 800822c:	1c43      	adds	r3, r0, #1
 800822e:	d102      	bne.n	8008236 <_write_r+0x1e>
 8008230:	682b      	ldr	r3, [r5, #0]
 8008232:	b103      	cbz	r3, 8008236 <_write_r+0x1e>
 8008234:	6023      	str	r3, [r4, #0]
 8008236:	bd38      	pop	{r3, r4, r5, pc}
 8008238:	20000634 	.word	0x20000634

0800823c <_close_r>:
 800823c:	b538      	push	{r3, r4, r5, lr}
 800823e:	4d06      	ldr	r5, [pc, #24]	; (8008258 <_close_r+0x1c>)
 8008240:	2300      	movs	r3, #0
 8008242:	4604      	mov	r4, r0
 8008244:	4608      	mov	r0, r1
 8008246:	602b      	str	r3, [r5, #0]
 8008248:	f7fa fd17 	bl	8002c7a <_close>
 800824c:	1c43      	adds	r3, r0, #1
 800824e:	d102      	bne.n	8008256 <_close_r+0x1a>
 8008250:	682b      	ldr	r3, [r5, #0]
 8008252:	b103      	cbz	r3, 8008256 <_close_r+0x1a>
 8008254:	6023      	str	r3, [r4, #0]
 8008256:	bd38      	pop	{r3, r4, r5, pc}
 8008258:	20000634 	.word	0x20000634

0800825c <_fstat_r>:
 800825c:	b538      	push	{r3, r4, r5, lr}
 800825e:	4d07      	ldr	r5, [pc, #28]	; (800827c <_fstat_r+0x20>)
 8008260:	2300      	movs	r3, #0
 8008262:	4604      	mov	r4, r0
 8008264:	4608      	mov	r0, r1
 8008266:	4611      	mov	r1, r2
 8008268:	602b      	str	r3, [r5, #0]
 800826a:	f7fa fd12 	bl	8002c92 <_fstat>
 800826e:	1c43      	adds	r3, r0, #1
 8008270:	d102      	bne.n	8008278 <_fstat_r+0x1c>
 8008272:	682b      	ldr	r3, [r5, #0]
 8008274:	b103      	cbz	r3, 8008278 <_fstat_r+0x1c>
 8008276:	6023      	str	r3, [r4, #0]
 8008278:	bd38      	pop	{r3, r4, r5, pc}
 800827a:	bf00      	nop
 800827c:	20000634 	.word	0x20000634

08008280 <_isatty_r>:
 8008280:	b538      	push	{r3, r4, r5, lr}
 8008282:	4d06      	ldr	r5, [pc, #24]	; (800829c <_isatty_r+0x1c>)
 8008284:	2300      	movs	r3, #0
 8008286:	4604      	mov	r4, r0
 8008288:	4608      	mov	r0, r1
 800828a:	602b      	str	r3, [r5, #0]
 800828c:	f7fa fd11 	bl	8002cb2 <_isatty>
 8008290:	1c43      	adds	r3, r0, #1
 8008292:	d102      	bne.n	800829a <_isatty_r+0x1a>
 8008294:	682b      	ldr	r3, [r5, #0]
 8008296:	b103      	cbz	r3, 800829a <_isatty_r+0x1a>
 8008298:	6023      	str	r3, [r4, #0]
 800829a:	bd38      	pop	{r3, r4, r5, pc}
 800829c:	20000634 	.word	0x20000634

080082a0 <_lseek_r>:
 80082a0:	b538      	push	{r3, r4, r5, lr}
 80082a2:	4d07      	ldr	r5, [pc, #28]	; (80082c0 <_lseek_r+0x20>)
 80082a4:	4604      	mov	r4, r0
 80082a6:	4608      	mov	r0, r1
 80082a8:	4611      	mov	r1, r2
 80082aa:	2200      	movs	r2, #0
 80082ac:	602a      	str	r2, [r5, #0]
 80082ae:	461a      	mov	r2, r3
 80082b0:	f7fa fd0a 	bl	8002cc8 <_lseek>
 80082b4:	1c43      	adds	r3, r0, #1
 80082b6:	d102      	bne.n	80082be <_lseek_r+0x1e>
 80082b8:	682b      	ldr	r3, [r5, #0]
 80082ba:	b103      	cbz	r3, 80082be <_lseek_r+0x1e>
 80082bc:	6023      	str	r3, [r4, #0]
 80082be:	bd38      	pop	{r3, r4, r5, pc}
 80082c0:	20000634 	.word	0x20000634

080082c4 <__malloc_lock>:
 80082c4:	4801      	ldr	r0, [pc, #4]	; (80082cc <__malloc_lock+0x8>)
 80082c6:	f7ff bb1d 	b.w	8007904 <__retarget_lock_acquire_recursive>
 80082ca:	bf00      	nop
 80082cc:	20000628 	.word	0x20000628

080082d0 <__malloc_unlock>:
 80082d0:	4801      	ldr	r0, [pc, #4]	; (80082d8 <__malloc_unlock+0x8>)
 80082d2:	f7ff bb18 	b.w	8007906 <__retarget_lock_release_recursive>
 80082d6:	bf00      	nop
 80082d8:	20000628 	.word	0x20000628

080082dc <_read_r>:
 80082dc:	b538      	push	{r3, r4, r5, lr}
 80082de:	4d07      	ldr	r5, [pc, #28]	; (80082fc <_read_r+0x20>)
 80082e0:	4604      	mov	r4, r0
 80082e2:	4608      	mov	r0, r1
 80082e4:	4611      	mov	r1, r2
 80082e6:	2200      	movs	r2, #0
 80082e8:	602a      	str	r2, [r5, #0]
 80082ea:	461a      	mov	r2, r3
 80082ec:	f7fa fc8c 	bl	8002c08 <_read>
 80082f0:	1c43      	adds	r3, r0, #1
 80082f2:	d102      	bne.n	80082fa <_read_r+0x1e>
 80082f4:	682b      	ldr	r3, [r5, #0]
 80082f6:	b103      	cbz	r3, 80082fa <_read_r+0x1e>
 80082f8:	6023      	str	r3, [r4, #0]
 80082fa:	bd38      	pop	{r3, r4, r5, pc}
 80082fc:	20000634 	.word	0x20000634

08008300 <_init>:
 8008300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008302:	bf00      	nop
 8008304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008306:	bc08      	pop	{r3}
 8008308:	469e      	mov	lr, r3
 800830a:	4770      	bx	lr

0800830c <_fini>:
 800830c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800830e:	bf00      	nop
 8008310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008312:	bc08      	pop	{r3}
 8008314:	469e      	mov	lr, r3
 8008316:	4770      	bx	lr
