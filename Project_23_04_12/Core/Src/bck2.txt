/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "serial.h"

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi2;
UART_HandleTypeDef huart2;

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI2_Init(void);
static void MX_USART2_UART_Init(void);

#ifdef __GNUC__
  #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

#ifdef RX_EVENT_CB
static uint8_t u8arr_eventBuff[UART_BUF_SZ];
static uint8_t u8arr_uartEvent[UART_BUF_SZ];
#endif

static uint16_t u16_oldPos = 0;
static uint16_t u16_lenCnt = 0;

/* @brief  Retargets the C library printf function to the USART. */
PUTCHAR_PROTOTYPE {
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
  return ch;
}

/* Buffer used for transmission */
uint8_t aTxBuffer[] = {1, 1, 2, 3};
/* Buffer used for reception */
uint8_t aRxBuffer[BUFFERSIZE];

uint16_t bitFlag;
volatile uint8_t spi2F;

/* @brief  Main program */
int main(void)
{
  HAL_Init();

  SystemClock_Config();

  MX_GPIO_Init();
  MX_SPI2_Init();
  MX_USART2_UART_Init();

  serial_init();
  printf("Init OKE\r\n");

  while (1)
  {
	  #ifndef MASTER_BOARD
	  printf("Salve Receive\r\n");
	  if(HAL_SPI_Receive_IT(&hspi2, (uint8_t *)aRxBuffer, 10) != HAL_OK)
	  {
		  Error_Handler();
	  }

	  while (spi2F == 0){}
	  while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY){}
	  printf("Slave RX: %d %d %d %d\r\n\n", aRxBuffer[0], aRxBuffer[1], aRxBuffer[2], aRxBuffer[3]);
	  spi2F = 0;

	  if(HAL_SPI_Transmit_IT(&hspi2, (uint8_t *)aRxBuffer, 10) != HAL_OK)
	  {
		  Error_Handler();
	  }

	  while (spi2F == 0){}
	  while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY){}
	  printf("Send Success\r\n");

	  memset(aRxBuffer, 0, sizeof(aRxBuffer));
	  #endif

	  /*if (bitFlag & BFLAG_BTN)
	  {
		  while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY){}

		  spi2F = 0;

		  #ifdef MASTER_BOARD
		  printf("MASTER TX: %d %d %d %d\r\n\n", aTxBuffer[0], aTxBuffer[1], aTxBuffer[2], aTxBuffer[3]);
		  if(HAL_SPI_Transmit_IT(&hspi2, (uint8_t*)aTxBuffer, 10) != HAL_OK)
		  {
			  Error_Handler();
		  }

		  while (spi2F == 0){}
		  while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY){}
		  printf("Send Success\r\n");
		  spi2F = 0;

		  if(HAL_SPI_Receive_IT(&hspi2, (uint8_t*)aRxBuffer, 10) != HAL_OK)
		  {
			  Error_Handler();
		  }

		  while (spi2F == 0){}
		  while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY){}

		  printf("MASTER RX: %d %d %d %d\r\n\n", aRxBuffer[0], aRxBuffer[1], aRxBuffer[2], aRxBuffer[3]);

		  memset(aRxBuffer, 0, sizeof(aRxBuffer));

		  bitFlag &= ~BFLAG_BTN;
		  #endif
	 }*/
	 #ifdef MASTER_BOARD
	 if (bitFlag & BFLAG_UART_RCV) {
		 printf("Tes\r\n");
		 uartProcessing (u8arr_uartEvent, u16_lenCnt - 2); // remove \r & \n
		  memset(u8arr_uartEvent, 0, UART_BUF_SZ);
		  u16_lenCnt = 0;

		  bitFlag 	&= ~BFLAG_UART_RCV;
	 }

	 if (bitFlag & BFLAG_SPIM_WR)
	 {
		 while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY){}

		 spi2F = 0;

		 printf("MASTER TX: %d %d %d %d\r\n\n", aTxBuffer[0], aTxBuffer[1], aTxBuffer[2], aTxBuffer[3]);
		 if(HAL_SPI_Transmit_IT(&hspi2, (uint8_t*)aTxBuffer, 10) != HAL_OK)
		  {
			  Error_Handler();
		  }

		  while (spi2F == 0){}
		  while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY){}
		  printf("Send Success\r\n");
		  spi2F = 0;
		 bitFlag &= ~BFLAG_SPIM_WR;
	 }
	 else if (bitFlag & BFLAG_SPIS_WR)
	 {
		 if(HAL_SPI_Receive_IT(&hspi2, (uint8_t*)aRxBuffer, 10) != HAL_OK)
		  {
			  Error_Handler();
		  }

		  while (spi2F == 0){}
		  while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY){}

		  printf("MASTER RX: %d %d %d %d\r\n\n", aRxBuffer[0], aRxBuffer[1], aRxBuffer[2], aRxBuffer[3]);

		  memset(aRxBuffer, 0, sizeof(aRxBuffer));

		 printf("\r\n\n");
		 bitFlag &= ~BFLAG_SPIS_WR;
	 }
	 else
	 {
		 HAL_Delay(100);
		 HAL_GPIO_TogglePin(GPIOB, LED2);
	 }
	 #endif
  }
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
  hspi2.Instance 				= SPI2;
  hspi2.Init.BaudRatePrescaler 	= SPI_BAUDRATEPRESCALER_128;
  hspi2.Init.Direction 			= SPI_DIRECTION_2LINES;
  hspi2.Init.CLKPhase 			= SPI_PHASE_1EDGE;
  hspi2.Init.CLKPolarity 		= SPI_POLARITY_LOW;
  hspi2.Init.DataSize 			= SPI_DATASIZE_16BIT;
  hspi2.Init.FirstBit 			= SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode 			= SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation 	= SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial 		= 10;
  hspi2.Init.NSS 				= SPI_NSS_SOFT;
  #ifdef MASTER_BOARD
  hspi2.Init.Mode 				= SPI_MODE_MASTER;
  #else
  hspi2.Init.Mode 				= SPI_MODE_SLAVE;
  #endif

  if (HAL_SPI_Init(&hspi2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin 	= B1_Pin;
  GPIO_InitStruct.Mode 	= GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /* Enable and set EXTI lines 15 to 10 Interrupt */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin 	= LD2_Pin;
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
  GPIO_InitStruct.Speed	= GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
	if (hspi->Instance==SPI1)
	{
		//bitFlag |= BFLAG_SPIM_WR;
		//printf("SPIM CB\r\n");
	}
	else if (hspi->Instance==SPI3)
	{
		//bitFlag |= BFLAG_SPIS_WR;
		//printf("SPIS CB\r\n");
	}
}


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
	spi2F = 1;
	/*
	if (hspi->Instance==SPI1)
	{
		//bitFlag |= BFLAG_SPIM_WR;
		spi1F = 1;
	}
	else if (hspi->Instance==SPI3)
	{
		spi1F = 1;
		//printf("SPIS TX CB\r\n");
	}*/
}


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
	spi2F = 1;
	/*
	if (hspi->Instance==SPI3)
	{
		//bitFlag |= BFLAG_SPIS_WR;
		spi3F = 1;
		//printf("SPIS RX CB\r\n");
	}
	else if (hspi->Instance==SPI1)
	{
		spi3F = 1;
		//printf("SPIM RX CB\r\n");
	}*/
}


/* @brief  I2C error callbacks
   @param  I2cHandle: I2C handle */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi2){
  printf("\r\nSPI ERROR \r\n\n");
  while(1) {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	  HAL_Delay(20);
  }
}
/* USER CODE END 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (((GPIO_Pin == USER_BUTTON_PIN) && ((bitFlag & BFLAG_BTN) == 0)))
  {
	  //printf("Tekan\r\n");
	  //bitFlag |= BFLAG_BTN;
  }
}

#define CFG_LENGTH 				10
#define CFG_HEADER_NUM 			20
#define CFG_HEADER_LEN 			5
#define STRLENMAX				256

static char str_cfg_header[CFG_HEADER_NUM][CFG_HEADER_LEN] =
{
	"{Tes}",
	"{RBA}",
	"{WB1:",	"{WB2:",	"{WB3:",
	"{RB1}",	"{RB2}",	"{RB3}",
	"{WBA:",
};

static void vShell_cmdParse(char *input) {
	printf("%s\r\n", input);
	for(uint8_t u8_idx = 0; u8_idx < CFG_HEADER_NUM; u8_idx++) {
		if(!memcmp(input,(char*)&str_cfg_header[u8_idx][0], CFG_HEADER_LEN)) {
			char *pChar 		= &input[CFG_HEADER_LEN];		//pointer untuk menyimpan header (5 char)
			char *pChar2 		= &input[CFG_HEADER_LEN];		//pointer untuk menyimpan header (5 char)
			uint8_t u8_start 	= 0;			// ini penanda yang akan bergeser tiap indeks (menandai lokasi dari sparating symboll)
			uint8_t u8_stop 	= 0;			// ini penenda start pointer paling awal atau awal baru setelah sparating symboll
			uint8_t u8_cnt 		= 0;			// menampung ada berapa sih inputan nya

			char str_res[20];

			if (u8_idx==2) {
				bitFlag |= BFLAG_SPIM_WR;
			}

			else if (u8_idx == 5){		//{RD0} Read Buffer TX and RX from Master
				bitFlag |= BFLAG_SPIM_RD;
			}
		}
	}
}

void uartProcessing (uint8_t *u8p_buffer, uint16_t u16_size){
	vShell_cmdParse((char*)u8p_buffer);
}

/*****************************************************************
 * @name 	vUAFE_uart_handle
 * @brief	handle afe uart data copy
 ****************************************************************/
static void vUAFE_uart_handle(uint16_t Size)
{
	uint16_t u16_numData;

	/* Check if number of received data in reception buffer has changed */
	if (Size != u16_oldPos)
	{
		if (Size > u16_oldPos)
		{
			/* Current position is higher than previous one */
			u16_numData = Size - u16_oldPos;
			memcpy(&u8arr_uartEvent[u16_lenCnt],&u8arr_eventBuff[u16_oldPos],u16_numData);
			u16_lenCnt += u16_numData;
		}
		else
		{
			/* End of buffer has been reached */
			u16_numData = UART_BUF_SZ - u16_oldPos;

			memcpy (&u8arr_uartEvent[u16_lenCnt], 			// copy data in that remaining space
					&u8arr_eventBuff[u16_oldPos],
					u16_numData);

			u16_lenCnt += u16_numData;

			memcpy (&u8arr_uartEvent[u16_lenCnt], 			// copy the remaining data
					&u8arr_eventBuff[0],
					Size);

			u16_lenCnt += Size;
		}

		/* Check for ready to process */
		if((u8arr_uartEvent[u16_lenCnt - 1] == '\n')&&(u8arr_uartEvent[u16_lenCnt - 2]== '\r'))
		{
			bitFlag |= BFLAG_UART_RCV;
		}

	}

	u16_oldPos = Size;
}



/*****************************************************************
 * @name HAL_UARTEx_RxEventCallback
 * @brief
 ****************************************************************/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
	#ifdef RX_EVENT_CB
		if (huart->Instance == USART2)
		{
			vUAFE_uart_handle(Size);
			HAL_UARTEx_ReceiveToIdle_DMA(&huart2, u8arr_eventBuff, UART_BUF_SZ);
		}
	#endif
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
