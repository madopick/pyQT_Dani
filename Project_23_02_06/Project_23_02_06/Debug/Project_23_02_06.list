
Project_23_02_06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c30  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  08004e00  08004e00  00014e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800506c  0800506c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800506c  0800506c  0001506c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005074  08005074  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005074  08005074  00015074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005078  08005078  00015078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800507c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c0  20000070  080050ec  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000930  080050ec  00020930  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a69b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ced  00000000  00000000  0002a73b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000870  00000000  00000000  0002c428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b8  00000000  00000000  0002cc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021ecb  00000000  00000000  0002d450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b3db  00000000  00000000  0004f31b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9d24  00000000  00000000  0005a6f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012441a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b70  00000000  00000000  0012446c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004de8 	.word	0x08004de8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004de8 	.word	0x08004de8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init(); //
 80005b8:	f000 fc78 	bl	8000eac <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f808 	bl	80005d0 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 80005c0:	f000 f8a2 	bl	8000708 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005c4:	f000 f876 	bl	80006b4 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  /* Initiate Continuous reception */
  StartReception();
 80005c8:	f000 f8be 	bl	8000748 <StartReception>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80005cc:	e7fe      	b.n	80005cc <main+0x18>
	...

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	; 0x50
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	2234      	movs	r2, #52	; 0x34
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 fb18 	bl	8003c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 0308 	add.w	r3, r7, #8
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage*/
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	4b2c      	ldr	r3, [pc, #176]	; (80006ac <SystemClock_Config+0xdc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	4a2b      	ldr	r2, [pc, #172]	; (80006ac <SystemClock_Config+0xdc>)
 80005fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000602:	6413      	str	r3, [r2, #64]	; 0x40
 8000604:	4b29      	ldr	r3, [pc, #164]	; (80006ac <SystemClock_Config+0xdc>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000610:	2300      	movs	r3, #0
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	4b26      	ldr	r3, [pc, #152]	; (80006b0 <SystemClock_Config+0xe0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a25      	ldr	r2, [pc, #148]	; (80006b0 <SystemClock_Config+0xe0>)
 800061a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <SystemClock_Config+0xe0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000628:	603b      	str	r3, [r7, #0]
 800062a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.*/
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800062c:	2302      	movs	r3, #2
 800062e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000630:	2301      	movs	r3, #1
 8000632:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000634:	2310      	movs	r3, #16
 8000636:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000638:	2302      	movs	r3, #2
 800063a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800063c:	2300      	movs	r3, #0
 800063e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000640:	2310      	movs	r3, #16
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8000644:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000648:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064a:	2302      	movs	r3, #2
 800064c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800064e:	2307      	movs	r3, #7
 8000650:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 8000652:	2306      	movs	r3, #6
 8000654:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	4618      	mov	r0, r3
 800065c:	f001 feda 	bl	8002414 <HAL_RCC_OscConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000666:	f000 fa33 	bl	8000ad0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800066a:	f001 fb39 	bl	8001ce0 <HAL_PWREx_EnableOverDrive>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000674:	f000 fa2c 	bl	8000ad0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	230f      	movs	r3, #15
 800067a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067c:	2302      	movs	r3, #2
 800067e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000684:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000688:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800068e:	f107 0308 	add.w	r3, r7, #8
 8000692:	2105      	movs	r1, #5
 8000694:	4618      	mov	r0, r3
 8000696:	f001 fb73 	bl	8001d80 <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006a0:	f000 fa16 	bl	8000ad0 <Error_Handler>
  }
}
 80006a4:	bf00      	nop
 80006a6:	3750      	adds	r7, #80	; 0x50
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000

080006b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006ba:	4a12      	ldr	r2, [pc, #72]	; (8000704 <MX_USART2_UART_Init+0x50>)
 80006bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006da:	220c      	movs	r2, #12
 80006dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006ec:	f002 f930 	bl	8002950 <HAL_UART_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006f6:	f000 f9eb 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	2000008c 	.word	0x2000008c
 8000704:	40004400 	.word	0x40004400

08000708 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_DMA_Init+0x3c>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <MX_DMA_Init+0x3c>)
 8000718:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_DMA_Init+0x3c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	2100      	movs	r1, #0
 800072e:	2010      	movs	r0, #16
 8000730:	f000 fd09 	bl	8001146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000734:	2010      	movs	r0, #16
 8000736:	f000 fd22 	bl	800117e <HAL_NVIC_EnableIRQ>

}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800

08000748 <StartReception>:
/**
  * @brief  This function prints user info on PC com port and initiates RX transfer
  * @retval None
  */
void StartReception(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* Initializes Buffer swap mechanism (used in User callback) :
     - 2 physical buffers aRXBufferA and aRXBufferB (RX_BUFFER_SIZE length)
  */
  //pBufferReadyForReception = aRXBufferA;
  pBufferReadyForUser      = aRXBufferA;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <StartReception+0x2c>)
 800074e:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <StartReception+0x30>)
 8000750:	601a      	str	r2, [r3, #0]
  uwNbReceivedChars        = 0;
 8000752:	4b0a      	ldr	r3, [pc, #40]	; (800077c <StartReception+0x34>)
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]

  if (HAL_OK != HAL_UARTEx_ReceiveToIdle_DMA(&huart2, aRXBufferUser, RX_BUFFER_SIZE))
 8000758:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800075c:	4908      	ldr	r1, [pc, #32]	; (8000780 <StartReception+0x38>)
 800075e:	4809      	ldr	r0, [pc, #36]	; (8000784 <StartReception+0x3c>)
 8000760:	f002 f943 	bl	80029ea <HAL_UARTEx_ReceiveToIdle_DMA>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <StartReception+0x26>
  {
    Error_Handler();
 800076a:	f000 f9b1 	bl	8000ad0 <Error_Handler>
  }
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000910 	.word	0x20000910
 8000778:	20000524 	.word	0x20000524
 800077c:	2000090c 	.word	0x2000090c
 8000780:	2000013c 	.word	0x2000013c
 8000784:	2000008c 	.word	0x2000008c

08000788 <UserDataTreatment>:
  * @param  huart UART handle.
  * @param  pData Pointer on received data buffer to be processed
  * @retval Size  Nb of received characters available in buffer
  */
void UserDataTreatment(UART_HandleTypeDef *huart, uint8_t* pData, uint16_t Size)
{
 8000788:	b480      	push	{r7}
 800078a:	b087      	sub	sp, #28
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	4613      	mov	r3, r2
 8000794:	80fb      	strh	r3, [r7, #6]
   *
   * pData and Size defines the buffer where received data have been copied, in order to be processed.
   * During this processing of already received data, reception is still ongoing.
   *
   */
  uint8_t* pBuff = pData;
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	617b      	str	r3, [r7, #20]
  uint8_t  i;

  /* Implementation of loopback is on purpose implemented in direct register access,
     in order to be able to echo received characters as fast as they are received.
     Wait for TC flag to be raised at end of transmit is then removed, only TXE is checked */
  for (i = 0; i < Size; i++)
 800079a:	2300      	movs	r3, #0
 800079c:	74fb      	strb	r3, [r7, #19]
 800079e:	e012      	b.n	80007c6 <UserDataTreatment+0x3e>
  {
    while (!(__HAL_UART_GET_FLAG(huart, UART_FLAG_TXE))) {}
 80007a0:	bf00      	nop
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ac:	2b80      	cmp	r3, #128	; 0x80
 80007ae:	d1f8      	bne.n	80007a2 <UserDataTreatment+0x1a>
    huart->Instance->DR = *pBuff;
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	781a      	ldrb	r2, [r3, #0]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
    pBuff++;
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	3301      	adds	r3, #1
 80007be:	617b      	str	r3, [r7, #20]
  for (i = 0; i < Size; i++)
 80007c0:	7cfb      	ldrb	r3, [r7, #19]
 80007c2:	3301      	adds	r3, #1
 80007c4:	74fb      	strb	r3, [r7, #19]
 80007c6:	7cfb      	ldrb	r3, [r7, #19]
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	88fa      	ldrh	r2, [r7, #6]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d8e7      	bhi.n	80007a0 <UserDataTreatment+0x18>
  }

}
 80007d0:	bf00      	nop
 80007d2:	bf00      	nop
 80007d4:	371c      	adds	r7, #28
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
	...

080007e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	460b      	mov	r3, r1
 80007ea:	807b      	strh	r3, [r7, #2]
  static uint8_t old_pos = 0;
  uint8_t *ptemp;
  uint8_t i;

  /* Check if number of received data in recpetion buffer has changed */
  if (Size != old_pos)
 80007ec:	4b76      	ldr	r3, [pc, #472]	; (80009c8 <HAL_UARTEx_RxEventCallback+0x1e8>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	887a      	ldrh	r2, [r7, #2]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	f000 80de 	beq.w	80009b6 <HAL_UARTEx_RxEventCallback+0x1d6>
  {
    /* Check if position of index in reception buffer has simply be increased
       of if end of buffer has been reached */
    if (Size > old_pos)
 80007fa:	4b73      	ldr	r3, [pc, #460]	; (80009c8 <HAL_UARTEx_RxEventCallback+0x1e8>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	b29b      	uxth	r3, r3
 8000800:	887a      	ldrh	r2, [r7, #2]
 8000802:	429a      	cmp	r2, r3
 8000804:	d91e      	bls.n	8000844 <HAL_UARTEx_RxEventCallback+0x64>
    {
      /* Current position is higher than previous one */
    //uwNbReceivedChars pertama 0 kemudian diubah di bawah ini
      uwNbReceivedChars = Size - old_pos;
 8000806:	887b      	ldrh	r3, [r7, #2]
 8000808:	4a6f      	ldr	r2, [pc, #444]	; (80009c8 <HAL_UARTEx_RxEventCallback+0x1e8>)
 800080a:	7812      	ldrb	r2, [r2, #0]
 800080c:	1a9b      	subs	r3, r3, r2
 800080e:	461a      	mov	r2, r3
 8000810:	4b6e      	ldr	r3, [pc, #440]	; (80009cc <HAL_UARTEx_RxEventCallback+0x1ec>)
 8000812:	601a      	str	r2, [r3, #0]
      /* Copy received data in "User" buffer for evacuation */
      for (i = 0; i < uwNbReceivedChars; i++)
 8000814:	2300      	movs	r3, #0
 8000816:	73fb      	strb	r3, [r7, #15]
 8000818:	e00e      	b.n	8000838 <HAL_UARTEx_RxEventCallback+0x58>
      {
        pBufferReadyForUser[i] = aRXBufferUser[old_pos + i];
 800081a:	4b6b      	ldr	r3, [pc, #428]	; (80009c8 <HAL_UARTEx_RxEventCallback+0x1e8>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	461a      	mov	r2, r3
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	441a      	add	r2, r3
 8000824:	4b6a      	ldr	r3, [pc, #424]	; (80009d0 <HAL_UARTEx_RxEventCallback+0x1f0>)
 8000826:	6819      	ldr	r1, [r3, #0]
 8000828:	7bfb      	ldrb	r3, [r7, #15]
 800082a:	440b      	add	r3, r1
 800082c:	4969      	ldr	r1, [pc, #420]	; (80009d4 <HAL_UARTEx_RxEventCallback+0x1f4>)
 800082e:	5c8a      	ldrb	r2, [r1, r2]
 8000830:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < uwNbReceivedChars; i++)
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	3301      	adds	r3, #1
 8000836:	73fb      	strb	r3, [r7, #15]
 8000838:	7bfa      	ldrb	r2, [r7, #15]
 800083a:	4b64      	ldr	r3, [pc, #400]	; (80009cc <HAL_UARTEx_RxEventCallback+0x1ec>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	429a      	cmp	r2, r3
 8000840:	d3eb      	bcc.n	800081a <HAL_UARTEx_RxEventCallback+0x3a>
 8000842:	e03c      	b.n	80008be <HAL_UARTEx_RxEventCallback+0xde>
    }
    else
    {
      /* Current position is lower than previous one : end of buffer has been reached */
      /* First copy data from current position till end of buffer */
      uwNbReceivedChars = RX_BUFFER_SIZE - old_pos;
 8000844:	4b60      	ldr	r3, [pc, #384]	; (80009c8 <HAL_UARTEx_RxEventCallback+0x1e8>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800084c:	461a      	mov	r2, r3
 800084e:	4b5f      	ldr	r3, [pc, #380]	; (80009cc <HAL_UARTEx_RxEventCallback+0x1ec>)
 8000850:	601a      	str	r2, [r3, #0]
      /* Copy received data in "User" buffer for evacuation */
      for (i = 0; i < uwNbReceivedChars; i++)
 8000852:	2300      	movs	r3, #0
 8000854:	73fb      	strb	r3, [r7, #15]
 8000856:	e00e      	b.n	8000876 <HAL_UARTEx_RxEventCallback+0x96>
      {
        pBufferReadyForUser[i] = aRXBufferUser[old_pos + i];
 8000858:	4b5b      	ldr	r3, [pc, #364]	; (80009c8 <HAL_UARTEx_RxEventCallback+0x1e8>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	461a      	mov	r2, r3
 800085e:	7bfb      	ldrb	r3, [r7, #15]
 8000860:	441a      	add	r2, r3
 8000862:	4b5b      	ldr	r3, [pc, #364]	; (80009d0 <HAL_UARTEx_RxEventCallback+0x1f0>)
 8000864:	6819      	ldr	r1, [r3, #0]
 8000866:	7bfb      	ldrb	r3, [r7, #15]
 8000868:	440b      	add	r3, r1
 800086a:	495a      	ldr	r1, [pc, #360]	; (80009d4 <HAL_UARTEx_RxEventCallback+0x1f4>)
 800086c:	5c8a      	ldrb	r2, [r1, r2]
 800086e:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < uwNbReceivedChars; i++)
 8000870:	7bfb      	ldrb	r3, [r7, #15]
 8000872:	3301      	adds	r3, #1
 8000874:	73fb      	strb	r3, [r7, #15]
 8000876:	7bfa      	ldrb	r2, [r7, #15]
 8000878:	4b54      	ldr	r3, [pc, #336]	; (80009cc <HAL_UARTEx_RxEventCallback+0x1ec>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	429a      	cmp	r2, r3
 800087e:	d3eb      	bcc.n	8000858 <HAL_UARTEx_RxEventCallback+0x78>
      }
      /* Check and continue with beginning of buffer */
      if (Size > 0)
 8000880:	887b      	ldrh	r3, [r7, #2]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d01b      	beq.n	80008be <HAL_UARTEx_RxEventCallback+0xde>
      {
        for (i = 0; i < Size; i++)
 8000886:	2300      	movs	r3, #0
 8000888:	73fb      	strb	r3, [r7, #15]
 800088a:	e00d      	b.n	80008a8 <HAL_UARTEx_RxEventCallback+0xc8>
        {
          pBufferReadyForUser[uwNbReceivedChars + i] = aRXBufferUser[i];
 800088c:	7bfa      	ldrb	r2, [r7, #15]
 800088e:	4b50      	ldr	r3, [pc, #320]	; (80009d0 <HAL_UARTEx_RxEventCallback+0x1f0>)
 8000890:	6819      	ldr	r1, [r3, #0]
 8000892:	7bf8      	ldrb	r0, [r7, #15]
 8000894:	4b4d      	ldr	r3, [pc, #308]	; (80009cc <HAL_UARTEx_RxEventCallback+0x1ec>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4403      	add	r3, r0
 800089a:	440b      	add	r3, r1
 800089c:	494d      	ldr	r1, [pc, #308]	; (80009d4 <HAL_UARTEx_RxEventCallback+0x1f4>)
 800089e:	5c8a      	ldrb	r2, [r1, r2]
 80008a0:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < Size; i++)
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
 80008a4:	3301      	adds	r3, #1
 80008a6:	73fb      	strb	r3, [r7, #15]
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	887a      	ldrh	r2, [r7, #2]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d8ec      	bhi.n	800088c <HAL_UARTEx_RxEventCallback+0xac>
        }
        uwNbReceivedChars += Size;
 80008b2:	887a      	ldrh	r2, [r7, #2]
 80008b4:	4b45      	ldr	r3, [pc, #276]	; (80009cc <HAL_UARTEx_RxEventCallback+0x1ec>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4413      	add	r3, r2
 80008ba:	4a44      	ldr	r2, [pc, #272]	; (80009cc <HAL_UARTEx_RxEventCallback+0x1ec>)
 80008bc:	6013      	str	r3, [r2, #0]
      }
    }
    /* Process received data that has been extracted from Rx User buffer */

    toInt(array, pBufferReadyForUser);
 80008be:	4b44      	ldr	r3, [pc, #272]	; (80009d0 <HAL_UARTEx_RxEventCallback+0x1f0>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4619      	mov	r1, r3
 80008c4:	4844      	ldr	r0, [pc, #272]	; (80009d8 <HAL_UARTEx_RxEventCallback+0x1f8>)
 80008c6:	f000 f889 	bl	80009dc <toInt>

    tostring(pBufferReadyForUser[0],array[0]);
 80008ca:	4b41      	ldr	r3, [pc, #260]	; (80009d0 <HAL_UARTEx_RxEventCallback+0x1f0>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	461a      	mov	r2, r3
 80008d2:	4b41      	ldr	r3, [pc, #260]	; (80009d8 <HAL_UARTEx_RxEventCallback+0x1f8>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	4619      	mov	r1, r3
 80008d8:	4610      	mov	r0, r2
 80008da:	f000 f8a9 	bl	8000a30 <tostring>
    tostring(pBufferReadyForUser[1],array[1]);
 80008de:	4b3c      	ldr	r3, [pc, #240]	; (80009d0 <HAL_UARTEx_RxEventCallback+0x1f0>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	3301      	adds	r3, #1
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	461a      	mov	r2, r3
 80008e8:	4b3b      	ldr	r3, [pc, #236]	; (80009d8 <HAL_UARTEx_RxEventCallback+0x1f8>)
 80008ea:	785b      	ldrb	r3, [r3, #1]
 80008ec:	4619      	mov	r1, r3
 80008ee:	4610      	mov	r0, r2
 80008f0:	f000 f89e 	bl	8000a30 <tostring>
    tostring(pBufferReadyForUser[2],array[2]);
 80008f4:	4b36      	ldr	r3, [pc, #216]	; (80009d0 <HAL_UARTEx_RxEventCallback+0x1f0>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	3302      	adds	r3, #2
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b36      	ldr	r3, [pc, #216]	; (80009d8 <HAL_UARTEx_RxEventCallback+0x1f8>)
 8000900:	789b      	ldrb	r3, [r3, #2]
 8000902:	4619      	mov	r1, r3
 8000904:	4610      	mov	r0, r2
 8000906:	f000 f893 	bl	8000a30 <tostring>
    tostring(pBufferReadyForUser[3],array[3]);
 800090a:	4b31      	ldr	r3, [pc, #196]	; (80009d0 <HAL_UARTEx_RxEventCallback+0x1f0>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	3303      	adds	r3, #3
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	461a      	mov	r2, r3
 8000914:	4b30      	ldr	r3, [pc, #192]	; (80009d8 <HAL_UARTEx_RxEventCallback+0x1f8>)
 8000916:	78db      	ldrb	r3, [r3, #3]
 8000918:	4619      	mov	r1, r3
 800091a:	4610      	mov	r0, r2
 800091c:	f000 f888 	bl	8000a30 <tostring>
    tostring(pBufferReadyForUser[4],array[4]);
 8000920:	4b2b      	ldr	r3, [pc, #172]	; (80009d0 <HAL_UARTEx_RxEventCallback+0x1f0>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	3304      	adds	r3, #4
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	461a      	mov	r2, r3
 800092a:	4b2b      	ldr	r3, [pc, #172]	; (80009d8 <HAL_UARTEx_RxEventCallback+0x1f8>)
 800092c:	791b      	ldrb	r3, [r3, #4]
 800092e:	4619      	mov	r1, r3
 8000930:	4610      	mov	r0, r2
 8000932:	f000 f87d 	bl	8000a30 <tostring>
    tostring(pBufferReadyForUser[5],array[5]);
 8000936:	4b26      	ldr	r3, [pc, #152]	; (80009d0 <HAL_UARTEx_RxEventCallback+0x1f0>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	3305      	adds	r3, #5
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	461a      	mov	r2, r3
 8000940:	4b25      	ldr	r3, [pc, #148]	; (80009d8 <HAL_UARTEx_RxEventCallback+0x1f8>)
 8000942:	795b      	ldrb	r3, [r3, #5]
 8000944:	4619      	mov	r1, r3
 8000946:	4610      	mov	r0, r2
 8000948:	f000 f872 	bl	8000a30 <tostring>
    tostring(pBufferReadyForUser[6],array[6]);
 800094c:	4b20      	ldr	r3, [pc, #128]	; (80009d0 <HAL_UARTEx_RxEventCallback+0x1f0>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	3306      	adds	r3, #6
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	461a      	mov	r2, r3
 8000956:	4b20      	ldr	r3, [pc, #128]	; (80009d8 <HAL_UARTEx_RxEventCallback+0x1f8>)
 8000958:	799b      	ldrb	r3, [r3, #6]
 800095a:	4619      	mov	r1, r3
 800095c:	4610      	mov	r0, r2
 800095e:	f000 f867 	bl	8000a30 <tostring>
    tostring(pBufferReadyForUser[7],array[7]);
 8000962:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <HAL_UARTEx_RxEventCallback+0x1f0>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	3307      	adds	r3, #7
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <HAL_UARTEx_RxEventCallback+0x1f8>)
 800096e:	79db      	ldrb	r3, [r3, #7]
 8000970:	4619      	mov	r1, r3
 8000972:	4610      	mov	r0, r2
 8000974:	f000 f85c 	bl	8000a30 <tostring>
    tostring(pBufferReadyForUser[8],array[8]);
 8000978:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <HAL_UARTEx_RxEventCallback+0x1f0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	3308      	adds	r3, #8
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <HAL_UARTEx_RxEventCallback+0x1f8>)
 8000984:	7a1b      	ldrb	r3, [r3, #8]
 8000986:	4619      	mov	r1, r3
 8000988:	4610      	mov	r0, r2
 800098a:	f000 f851 	bl	8000a30 <tostring>
    tostring(pBufferReadyForUser[9],array[9]);
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <HAL_UARTEx_RxEventCallback+0x1f0>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	3309      	adds	r3, #9
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	461a      	mov	r2, r3
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <HAL_UARTEx_RxEventCallback+0x1f8>)
 800099a:	7a5b      	ldrb	r3, [r3, #9]
 800099c:	4619      	mov	r1, r3
 800099e:	4610      	mov	r0, r2
 80009a0:	f000 f846 	bl	8000a30 <tostring>

    UserDataTreatment(huart, pBufferReadyForUser, uwNbReceivedChars);
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <HAL_UARTEx_RxEventCallback+0x1f0>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a08      	ldr	r2, [pc, #32]	; (80009cc <HAL_UARTEx_RxEventCallback+0x1ec>)
 80009aa:	6812      	ldr	r2, [r2, #0]
 80009ac:	b292      	uxth	r2, r2
 80009ae:	4619      	mov	r1, r3
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff fee9 	bl	8000788 <UserDataTreatment>


  }
  /* Update old_pos as new reference of position in User Rx buffer that
     indicates position to which data have been processed */
  old_pos = Size;
 80009b6:	887b      	ldrh	r3, [r7, #2]
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <HAL_UARTEx_RxEventCallback+0x1e8>)
 80009bc:	701a      	strb	r2, [r3, #0]
}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000914 	.word	0x20000914
 80009cc:	2000090c 	.word	0x2000090c
 80009d0:	20000910 	.word	0x20000910
 80009d4:	2000013c 	.word	0x2000013c
 80009d8:	20000130 	.word	0x20000130

080009dc <toInt>:

void toInt(int array[], char str[]){
 80009dc:	b590      	push	{r4, r7, lr}
 80009de:	b087      	sub	sp, #28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
    char *token;
    int jumlah=0, count=0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]

    token = strtok(str, ";");
 80009ee:	490f      	ldr	r1, [pc, #60]	; (8000a2c <toInt+0x50>)
 80009f0:	6838      	ldr	r0, [r7, #0]
 80009f2:	f003 f917 	bl	8003c24 <strtok>
 80009f6:	6178      	str	r0, [r7, #20]

    while( token != NULL ) {
 80009f8:	e010      	b.n	8000a1c <toInt+0x40>
        array[count]=atoi(token);
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	18d4      	adds	r4, r2, r3
 8000a02:	6978      	ldr	r0, [r7, #20]
 8000a04:	f003 f8d8 	bl	8003bb8 <atoi>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	6023      	str	r3, [r4, #0]
        token = strtok(NULL, ";");
 8000a0c:	4907      	ldr	r1, [pc, #28]	; (8000a2c <toInt+0x50>)
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f003 f908 	bl	8003c24 <strtok>
 8000a14:	6178      	str	r0, [r7, #20]
        count+=1;
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	613b      	str	r3, [r7, #16]
    while( token != NULL ) {
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d1eb      	bne.n	80009fa <toInt+0x1e>
    }
}
 8000a22:	bf00      	nop
 8000a24:	bf00      	nop
 8000a26:	371c      	adds	r7, #28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd90      	pop	{r4, r7, pc}
 8000a2c:	08004e00 	.word	0x08004e00

08000a30 <tostring>:

void tostring(char str[], int num) {
 8000a30:	b480      	push	{r7}
 8000a32:	b087      	sub	sp, #28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
    int i, rem, len = 0, n;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]

    n = num;
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	60fb      	str	r3, [r7, #12]
    while (n != 0)
 8000a42:	e00a      	b.n	8000a5a <tostring+0x2a>
    {
        len++;
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	3301      	adds	r3, #1
 8000a48:	613b      	str	r3, [r7, #16]
        n /= 10;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	4a1f      	ldr	r2, [pc, #124]	; (8000acc <tostring+0x9c>)
 8000a4e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a52:	1092      	asrs	r2, r2, #2
 8000a54:	17db      	asrs	r3, r3, #31
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	60fb      	str	r3, [r7, #12]
    while (n != 0)
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d1f1      	bne.n	8000a44 <tostring+0x14>
    }
    for (i = 0; i < len; i++)
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	e023      	b.n	8000aae <tostring+0x7e>
    {
        rem = num % 10;
 8000a66:	683a      	ldr	r2, [r7, #0]
 8000a68:	4b18      	ldr	r3, [pc, #96]	; (8000acc <tostring+0x9c>)
 8000a6a:	fb83 1302 	smull	r1, r3, r3, r2
 8000a6e:	1099      	asrs	r1, r3, #2
 8000a70:	17d3      	asrs	r3, r2, #31
 8000a72:	1ac9      	subs	r1, r1, r3
 8000a74:	460b      	mov	r3, r1
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	440b      	add	r3, r1
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	60bb      	str	r3, [r7, #8]
        num = num / 10;
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	4a12      	ldr	r2, [pc, #72]	; (8000acc <tostring+0x9c>)
 8000a84:	fb82 1203 	smull	r1, r2, r2, r3
 8000a88:	1092      	asrs	r2, r2, #2
 8000a8a:	17db      	asrs	r3, r3, #31
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	603b      	str	r3, [r7, #0]
        str[len - (i + 1)] = rem + '0';
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	3301      	adds	r3, #1
 8000a98:	6939      	ldr	r1, [r7, #16]
 8000a9a:	1acb      	subs	r3, r1, r3
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	440b      	add	r3, r1
 8000aa2:	3230      	adds	r2, #48	; 0x30
 8000aa4:	b2d2      	uxtb	r2, r2
 8000aa6:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < len; i++)
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	617b      	str	r3, [r7, #20]
 8000aae:	697a      	ldr	r2, [r7, #20]
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	dbd7      	blt.n	8000a66 <tostring+0x36>
    }
    str[len] = '\0';
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	4413      	add	r3, r2
 8000abc:	2200      	movs	r2, #0
 8000abe:	701a      	strb	r2, [r3, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	371c      	adds	r7, #28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	66666667 	.word	0x66666667

08000ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <Error_Handler+0x4>
	...

08000ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <HAL_MspInit+0x4c>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	4a0f      	ldr	r2, [pc, #60]	; (8000b24 <HAL_MspInit+0x4c>)
 8000ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aec:	6453      	str	r3, [r2, #68]	; 0x44
 8000aee:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <HAL_MspInit+0x4c>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	603b      	str	r3, [r7, #0]
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <HAL_MspInit+0x4c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <HAL_MspInit+0x4c>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b08:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_MspInit+0x4c>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b16:	2007      	movs	r0, #7
 8000b18:	f000 fb0a 	bl	8001130 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40023800 	.word	0x40023800

08000b28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a34      	ldr	r2, [pc, #208]	; (8000c18 <HAL_UART_MspInit+0xf0>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d162      	bne.n	8000c10 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	4b33      	ldr	r3, [pc, #204]	; (8000c1c <HAL_UART_MspInit+0xf4>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	4a32      	ldr	r2, [pc, #200]	; (8000c1c <HAL_UART_MspInit+0xf4>)
 8000b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b58:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5a:	4b30      	ldr	r3, [pc, #192]	; (8000c1c <HAL_UART_MspInit+0xf4>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	4b2c      	ldr	r3, [pc, #176]	; (8000c1c <HAL_UART_MspInit+0xf4>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a2b      	ldr	r2, [pc, #172]	; (8000c1c <HAL_UART_MspInit+0xf4>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b29      	ldr	r3, [pc, #164]	; (8000c1c <HAL_UART_MspInit+0xf4>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b82:	230c      	movs	r3, #12
 8000b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b92:	2307      	movs	r3, #7
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4820      	ldr	r0, [pc, #128]	; (8000c20 <HAL_UART_MspInit+0xf8>)
 8000b9e:	f000 ff0b 	bl	80019b8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
	/* USART2_RX Init */
	hdma_usart2_rx.Instance = DMA1_Stream5;
 8000ba2:	4b20      	ldr	r3, [pc, #128]	; (8000c24 <HAL_UART_MspInit+0xfc>)
 8000ba4:	4a20      	ldr	r2, [pc, #128]	; (8000c28 <HAL_UART_MspInit+0x100>)
 8000ba6:	601a      	str	r2, [r3, #0]
	hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000ba8:	4b1e      	ldr	r3, [pc, #120]	; (8000c24 <HAL_UART_MspInit+0xfc>)
 8000baa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bae:	605a      	str	r2, [r3, #4]
	hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bb0:	4b1c      	ldr	r3, [pc, #112]	; (8000c24 <HAL_UART_MspInit+0xfc>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
	hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bb6:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <HAL_UART_MspInit+0xfc>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	60da      	str	r2, [r3, #12]
	hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bbc:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <HAL_UART_MspInit+0xfc>)
 8000bbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bc2:	611a      	str	r2, [r3, #16]
	hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bc4:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <HAL_UART_MspInit+0xfc>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	615a      	str	r2, [r3, #20]
	hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bca:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <HAL_UART_MspInit+0xfc>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
	hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <HAL_UART_MspInit+0xfc>)
 8000bd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bd6:	61da      	str	r2, [r3, #28]
	hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <HAL_UART_MspInit+0xfc>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	621a      	str	r2, [r3, #32]
	hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <HAL_UART_MspInit+0xfc>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000be4:	480f      	ldr	r0, [pc, #60]	; (8000c24 <HAL_UART_MspInit+0xfc>)
 8000be6:	f000 fae5 	bl	80011b4 <HAL_DMA_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <HAL_UART_MspInit+0xcc>
	{
	  Error_Handler();
 8000bf0:	f7ff ff6e 	bl	8000ad0 <Error_Handler>
	}

	__HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a0b      	ldr	r2, [pc, #44]	; (8000c24 <HAL_UART_MspInit+0xfc>)
 8000bf8:	639a      	str	r2, [r3, #56]	; 0x38
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <HAL_UART_MspInit+0xfc>)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6393      	str	r3, [r2, #56]	; 0x38

	/* USART2 interrupt Init */
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2100      	movs	r1, #0
 8000c04:	2026      	movs	r0, #38	; 0x26
 8000c06:	f000 fa9e 	bl	8001146 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c0a:	2026      	movs	r0, #38	; 0x26
 8000c0c:	f000 fab7 	bl	800117e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c10:	bf00      	nop
 8000c12:	3728      	adds	r7, #40	; 0x28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40004400 	.word	0x40004400
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020000 	.word	0x40020000
 8000c24:	200000d0 	.word	0x200000d0
 8000c28:	40026088 	.word	0x40026088

08000c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <NMI_Handler+0x4>

08000c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <HardFault_Handler+0x4>

08000c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <MemManage_Handler+0x4>

08000c3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <BusFault_Handler+0x4>

08000c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <UsageFault_Handler+0x4>

08000c4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c78:	f000 f96a 	bl	8000f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000c84:	4802      	ldr	r0, [pc, #8]	; (8000c90 <DMA1_Stream5_IRQHandler+0x10>)
 8000c86:	f000 fc2d 	bl	80014e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	200000d0 	.word	0x200000d0

08000c94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c98:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <USART2_IRQHandler+0x10>)
 8000c9a:	f001 ff0b 	bl	8002ab4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	2000008c 	.word	0x2000008c

08000ca8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return 1;
 8000cac:	2301      	movs	r3, #1
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <_kill>:

int _kill(int pid, int sig)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000cc2:	f002 ff7d 	bl	8003bc0 <__errno>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2216      	movs	r2, #22
 8000cca:	601a      	str	r2, [r3, #0]
  return -1;
 8000ccc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <_exit>:

void _exit (int status)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff ffe7 	bl	8000cb8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000cea:	e7fe      	b.n	8000cea <_exit+0x12>

08000cec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	e00a      	b.n	8000d14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cfe:	f3af 8000 	nop.w
 8000d02:	4601      	mov	r1, r0
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	1c5a      	adds	r2, r3, #1
 8000d08:	60ba      	str	r2, [r7, #8]
 8000d0a:	b2ca      	uxtb	r2, r1
 8000d0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	3301      	adds	r3, #1
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	697a      	ldr	r2, [r7, #20]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	dbf0      	blt.n	8000cfe <_read+0x12>
  }

  return len;
 8000d1c:	687b      	ldr	r3, [r7, #4]
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b086      	sub	sp, #24
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	60f8      	str	r0, [r7, #12]
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
 8000d36:	e009      	b.n	8000d4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	1c5a      	adds	r2, r3, #1
 8000d3c:	60ba      	str	r2, [r7, #8]
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	697a      	ldr	r2, [r7, #20]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	dbf1      	blt.n	8000d38 <_write+0x12>
  }
  return len;
 8000d54:	687b      	ldr	r3, [r7, #4]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <_close>:

int _close(int file)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b083      	sub	sp, #12
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
 8000d7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d86:	605a      	str	r2, [r3, #4]
  return 0;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <_isatty>:

int _isatty(int file)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d9e:	2301      	movs	r3, #1
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
	...

08000dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd0:	4a14      	ldr	r2, [pc, #80]	; (8000e24 <_sbrk+0x5c>)
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <_sbrk+0x60>)
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ddc:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d102      	bne.n	8000dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <_sbrk+0x64>)
 8000de6:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <_sbrk+0x68>)
 8000de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dea:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <_sbrk+0x64>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d207      	bcs.n	8000e08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df8:	f002 fee2 	bl	8003bc0 <__errno>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	220c      	movs	r2, #12
 8000e00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
 8000e06:	e009      	b.n	8000e1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0e:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <_sbrk+0x64>)
 8000e18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3718      	adds	r7, #24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20020000 	.word	0x20020000
 8000e28:	00000400 	.word	0x00000400
 8000e2c:	20000918 	.word	0x20000918
 8000e30:	20000930 	.word	0x20000930

08000e34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <SystemInit+0x20>)
 8000e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e3e:	4a05      	ldr	r2, [pc, #20]	; (8000e54 <SystemInit+0x20>)
 8000e40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e5c:	480d      	ldr	r0, [pc, #52]	; (8000e94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e5e:	490e      	ldr	r1, [pc, #56]	; (8000e98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e60:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e74:	4c0b      	ldr	r4, [pc, #44]	; (8000ea4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e82:	f7ff ffd7 	bl	8000e34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e86:	f002 fea1 	bl	8003bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e8a:	f7ff fb93 	bl	80005b4 <main>
  bx  lr    
 8000e8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e98:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e9c:	0800507c 	.word	0x0800507c
  ldr r2, =_sbss
 8000ea0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ea4:	20000930 	.word	0x20000930

08000ea8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea8:	e7fe      	b.n	8000ea8 <ADC_IRQHandler>
	...

08000eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	; (8000eec <HAL_Init+0x40>)
 8000eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <HAL_Init+0x40>)
 8000ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a07      	ldr	r2, [pc, #28]	; (8000eec <HAL_Init+0x40>)
 8000ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	f000 f92b 	bl	8001130 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eda:	2000      	movs	r0, #0
 8000edc:	f000 f808 	bl	8000ef0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee0:	f7ff fdfa 	bl	8000ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023c00 	.word	0x40023c00

08000ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_InitTick+0x54>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <HAL_InitTick+0x58>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4619      	mov	r1, r3
 8000f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 f943 	bl	800119a <HAL_SYSTICK_Config>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00e      	b.n	8000f3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b0f      	cmp	r3, #15
 8000f22:	d80a      	bhi.n	8000f3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f24:	2200      	movs	r2, #0
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f000 f90b 	bl	8001146 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f30:	4a06      	ldr	r2, [pc, #24]	; (8000f4c <HAL_InitTick+0x5c>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	e000      	b.n	8000f3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000000 	.word	0x20000000
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	20000004 	.word	0x20000004

08000f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x20>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_IncTick+0x24>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <HAL_IncTick+0x24>)
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000008 	.word	0x20000008
 8000f74:	2000091c 	.word	0x2000091c

08000f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_GetTick+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	2000091c 	.word	0x2000091c

08000f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fac:	4013      	ands	r3, r2
 8000fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc2:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	60d3      	str	r3, [r2, #12]
}
 8000fc8:	bf00      	nop
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	0a1b      	lsrs	r3, r3, #8
 8000fe2:	f003 0307 	and.w	r3, r3, #7
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	2b00      	cmp	r3, #0
 8001004:	db0b      	blt.n	800101e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	f003 021f 	and.w	r2, r3, #31
 800100c:	4907      	ldr	r1, [pc, #28]	; (800102c <__NVIC_EnableIRQ+0x38>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	095b      	lsrs	r3, r3, #5
 8001014:	2001      	movs	r0, #1
 8001016:	fa00 f202 	lsl.w	r2, r0, r2
 800101a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000e100 	.word	0xe000e100

08001030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	db0a      	blt.n	800105a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	b2da      	uxtb	r2, r3
 8001048:	490c      	ldr	r1, [pc, #48]	; (800107c <__NVIC_SetPriority+0x4c>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	0112      	lsls	r2, r2, #4
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	440b      	add	r3, r1
 8001054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001058:	e00a      	b.n	8001070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4908      	ldr	r1, [pc, #32]	; (8001080 <__NVIC_SetPriority+0x50>)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	3b04      	subs	r3, #4
 8001068:	0112      	lsls	r2, r2, #4
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	440b      	add	r3, r1
 800106e:	761a      	strb	r2, [r3, #24]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000e100 	.word	0xe000e100
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001084:	b480      	push	{r7}
 8001086:	b089      	sub	sp, #36	; 0x24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f1c3 0307 	rsb	r3, r3, #7
 800109e:	2b04      	cmp	r3, #4
 80010a0:	bf28      	it	cs
 80010a2:	2304      	movcs	r3, #4
 80010a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3304      	adds	r3, #4
 80010aa:	2b06      	cmp	r3, #6
 80010ac:	d902      	bls.n	80010b4 <NVIC_EncodePriority+0x30>
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3b03      	subs	r3, #3
 80010b2:	e000      	b.n	80010b6 <NVIC_EncodePriority+0x32>
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b8:	f04f 32ff 	mov.w	r2, #4294967295
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43da      	mvns	r2, r3
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	401a      	ands	r2, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010cc:	f04f 31ff 	mov.w	r1, #4294967295
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	fa01 f303 	lsl.w	r3, r1, r3
 80010d6:	43d9      	mvns	r1, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	4313      	orrs	r3, r2
         );
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3724      	adds	r7, #36	; 0x24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010fc:	d301      	bcc.n	8001102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fe:	2301      	movs	r3, #1
 8001100:	e00f      	b.n	8001122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001102:	4a0a      	ldr	r2, [pc, #40]	; (800112c <SysTick_Config+0x40>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800110a:	210f      	movs	r1, #15
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	f7ff ff8e 	bl	8001030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <SysTick_Config+0x40>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111a:	4b04      	ldr	r3, [pc, #16]	; (800112c <SysTick_Config+0x40>)
 800111c:	2207      	movs	r2, #7
 800111e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	e000e010 	.word	0xe000e010

08001130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff ff29 	bl	8000f90 <__NVIC_SetPriorityGrouping>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001146:	b580      	push	{r7, lr}
 8001148:	b086      	sub	sp, #24
 800114a:	af00      	add	r7, sp, #0
 800114c:	4603      	mov	r3, r0
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
 8001152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001158:	f7ff ff3e 	bl	8000fd8 <__NVIC_GetPriorityGrouping>
 800115c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	68b9      	ldr	r1, [r7, #8]
 8001162:	6978      	ldr	r0, [r7, #20]
 8001164:	f7ff ff8e 	bl	8001084 <NVIC_EncodePriority>
 8001168:	4602      	mov	r2, r0
 800116a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116e:	4611      	mov	r1, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff5d 	bl	8001030 <__NVIC_SetPriority>
}
 8001176:	bf00      	nop
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	4603      	mov	r3, r0
 8001186:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff31 	bl	8000ff4 <__NVIC_EnableIRQ>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ffa2 	bl	80010ec <SysTick_Config>
 80011a8:	4603      	mov	r3, r0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80011c0:	f7ff feda 	bl	8000f78 <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d101      	bne.n	80011d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e099      	b.n	8001304 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2202      	movs	r2, #2
 80011d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f022 0201 	bic.w	r2, r2, #1
 80011ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011f0:	e00f      	b.n	8001212 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011f2:	f7ff fec1 	bl	8000f78 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b05      	cmp	r3, #5
 80011fe:	d908      	bls.n	8001212 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2220      	movs	r2, #32
 8001204:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2203      	movs	r2, #3
 800120a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e078      	b.n	8001304 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1e8      	bne.n	80011f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	4b38      	ldr	r3, [pc, #224]	; (800130c <HAL_DMA_Init+0x158>)
 800122c:	4013      	ands	r3, r2
 800122e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685a      	ldr	r2, [r3, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800123e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800124a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001256:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a1b      	ldr	r3, [r3, #32]
 800125c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	4313      	orrs	r3, r2
 8001262:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001268:	2b04      	cmp	r3, #4
 800126a:	d107      	bne.n	800127c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001274:	4313      	orrs	r3, r2
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	4313      	orrs	r3, r2
 800127a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	697a      	ldr	r2, [r7, #20]
 8001282:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	f023 0307 	bic.w	r3, r3, #7
 8001292:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001298:	697a      	ldr	r2, [r7, #20]
 800129a:	4313      	orrs	r3, r2
 800129c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	d117      	bne.n	80012d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d00e      	beq.n	80012d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f000 fb01 	bl	80018c0 <DMA_CheckFifoParam>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d008      	beq.n	80012d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2240      	movs	r2, #64	; 0x40
 80012c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80012d2:	2301      	movs	r3, #1
 80012d4:	e016      	b.n	8001304 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	697a      	ldr	r2, [r7, #20]
 80012dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f000 fab8 	bl	8001854 <DMA_CalcBaseAndBitshift>
 80012e4:	4603      	mov	r3, r0
 80012e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ec:	223f      	movs	r2, #63	; 0x3f
 80012ee:	409a      	lsls	r2, r3
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2201      	movs	r2, #1
 80012fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	f010803f 	.word	0xf010803f

08001310 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001326:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800132e:	2b01      	cmp	r3, #1
 8001330:	d101      	bne.n	8001336 <HAL_DMA_Start_IT+0x26>
 8001332:	2302      	movs	r3, #2
 8001334:	e040      	b.n	80013b8 <HAL_DMA_Start_IT+0xa8>
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b01      	cmp	r3, #1
 8001348:	d12f      	bne.n	80013aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2202      	movs	r2, #2
 800134e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2200      	movs	r2, #0
 8001356:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	68b9      	ldr	r1, [r7, #8]
 800135e:	68f8      	ldr	r0, [r7, #12]
 8001360:	f000 fa4a 	bl	80017f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001368:	223f      	movs	r2, #63	; 0x3f
 800136a:	409a      	lsls	r2, r3
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f042 0216 	orr.w	r2, r2, #22
 800137e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	2b00      	cmp	r3, #0
 8001386:	d007      	beq.n	8001398 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f042 0208 	orr.w	r2, r2, #8
 8001396:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f042 0201 	orr.w	r2, r2, #1
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	e005      	b.n	80013b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80013b2:	2302      	movs	r3, #2
 80013b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80013b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013ce:	f7ff fdd3 	bl	8000f78 <HAL_GetTick>
 80013d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d008      	beq.n	80013f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2280      	movs	r2, #128	; 0x80
 80013e4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e052      	b.n	8001498 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 0216 	bic.w	r2, r2, #22
 8001400:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	695a      	ldr	r2, [r3, #20]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001410:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	2b00      	cmp	r3, #0
 8001418:	d103      	bne.n	8001422 <HAL_DMA_Abort+0x62>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800141e:	2b00      	cmp	r3, #0
 8001420:	d007      	beq.n	8001432 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 0208 	bic.w	r2, r2, #8
 8001430:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0201 	bic.w	r2, r2, #1
 8001440:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001442:	e013      	b.n	800146c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001444:	f7ff fd98 	bl	8000f78 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b05      	cmp	r3, #5
 8001450:	d90c      	bls.n	800146c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2220      	movs	r2, #32
 8001456:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2203      	movs	r2, #3
 800145c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e015      	b.n	8001498 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1e4      	bne.n	8001444 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800147e:	223f      	movs	r2, #63	; 0x3f
 8001480:	409a      	lsls	r2, r3
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2201      	movs	r2, #1
 800148a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d004      	beq.n	80014be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2280      	movs	r2, #128	; 0x80
 80014b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e00c      	b.n	80014d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2205      	movs	r2, #5
 80014c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f022 0201 	bic.w	r2, r2, #1
 80014d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014f0:	4b8e      	ldr	r3, [pc, #568]	; (800172c <HAL_DMA_IRQHandler+0x248>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a8e      	ldr	r2, [pc, #568]	; (8001730 <HAL_DMA_IRQHandler+0x24c>)
 80014f6:	fba2 2303 	umull	r2, r3, r2, r3
 80014fa:	0a9b      	lsrs	r3, r3, #10
 80014fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001502:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800150e:	2208      	movs	r2, #8
 8001510:	409a      	lsls	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4013      	ands	r3, r2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d01a      	beq.n	8001550 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	d013      	beq.n	8001550 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0204 	bic.w	r2, r2, #4
 8001536:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800153c:	2208      	movs	r2, #8
 800153e:	409a      	lsls	r2, r3
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001548:	f043 0201 	orr.w	r2, r3, #1
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001554:	2201      	movs	r2, #1
 8001556:	409a      	lsls	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4013      	ands	r3, r2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d012      	beq.n	8001586 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00b      	beq.n	8001586 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001572:	2201      	movs	r2, #1
 8001574:	409a      	lsls	r2, r3
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800157e:	f043 0202 	orr.w	r2, r3, #2
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800158a:	2204      	movs	r2, #4
 800158c:	409a      	lsls	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4013      	ands	r3, r2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d012      	beq.n	80015bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d00b      	beq.n	80015bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a8:	2204      	movs	r2, #4
 80015aa:	409a      	lsls	r2, r3
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b4:	f043 0204 	orr.w	r2, r3, #4
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c0:	2210      	movs	r2, #16
 80015c2:	409a      	lsls	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4013      	ands	r3, r2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d043      	beq.n	8001654 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d03c      	beq.n	8001654 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015de:	2210      	movs	r2, #16
 80015e0:	409a      	lsls	r2, r3
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d018      	beq.n	8001626 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d108      	bne.n	8001614 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	2b00      	cmp	r3, #0
 8001608:	d024      	beq.n	8001654 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	4798      	blx	r3
 8001612:	e01f      	b.n	8001654 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001618:	2b00      	cmp	r3, #0
 800161a:	d01b      	beq.n	8001654 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	4798      	blx	r3
 8001624:	e016      	b.n	8001654 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001630:	2b00      	cmp	r3, #0
 8001632:	d107      	bne.n	8001644 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 0208 	bic.w	r2, r2, #8
 8001642:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001658:	2220      	movs	r2, #32
 800165a:	409a      	lsls	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4013      	ands	r3, r2
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 808f 	beq.w	8001784 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0310 	and.w	r3, r3, #16
 8001670:	2b00      	cmp	r3, #0
 8001672:	f000 8087 	beq.w	8001784 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167a:	2220      	movs	r2, #32
 800167c:	409a      	lsls	r2, r3
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b05      	cmp	r3, #5
 800168c:	d136      	bne.n	80016fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 0216 	bic.w	r2, r2, #22
 800169c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	695a      	ldr	r2, [r3, #20]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d103      	bne.n	80016be <HAL_DMA_IRQHandler+0x1da>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d007      	beq.n	80016ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 0208 	bic.w	r2, r2, #8
 80016cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d2:	223f      	movs	r2, #63	; 0x3f
 80016d4:	409a      	lsls	r2, r3
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d07e      	beq.n	80017f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	4798      	blx	r3
        }
        return;
 80016fa:	e079      	b.n	80017f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d01d      	beq.n	8001746 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d10d      	bne.n	8001734 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171c:	2b00      	cmp	r3, #0
 800171e:	d031      	beq.n	8001784 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	4798      	blx	r3
 8001728:	e02c      	b.n	8001784 <HAL_DMA_IRQHandler+0x2a0>
 800172a:	bf00      	nop
 800172c:	20000000 	.word	0x20000000
 8001730:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001738:	2b00      	cmp	r3, #0
 800173a:	d023      	beq.n	8001784 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	4798      	blx	r3
 8001744:	e01e      	b.n	8001784 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001750:	2b00      	cmp	r3, #0
 8001752:	d10f      	bne.n	8001774 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0210 	bic.w	r2, r2, #16
 8001762:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001788:	2b00      	cmp	r3, #0
 800178a:	d032      	beq.n	80017f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	2b00      	cmp	r3, #0
 8001796:	d022      	beq.n	80017de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2205      	movs	r2, #5
 800179c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0201 	bic.w	r2, r2, #1
 80017ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	3301      	adds	r3, #1
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d307      	bcc.n	80017cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f2      	bne.n	80017b0 <HAL_DMA_IRQHandler+0x2cc>
 80017ca:	e000      	b.n	80017ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80017cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d005      	beq.n	80017f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	4798      	blx	r3
 80017ee:	e000      	b.n	80017f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80017f0:	bf00      	nop
    }
  }
}
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
 8001804:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001814:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	2b40      	cmp	r3, #64	; 0x40
 8001824:	d108      	bne.n	8001838 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001836:	e007      	b.n	8001848 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68ba      	ldr	r2, [r7, #8]
 800183e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	60da      	str	r2, [r3, #12]
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	3b10      	subs	r3, #16
 8001864:	4a14      	ldr	r2, [pc, #80]	; (80018b8 <DMA_CalcBaseAndBitshift+0x64>)
 8001866:	fba2 2303 	umull	r2, r3, r2, r3
 800186a:	091b      	lsrs	r3, r3, #4
 800186c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800186e:	4a13      	ldr	r2, [pc, #76]	; (80018bc <DMA_CalcBaseAndBitshift+0x68>)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4413      	add	r3, r2
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	461a      	mov	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2b03      	cmp	r3, #3
 8001880:	d909      	bls.n	8001896 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800188a:	f023 0303 	bic.w	r3, r3, #3
 800188e:	1d1a      	adds	r2, r3, #4
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	659a      	str	r2, [r3, #88]	; 0x58
 8001894:	e007      	b.n	80018a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800189e:	f023 0303 	bic.w	r3, r3, #3
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	aaaaaaab 	.word	0xaaaaaaab
 80018bc:	08004e1c 	.word	0x08004e1c

080018c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018c8:	2300      	movs	r3, #0
 80018ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d11f      	bne.n	800191a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	2b03      	cmp	r3, #3
 80018de:	d856      	bhi.n	800198e <DMA_CheckFifoParam+0xce>
 80018e0:	a201      	add	r2, pc, #4	; (adr r2, 80018e8 <DMA_CheckFifoParam+0x28>)
 80018e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e6:	bf00      	nop
 80018e8:	080018f9 	.word	0x080018f9
 80018ec:	0800190b 	.word	0x0800190b
 80018f0:	080018f9 	.word	0x080018f9
 80018f4:	0800198f 	.word	0x0800198f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d046      	beq.n	8001992 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001908:	e043      	b.n	8001992 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001912:	d140      	bne.n	8001996 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001918:	e03d      	b.n	8001996 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001922:	d121      	bne.n	8001968 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	2b03      	cmp	r3, #3
 8001928:	d837      	bhi.n	800199a <DMA_CheckFifoParam+0xda>
 800192a:	a201      	add	r2, pc, #4	; (adr r2, 8001930 <DMA_CheckFifoParam+0x70>)
 800192c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001930:	08001941 	.word	0x08001941
 8001934:	08001947 	.word	0x08001947
 8001938:	08001941 	.word	0x08001941
 800193c:	08001959 	.word	0x08001959
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	73fb      	strb	r3, [r7, #15]
      break;
 8001944:	e030      	b.n	80019a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d025      	beq.n	800199e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001956:	e022      	b.n	800199e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001960:	d11f      	bne.n	80019a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001966:	e01c      	b.n	80019a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	2b02      	cmp	r3, #2
 800196c:	d903      	bls.n	8001976 <DMA_CheckFifoParam+0xb6>
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	2b03      	cmp	r3, #3
 8001972:	d003      	beq.n	800197c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001974:	e018      	b.n	80019a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	73fb      	strb	r3, [r7, #15]
      break;
 800197a:	e015      	b.n	80019a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d00e      	beq.n	80019a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	73fb      	strb	r3, [r7, #15]
      break;
 800198c:	e00b      	b.n	80019a6 <DMA_CheckFifoParam+0xe6>
      break;
 800198e:	bf00      	nop
 8001990:	e00a      	b.n	80019a8 <DMA_CheckFifoParam+0xe8>
      break;
 8001992:	bf00      	nop
 8001994:	e008      	b.n	80019a8 <DMA_CheckFifoParam+0xe8>
      break;
 8001996:	bf00      	nop
 8001998:	e006      	b.n	80019a8 <DMA_CheckFifoParam+0xe8>
      break;
 800199a:	bf00      	nop
 800199c:	e004      	b.n	80019a8 <DMA_CheckFifoParam+0xe8>
      break;
 800199e:	bf00      	nop
 80019a0:	e002      	b.n	80019a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80019a2:	bf00      	nop
 80019a4:	e000      	b.n	80019a8 <DMA_CheckFifoParam+0xe8>
      break;
 80019a6:	bf00      	nop
    }
  } 
  
  return status; 
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop

080019b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b089      	sub	sp, #36	; 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
 80019d2:	e165      	b.n	8001ca0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019d4:	2201      	movs	r2, #1
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	f040 8154 	bne.w	8001c9a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d005      	beq.n	8001a0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d130      	bne.n	8001a6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	2203      	movs	r2, #3
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	68da      	ldr	r2, [r3, #12]
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a40:	2201      	movs	r2, #1
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	091b      	lsrs	r3, r3, #4
 8001a56:	f003 0201 	and.w	r2, r3, #1
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d017      	beq.n	8001aa8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	2203      	movs	r2, #3
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d123      	bne.n	8001afc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	08da      	lsrs	r2, r3, #3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3208      	adds	r2, #8
 8001abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	220f      	movs	r2, #15
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	691a      	ldr	r2, [r3, #16]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	08da      	lsrs	r2, r3, #3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3208      	adds	r2, #8
 8001af6:	69b9      	ldr	r1, [r7, #24]
 8001af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	2203      	movs	r2, #3
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0203 	and.w	r2, r3, #3
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 80ae 	beq.w	8001c9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	4b5d      	ldr	r3, [pc, #372]	; (8001cb8 <HAL_GPIO_Init+0x300>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	4a5c      	ldr	r2, [pc, #368]	; (8001cb8 <HAL_GPIO_Init+0x300>)
 8001b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4e:	4b5a      	ldr	r3, [pc, #360]	; (8001cb8 <HAL_GPIO_Init+0x300>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b5a:	4a58      	ldr	r2, [pc, #352]	; (8001cbc <HAL_GPIO_Init+0x304>)
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	089b      	lsrs	r3, r3, #2
 8001b60:	3302      	adds	r3, #2
 8001b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	220f      	movs	r2, #15
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a4f      	ldr	r2, [pc, #316]	; (8001cc0 <HAL_GPIO_Init+0x308>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d025      	beq.n	8001bd2 <HAL_GPIO_Init+0x21a>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a4e      	ldr	r2, [pc, #312]	; (8001cc4 <HAL_GPIO_Init+0x30c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d01f      	beq.n	8001bce <HAL_GPIO_Init+0x216>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a4d      	ldr	r2, [pc, #308]	; (8001cc8 <HAL_GPIO_Init+0x310>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d019      	beq.n	8001bca <HAL_GPIO_Init+0x212>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a4c      	ldr	r2, [pc, #304]	; (8001ccc <HAL_GPIO_Init+0x314>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d013      	beq.n	8001bc6 <HAL_GPIO_Init+0x20e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a4b      	ldr	r2, [pc, #300]	; (8001cd0 <HAL_GPIO_Init+0x318>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d00d      	beq.n	8001bc2 <HAL_GPIO_Init+0x20a>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4a      	ldr	r2, [pc, #296]	; (8001cd4 <HAL_GPIO_Init+0x31c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d007      	beq.n	8001bbe <HAL_GPIO_Init+0x206>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a49      	ldr	r2, [pc, #292]	; (8001cd8 <HAL_GPIO_Init+0x320>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d101      	bne.n	8001bba <HAL_GPIO_Init+0x202>
 8001bb6:	2306      	movs	r3, #6
 8001bb8:	e00c      	b.n	8001bd4 <HAL_GPIO_Init+0x21c>
 8001bba:	2307      	movs	r3, #7
 8001bbc:	e00a      	b.n	8001bd4 <HAL_GPIO_Init+0x21c>
 8001bbe:	2305      	movs	r3, #5
 8001bc0:	e008      	b.n	8001bd4 <HAL_GPIO_Init+0x21c>
 8001bc2:	2304      	movs	r3, #4
 8001bc4:	e006      	b.n	8001bd4 <HAL_GPIO_Init+0x21c>
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e004      	b.n	8001bd4 <HAL_GPIO_Init+0x21c>
 8001bca:	2302      	movs	r3, #2
 8001bcc:	e002      	b.n	8001bd4 <HAL_GPIO_Init+0x21c>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <HAL_GPIO_Init+0x21c>
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	69fa      	ldr	r2, [r7, #28]
 8001bd6:	f002 0203 	and.w	r2, r2, #3
 8001bda:	0092      	lsls	r2, r2, #2
 8001bdc:	4093      	lsls	r3, r2
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001be4:	4935      	ldr	r1, [pc, #212]	; (8001cbc <HAL_GPIO_Init+0x304>)
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	089b      	lsrs	r3, r3, #2
 8001bea:	3302      	adds	r3, #2
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bf2:	4b3a      	ldr	r3, [pc, #232]	; (8001cdc <HAL_GPIO_Init+0x324>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c16:	4a31      	ldr	r2, [pc, #196]	; (8001cdc <HAL_GPIO_Init+0x324>)
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c1c:	4b2f      	ldr	r3, [pc, #188]	; (8001cdc <HAL_GPIO_Init+0x324>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c40:	4a26      	ldr	r2, [pc, #152]	; (8001cdc <HAL_GPIO_Init+0x324>)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c46:	4b25      	ldr	r3, [pc, #148]	; (8001cdc <HAL_GPIO_Init+0x324>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c6a:	4a1c      	ldr	r2, [pc, #112]	; (8001cdc <HAL_GPIO_Init+0x324>)
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c70:	4b1a      	ldr	r3, [pc, #104]	; (8001cdc <HAL_GPIO_Init+0x324>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c94:	4a11      	ldr	r2, [pc, #68]	; (8001cdc <HAL_GPIO_Init+0x324>)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	61fb      	str	r3, [r7, #28]
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	2b0f      	cmp	r3, #15
 8001ca4:	f67f ae96 	bls.w	80019d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ca8:	bf00      	nop
 8001caa:	bf00      	nop
 8001cac:	3724      	adds	r7, #36	; 0x24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40013800 	.word	0x40013800
 8001cc0:	40020000 	.word	0x40020000
 8001cc4:	40020400 	.word	0x40020400
 8001cc8:	40020800 	.word	0x40020800
 8001ccc:	40020c00 	.word	0x40020c00
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40021400 	.word	0x40021400
 8001cd8:	40021800 	.word	0x40021800
 8001cdc:	40013c00 	.word	0x40013c00

08001ce0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	603b      	str	r3, [r7, #0]
 8001cee:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <HAL_PWREx_EnableOverDrive+0x90>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	4a1f      	ldr	r2, [pc, #124]	; (8001d70 <HAL_PWREx_EnableOverDrive+0x90>)
 8001cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfa:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <HAL_PWREx_EnableOverDrive+0x90>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d06:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <HAL_PWREx_EnableOverDrive+0x94>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d0c:	f7ff f934 	bl	8000f78 <HAL_GetTick>
 8001d10:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d12:	e009      	b.n	8001d28 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d14:	f7ff f930 	bl	8000f78 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d22:	d901      	bls.n	8001d28 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e01f      	b.n	8001d68 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d28:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d34:	d1ee      	bne.n	8001d14 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001d36:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d3c:	f7ff f91c 	bl	8000f78 <HAL_GetTick>
 8001d40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d42:	e009      	b.n	8001d58 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d44:	f7ff f918 	bl	8000f78 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d52:	d901      	bls.n	8001d58 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e007      	b.n	8001d68 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d58:	4b07      	ldr	r3, [pc, #28]	; (8001d78 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d64:	d1ee      	bne.n	8001d44 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40023800 	.word	0x40023800
 8001d74:	420e0040 	.word	0x420e0040
 8001d78:	40007000 	.word	0x40007000
 8001d7c:	420e0044 	.word	0x420e0044

08001d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0cc      	b.n	8001f2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d94:	4b68      	ldr	r3, [pc, #416]	; (8001f38 <HAL_RCC_ClockConfig+0x1b8>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 030f 	and.w	r3, r3, #15
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d90c      	bls.n	8001dbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da2:	4b65      	ldr	r3, [pc, #404]	; (8001f38 <HAL_RCC_ClockConfig+0x1b8>)
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001daa:	4b63      	ldr	r3, [pc, #396]	; (8001f38 <HAL_RCC_ClockConfig+0x1b8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d001      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e0b8      	b.n	8001f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d020      	beq.n	8001e0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dd4:	4b59      	ldr	r3, [pc, #356]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	4a58      	ldr	r2, [pc, #352]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0308 	and.w	r3, r3, #8
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d005      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dec:	4b53      	ldr	r3, [pc, #332]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	4a52      	ldr	r2, [pc, #328]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001df2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001df6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df8:	4b50      	ldr	r3, [pc, #320]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	494d      	ldr	r1, [pc, #308]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d044      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d107      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1e:	4b47      	ldr	r3, [pc, #284]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d119      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e07f      	b.n	8001f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d003      	beq.n	8001e3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e3a:	2b03      	cmp	r3, #3
 8001e3c:	d107      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e3e:	4b3f      	ldr	r3, [pc, #252]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d109      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e06f      	b.n	8001f2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e4e:	4b3b      	ldr	r3, [pc, #236]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e067      	b.n	8001f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e5e:	4b37      	ldr	r3, [pc, #220]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f023 0203 	bic.w	r2, r3, #3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	4934      	ldr	r1, [pc, #208]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e70:	f7ff f882 	bl	8000f78 <HAL_GetTick>
 8001e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e76:	e00a      	b.n	8001e8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e78:	f7ff f87e 	bl	8000f78 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e04f      	b.n	8001f2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8e:	4b2b      	ldr	r3, [pc, #172]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 020c 	and.w	r2, r3, #12
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d1eb      	bne.n	8001e78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea0:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 030f 	and.w	r3, r3, #15
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d20c      	bcs.n	8001ec8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eae:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb6:	4b20      	ldr	r3, [pc, #128]	; (8001f38 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d001      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e032      	b.n	8001f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d008      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed4:	4b19      	ldr	r3, [pc, #100]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	4916      	ldr	r1, [pc, #88]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d009      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ef2:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	490e      	ldr	r1, [pc, #56]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f06:	f000 f855 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	490a      	ldr	r1, [pc, #40]	; (8001f40 <HAL_RCC_ClockConfig+0x1c0>)
 8001f18:	5ccb      	ldrb	r3, [r1, r3]
 8001f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f1e:	4a09      	ldr	r2, [pc, #36]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f22:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <HAL_RCC_ClockConfig+0x1c8>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe ffe2 	bl	8000ef0 <HAL_InitTick>

  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40023c00 	.word	0x40023c00
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	08004e04 	.word	0x08004e04
 8001f44:	20000000 	.word	0x20000000
 8001f48:	20000004 	.word	0x20000004

08001f4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f50:	4b03      	ldr	r3, [pc, #12]	; (8001f60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f52:	681b      	ldr	r3, [r3, #0]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	20000000 	.word	0x20000000

08001f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f68:	f7ff fff0 	bl	8001f4c <HAL_RCC_GetHCLKFreq>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	0a9b      	lsrs	r3, r3, #10
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	4903      	ldr	r1, [pc, #12]	; (8001f88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f7a:	5ccb      	ldrb	r3, [r1, r3]
 8001f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40023800 	.word	0x40023800
 8001f88:	08004e14 	.word	0x08004e14

08001f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f90:	f7ff ffdc 	bl	8001f4c <HAL_RCC_GetHCLKFreq>
 8001f94:	4602      	mov	r2, r0
 8001f96:	4b05      	ldr	r3, [pc, #20]	; (8001fac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	0b5b      	lsrs	r3, r3, #13
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	4903      	ldr	r1, [pc, #12]	; (8001fb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fa2:	5ccb      	ldrb	r3, [r1, r3]
 8001fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	08004e14 	.word	0x08004e14

08001fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fb8:	b0ae      	sub	sp, #184	; 0xb8
 8001fba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fda:	4bcb      	ldr	r3, [pc, #812]	; (8002308 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 030c 	and.w	r3, r3, #12
 8001fe2:	2b0c      	cmp	r3, #12
 8001fe4:	f200 8206 	bhi.w	80023f4 <HAL_RCC_GetSysClockFreq+0x440>
 8001fe8:	a201      	add	r2, pc, #4	; (adr r2, 8001ff0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fee:	bf00      	nop
 8001ff0:	08002025 	.word	0x08002025
 8001ff4:	080023f5 	.word	0x080023f5
 8001ff8:	080023f5 	.word	0x080023f5
 8001ffc:	080023f5 	.word	0x080023f5
 8002000:	0800202d 	.word	0x0800202d
 8002004:	080023f5 	.word	0x080023f5
 8002008:	080023f5 	.word	0x080023f5
 800200c:	080023f5 	.word	0x080023f5
 8002010:	08002035 	.word	0x08002035
 8002014:	080023f5 	.word	0x080023f5
 8002018:	080023f5 	.word	0x080023f5
 800201c:	080023f5 	.word	0x080023f5
 8002020:	08002225 	.word	0x08002225
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002024:	4bb9      	ldr	r3, [pc, #740]	; (800230c <HAL_RCC_GetSysClockFreq+0x358>)
 8002026:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800202a:	e1e7      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800202c:	4bb8      	ldr	r3, [pc, #736]	; (8002310 <HAL_RCC_GetSysClockFreq+0x35c>)
 800202e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002032:	e1e3      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002034:	4bb4      	ldr	r3, [pc, #720]	; (8002308 <HAL_RCC_GetSysClockFreq+0x354>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800203c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002040:	4bb1      	ldr	r3, [pc, #708]	; (8002308 <HAL_RCC_GetSysClockFreq+0x354>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d071      	beq.n	8002130 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800204c:	4bae      	ldr	r3, [pc, #696]	; (8002308 <HAL_RCC_GetSysClockFreq+0x354>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	099b      	lsrs	r3, r3, #6
 8002052:	2200      	movs	r2, #0
 8002054:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002058:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800205c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002064:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002068:	2300      	movs	r3, #0
 800206a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800206e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002072:	4622      	mov	r2, r4
 8002074:	462b      	mov	r3, r5
 8002076:	f04f 0000 	mov.w	r0, #0
 800207a:	f04f 0100 	mov.w	r1, #0
 800207e:	0159      	lsls	r1, r3, #5
 8002080:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002084:	0150      	lsls	r0, r2, #5
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	4621      	mov	r1, r4
 800208c:	1a51      	subs	r1, r2, r1
 800208e:	6439      	str	r1, [r7, #64]	; 0x40
 8002090:	4629      	mov	r1, r5
 8002092:	eb63 0301 	sbc.w	r3, r3, r1
 8002096:	647b      	str	r3, [r7, #68]	; 0x44
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	f04f 0300 	mov.w	r3, #0
 80020a0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80020a4:	4649      	mov	r1, r9
 80020a6:	018b      	lsls	r3, r1, #6
 80020a8:	4641      	mov	r1, r8
 80020aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020ae:	4641      	mov	r1, r8
 80020b0:	018a      	lsls	r2, r1, #6
 80020b2:	4641      	mov	r1, r8
 80020b4:	1a51      	subs	r1, r2, r1
 80020b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80020b8:	4649      	mov	r1, r9
 80020ba:	eb63 0301 	sbc.w	r3, r3, r1
 80020be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020c0:	f04f 0200 	mov.w	r2, #0
 80020c4:	f04f 0300 	mov.w	r3, #0
 80020c8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80020cc:	4649      	mov	r1, r9
 80020ce:	00cb      	lsls	r3, r1, #3
 80020d0:	4641      	mov	r1, r8
 80020d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020d6:	4641      	mov	r1, r8
 80020d8:	00ca      	lsls	r2, r1, #3
 80020da:	4610      	mov	r0, r2
 80020dc:	4619      	mov	r1, r3
 80020de:	4603      	mov	r3, r0
 80020e0:	4622      	mov	r2, r4
 80020e2:	189b      	adds	r3, r3, r2
 80020e4:	633b      	str	r3, [r7, #48]	; 0x30
 80020e6:	462b      	mov	r3, r5
 80020e8:	460a      	mov	r2, r1
 80020ea:	eb42 0303 	adc.w	r3, r2, r3
 80020ee:	637b      	str	r3, [r7, #52]	; 0x34
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	f04f 0300 	mov.w	r3, #0
 80020f8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80020fc:	4629      	mov	r1, r5
 80020fe:	024b      	lsls	r3, r1, #9
 8002100:	4621      	mov	r1, r4
 8002102:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002106:	4621      	mov	r1, r4
 8002108:	024a      	lsls	r2, r1, #9
 800210a:	4610      	mov	r0, r2
 800210c:	4619      	mov	r1, r3
 800210e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002112:	2200      	movs	r2, #0
 8002114:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002118:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800211c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002120:	f7fe f8c6 	bl	80002b0 <__aeabi_uldivmod>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	4613      	mov	r3, r2
 800212a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800212e:	e067      	b.n	8002200 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002130:	4b75      	ldr	r3, [pc, #468]	; (8002308 <HAL_RCC_GetSysClockFreq+0x354>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	099b      	lsrs	r3, r3, #6
 8002136:	2200      	movs	r2, #0
 8002138:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800213c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002140:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002148:	67bb      	str	r3, [r7, #120]	; 0x78
 800214a:	2300      	movs	r3, #0
 800214c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800214e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002152:	4622      	mov	r2, r4
 8002154:	462b      	mov	r3, r5
 8002156:	f04f 0000 	mov.w	r0, #0
 800215a:	f04f 0100 	mov.w	r1, #0
 800215e:	0159      	lsls	r1, r3, #5
 8002160:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002164:	0150      	lsls	r0, r2, #5
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	4621      	mov	r1, r4
 800216c:	1a51      	subs	r1, r2, r1
 800216e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002170:	4629      	mov	r1, r5
 8002172:	eb63 0301 	sbc.w	r3, r3, r1
 8002176:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002178:	f04f 0200 	mov.w	r2, #0
 800217c:	f04f 0300 	mov.w	r3, #0
 8002180:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002184:	4649      	mov	r1, r9
 8002186:	018b      	lsls	r3, r1, #6
 8002188:	4641      	mov	r1, r8
 800218a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800218e:	4641      	mov	r1, r8
 8002190:	018a      	lsls	r2, r1, #6
 8002192:	4641      	mov	r1, r8
 8002194:	ebb2 0a01 	subs.w	sl, r2, r1
 8002198:	4649      	mov	r1, r9
 800219a:	eb63 0b01 	sbc.w	fp, r3, r1
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	f04f 0300 	mov.w	r3, #0
 80021a6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80021aa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80021ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021b2:	4692      	mov	sl, r2
 80021b4:	469b      	mov	fp, r3
 80021b6:	4623      	mov	r3, r4
 80021b8:	eb1a 0303 	adds.w	r3, sl, r3
 80021bc:	623b      	str	r3, [r7, #32]
 80021be:	462b      	mov	r3, r5
 80021c0:	eb4b 0303 	adc.w	r3, fp, r3
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	f04f 0300 	mov.w	r3, #0
 80021ce:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80021d2:	4629      	mov	r1, r5
 80021d4:	028b      	lsls	r3, r1, #10
 80021d6:	4621      	mov	r1, r4
 80021d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021dc:	4621      	mov	r1, r4
 80021de:	028a      	lsls	r2, r1, #10
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021e8:	2200      	movs	r2, #0
 80021ea:	673b      	str	r3, [r7, #112]	; 0x70
 80021ec:	677a      	str	r2, [r7, #116]	; 0x74
 80021ee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80021f2:	f7fe f85d 	bl	80002b0 <__aeabi_uldivmod>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	4613      	mov	r3, r2
 80021fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002200:	4b41      	ldr	r3, [pc, #260]	; (8002308 <HAL_RCC_GetSysClockFreq+0x354>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	0c1b      	lsrs	r3, r3, #16
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	3301      	adds	r3, #1
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002212:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002216:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800221a:	fbb2 f3f3 	udiv	r3, r2, r3
 800221e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002222:	e0eb      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002224:	4b38      	ldr	r3, [pc, #224]	; (8002308 <HAL_RCC_GetSysClockFreq+0x354>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800222c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002230:	4b35      	ldr	r3, [pc, #212]	; (8002308 <HAL_RCC_GetSysClockFreq+0x354>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d06b      	beq.n	8002314 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800223c:	4b32      	ldr	r3, [pc, #200]	; (8002308 <HAL_RCC_GetSysClockFreq+0x354>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	099b      	lsrs	r3, r3, #6
 8002242:	2200      	movs	r2, #0
 8002244:	66bb      	str	r3, [r7, #104]	; 0x68
 8002246:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002248:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800224a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800224e:	663b      	str	r3, [r7, #96]	; 0x60
 8002250:	2300      	movs	r3, #0
 8002252:	667b      	str	r3, [r7, #100]	; 0x64
 8002254:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002258:	4622      	mov	r2, r4
 800225a:	462b      	mov	r3, r5
 800225c:	f04f 0000 	mov.w	r0, #0
 8002260:	f04f 0100 	mov.w	r1, #0
 8002264:	0159      	lsls	r1, r3, #5
 8002266:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800226a:	0150      	lsls	r0, r2, #5
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4621      	mov	r1, r4
 8002272:	1a51      	subs	r1, r2, r1
 8002274:	61b9      	str	r1, [r7, #24]
 8002276:	4629      	mov	r1, r5
 8002278:	eb63 0301 	sbc.w	r3, r3, r1
 800227c:	61fb      	str	r3, [r7, #28]
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	f04f 0300 	mov.w	r3, #0
 8002286:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800228a:	4659      	mov	r1, fp
 800228c:	018b      	lsls	r3, r1, #6
 800228e:	4651      	mov	r1, sl
 8002290:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002294:	4651      	mov	r1, sl
 8002296:	018a      	lsls	r2, r1, #6
 8002298:	4651      	mov	r1, sl
 800229a:	ebb2 0801 	subs.w	r8, r2, r1
 800229e:	4659      	mov	r1, fp
 80022a0:	eb63 0901 	sbc.w	r9, r3, r1
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	f04f 0300 	mov.w	r3, #0
 80022ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022b8:	4690      	mov	r8, r2
 80022ba:	4699      	mov	r9, r3
 80022bc:	4623      	mov	r3, r4
 80022be:	eb18 0303 	adds.w	r3, r8, r3
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	462b      	mov	r3, r5
 80022c6:	eb49 0303 	adc.w	r3, r9, r3
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	f04f 0200 	mov.w	r2, #0
 80022d0:	f04f 0300 	mov.w	r3, #0
 80022d4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80022d8:	4629      	mov	r1, r5
 80022da:	024b      	lsls	r3, r1, #9
 80022dc:	4621      	mov	r1, r4
 80022de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022e2:	4621      	mov	r1, r4
 80022e4:	024a      	lsls	r2, r1, #9
 80022e6:	4610      	mov	r0, r2
 80022e8:	4619      	mov	r1, r3
 80022ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022ee:	2200      	movs	r2, #0
 80022f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80022f2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80022f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80022f8:	f7fd ffda 	bl	80002b0 <__aeabi_uldivmod>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4613      	mov	r3, r2
 8002302:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002306:	e065      	b.n	80023d4 <HAL_RCC_GetSysClockFreq+0x420>
 8002308:	40023800 	.word	0x40023800
 800230c:	00f42400 	.word	0x00f42400
 8002310:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002314:	4b3d      	ldr	r3, [pc, #244]	; (800240c <HAL_RCC_GetSysClockFreq+0x458>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	099b      	lsrs	r3, r3, #6
 800231a:	2200      	movs	r2, #0
 800231c:	4618      	mov	r0, r3
 800231e:	4611      	mov	r1, r2
 8002320:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002324:	653b      	str	r3, [r7, #80]	; 0x50
 8002326:	2300      	movs	r3, #0
 8002328:	657b      	str	r3, [r7, #84]	; 0x54
 800232a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800232e:	4642      	mov	r2, r8
 8002330:	464b      	mov	r3, r9
 8002332:	f04f 0000 	mov.w	r0, #0
 8002336:	f04f 0100 	mov.w	r1, #0
 800233a:	0159      	lsls	r1, r3, #5
 800233c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002340:	0150      	lsls	r0, r2, #5
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	4641      	mov	r1, r8
 8002348:	1a51      	subs	r1, r2, r1
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	4649      	mov	r1, r9
 800234e:	eb63 0301 	sbc.w	r3, r3, r1
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	f04f 0300 	mov.w	r3, #0
 800235c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002360:	4659      	mov	r1, fp
 8002362:	018b      	lsls	r3, r1, #6
 8002364:	4651      	mov	r1, sl
 8002366:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800236a:	4651      	mov	r1, sl
 800236c:	018a      	lsls	r2, r1, #6
 800236e:	4651      	mov	r1, sl
 8002370:	1a54      	subs	r4, r2, r1
 8002372:	4659      	mov	r1, fp
 8002374:	eb63 0501 	sbc.w	r5, r3, r1
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	f04f 0300 	mov.w	r3, #0
 8002380:	00eb      	lsls	r3, r5, #3
 8002382:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002386:	00e2      	lsls	r2, r4, #3
 8002388:	4614      	mov	r4, r2
 800238a:	461d      	mov	r5, r3
 800238c:	4643      	mov	r3, r8
 800238e:	18e3      	adds	r3, r4, r3
 8002390:	603b      	str	r3, [r7, #0]
 8002392:	464b      	mov	r3, r9
 8002394:	eb45 0303 	adc.w	r3, r5, r3
 8002398:	607b      	str	r3, [r7, #4]
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	f04f 0300 	mov.w	r3, #0
 80023a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023a6:	4629      	mov	r1, r5
 80023a8:	028b      	lsls	r3, r1, #10
 80023aa:	4621      	mov	r1, r4
 80023ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023b0:	4621      	mov	r1, r4
 80023b2:	028a      	lsls	r2, r1, #10
 80023b4:	4610      	mov	r0, r2
 80023b6:	4619      	mov	r1, r3
 80023b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023bc:	2200      	movs	r2, #0
 80023be:	64bb      	str	r3, [r7, #72]	; 0x48
 80023c0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80023c2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80023c6:	f7fd ff73 	bl	80002b0 <__aeabi_uldivmod>
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	4613      	mov	r3, r2
 80023d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80023d4:	4b0d      	ldr	r3, [pc, #52]	; (800240c <HAL_RCC_GetSysClockFreq+0x458>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	0f1b      	lsrs	r3, r3, #28
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80023e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80023e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80023ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80023f2:	e003      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <HAL_RCC_GetSysClockFreq+0x45c>)
 80023f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80023fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002400:	4618      	mov	r0, r3
 8002402:	37b8      	adds	r7, #184	; 0xb8
 8002404:	46bd      	mov	sp, r7
 8002406:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800240a:	bf00      	nop
 800240c:	40023800 	.word	0x40023800
 8002410:	00f42400 	.word	0x00f42400

08002414 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e28d      	b.n	8002942 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 8083 	beq.w	800253a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002434:	4b94      	ldr	r3, [pc, #592]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 030c 	and.w	r3, r3, #12
 800243c:	2b04      	cmp	r3, #4
 800243e:	d019      	beq.n	8002474 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002440:	4b91      	ldr	r3, [pc, #580]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002448:	2b08      	cmp	r3, #8
 800244a:	d106      	bne.n	800245a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800244c:	4b8e      	ldr	r3, [pc, #568]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002454:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002458:	d00c      	beq.n	8002474 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800245a:	4b8b      	ldr	r3, [pc, #556]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002462:	2b0c      	cmp	r3, #12
 8002464:	d112      	bne.n	800248c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002466:	4b88      	ldr	r3, [pc, #544]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002472:	d10b      	bne.n	800248c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002474:	4b84      	ldr	r3, [pc, #528]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d05b      	beq.n	8002538 <HAL_RCC_OscConfig+0x124>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d157      	bne.n	8002538 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e25a      	b.n	8002942 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002494:	d106      	bne.n	80024a4 <HAL_RCC_OscConfig+0x90>
 8002496:	4b7c      	ldr	r3, [pc, #496]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a7b      	ldr	r2, [pc, #492]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 800249c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	e01d      	b.n	80024e0 <HAL_RCC_OscConfig+0xcc>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024ac:	d10c      	bne.n	80024c8 <HAL_RCC_OscConfig+0xb4>
 80024ae:	4b76      	ldr	r3, [pc, #472]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a75      	ldr	r2, [pc, #468]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 80024b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	4b73      	ldr	r3, [pc, #460]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a72      	ldr	r2, [pc, #456]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 80024c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	e00b      	b.n	80024e0 <HAL_RCC_OscConfig+0xcc>
 80024c8:	4b6f      	ldr	r3, [pc, #444]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a6e      	ldr	r2, [pc, #440]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 80024ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	4b6c      	ldr	r3, [pc, #432]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a6b      	ldr	r2, [pc, #428]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 80024da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d013      	beq.n	8002510 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e8:	f7fe fd46 	bl	8000f78 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f0:	f7fe fd42 	bl	8000f78 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b64      	cmp	r3, #100	; 0x64
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e21f      	b.n	8002942 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002502:	4b61      	ldr	r3, [pc, #388]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCC_OscConfig+0xdc>
 800250e:	e014      	b.n	800253a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002510:	f7fe fd32 	bl	8000f78 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002518:	f7fe fd2e 	bl	8000f78 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b64      	cmp	r3, #100	; 0x64
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e20b      	b.n	8002942 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252a:	4b57      	ldr	r3, [pc, #348]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f0      	bne.n	8002518 <HAL_RCC_OscConfig+0x104>
 8002536:	e000      	b.n	800253a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d06f      	beq.n	8002626 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002546:	4b50      	ldr	r3, [pc, #320]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 030c 	and.w	r3, r3, #12
 800254e:	2b00      	cmp	r3, #0
 8002550:	d017      	beq.n	8002582 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002552:	4b4d      	ldr	r3, [pc, #308]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800255a:	2b08      	cmp	r3, #8
 800255c:	d105      	bne.n	800256a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800255e:	4b4a      	ldr	r3, [pc, #296]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00b      	beq.n	8002582 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800256a:	4b47      	ldr	r3, [pc, #284]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002572:	2b0c      	cmp	r3, #12
 8002574:	d11c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002576:	4b44      	ldr	r3, [pc, #272]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d116      	bne.n	80025b0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002582:	4b41      	ldr	r3, [pc, #260]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d005      	beq.n	800259a <HAL_RCC_OscConfig+0x186>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d001      	beq.n	800259a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e1d3      	b.n	8002942 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259a:	4b3b      	ldr	r3, [pc, #236]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4937      	ldr	r1, [pc, #220]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ae:	e03a      	b.n	8002626 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d020      	beq.n	80025fa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025b8:	4b34      	ldr	r3, [pc, #208]	; (800268c <HAL_RCC_OscConfig+0x278>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025be:	f7fe fcdb 	bl	8000f78 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025c6:	f7fe fcd7 	bl	8000f78 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e1b4      	b.n	8002942 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d8:	4b2b      	ldr	r3, [pc, #172]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f0      	beq.n	80025c6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e4:	4b28      	ldr	r3, [pc, #160]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4925      	ldr	r1, [pc, #148]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	600b      	str	r3, [r1, #0]
 80025f8:	e015      	b.n	8002626 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025fa:	4b24      	ldr	r3, [pc, #144]	; (800268c <HAL_RCC_OscConfig+0x278>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002600:	f7fe fcba 	bl	8000f78 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002608:	f7fe fcb6 	bl	8000f78 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e193      	b.n	8002942 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800261a:	4b1b      	ldr	r3, [pc, #108]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d036      	beq.n	80026a0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d016      	beq.n	8002668 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800263a:	4b15      	ldr	r3, [pc, #84]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 800263c:	2201      	movs	r2, #1
 800263e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002640:	f7fe fc9a 	bl	8000f78 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002648:	f7fe fc96 	bl	8000f78 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e173      	b.n	8002942 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800265a:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 800265c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0x234>
 8002666:	e01b      	b.n	80026a0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002668:	4b09      	ldr	r3, [pc, #36]	; (8002690 <HAL_RCC_OscConfig+0x27c>)
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266e:	f7fe fc83 	bl	8000f78 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002674:	e00e      	b.n	8002694 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002676:	f7fe fc7f 	bl	8000f78 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d907      	bls.n	8002694 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e15c      	b.n	8002942 <HAL_RCC_OscConfig+0x52e>
 8002688:	40023800 	.word	0x40023800
 800268c:	42470000 	.word	0x42470000
 8002690:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002694:	4b8a      	ldr	r3, [pc, #552]	; (80028c0 <HAL_RCC_OscConfig+0x4ac>)
 8002696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1ea      	bne.n	8002676 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 8097 	beq.w	80027dc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ae:	2300      	movs	r3, #0
 80026b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026b2:	4b83      	ldr	r3, [pc, #524]	; (80028c0 <HAL_RCC_OscConfig+0x4ac>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10f      	bne.n	80026de <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	4b7f      	ldr	r3, [pc, #508]	; (80028c0 <HAL_RCC_OscConfig+0x4ac>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	4a7e      	ldr	r2, [pc, #504]	; (80028c0 <HAL_RCC_OscConfig+0x4ac>)
 80026c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026cc:	6413      	str	r3, [r2, #64]	; 0x40
 80026ce:	4b7c      	ldr	r3, [pc, #496]	; (80028c0 <HAL_RCC_OscConfig+0x4ac>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026da:	2301      	movs	r3, #1
 80026dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026de:	4b79      	ldr	r3, [pc, #484]	; (80028c4 <HAL_RCC_OscConfig+0x4b0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d118      	bne.n	800271c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ea:	4b76      	ldr	r3, [pc, #472]	; (80028c4 <HAL_RCC_OscConfig+0x4b0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a75      	ldr	r2, [pc, #468]	; (80028c4 <HAL_RCC_OscConfig+0x4b0>)
 80026f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026f6:	f7fe fc3f 	bl	8000f78 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026fe:	f7fe fc3b 	bl	8000f78 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e118      	b.n	8002942 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002710:	4b6c      	ldr	r3, [pc, #432]	; (80028c4 <HAL_RCC_OscConfig+0x4b0>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0f0      	beq.n	80026fe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d106      	bne.n	8002732 <HAL_RCC_OscConfig+0x31e>
 8002724:	4b66      	ldr	r3, [pc, #408]	; (80028c0 <HAL_RCC_OscConfig+0x4ac>)
 8002726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002728:	4a65      	ldr	r2, [pc, #404]	; (80028c0 <HAL_RCC_OscConfig+0x4ac>)
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	6713      	str	r3, [r2, #112]	; 0x70
 8002730:	e01c      	b.n	800276c <HAL_RCC_OscConfig+0x358>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	2b05      	cmp	r3, #5
 8002738:	d10c      	bne.n	8002754 <HAL_RCC_OscConfig+0x340>
 800273a:	4b61      	ldr	r3, [pc, #388]	; (80028c0 <HAL_RCC_OscConfig+0x4ac>)
 800273c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273e:	4a60      	ldr	r2, [pc, #384]	; (80028c0 <HAL_RCC_OscConfig+0x4ac>)
 8002740:	f043 0304 	orr.w	r3, r3, #4
 8002744:	6713      	str	r3, [r2, #112]	; 0x70
 8002746:	4b5e      	ldr	r3, [pc, #376]	; (80028c0 <HAL_RCC_OscConfig+0x4ac>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274a:	4a5d      	ldr	r2, [pc, #372]	; (80028c0 <HAL_RCC_OscConfig+0x4ac>)
 800274c:	f043 0301 	orr.w	r3, r3, #1
 8002750:	6713      	str	r3, [r2, #112]	; 0x70
 8002752:	e00b      	b.n	800276c <HAL_RCC_OscConfig+0x358>
 8002754:	4b5a      	ldr	r3, [pc, #360]	; (80028c0 <HAL_RCC_OscConfig+0x4ac>)
 8002756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002758:	4a59      	ldr	r2, [pc, #356]	; (80028c0 <HAL_RCC_OscConfig+0x4ac>)
 800275a:	f023 0301 	bic.w	r3, r3, #1
 800275e:	6713      	str	r3, [r2, #112]	; 0x70
 8002760:	4b57      	ldr	r3, [pc, #348]	; (80028c0 <HAL_RCC_OscConfig+0x4ac>)
 8002762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002764:	4a56      	ldr	r2, [pc, #344]	; (80028c0 <HAL_RCC_OscConfig+0x4ac>)
 8002766:	f023 0304 	bic.w	r3, r3, #4
 800276a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d015      	beq.n	80027a0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002774:	f7fe fc00 	bl	8000f78 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277a:	e00a      	b.n	8002792 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800277c:	f7fe fbfc 	bl	8000f78 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f241 3288 	movw	r2, #5000	; 0x1388
 800278a:	4293      	cmp	r3, r2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e0d7      	b.n	8002942 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002792:	4b4b      	ldr	r3, [pc, #300]	; (80028c0 <HAL_RCC_OscConfig+0x4ac>)
 8002794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0ee      	beq.n	800277c <HAL_RCC_OscConfig+0x368>
 800279e:	e014      	b.n	80027ca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a0:	f7fe fbea 	bl	8000f78 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a6:	e00a      	b.n	80027be <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a8:	f7fe fbe6 	bl	8000f78 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e0c1      	b.n	8002942 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027be:	4b40      	ldr	r3, [pc, #256]	; (80028c0 <HAL_RCC_OscConfig+0x4ac>)
 80027c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1ee      	bne.n	80027a8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027ca:	7dfb      	ldrb	r3, [r7, #23]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d105      	bne.n	80027dc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d0:	4b3b      	ldr	r3, [pc, #236]	; (80028c0 <HAL_RCC_OscConfig+0x4ac>)
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	4a3a      	ldr	r2, [pc, #232]	; (80028c0 <HAL_RCC_OscConfig+0x4ac>)
 80027d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 80ad 	beq.w	8002940 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027e6:	4b36      	ldr	r3, [pc, #216]	; (80028c0 <HAL_RCC_OscConfig+0x4ac>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 030c 	and.w	r3, r3, #12
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d060      	beq.n	80028b4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d145      	bne.n	8002886 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fa:	4b33      	ldr	r3, [pc, #204]	; (80028c8 <HAL_RCC_OscConfig+0x4b4>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002800:	f7fe fbba 	bl	8000f78 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002808:	f7fe fbb6 	bl	8000f78 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e093      	b.n	8002942 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281a:	4b29      	ldr	r3, [pc, #164]	; (80028c0 <HAL_RCC_OscConfig+0x4ac>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69da      	ldr	r2, [r3, #28]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	019b      	lsls	r3, r3, #6
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283c:	085b      	lsrs	r3, r3, #1
 800283e:	3b01      	subs	r3, #1
 8002840:	041b      	lsls	r3, r3, #16
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002848:	061b      	lsls	r3, r3, #24
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002850:	071b      	lsls	r3, r3, #28
 8002852:	491b      	ldr	r1, [pc, #108]	; (80028c0 <HAL_RCC_OscConfig+0x4ac>)
 8002854:	4313      	orrs	r3, r2
 8002856:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002858:	4b1b      	ldr	r3, [pc, #108]	; (80028c8 <HAL_RCC_OscConfig+0x4b4>)
 800285a:	2201      	movs	r2, #1
 800285c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285e:	f7fe fb8b 	bl	8000f78 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002866:	f7fe fb87 	bl	8000f78 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e064      	b.n	8002942 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002878:	4b11      	ldr	r3, [pc, #68]	; (80028c0 <HAL_RCC_OscConfig+0x4ac>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0f0      	beq.n	8002866 <HAL_RCC_OscConfig+0x452>
 8002884:	e05c      	b.n	8002940 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002886:	4b10      	ldr	r3, [pc, #64]	; (80028c8 <HAL_RCC_OscConfig+0x4b4>)
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288c:	f7fe fb74 	bl	8000f78 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002894:	f7fe fb70 	bl	8000f78 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e04d      	b.n	8002942 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a6:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <HAL_RCC_OscConfig+0x4ac>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x480>
 80028b2:	e045      	b.n	8002940 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d107      	bne.n	80028cc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e040      	b.n	8002942 <HAL_RCC_OscConfig+0x52e>
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40007000 	.word	0x40007000
 80028c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028cc:	4b1f      	ldr	r3, [pc, #124]	; (800294c <HAL_RCC_OscConfig+0x538>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d030      	beq.n	800293c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d129      	bne.n	800293c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d122      	bne.n	800293c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028fc:	4013      	ands	r3, r2
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002902:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002904:	4293      	cmp	r3, r2
 8002906:	d119      	bne.n	800293c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002912:	085b      	lsrs	r3, r3, #1
 8002914:	3b01      	subs	r3, #1
 8002916:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002918:	429a      	cmp	r2, r3
 800291a:	d10f      	bne.n	800293c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002926:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002928:	429a      	cmp	r2, r3
 800292a:	d107      	bne.n	800293c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002938:	429a      	cmp	r2, r3
 800293a:	d001      	beq.n	8002940 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e000      	b.n	8002942 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40023800 	.word	0x40023800

08002950 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e03f      	b.n	80029e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7fe f8d6 	bl	8000b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2224      	movs	r2, #36	; 0x24
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002992:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 fe9b 	bl	80036d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	691a      	ldr	r2, [r3, #16]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695a      	ldr	r2, [r3, #20]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2220      	movs	r2, #32
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2220      	movs	r2, #32
 80029dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b08c      	sub	sp, #48	; 0x30
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	60f8      	str	r0, [r7, #12]
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	4613      	mov	r3, r2
 80029f6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b20      	cmp	r3, #32
 8002a02:	d152      	bne.n	8002aaa <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d002      	beq.n	8002a10 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8002a0a:	88fb      	ldrh	r3, [r7, #6]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e04b      	b.n	8002aac <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e044      	b.n	8002aac <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8002a30:	88fb      	ldrh	r3, [r7, #6]
 8002a32:	461a      	mov	r2, r3
 8002a34:	68b9      	ldr	r1, [r7, #8]
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 fbea 	bl	8003210 <UART_Start_Receive_DMA>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002a42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d12c      	bne.n	8002aa4 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d125      	bne.n	8002a9e <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a52:	2300      	movs	r3, #0
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	613b      	str	r3, [r7, #16]
 8002a66:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	330c      	adds	r3, #12
 8002a6e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	e853 3f00 	ldrex	r3, [r3]
 8002a76:	617b      	str	r3, [r7, #20]
   return(result);
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f043 0310 	orr.w	r3, r3, #16
 8002a7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	330c      	adds	r3, #12
 8002a86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a88:	627a      	str	r2, [r7, #36]	; 0x24
 8002a8a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8c:	6a39      	ldr	r1, [r7, #32]
 8002a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a90:	e841 2300 	strex	r3, r2, [r1]
 8002a94:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1e5      	bne.n	8002a68 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8002a9c:	e002      	b.n	8002aa4 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8002aa4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002aa8:	e000      	b.n	8002aac <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8002aaa:	2302      	movs	r3, #2
  }
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3730      	adds	r7, #48	; 0x30
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b0ba      	sub	sp, #232	; 0xe8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002af2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10f      	bne.n	8002b1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002afe:	f003 0320 	and.w	r3, r3, #32
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d009      	beq.n	8002b1a <HAL_UART_IRQHandler+0x66>
 8002b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b0a:	f003 0320 	and.w	r3, r3, #32
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 fd21 	bl	800355a <UART_Receive_IT>
      return;
 8002b18:	e256      	b.n	8002fc8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 80de 	beq.w	8002ce0 <HAL_UART_IRQHandler+0x22c>
 8002b24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d106      	bne.n	8002b3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b34:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 80d1 	beq.w	8002ce0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00b      	beq.n	8002b62 <HAL_UART_IRQHandler+0xae>
 8002b4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d005      	beq.n	8002b62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	f043 0201 	orr.w	r2, r3, #1
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b66:	f003 0304 	and.w	r3, r3, #4
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00b      	beq.n	8002b86 <HAL_UART_IRQHandler+0xd2>
 8002b6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d005      	beq.n	8002b86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f043 0202 	orr.w	r2, r3, #2
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00b      	beq.n	8002baa <HAL_UART_IRQHandler+0xf6>
 8002b92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d005      	beq.n	8002baa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f043 0204 	orr.w	r2, r3, #4
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d011      	beq.n	8002bda <HAL_UART_IRQHandler+0x126>
 8002bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bba:	f003 0320 	and.w	r3, r3, #32
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d105      	bne.n	8002bce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002bc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d005      	beq.n	8002bda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	f043 0208 	orr.w	r2, r3, #8
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 81ed 	beq.w	8002fbe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002be8:	f003 0320 	and.w	r3, r3, #32
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <HAL_UART_IRQHandler+0x14e>
 8002bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bf4:	f003 0320 	and.w	r3, r3, #32
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d002      	beq.n	8002c02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 fcac 	bl	800355a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0c:	2b40      	cmp	r3, #64	; 0x40
 8002c0e:	bf0c      	ite	eq
 8002c10:	2301      	moveq	r3, #1
 8002c12:	2300      	movne	r3, #0
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d103      	bne.n	8002c2e <HAL_UART_IRQHandler+0x17a>
 8002c26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d04f      	beq.n	8002cce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 fbb4 	bl	800339c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3e:	2b40      	cmp	r3, #64	; 0x40
 8002c40:	d141      	bne.n	8002cc6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	3314      	adds	r3, #20
 8002c48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c50:	e853 3f00 	ldrex	r3, [r3]
 8002c54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	3314      	adds	r3, #20
 8002c6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c7e:	e841 2300 	strex	r3, r2, [r1]
 8002c82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1d9      	bne.n	8002c42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d013      	beq.n	8002cbe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9a:	4a7d      	ldr	r2, [pc, #500]	; (8002e90 <HAL_UART_IRQHandler+0x3dc>)
 8002c9c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fe fbfc 	bl	80014a0 <HAL_DMA_Abort_IT>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d016      	beq.n	8002cdc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cb8:	4610      	mov	r0, r2
 8002cba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cbc:	e00e      	b.n	8002cdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f9a4 	bl	800300c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc4:	e00a      	b.n	8002cdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f9a0 	bl	800300c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ccc:	e006      	b.n	8002cdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f99c 	bl	800300c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002cda:	e170      	b.n	8002fbe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cdc:	bf00      	nop
    return;
 8002cde:	e16e      	b.n	8002fbe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	f040 814a 	bne.w	8002f7e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cee:	f003 0310 	and.w	r3, r3, #16
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 8143 	beq.w	8002f7e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 813c 	beq.w	8002f7e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d06:	2300      	movs	r3, #0
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d26:	2b40      	cmp	r3, #64	; 0x40
 8002d28:	f040 80b4 	bne.w	8002e94 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 8140 	beq.w	8002fc2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	f080 8139 	bcs.w	8002fc2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d56:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d62:	f000 8088 	beq.w	8002e76 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	330c      	adds	r3, #12
 8002d6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d74:	e853 3f00 	ldrex	r3, [r3]
 8002d78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	330c      	adds	r3, #12
 8002d8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002d92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002da2:	e841 2300 	strex	r3, r2, [r1]
 8002da6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002daa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1d9      	bne.n	8002d66 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	3314      	adds	r3, #20
 8002db8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dbc:	e853 3f00 	ldrex	r3, [r3]
 8002dc0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002dc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dc4:	f023 0301 	bic.w	r3, r3, #1
 8002dc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	3314      	adds	r3, #20
 8002dd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002dd6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002dda:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ddc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002dde:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002de2:	e841 2300 	strex	r3, r2, [r1]
 8002de6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002de8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1e1      	bne.n	8002db2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	3314      	adds	r3, #20
 8002df4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002df8:	e853 3f00 	ldrex	r3, [r3]
 8002dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002dfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3314      	adds	r3, #20
 8002e0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e1a:	e841 2300 	strex	r3, r2, [r1]
 8002e1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1e3      	bne.n	8002dee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	330c      	adds	r3, #12
 8002e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e3e:	e853 3f00 	ldrex	r3, [r3]
 8002e42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e46:	f023 0310 	bic.w	r3, r3, #16
 8002e4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	330c      	adds	r3, #12
 8002e54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002e58:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e5a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e60:	e841 2300 	strex	r3, r2, [r1]
 8002e64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1e3      	bne.n	8002e34 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fe faa5 	bl	80013c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	4619      	mov	r1, r3
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7fd fcaa 	bl	80007e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e8c:	e099      	b.n	8002fc2 <HAL_UART_IRQHandler+0x50e>
 8002e8e:	bf00      	nop
 8002e90:	08003463 	.word	0x08003463
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 808b 	beq.w	8002fc6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002eb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 8086 	beq.w	8002fc6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	330c      	adds	r3, #12
 8002ec0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec4:	e853 3f00 	ldrex	r3, [r3]
 8002ec8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ecc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ed0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	330c      	adds	r3, #12
 8002eda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002ede:	647a      	str	r2, [r7, #68]	; 0x44
 8002ee0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ee4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ee6:	e841 2300 	strex	r3, r2, [r1]
 8002eea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1e3      	bne.n	8002eba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	3314      	adds	r3, #20
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	e853 3f00 	ldrex	r3, [r3]
 8002f00:	623b      	str	r3, [r7, #32]
   return(result);
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	f023 0301 	bic.w	r3, r3, #1
 8002f08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	3314      	adds	r3, #20
 8002f12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f16:	633a      	str	r2, [r7, #48]	; 0x30
 8002f18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f1e:	e841 2300 	strex	r3, r2, [r1]
 8002f22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1e3      	bne.n	8002ef2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	330c      	adds	r3, #12
 8002f3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	e853 3f00 	ldrex	r3, [r3]
 8002f46:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f023 0310 	bic.w	r3, r3, #16
 8002f4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	330c      	adds	r3, #12
 8002f58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002f5c:	61fa      	str	r2, [r7, #28]
 8002f5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f60:	69b9      	ldr	r1, [r7, #24]
 8002f62:	69fa      	ldr	r2, [r7, #28]
 8002f64:	e841 2300 	strex	r3, r2, [r1]
 8002f68:	617b      	str	r3, [r7, #20]
   return(result);
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1e3      	bne.n	8002f38 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f74:	4619      	mov	r1, r3
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7fd fc32 	bl	80007e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f7c:	e023      	b.n	8002fc6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d009      	beq.n	8002f9e <HAL_UART_IRQHandler+0x4ea>
 8002f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fa77 	bl	800348a <UART_Transmit_IT>
    return;
 8002f9c:	e014      	b.n	8002fc8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00e      	beq.n	8002fc8 <HAL_UART_IRQHandler+0x514>
 8002faa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d008      	beq.n	8002fc8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fab7 	bl	800352a <UART_EndTransmit_IT>
    return;
 8002fbc:	e004      	b.n	8002fc8 <HAL_UART_IRQHandler+0x514>
    return;
 8002fbe:	bf00      	nop
 8002fc0:	e002      	b.n	8002fc8 <HAL_UART_IRQHandler+0x514>
      return;
 8002fc2:	bf00      	nop
 8002fc4:	e000      	b.n	8002fc8 <HAL_UART_IRQHandler+0x514>
      return;
 8002fc6:	bf00      	nop
  }
}
 8002fc8:	37e8      	adds	r7, #232	; 0xe8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop

08002fd0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b09c      	sub	sp, #112	; 0x70
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003038:	2b00      	cmp	r3, #0
 800303a:	d172      	bne.n	8003122 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800303c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800303e:	2200      	movs	r2, #0
 8003040:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	330c      	adds	r3, #12
 8003048:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800304a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800304c:	e853 3f00 	ldrex	r3, [r3]
 8003050:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003058:	66bb      	str	r3, [r7, #104]	; 0x68
 800305a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	330c      	adds	r3, #12
 8003060:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003062:	65ba      	str	r2, [r7, #88]	; 0x58
 8003064:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003066:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003068:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800306a:	e841 2300 	strex	r3, r2, [r1]
 800306e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1e5      	bne.n	8003042 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	3314      	adds	r3, #20
 800307c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003080:	e853 3f00 	ldrex	r3, [r3]
 8003084:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003088:	f023 0301 	bic.w	r3, r3, #1
 800308c:	667b      	str	r3, [r7, #100]	; 0x64
 800308e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	3314      	adds	r3, #20
 8003094:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003096:	647a      	str	r2, [r7, #68]	; 0x44
 8003098:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800309c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800309e:	e841 2300 	strex	r3, r2, [r1]
 80030a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80030a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1e5      	bne.n	8003076 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	3314      	adds	r3, #20
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	e853 3f00 	ldrex	r3, [r3]
 80030b8:	623b      	str	r3, [r7, #32]
   return(result);
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030c0:	663b      	str	r3, [r7, #96]	; 0x60
 80030c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	3314      	adds	r3, #20
 80030c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80030ca:	633a      	str	r2, [r7, #48]	; 0x30
 80030cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030d2:	e841 2300 	strex	r3, r2, [r1]
 80030d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80030d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1e5      	bne.n	80030aa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80030de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e0:	2220      	movs	r2, #32
 80030e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d119      	bne.n	8003122 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	330c      	adds	r3, #12
 80030f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	e853 3f00 	ldrex	r3, [r3]
 80030fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f023 0310 	bic.w	r3, r3, #16
 8003104:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	330c      	adds	r3, #12
 800310c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800310e:	61fa      	str	r2, [r7, #28]
 8003110:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003112:	69b9      	ldr	r1, [r7, #24]
 8003114:	69fa      	ldr	r2, [r7, #28]
 8003116:	e841 2300 	strex	r3, r2, [r1]
 800311a:	617b      	str	r3, [r7, #20]
   return(result);
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1e5      	bne.n	80030ee <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	2b01      	cmp	r3, #1
 8003128:	d106      	bne.n	8003138 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800312a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800312c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800312e:	4619      	mov	r1, r3
 8003130:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003132:	f7fd fb55 	bl	80007e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003136:	e002      	b.n	800313e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003138:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800313a:	f7ff ff53 	bl	8002fe4 <HAL_UART_RxCpltCallback>
}
 800313e:	bf00      	nop
 8003140:	3770      	adds	r7, #112	; 0x70
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b084      	sub	sp, #16
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003152:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003158:	2b01      	cmp	r3, #1
 800315a:	d108      	bne.n	800316e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003160:	085b      	lsrs	r3, r3, #1
 8003162:	b29b      	uxth	r3, r3
 8003164:	4619      	mov	r1, r3
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f7fd fb3a 	bl	80007e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800316c:	e002      	b.n	8003174 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f7ff ff42 	bl	8002ff8 <HAL_UART_RxHalfCpltCallback>
}
 8003174:	bf00      	nop
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003184:	2300      	movs	r3, #0
 8003186:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003198:	2b80      	cmp	r3, #128	; 0x80
 800319a:	bf0c      	ite	eq
 800319c:	2301      	moveq	r3, #1
 800319e:	2300      	movne	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b21      	cmp	r3, #33	; 0x21
 80031ae:	d108      	bne.n	80031c2 <UART_DMAError+0x46>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d005      	beq.n	80031c2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2200      	movs	r2, #0
 80031ba:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80031bc:	68b8      	ldr	r0, [r7, #8]
 80031be:	f000 f8c5 	bl	800334c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031cc:	2b40      	cmp	r3, #64	; 0x40
 80031ce:	bf0c      	ite	eq
 80031d0:	2301      	moveq	r3, #1
 80031d2:	2300      	movne	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b22      	cmp	r3, #34	; 0x22
 80031e2:	d108      	bne.n	80031f6 <UART_DMAError+0x7a>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d005      	beq.n	80031f6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2200      	movs	r2, #0
 80031ee:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80031f0:	68b8      	ldr	r0, [r7, #8]
 80031f2:	f000 f8d3 	bl	800339c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f043 0210 	orr.w	r2, r3, #16
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003202:	68b8      	ldr	r0, [r7, #8]
 8003204:	f7ff ff02 	bl	800300c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003208:	bf00      	nop
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b098      	sub	sp, #96	; 0x60
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	4613      	mov	r3, r2
 800321c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	88fa      	ldrh	r2, [r7, #6]
 8003228:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2222      	movs	r2, #34	; 0x22
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323c:	4a40      	ldr	r2, [pc, #256]	; (8003340 <UART_Start_Receive_DMA+0x130>)
 800323e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003244:	4a3f      	ldr	r2, [pc, #252]	; (8003344 <UART_Start_Receive_DMA+0x134>)
 8003246:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324c:	4a3e      	ldr	r2, [pc, #248]	; (8003348 <UART_Start_Receive_DMA+0x138>)
 800324e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003254:	2200      	movs	r2, #0
 8003256:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003258:	f107 0308 	add.w	r3, r7, #8
 800325c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	3304      	adds	r3, #4
 8003268:	4619      	mov	r1, r3
 800326a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	88fb      	ldrh	r3, [r7, #6]
 8003270:	f7fe f84e 	bl	8001310 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003274:	2300      	movs	r3, #0
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	613b      	str	r3, [r7, #16]
 8003288:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d019      	beq.n	80032ce <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	330c      	adds	r3, #12
 80032a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032a4:	e853 3f00 	ldrex	r3, [r3]
 80032a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80032aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	330c      	adds	r3, #12
 80032b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032ba:	64fa      	str	r2, [r7, #76]	; 0x4c
 80032bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80032c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032c2:	e841 2300 	strex	r3, r2, [r1]
 80032c6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80032c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1e5      	bne.n	800329a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	3314      	adds	r3, #20
 80032d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d8:	e853 3f00 	ldrex	r3, [r3]
 80032dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80032de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e0:	f043 0301 	orr.w	r3, r3, #1
 80032e4:	657b      	str	r3, [r7, #84]	; 0x54
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	3314      	adds	r3, #20
 80032ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80032ee:	63ba      	str	r2, [r7, #56]	; 0x38
 80032f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80032f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032f6:	e841 2300 	strex	r3, r2, [r1]
 80032fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80032fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1e5      	bne.n	80032ce <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	3314      	adds	r3, #20
 8003308:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	e853 3f00 	ldrex	r3, [r3]
 8003310:	617b      	str	r3, [r7, #20]
   return(result);
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003318:	653b      	str	r3, [r7, #80]	; 0x50
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	3314      	adds	r3, #20
 8003320:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003322:	627a      	str	r2, [r7, #36]	; 0x24
 8003324:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003326:	6a39      	ldr	r1, [r7, #32]
 8003328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800332a:	e841 2300 	strex	r3, r2, [r1]
 800332e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1e5      	bne.n	8003302 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3760      	adds	r7, #96	; 0x60
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	08003021 	.word	0x08003021
 8003344:	08003147 	.word	0x08003147
 8003348:	0800317d 	.word	0x0800317d

0800334c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800334c:	b480      	push	{r7}
 800334e:	b089      	sub	sp, #36	; 0x24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	330c      	adds	r3, #12
 800335a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	e853 3f00 	ldrex	r3, [r3]
 8003362:	60bb      	str	r3, [r7, #8]
   return(result);
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800336a:	61fb      	str	r3, [r7, #28]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	330c      	adds	r3, #12
 8003372:	69fa      	ldr	r2, [r7, #28]
 8003374:	61ba      	str	r2, [r7, #24]
 8003376:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003378:	6979      	ldr	r1, [r7, #20]
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	e841 2300 	strex	r3, r2, [r1]
 8003380:	613b      	str	r3, [r7, #16]
   return(result);
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1e5      	bne.n	8003354 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003390:	bf00      	nop
 8003392:	3724      	adds	r7, #36	; 0x24
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800339c:	b480      	push	{r7}
 800339e:	b095      	sub	sp, #84	; 0x54
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	330c      	adds	r3, #12
 80033aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ae:	e853 3f00 	ldrex	r3, [r3]
 80033b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80033b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	330c      	adds	r3, #12
 80033c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033c4:	643a      	str	r2, [r7, #64]	; 0x40
 80033c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80033ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80033cc:	e841 2300 	strex	r3, r2, [r1]
 80033d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80033d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1e5      	bne.n	80033a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	3314      	adds	r3, #20
 80033de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	e853 3f00 	ldrex	r3, [r3]
 80033e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	f023 0301 	bic.w	r3, r3, #1
 80033ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	3314      	adds	r3, #20
 80033f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003400:	e841 2300 	strex	r3, r2, [r1]
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1e5      	bne.n	80033d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	2b01      	cmp	r3, #1
 8003412:	d119      	bne.n	8003448 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	330c      	adds	r3, #12
 800341a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	e853 3f00 	ldrex	r3, [r3]
 8003422:	60bb      	str	r3, [r7, #8]
   return(result);
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f023 0310 	bic.w	r3, r3, #16
 800342a:	647b      	str	r3, [r7, #68]	; 0x44
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	330c      	adds	r3, #12
 8003432:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003434:	61ba      	str	r2, [r7, #24]
 8003436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003438:	6979      	ldr	r1, [r7, #20]
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	e841 2300 	strex	r3, r2, [r1]
 8003440:	613b      	str	r3, [r7, #16]
   return(result);
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1e5      	bne.n	8003414 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003456:	bf00      	nop
 8003458:	3754      	adds	r7, #84	; 0x54
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b084      	sub	sp, #16
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f7ff fdc5 	bl	800300c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003482:	bf00      	nop
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800348a:	b480      	push	{r7}
 800348c:	b085      	sub	sp, #20
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b21      	cmp	r3, #33	; 0x21
 800349c:	d13e      	bne.n	800351c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a6:	d114      	bne.n	80034d2 <UART_Transmit_IT+0x48>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d110      	bne.n	80034d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	461a      	mov	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	1c9a      	adds	r2, r3, #2
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	621a      	str	r2, [r3, #32]
 80034d0:	e008      	b.n	80034e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	1c59      	adds	r1, r3, #1
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6211      	str	r1, [r2, #32]
 80034dc:	781a      	ldrb	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	3b01      	subs	r3, #1
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	4619      	mov	r1, r3
 80034f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10f      	bne.n	8003518 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003506:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003516:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003518:	2300      	movs	r3, #0
 800351a:	e000      	b.n	800351e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800351c:	2302      	movs	r3, #2
  }
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b082      	sub	sp, #8
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68da      	ldr	r2, [r3, #12]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003540:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2220      	movs	r2, #32
 8003546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff fd40 	bl	8002fd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b08c      	sub	sp, #48	; 0x30
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b22      	cmp	r3, #34	; 0x22
 800356c:	f040 80ab 	bne.w	80036c6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003578:	d117      	bne.n	80035aa <UART_Receive_IT+0x50>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d113      	bne.n	80035aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003582:	2300      	movs	r3, #0
 8003584:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	b29b      	uxth	r3, r3
 8003594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003598:	b29a      	uxth	r2, r3
 800359a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a2:	1c9a      	adds	r2, r3, #2
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	629a      	str	r2, [r3, #40]	; 0x28
 80035a8:	e026      	b.n	80035f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035bc:	d007      	beq.n	80035ce <UART_Receive_IT+0x74>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10a      	bne.n	80035dc <UART_Receive_IT+0x82>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d106      	bne.n	80035dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d8:	701a      	strb	r2, [r3, #0]
 80035da:	e008      	b.n	80035ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f2:	1c5a      	adds	r2, r3, #1
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	3b01      	subs	r3, #1
 8003600:	b29b      	uxth	r3, r3
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	4619      	mov	r1, r3
 8003606:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003608:	2b00      	cmp	r3, #0
 800360a:	d15a      	bne.n	80036c2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0220 	bic.w	r2, r2, #32
 800361a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800362a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695a      	ldr	r2, [r3, #20]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 0201 	bic.w	r2, r2, #1
 800363a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003648:	2b01      	cmp	r3, #1
 800364a:	d135      	bne.n	80036b8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	330c      	adds	r3, #12
 8003658:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	e853 3f00 	ldrex	r3, [r3]
 8003660:	613b      	str	r3, [r7, #16]
   return(result);
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f023 0310 	bic.w	r3, r3, #16
 8003668:	627b      	str	r3, [r7, #36]	; 0x24
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	330c      	adds	r3, #12
 8003670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003672:	623a      	str	r2, [r7, #32]
 8003674:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003676:	69f9      	ldr	r1, [r7, #28]
 8003678:	6a3a      	ldr	r2, [r7, #32]
 800367a:	e841 2300 	strex	r3, r2, [r1]
 800367e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1e5      	bne.n	8003652 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0310 	and.w	r3, r3, #16
 8003690:	2b10      	cmp	r3, #16
 8003692:	d10a      	bne.n	80036aa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003694:	2300      	movs	r3, #0
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80036ae:	4619      	mov	r1, r3
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7fd f895 	bl	80007e0 <HAL_UARTEx_RxEventCallback>
 80036b6:	e002      	b.n	80036be <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff fc93 	bl	8002fe4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80036be:	2300      	movs	r3, #0
 80036c0:	e002      	b.n	80036c8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80036c2:	2300      	movs	r3, #0
 80036c4:	e000      	b.n	80036c8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80036c6:	2302      	movs	r3, #2
  }
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3730      	adds	r7, #48	; 0x30
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036d4:	b0c0      	sub	sp, #256	; 0x100
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80036e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ec:	68d9      	ldr	r1, [r3, #12]
 80036ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	ea40 0301 	orr.w	r3, r0, r1
 80036f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	431a      	orrs	r2, r3
 8003708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	431a      	orrs	r2, r3
 8003710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	4313      	orrs	r3, r2
 8003718:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800371c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003728:	f021 010c 	bic.w	r1, r1, #12
 800372c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003736:	430b      	orrs	r3, r1
 8003738:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800373a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800374a:	6999      	ldr	r1, [r3, #24]
 800374c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	ea40 0301 	orr.w	r3, r0, r1
 8003756:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	4b8f      	ldr	r3, [pc, #572]	; (800399c <UART_SetConfig+0x2cc>)
 8003760:	429a      	cmp	r2, r3
 8003762:	d005      	beq.n	8003770 <UART_SetConfig+0xa0>
 8003764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	4b8d      	ldr	r3, [pc, #564]	; (80039a0 <UART_SetConfig+0x2d0>)
 800376c:	429a      	cmp	r2, r3
 800376e:	d104      	bne.n	800377a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003770:	f7fe fc0c 	bl	8001f8c <HAL_RCC_GetPCLK2Freq>
 8003774:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003778:	e003      	b.n	8003782 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800377a:	f7fe fbf3 	bl	8001f64 <HAL_RCC_GetPCLK1Freq>
 800377e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800378c:	f040 810c 	bne.w	80039a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003790:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003794:	2200      	movs	r2, #0
 8003796:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800379a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800379e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80037a2:	4622      	mov	r2, r4
 80037a4:	462b      	mov	r3, r5
 80037a6:	1891      	adds	r1, r2, r2
 80037a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80037aa:	415b      	adcs	r3, r3
 80037ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80037b2:	4621      	mov	r1, r4
 80037b4:	eb12 0801 	adds.w	r8, r2, r1
 80037b8:	4629      	mov	r1, r5
 80037ba:	eb43 0901 	adc.w	r9, r3, r1
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	f04f 0300 	mov.w	r3, #0
 80037c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037d2:	4690      	mov	r8, r2
 80037d4:	4699      	mov	r9, r3
 80037d6:	4623      	mov	r3, r4
 80037d8:	eb18 0303 	adds.w	r3, r8, r3
 80037dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80037e0:	462b      	mov	r3, r5
 80037e2:	eb49 0303 	adc.w	r3, r9, r3
 80037e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80037ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80037f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80037fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80037fe:	460b      	mov	r3, r1
 8003800:	18db      	adds	r3, r3, r3
 8003802:	653b      	str	r3, [r7, #80]	; 0x50
 8003804:	4613      	mov	r3, r2
 8003806:	eb42 0303 	adc.w	r3, r2, r3
 800380a:	657b      	str	r3, [r7, #84]	; 0x54
 800380c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003810:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003814:	f7fc fd4c 	bl	80002b0 <__aeabi_uldivmod>
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	4b61      	ldr	r3, [pc, #388]	; (80039a4 <UART_SetConfig+0x2d4>)
 800381e:	fba3 2302 	umull	r2, r3, r3, r2
 8003822:	095b      	lsrs	r3, r3, #5
 8003824:	011c      	lsls	r4, r3, #4
 8003826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800382a:	2200      	movs	r2, #0
 800382c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003830:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003834:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003838:	4642      	mov	r2, r8
 800383a:	464b      	mov	r3, r9
 800383c:	1891      	adds	r1, r2, r2
 800383e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003840:	415b      	adcs	r3, r3
 8003842:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003844:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003848:	4641      	mov	r1, r8
 800384a:	eb12 0a01 	adds.w	sl, r2, r1
 800384e:	4649      	mov	r1, r9
 8003850:	eb43 0b01 	adc.w	fp, r3, r1
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	f04f 0300 	mov.w	r3, #0
 800385c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003860:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003864:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003868:	4692      	mov	sl, r2
 800386a:	469b      	mov	fp, r3
 800386c:	4643      	mov	r3, r8
 800386e:	eb1a 0303 	adds.w	r3, sl, r3
 8003872:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003876:	464b      	mov	r3, r9
 8003878:	eb4b 0303 	adc.w	r3, fp, r3
 800387c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800388c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003890:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003894:	460b      	mov	r3, r1
 8003896:	18db      	adds	r3, r3, r3
 8003898:	643b      	str	r3, [r7, #64]	; 0x40
 800389a:	4613      	mov	r3, r2
 800389c:	eb42 0303 	adc.w	r3, r2, r3
 80038a0:	647b      	str	r3, [r7, #68]	; 0x44
 80038a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80038a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80038aa:	f7fc fd01 	bl	80002b0 <__aeabi_uldivmod>
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	4611      	mov	r1, r2
 80038b4:	4b3b      	ldr	r3, [pc, #236]	; (80039a4 <UART_SetConfig+0x2d4>)
 80038b6:	fba3 2301 	umull	r2, r3, r3, r1
 80038ba:	095b      	lsrs	r3, r3, #5
 80038bc:	2264      	movs	r2, #100	; 0x64
 80038be:	fb02 f303 	mul.w	r3, r2, r3
 80038c2:	1acb      	subs	r3, r1, r3
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80038ca:	4b36      	ldr	r3, [pc, #216]	; (80039a4 <UART_SetConfig+0x2d4>)
 80038cc:	fba3 2302 	umull	r2, r3, r3, r2
 80038d0:	095b      	lsrs	r3, r3, #5
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038d8:	441c      	add	r4, r3
 80038da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038de:	2200      	movs	r2, #0
 80038e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80038e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80038ec:	4642      	mov	r2, r8
 80038ee:	464b      	mov	r3, r9
 80038f0:	1891      	adds	r1, r2, r2
 80038f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80038f4:	415b      	adcs	r3, r3
 80038f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038fc:	4641      	mov	r1, r8
 80038fe:	1851      	adds	r1, r2, r1
 8003900:	6339      	str	r1, [r7, #48]	; 0x30
 8003902:	4649      	mov	r1, r9
 8003904:	414b      	adcs	r3, r1
 8003906:	637b      	str	r3, [r7, #52]	; 0x34
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	f04f 0300 	mov.w	r3, #0
 8003910:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003914:	4659      	mov	r1, fp
 8003916:	00cb      	lsls	r3, r1, #3
 8003918:	4651      	mov	r1, sl
 800391a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800391e:	4651      	mov	r1, sl
 8003920:	00ca      	lsls	r2, r1, #3
 8003922:	4610      	mov	r0, r2
 8003924:	4619      	mov	r1, r3
 8003926:	4603      	mov	r3, r0
 8003928:	4642      	mov	r2, r8
 800392a:	189b      	adds	r3, r3, r2
 800392c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003930:	464b      	mov	r3, r9
 8003932:	460a      	mov	r2, r1
 8003934:	eb42 0303 	adc.w	r3, r2, r3
 8003938:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800393c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003948:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800394c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003950:	460b      	mov	r3, r1
 8003952:	18db      	adds	r3, r3, r3
 8003954:	62bb      	str	r3, [r7, #40]	; 0x28
 8003956:	4613      	mov	r3, r2
 8003958:	eb42 0303 	adc.w	r3, r2, r3
 800395c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800395e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003962:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003966:	f7fc fca3 	bl	80002b0 <__aeabi_uldivmod>
 800396a:	4602      	mov	r2, r0
 800396c:	460b      	mov	r3, r1
 800396e:	4b0d      	ldr	r3, [pc, #52]	; (80039a4 <UART_SetConfig+0x2d4>)
 8003970:	fba3 1302 	umull	r1, r3, r3, r2
 8003974:	095b      	lsrs	r3, r3, #5
 8003976:	2164      	movs	r1, #100	; 0x64
 8003978:	fb01 f303 	mul.w	r3, r1, r3
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	3332      	adds	r3, #50	; 0x32
 8003982:	4a08      	ldr	r2, [pc, #32]	; (80039a4 <UART_SetConfig+0x2d4>)
 8003984:	fba2 2303 	umull	r2, r3, r2, r3
 8003988:	095b      	lsrs	r3, r3, #5
 800398a:	f003 0207 	and.w	r2, r3, #7
 800398e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4422      	add	r2, r4
 8003996:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003998:	e105      	b.n	8003ba6 <UART_SetConfig+0x4d6>
 800399a:	bf00      	nop
 800399c:	40011000 	.word	0x40011000
 80039a0:	40011400 	.word	0x40011400
 80039a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039ac:	2200      	movs	r2, #0
 80039ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80039b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80039b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80039ba:	4642      	mov	r2, r8
 80039bc:	464b      	mov	r3, r9
 80039be:	1891      	adds	r1, r2, r2
 80039c0:	6239      	str	r1, [r7, #32]
 80039c2:	415b      	adcs	r3, r3
 80039c4:	627b      	str	r3, [r7, #36]	; 0x24
 80039c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039ca:	4641      	mov	r1, r8
 80039cc:	1854      	adds	r4, r2, r1
 80039ce:	4649      	mov	r1, r9
 80039d0:	eb43 0501 	adc.w	r5, r3, r1
 80039d4:	f04f 0200 	mov.w	r2, #0
 80039d8:	f04f 0300 	mov.w	r3, #0
 80039dc:	00eb      	lsls	r3, r5, #3
 80039de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039e2:	00e2      	lsls	r2, r4, #3
 80039e4:	4614      	mov	r4, r2
 80039e6:	461d      	mov	r5, r3
 80039e8:	4643      	mov	r3, r8
 80039ea:	18e3      	adds	r3, r4, r3
 80039ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039f0:	464b      	mov	r3, r9
 80039f2:	eb45 0303 	adc.w	r3, r5, r3
 80039f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	f04f 0300 	mov.w	r3, #0
 8003a12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a16:	4629      	mov	r1, r5
 8003a18:	008b      	lsls	r3, r1, #2
 8003a1a:	4621      	mov	r1, r4
 8003a1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a20:	4621      	mov	r1, r4
 8003a22:	008a      	lsls	r2, r1, #2
 8003a24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a28:	f7fc fc42 	bl	80002b0 <__aeabi_uldivmod>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4b60      	ldr	r3, [pc, #384]	; (8003bb4 <UART_SetConfig+0x4e4>)
 8003a32:	fba3 2302 	umull	r2, r3, r3, r2
 8003a36:	095b      	lsrs	r3, r3, #5
 8003a38:	011c      	lsls	r4, r3, #4
 8003a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a4c:	4642      	mov	r2, r8
 8003a4e:	464b      	mov	r3, r9
 8003a50:	1891      	adds	r1, r2, r2
 8003a52:	61b9      	str	r1, [r7, #24]
 8003a54:	415b      	adcs	r3, r3
 8003a56:	61fb      	str	r3, [r7, #28]
 8003a58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a5c:	4641      	mov	r1, r8
 8003a5e:	1851      	adds	r1, r2, r1
 8003a60:	6139      	str	r1, [r7, #16]
 8003a62:	4649      	mov	r1, r9
 8003a64:	414b      	adcs	r3, r1
 8003a66:	617b      	str	r3, [r7, #20]
 8003a68:	f04f 0200 	mov.w	r2, #0
 8003a6c:	f04f 0300 	mov.w	r3, #0
 8003a70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a74:	4659      	mov	r1, fp
 8003a76:	00cb      	lsls	r3, r1, #3
 8003a78:	4651      	mov	r1, sl
 8003a7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a7e:	4651      	mov	r1, sl
 8003a80:	00ca      	lsls	r2, r1, #3
 8003a82:	4610      	mov	r0, r2
 8003a84:	4619      	mov	r1, r3
 8003a86:	4603      	mov	r3, r0
 8003a88:	4642      	mov	r2, r8
 8003a8a:	189b      	adds	r3, r3, r2
 8003a8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a90:	464b      	mov	r3, r9
 8003a92:	460a      	mov	r2, r1
 8003a94:	eb42 0303 	adc.w	r3, r2, r3
 8003a98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003aa6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003aa8:	f04f 0200 	mov.w	r2, #0
 8003aac:	f04f 0300 	mov.w	r3, #0
 8003ab0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ab4:	4649      	mov	r1, r9
 8003ab6:	008b      	lsls	r3, r1, #2
 8003ab8:	4641      	mov	r1, r8
 8003aba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003abe:	4641      	mov	r1, r8
 8003ac0:	008a      	lsls	r2, r1, #2
 8003ac2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003ac6:	f7fc fbf3 	bl	80002b0 <__aeabi_uldivmod>
 8003aca:	4602      	mov	r2, r0
 8003acc:	460b      	mov	r3, r1
 8003ace:	4b39      	ldr	r3, [pc, #228]	; (8003bb4 <UART_SetConfig+0x4e4>)
 8003ad0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ad4:	095b      	lsrs	r3, r3, #5
 8003ad6:	2164      	movs	r1, #100	; 0x64
 8003ad8:	fb01 f303 	mul.w	r3, r1, r3
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	011b      	lsls	r3, r3, #4
 8003ae0:	3332      	adds	r3, #50	; 0x32
 8003ae2:	4a34      	ldr	r2, [pc, #208]	; (8003bb4 <UART_SetConfig+0x4e4>)
 8003ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae8:	095b      	lsrs	r3, r3, #5
 8003aea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aee:	441c      	add	r4, r3
 8003af0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003af4:	2200      	movs	r2, #0
 8003af6:	673b      	str	r3, [r7, #112]	; 0x70
 8003af8:	677a      	str	r2, [r7, #116]	; 0x74
 8003afa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003afe:	4642      	mov	r2, r8
 8003b00:	464b      	mov	r3, r9
 8003b02:	1891      	adds	r1, r2, r2
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	415b      	adcs	r3, r3
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b0e:	4641      	mov	r1, r8
 8003b10:	1851      	adds	r1, r2, r1
 8003b12:	6039      	str	r1, [r7, #0]
 8003b14:	4649      	mov	r1, r9
 8003b16:	414b      	adcs	r3, r1
 8003b18:	607b      	str	r3, [r7, #4]
 8003b1a:	f04f 0200 	mov.w	r2, #0
 8003b1e:	f04f 0300 	mov.w	r3, #0
 8003b22:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b26:	4659      	mov	r1, fp
 8003b28:	00cb      	lsls	r3, r1, #3
 8003b2a:	4651      	mov	r1, sl
 8003b2c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b30:	4651      	mov	r1, sl
 8003b32:	00ca      	lsls	r2, r1, #3
 8003b34:	4610      	mov	r0, r2
 8003b36:	4619      	mov	r1, r3
 8003b38:	4603      	mov	r3, r0
 8003b3a:	4642      	mov	r2, r8
 8003b3c:	189b      	adds	r3, r3, r2
 8003b3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b40:	464b      	mov	r3, r9
 8003b42:	460a      	mov	r2, r1
 8003b44:	eb42 0303 	adc.w	r3, r2, r3
 8003b48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	663b      	str	r3, [r7, #96]	; 0x60
 8003b54:	667a      	str	r2, [r7, #100]	; 0x64
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	f04f 0300 	mov.w	r3, #0
 8003b5e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b62:	4649      	mov	r1, r9
 8003b64:	008b      	lsls	r3, r1, #2
 8003b66:	4641      	mov	r1, r8
 8003b68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b6c:	4641      	mov	r1, r8
 8003b6e:	008a      	lsls	r2, r1, #2
 8003b70:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b74:	f7fc fb9c 	bl	80002b0 <__aeabi_uldivmod>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4b0d      	ldr	r3, [pc, #52]	; (8003bb4 <UART_SetConfig+0x4e4>)
 8003b7e:	fba3 1302 	umull	r1, r3, r3, r2
 8003b82:	095b      	lsrs	r3, r3, #5
 8003b84:	2164      	movs	r1, #100	; 0x64
 8003b86:	fb01 f303 	mul.w	r3, r1, r3
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	011b      	lsls	r3, r3, #4
 8003b8e:	3332      	adds	r3, #50	; 0x32
 8003b90:	4a08      	ldr	r2, [pc, #32]	; (8003bb4 <UART_SetConfig+0x4e4>)
 8003b92:	fba2 2303 	umull	r2, r3, r2, r3
 8003b96:	095b      	lsrs	r3, r3, #5
 8003b98:	f003 020f 	and.w	r2, r3, #15
 8003b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4422      	add	r2, r4
 8003ba4:	609a      	str	r2, [r3, #8]
}
 8003ba6:	bf00      	nop
 8003ba8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003bac:	46bd      	mov	sp, r7
 8003bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bb2:	bf00      	nop
 8003bb4:	51eb851f 	.word	0x51eb851f

08003bb8 <atoi>:
 8003bb8:	220a      	movs	r2, #10
 8003bba:	2100      	movs	r1, #0
 8003bbc:	f000 b910 	b.w	8003de0 <strtol>

08003bc0 <__errno>:
 8003bc0:	4b01      	ldr	r3, [pc, #4]	; (8003bc8 <__errno+0x8>)
 8003bc2:	6818      	ldr	r0, [r3, #0]
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	2000000c 	.word	0x2000000c

08003bcc <__libc_init_array>:
 8003bcc:	b570      	push	{r4, r5, r6, lr}
 8003bce:	4d0d      	ldr	r5, [pc, #52]	; (8003c04 <__libc_init_array+0x38>)
 8003bd0:	4c0d      	ldr	r4, [pc, #52]	; (8003c08 <__libc_init_array+0x3c>)
 8003bd2:	1b64      	subs	r4, r4, r5
 8003bd4:	10a4      	asrs	r4, r4, #2
 8003bd6:	2600      	movs	r6, #0
 8003bd8:	42a6      	cmp	r6, r4
 8003bda:	d109      	bne.n	8003bf0 <__libc_init_array+0x24>
 8003bdc:	4d0b      	ldr	r5, [pc, #44]	; (8003c0c <__libc_init_array+0x40>)
 8003bde:	4c0c      	ldr	r4, [pc, #48]	; (8003c10 <__libc_init_array+0x44>)
 8003be0:	f001 f902 	bl	8004de8 <_init>
 8003be4:	1b64      	subs	r4, r4, r5
 8003be6:	10a4      	asrs	r4, r4, #2
 8003be8:	2600      	movs	r6, #0
 8003bea:	42a6      	cmp	r6, r4
 8003bec:	d105      	bne.n	8003bfa <__libc_init_array+0x2e>
 8003bee:	bd70      	pop	{r4, r5, r6, pc}
 8003bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bf4:	4798      	blx	r3
 8003bf6:	3601      	adds	r6, #1
 8003bf8:	e7ee      	b.n	8003bd8 <__libc_init_array+0xc>
 8003bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bfe:	4798      	blx	r3
 8003c00:	3601      	adds	r6, #1
 8003c02:	e7f2      	b.n	8003bea <__libc_init_array+0x1e>
 8003c04:	08005074 	.word	0x08005074
 8003c08:	08005074 	.word	0x08005074
 8003c0c:	08005074 	.word	0x08005074
 8003c10:	08005078 	.word	0x08005078

08003c14 <memset>:
 8003c14:	4402      	add	r2, r0
 8003c16:	4603      	mov	r3, r0
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d100      	bne.n	8003c1e <memset+0xa>
 8003c1c:	4770      	bx	lr
 8003c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c22:	e7f9      	b.n	8003c18 <memset+0x4>

08003c24 <strtok>:
 8003c24:	4b16      	ldr	r3, [pc, #88]	; (8003c80 <strtok+0x5c>)
 8003c26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003c28:	681e      	ldr	r6, [r3, #0]
 8003c2a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8003c2c:	4605      	mov	r5, r0
 8003c2e:	b9fc      	cbnz	r4, 8003c70 <strtok+0x4c>
 8003c30:	2050      	movs	r0, #80	; 0x50
 8003c32:	9101      	str	r1, [sp, #4]
 8003c34:	f000 f90e 	bl	8003e54 <malloc>
 8003c38:	9901      	ldr	r1, [sp, #4]
 8003c3a:	65b0      	str	r0, [r6, #88]	; 0x58
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	b920      	cbnz	r0, 8003c4a <strtok+0x26>
 8003c40:	4b10      	ldr	r3, [pc, #64]	; (8003c84 <strtok+0x60>)
 8003c42:	4811      	ldr	r0, [pc, #68]	; (8003c88 <strtok+0x64>)
 8003c44:	2157      	movs	r1, #87	; 0x57
 8003c46:	f000 f8d5 	bl	8003df4 <__assert_func>
 8003c4a:	e9c0 4400 	strd	r4, r4, [r0]
 8003c4e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003c52:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003c56:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003c5a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003c5e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003c62:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003c66:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003c6a:	6184      	str	r4, [r0, #24]
 8003c6c:	7704      	strb	r4, [r0, #28]
 8003c6e:	6244      	str	r4, [r0, #36]	; 0x24
 8003c70:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8003c72:	2301      	movs	r3, #1
 8003c74:	4628      	mov	r0, r5
 8003c76:	b002      	add	sp, #8
 8003c78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003c7c:	f000 b806 	b.w	8003c8c <__strtok_r>
 8003c80:	2000000c 	.word	0x2000000c
 8003c84:	08004e28 	.word	0x08004e28
 8003c88:	08004e3f 	.word	0x08004e3f

08003c8c <__strtok_r>:
 8003c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c8e:	b908      	cbnz	r0, 8003c94 <__strtok_r+0x8>
 8003c90:	6810      	ldr	r0, [r2, #0]
 8003c92:	b188      	cbz	r0, 8003cb8 <__strtok_r+0x2c>
 8003c94:	4604      	mov	r4, r0
 8003c96:	4620      	mov	r0, r4
 8003c98:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003c9c:	460f      	mov	r7, r1
 8003c9e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003ca2:	b91e      	cbnz	r6, 8003cac <__strtok_r+0x20>
 8003ca4:	b965      	cbnz	r5, 8003cc0 <__strtok_r+0x34>
 8003ca6:	6015      	str	r5, [r2, #0]
 8003ca8:	4628      	mov	r0, r5
 8003caa:	e005      	b.n	8003cb8 <__strtok_r+0x2c>
 8003cac:	42b5      	cmp	r5, r6
 8003cae:	d1f6      	bne.n	8003c9e <__strtok_r+0x12>
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1f0      	bne.n	8003c96 <__strtok_r+0xa>
 8003cb4:	6014      	str	r4, [r2, #0]
 8003cb6:	7003      	strb	r3, [r0, #0]
 8003cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cba:	461c      	mov	r4, r3
 8003cbc:	e00c      	b.n	8003cd8 <__strtok_r+0x4c>
 8003cbe:	b915      	cbnz	r5, 8003cc6 <__strtok_r+0x3a>
 8003cc0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003cc4:	460e      	mov	r6, r1
 8003cc6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003cca:	42ab      	cmp	r3, r5
 8003ccc:	d1f7      	bne.n	8003cbe <__strtok_r+0x32>
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f3      	beq.n	8003cba <__strtok_r+0x2e>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003cd8:	6014      	str	r4, [r2, #0]
 8003cda:	e7ed      	b.n	8003cb8 <__strtok_r+0x2c>

08003cdc <_strtol_l.constprop.0>:
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ce2:	d001      	beq.n	8003ce8 <_strtol_l.constprop.0+0xc>
 8003ce4:	2b24      	cmp	r3, #36	; 0x24
 8003ce6:	d906      	bls.n	8003cf6 <_strtol_l.constprop.0+0x1a>
 8003ce8:	f7ff ff6a 	bl	8003bc0 <__errno>
 8003cec:	2316      	movs	r3, #22
 8003cee:	6003      	str	r3, [r0, #0]
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cf6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003ddc <_strtol_l.constprop.0+0x100>
 8003cfa:	460d      	mov	r5, r1
 8003cfc:	462e      	mov	r6, r5
 8003cfe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003d02:	f814 700c 	ldrb.w	r7, [r4, ip]
 8003d06:	f017 0708 	ands.w	r7, r7, #8
 8003d0a:	d1f7      	bne.n	8003cfc <_strtol_l.constprop.0+0x20>
 8003d0c:	2c2d      	cmp	r4, #45	; 0x2d
 8003d0e:	d132      	bne.n	8003d76 <_strtol_l.constprop.0+0x9a>
 8003d10:	782c      	ldrb	r4, [r5, #0]
 8003d12:	2701      	movs	r7, #1
 8003d14:	1cb5      	adds	r5, r6, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d05b      	beq.n	8003dd2 <_strtol_l.constprop.0+0xf6>
 8003d1a:	2b10      	cmp	r3, #16
 8003d1c:	d109      	bne.n	8003d32 <_strtol_l.constprop.0+0x56>
 8003d1e:	2c30      	cmp	r4, #48	; 0x30
 8003d20:	d107      	bne.n	8003d32 <_strtol_l.constprop.0+0x56>
 8003d22:	782c      	ldrb	r4, [r5, #0]
 8003d24:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003d28:	2c58      	cmp	r4, #88	; 0x58
 8003d2a:	d14d      	bne.n	8003dc8 <_strtol_l.constprop.0+0xec>
 8003d2c:	786c      	ldrb	r4, [r5, #1]
 8003d2e:	2310      	movs	r3, #16
 8003d30:	3502      	adds	r5, #2
 8003d32:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003d36:	f108 38ff 	add.w	r8, r8, #4294967295
 8003d3a:	f04f 0c00 	mov.w	ip, #0
 8003d3e:	fbb8 f9f3 	udiv	r9, r8, r3
 8003d42:	4666      	mov	r6, ip
 8003d44:	fb03 8a19 	mls	sl, r3, r9, r8
 8003d48:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8003d4c:	f1be 0f09 	cmp.w	lr, #9
 8003d50:	d816      	bhi.n	8003d80 <_strtol_l.constprop.0+0xa4>
 8003d52:	4674      	mov	r4, lr
 8003d54:	42a3      	cmp	r3, r4
 8003d56:	dd24      	ble.n	8003da2 <_strtol_l.constprop.0+0xc6>
 8003d58:	f1bc 0f00 	cmp.w	ip, #0
 8003d5c:	db1e      	blt.n	8003d9c <_strtol_l.constprop.0+0xc0>
 8003d5e:	45b1      	cmp	r9, r6
 8003d60:	d31c      	bcc.n	8003d9c <_strtol_l.constprop.0+0xc0>
 8003d62:	d101      	bne.n	8003d68 <_strtol_l.constprop.0+0x8c>
 8003d64:	45a2      	cmp	sl, r4
 8003d66:	db19      	blt.n	8003d9c <_strtol_l.constprop.0+0xc0>
 8003d68:	fb06 4603 	mla	r6, r6, r3, r4
 8003d6c:	f04f 0c01 	mov.w	ip, #1
 8003d70:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003d74:	e7e8      	b.n	8003d48 <_strtol_l.constprop.0+0x6c>
 8003d76:	2c2b      	cmp	r4, #43	; 0x2b
 8003d78:	bf04      	itt	eq
 8003d7a:	782c      	ldrbeq	r4, [r5, #0]
 8003d7c:	1cb5      	addeq	r5, r6, #2
 8003d7e:	e7ca      	b.n	8003d16 <_strtol_l.constprop.0+0x3a>
 8003d80:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8003d84:	f1be 0f19 	cmp.w	lr, #25
 8003d88:	d801      	bhi.n	8003d8e <_strtol_l.constprop.0+0xb2>
 8003d8a:	3c37      	subs	r4, #55	; 0x37
 8003d8c:	e7e2      	b.n	8003d54 <_strtol_l.constprop.0+0x78>
 8003d8e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8003d92:	f1be 0f19 	cmp.w	lr, #25
 8003d96:	d804      	bhi.n	8003da2 <_strtol_l.constprop.0+0xc6>
 8003d98:	3c57      	subs	r4, #87	; 0x57
 8003d9a:	e7db      	b.n	8003d54 <_strtol_l.constprop.0+0x78>
 8003d9c:	f04f 3cff 	mov.w	ip, #4294967295
 8003da0:	e7e6      	b.n	8003d70 <_strtol_l.constprop.0+0x94>
 8003da2:	f1bc 0f00 	cmp.w	ip, #0
 8003da6:	da05      	bge.n	8003db4 <_strtol_l.constprop.0+0xd8>
 8003da8:	2322      	movs	r3, #34	; 0x22
 8003daa:	6003      	str	r3, [r0, #0]
 8003dac:	4646      	mov	r6, r8
 8003dae:	b942      	cbnz	r2, 8003dc2 <_strtol_l.constprop.0+0xe6>
 8003db0:	4630      	mov	r0, r6
 8003db2:	e79e      	b.n	8003cf2 <_strtol_l.constprop.0+0x16>
 8003db4:	b107      	cbz	r7, 8003db8 <_strtol_l.constprop.0+0xdc>
 8003db6:	4276      	negs	r6, r6
 8003db8:	2a00      	cmp	r2, #0
 8003dba:	d0f9      	beq.n	8003db0 <_strtol_l.constprop.0+0xd4>
 8003dbc:	f1bc 0f00 	cmp.w	ip, #0
 8003dc0:	d000      	beq.n	8003dc4 <_strtol_l.constprop.0+0xe8>
 8003dc2:	1e69      	subs	r1, r5, #1
 8003dc4:	6011      	str	r1, [r2, #0]
 8003dc6:	e7f3      	b.n	8003db0 <_strtol_l.constprop.0+0xd4>
 8003dc8:	2430      	movs	r4, #48	; 0x30
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1b1      	bne.n	8003d32 <_strtol_l.constprop.0+0x56>
 8003dce:	2308      	movs	r3, #8
 8003dd0:	e7af      	b.n	8003d32 <_strtol_l.constprop.0+0x56>
 8003dd2:	2c30      	cmp	r4, #48	; 0x30
 8003dd4:	d0a5      	beq.n	8003d22 <_strtol_l.constprop.0+0x46>
 8003dd6:	230a      	movs	r3, #10
 8003dd8:	e7ab      	b.n	8003d32 <_strtol_l.constprop.0+0x56>
 8003dda:	bf00      	nop
 8003ddc:	08004ed9 	.word	0x08004ed9

08003de0 <strtol>:
 8003de0:	4613      	mov	r3, r2
 8003de2:	460a      	mov	r2, r1
 8003de4:	4601      	mov	r1, r0
 8003de6:	4802      	ldr	r0, [pc, #8]	; (8003df0 <strtol+0x10>)
 8003de8:	6800      	ldr	r0, [r0, #0]
 8003dea:	f7ff bf77 	b.w	8003cdc <_strtol_l.constprop.0>
 8003dee:	bf00      	nop
 8003df0:	2000000c 	.word	0x2000000c

08003df4 <__assert_func>:
 8003df4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003df6:	4614      	mov	r4, r2
 8003df8:	461a      	mov	r2, r3
 8003dfa:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <__assert_func+0x2c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4605      	mov	r5, r0
 8003e00:	68d8      	ldr	r0, [r3, #12]
 8003e02:	b14c      	cbz	r4, 8003e18 <__assert_func+0x24>
 8003e04:	4b07      	ldr	r3, [pc, #28]	; (8003e24 <__assert_func+0x30>)
 8003e06:	9100      	str	r1, [sp, #0]
 8003e08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003e0c:	4906      	ldr	r1, [pc, #24]	; (8003e28 <__assert_func+0x34>)
 8003e0e:	462b      	mov	r3, r5
 8003e10:	f000 f80e 	bl	8003e30 <fiprintf>
 8003e14:	f000 fcc4 	bl	80047a0 <abort>
 8003e18:	4b04      	ldr	r3, [pc, #16]	; (8003e2c <__assert_func+0x38>)
 8003e1a:	461c      	mov	r4, r3
 8003e1c:	e7f3      	b.n	8003e06 <__assert_func+0x12>
 8003e1e:	bf00      	nop
 8003e20:	2000000c 	.word	0x2000000c
 8003e24:	08004e9c 	.word	0x08004e9c
 8003e28:	08004ea9 	.word	0x08004ea9
 8003e2c:	08004ed7 	.word	0x08004ed7

08003e30 <fiprintf>:
 8003e30:	b40e      	push	{r1, r2, r3}
 8003e32:	b503      	push	{r0, r1, lr}
 8003e34:	4601      	mov	r1, r0
 8003e36:	ab03      	add	r3, sp, #12
 8003e38:	4805      	ldr	r0, [pc, #20]	; (8003e50 <fiprintf+0x20>)
 8003e3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e3e:	6800      	ldr	r0, [r0, #0]
 8003e40:	9301      	str	r3, [sp, #4]
 8003e42:	f000 f919 	bl	8004078 <_vfiprintf_r>
 8003e46:	b002      	add	sp, #8
 8003e48:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e4c:	b003      	add	sp, #12
 8003e4e:	4770      	bx	lr
 8003e50:	2000000c 	.word	0x2000000c

08003e54 <malloc>:
 8003e54:	4b02      	ldr	r3, [pc, #8]	; (8003e60 <malloc+0xc>)
 8003e56:	4601      	mov	r1, r0
 8003e58:	6818      	ldr	r0, [r3, #0]
 8003e5a:	f000 b86f 	b.w	8003f3c <_malloc_r>
 8003e5e:	bf00      	nop
 8003e60:	2000000c 	.word	0x2000000c

08003e64 <_free_r>:
 8003e64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e66:	2900      	cmp	r1, #0
 8003e68:	d044      	beq.n	8003ef4 <_free_r+0x90>
 8003e6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e6e:	9001      	str	r0, [sp, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f1a1 0404 	sub.w	r4, r1, #4
 8003e76:	bfb8      	it	lt
 8003e78:	18e4      	addlt	r4, r4, r3
 8003e7a:	f000 feb9 	bl	8004bf0 <__malloc_lock>
 8003e7e:	4a1e      	ldr	r2, [pc, #120]	; (8003ef8 <_free_r+0x94>)
 8003e80:	9801      	ldr	r0, [sp, #4]
 8003e82:	6813      	ldr	r3, [r2, #0]
 8003e84:	b933      	cbnz	r3, 8003e94 <_free_r+0x30>
 8003e86:	6063      	str	r3, [r4, #4]
 8003e88:	6014      	str	r4, [r2, #0]
 8003e8a:	b003      	add	sp, #12
 8003e8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e90:	f000 beb4 	b.w	8004bfc <__malloc_unlock>
 8003e94:	42a3      	cmp	r3, r4
 8003e96:	d908      	bls.n	8003eaa <_free_r+0x46>
 8003e98:	6825      	ldr	r5, [r4, #0]
 8003e9a:	1961      	adds	r1, r4, r5
 8003e9c:	428b      	cmp	r3, r1
 8003e9e:	bf01      	itttt	eq
 8003ea0:	6819      	ldreq	r1, [r3, #0]
 8003ea2:	685b      	ldreq	r3, [r3, #4]
 8003ea4:	1949      	addeq	r1, r1, r5
 8003ea6:	6021      	streq	r1, [r4, #0]
 8003ea8:	e7ed      	b.n	8003e86 <_free_r+0x22>
 8003eaa:	461a      	mov	r2, r3
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	b10b      	cbz	r3, 8003eb4 <_free_r+0x50>
 8003eb0:	42a3      	cmp	r3, r4
 8003eb2:	d9fa      	bls.n	8003eaa <_free_r+0x46>
 8003eb4:	6811      	ldr	r1, [r2, #0]
 8003eb6:	1855      	adds	r5, r2, r1
 8003eb8:	42a5      	cmp	r5, r4
 8003eba:	d10b      	bne.n	8003ed4 <_free_r+0x70>
 8003ebc:	6824      	ldr	r4, [r4, #0]
 8003ebe:	4421      	add	r1, r4
 8003ec0:	1854      	adds	r4, r2, r1
 8003ec2:	42a3      	cmp	r3, r4
 8003ec4:	6011      	str	r1, [r2, #0]
 8003ec6:	d1e0      	bne.n	8003e8a <_free_r+0x26>
 8003ec8:	681c      	ldr	r4, [r3, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	6053      	str	r3, [r2, #4]
 8003ece:	4421      	add	r1, r4
 8003ed0:	6011      	str	r1, [r2, #0]
 8003ed2:	e7da      	b.n	8003e8a <_free_r+0x26>
 8003ed4:	d902      	bls.n	8003edc <_free_r+0x78>
 8003ed6:	230c      	movs	r3, #12
 8003ed8:	6003      	str	r3, [r0, #0]
 8003eda:	e7d6      	b.n	8003e8a <_free_r+0x26>
 8003edc:	6825      	ldr	r5, [r4, #0]
 8003ede:	1961      	adds	r1, r4, r5
 8003ee0:	428b      	cmp	r3, r1
 8003ee2:	bf04      	itt	eq
 8003ee4:	6819      	ldreq	r1, [r3, #0]
 8003ee6:	685b      	ldreq	r3, [r3, #4]
 8003ee8:	6063      	str	r3, [r4, #4]
 8003eea:	bf04      	itt	eq
 8003eec:	1949      	addeq	r1, r1, r5
 8003eee:	6021      	streq	r1, [r4, #0]
 8003ef0:	6054      	str	r4, [r2, #4]
 8003ef2:	e7ca      	b.n	8003e8a <_free_r+0x26>
 8003ef4:	b003      	add	sp, #12
 8003ef6:	bd30      	pop	{r4, r5, pc}
 8003ef8:	20000920 	.word	0x20000920

08003efc <sbrk_aligned>:
 8003efc:	b570      	push	{r4, r5, r6, lr}
 8003efe:	4e0e      	ldr	r6, [pc, #56]	; (8003f38 <sbrk_aligned+0x3c>)
 8003f00:	460c      	mov	r4, r1
 8003f02:	6831      	ldr	r1, [r6, #0]
 8003f04:	4605      	mov	r5, r0
 8003f06:	b911      	cbnz	r1, 8003f0e <sbrk_aligned+0x12>
 8003f08:	f000 fb7a 	bl	8004600 <_sbrk_r>
 8003f0c:	6030      	str	r0, [r6, #0]
 8003f0e:	4621      	mov	r1, r4
 8003f10:	4628      	mov	r0, r5
 8003f12:	f000 fb75 	bl	8004600 <_sbrk_r>
 8003f16:	1c43      	adds	r3, r0, #1
 8003f18:	d00a      	beq.n	8003f30 <sbrk_aligned+0x34>
 8003f1a:	1cc4      	adds	r4, r0, #3
 8003f1c:	f024 0403 	bic.w	r4, r4, #3
 8003f20:	42a0      	cmp	r0, r4
 8003f22:	d007      	beq.n	8003f34 <sbrk_aligned+0x38>
 8003f24:	1a21      	subs	r1, r4, r0
 8003f26:	4628      	mov	r0, r5
 8003f28:	f000 fb6a 	bl	8004600 <_sbrk_r>
 8003f2c:	3001      	adds	r0, #1
 8003f2e:	d101      	bne.n	8003f34 <sbrk_aligned+0x38>
 8003f30:	f04f 34ff 	mov.w	r4, #4294967295
 8003f34:	4620      	mov	r0, r4
 8003f36:	bd70      	pop	{r4, r5, r6, pc}
 8003f38:	20000924 	.word	0x20000924

08003f3c <_malloc_r>:
 8003f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f40:	1ccd      	adds	r5, r1, #3
 8003f42:	f025 0503 	bic.w	r5, r5, #3
 8003f46:	3508      	adds	r5, #8
 8003f48:	2d0c      	cmp	r5, #12
 8003f4a:	bf38      	it	cc
 8003f4c:	250c      	movcc	r5, #12
 8003f4e:	2d00      	cmp	r5, #0
 8003f50:	4607      	mov	r7, r0
 8003f52:	db01      	blt.n	8003f58 <_malloc_r+0x1c>
 8003f54:	42a9      	cmp	r1, r5
 8003f56:	d905      	bls.n	8003f64 <_malloc_r+0x28>
 8003f58:	230c      	movs	r3, #12
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	2600      	movs	r6, #0
 8003f5e:	4630      	mov	r0, r6
 8003f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f64:	4e2e      	ldr	r6, [pc, #184]	; (8004020 <_malloc_r+0xe4>)
 8003f66:	f000 fe43 	bl	8004bf0 <__malloc_lock>
 8003f6a:	6833      	ldr	r3, [r6, #0]
 8003f6c:	461c      	mov	r4, r3
 8003f6e:	bb34      	cbnz	r4, 8003fbe <_malloc_r+0x82>
 8003f70:	4629      	mov	r1, r5
 8003f72:	4638      	mov	r0, r7
 8003f74:	f7ff ffc2 	bl	8003efc <sbrk_aligned>
 8003f78:	1c43      	adds	r3, r0, #1
 8003f7a:	4604      	mov	r4, r0
 8003f7c:	d14d      	bne.n	800401a <_malloc_r+0xde>
 8003f7e:	6834      	ldr	r4, [r6, #0]
 8003f80:	4626      	mov	r6, r4
 8003f82:	2e00      	cmp	r6, #0
 8003f84:	d140      	bne.n	8004008 <_malloc_r+0xcc>
 8003f86:	6823      	ldr	r3, [r4, #0]
 8003f88:	4631      	mov	r1, r6
 8003f8a:	4638      	mov	r0, r7
 8003f8c:	eb04 0803 	add.w	r8, r4, r3
 8003f90:	f000 fb36 	bl	8004600 <_sbrk_r>
 8003f94:	4580      	cmp	r8, r0
 8003f96:	d13a      	bne.n	800400e <_malloc_r+0xd2>
 8003f98:	6821      	ldr	r1, [r4, #0]
 8003f9a:	3503      	adds	r5, #3
 8003f9c:	1a6d      	subs	r5, r5, r1
 8003f9e:	f025 0503 	bic.w	r5, r5, #3
 8003fa2:	3508      	adds	r5, #8
 8003fa4:	2d0c      	cmp	r5, #12
 8003fa6:	bf38      	it	cc
 8003fa8:	250c      	movcc	r5, #12
 8003faa:	4629      	mov	r1, r5
 8003fac:	4638      	mov	r0, r7
 8003fae:	f7ff ffa5 	bl	8003efc <sbrk_aligned>
 8003fb2:	3001      	adds	r0, #1
 8003fb4:	d02b      	beq.n	800400e <_malloc_r+0xd2>
 8003fb6:	6823      	ldr	r3, [r4, #0]
 8003fb8:	442b      	add	r3, r5
 8003fba:	6023      	str	r3, [r4, #0]
 8003fbc:	e00e      	b.n	8003fdc <_malloc_r+0xa0>
 8003fbe:	6822      	ldr	r2, [r4, #0]
 8003fc0:	1b52      	subs	r2, r2, r5
 8003fc2:	d41e      	bmi.n	8004002 <_malloc_r+0xc6>
 8003fc4:	2a0b      	cmp	r2, #11
 8003fc6:	d916      	bls.n	8003ff6 <_malloc_r+0xba>
 8003fc8:	1961      	adds	r1, r4, r5
 8003fca:	42a3      	cmp	r3, r4
 8003fcc:	6025      	str	r5, [r4, #0]
 8003fce:	bf18      	it	ne
 8003fd0:	6059      	strne	r1, [r3, #4]
 8003fd2:	6863      	ldr	r3, [r4, #4]
 8003fd4:	bf08      	it	eq
 8003fd6:	6031      	streq	r1, [r6, #0]
 8003fd8:	5162      	str	r2, [r4, r5]
 8003fda:	604b      	str	r3, [r1, #4]
 8003fdc:	4638      	mov	r0, r7
 8003fde:	f104 060b 	add.w	r6, r4, #11
 8003fe2:	f000 fe0b 	bl	8004bfc <__malloc_unlock>
 8003fe6:	f026 0607 	bic.w	r6, r6, #7
 8003fea:	1d23      	adds	r3, r4, #4
 8003fec:	1af2      	subs	r2, r6, r3
 8003fee:	d0b6      	beq.n	8003f5e <_malloc_r+0x22>
 8003ff0:	1b9b      	subs	r3, r3, r6
 8003ff2:	50a3      	str	r3, [r4, r2]
 8003ff4:	e7b3      	b.n	8003f5e <_malloc_r+0x22>
 8003ff6:	6862      	ldr	r2, [r4, #4]
 8003ff8:	42a3      	cmp	r3, r4
 8003ffa:	bf0c      	ite	eq
 8003ffc:	6032      	streq	r2, [r6, #0]
 8003ffe:	605a      	strne	r2, [r3, #4]
 8004000:	e7ec      	b.n	8003fdc <_malloc_r+0xa0>
 8004002:	4623      	mov	r3, r4
 8004004:	6864      	ldr	r4, [r4, #4]
 8004006:	e7b2      	b.n	8003f6e <_malloc_r+0x32>
 8004008:	4634      	mov	r4, r6
 800400a:	6876      	ldr	r6, [r6, #4]
 800400c:	e7b9      	b.n	8003f82 <_malloc_r+0x46>
 800400e:	230c      	movs	r3, #12
 8004010:	603b      	str	r3, [r7, #0]
 8004012:	4638      	mov	r0, r7
 8004014:	f000 fdf2 	bl	8004bfc <__malloc_unlock>
 8004018:	e7a1      	b.n	8003f5e <_malloc_r+0x22>
 800401a:	6025      	str	r5, [r4, #0]
 800401c:	e7de      	b.n	8003fdc <_malloc_r+0xa0>
 800401e:	bf00      	nop
 8004020:	20000920 	.word	0x20000920

08004024 <__sfputc_r>:
 8004024:	6893      	ldr	r3, [r2, #8]
 8004026:	3b01      	subs	r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	b410      	push	{r4}
 800402c:	6093      	str	r3, [r2, #8]
 800402e:	da08      	bge.n	8004042 <__sfputc_r+0x1e>
 8004030:	6994      	ldr	r4, [r2, #24]
 8004032:	42a3      	cmp	r3, r4
 8004034:	db01      	blt.n	800403a <__sfputc_r+0x16>
 8004036:	290a      	cmp	r1, #10
 8004038:	d103      	bne.n	8004042 <__sfputc_r+0x1e>
 800403a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800403e:	f000 baef 	b.w	8004620 <__swbuf_r>
 8004042:	6813      	ldr	r3, [r2, #0]
 8004044:	1c58      	adds	r0, r3, #1
 8004046:	6010      	str	r0, [r2, #0]
 8004048:	7019      	strb	r1, [r3, #0]
 800404a:	4608      	mov	r0, r1
 800404c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004050:	4770      	bx	lr

08004052 <__sfputs_r>:
 8004052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004054:	4606      	mov	r6, r0
 8004056:	460f      	mov	r7, r1
 8004058:	4614      	mov	r4, r2
 800405a:	18d5      	adds	r5, r2, r3
 800405c:	42ac      	cmp	r4, r5
 800405e:	d101      	bne.n	8004064 <__sfputs_r+0x12>
 8004060:	2000      	movs	r0, #0
 8004062:	e007      	b.n	8004074 <__sfputs_r+0x22>
 8004064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004068:	463a      	mov	r2, r7
 800406a:	4630      	mov	r0, r6
 800406c:	f7ff ffda 	bl	8004024 <__sfputc_r>
 8004070:	1c43      	adds	r3, r0, #1
 8004072:	d1f3      	bne.n	800405c <__sfputs_r+0xa>
 8004074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004078 <_vfiprintf_r>:
 8004078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800407c:	460d      	mov	r5, r1
 800407e:	b09d      	sub	sp, #116	; 0x74
 8004080:	4614      	mov	r4, r2
 8004082:	4698      	mov	r8, r3
 8004084:	4606      	mov	r6, r0
 8004086:	b118      	cbz	r0, 8004090 <_vfiprintf_r+0x18>
 8004088:	6983      	ldr	r3, [r0, #24]
 800408a:	b90b      	cbnz	r3, 8004090 <_vfiprintf_r+0x18>
 800408c:	f000 fcaa 	bl	80049e4 <__sinit>
 8004090:	4b89      	ldr	r3, [pc, #548]	; (80042b8 <_vfiprintf_r+0x240>)
 8004092:	429d      	cmp	r5, r3
 8004094:	d11b      	bne.n	80040ce <_vfiprintf_r+0x56>
 8004096:	6875      	ldr	r5, [r6, #4]
 8004098:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800409a:	07d9      	lsls	r1, r3, #31
 800409c:	d405      	bmi.n	80040aa <_vfiprintf_r+0x32>
 800409e:	89ab      	ldrh	r3, [r5, #12]
 80040a0:	059a      	lsls	r2, r3, #22
 80040a2:	d402      	bmi.n	80040aa <_vfiprintf_r+0x32>
 80040a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040a6:	f000 fd3b 	bl	8004b20 <__retarget_lock_acquire_recursive>
 80040aa:	89ab      	ldrh	r3, [r5, #12]
 80040ac:	071b      	lsls	r3, r3, #28
 80040ae:	d501      	bpl.n	80040b4 <_vfiprintf_r+0x3c>
 80040b0:	692b      	ldr	r3, [r5, #16]
 80040b2:	b9eb      	cbnz	r3, 80040f0 <_vfiprintf_r+0x78>
 80040b4:	4629      	mov	r1, r5
 80040b6:	4630      	mov	r0, r6
 80040b8:	f000 fb04 	bl	80046c4 <__swsetup_r>
 80040bc:	b1c0      	cbz	r0, 80040f0 <_vfiprintf_r+0x78>
 80040be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040c0:	07dc      	lsls	r4, r3, #31
 80040c2:	d50e      	bpl.n	80040e2 <_vfiprintf_r+0x6a>
 80040c4:	f04f 30ff 	mov.w	r0, #4294967295
 80040c8:	b01d      	add	sp, #116	; 0x74
 80040ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040ce:	4b7b      	ldr	r3, [pc, #492]	; (80042bc <_vfiprintf_r+0x244>)
 80040d0:	429d      	cmp	r5, r3
 80040d2:	d101      	bne.n	80040d8 <_vfiprintf_r+0x60>
 80040d4:	68b5      	ldr	r5, [r6, #8]
 80040d6:	e7df      	b.n	8004098 <_vfiprintf_r+0x20>
 80040d8:	4b79      	ldr	r3, [pc, #484]	; (80042c0 <_vfiprintf_r+0x248>)
 80040da:	429d      	cmp	r5, r3
 80040dc:	bf08      	it	eq
 80040de:	68f5      	ldreq	r5, [r6, #12]
 80040e0:	e7da      	b.n	8004098 <_vfiprintf_r+0x20>
 80040e2:	89ab      	ldrh	r3, [r5, #12]
 80040e4:	0598      	lsls	r0, r3, #22
 80040e6:	d4ed      	bmi.n	80040c4 <_vfiprintf_r+0x4c>
 80040e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040ea:	f000 fd1a 	bl	8004b22 <__retarget_lock_release_recursive>
 80040ee:	e7e9      	b.n	80040c4 <_vfiprintf_r+0x4c>
 80040f0:	2300      	movs	r3, #0
 80040f2:	9309      	str	r3, [sp, #36]	; 0x24
 80040f4:	2320      	movs	r3, #32
 80040f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80040fe:	2330      	movs	r3, #48	; 0x30
 8004100:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80042c4 <_vfiprintf_r+0x24c>
 8004104:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004108:	f04f 0901 	mov.w	r9, #1
 800410c:	4623      	mov	r3, r4
 800410e:	469a      	mov	sl, r3
 8004110:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004114:	b10a      	cbz	r2, 800411a <_vfiprintf_r+0xa2>
 8004116:	2a25      	cmp	r2, #37	; 0x25
 8004118:	d1f9      	bne.n	800410e <_vfiprintf_r+0x96>
 800411a:	ebba 0b04 	subs.w	fp, sl, r4
 800411e:	d00b      	beq.n	8004138 <_vfiprintf_r+0xc0>
 8004120:	465b      	mov	r3, fp
 8004122:	4622      	mov	r2, r4
 8004124:	4629      	mov	r1, r5
 8004126:	4630      	mov	r0, r6
 8004128:	f7ff ff93 	bl	8004052 <__sfputs_r>
 800412c:	3001      	adds	r0, #1
 800412e:	f000 80aa 	beq.w	8004286 <_vfiprintf_r+0x20e>
 8004132:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004134:	445a      	add	r2, fp
 8004136:	9209      	str	r2, [sp, #36]	; 0x24
 8004138:	f89a 3000 	ldrb.w	r3, [sl]
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 80a2 	beq.w	8004286 <_vfiprintf_r+0x20e>
 8004142:	2300      	movs	r3, #0
 8004144:	f04f 32ff 	mov.w	r2, #4294967295
 8004148:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800414c:	f10a 0a01 	add.w	sl, sl, #1
 8004150:	9304      	str	r3, [sp, #16]
 8004152:	9307      	str	r3, [sp, #28]
 8004154:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004158:	931a      	str	r3, [sp, #104]	; 0x68
 800415a:	4654      	mov	r4, sl
 800415c:	2205      	movs	r2, #5
 800415e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004162:	4858      	ldr	r0, [pc, #352]	; (80042c4 <_vfiprintf_r+0x24c>)
 8004164:	f7fc f854 	bl	8000210 <memchr>
 8004168:	9a04      	ldr	r2, [sp, #16]
 800416a:	b9d8      	cbnz	r0, 80041a4 <_vfiprintf_r+0x12c>
 800416c:	06d1      	lsls	r1, r2, #27
 800416e:	bf44      	itt	mi
 8004170:	2320      	movmi	r3, #32
 8004172:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004176:	0713      	lsls	r3, r2, #28
 8004178:	bf44      	itt	mi
 800417a:	232b      	movmi	r3, #43	; 0x2b
 800417c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004180:	f89a 3000 	ldrb.w	r3, [sl]
 8004184:	2b2a      	cmp	r3, #42	; 0x2a
 8004186:	d015      	beq.n	80041b4 <_vfiprintf_r+0x13c>
 8004188:	9a07      	ldr	r2, [sp, #28]
 800418a:	4654      	mov	r4, sl
 800418c:	2000      	movs	r0, #0
 800418e:	f04f 0c0a 	mov.w	ip, #10
 8004192:	4621      	mov	r1, r4
 8004194:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004198:	3b30      	subs	r3, #48	; 0x30
 800419a:	2b09      	cmp	r3, #9
 800419c:	d94e      	bls.n	800423c <_vfiprintf_r+0x1c4>
 800419e:	b1b0      	cbz	r0, 80041ce <_vfiprintf_r+0x156>
 80041a0:	9207      	str	r2, [sp, #28]
 80041a2:	e014      	b.n	80041ce <_vfiprintf_r+0x156>
 80041a4:	eba0 0308 	sub.w	r3, r0, r8
 80041a8:	fa09 f303 	lsl.w	r3, r9, r3
 80041ac:	4313      	orrs	r3, r2
 80041ae:	9304      	str	r3, [sp, #16]
 80041b0:	46a2      	mov	sl, r4
 80041b2:	e7d2      	b.n	800415a <_vfiprintf_r+0xe2>
 80041b4:	9b03      	ldr	r3, [sp, #12]
 80041b6:	1d19      	adds	r1, r3, #4
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	9103      	str	r1, [sp, #12]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	bfbb      	ittet	lt
 80041c0:	425b      	neglt	r3, r3
 80041c2:	f042 0202 	orrlt.w	r2, r2, #2
 80041c6:	9307      	strge	r3, [sp, #28]
 80041c8:	9307      	strlt	r3, [sp, #28]
 80041ca:	bfb8      	it	lt
 80041cc:	9204      	strlt	r2, [sp, #16]
 80041ce:	7823      	ldrb	r3, [r4, #0]
 80041d0:	2b2e      	cmp	r3, #46	; 0x2e
 80041d2:	d10c      	bne.n	80041ee <_vfiprintf_r+0x176>
 80041d4:	7863      	ldrb	r3, [r4, #1]
 80041d6:	2b2a      	cmp	r3, #42	; 0x2a
 80041d8:	d135      	bne.n	8004246 <_vfiprintf_r+0x1ce>
 80041da:	9b03      	ldr	r3, [sp, #12]
 80041dc:	1d1a      	adds	r2, r3, #4
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	9203      	str	r2, [sp, #12]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	bfb8      	it	lt
 80041e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80041ea:	3402      	adds	r4, #2
 80041ec:	9305      	str	r3, [sp, #20]
 80041ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80042d4 <_vfiprintf_r+0x25c>
 80041f2:	7821      	ldrb	r1, [r4, #0]
 80041f4:	2203      	movs	r2, #3
 80041f6:	4650      	mov	r0, sl
 80041f8:	f7fc f80a 	bl	8000210 <memchr>
 80041fc:	b140      	cbz	r0, 8004210 <_vfiprintf_r+0x198>
 80041fe:	2340      	movs	r3, #64	; 0x40
 8004200:	eba0 000a 	sub.w	r0, r0, sl
 8004204:	fa03 f000 	lsl.w	r0, r3, r0
 8004208:	9b04      	ldr	r3, [sp, #16]
 800420a:	4303      	orrs	r3, r0
 800420c:	3401      	adds	r4, #1
 800420e:	9304      	str	r3, [sp, #16]
 8004210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004214:	482c      	ldr	r0, [pc, #176]	; (80042c8 <_vfiprintf_r+0x250>)
 8004216:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800421a:	2206      	movs	r2, #6
 800421c:	f7fb fff8 	bl	8000210 <memchr>
 8004220:	2800      	cmp	r0, #0
 8004222:	d03f      	beq.n	80042a4 <_vfiprintf_r+0x22c>
 8004224:	4b29      	ldr	r3, [pc, #164]	; (80042cc <_vfiprintf_r+0x254>)
 8004226:	bb1b      	cbnz	r3, 8004270 <_vfiprintf_r+0x1f8>
 8004228:	9b03      	ldr	r3, [sp, #12]
 800422a:	3307      	adds	r3, #7
 800422c:	f023 0307 	bic.w	r3, r3, #7
 8004230:	3308      	adds	r3, #8
 8004232:	9303      	str	r3, [sp, #12]
 8004234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004236:	443b      	add	r3, r7
 8004238:	9309      	str	r3, [sp, #36]	; 0x24
 800423a:	e767      	b.n	800410c <_vfiprintf_r+0x94>
 800423c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004240:	460c      	mov	r4, r1
 8004242:	2001      	movs	r0, #1
 8004244:	e7a5      	b.n	8004192 <_vfiprintf_r+0x11a>
 8004246:	2300      	movs	r3, #0
 8004248:	3401      	adds	r4, #1
 800424a:	9305      	str	r3, [sp, #20]
 800424c:	4619      	mov	r1, r3
 800424e:	f04f 0c0a 	mov.w	ip, #10
 8004252:	4620      	mov	r0, r4
 8004254:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004258:	3a30      	subs	r2, #48	; 0x30
 800425a:	2a09      	cmp	r2, #9
 800425c:	d903      	bls.n	8004266 <_vfiprintf_r+0x1ee>
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0c5      	beq.n	80041ee <_vfiprintf_r+0x176>
 8004262:	9105      	str	r1, [sp, #20]
 8004264:	e7c3      	b.n	80041ee <_vfiprintf_r+0x176>
 8004266:	fb0c 2101 	mla	r1, ip, r1, r2
 800426a:	4604      	mov	r4, r0
 800426c:	2301      	movs	r3, #1
 800426e:	e7f0      	b.n	8004252 <_vfiprintf_r+0x1da>
 8004270:	ab03      	add	r3, sp, #12
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	462a      	mov	r2, r5
 8004276:	4b16      	ldr	r3, [pc, #88]	; (80042d0 <_vfiprintf_r+0x258>)
 8004278:	a904      	add	r1, sp, #16
 800427a:	4630      	mov	r0, r6
 800427c:	f3af 8000 	nop.w
 8004280:	4607      	mov	r7, r0
 8004282:	1c78      	adds	r0, r7, #1
 8004284:	d1d6      	bne.n	8004234 <_vfiprintf_r+0x1bc>
 8004286:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004288:	07d9      	lsls	r1, r3, #31
 800428a:	d405      	bmi.n	8004298 <_vfiprintf_r+0x220>
 800428c:	89ab      	ldrh	r3, [r5, #12]
 800428e:	059a      	lsls	r2, r3, #22
 8004290:	d402      	bmi.n	8004298 <_vfiprintf_r+0x220>
 8004292:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004294:	f000 fc45 	bl	8004b22 <__retarget_lock_release_recursive>
 8004298:	89ab      	ldrh	r3, [r5, #12]
 800429a:	065b      	lsls	r3, r3, #25
 800429c:	f53f af12 	bmi.w	80040c4 <_vfiprintf_r+0x4c>
 80042a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042a2:	e711      	b.n	80040c8 <_vfiprintf_r+0x50>
 80042a4:	ab03      	add	r3, sp, #12
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	462a      	mov	r2, r5
 80042aa:	4b09      	ldr	r3, [pc, #36]	; (80042d0 <_vfiprintf_r+0x258>)
 80042ac:	a904      	add	r1, sp, #16
 80042ae:	4630      	mov	r0, r6
 80042b0:	f000 f880 	bl	80043b4 <_printf_i>
 80042b4:	e7e4      	b.n	8004280 <_vfiprintf_r+0x208>
 80042b6:	bf00      	nop
 80042b8:	0800502c 	.word	0x0800502c
 80042bc:	0800504c 	.word	0x0800504c
 80042c0:	0800500c 	.word	0x0800500c
 80042c4:	08004fd9 	.word	0x08004fd9
 80042c8:	08004fe3 	.word	0x08004fe3
 80042cc:	00000000 	.word	0x00000000
 80042d0:	08004053 	.word	0x08004053
 80042d4:	08004fdf 	.word	0x08004fdf

080042d8 <_printf_common>:
 80042d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042dc:	4616      	mov	r6, r2
 80042de:	4699      	mov	r9, r3
 80042e0:	688a      	ldr	r2, [r1, #8]
 80042e2:	690b      	ldr	r3, [r1, #16]
 80042e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042e8:	4293      	cmp	r3, r2
 80042ea:	bfb8      	it	lt
 80042ec:	4613      	movlt	r3, r2
 80042ee:	6033      	str	r3, [r6, #0]
 80042f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042f4:	4607      	mov	r7, r0
 80042f6:	460c      	mov	r4, r1
 80042f8:	b10a      	cbz	r2, 80042fe <_printf_common+0x26>
 80042fa:	3301      	adds	r3, #1
 80042fc:	6033      	str	r3, [r6, #0]
 80042fe:	6823      	ldr	r3, [r4, #0]
 8004300:	0699      	lsls	r1, r3, #26
 8004302:	bf42      	ittt	mi
 8004304:	6833      	ldrmi	r3, [r6, #0]
 8004306:	3302      	addmi	r3, #2
 8004308:	6033      	strmi	r3, [r6, #0]
 800430a:	6825      	ldr	r5, [r4, #0]
 800430c:	f015 0506 	ands.w	r5, r5, #6
 8004310:	d106      	bne.n	8004320 <_printf_common+0x48>
 8004312:	f104 0a19 	add.w	sl, r4, #25
 8004316:	68e3      	ldr	r3, [r4, #12]
 8004318:	6832      	ldr	r2, [r6, #0]
 800431a:	1a9b      	subs	r3, r3, r2
 800431c:	42ab      	cmp	r3, r5
 800431e:	dc26      	bgt.n	800436e <_printf_common+0x96>
 8004320:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004324:	1e13      	subs	r3, r2, #0
 8004326:	6822      	ldr	r2, [r4, #0]
 8004328:	bf18      	it	ne
 800432a:	2301      	movne	r3, #1
 800432c:	0692      	lsls	r2, r2, #26
 800432e:	d42b      	bmi.n	8004388 <_printf_common+0xb0>
 8004330:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004334:	4649      	mov	r1, r9
 8004336:	4638      	mov	r0, r7
 8004338:	47c0      	blx	r8
 800433a:	3001      	adds	r0, #1
 800433c:	d01e      	beq.n	800437c <_printf_common+0xa4>
 800433e:	6823      	ldr	r3, [r4, #0]
 8004340:	68e5      	ldr	r5, [r4, #12]
 8004342:	6832      	ldr	r2, [r6, #0]
 8004344:	f003 0306 	and.w	r3, r3, #6
 8004348:	2b04      	cmp	r3, #4
 800434a:	bf08      	it	eq
 800434c:	1aad      	subeq	r5, r5, r2
 800434e:	68a3      	ldr	r3, [r4, #8]
 8004350:	6922      	ldr	r2, [r4, #16]
 8004352:	bf0c      	ite	eq
 8004354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004358:	2500      	movne	r5, #0
 800435a:	4293      	cmp	r3, r2
 800435c:	bfc4      	itt	gt
 800435e:	1a9b      	subgt	r3, r3, r2
 8004360:	18ed      	addgt	r5, r5, r3
 8004362:	2600      	movs	r6, #0
 8004364:	341a      	adds	r4, #26
 8004366:	42b5      	cmp	r5, r6
 8004368:	d11a      	bne.n	80043a0 <_printf_common+0xc8>
 800436a:	2000      	movs	r0, #0
 800436c:	e008      	b.n	8004380 <_printf_common+0xa8>
 800436e:	2301      	movs	r3, #1
 8004370:	4652      	mov	r2, sl
 8004372:	4649      	mov	r1, r9
 8004374:	4638      	mov	r0, r7
 8004376:	47c0      	blx	r8
 8004378:	3001      	adds	r0, #1
 800437a:	d103      	bne.n	8004384 <_printf_common+0xac>
 800437c:	f04f 30ff 	mov.w	r0, #4294967295
 8004380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004384:	3501      	adds	r5, #1
 8004386:	e7c6      	b.n	8004316 <_printf_common+0x3e>
 8004388:	18e1      	adds	r1, r4, r3
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	2030      	movs	r0, #48	; 0x30
 800438e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004392:	4422      	add	r2, r4
 8004394:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004398:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800439c:	3302      	adds	r3, #2
 800439e:	e7c7      	b.n	8004330 <_printf_common+0x58>
 80043a0:	2301      	movs	r3, #1
 80043a2:	4622      	mov	r2, r4
 80043a4:	4649      	mov	r1, r9
 80043a6:	4638      	mov	r0, r7
 80043a8:	47c0      	blx	r8
 80043aa:	3001      	adds	r0, #1
 80043ac:	d0e6      	beq.n	800437c <_printf_common+0xa4>
 80043ae:	3601      	adds	r6, #1
 80043b0:	e7d9      	b.n	8004366 <_printf_common+0x8e>
	...

080043b4 <_printf_i>:
 80043b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043b8:	7e0f      	ldrb	r7, [r1, #24]
 80043ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043bc:	2f78      	cmp	r7, #120	; 0x78
 80043be:	4691      	mov	r9, r2
 80043c0:	4680      	mov	r8, r0
 80043c2:	460c      	mov	r4, r1
 80043c4:	469a      	mov	sl, r3
 80043c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043ca:	d807      	bhi.n	80043dc <_printf_i+0x28>
 80043cc:	2f62      	cmp	r7, #98	; 0x62
 80043ce:	d80a      	bhi.n	80043e6 <_printf_i+0x32>
 80043d0:	2f00      	cmp	r7, #0
 80043d2:	f000 80d8 	beq.w	8004586 <_printf_i+0x1d2>
 80043d6:	2f58      	cmp	r7, #88	; 0x58
 80043d8:	f000 80a3 	beq.w	8004522 <_printf_i+0x16e>
 80043dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043e4:	e03a      	b.n	800445c <_printf_i+0xa8>
 80043e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043ea:	2b15      	cmp	r3, #21
 80043ec:	d8f6      	bhi.n	80043dc <_printf_i+0x28>
 80043ee:	a101      	add	r1, pc, #4	; (adr r1, 80043f4 <_printf_i+0x40>)
 80043f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043f4:	0800444d 	.word	0x0800444d
 80043f8:	08004461 	.word	0x08004461
 80043fc:	080043dd 	.word	0x080043dd
 8004400:	080043dd 	.word	0x080043dd
 8004404:	080043dd 	.word	0x080043dd
 8004408:	080043dd 	.word	0x080043dd
 800440c:	08004461 	.word	0x08004461
 8004410:	080043dd 	.word	0x080043dd
 8004414:	080043dd 	.word	0x080043dd
 8004418:	080043dd 	.word	0x080043dd
 800441c:	080043dd 	.word	0x080043dd
 8004420:	0800456d 	.word	0x0800456d
 8004424:	08004491 	.word	0x08004491
 8004428:	0800454f 	.word	0x0800454f
 800442c:	080043dd 	.word	0x080043dd
 8004430:	080043dd 	.word	0x080043dd
 8004434:	0800458f 	.word	0x0800458f
 8004438:	080043dd 	.word	0x080043dd
 800443c:	08004491 	.word	0x08004491
 8004440:	080043dd 	.word	0x080043dd
 8004444:	080043dd 	.word	0x080043dd
 8004448:	08004557 	.word	0x08004557
 800444c:	682b      	ldr	r3, [r5, #0]
 800444e:	1d1a      	adds	r2, r3, #4
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	602a      	str	r2, [r5, #0]
 8004454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004458:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800445c:	2301      	movs	r3, #1
 800445e:	e0a3      	b.n	80045a8 <_printf_i+0x1f4>
 8004460:	6820      	ldr	r0, [r4, #0]
 8004462:	6829      	ldr	r1, [r5, #0]
 8004464:	0606      	lsls	r6, r0, #24
 8004466:	f101 0304 	add.w	r3, r1, #4
 800446a:	d50a      	bpl.n	8004482 <_printf_i+0xce>
 800446c:	680e      	ldr	r6, [r1, #0]
 800446e:	602b      	str	r3, [r5, #0]
 8004470:	2e00      	cmp	r6, #0
 8004472:	da03      	bge.n	800447c <_printf_i+0xc8>
 8004474:	232d      	movs	r3, #45	; 0x2d
 8004476:	4276      	negs	r6, r6
 8004478:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800447c:	485e      	ldr	r0, [pc, #376]	; (80045f8 <_printf_i+0x244>)
 800447e:	230a      	movs	r3, #10
 8004480:	e019      	b.n	80044b6 <_printf_i+0x102>
 8004482:	680e      	ldr	r6, [r1, #0]
 8004484:	602b      	str	r3, [r5, #0]
 8004486:	f010 0f40 	tst.w	r0, #64	; 0x40
 800448a:	bf18      	it	ne
 800448c:	b236      	sxthne	r6, r6
 800448e:	e7ef      	b.n	8004470 <_printf_i+0xbc>
 8004490:	682b      	ldr	r3, [r5, #0]
 8004492:	6820      	ldr	r0, [r4, #0]
 8004494:	1d19      	adds	r1, r3, #4
 8004496:	6029      	str	r1, [r5, #0]
 8004498:	0601      	lsls	r1, r0, #24
 800449a:	d501      	bpl.n	80044a0 <_printf_i+0xec>
 800449c:	681e      	ldr	r6, [r3, #0]
 800449e:	e002      	b.n	80044a6 <_printf_i+0xf2>
 80044a0:	0646      	lsls	r6, r0, #25
 80044a2:	d5fb      	bpl.n	800449c <_printf_i+0xe8>
 80044a4:	881e      	ldrh	r6, [r3, #0]
 80044a6:	4854      	ldr	r0, [pc, #336]	; (80045f8 <_printf_i+0x244>)
 80044a8:	2f6f      	cmp	r7, #111	; 0x6f
 80044aa:	bf0c      	ite	eq
 80044ac:	2308      	moveq	r3, #8
 80044ae:	230a      	movne	r3, #10
 80044b0:	2100      	movs	r1, #0
 80044b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044b6:	6865      	ldr	r5, [r4, #4]
 80044b8:	60a5      	str	r5, [r4, #8]
 80044ba:	2d00      	cmp	r5, #0
 80044bc:	bfa2      	ittt	ge
 80044be:	6821      	ldrge	r1, [r4, #0]
 80044c0:	f021 0104 	bicge.w	r1, r1, #4
 80044c4:	6021      	strge	r1, [r4, #0]
 80044c6:	b90e      	cbnz	r6, 80044cc <_printf_i+0x118>
 80044c8:	2d00      	cmp	r5, #0
 80044ca:	d04d      	beq.n	8004568 <_printf_i+0x1b4>
 80044cc:	4615      	mov	r5, r2
 80044ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80044d2:	fb03 6711 	mls	r7, r3, r1, r6
 80044d6:	5dc7      	ldrb	r7, [r0, r7]
 80044d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80044dc:	4637      	mov	r7, r6
 80044de:	42bb      	cmp	r3, r7
 80044e0:	460e      	mov	r6, r1
 80044e2:	d9f4      	bls.n	80044ce <_printf_i+0x11a>
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d10b      	bne.n	8004500 <_printf_i+0x14c>
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	07de      	lsls	r6, r3, #31
 80044ec:	d508      	bpl.n	8004500 <_printf_i+0x14c>
 80044ee:	6923      	ldr	r3, [r4, #16]
 80044f0:	6861      	ldr	r1, [r4, #4]
 80044f2:	4299      	cmp	r1, r3
 80044f4:	bfde      	ittt	le
 80044f6:	2330      	movle	r3, #48	; 0x30
 80044f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80044fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004500:	1b52      	subs	r2, r2, r5
 8004502:	6122      	str	r2, [r4, #16]
 8004504:	f8cd a000 	str.w	sl, [sp]
 8004508:	464b      	mov	r3, r9
 800450a:	aa03      	add	r2, sp, #12
 800450c:	4621      	mov	r1, r4
 800450e:	4640      	mov	r0, r8
 8004510:	f7ff fee2 	bl	80042d8 <_printf_common>
 8004514:	3001      	adds	r0, #1
 8004516:	d14c      	bne.n	80045b2 <_printf_i+0x1fe>
 8004518:	f04f 30ff 	mov.w	r0, #4294967295
 800451c:	b004      	add	sp, #16
 800451e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004522:	4835      	ldr	r0, [pc, #212]	; (80045f8 <_printf_i+0x244>)
 8004524:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004528:	6829      	ldr	r1, [r5, #0]
 800452a:	6823      	ldr	r3, [r4, #0]
 800452c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004530:	6029      	str	r1, [r5, #0]
 8004532:	061d      	lsls	r5, r3, #24
 8004534:	d514      	bpl.n	8004560 <_printf_i+0x1ac>
 8004536:	07df      	lsls	r7, r3, #31
 8004538:	bf44      	itt	mi
 800453a:	f043 0320 	orrmi.w	r3, r3, #32
 800453e:	6023      	strmi	r3, [r4, #0]
 8004540:	b91e      	cbnz	r6, 800454a <_printf_i+0x196>
 8004542:	6823      	ldr	r3, [r4, #0]
 8004544:	f023 0320 	bic.w	r3, r3, #32
 8004548:	6023      	str	r3, [r4, #0]
 800454a:	2310      	movs	r3, #16
 800454c:	e7b0      	b.n	80044b0 <_printf_i+0xfc>
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	f043 0320 	orr.w	r3, r3, #32
 8004554:	6023      	str	r3, [r4, #0]
 8004556:	2378      	movs	r3, #120	; 0x78
 8004558:	4828      	ldr	r0, [pc, #160]	; (80045fc <_printf_i+0x248>)
 800455a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800455e:	e7e3      	b.n	8004528 <_printf_i+0x174>
 8004560:	0659      	lsls	r1, r3, #25
 8004562:	bf48      	it	mi
 8004564:	b2b6      	uxthmi	r6, r6
 8004566:	e7e6      	b.n	8004536 <_printf_i+0x182>
 8004568:	4615      	mov	r5, r2
 800456a:	e7bb      	b.n	80044e4 <_printf_i+0x130>
 800456c:	682b      	ldr	r3, [r5, #0]
 800456e:	6826      	ldr	r6, [r4, #0]
 8004570:	6961      	ldr	r1, [r4, #20]
 8004572:	1d18      	adds	r0, r3, #4
 8004574:	6028      	str	r0, [r5, #0]
 8004576:	0635      	lsls	r5, r6, #24
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	d501      	bpl.n	8004580 <_printf_i+0x1cc>
 800457c:	6019      	str	r1, [r3, #0]
 800457e:	e002      	b.n	8004586 <_printf_i+0x1d2>
 8004580:	0670      	lsls	r0, r6, #25
 8004582:	d5fb      	bpl.n	800457c <_printf_i+0x1c8>
 8004584:	8019      	strh	r1, [r3, #0]
 8004586:	2300      	movs	r3, #0
 8004588:	6123      	str	r3, [r4, #16]
 800458a:	4615      	mov	r5, r2
 800458c:	e7ba      	b.n	8004504 <_printf_i+0x150>
 800458e:	682b      	ldr	r3, [r5, #0]
 8004590:	1d1a      	adds	r2, r3, #4
 8004592:	602a      	str	r2, [r5, #0]
 8004594:	681d      	ldr	r5, [r3, #0]
 8004596:	6862      	ldr	r2, [r4, #4]
 8004598:	2100      	movs	r1, #0
 800459a:	4628      	mov	r0, r5
 800459c:	f7fb fe38 	bl	8000210 <memchr>
 80045a0:	b108      	cbz	r0, 80045a6 <_printf_i+0x1f2>
 80045a2:	1b40      	subs	r0, r0, r5
 80045a4:	6060      	str	r0, [r4, #4]
 80045a6:	6863      	ldr	r3, [r4, #4]
 80045a8:	6123      	str	r3, [r4, #16]
 80045aa:	2300      	movs	r3, #0
 80045ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045b0:	e7a8      	b.n	8004504 <_printf_i+0x150>
 80045b2:	6923      	ldr	r3, [r4, #16]
 80045b4:	462a      	mov	r2, r5
 80045b6:	4649      	mov	r1, r9
 80045b8:	4640      	mov	r0, r8
 80045ba:	47d0      	blx	sl
 80045bc:	3001      	adds	r0, #1
 80045be:	d0ab      	beq.n	8004518 <_printf_i+0x164>
 80045c0:	6823      	ldr	r3, [r4, #0]
 80045c2:	079b      	lsls	r3, r3, #30
 80045c4:	d413      	bmi.n	80045ee <_printf_i+0x23a>
 80045c6:	68e0      	ldr	r0, [r4, #12]
 80045c8:	9b03      	ldr	r3, [sp, #12]
 80045ca:	4298      	cmp	r0, r3
 80045cc:	bfb8      	it	lt
 80045ce:	4618      	movlt	r0, r3
 80045d0:	e7a4      	b.n	800451c <_printf_i+0x168>
 80045d2:	2301      	movs	r3, #1
 80045d4:	4632      	mov	r2, r6
 80045d6:	4649      	mov	r1, r9
 80045d8:	4640      	mov	r0, r8
 80045da:	47d0      	blx	sl
 80045dc:	3001      	adds	r0, #1
 80045de:	d09b      	beq.n	8004518 <_printf_i+0x164>
 80045e0:	3501      	adds	r5, #1
 80045e2:	68e3      	ldr	r3, [r4, #12]
 80045e4:	9903      	ldr	r1, [sp, #12]
 80045e6:	1a5b      	subs	r3, r3, r1
 80045e8:	42ab      	cmp	r3, r5
 80045ea:	dcf2      	bgt.n	80045d2 <_printf_i+0x21e>
 80045ec:	e7eb      	b.n	80045c6 <_printf_i+0x212>
 80045ee:	2500      	movs	r5, #0
 80045f0:	f104 0619 	add.w	r6, r4, #25
 80045f4:	e7f5      	b.n	80045e2 <_printf_i+0x22e>
 80045f6:	bf00      	nop
 80045f8:	08004fea 	.word	0x08004fea
 80045fc:	08004ffb 	.word	0x08004ffb

08004600 <_sbrk_r>:
 8004600:	b538      	push	{r3, r4, r5, lr}
 8004602:	4d06      	ldr	r5, [pc, #24]	; (800461c <_sbrk_r+0x1c>)
 8004604:	2300      	movs	r3, #0
 8004606:	4604      	mov	r4, r0
 8004608:	4608      	mov	r0, r1
 800460a:	602b      	str	r3, [r5, #0]
 800460c:	f7fc fbdc 	bl	8000dc8 <_sbrk>
 8004610:	1c43      	adds	r3, r0, #1
 8004612:	d102      	bne.n	800461a <_sbrk_r+0x1a>
 8004614:	682b      	ldr	r3, [r5, #0]
 8004616:	b103      	cbz	r3, 800461a <_sbrk_r+0x1a>
 8004618:	6023      	str	r3, [r4, #0]
 800461a:	bd38      	pop	{r3, r4, r5, pc}
 800461c:	2000092c 	.word	0x2000092c

08004620 <__swbuf_r>:
 8004620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004622:	460e      	mov	r6, r1
 8004624:	4614      	mov	r4, r2
 8004626:	4605      	mov	r5, r0
 8004628:	b118      	cbz	r0, 8004632 <__swbuf_r+0x12>
 800462a:	6983      	ldr	r3, [r0, #24]
 800462c:	b90b      	cbnz	r3, 8004632 <__swbuf_r+0x12>
 800462e:	f000 f9d9 	bl	80049e4 <__sinit>
 8004632:	4b21      	ldr	r3, [pc, #132]	; (80046b8 <__swbuf_r+0x98>)
 8004634:	429c      	cmp	r4, r3
 8004636:	d12b      	bne.n	8004690 <__swbuf_r+0x70>
 8004638:	686c      	ldr	r4, [r5, #4]
 800463a:	69a3      	ldr	r3, [r4, #24]
 800463c:	60a3      	str	r3, [r4, #8]
 800463e:	89a3      	ldrh	r3, [r4, #12]
 8004640:	071a      	lsls	r2, r3, #28
 8004642:	d52f      	bpl.n	80046a4 <__swbuf_r+0x84>
 8004644:	6923      	ldr	r3, [r4, #16]
 8004646:	b36b      	cbz	r3, 80046a4 <__swbuf_r+0x84>
 8004648:	6923      	ldr	r3, [r4, #16]
 800464a:	6820      	ldr	r0, [r4, #0]
 800464c:	1ac0      	subs	r0, r0, r3
 800464e:	6963      	ldr	r3, [r4, #20]
 8004650:	b2f6      	uxtb	r6, r6
 8004652:	4283      	cmp	r3, r0
 8004654:	4637      	mov	r7, r6
 8004656:	dc04      	bgt.n	8004662 <__swbuf_r+0x42>
 8004658:	4621      	mov	r1, r4
 800465a:	4628      	mov	r0, r5
 800465c:	f000 f92e 	bl	80048bc <_fflush_r>
 8004660:	bb30      	cbnz	r0, 80046b0 <__swbuf_r+0x90>
 8004662:	68a3      	ldr	r3, [r4, #8]
 8004664:	3b01      	subs	r3, #1
 8004666:	60a3      	str	r3, [r4, #8]
 8004668:	6823      	ldr	r3, [r4, #0]
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	6022      	str	r2, [r4, #0]
 800466e:	701e      	strb	r6, [r3, #0]
 8004670:	6963      	ldr	r3, [r4, #20]
 8004672:	3001      	adds	r0, #1
 8004674:	4283      	cmp	r3, r0
 8004676:	d004      	beq.n	8004682 <__swbuf_r+0x62>
 8004678:	89a3      	ldrh	r3, [r4, #12]
 800467a:	07db      	lsls	r3, r3, #31
 800467c:	d506      	bpl.n	800468c <__swbuf_r+0x6c>
 800467e:	2e0a      	cmp	r6, #10
 8004680:	d104      	bne.n	800468c <__swbuf_r+0x6c>
 8004682:	4621      	mov	r1, r4
 8004684:	4628      	mov	r0, r5
 8004686:	f000 f919 	bl	80048bc <_fflush_r>
 800468a:	b988      	cbnz	r0, 80046b0 <__swbuf_r+0x90>
 800468c:	4638      	mov	r0, r7
 800468e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004690:	4b0a      	ldr	r3, [pc, #40]	; (80046bc <__swbuf_r+0x9c>)
 8004692:	429c      	cmp	r4, r3
 8004694:	d101      	bne.n	800469a <__swbuf_r+0x7a>
 8004696:	68ac      	ldr	r4, [r5, #8]
 8004698:	e7cf      	b.n	800463a <__swbuf_r+0x1a>
 800469a:	4b09      	ldr	r3, [pc, #36]	; (80046c0 <__swbuf_r+0xa0>)
 800469c:	429c      	cmp	r4, r3
 800469e:	bf08      	it	eq
 80046a0:	68ec      	ldreq	r4, [r5, #12]
 80046a2:	e7ca      	b.n	800463a <__swbuf_r+0x1a>
 80046a4:	4621      	mov	r1, r4
 80046a6:	4628      	mov	r0, r5
 80046a8:	f000 f80c 	bl	80046c4 <__swsetup_r>
 80046ac:	2800      	cmp	r0, #0
 80046ae:	d0cb      	beq.n	8004648 <__swbuf_r+0x28>
 80046b0:	f04f 37ff 	mov.w	r7, #4294967295
 80046b4:	e7ea      	b.n	800468c <__swbuf_r+0x6c>
 80046b6:	bf00      	nop
 80046b8:	0800502c 	.word	0x0800502c
 80046bc:	0800504c 	.word	0x0800504c
 80046c0:	0800500c 	.word	0x0800500c

080046c4 <__swsetup_r>:
 80046c4:	4b32      	ldr	r3, [pc, #200]	; (8004790 <__swsetup_r+0xcc>)
 80046c6:	b570      	push	{r4, r5, r6, lr}
 80046c8:	681d      	ldr	r5, [r3, #0]
 80046ca:	4606      	mov	r6, r0
 80046cc:	460c      	mov	r4, r1
 80046ce:	b125      	cbz	r5, 80046da <__swsetup_r+0x16>
 80046d0:	69ab      	ldr	r3, [r5, #24]
 80046d2:	b913      	cbnz	r3, 80046da <__swsetup_r+0x16>
 80046d4:	4628      	mov	r0, r5
 80046d6:	f000 f985 	bl	80049e4 <__sinit>
 80046da:	4b2e      	ldr	r3, [pc, #184]	; (8004794 <__swsetup_r+0xd0>)
 80046dc:	429c      	cmp	r4, r3
 80046de:	d10f      	bne.n	8004700 <__swsetup_r+0x3c>
 80046e0:	686c      	ldr	r4, [r5, #4]
 80046e2:	89a3      	ldrh	r3, [r4, #12]
 80046e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046e8:	0719      	lsls	r1, r3, #28
 80046ea:	d42c      	bmi.n	8004746 <__swsetup_r+0x82>
 80046ec:	06dd      	lsls	r5, r3, #27
 80046ee:	d411      	bmi.n	8004714 <__swsetup_r+0x50>
 80046f0:	2309      	movs	r3, #9
 80046f2:	6033      	str	r3, [r6, #0]
 80046f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80046f8:	81a3      	strh	r3, [r4, #12]
 80046fa:	f04f 30ff 	mov.w	r0, #4294967295
 80046fe:	e03e      	b.n	800477e <__swsetup_r+0xba>
 8004700:	4b25      	ldr	r3, [pc, #148]	; (8004798 <__swsetup_r+0xd4>)
 8004702:	429c      	cmp	r4, r3
 8004704:	d101      	bne.n	800470a <__swsetup_r+0x46>
 8004706:	68ac      	ldr	r4, [r5, #8]
 8004708:	e7eb      	b.n	80046e2 <__swsetup_r+0x1e>
 800470a:	4b24      	ldr	r3, [pc, #144]	; (800479c <__swsetup_r+0xd8>)
 800470c:	429c      	cmp	r4, r3
 800470e:	bf08      	it	eq
 8004710:	68ec      	ldreq	r4, [r5, #12]
 8004712:	e7e6      	b.n	80046e2 <__swsetup_r+0x1e>
 8004714:	0758      	lsls	r0, r3, #29
 8004716:	d512      	bpl.n	800473e <__swsetup_r+0x7a>
 8004718:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800471a:	b141      	cbz	r1, 800472e <__swsetup_r+0x6a>
 800471c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004720:	4299      	cmp	r1, r3
 8004722:	d002      	beq.n	800472a <__swsetup_r+0x66>
 8004724:	4630      	mov	r0, r6
 8004726:	f7ff fb9d 	bl	8003e64 <_free_r>
 800472a:	2300      	movs	r3, #0
 800472c:	6363      	str	r3, [r4, #52]	; 0x34
 800472e:	89a3      	ldrh	r3, [r4, #12]
 8004730:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004734:	81a3      	strh	r3, [r4, #12]
 8004736:	2300      	movs	r3, #0
 8004738:	6063      	str	r3, [r4, #4]
 800473a:	6923      	ldr	r3, [r4, #16]
 800473c:	6023      	str	r3, [r4, #0]
 800473e:	89a3      	ldrh	r3, [r4, #12]
 8004740:	f043 0308 	orr.w	r3, r3, #8
 8004744:	81a3      	strh	r3, [r4, #12]
 8004746:	6923      	ldr	r3, [r4, #16]
 8004748:	b94b      	cbnz	r3, 800475e <__swsetup_r+0x9a>
 800474a:	89a3      	ldrh	r3, [r4, #12]
 800474c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004754:	d003      	beq.n	800475e <__swsetup_r+0x9a>
 8004756:	4621      	mov	r1, r4
 8004758:	4630      	mov	r0, r6
 800475a:	f000 fa09 	bl	8004b70 <__smakebuf_r>
 800475e:	89a0      	ldrh	r0, [r4, #12]
 8004760:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004764:	f010 0301 	ands.w	r3, r0, #1
 8004768:	d00a      	beq.n	8004780 <__swsetup_r+0xbc>
 800476a:	2300      	movs	r3, #0
 800476c:	60a3      	str	r3, [r4, #8]
 800476e:	6963      	ldr	r3, [r4, #20]
 8004770:	425b      	negs	r3, r3
 8004772:	61a3      	str	r3, [r4, #24]
 8004774:	6923      	ldr	r3, [r4, #16]
 8004776:	b943      	cbnz	r3, 800478a <__swsetup_r+0xc6>
 8004778:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800477c:	d1ba      	bne.n	80046f4 <__swsetup_r+0x30>
 800477e:	bd70      	pop	{r4, r5, r6, pc}
 8004780:	0781      	lsls	r1, r0, #30
 8004782:	bf58      	it	pl
 8004784:	6963      	ldrpl	r3, [r4, #20]
 8004786:	60a3      	str	r3, [r4, #8]
 8004788:	e7f4      	b.n	8004774 <__swsetup_r+0xb0>
 800478a:	2000      	movs	r0, #0
 800478c:	e7f7      	b.n	800477e <__swsetup_r+0xba>
 800478e:	bf00      	nop
 8004790:	2000000c 	.word	0x2000000c
 8004794:	0800502c 	.word	0x0800502c
 8004798:	0800504c 	.word	0x0800504c
 800479c:	0800500c 	.word	0x0800500c

080047a0 <abort>:
 80047a0:	b508      	push	{r3, lr}
 80047a2:	2006      	movs	r0, #6
 80047a4:	f000 fa58 	bl	8004c58 <raise>
 80047a8:	2001      	movs	r0, #1
 80047aa:	f7fc fa95 	bl	8000cd8 <_exit>
	...

080047b0 <__sflush_r>:
 80047b0:	898a      	ldrh	r2, [r1, #12]
 80047b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047b6:	4605      	mov	r5, r0
 80047b8:	0710      	lsls	r0, r2, #28
 80047ba:	460c      	mov	r4, r1
 80047bc:	d458      	bmi.n	8004870 <__sflush_r+0xc0>
 80047be:	684b      	ldr	r3, [r1, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	dc05      	bgt.n	80047d0 <__sflush_r+0x20>
 80047c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	dc02      	bgt.n	80047d0 <__sflush_r+0x20>
 80047ca:	2000      	movs	r0, #0
 80047cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047d2:	2e00      	cmp	r6, #0
 80047d4:	d0f9      	beq.n	80047ca <__sflush_r+0x1a>
 80047d6:	2300      	movs	r3, #0
 80047d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047dc:	682f      	ldr	r7, [r5, #0]
 80047de:	602b      	str	r3, [r5, #0]
 80047e0:	d032      	beq.n	8004848 <__sflush_r+0x98>
 80047e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047e4:	89a3      	ldrh	r3, [r4, #12]
 80047e6:	075a      	lsls	r2, r3, #29
 80047e8:	d505      	bpl.n	80047f6 <__sflush_r+0x46>
 80047ea:	6863      	ldr	r3, [r4, #4]
 80047ec:	1ac0      	subs	r0, r0, r3
 80047ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047f0:	b10b      	cbz	r3, 80047f6 <__sflush_r+0x46>
 80047f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047f4:	1ac0      	subs	r0, r0, r3
 80047f6:	2300      	movs	r3, #0
 80047f8:	4602      	mov	r2, r0
 80047fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047fc:	6a21      	ldr	r1, [r4, #32]
 80047fe:	4628      	mov	r0, r5
 8004800:	47b0      	blx	r6
 8004802:	1c43      	adds	r3, r0, #1
 8004804:	89a3      	ldrh	r3, [r4, #12]
 8004806:	d106      	bne.n	8004816 <__sflush_r+0x66>
 8004808:	6829      	ldr	r1, [r5, #0]
 800480a:	291d      	cmp	r1, #29
 800480c:	d82c      	bhi.n	8004868 <__sflush_r+0xb8>
 800480e:	4a2a      	ldr	r2, [pc, #168]	; (80048b8 <__sflush_r+0x108>)
 8004810:	40ca      	lsrs	r2, r1
 8004812:	07d6      	lsls	r6, r2, #31
 8004814:	d528      	bpl.n	8004868 <__sflush_r+0xb8>
 8004816:	2200      	movs	r2, #0
 8004818:	6062      	str	r2, [r4, #4]
 800481a:	04d9      	lsls	r1, r3, #19
 800481c:	6922      	ldr	r2, [r4, #16]
 800481e:	6022      	str	r2, [r4, #0]
 8004820:	d504      	bpl.n	800482c <__sflush_r+0x7c>
 8004822:	1c42      	adds	r2, r0, #1
 8004824:	d101      	bne.n	800482a <__sflush_r+0x7a>
 8004826:	682b      	ldr	r3, [r5, #0]
 8004828:	b903      	cbnz	r3, 800482c <__sflush_r+0x7c>
 800482a:	6560      	str	r0, [r4, #84]	; 0x54
 800482c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800482e:	602f      	str	r7, [r5, #0]
 8004830:	2900      	cmp	r1, #0
 8004832:	d0ca      	beq.n	80047ca <__sflush_r+0x1a>
 8004834:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004838:	4299      	cmp	r1, r3
 800483a:	d002      	beq.n	8004842 <__sflush_r+0x92>
 800483c:	4628      	mov	r0, r5
 800483e:	f7ff fb11 	bl	8003e64 <_free_r>
 8004842:	2000      	movs	r0, #0
 8004844:	6360      	str	r0, [r4, #52]	; 0x34
 8004846:	e7c1      	b.n	80047cc <__sflush_r+0x1c>
 8004848:	6a21      	ldr	r1, [r4, #32]
 800484a:	2301      	movs	r3, #1
 800484c:	4628      	mov	r0, r5
 800484e:	47b0      	blx	r6
 8004850:	1c41      	adds	r1, r0, #1
 8004852:	d1c7      	bne.n	80047e4 <__sflush_r+0x34>
 8004854:	682b      	ldr	r3, [r5, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d0c4      	beq.n	80047e4 <__sflush_r+0x34>
 800485a:	2b1d      	cmp	r3, #29
 800485c:	d001      	beq.n	8004862 <__sflush_r+0xb2>
 800485e:	2b16      	cmp	r3, #22
 8004860:	d101      	bne.n	8004866 <__sflush_r+0xb6>
 8004862:	602f      	str	r7, [r5, #0]
 8004864:	e7b1      	b.n	80047ca <__sflush_r+0x1a>
 8004866:	89a3      	ldrh	r3, [r4, #12]
 8004868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800486c:	81a3      	strh	r3, [r4, #12]
 800486e:	e7ad      	b.n	80047cc <__sflush_r+0x1c>
 8004870:	690f      	ldr	r7, [r1, #16]
 8004872:	2f00      	cmp	r7, #0
 8004874:	d0a9      	beq.n	80047ca <__sflush_r+0x1a>
 8004876:	0793      	lsls	r3, r2, #30
 8004878:	680e      	ldr	r6, [r1, #0]
 800487a:	bf08      	it	eq
 800487c:	694b      	ldreq	r3, [r1, #20]
 800487e:	600f      	str	r7, [r1, #0]
 8004880:	bf18      	it	ne
 8004882:	2300      	movne	r3, #0
 8004884:	eba6 0807 	sub.w	r8, r6, r7
 8004888:	608b      	str	r3, [r1, #8]
 800488a:	f1b8 0f00 	cmp.w	r8, #0
 800488e:	dd9c      	ble.n	80047ca <__sflush_r+0x1a>
 8004890:	6a21      	ldr	r1, [r4, #32]
 8004892:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004894:	4643      	mov	r3, r8
 8004896:	463a      	mov	r2, r7
 8004898:	4628      	mov	r0, r5
 800489a:	47b0      	blx	r6
 800489c:	2800      	cmp	r0, #0
 800489e:	dc06      	bgt.n	80048ae <__sflush_r+0xfe>
 80048a0:	89a3      	ldrh	r3, [r4, #12]
 80048a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048a6:	81a3      	strh	r3, [r4, #12]
 80048a8:	f04f 30ff 	mov.w	r0, #4294967295
 80048ac:	e78e      	b.n	80047cc <__sflush_r+0x1c>
 80048ae:	4407      	add	r7, r0
 80048b0:	eba8 0800 	sub.w	r8, r8, r0
 80048b4:	e7e9      	b.n	800488a <__sflush_r+0xda>
 80048b6:	bf00      	nop
 80048b8:	20400001 	.word	0x20400001

080048bc <_fflush_r>:
 80048bc:	b538      	push	{r3, r4, r5, lr}
 80048be:	690b      	ldr	r3, [r1, #16]
 80048c0:	4605      	mov	r5, r0
 80048c2:	460c      	mov	r4, r1
 80048c4:	b913      	cbnz	r3, 80048cc <_fflush_r+0x10>
 80048c6:	2500      	movs	r5, #0
 80048c8:	4628      	mov	r0, r5
 80048ca:	bd38      	pop	{r3, r4, r5, pc}
 80048cc:	b118      	cbz	r0, 80048d6 <_fflush_r+0x1a>
 80048ce:	6983      	ldr	r3, [r0, #24]
 80048d0:	b90b      	cbnz	r3, 80048d6 <_fflush_r+0x1a>
 80048d2:	f000 f887 	bl	80049e4 <__sinit>
 80048d6:	4b14      	ldr	r3, [pc, #80]	; (8004928 <_fflush_r+0x6c>)
 80048d8:	429c      	cmp	r4, r3
 80048da:	d11b      	bne.n	8004914 <_fflush_r+0x58>
 80048dc:	686c      	ldr	r4, [r5, #4]
 80048de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0ef      	beq.n	80048c6 <_fflush_r+0xa>
 80048e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80048e8:	07d0      	lsls	r0, r2, #31
 80048ea:	d404      	bmi.n	80048f6 <_fflush_r+0x3a>
 80048ec:	0599      	lsls	r1, r3, #22
 80048ee:	d402      	bmi.n	80048f6 <_fflush_r+0x3a>
 80048f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048f2:	f000 f915 	bl	8004b20 <__retarget_lock_acquire_recursive>
 80048f6:	4628      	mov	r0, r5
 80048f8:	4621      	mov	r1, r4
 80048fa:	f7ff ff59 	bl	80047b0 <__sflush_r>
 80048fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004900:	07da      	lsls	r2, r3, #31
 8004902:	4605      	mov	r5, r0
 8004904:	d4e0      	bmi.n	80048c8 <_fflush_r+0xc>
 8004906:	89a3      	ldrh	r3, [r4, #12]
 8004908:	059b      	lsls	r3, r3, #22
 800490a:	d4dd      	bmi.n	80048c8 <_fflush_r+0xc>
 800490c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800490e:	f000 f908 	bl	8004b22 <__retarget_lock_release_recursive>
 8004912:	e7d9      	b.n	80048c8 <_fflush_r+0xc>
 8004914:	4b05      	ldr	r3, [pc, #20]	; (800492c <_fflush_r+0x70>)
 8004916:	429c      	cmp	r4, r3
 8004918:	d101      	bne.n	800491e <_fflush_r+0x62>
 800491a:	68ac      	ldr	r4, [r5, #8]
 800491c:	e7df      	b.n	80048de <_fflush_r+0x22>
 800491e:	4b04      	ldr	r3, [pc, #16]	; (8004930 <_fflush_r+0x74>)
 8004920:	429c      	cmp	r4, r3
 8004922:	bf08      	it	eq
 8004924:	68ec      	ldreq	r4, [r5, #12]
 8004926:	e7da      	b.n	80048de <_fflush_r+0x22>
 8004928:	0800502c 	.word	0x0800502c
 800492c:	0800504c 	.word	0x0800504c
 8004930:	0800500c 	.word	0x0800500c

08004934 <std>:
 8004934:	2300      	movs	r3, #0
 8004936:	b510      	push	{r4, lr}
 8004938:	4604      	mov	r4, r0
 800493a:	e9c0 3300 	strd	r3, r3, [r0]
 800493e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004942:	6083      	str	r3, [r0, #8]
 8004944:	8181      	strh	r1, [r0, #12]
 8004946:	6643      	str	r3, [r0, #100]	; 0x64
 8004948:	81c2      	strh	r2, [r0, #14]
 800494a:	6183      	str	r3, [r0, #24]
 800494c:	4619      	mov	r1, r3
 800494e:	2208      	movs	r2, #8
 8004950:	305c      	adds	r0, #92	; 0x5c
 8004952:	f7ff f95f 	bl	8003c14 <memset>
 8004956:	4b05      	ldr	r3, [pc, #20]	; (800496c <std+0x38>)
 8004958:	6263      	str	r3, [r4, #36]	; 0x24
 800495a:	4b05      	ldr	r3, [pc, #20]	; (8004970 <std+0x3c>)
 800495c:	62a3      	str	r3, [r4, #40]	; 0x28
 800495e:	4b05      	ldr	r3, [pc, #20]	; (8004974 <std+0x40>)
 8004960:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004962:	4b05      	ldr	r3, [pc, #20]	; (8004978 <std+0x44>)
 8004964:	6224      	str	r4, [r4, #32]
 8004966:	6323      	str	r3, [r4, #48]	; 0x30
 8004968:	bd10      	pop	{r4, pc}
 800496a:	bf00      	nop
 800496c:	08004c91 	.word	0x08004c91
 8004970:	08004cb3 	.word	0x08004cb3
 8004974:	08004ceb 	.word	0x08004ceb
 8004978:	08004d0f 	.word	0x08004d0f

0800497c <_cleanup_r>:
 800497c:	4901      	ldr	r1, [pc, #4]	; (8004984 <_cleanup_r+0x8>)
 800497e:	f000 b8af 	b.w	8004ae0 <_fwalk_reent>
 8004982:	bf00      	nop
 8004984:	080048bd 	.word	0x080048bd

08004988 <__sfmoreglue>:
 8004988:	b570      	push	{r4, r5, r6, lr}
 800498a:	2268      	movs	r2, #104	; 0x68
 800498c:	1e4d      	subs	r5, r1, #1
 800498e:	4355      	muls	r5, r2
 8004990:	460e      	mov	r6, r1
 8004992:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004996:	f7ff fad1 	bl	8003f3c <_malloc_r>
 800499a:	4604      	mov	r4, r0
 800499c:	b140      	cbz	r0, 80049b0 <__sfmoreglue+0x28>
 800499e:	2100      	movs	r1, #0
 80049a0:	e9c0 1600 	strd	r1, r6, [r0]
 80049a4:	300c      	adds	r0, #12
 80049a6:	60a0      	str	r0, [r4, #8]
 80049a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80049ac:	f7ff f932 	bl	8003c14 <memset>
 80049b0:	4620      	mov	r0, r4
 80049b2:	bd70      	pop	{r4, r5, r6, pc}

080049b4 <__sfp_lock_acquire>:
 80049b4:	4801      	ldr	r0, [pc, #4]	; (80049bc <__sfp_lock_acquire+0x8>)
 80049b6:	f000 b8b3 	b.w	8004b20 <__retarget_lock_acquire_recursive>
 80049ba:	bf00      	nop
 80049bc:	20000929 	.word	0x20000929

080049c0 <__sfp_lock_release>:
 80049c0:	4801      	ldr	r0, [pc, #4]	; (80049c8 <__sfp_lock_release+0x8>)
 80049c2:	f000 b8ae 	b.w	8004b22 <__retarget_lock_release_recursive>
 80049c6:	bf00      	nop
 80049c8:	20000929 	.word	0x20000929

080049cc <__sinit_lock_acquire>:
 80049cc:	4801      	ldr	r0, [pc, #4]	; (80049d4 <__sinit_lock_acquire+0x8>)
 80049ce:	f000 b8a7 	b.w	8004b20 <__retarget_lock_acquire_recursive>
 80049d2:	bf00      	nop
 80049d4:	2000092a 	.word	0x2000092a

080049d8 <__sinit_lock_release>:
 80049d8:	4801      	ldr	r0, [pc, #4]	; (80049e0 <__sinit_lock_release+0x8>)
 80049da:	f000 b8a2 	b.w	8004b22 <__retarget_lock_release_recursive>
 80049de:	bf00      	nop
 80049e0:	2000092a 	.word	0x2000092a

080049e4 <__sinit>:
 80049e4:	b510      	push	{r4, lr}
 80049e6:	4604      	mov	r4, r0
 80049e8:	f7ff fff0 	bl	80049cc <__sinit_lock_acquire>
 80049ec:	69a3      	ldr	r3, [r4, #24]
 80049ee:	b11b      	cbz	r3, 80049f8 <__sinit+0x14>
 80049f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049f4:	f7ff bff0 	b.w	80049d8 <__sinit_lock_release>
 80049f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80049fc:	6523      	str	r3, [r4, #80]	; 0x50
 80049fe:	4b13      	ldr	r3, [pc, #76]	; (8004a4c <__sinit+0x68>)
 8004a00:	4a13      	ldr	r2, [pc, #76]	; (8004a50 <__sinit+0x6c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	62a2      	str	r2, [r4, #40]	; 0x28
 8004a06:	42a3      	cmp	r3, r4
 8004a08:	bf04      	itt	eq
 8004a0a:	2301      	moveq	r3, #1
 8004a0c:	61a3      	streq	r3, [r4, #24]
 8004a0e:	4620      	mov	r0, r4
 8004a10:	f000 f820 	bl	8004a54 <__sfp>
 8004a14:	6060      	str	r0, [r4, #4]
 8004a16:	4620      	mov	r0, r4
 8004a18:	f000 f81c 	bl	8004a54 <__sfp>
 8004a1c:	60a0      	str	r0, [r4, #8]
 8004a1e:	4620      	mov	r0, r4
 8004a20:	f000 f818 	bl	8004a54 <__sfp>
 8004a24:	2200      	movs	r2, #0
 8004a26:	60e0      	str	r0, [r4, #12]
 8004a28:	2104      	movs	r1, #4
 8004a2a:	6860      	ldr	r0, [r4, #4]
 8004a2c:	f7ff ff82 	bl	8004934 <std>
 8004a30:	68a0      	ldr	r0, [r4, #8]
 8004a32:	2201      	movs	r2, #1
 8004a34:	2109      	movs	r1, #9
 8004a36:	f7ff ff7d 	bl	8004934 <std>
 8004a3a:	68e0      	ldr	r0, [r4, #12]
 8004a3c:	2202      	movs	r2, #2
 8004a3e:	2112      	movs	r1, #18
 8004a40:	f7ff ff78 	bl	8004934 <std>
 8004a44:	2301      	movs	r3, #1
 8004a46:	61a3      	str	r3, [r4, #24]
 8004a48:	e7d2      	b.n	80049f0 <__sinit+0xc>
 8004a4a:	bf00      	nop
 8004a4c:	08004e24 	.word	0x08004e24
 8004a50:	0800497d 	.word	0x0800497d

08004a54 <__sfp>:
 8004a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a56:	4607      	mov	r7, r0
 8004a58:	f7ff ffac 	bl	80049b4 <__sfp_lock_acquire>
 8004a5c:	4b1e      	ldr	r3, [pc, #120]	; (8004ad8 <__sfp+0x84>)
 8004a5e:	681e      	ldr	r6, [r3, #0]
 8004a60:	69b3      	ldr	r3, [r6, #24]
 8004a62:	b913      	cbnz	r3, 8004a6a <__sfp+0x16>
 8004a64:	4630      	mov	r0, r6
 8004a66:	f7ff ffbd 	bl	80049e4 <__sinit>
 8004a6a:	3648      	adds	r6, #72	; 0x48
 8004a6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004a70:	3b01      	subs	r3, #1
 8004a72:	d503      	bpl.n	8004a7c <__sfp+0x28>
 8004a74:	6833      	ldr	r3, [r6, #0]
 8004a76:	b30b      	cbz	r3, 8004abc <__sfp+0x68>
 8004a78:	6836      	ldr	r6, [r6, #0]
 8004a7a:	e7f7      	b.n	8004a6c <__sfp+0x18>
 8004a7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a80:	b9d5      	cbnz	r5, 8004ab8 <__sfp+0x64>
 8004a82:	4b16      	ldr	r3, [pc, #88]	; (8004adc <__sfp+0x88>)
 8004a84:	60e3      	str	r3, [r4, #12]
 8004a86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004a8a:	6665      	str	r5, [r4, #100]	; 0x64
 8004a8c:	f000 f847 	bl	8004b1e <__retarget_lock_init_recursive>
 8004a90:	f7ff ff96 	bl	80049c0 <__sfp_lock_release>
 8004a94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004a98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004a9c:	6025      	str	r5, [r4, #0]
 8004a9e:	61a5      	str	r5, [r4, #24]
 8004aa0:	2208      	movs	r2, #8
 8004aa2:	4629      	mov	r1, r5
 8004aa4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004aa8:	f7ff f8b4 	bl	8003c14 <memset>
 8004aac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004ab0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ab8:	3468      	adds	r4, #104	; 0x68
 8004aba:	e7d9      	b.n	8004a70 <__sfp+0x1c>
 8004abc:	2104      	movs	r1, #4
 8004abe:	4638      	mov	r0, r7
 8004ac0:	f7ff ff62 	bl	8004988 <__sfmoreglue>
 8004ac4:	4604      	mov	r4, r0
 8004ac6:	6030      	str	r0, [r6, #0]
 8004ac8:	2800      	cmp	r0, #0
 8004aca:	d1d5      	bne.n	8004a78 <__sfp+0x24>
 8004acc:	f7ff ff78 	bl	80049c0 <__sfp_lock_release>
 8004ad0:	230c      	movs	r3, #12
 8004ad2:	603b      	str	r3, [r7, #0]
 8004ad4:	e7ee      	b.n	8004ab4 <__sfp+0x60>
 8004ad6:	bf00      	nop
 8004ad8:	08004e24 	.word	0x08004e24
 8004adc:	ffff0001 	.word	0xffff0001

08004ae0 <_fwalk_reent>:
 8004ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ae4:	4606      	mov	r6, r0
 8004ae6:	4688      	mov	r8, r1
 8004ae8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004aec:	2700      	movs	r7, #0
 8004aee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004af2:	f1b9 0901 	subs.w	r9, r9, #1
 8004af6:	d505      	bpl.n	8004b04 <_fwalk_reent+0x24>
 8004af8:	6824      	ldr	r4, [r4, #0]
 8004afa:	2c00      	cmp	r4, #0
 8004afc:	d1f7      	bne.n	8004aee <_fwalk_reent+0xe>
 8004afe:	4638      	mov	r0, r7
 8004b00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b04:	89ab      	ldrh	r3, [r5, #12]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d907      	bls.n	8004b1a <_fwalk_reent+0x3a>
 8004b0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	d003      	beq.n	8004b1a <_fwalk_reent+0x3a>
 8004b12:	4629      	mov	r1, r5
 8004b14:	4630      	mov	r0, r6
 8004b16:	47c0      	blx	r8
 8004b18:	4307      	orrs	r7, r0
 8004b1a:	3568      	adds	r5, #104	; 0x68
 8004b1c:	e7e9      	b.n	8004af2 <_fwalk_reent+0x12>

08004b1e <__retarget_lock_init_recursive>:
 8004b1e:	4770      	bx	lr

08004b20 <__retarget_lock_acquire_recursive>:
 8004b20:	4770      	bx	lr

08004b22 <__retarget_lock_release_recursive>:
 8004b22:	4770      	bx	lr

08004b24 <__swhatbuf_r>:
 8004b24:	b570      	push	{r4, r5, r6, lr}
 8004b26:	460e      	mov	r6, r1
 8004b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b2c:	2900      	cmp	r1, #0
 8004b2e:	b096      	sub	sp, #88	; 0x58
 8004b30:	4614      	mov	r4, r2
 8004b32:	461d      	mov	r5, r3
 8004b34:	da08      	bge.n	8004b48 <__swhatbuf_r+0x24>
 8004b36:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	602a      	str	r2, [r5, #0]
 8004b3e:	061a      	lsls	r2, r3, #24
 8004b40:	d410      	bmi.n	8004b64 <__swhatbuf_r+0x40>
 8004b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b46:	e00e      	b.n	8004b66 <__swhatbuf_r+0x42>
 8004b48:	466a      	mov	r2, sp
 8004b4a:	f000 f907 	bl	8004d5c <_fstat_r>
 8004b4e:	2800      	cmp	r0, #0
 8004b50:	dbf1      	blt.n	8004b36 <__swhatbuf_r+0x12>
 8004b52:	9a01      	ldr	r2, [sp, #4]
 8004b54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004b58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004b5c:	425a      	negs	r2, r3
 8004b5e:	415a      	adcs	r2, r3
 8004b60:	602a      	str	r2, [r5, #0]
 8004b62:	e7ee      	b.n	8004b42 <__swhatbuf_r+0x1e>
 8004b64:	2340      	movs	r3, #64	; 0x40
 8004b66:	2000      	movs	r0, #0
 8004b68:	6023      	str	r3, [r4, #0]
 8004b6a:	b016      	add	sp, #88	; 0x58
 8004b6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004b70 <__smakebuf_r>:
 8004b70:	898b      	ldrh	r3, [r1, #12]
 8004b72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b74:	079d      	lsls	r5, r3, #30
 8004b76:	4606      	mov	r6, r0
 8004b78:	460c      	mov	r4, r1
 8004b7a:	d507      	bpl.n	8004b8c <__smakebuf_r+0x1c>
 8004b7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b80:	6023      	str	r3, [r4, #0]
 8004b82:	6123      	str	r3, [r4, #16]
 8004b84:	2301      	movs	r3, #1
 8004b86:	6163      	str	r3, [r4, #20]
 8004b88:	b002      	add	sp, #8
 8004b8a:	bd70      	pop	{r4, r5, r6, pc}
 8004b8c:	ab01      	add	r3, sp, #4
 8004b8e:	466a      	mov	r2, sp
 8004b90:	f7ff ffc8 	bl	8004b24 <__swhatbuf_r>
 8004b94:	9900      	ldr	r1, [sp, #0]
 8004b96:	4605      	mov	r5, r0
 8004b98:	4630      	mov	r0, r6
 8004b9a:	f7ff f9cf 	bl	8003f3c <_malloc_r>
 8004b9e:	b948      	cbnz	r0, 8004bb4 <__smakebuf_r+0x44>
 8004ba0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ba4:	059a      	lsls	r2, r3, #22
 8004ba6:	d4ef      	bmi.n	8004b88 <__smakebuf_r+0x18>
 8004ba8:	f023 0303 	bic.w	r3, r3, #3
 8004bac:	f043 0302 	orr.w	r3, r3, #2
 8004bb0:	81a3      	strh	r3, [r4, #12]
 8004bb2:	e7e3      	b.n	8004b7c <__smakebuf_r+0xc>
 8004bb4:	4b0d      	ldr	r3, [pc, #52]	; (8004bec <__smakebuf_r+0x7c>)
 8004bb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8004bb8:	89a3      	ldrh	r3, [r4, #12]
 8004bba:	6020      	str	r0, [r4, #0]
 8004bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bc0:	81a3      	strh	r3, [r4, #12]
 8004bc2:	9b00      	ldr	r3, [sp, #0]
 8004bc4:	6163      	str	r3, [r4, #20]
 8004bc6:	9b01      	ldr	r3, [sp, #4]
 8004bc8:	6120      	str	r0, [r4, #16]
 8004bca:	b15b      	cbz	r3, 8004be4 <__smakebuf_r+0x74>
 8004bcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bd0:	4630      	mov	r0, r6
 8004bd2:	f000 f8d5 	bl	8004d80 <_isatty_r>
 8004bd6:	b128      	cbz	r0, 8004be4 <__smakebuf_r+0x74>
 8004bd8:	89a3      	ldrh	r3, [r4, #12]
 8004bda:	f023 0303 	bic.w	r3, r3, #3
 8004bde:	f043 0301 	orr.w	r3, r3, #1
 8004be2:	81a3      	strh	r3, [r4, #12]
 8004be4:	89a0      	ldrh	r0, [r4, #12]
 8004be6:	4305      	orrs	r5, r0
 8004be8:	81a5      	strh	r5, [r4, #12]
 8004bea:	e7cd      	b.n	8004b88 <__smakebuf_r+0x18>
 8004bec:	0800497d 	.word	0x0800497d

08004bf0 <__malloc_lock>:
 8004bf0:	4801      	ldr	r0, [pc, #4]	; (8004bf8 <__malloc_lock+0x8>)
 8004bf2:	f7ff bf95 	b.w	8004b20 <__retarget_lock_acquire_recursive>
 8004bf6:	bf00      	nop
 8004bf8:	20000928 	.word	0x20000928

08004bfc <__malloc_unlock>:
 8004bfc:	4801      	ldr	r0, [pc, #4]	; (8004c04 <__malloc_unlock+0x8>)
 8004bfe:	f7ff bf90 	b.w	8004b22 <__retarget_lock_release_recursive>
 8004c02:	bf00      	nop
 8004c04:	20000928 	.word	0x20000928

08004c08 <_raise_r>:
 8004c08:	291f      	cmp	r1, #31
 8004c0a:	b538      	push	{r3, r4, r5, lr}
 8004c0c:	4604      	mov	r4, r0
 8004c0e:	460d      	mov	r5, r1
 8004c10:	d904      	bls.n	8004c1c <_raise_r+0x14>
 8004c12:	2316      	movs	r3, #22
 8004c14:	6003      	str	r3, [r0, #0]
 8004c16:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1a:	bd38      	pop	{r3, r4, r5, pc}
 8004c1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004c1e:	b112      	cbz	r2, 8004c26 <_raise_r+0x1e>
 8004c20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004c24:	b94b      	cbnz	r3, 8004c3a <_raise_r+0x32>
 8004c26:	4620      	mov	r0, r4
 8004c28:	f000 f830 	bl	8004c8c <_getpid_r>
 8004c2c:	462a      	mov	r2, r5
 8004c2e:	4601      	mov	r1, r0
 8004c30:	4620      	mov	r0, r4
 8004c32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c36:	f000 b817 	b.w	8004c68 <_kill_r>
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d00a      	beq.n	8004c54 <_raise_r+0x4c>
 8004c3e:	1c59      	adds	r1, r3, #1
 8004c40:	d103      	bne.n	8004c4a <_raise_r+0x42>
 8004c42:	2316      	movs	r3, #22
 8004c44:	6003      	str	r3, [r0, #0]
 8004c46:	2001      	movs	r0, #1
 8004c48:	e7e7      	b.n	8004c1a <_raise_r+0x12>
 8004c4a:	2400      	movs	r4, #0
 8004c4c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004c50:	4628      	mov	r0, r5
 8004c52:	4798      	blx	r3
 8004c54:	2000      	movs	r0, #0
 8004c56:	e7e0      	b.n	8004c1a <_raise_r+0x12>

08004c58 <raise>:
 8004c58:	4b02      	ldr	r3, [pc, #8]	; (8004c64 <raise+0xc>)
 8004c5a:	4601      	mov	r1, r0
 8004c5c:	6818      	ldr	r0, [r3, #0]
 8004c5e:	f7ff bfd3 	b.w	8004c08 <_raise_r>
 8004c62:	bf00      	nop
 8004c64:	2000000c 	.word	0x2000000c

08004c68 <_kill_r>:
 8004c68:	b538      	push	{r3, r4, r5, lr}
 8004c6a:	4d07      	ldr	r5, [pc, #28]	; (8004c88 <_kill_r+0x20>)
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	4604      	mov	r4, r0
 8004c70:	4608      	mov	r0, r1
 8004c72:	4611      	mov	r1, r2
 8004c74:	602b      	str	r3, [r5, #0]
 8004c76:	f7fc f81f 	bl	8000cb8 <_kill>
 8004c7a:	1c43      	adds	r3, r0, #1
 8004c7c:	d102      	bne.n	8004c84 <_kill_r+0x1c>
 8004c7e:	682b      	ldr	r3, [r5, #0]
 8004c80:	b103      	cbz	r3, 8004c84 <_kill_r+0x1c>
 8004c82:	6023      	str	r3, [r4, #0]
 8004c84:	bd38      	pop	{r3, r4, r5, pc}
 8004c86:	bf00      	nop
 8004c88:	2000092c 	.word	0x2000092c

08004c8c <_getpid_r>:
 8004c8c:	f7fc b80c 	b.w	8000ca8 <_getpid>

08004c90 <__sread>:
 8004c90:	b510      	push	{r4, lr}
 8004c92:	460c      	mov	r4, r1
 8004c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c98:	f000 f894 	bl	8004dc4 <_read_r>
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	bfab      	itete	ge
 8004ca0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004ca2:	89a3      	ldrhlt	r3, [r4, #12]
 8004ca4:	181b      	addge	r3, r3, r0
 8004ca6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004caa:	bfac      	ite	ge
 8004cac:	6563      	strge	r3, [r4, #84]	; 0x54
 8004cae:	81a3      	strhlt	r3, [r4, #12]
 8004cb0:	bd10      	pop	{r4, pc}

08004cb2 <__swrite>:
 8004cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cb6:	461f      	mov	r7, r3
 8004cb8:	898b      	ldrh	r3, [r1, #12]
 8004cba:	05db      	lsls	r3, r3, #23
 8004cbc:	4605      	mov	r5, r0
 8004cbe:	460c      	mov	r4, r1
 8004cc0:	4616      	mov	r6, r2
 8004cc2:	d505      	bpl.n	8004cd0 <__swrite+0x1e>
 8004cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cc8:	2302      	movs	r3, #2
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f000 f868 	bl	8004da0 <_lseek_r>
 8004cd0:	89a3      	ldrh	r3, [r4, #12]
 8004cd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cda:	81a3      	strh	r3, [r4, #12]
 8004cdc:	4632      	mov	r2, r6
 8004cde:	463b      	mov	r3, r7
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ce6:	f000 b817 	b.w	8004d18 <_write_r>

08004cea <__sseek>:
 8004cea:	b510      	push	{r4, lr}
 8004cec:	460c      	mov	r4, r1
 8004cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cf2:	f000 f855 	bl	8004da0 <_lseek_r>
 8004cf6:	1c43      	adds	r3, r0, #1
 8004cf8:	89a3      	ldrh	r3, [r4, #12]
 8004cfa:	bf15      	itete	ne
 8004cfc:	6560      	strne	r0, [r4, #84]	; 0x54
 8004cfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d06:	81a3      	strheq	r3, [r4, #12]
 8004d08:	bf18      	it	ne
 8004d0a:	81a3      	strhne	r3, [r4, #12]
 8004d0c:	bd10      	pop	{r4, pc}

08004d0e <__sclose>:
 8004d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d12:	f000 b813 	b.w	8004d3c <_close_r>
	...

08004d18 <_write_r>:
 8004d18:	b538      	push	{r3, r4, r5, lr}
 8004d1a:	4d07      	ldr	r5, [pc, #28]	; (8004d38 <_write_r+0x20>)
 8004d1c:	4604      	mov	r4, r0
 8004d1e:	4608      	mov	r0, r1
 8004d20:	4611      	mov	r1, r2
 8004d22:	2200      	movs	r2, #0
 8004d24:	602a      	str	r2, [r5, #0]
 8004d26:	461a      	mov	r2, r3
 8004d28:	f7fb fffd 	bl	8000d26 <_write>
 8004d2c:	1c43      	adds	r3, r0, #1
 8004d2e:	d102      	bne.n	8004d36 <_write_r+0x1e>
 8004d30:	682b      	ldr	r3, [r5, #0]
 8004d32:	b103      	cbz	r3, 8004d36 <_write_r+0x1e>
 8004d34:	6023      	str	r3, [r4, #0]
 8004d36:	bd38      	pop	{r3, r4, r5, pc}
 8004d38:	2000092c 	.word	0x2000092c

08004d3c <_close_r>:
 8004d3c:	b538      	push	{r3, r4, r5, lr}
 8004d3e:	4d06      	ldr	r5, [pc, #24]	; (8004d58 <_close_r+0x1c>)
 8004d40:	2300      	movs	r3, #0
 8004d42:	4604      	mov	r4, r0
 8004d44:	4608      	mov	r0, r1
 8004d46:	602b      	str	r3, [r5, #0]
 8004d48:	f7fc f809 	bl	8000d5e <_close>
 8004d4c:	1c43      	adds	r3, r0, #1
 8004d4e:	d102      	bne.n	8004d56 <_close_r+0x1a>
 8004d50:	682b      	ldr	r3, [r5, #0]
 8004d52:	b103      	cbz	r3, 8004d56 <_close_r+0x1a>
 8004d54:	6023      	str	r3, [r4, #0]
 8004d56:	bd38      	pop	{r3, r4, r5, pc}
 8004d58:	2000092c 	.word	0x2000092c

08004d5c <_fstat_r>:
 8004d5c:	b538      	push	{r3, r4, r5, lr}
 8004d5e:	4d07      	ldr	r5, [pc, #28]	; (8004d7c <_fstat_r+0x20>)
 8004d60:	2300      	movs	r3, #0
 8004d62:	4604      	mov	r4, r0
 8004d64:	4608      	mov	r0, r1
 8004d66:	4611      	mov	r1, r2
 8004d68:	602b      	str	r3, [r5, #0]
 8004d6a:	f7fc f804 	bl	8000d76 <_fstat>
 8004d6e:	1c43      	adds	r3, r0, #1
 8004d70:	d102      	bne.n	8004d78 <_fstat_r+0x1c>
 8004d72:	682b      	ldr	r3, [r5, #0]
 8004d74:	b103      	cbz	r3, 8004d78 <_fstat_r+0x1c>
 8004d76:	6023      	str	r3, [r4, #0]
 8004d78:	bd38      	pop	{r3, r4, r5, pc}
 8004d7a:	bf00      	nop
 8004d7c:	2000092c 	.word	0x2000092c

08004d80 <_isatty_r>:
 8004d80:	b538      	push	{r3, r4, r5, lr}
 8004d82:	4d06      	ldr	r5, [pc, #24]	; (8004d9c <_isatty_r+0x1c>)
 8004d84:	2300      	movs	r3, #0
 8004d86:	4604      	mov	r4, r0
 8004d88:	4608      	mov	r0, r1
 8004d8a:	602b      	str	r3, [r5, #0]
 8004d8c:	f7fc f803 	bl	8000d96 <_isatty>
 8004d90:	1c43      	adds	r3, r0, #1
 8004d92:	d102      	bne.n	8004d9a <_isatty_r+0x1a>
 8004d94:	682b      	ldr	r3, [r5, #0]
 8004d96:	b103      	cbz	r3, 8004d9a <_isatty_r+0x1a>
 8004d98:	6023      	str	r3, [r4, #0]
 8004d9a:	bd38      	pop	{r3, r4, r5, pc}
 8004d9c:	2000092c 	.word	0x2000092c

08004da0 <_lseek_r>:
 8004da0:	b538      	push	{r3, r4, r5, lr}
 8004da2:	4d07      	ldr	r5, [pc, #28]	; (8004dc0 <_lseek_r+0x20>)
 8004da4:	4604      	mov	r4, r0
 8004da6:	4608      	mov	r0, r1
 8004da8:	4611      	mov	r1, r2
 8004daa:	2200      	movs	r2, #0
 8004dac:	602a      	str	r2, [r5, #0]
 8004dae:	461a      	mov	r2, r3
 8004db0:	f7fb fffc 	bl	8000dac <_lseek>
 8004db4:	1c43      	adds	r3, r0, #1
 8004db6:	d102      	bne.n	8004dbe <_lseek_r+0x1e>
 8004db8:	682b      	ldr	r3, [r5, #0]
 8004dba:	b103      	cbz	r3, 8004dbe <_lseek_r+0x1e>
 8004dbc:	6023      	str	r3, [r4, #0]
 8004dbe:	bd38      	pop	{r3, r4, r5, pc}
 8004dc0:	2000092c 	.word	0x2000092c

08004dc4 <_read_r>:
 8004dc4:	b538      	push	{r3, r4, r5, lr}
 8004dc6:	4d07      	ldr	r5, [pc, #28]	; (8004de4 <_read_r+0x20>)
 8004dc8:	4604      	mov	r4, r0
 8004dca:	4608      	mov	r0, r1
 8004dcc:	4611      	mov	r1, r2
 8004dce:	2200      	movs	r2, #0
 8004dd0:	602a      	str	r2, [r5, #0]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	f7fb ff8a 	bl	8000cec <_read>
 8004dd8:	1c43      	adds	r3, r0, #1
 8004dda:	d102      	bne.n	8004de2 <_read_r+0x1e>
 8004ddc:	682b      	ldr	r3, [r5, #0]
 8004dde:	b103      	cbz	r3, 8004de2 <_read_r+0x1e>
 8004de0:	6023      	str	r3, [r4, #0]
 8004de2:	bd38      	pop	{r3, r4, r5, pc}
 8004de4:	2000092c 	.word	0x2000092c

08004de8 <_init>:
 8004de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dea:	bf00      	nop
 8004dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dee:	bc08      	pop	{r3}
 8004df0:	469e      	mov	lr, r3
 8004df2:	4770      	bx	lr

08004df4 <_fini>:
 8004df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df6:	bf00      	nop
 8004df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfa:	bc08      	pop	{r3}
 8004dfc:	469e      	mov	lr, r3
 8004dfe:	4770      	bx	lr
