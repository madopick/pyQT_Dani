
Project_23_03_27.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008660  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08008824  08008824  00018824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089d4  080089d4  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  080089d4  080089d4  000189d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089dc  080089dc  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089dc  080089dc  000189dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089e0  080089e0  000189e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  080089e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ec  20000100  08008ae4  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007ec  08008ae4  000207ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f217  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002406  00000000  00000000  0002f347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  00031750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b40  00000000  00000000  00032340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023576  00000000  00000000  00032e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011fbf  00000000  00000000  000563f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccd04  00000000  00000000  000683b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001350b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036ec  00000000  00000000  0013510c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000100 	.word	0x20000100
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800880c 	.word	0x0800880c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000104 	.word	0x20000104
 8000200:	0800880c 	.word	0x0800880c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <Buffercmp_Byte>:
	}
	printf("Buffer same!!!\r\n");
	return 0;
}

uint16_t Buffercmp_Byte(int32_t pBuffer1[], int32_t pBuffer2[], uint8_t length){
 8000508:	b5b0      	push	{r4, r5, r7, lr}
 800050a:	b096      	sub	sp, #88	; 0x58
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	4613      	mov	r3, r2
 8000514:	71fb      	strb	r3, [r7, #7]
	char send[] = {0x14, 0x15,
 8000516:	4b2d      	ldr	r3, [pc, #180]	; (80005cc <Buffercmp_Byte+0xc4>)
 8000518:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800051c:	461d      	mov	r5, r3
 800051e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000522:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000526:	6020      	str	r0, [r4, #0]
 8000528:	3404      	adds	r4, #4
 800052a:	7021      	strb	r1, [r4, #0]
			'C','o','m','p','a','r','e',' ','p','r','o','c','e','s','s','.','.',0x0d,0x0a};
	HAL_UART_Transmit(&huart2, (uint8_t *)send, 21, 0xFFFF);
 800052c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000530:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000534:	2215      	movs	r2, #21
 8000536:	4826      	ldr	r0, [pc, #152]	; (80005d0 <Buffercmp_Byte+0xc8>)
 8000538:	f006 fa03 	bl	8006942 <HAL_UART_Transmit>
	for (uint8_t i = 0; i < length; i++){
 800053c:	2300      	movs	r3, #0
 800053e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000542:	e029      	b.n	8000598 <Buffercmp_Byte+0x90>
		if (pBuffer1[i]!=pBuffer2[i]){
 8000544:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000548:	009b      	lsls	r3, r3, #2
 800054a:	68fa      	ldr	r2, [r7, #12]
 800054c:	4413      	add	r3, r2
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	68b9      	ldr	r1, [r7, #8]
 8000558:	440b      	add	r3, r1
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	429a      	cmp	r2, r3
 800055e:	d016      	beq.n	800058e <Buffercmp_Byte+0x86>
			char comp[] = {0x14, 0x15,
 8000560:	4b1c      	ldr	r3, [pc, #112]	; (80005d4 <Buffercmp_Byte+0xcc>)
 8000562:	f107 0414 	add.w	r4, r7, #20
 8000566:	461d      	mov	r5, r3
 8000568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800056a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800056c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000570:	6020      	str	r0, [r4, #0]
 8000572:	3404      	adds	r4, #4
 8000574:	8021      	strh	r1, [r4, #0]
					'B','u','f','f','e','r',' ','D','i','f','f','e','r','e','n','t','!','!',0x0d,0x0a};
			HAL_UART_Transmit(&huart2, (uint8_t *)comp, 22, 0xFFFF);
 8000576:	f107 0114 	add.w	r1, r7, #20
 800057a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800057e:	2216      	movs	r2, #22
 8000580:	4813      	ldr	r0, [pc, #76]	; (80005d0 <Buffercmp_Byte+0xc8>)
 8000582:	f006 f9de 	bl	8006942 <HAL_UART_Transmit>
			return i;
 8000586:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800058a:	b29b      	uxth	r3, r3
 800058c:	e01a      	b.n	80005c4 <Buffercmp_Byte+0xbc>
	for (uint8_t i = 0; i < length; i++){
 800058e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000592:	3301      	adds	r3, #1
 8000594:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000598:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	429a      	cmp	r2, r3
 80005a0:	d3d0      	bcc.n	8000544 <Buffercmp_Byte+0x3c>
		}
	}

	char comp[] = {0x14, 0x15,
 80005a2:	4b0d      	ldr	r3, [pc, #52]	; (80005d8 <Buffercmp_Byte+0xd0>)
 80005a4:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80005a8:	461d      	mov	r5, r3
 80005aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ae:	682b      	ldr	r3, [r5, #0]
 80005b0:	7023      	strb	r3, [r4, #0]
		'B','u','f','f','e','r',' ','s','a','m','e','!','!',0x0d,0x0a};
	HAL_UART_Transmit(&huart2, (uint8_t *)comp, 17, 0xFFFF);
 80005b2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80005b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005ba:	2211      	movs	r2, #17
 80005bc:	4804      	ldr	r0, [pc, #16]	; (80005d0 <Buffercmp_Byte+0xc8>)
 80005be:	f006 f9c0 	bl	8006942 <HAL_UART_Transmit>
	return 0;
 80005c2:	2300      	movs	r3, #0
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3758      	adds	r7, #88	; 0x58
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bdb0      	pop	{r4, r5, r7, pc}
 80005cc:	08008860 	.word	0x08008860
 80005d0:	2000011c 	.word	0x2000011c
 80005d4:	08008878 	.word	0x08008878
 80005d8:	08008890 	.word	0x08008890

080005dc <I2C_Master_Transmit>:

void I2C_Master_Transmit() {
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	do
	{
		if(HAL_I2C_Master_Transmit_IT(&I2cHandle, (uint16_t)I2C_ADDRESS, (uint8_t*)aTxBuffer, TXBUFFERSIZE)!= HAL_OK)
 80005e0:	2364      	movs	r3, #100	; 0x64
 80005e2:	4a0d      	ldr	r2, [pc, #52]	; (8000618 <I2C_Master_Transmit+0x3c>)
 80005e4:	f240 310f 	movw	r1, #783	; 0x30f
 80005e8:	480c      	ldr	r0, [pc, #48]	; (800061c <I2C_Master_Transmit+0x40>)
 80005ea:	f003 fd6f 	bl	80040cc <HAL_I2C_Master_Transmit_IT>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <I2C_Master_Transmit+0x1c>
		{Error_Handler();}
 80005f4:	f000 fc7c 	bl	8000ef0 <Error_Handler>

		// Wait transfer data successful
		while (HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY)
 80005f8:	bf00      	nop
 80005fa:	4808      	ldr	r0, [pc, #32]	; (800061c <I2C_Master_Transmit+0x40>)
 80005fc:	f004 f918 	bl	8004830 <HAL_I2C_GetState>
 8000600:	4603      	mov	r3, r0
 8000602:	2b20      	cmp	r3, #32
 8000604:	d1f9      	bne.n	80005fa <I2C_Master_Transmit+0x1e>
		{}
	} while(HAL_I2C_GetError(&I2cHandle) == HAL_I2C_ERROR_AF);
 8000606:	4805      	ldr	r0, [pc, #20]	; (800061c <I2C_Master_Transmit+0x40>)
 8000608:	f004 f920 	bl	800484c <HAL_I2C_GetError>
 800060c:	4603      	mov	r3, r0
 800060e:	2b04      	cmp	r3, #4
 8000610:	d0e6      	beq.n	80005e0 <I2C_Master_Transmit+0x4>
}
 8000612:	bf00      	nop
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000000 	.word	0x20000000
 800061c:	200001c0 	.word	0x200001c0

08000620 <I2C_Master_Receive>:

void I2C_Master_Receive() {
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	do
	{
		if(HAL_I2C_Master_Receive_IT(&I2cHandle, (uint16_t)I2C_ADDRESS, (uint8_t *)aRxBuffer, RXBUFFERSIZE) != HAL_OK) {Error_Handler();}
 8000624:	2364      	movs	r3, #100	; 0x64
 8000626:	4a0d      	ldr	r2, [pc, #52]	; (800065c <I2C_Master_Receive+0x3c>)
 8000628:	f240 310f 	movw	r1, #783	; 0x30f
 800062c:	480c      	ldr	r0, [pc, #48]	; (8000660 <I2C_Master_Receive+0x40>)
 800062e:	f003 fdf3 	bl	8004218 <HAL_I2C_Master_Receive_IT>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <I2C_Master_Receive+0x1c>
 8000638:	f000 fc5a 	bl	8000ef0 <Error_Handler>

		/* Saat Acknowledge failure (Slave tidak mengakui alamatnya) Master memulai ulang komunikasi */
	} while (HAL_I2C_GetError(&I2cHandle) == HAL_I2C_ERROR_AF);
 800063c:	4808      	ldr	r0, [pc, #32]	; (8000660 <I2C_Master_Receive+0x40>)
 800063e:	f004 f905 	bl	800484c <HAL_I2C_GetError>
 8000642:	4603      	mov	r3, r0
 8000644:	2b04      	cmp	r3, #4
 8000646:	d0ed      	beq.n	8000624 <I2C_Master_Receive+0x4>

	// Wait transfer data successful
	while (HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY)
 8000648:	bf00      	nop
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <I2C_Master_Receive+0x40>)
 800064c:	f004 f8f0 	bl	8004830 <HAL_I2C_GetState>
 8000650:	4603      	mov	r3, r0
 8000652:	2b20      	cmp	r3, #32
 8000654:	d1f9      	bne.n	800064a <I2C_Master_Receive+0x2a>
	{}
}
 8000656:	bf00      	nop
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	2000051c 	.word	0x2000051c
 8000660:	200001c0 	.word	0x200001c0

08000664 <Set_aTxBuffer>:
	// Wait for the end of the transfer
	while (HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY)
	{}
}

void Set_aTxBuffer(int16_t idx0, int32_t target[], uint16_t idx_target, uint16_t size){
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
 800066a:	60b9      	str	r1, [r7, #8]
 800066c:	4611      	mov	r1, r2
 800066e:	461a      	mov	r2, r3
 8000670:	4603      	mov	r3, r0
 8000672:	81fb      	strh	r3, [r7, #14]
 8000674:	460b      	mov	r3, r1
 8000676:	81bb      	strh	r3, [r7, #12]
 8000678:	4613      	mov	r3, r2
 800067a:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i=0; i<10; i++){
 800067c:	2300      	movs	r3, #0
 800067e:	75fb      	strb	r3, [r7, #23]
 8000680:	e008      	b.n	8000694 <Set_aTxBuffer+0x30>
		aTxBuffer[i+1] = 0;
 8000682:	7dfb      	ldrb	r3, [r7, #23]
 8000684:	3301      	adds	r3, #1
 8000686:	4a0d      	ldr	r2, [pc, #52]	; (80006bc <Set_aTxBuffer+0x58>)
 8000688:	2100      	movs	r1, #0
 800068a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint8_t i=0; i<10; i++){
 800068e:	7dfb      	ldrb	r3, [r7, #23]
 8000690:	3301      	adds	r3, #1
 8000692:	75fb      	strb	r3, [r7, #23]
 8000694:	7dfb      	ldrb	r3, [r7, #23]
 8000696:	2b09      	cmp	r3, #9
 8000698:	d9f3      	bls.n	8000682 <Set_aTxBuffer+0x1e>
	}
	memcpy(&aTxBuffer[1], &target[idx_target], size);
 800069a:	89bb      	ldrh	r3, [r7, #12]
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	68ba      	ldr	r2, [r7, #8]
 80006a0:	4413      	add	r3, r2
 80006a2:	88fa      	ldrh	r2, [r7, #6]
 80006a4:	4619      	mov	r1, r3
 80006a6:	4806      	ldr	r0, [pc, #24]	; (80006c0 <Set_aTxBuffer+0x5c>)
 80006a8:	f007 fb9c 	bl	8007de4 <memcpy>
	aTxBuffer[0]=idx0;
 80006ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006b0:	4a02      	ldr	r2, [pc, #8]	; (80006bc <Set_aTxBuffer+0x58>)
 80006b2:	6013      	str	r3, [r2, #0]
}
 80006b4:	bf00      	nop
 80006b6:	3718      	adds	r7, #24
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000000 	.word	0x20000000
 80006c0:	20000004 	.word	0x20000004

080006c4 <__io_putchar>:

static uint16_t u16_oldPos = 0;
static uint16_t u16_lenCnt = 0;

/* @brief  Retargets the C library printf function to the USART. */
PUTCHAR_PROTOTYPE {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80006cc:	1d39      	adds	r1, r7, #4
 80006ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006d2:	2201      	movs	r2, #1
 80006d4:	4803      	ldr	r0, [pc, #12]	; (80006e4 <__io_putchar+0x20>)
 80006d6:	f006 f934 	bl	8006942 <HAL_UART_Transmit>
  return ch;
 80006da:	687b      	ldr	r3, [r7, #4]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	2000011c 	.word	0x2000011c

080006e8 <main>:

int32_t temp[30];


int main(void)
{
 80006e8:	b5b0      	push	{r4, r5, r7, lr}
 80006ea:	b0a0      	sub	sp, #128	; 0x80
 80006ec:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ee:	f002 fc29 	bl	8002f44 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80006f2:	f000 fa25 	bl	8000b40 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f6:	f000 fae3 	bl	8000cc0 <MX_GPIO_Init>
  MX_DMA_Init();
 80006fa:	f000 fac1 	bl	8000c80 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006fe:	f000 fa8d 	bl	8000c1c <MX_USART2_UART_Init>

  /*##-1- Configure the I2C peripheral ######################################*/
  I2cHandle.Instance             = I2Cx;
 8000702:	4b3d      	ldr	r3, [pc, #244]	; (80007f8 <main+0x110>)
 8000704:	4a3d      	ldr	r2, [pc, #244]	; (80007fc <main+0x114>)
 8000706:	601a      	str	r2, [r3, #0]
  I2cHandle.Init.AddressingMode  = I2C_ADDRESSINGMODE_10BIT;
 8000708:	4b3b      	ldr	r3, [pc, #236]	; (80007f8 <main+0x110>)
 800070a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800070e:	611a      	str	r2, [r3, #16]
  I2cHandle.Init.ClockSpeed      = 400000;
 8000710:	4b39      	ldr	r3, [pc, #228]	; (80007f8 <main+0x110>)
 8000712:	4a3b      	ldr	r2, [pc, #236]	; (8000800 <main+0x118>)
 8000714:	605a      	str	r2, [r3, #4]
  I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000716:	4b38      	ldr	r3, [pc, #224]	; (80007f8 <main+0x110>)
 8000718:	2200      	movs	r2, #0
 800071a:	615a      	str	r2, [r3, #20]
  I2cHandle.Init.DutyCycle       = I2C_DUTYCYCLE_16_9;
 800071c:	4b36      	ldr	r3, [pc, #216]	; (80007f8 <main+0x110>)
 800071e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000722:	609a      	str	r2, [r3, #8]
  I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000724:	4b34      	ldr	r3, [pc, #208]	; (80007f8 <main+0x110>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 800072a:	4b33      	ldr	r3, [pc, #204]	; (80007f8 <main+0x110>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  I2cHandle.Init.OwnAddress1     = I2C_ADDRESS;
 8000730:	4b31      	ldr	r3, [pc, #196]	; (80007f8 <main+0x110>)
 8000732:	f240 320f 	movw	r2, #783	; 0x30f
 8000736:	60da      	str	r2, [r3, #12]
  I2cHandle.Init.OwnAddress2     = 0xFE;
 8000738:	4b2f      	ldr	r3, [pc, #188]	; (80007f8 <main+0x110>)
 800073a:	22fe      	movs	r2, #254	; 0xfe
 800073c:	619a      	str	r2, [r3, #24]

  if(HAL_I2C_Init(&I2cHandle) != HAL_OK){ Error_Handler(); }
 800073e:	482e      	ldr	r0, [pc, #184]	; (80007f8 <main+0x110>)
 8000740:	f003 fb80 	bl	8003e44 <HAL_I2C_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <main+0x66>
 800074a:	f000 fbd1 	bl	8000ef0 <Error_Handler>

  serial_init();
 800074e:	f000 fbe3 	bl	8000f18 <serial_init>
  #ifdef MASTER_BOARD
  	  printf("Init OK\r\n");
 8000752:	482c      	ldr	r0, [pc, #176]	; (8000804 <main+0x11c>)
 8000754:	f007 fbca 	bl	8007eec <puts>
  #endif

  /****************** MAIN **********************/
  while (1)
  {
  	  if (bitFlag & BFLAG_UART_RCV) {			/* UART Processing*/
 8000758:	4b2b      	ldr	r3, [pc, #172]	; (8000808 <main+0x120>)
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	f003 0301 	and.w	r3, r3, #1
 8000760:	2b00      	cmp	r3, #0
 8000762:	d017      	beq.n	8000794 <main+0xac>
  		  uartProcessing (u8arr_uartEvent, u16_lenCnt - 2); // remove \r & \n
 8000764:	4b29      	ldr	r3, [pc, #164]	; (800080c <main+0x124>)
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	3b02      	subs	r3, #2
 800076a:	b29b      	uxth	r3, r3
 800076c:	4619      	mov	r1, r3
 800076e:	4828      	ldr	r0, [pc, #160]	; (8000810 <main+0x128>)
 8000770:	f000 fb14 	bl	8000d9c <uartProcessing>
  		  memset(u8arr_uartEvent, 0, UART_BUF_SZ);
 8000774:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000778:	2100      	movs	r1, #0
 800077a:	4825      	ldr	r0, [pc, #148]	; (8000810 <main+0x128>)
 800077c:	f007 fb40 	bl	8007e00 <memset>
  		  u16_lenCnt = 0;
 8000780:	4b22      	ldr	r3, [pc, #136]	; (800080c <main+0x124>)
 8000782:	2200      	movs	r2, #0
 8000784:	801a      	strh	r2, [r3, #0]

  		  bitFlag 	&= ~BFLAG_UART_RCV;
 8000786:	4b20      	ldr	r3, [pc, #128]	; (8000808 <main+0x120>)
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	f023 0301 	bic.w	r3, r3, #1
 800078e:	b29a      	uxth	r2, r3
 8000790:	4b1d      	ldr	r3, [pc, #116]	; (8000808 <main+0x120>)
 8000792:	801a      	strh	r2, [r3, #0]
  	  }

  	  // Trigger default input at form
  	  if (bitFlag & BFLAG_I2C_RBA) {			//Read Byte All (Trigger once at the first time)
 8000794:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <main+0x120>)
 8000796:	881b      	ldrh	r3, [r3, #0]
 8000798:	f003 0302 	and.w	r3, r3, #2
 800079c:	2b00      	cmp	r3, #0
 800079e:	d065      	beq.n	800086c <main+0x184>
	  	  #ifdef MASTER_BOARD
  		  memset (sendStr, 0, STRLENMAX);
 80007a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007a4:	2100      	movs	r1, #0
 80007a6:	481b      	ldr	r0, [pc, #108]	; (8000814 <main+0x12c>)
 80007a8:	f007 fb2a 	bl	8007e00 <memset>
		  sendStr[0] = 0x10;
 80007ac:	4b19      	ldr	r3, [pc, #100]	; (8000814 <main+0x12c>)
 80007ae:	2210      	movs	r2, #16
 80007b0:	701a      	strb	r2, [r3, #0]
		  sendStr[1] = 0x11;
 80007b2:	4b18      	ldr	r3, [pc, #96]	; (8000814 <main+0x12c>)
 80007b4:	2211      	movs	r2, #17
 80007b6:	705a      	strb	r2, [r3, #1]
		  for (uint8_t i=4; i<=6; i++){
 80007b8:	2304      	movs	r3, #4
 80007ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80007be:	e043      	b.n	8000848 <main+0x160>
			  aTxBuffer[0] = i;
 80007c0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80007c4:	4a14      	ldr	r2, [pc, #80]	; (8000818 <main+0x130>)
 80007c6:	6013      	str	r3, [r2, #0]

			  I2C_Master_Transmit();
 80007c8:	f7ff ff08 	bl	80005dc <I2C_Master_Transmit>

			  I2C_Master_Receive();
 80007cc:	f7ff ff28 	bl	8000620 <I2C_Master_Receive>

			  if (aRxBuffer[0]==4){
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <main+0x134>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2b04      	cmp	r3, #4
 80007d6:	d105      	bne.n	80007e4 <main+0xfc>
				  memcpy(&sendStr[2], &aRxBuffer[1], CFG_LENGTH * sizeof(&aRxBuffer[1]));
 80007d8:	2228      	movs	r2, #40	; 0x28
 80007da:	4911      	ldr	r1, [pc, #68]	; (8000820 <main+0x138>)
 80007dc:	4811      	ldr	r0, [pc, #68]	; (8000824 <main+0x13c>)
 80007de:	f007 fb01 	bl	8007de4 <memcpy>
 80007e2:	e02c      	b.n	800083e <main+0x156>
			  }
			  else if (aRxBuffer[0]==5){
 80007e4:	4b0d      	ldr	r3, [pc, #52]	; (800081c <main+0x134>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b05      	cmp	r3, #5
 80007ea:	d11f      	bne.n	800082c <main+0x144>
				  memcpy(&sendStr[42], &aRxBuffer[1], CFG_LENGTH * sizeof(&aRxBuffer[1]));
 80007ec:	2228      	movs	r2, #40	; 0x28
 80007ee:	490c      	ldr	r1, [pc, #48]	; (8000820 <main+0x138>)
 80007f0:	480d      	ldr	r0, [pc, #52]	; (8000828 <main+0x140>)
 80007f2:	f007 faf7 	bl	8007de4 <memcpy>
 80007f6:	e022      	b.n	800083e <main+0x156>
 80007f8:	200001c0 	.word	0x200001c0
 80007fc:	40005400 	.word	0x40005400
 8000800:	00061a80 	.word	0x00061a80
 8000804:	080088a4 	.word	0x080088a4
 8000808:	20000518 	.word	0x20000518
 800080c:	20000416 	.word	0x20000416
 8000810:	20000314 	.word	0x20000314
 8000814:	20000418 	.word	0x20000418
 8000818:	20000000 	.word	0x20000000
 800081c:	2000051c 	.word	0x2000051c
 8000820:	20000520 	.word	0x20000520
 8000824:	2000041a 	.word	0x2000041a
 8000828:	20000442 	.word	0x20000442
			  }
			  else if (aRxBuffer[0]==6){
 800082c:	4b9a      	ldr	r3, [pc, #616]	; (8000a98 <main+0x3b0>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b06      	cmp	r3, #6
 8000832:	d104      	bne.n	800083e <main+0x156>
				  memcpy(&sendStr[82], &aRxBuffer[1], CFG_LENGTH * sizeof(&aRxBuffer[1]));
 8000834:	2228      	movs	r2, #40	; 0x28
 8000836:	4999      	ldr	r1, [pc, #612]	; (8000a9c <main+0x3b4>)
 8000838:	4899      	ldr	r0, [pc, #612]	; (8000aa0 <main+0x3b8>)
 800083a:	f007 fad3 	bl	8007de4 <memcpy>
		  for (uint8_t i=4; i<=6; i++){
 800083e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000842:	3301      	adds	r3, #1
 8000844:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8000848:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800084c:	2b06      	cmp	r3, #6
 800084e:	d9b7      	bls.n	80007c0 <main+0xd8>
			  }
		  }

		  HAL_UART_Transmit(&huart2, (uint8_t *)sendStr, 122, 0xFFFF);
 8000850:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000854:	227a      	movs	r2, #122	; 0x7a
 8000856:	4993      	ldr	r1, [pc, #588]	; (8000aa4 <main+0x3bc>)
 8000858:	4893      	ldr	r0, [pc, #588]	; (8000aa8 <main+0x3c0>)
 800085a:	f006 f872 	bl	8006942 <HAL_UART_Transmit>

		  bitFlag &= ~BFLAG_I2C_RBA;
 800085e:	4b93      	ldr	r3, [pc, #588]	; (8000aac <main+0x3c4>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	f023 0302 	bic.w	r3, r3, #2
 8000866:	b29a      	uxth	r2, r3
 8000868:	4b90      	ldr	r3, [pc, #576]	; (8000aac <main+0x3c4>)
 800086a:	801a      	strh	r2, [r3, #0]
		  #endif
  	  }

  	 if((bitFlag & BFLAG_I2C_WBS) || (bitFlag & BFLAG_I2C_WBA))
 800086c:	4b8f      	ldr	r3, [pc, #572]	; (8000aac <main+0x3c4>)
 800086e:	881b      	ldrh	r3, [r3, #0]
 8000870:	f003 0304 	and.w	r3, r3, #4
 8000874:	2b00      	cmp	r3, #0
 8000876:	d105      	bne.n	8000884 <main+0x19c>
 8000878:	4b8c      	ldr	r3, [pc, #560]	; (8000aac <main+0x3c4>)
 800087a:	881b      	ldrh	r3, [r3, #0]
 800087c:	f003 0310 	and.w	r3, r3, #16
 8000880:	2b00      	cmp	r3, #0
 8000882:	d008      	beq.n	8000896 <main+0x1ae>
  	 {
		 #ifdef MASTER_BOARD

  		 I2C_Master_Transmit();
 8000884:	f7ff feaa 	bl	80005dc <I2C_Master_Transmit>

  		 bitFlag |= BFLAG_I2C_RBS;
 8000888:	4b88      	ldr	r3, [pc, #544]	; (8000aac <main+0x3c4>)
 800088a:	881b      	ldrh	r3, [r3, #0]
 800088c:	f043 0308 	orr.w	r3, r3, #8
 8000890:	b29a      	uxth	r2, r3
 8000892:	4b86      	ldr	r3, [pc, #536]	; (8000aac <main+0x3c4>)
 8000894:	801a      	strh	r2, [r3, #0]
 	 	 #endif
  	 }

  	 if (bitFlag & BFLAG_I2C_RBS)
 8000896:	4b85      	ldr	r3, [pc, #532]	; (8000aac <main+0x3c4>)
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	f003 0308 	and.w	r3, r3, #8
 800089e:	2b00      	cmp	r3, #0
 80008a0:	f43f af5a 	beq.w	8000758 <main+0x70>
	 {
  		 #ifdef MASTER_BOARD

  		 I2C_Master_Receive();
 80008a4:	f7ff febc 	bl	8000620 <I2C_Master_Receive>

		 // BFLAG_I2C_WAS		WRITE SLAVE
		 if (aRxBuffer[0]==1)				//WR1
 80008a8:	4b7b      	ldr	r3, [pc, #492]	; (8000a98 <main+0x3b0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d10d      	bne.n	80008cc <main+0x1e4>
		 {
			 char send[] = {0x14, 0x15,
 80008b0:	4b7f      	ldr	r3, [pc, #508]	; (8000ab0 <main+0x3c8>)
 80008b2:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80008b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008b8:	c407      	stmia	r4!, {r0, r1, r2}
 80008ba:	8023      	strh	r3, [r4, #0]
				  'S', 'E', 'N', 'D', ' ', 'R', 'E', 'S', '1', ':', 0x0d, 0x0a};
			 HAL_UART_Transmit(&huart2, (uint8_t *)send, 14, 0xFFFF);
 80008bc:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80008c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008c4:	220e      	movs	r2, #14
 80008c6:	4878      	ldr	r0, [pc, #480]	; (8000aa8 <main+0x3c0>)
 80008c8:	f006 f83b 	bl	8006942 <HAL_UART_Transmit>
		 }
		 if (aRxBuffer[0]==2)				//WR2
 80008cc:	4b72      	ldr	r3, [pc, #456]	; (8000a98 <main+0x3b0>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	d10d      	bne.n	80008f0 <main+0x208>
		 {
			 char send[] = {0x14, 0x15,
 80008d4:	4b77      	ldr	r3, [pc, #476]	; (8000ab4 <main+0x3cc>)
 80008d6:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80008da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008dc:	c407      	stmia	r4!, {r0, r1, r2}
 80008de:	8023      	strh	r3, [r4, #0]
				  'S', 'E', 'N', 'D', ' ', 'R', 'E', 'S', '2', ':', 0x0d, 0x0a};
			 HAL_UART_Transmit(&huart2, (uint8_t *)send, 14, 0xFFFF);
 80008e0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80008e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008e8:	220e      	movs	r2, #14
 80008ea:	486f      	ldr	r0, [pc, #444]	; (8000aa8 <main+0x3c0>)
 80008ec:	f006 f829 	bl	8006942 <HAL_UART_Transmit>
		 }
		 if (aRxBuffer[0]==3)				//WR3
 80008f0:	4b69      	ldr	r3, [pc, #420]	; (8000a98 <main+0x3b0>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b03      	cmp	r3, #3
 80008f6:	d10d      	bne.n	8000914 <main+0x22c>
		 {
			 char send[] = {0x14, 0x15,
 80008f8:	4b6f      	ldr	r3, [pc, #444]	; (8000ab8 <main+0x3d0>)
 80008fa:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80008fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000900:	c407      	stmia	r4!, {r0, r1, r2}
 8000902:	8023      	strh	r3, [r4, #0]
				  'S', 'E', 'N', 'D', ' ', 'R', 'E', 'S', '3', ':', 0x0d, 0x0a};
			 HAL_UART_Transmit(&huart2, (uint8_t *)send, 14, 0xFFFF);
 8000904:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000908:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800090c:	220e      	movs	r2, #14
 800090e:	4866      	ldr	r0, [pc, #408]	; (8000aa8 <main+0x3c0>)
 8000910:	f006 f817 	bl	8006942 <HAL_UART_Transmit>
		 }

		 if (aRxBuffer[0]<4)				// Compare TxBuffer and Rx Buffer
 8000914:	4b60      	ldr	r3, [pc, #384]	; (8000a98 <main+0x3b0>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b03      	cmp	r3, #3
 800091a:	dc20      	bgt.n	800095e <main+0x276>
		 {
			 //##-6- Compare the sent and received buffers ##############################
			 if(Buffercmp_Byte(aTxBuffer,aRxBuffer, 11)){
 800091c:	220b      	movs	r2, #11
 800091e:	495e      	ldr	r1, [pc, #376]	; (8000a98 <main+0x3b0>)
 8000920:	4866      	ldr	r0, [pc, #408]	; (8000abc <main+0x3d4>)
 8000922:	f7ff fdf1 	bl	8000508 <Buffercmp_Byte>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d011      	beq.n	8000950 <main+0x268>
				 char send[] = {0x14, 0x15,
 800092c:	4b64      	ldr	r3, [pc, #400]	; (8000ac0 <main+0x3d8>)
 800092e:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000932:	461d      	mov	r5, r3
 8000934:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000936:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000938:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800093c:	c403      	stmia	r4!, {r0, r1}
 800093e:	7022      	strb	r2, [r4, #0]
						 'B','u','f','f','e','r',' ','C','o','m','p','a','r','e',' ','F','a','i','l','!','!',0x0d, 0x0a};
				 HAL_UART_Transmit(&huart2, (uint8_t *)send, 25, 0xFFFF);
 8000940:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000944:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000948:	2219      	movs	r2, #25
 800094a:	4857      	ldr	r0, [pc, #348]	; (8000aa8 <main+0x3c0>)
 800094c:	f005 fff9 	bl	8006942 <HAL_UART_Transmit>
			 }
			 bitFlag 	&= ~BFLAG_I2C_WBS;
 8000950:	4b56      	ldr	r3, [pc, #344]	; (8000aac <main+0x3c4>)
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	f023 0304 	bic.w	r3, r3, #4
 8000958:	b29a      	uxth	r2, r3
 800095a:	4b54      	ldr	r3, [pc, #336]	; (8000aac <main+0x3c4>)
 800095c:	801a      	strh	r2, [r3, #0]
		 }

		 // BFLAG_I2C_RAS		READ SLAVE
		 if (aRxBuffer[0]==4)				//RD1
 800095e:	4b4e      	ldr	r3, [pc, #312]	; (8000a98 <main+0x3b0>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2b04      	cmp	r3, #4
 8000964:	d10d      	bne.n	8000982 <main+0x29a>
		 {
			 char send[] = {0x14, 0x15,
 8000966:	4b57      	ldr	r3, [pc, #348]	; (8000ac4 <main+0x3dc>)
 8000968:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800096c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800096e:	c407      	stmia	r4!, {r0, r1, r2}
 8000970:	8023      	strh	r3, [r4, #0]
				  'R', 'E', 'A', 'D', ' ', 'R', 'E', 'S', '1', ':', 0x0d, 0x0a};
			 HAL_UART_Transmit(&huart2, (uint8_t *)send, 14, 0xFFFF);
 8000972:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000976:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800097a:	220e      	movs	r2, #14
 800097c:	484a      	ldr	r0, [pc, #296]	; (8000aa8 <main+0x3c0>)
 800097e:	f005 ffe0 	bl	8006942 <HAL_UART_Transmit>
		 }
		 if (aRxBuffer[0]==5)				//RD2
 8000982:	4b45      	ldr	r3, [pc, #276]	; (8000a98 <main+0x3b0>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2b05      	cmp	r3, #5
 8000988:	d10d      	bne.n	80009a6 <main+0x2be>
		 {
			 char send[] = {0x14, 0x15,
 800098a:	4b4f      	ldr	r3, [pc, #316]	; (8000ac8 <main+0x3e0>)
 800098c:	f107 0414 	add.w	r4, r7, #20
 8000990:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000992:	c407      	stmia	r4!, {r0, r1, r2}
 8000994:	8023      	strh	r3, [r4, #0]
				  'R', 'E', 'A', 'D', ' ', 'R', 'E', 'S', '2', ':', 0x0d, 0x0a};
			 HAL_UART_Transmit(&huart2, (uint8_t *)send, 14, 0xFFFF);
 8000996:	f107 0114 	add.w	r1, r7, #20
 800099a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800099e:	220e      	movs	r2, #14
 80009a0:	4841      	ldr	r0, [pc, #260]	; (8000aa8 <main+0x3c0>)
 80009a2:	f005 ffce 	bl	8006942 <HAL_UART_Transmit>
		 }
		 if (aRxBuffer[0]==6)				//RD3
 80009a6:	4b3c      	ldr	r3, [pc, #240]	; (8000a98 <main+0x3b0>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b06      	cmp	r3, #6
 80009ac:	d10b      	bne.n	80009c6 <main+0x2de>
		 {
			 char send[] = {0x14, 0x15,
 80009ae:	4b47      	ldr	r3, [pc, #284]	; (8000acc <main+0x3e4>)
 80009b0:	1d3c      	adds	r4, r7, #4
 80009b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009b4:	c407      	stmia	r4!, {r0, r1, r2}
 80009b6:	8023      	strh	r3, [r4, #0]
				  'R', 'E', 'A', 'D', ' ', 'R', 'E', 'S', '3', ':', 0x0d, 0x0a};
			 HAL_UART_Transmit(&huart2, (uint8_t *)send, 14, 0xFFFF);
 80009b8:	1d39      	adds	r1, r7, #4
 80009ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009be:	220e      	movs	r2, #14
 80009c0:	4839      	ldr	r0, [pc, #228]	; (8000aa8 <main+0x3c0>)
 80009c2:	f005 ffbe 	bl	8006942 <HAL_UART_Transmit>
		 }

		 if ((aRxBuffer[0]>=4) && (aRxBuffer[0]<=6)){				// Print the variable value
 80009c6:	4b34      	ldr	r3, [pc, #208]	; (8000a98 <main+0x3b0>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	dd2a      	ble.n	8000a24 <main+0x33c>
 80009ce:	4b32      	ldr	r3, [pc, #200]	; (8000a98 <main+0x3b0>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b06      	cmp	r3, #6
 80009d4:	dc26      	bgt.n	8000a24 <main+0x33c>
			 memset (sendStr, 0, STRLENMAX);
 80009d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009da:	2100      	movs	r1, #0
 80009dc:	4831      	ldr	r0, [pc, #196]	; (8000aa4 <main+0x3bc>)
 80009de:	f007 fa0f 	bl	8007e00 <memset>
			 sendStr[0] = 0x12;
 80009e2:	4b30      	ldr	r3, [pc, #192]	; (8000aa4 <main+0x3bc>)
 80009e4:	2212      	movs	r2, #18
 80009e6:	701a      	strb	r2, [r3, #0]
			 sendStr[1] = 0x13;
 80009e8:	4b2e      	ldr	r3, [pc, #184]	; (8000aa4 <main+0x3bc>)
 80009ea:	2213      	movs	r2, #19
 80009ec:	705a      	strb	r2, [r3, #1]

			 memcpy(&sendStr[2], &aRxBuffer[1], CFG_LENGTH * sizeof(aRxBuffer[0]));
 80009ee:	2228      	movs	r2, #40	; 0x28
 80009f0:	492a      	ldr	r1, [pc, #168]	; (8000a9c <main+0x3b4>)
 80009f2:	4837      	ldr	r0, [pc, #220]	; (8000ad0 <main+0x3e8>)
 80009f4:	f007 f9f6 	bl	8007de4 <memcpy>

			 sendStr[42] = 0x0d;
 80009f8:	4b2a      	ldr	r3, [pc, #168]	; (8000aa4 <main+0x3bc>)
 80009fa:	220d      	movs	r2, #13
 80009fc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			 sendStr[43] = 0x0a;
 8000a00:	4b28      	ldr	r3, [pc, #160]	; (8000aa4 <main+0x3bc>)
 8000a02:	220a      	movs	r2, #10
 8000a04:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

			 HAL_UART_Transmit(&huart2, (uint8_t *)sendStr, 44, 0xFFFF);
 8000a08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a0c:	222c      	movs	r2, #44	; 0x2c
 8000a0e:	4925      	ldr	r1, [pc, #148]	; (8000aa4 <main+0x3bc>)
 8000a10:	4825      	ldr	r0, [pc, #148]	; (8000aa8 <main+0x3c0>)
 8000a12:	f005 ff96 	bl	8006942 <HAL_UART_Transmit>

			 bitFlag 	&= ~BFLAG_I2C_WBS;
 8000a16:	4b25      	ldr	r3, [pc, #148]	; (8000aac <main+0x3c4>)
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	f023 0304 	bic.w	r3, r3, #4
 8000a1e:	b29a      	uxth	r2, r3
 8000a20:	4b22      	ldr	r3, [pc, #136]	; (8000aac <main+0x3c4>)
 8000a22:	801a      	strh	r2, [r3, #0]
		 }

		 // BFLAG_I2C_RBA			Trigger default input at form
		 if (aRxBuffer[0]==7)				//WRA
 8000a24:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <main+0x3b0>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b07      	cmp	r3, #7
 8000a2a:	d105      	bne.n	8000a38 <main+0x350>
		 {
			 Set_aTxBuffer(8, temp, 10, CFG_LENGTH*sizeof(temp[0]));
 8000a2c:	2328      	movs	r3, #40	; 0x28
 8000a2e:	220a      	movs	r2, #10
 8000a30:	4928      	ldr	r1, [pc, #160]	; (8000ad4 <main+0x3ec>)
 8000a32:	2008      	movs	r0, #8
 8000a34:	f7ff fe16 	bl	8000664 <Set_aTxBuffer>
		 }
		 if (aRxBuffer[0]==8)
 8000a38:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <main+0x3b0>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b08      	cmp	r3, #8
 8000a3e:	d105      	bne.n	8000a4c <main+0x364>
		 {
			 Set_aTxBuffer(9, temp, 20, CFG_LENGTH*sizeof(temp[0]));
 8000a40:	2328      	movs	r3, #40	; 0x28
 8000a42:	2214      	movs	r2, #20
 8000a44:	4923      	ldr	r1, [pc, #140]	; (8000ad4 <main+0x3ec>)
 8000a46:	2009      	movs	r0, #9
 8000a48:	f7ff fe0c 	bl	8000664 <Set_aTxBuffer>
		 }
		 if (aRxBuffer[0]==9)
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <main+0x3b0>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b09      	cmp	r3, #9
 8000a52:	d119      	bne.n	8000a88 <main+0x3a0>
		 {
			 sendStr[0] = 0x10;
 8000a54:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <main+0x3bc>)
 8000a56:	2210      	movs	r2, #16
 8000a58:	701a      	strb	r2, [r3, #0]
			 sendStr[1] = 0x12;
 8000a5a:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <main+0x3bc>)
 8000a5c:	2212      	movs	r2, #18
 8000a5e:	705a      	strb	r2, [r3, #1]

			 HAL_UART_Transmit(&huart2, (uint8_t *)sendStr, 2, 0xFFFF);
 8000a60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a64:	2202      	movs	r2, #2
 8000a66:	490f      	ldr	r1, [pc, #60]	; (8000aa4 <main+0x3bc>)
 8000a68:	480f      	ldr	r0, [pc, #60]	; (8000aa8 <main+0x3c0>)
 8000a6a:	f005 ff6a 	bl	8006942 <HAL_UART_Transmit>
			 if(bitFlag & ~BFLAG_I2C_WBA){
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <main+0x3c4>)
 8000a70:	881b      	ldrh	r3, [r3, #0]
 8000a72:	f023 0310 	bic.w	r3, r3, #16
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d006      	beq.n	8000a88 <main+0x3a0>
				 bitFlag &= ~BFLAG_I2C_WBA;
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <main+0x3c4>)
 8000a7c:	881b      	ldrh	r3, [r3, #0]
 8000a7e:	f023 0310 	bic.w	r3, r3, #16
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <main+0x3c4>)
 8000a86:	801a      	strh	r2, [r3, #0]
			 }
		 }

		 /* Reset bit 1 bitflag */
		 bitFlag 	&= ~BFLAG_I2C_RBS;
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <main+0x3c4>)
 8000a8a:	881b      	ldrh	r3, [r3, #0]
 8000a8c:	f023 0308 	bic.w	r3, r3, #8
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <main+0x3c4>)
 8000a94:	801a      	strh	r2, [r3, #0]
  	  if (bitFlag & BFLAG_UART_RCV) {			/* UART Processing*/
 8000a96:	e65f      	b.n	8000758 <main+0x70>
 8000a98:	2000051c 	.word	0x2000051c
 8000a9c:	20000520 	.word	0x20000520
 8000aa0:	2000046a 	.word	0x2000046a
 8000aa4:	20000418 	.word	0x20000418
 8000aa8:	2000011c 	.word	0x2000011c
 8000aac:	20000518 	.word	0x20000518
 8000ab0:	080088b0 	.word	0x080088b0
 8000ab4:	080088c0 	.word	0x080088c0
 8000ab8:	080088d0 	.word	0x080088d0
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	080088e0 	.word	0x080088e0
 8000ac4:	080088fc 	.word	0x080088fc
 8000ac8:	0800890c 	.word	0x0800890c
 8000acc:	0800891c 	.word	0x0800891c
 8000ad0:	2000041a 	.word	0x2000041a
 8000ad4:	20000548 	.word	0x20000548

08000ad8 <HAL_I2C_MasterTxCpltCallback>:
  * @brief  Tx Transfer completed callback / Mengirim data.
  * @param  I2cHandle: I2C handle
  * @note	Turn LED2 on: Jika kirim data berhasil
  ***********************************************************************************/
#ifdef MASTER_BOARD
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2cHandle){
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	2120      	movs	r1, #32
 8000ae4:	4803      	ldr	r0, [pc, #12]	; (8000af4 <HAL_I2C_MasterTxCpltCallback+0x1c>)
 8000ae6:	f003 f979 	bl	8003ddc <HAL_GPIO_WritePin>
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40020000 	.word	0x40020000

08000af8 <HAL_I2C_MasterRxCpltCallback>:
  * @brief  Rx Transfer completed callback / Menerima data.
  * @param  I2cHandle: I2C handle
  * @note	Turn LED2 on: Jika menerima data berhasil
  ************************************************************************************/
#ifdef MASTER_BOARD
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *I2cHandle) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	2120      	movs	r1, #32
 8000b04:	4803      	ldr	r0, [pc, #12]	; (8000b14 <HAL_I2C_MasterRxCpltCallback+0x1c>)
 8000b06:	f003 f969 	bl	8003ddc <HAL_GPIO_WritePin>
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40020000 	.word	0x40020000

08000b18 <HAL_I2C_ErrorCallback>:



/* @brief  I2C error callbacks
   @param  I2cHandle: I2C handle */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	printf("\r\nI2C ERROR \r\n\n");
 8000b20:	4805      	ldr	r0, [pc, #20]	; (8000b38 <HAL_I2C_ErrorCallback+0x20>)
 8000b22:	f007 f9e3 	bl	8007eec <puts>
	while(1) {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b26:	2120      	movs	r1, #32
 8000b28:	4804      	ldr	r0, [pc, #16]	; (8000b3c <HAL_I2C_ErrorCallback+0x24>)
 8000b2a:	f003 f970 	bl	8003e0e <HAL_GPIO_TogglePin>
		HAL_Delay(20);
 8000b2e:	2014      	movs	r0, #20
 8000b30:	f002 fa7a 	bl	8003028 <HAL_Delay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b34:	e7f7      	b.n	8000b26 <HAL_I2C_ErrorCallback+0xe>
 8000b36:	bf00      	nop
 8000b38:	0800892c 	.word	0x0800892c
 8000b3c:	40020000 	.word	0x40020000

08000b40 <SystemClock_Config>:
	}
}

/* @brief System Clock Configuration */
void SystemClock_Config(void) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b094      	sub	sp, #80	; 0x50
 8000b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	2234      	movs	r2, #52	; 0x34
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f007 f956 	bl	8007e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b54:	f107 0308 	add.w	r3, r7, #8
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	4b2a      	ldr	r3, [pc, #168]	; (8000c14 <SystemClock_Config+0xd4>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	4a29      	ldr	r2, [pc, #164]	; (8000c14 <SystemClock_Config+0xd4>)
 8000b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b72:	6413      	str	r3, [r2, #64]	; 0x40
 8000b74:	4b27      	ldr	r3, [pc, #156]	; (8000c14 <SystemClock_Config+0xd4>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b80:	2300      	movs	r3, #0
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	4b24      	ldr	r3, [pc, #144]	; (8000c18 <SystemClock_Config+0xd8>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b8c:	4a22      	ldr	r2, [pc, #136]	; (8000c18 <SystemClock_Config+0xd8>)
 8000b8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b92:	6013      	str	r3, [r2, #0]
 8000b94:	4b20      	ldr	r3, [pc, #128]	; (8000c18 <SystemClock_Config+0xd8>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.*/
  RCC_OscInitStruct.OscillatorType 		= RCC_OSCILLATORTYPE_HSI;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState 			= RCC_HSI_ON;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ba8:	2310      	movs	r3, #16
 8000baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState 		= RCC_PLL_ON;
 8000bac:	2302      	movs	r3, #2
 8000bae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource 		= RCC_PLLSOURCE_HSI;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM 			= 16;
 8000bb4:	2310      	movs	r3, #16
 8000bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN 			= 336;
 8000bb8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000bbc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP 			= RCC_PLLP_DIV4;
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ 			= 2;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR 			= 2;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f005 fbcc 	bl	800636c <HAL_RCC_OscConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000bda:	f000 f989 	bl	8000ef0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bde:	230f      	movs	r3, #15
 8000be0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be2:	2302      	movs	r3, #2
 8000be4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK){
 8000bf4:	f107 0308 	add.w	r3, r7, #8
 8000bf8:	2105      	movs	r1, #5
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f005 f86c 	bl	8005cd8 <HAL_RCC_ClockConfig>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <SystemClock_Config+0xca>
    Error_Handler();
 8000c06:	f000 f973 	bl	8000ef0 <Error_Handler>
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	3750      	adds	r7, #80	; 0x50
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40007000 	.word	0x40007000

08000c1c <MX_USART2_UART_Init>:

/* @brief USART2 Initialization Function*/
static void MX_USART2_UART_Init(void) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  huart2.Instance 			= USART2;
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_USART2_UART_Init+0x58>)
 8000c22:	4a15      	ldr	r2, [pc, #84]	; (8000c78 <MX_USART2_UART_Init+0x5c>)
 8000c24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate 		= 115200;
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <MX_USART2_UART_Init+0x58>)
 8000c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength 	= UART_WORDLENGTH_8B;
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_USART2_UART_Init+0x58>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits 		= UART_STOPBITS_1;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <MX_USART2_UART_Init+0x58>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity 		= UART_PARITY_NONE;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <MX_USART2_UART_Init+0x58>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode 			= UART_MODE_TX_RX;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MX_USART2_UART_Init+0x58>)
 8000c42:	220c      	movs	r2, #12
 8000c44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl 	= UART_HWCONTROL_NONE;
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <MX_USART2_UART_Init+0x58>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling 	= UART_OVERSAMPLING_16;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <MX_USART2_UART_Init+0x58>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart2) != HAL_OK){
 8000c52:	4808      	ldr	r0, [pc, #32]	; (8000c74 <MX_USART2_UART_Init+0x58>)
 8000c54:	f005 fe28 	bl	80068a8 <HAL_UART_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_USART2_UART_Init+0x46>
    Error_Handler();
 8000c5e:	f000 f947 	bl	8000ef0 <Error_Handler>
  }

  #ifdef RX_EVENT_CB
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, u8arr_eventBuff, UART_BUF_SZ);
 8000c62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c66:	4905      	ldr	r1, [pc, #20]	; (8000c7c <MX_USART2_UART_Init+0x60>)
 8000c68:	4802      	ldr	r0, [pc, #8]	; (8000c74 <MX_USART2_UART_Init+0x58>)
 8000c6a:	f005 ff2c 	bl	8006ac6 <HAL_UARTEx_ReceiveToIdle_DMA>
  #else
	serial_init();
  #endif
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	2000011c 	.word	0x2000011c
 8000c78:	40004400 	.word	0x40004400
 8000c7c:	20000214 	.word	0x20000214

08000c80 <MX_DMA_Init>:


static void MX_DMA_Init(void) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_DMA_Init+0x3c>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a0b      	ldr	r2, [pc, #44]	; (8000cbc <MX_DMA_Init+0x3c>)
 8000c90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <MX_DMA_Init+0x3c>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2010      	movs	r0, #16
 8000ca8:	f002 fabd 	bl	8003226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000cac:	2010      	movs	r0, #16
 8000cae:	f002 fad6 	bl	800325e <HAL_NVIC_EnableIRQ>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800

08000cc0 <MX_GPIO_Init>:

/* @brief GPIO Initialization Function*/
static void MX_GPIO_Init(void) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b2d      	ldr	r3, [pc, #180]	; (8000d90 <MX_GPIO_Init+0xd0>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a2c      	ldr	r2, [pc, #176]	; (8000d90 <MX_GPIO_Init+0xd0>)
 8000ce0:	f043 0304 	orr.w	r3, r3, #4
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b2a      	ldr	r3, [pc, #168]	; (8000d90 <MX_GPIO_Init+0xd0>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0304 	and.w	r3, r3, #4
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b26      	ldr	r3, [pc, #152]	; (8000d90 <MX_GPIO_Init+0xd0>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a25      	ldr	r2, [pc, #148]	; (8000d90 <MX_GPIO_Init+0xd0>)
 8000cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <MX_GPIO_Init+0xd0>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	4b1f      	ldr	r3, [pc, #124]	; (8000d90 <MX_GPIO_Init+0xd0>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a1e      	ldr	r2, [pc, #120]	; (8000d90 <MX_GPIO_Init+0xd0>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <MX_GPIO_Init+0xd0>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <MX_GPIO_Init+0xd0>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a17      	ldr	r2, [pc, #92]	; (8000d90 <MX_GPIO_Init+0xd0>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <MX_GPIO_Init+0xd0>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2120      	movs	r1, #32
 8000d4a:	4812      	ldr	r0, [pc, #72]	; (8000d94 <MX_GPIO_Init+0xd4>)
 8000d4c:	f003 f846 	bl	8003ddc <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin 		= B1_Pin;
 8000d50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 8000d56:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	480c      	ldr	r0, [pc, #48]	; (8000d98 <MX_GPIO_Init+0xd8>)
 8000d68:	f002 fea4 	bl	8003ab4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin 		= LD2_Pin;
 8000d6c:	2320      	movs	r3, #32
 8000d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode 		= GPIO_MODE_OUTPUT_PP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed 	= GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4619      	mov	r1, r3
 8000d82:	4804      	ldr	r0, [pc, #16]	; (8000d94 <MX_GPIO_Init+0xd4>)
 8000d84:	f002 fe96 	bl	8003ab4 <HAL_GPIO_Init>
}
 8000d88:	bf00      	nop
 8000d8a:	3728      	adds	r7, #40	; 0x28
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40020000 	.word	0x40020000
 8000d98:	40020800 	.word	0x40020800

08000d9c <uartProcessing>:


void uartProcessing (uint8_t *u8p_buffer, uint16_t u16_size){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	460b      	mov	r3, r1
 8000da6:	807b      	strh	r3, [r7, #2]
	vShell_cmdParse((char*)u8p_buffer);
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f001 ff63 	bl	8002c74 <vShell_cmdParse>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <vUAFE_uart_handle>:
/*****************************************************************
 * @name 	vUAFE_uart_handle
 * @brief	handle afe uart data copy
 ****************************************************************/
static void vUAFE_uart_handle(uint16_t Size)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	80fb      	strh	r3, [r7, #6]
	uint16_t u16_numData;

	/* Check if number of received data in reception buffer has changed */
	if (Size != u16_oldPos)
 8000dc2:	4b36      	ldr	r3, [pc, #216]	; (8000e9c <vUAFE_uart_handle+0xe4>)
 8000dc4:	881b      	ldrh	r3, [r3, #0]
 8000dc6:	88fa      	ldrh	r2, [r7, #6]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d05f      	beq.n	8000e8c <vUAFE_uart_handle+0xd4>
	{
		if (Size > u16_oldPos)
 8000dcc:	4b33      	ldr	r3, [pc, #204]	; (8000e9c <vUAFE_uart_handle+0xe4>)
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	88fa      	ldrh	r2, [r7, #6]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d91a      	bls.n	8000e0c <vUAFE_uart_handle+0x54>
		{
			/* Current position is higher than previous one */
			u16_numData = Size - u16_oldPos;
 8000dd6:	4b31      	ldr	r3, [pc, #196]	; (8000e9c <vUAFE_uart_handle+0xe4>)
 8000dd8:	881b      	ldrh	r3, [r3, #0]
 8000dda:	88fa      	ldrh	r2, [r7, #6]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	81fb      	strh	r3, [r7, #14]
			memcpy(&u8arr_uartEvent[u16_lenCnt],&u8arr_eventBuff[u16_oldPos],u16_numData);
 8000de0:	4b2f      	ldr	r3, [pc, #188]	; (8000ea0 <vUAFE_uart_handle+0xe8>)
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b2f      	ldr	r3, [pc, #188]	; (8000ea4 <vUAFE_uart_handle+0xec>)
 8000de8:	4413      	add	r3, r2
 8000dea:	4a2c      	ldr	r2, [pc, #176]	; (8000e9c <vUAFE_uart_handle+0xe4>)
 8000dec:	8812      	ldrh	r2, [r2, #0]
 8000dee:	4611      	mov	r1, r2
 8000df0:	4a2d      	ldr	r2, [pc, #180]	; (8000ea8 <vUAFE_uart_handle+0xf0>)
 8000df2:	4411      	add	r1, r2
 8000df4:	89fa      	ldrh	r2, [r7, #14]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f006 fff4 	bl	8007de4 <memcpy>
			u16_lenCnt += u16_numData;
 8000dfc:	4b28      	ldr	r3, [pc, #160]	; (8000ea0 <vUAFE_uart_handle+0xe8>)
 8000dfe:	881a      	ldrh	r2, [r3, #0]
 8000e00:	89fb      	ldrh	r3, [r7, #14]
 8000e02:	4413      	add	r3, r2
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	4b26      	ldr	r3, [pc, #152]	; (8000ea0 <vUAFE_uart_handle+0xe8>)
 8000e08:	801a      	strh	r2, [r3, #0]
 8000e0a:	e02a      	b.n	8000e62 <vUAFE_uart_handle+0xaa>
		}
		else
		{
			/* End of buffer has been reached */
			u16_numData = UART_BUF_SZ - u16_oldPos;
 8000e0c:	4b23      	ldr	r3, [pc, #140]	; (8000e9c <vUAFE_uart_handle+0xe4>)
 8000e0e:	881b      	ldrh	r3, [r3, #0]
 8000e10:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000e14:	81fb      	strh	r3, [r7, #14]

			memcpy (&u8arr_uartEvent[u16_lenCnt], 			// copy data in that remaining space
 8000e16:	4b22      	ldr	r3, [pc, #136]	; (8000ea0 <vUAFE_uart_handle+0xe8>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <vUAFE_uart_handle+0xec>)
 8000e1e:	4413      	add	r3, r2
					&u8arr_eventBuff[u16_oldPos],
 8000e20:	4a1e      	ldr	r2, [pc, #120]	; (8000e9c <vUAFE_uart_handle+0xe4>)
 8000e22:	8812      	ldrh	r2, [r2, #0]
 8000e24:	4611      	mov	r1, r2
 8000e26:	4a20      	ldr	r2, [pc, #128]	; (8000ea8 <vUAFE_uart_handle+0xf0>)
 8000e28:	4411      	add	r1, r2
			memcpy (&u8arr_uartEvent[u16_lenCnt], 			// copy data in that remaining space
 8000e2a:	89fa      	ldrh	r2, [r7, #14]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f006 ffd9 	bl	8007de4 <memcpy>
					u16_numData);

			u16_lenCnt += u16_numData;
 8000e32:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <vUAFE_uart_handle+0xe8>)
 8000e34:	881a      	ldrh	r2, [r3, #0]
 8000e36:	89fb      	ldrh	r3, [r7, #14]
 8000e38:	4413      	add	r3, r2
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <vUAFE_uart_handle+0xe8>)
 8000e3e:	801a      	strh	r2, [r3, #0]

			memcpy (&u8arr_uartEvent[u16_lenCnt], 			// copy the remaining data
 8000e40:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <vUAFE_uart_handle+0xe8>)
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <vUAFE_uart_handle+0xec>)
 8000e48:	4413      	add	r3, r2
 8000e4a:	88fa      	ldrh	r2, [r7, #6]
 8000e4c:	4916      	ldr	r1, [pc, #88]	; (8000ea8 <vUAFE_uart_handle+0xf0>)
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f006 ffc8 	bl	8007de4 <memcpy>
					&u8arr_eventBuff[0],
					Size);

			u16_lenCnt += Size;
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <vUAFE_uart_handle+0xe8>)
 8000e56:	881a      	ldrh	r2, [r3, #0]
 8000e58:	88fb      	ldrh	r3, [r7, #6]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <vUAFE_uart_handle+0xe8>)
 8000e60:	801a      	strh	r2, [r3, #0]
		}

		/* Check for ready to process */
		if((u8arr_uartEvent[u16_lenCnt - 1] == '\n')&&(u8arr_uartEvent[u16_lenCnt - 2]== '\r'))
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <vUAFE_uart_handle+0xe8>)
 8000e64:	881b      	ldrh	r3, [r3, #0]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	4a0e      	ldr	r2, [pc, #56]	; (8000ea4 <vUAFE_uart_handle+0xec>)
 8000e6a:	5cd3      	ldrb	r3, [r2, r3]
 8000e6c:	2b0a      	cmp	r3, #10
 8000e6e:	d10d      	bne.n	8000e8c <vUAFE_uart_handle+0xd4>
 8000e70:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <vUAFE_uart_handle+0xe8>)
 8000e72:	881b      	ldrh	r3, [r3, #0]
 8000e74:	3b02      	subs	r3, #2
 8000e76:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <vUAFE_uart_handle+0xec>)
 8000e78:	5cd3      	ldrb	r3, [r2, r3]
 8000e7a:	2b0d      	cmp	r3, #13
 8000e7c:	d106      	bne.n	8000e8c <vUAFE_uart_handle+0xd4>
		{
			bitFlag |= BFLAG_UART_RCV;
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <vUAFE_uart_handle+0xf4>)
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <vUAFE_uart_handle+0xf4>)
 8000e8a:	801a      	strh	r2, [r3, #0]
		}

	}

	u16_oldPos = Size;
 8000e8c:	4a03      	ldr	r2, [pc, #12]	; (8000e9c <vUAFE_uart_handle+0xe4>)
 8000e8e:	88fb      	ldrh	r3, [r7, #6]
 8000e90:	8013      	strh	r3, [r2, #0]
}
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000414 	.word	0x20000414
 8000ea0:	20000416 	.word	0x20000416
 8000ea4:	20000314 	.word	0x20000314
 8000ea8:	20000214 	.word	0x20000214
 8000eac:	20000518 	.word	0x20000518

08000eb0 <HAL_UARTEx_RxEventCallback>:
/*****************************************************************
 * @name HAL_UARTEx_RxEventCallback
 * @brief
 ****************************************************************/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	807b      	strh	r3, [r7, #2]
	#ifdef RX_EVENT_CB
		if (huart->Instance == USART2)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a08      	ldr	r2, [pc, #32]	; (8000ee4 <HAL_UARTEx_RxEventCallback+0x34>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d109      	bne.n	8000eda <HAL_UARTEx_RxEventCallback+0x2a>
		{
			vUAFE_uart_handle(Size);
 8000ec6:	887b      	ldrh	r3, [r7, #2]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff75 	bl	8000db8 <vUAFE_uart_handle>
			HAL_UARTEx_ReceiveToIdle_DMA(&huart2, u8arr_eventBuff, UART_BUF_SZ);
 8000ece:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ed2:	4905      	ldr	r1, [pc, #20]	; (8000ee8 <HAL_UARTEx_RxEventCallback+0x38>)
 8000ed4:	4805      	ldr	r0, [pc, #20]	; (8000eec <HAL_UARTEx_RxEventCallback+0x3c>)
 8000ed6:	f005 fdf6 	bl	8006ac6 <HAL_UARTEx_ReceiveToIdle_DMA>
		}
	#endif
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40004400 	.word	0x40004400
 8000ee8:	20000214 	.word	0x20000214
 8000eec:	2000011c 	.word	0x2000011c

08000ef0 <Error_Handler>:


/*******************************************************************
  * @brief  This function is executed in case of error occurrence.
  ******************************************************************/
void Error_Handler(void) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  printf("\r\nerror handler!!!\r\n");
 8000ef4:	4806      	ldr	r0, [pc, #24]	; (8000f10 <Error_Handler+0x20>)
 8000ef6:	f006 fff9 	bl	8007eec <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000efa:	b672      	cpsid	i
}
 8000efc:	bf00      	nop
  __disable_irq();

  while (1) {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000efe:	2120      	movs	r1, #32
 8000f00:	4804      	ldr	r0, [pc, #16]	; (8000f14 <Error_Handler+0x24>)
 8000f02:	f002 ff84 	bl	8003e0e <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 8000f06:	2032      	movs	r0, #50	; 0x32
 8000f08:	f002 f88e 	bl	8003028 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000f0c:	e7f7      	b.n	8000efe <Error_Handler+0xe>
 8000f0e:	bf00      	nop
 8000f10:	0800893c 	.word	0x0800893c
 8000f14:	40020000 	.word	0x40020000

08000f18 <serial_init>:
static uint8_t u8arr_uart[UART_BUF_SZ];
static uint8_t u8idx;

/* Public functions definitions */
void serial_init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* initialize serial */
  stdin_init(&hstdin, &huart2, u8arr_buffer, UART_BUF_SZ);
 8000f1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f20:	4a06      	ldr	r2, [pc, #24]	; (8000f3c <serial_init+0x24>)
 8000f22:	4907      	ldr	r1, [pc, #28]	; (8000f40 <serial_init+0x28>)
 8000f24:	4807      	ldr	r0, [pc, #28]	; (8000f44 <serial_init+0x2c>)
 8000f26:	f000 f865 	bl	8000ff4 <stdin_init>
  stdin_set_callback(&hstdin, stdin_callback);
 8000f2a:	4907      	ldr	r1, [pc, #28]	; (8000f48 <serial_init+0x30>)
 8000f2c:	4805      	ldr	r0, [pc, #20]	; (8000f44 <serial_init+0x2c>)
 8000f2e:	f000 f878 	bl	8001022 <stdin_set_callback>
  stdin_start(&hstdin);
 8000f32:	4804      	ldr	r0, [pc, #16]	; (8000f44 <serial_init+0x2c>)
 8000f34:	f000 f896 	bl	8001064 <stdin_start>
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	200005d0 	.word	0x200005d0
 8000f40:	2000011c 	.word	0x2000011c
 8000f44:	200005c0 	.word	0x200005c0
 8000f48:	08000f75 	.word	0x08000f75

08000f4c <serial_handlerUART>:

void serial_handlerUART(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  stdin_irq_uart(&hstdin);
 8000f50:	4802      	ldr	r0, [pc, #8]	; (8000f5c <serial_handlerUART+0x10>)
 8000f52:	f001 fbf5 	bl	8002740 <stdin_irq_uart>
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200005c0 	.word	0x200005c0

08000f60 <serial_handlerDMA>:

void serial_handlerDMA(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  stdin_irq_dma(&hstdin);
 8000f64:	4802      	ldr	r0, [pc, #8]	; (8000f70 <serial_handlerDMA+0x10>)
 8000f66:	f000 f8b3 	bl	80010d0 <stdin_irq_dma>
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200005c0 	.word	0x200005c0

08000f74 <stdin_callback>:

/* Private function definitions */
static void stdin_callback(uint8_t *u8p_buffer, uint16_t u16_size)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	807b      	strh	r3, [r7, #2]
	//printf("UART RX Handler\r\n\n");

	memcpy(&u8arr_uart[u8idx], u8p_buffer, u16_size);
 8000f80:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <stdin_callback+0x78>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b1a      	ldr	r3, [pc, #104]	; (8000ff0 <stdin_callback+0x7c>)
 8000f88:	4413      	add	r3, r2
 8000f8a:	887a      	ldrh	r2, [r7, #2]
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f006 ff28 	bl	8007de4 <memcpy>
	u8idx += u16_size;
 8000f94:	887b      	ldrh	r3, [r7, #2]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <stdin_callback+0x78>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <stdin_callback+0x78>)
 8000fa2:	701a      	strb	r2, [r3, #0]

	if((u8p_buffer[u16_size - 1] == '\n')&&(u8p_buffer[u16_size - 2]== '\r'))
 8000fa4:	887b      	ldrh	r3, [r7, #2]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	4413      	add	r3, r2
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b0a      	cmp	r3, #10
 8000fb0:	d118      	bne.n	8000fe4 <stdin_callback+0x70>
 8000fb2:	887b      	ldrh	r3, [r7, #2]
 8000fb4:	3b02      	subs	r3, #2
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b0d      	cmp	r3, #13
 8000fbe:	d111      	bne.n	8000fe4 <stdin_callback+0x70>
	{
		uartProcessing (u8arr_uart, u8idx - 2);
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <stdin_callback+0x78>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	3b02      	subs	r3, #2
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4808      	ldr	r0, [pc, #32]	; (8000ff0 <stdin_callback+0x7c>)
 8000fce:	f7ff fee5 	bl	8000d9c <uartProcessing>
		memset(u8arr_uart, 0, UART_BUF_SZ);
 8000fd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <stdin_callback+0x7c>)
 8000fda:	f006 ff11 	bl	8007e00 <memset>
		u8idx = 0;
 8000fde:	4b03      	ldr	r3, [pc, #12]	; (8000fec <stdin_callback+0x78>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]
	}
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200007d0 	.word	0x200007d0
 8000ff0:	200006d0 	.word	0x200006d0

08000ff4 <stdin_init>:
static void fill_buffer(stdin_t *in, uint16_t pos, uint16_t size);

/* Public function implementations
 * --------------------------------------------*/
void stdin_init(stdin_t *in, UART_HandleTypeDef *uart, uint8_t *buffer, uint16_t size)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
 8001000:	807b      	strh	r3, [r7, #2]
  in->huart = uart;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	68ba      	ldr	r2, [r7, #8]
 8001006:	601a      	str	r2, [r3, #0]
  in->buffer = buffer;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	609a      	str	r2, [r3, #8]
  in->size = size;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	887a      	ldrh	r2, [r7, #2]
 8001012:	819a      	strh	r2, [r3, #12]

  stdin_flush(in);
 8001014:	68f8      	ldr	r0, [r7, #12]
 8001016:	f000 f812 	bl	800103e <stdin_flush>
}
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <stdin_set_callback>:

void stdin_set_callback(stdin_t *in, stdin_callback_t cb)
{
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
 800102a:	6039      	str	r1, [r7, #0]
  in->callback = cb;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	605a      	str	r2, [r3, #4]
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <stdin_flush>:

void stdin_flush(stdin_t *in)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
  memset(in->buffer, 0, in->size);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6898      	ldr	r0, [r3, #8]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	899b      	ldrh	r3, [r3, #12]
 800104e:	461a      	mov	r2, r3
 8001050:	2100      	movs	r1, #0
 8001052:	f006 fed5 	bl	8007e00 <memset>
  in->pos = 0;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	81da      	strh	r2, [r3, #14]
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <stdin_start>:

HAL_StatusTypeDef stdin_start(stdin_t *in)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Enable interrupts */
  __HAL_UART_ENABLE_IT(in->huart, UART_IT_IDLE);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	68da      	ldr	r2, [r3, #12]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f042 0210 	orr.w	r2, r2, #16
 800107e:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(HDMA(in), DMA_IT_TC);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f042 0210 	orr.w	r2, r2, #16
 8001096:	601a      	str	r2, [r3, #0]
  __HAL_DMA_ENABLE_IT(HDMA(in), DMA_IT_HT);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f042 0208 	orr.w	r2, r2, #8
 80010ae:	601a      	str	r2, [r3, #0]

  /* Start receiving UART in DMA mode */
  status = HAL_UART_Receive_DMA(in->huart, in->buffer, in->size);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6818      	ldr	r0, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6899      	ldr	r1, [r3, #8]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	899b      	ldrh	r3, [r3, #12]
 80010bc:	461a      	mov	r2, r3
 80010be:	f005 fcd2 	bl	8006a66 <HAL_UART_Receive_DMA>
 80010c2:	4603      	mov	r3, r0
 80010c4:	73fb      	strb	r3, [r7, #15]
  return (status);
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <stdin_irq_dma>:
  status = HAL_UART_DMAStop(in->huart);
  return (status);
}

void stdin_irq_dma(stdin_t *in)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Handle HT interrupt */
  if (__HAL_DMA_GET_IT_SOURCE(HDMA(in), DMA_IT_HT))
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0308 	and.w	r3, r3, #8
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f000 823c 	beq.w	8001564 <stdin_irq_dma+0x494>
  {
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_HT_FLAG_INDEX(HDMA(in)));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b7f      	ldr	r3, [pc, #508]	; (80012f4 <stdin_irq_dma+0x224>)
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d978      	bls.n	80011ee <stdin_irq_dma+0x11e>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a7c      	ldr	r2, [pc, #496]	; (80012f8 <stdin_irq_dma+0x228>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d06d      	beq.n	80011e6 <stdin_irq_dma+0x116>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a7a      	ldr	r2, [pc, #488]	; (80012fc <stdin_irq_dma+0x22c>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d064      	beq.n	80011e2 <stdin_irq_dma+0x112>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a77      	ldr	r2, [pc, #476]	; (8001300 <stdin_irq_dma+0x230>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d05b      	beq.n	80011de <stdin_irq_dma+0x10e>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a75      	ldr	r2, [pc, #468]	; (8001304 <stdin_irq_dma+0x234>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d052      	beq.n	80011da <stdin_irq_dma+0x10a>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a72      	ldr	r2, [pc, #456]	; (8001308 <stdin_irq_dma+0x238>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d048      	beq.n	80011d4 <stdin_irq_dma+0x104>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a70      	ldr	r2, [pc, #448]	; (800130c <stdin_irq_dma+0x23c>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d03e      	beq.n	80011ce <stdin_irq_dma+0xfe>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a6d      	ldr	r2, [pc, #436]	; (8001310 <stdin_irq_dma+0x240>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d034      	beq.n	80011c8 <stdin_irq_dma+0xf8>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a6b      	ldr	r2, [pc, #428]	; (8001314 <stdin_irq_dma+0x244>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d02a      	beq.n	80011c2 <stdin_irq_dma+0xf2>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a68      	ldr	r2, [pc, #416]	; (8001318 <stdin_irq_dma+0x248>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d020      	beq.n	80011bc <stdin_irq_dma+0xec>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a66      	ldr	r2, [pc, #408]	; (800131c <stdin_irq_dma+0x24c>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d016      	beq.n	80011b6 <stdin_irq_dma+0xe6>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a63      	ldr	r2, [pc, #396]	; (8001320 <stdin_irq_dma+0x250>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d00c      	beq.n	80011b0 <stdin_irq_dma+0xe0>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a61      	ldr	r2, [pc, #388]	; (8001324 <stdin_irq_dma+0x254>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d102      	bne.n	80011aa <stdin_irq_dma+0xda>
 80011a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011a8:	e01e      	b.n	80011e8 <stdin_irq_dma+0x118>
 80011aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80011ae:	e01b      	b.n	80011e8 <stdin_irq_dma+0x118>
 80011b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011b4:	e018      	b.n	80011e8 <stdin_irq_dma+0x118>
 80011b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011ba:	e015      	b.n	80011e8 <stdin_irq_dma+0x118>
 80011bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011c0:	e012      	b.n	80011e8 <stdin_irq_dma+0x118>
 80011c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011c6:	e00f      	b.n	80011e8 <stdin_irq_dma+0x118>
 80011c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011cc:	e00c      	b.n	80011e8 <stdin_irq_dma+0x118>
 80011ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d2:	e009      	b.n	80011e8 <stdin_irq_dma+0x118>
 80011d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d8:	e006      	b.n	80011e8 <stdin_irq_dma+0x118>
 80011da:	2310      	movs	r3, #16
 80011dc:	e004      	b.n	80011e8 <stdin_irq_dma+0x118>
 80011de:	2310      	movs	r3, #16
 80011e0:	e002      	b.n	80011e8 <stdin_irq_dma+0x118>
 80011e2:	2310      	movs	r3, #16
 80011e4:	e000      	b.n	80011e8 <stdin_irq_dma+0x118>
 80011e6:	2310      	movs	r3, #16
 80011e8:	4a4f      	ldr	r2, [pc, #316]	; (8001328 <stdin_irq_dma+0x258>)
 80011ea:	60d3      	str	r3, [r2, #12]
 80011ec:	e199      	b.n	8001522 <stdin_irq_dma+0x452>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b4c      	ldr	r3, [pc, #304]	; (800132c <stdin_irq_dma+0x25c>)
 80011fa:	429a      	cmp	r2, r3
 80011fc:	f240 8098 	bls.w	8001330 <stdin_irq_dma+0x260>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a3b      	ldr	r2, [pc, #236]	; (80012f8 <stdin_irq_dma+0x228>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d06d      	beq.n	80012ea <stdin_irq_dma+0x21a>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a39      	ldr	r2, [pc, #228]	; (80012fc <stdin_irq_dma+0x22c>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d064      	beq.n	80012e6 <stdin_irq_dma+0x216>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a36      	ldr	r2, [pc, #216]	; (8001300 <stdin_irq_dma+0x230>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d05b      	beq.n	80012e2 <stdin_irq_dma+0x212>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a34      	ldr	r2, [pc, #208]	; (8001304 <stdin_irq_dma+0x234>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d052      	beq.n	80012de <stdin_irq_dma+0x20e>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a31      	ldr	r2, [pc, #196]	; (8001308 <stdin_irq_dma+0x238>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d048      	beq.n	80012d8 <stdin_irq_dma+0x208>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a2f      	ldr	r2, [pc, #188]	; (800130c <stdin_irq_dma+0x23c>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d03e      	beq.n	80012d2 <stdin_irq_dma+0x202>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a2c      	ldr	r2, [pc, #176]	; (8001310 <stdin_irq_dma+0x240>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d034      	beq.n	80012cc <stdin_irq_dma+0x1fc>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a2a      	ldr	r2, [pc, #168]	; (8001314 <stdin_irq_dma+0x244>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d02a      	beq.n	80012c6 <stdin_irq_dma+0x1f6>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a27      	ldr	r2, [pc, #156]	; (8001318 <stdin_irq_dma+0x248>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d020      	beq.n	80012c0 <stdin_irq_dma+0x1f0>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a25      	ldr	r2, [pc, #148]	; (800131c <stdin_irq_dma+0x24c>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d016      	beq.n	80012ba <stdin_irq_dma+0x1ea>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a22      	ldr	r2, [pc, #136]	; (8001320 <stdin_irq_dma+0x250>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d00c      	beq.n	80012b4 <stdin_irq_dma+0x1e4>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a20      	ldr	r2, [pc, #128]	; (8001324 <stdin_irq_dma+0x254>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d102      	bne.n	80012ae <stdin_irq_dma+0x1de>
 80012a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012ac:	e01e      	b.n	80012ec <stdin_irq_dma+0x21c>
 80012ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80012b2:	e01b      	b.n	80012ec <stdin_irq_dma+0x21c>
 80012b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012b8:	e018      	b.n	80012ec <stdin_irq_dma+0x21c>
 80012ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012be:	e015      	b.n	80012ec <stdin_irq_dma+0x21c>
 80012c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012c4:	e012      	b.n	80012ec <stdin_irq_dma+0x21c>
 80012c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ca:	e00f      	b.n	80012ec <stdin_irq_dma+0x21c>
 80012cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012d0:	e00c      	b.n	80012ec <stdin_irq_dma+0x21c>
 80012d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012d6:	e009      	b.n	80012ec <stdin_irq_dma+0x21c>
 80012d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012dc:	e006      	b.n	80012ec <stdin_irq_dma+0x21c>
 80012de:	2310      	movs	r3, #16
 80012e0:	e004      	b.n	80012ec <stdin_irq_dma+0x21c>
 80012e2:	2310      	movs	r3, #16
 80012e4:	e002      	b.n	80012ec <stdin_irq_dma+0x21c>
 80012e6:	2310      	movs	r3, #16
 80012e8:	e000      	b.n	80012ec <stdin_irq_dma+0x21c>
 80012ea:	2310      	movs	r3, #16
 80012ec:	4a0e      	ldr	r2, [pc, #56]	; (8001328 <stdin_irq_dma+0x258>)
 80012ee:	6093      	str	r3, [r2, #8]
 80012f0:	e117      	b.n	8001522 <stdin_irq_dma+0x452>
 80012f2:	bf00      	nop
 80012f4:	40026458 	.word	0x40026458
 80012f8:	40026010 	.word	0x40026010
 80012fc:	40026410 	.word	0x40026410
 8001300:	40026070 	.word	0x40026070
 8001304:	40026470 	.word	0x40026470
 8001308:	40026028 	.word	0x40026028
 800130c:	40026428 	.word	0x40026428
 8001310:	40026088 	.word	0x40026088
 8001314:	40026488 	.word	0x40026488
 8001318:	40026040 	.word	0x40026040
 800131c:	40026440 	.word	0x40026440
 8001320:	400260a0 	.word	0x400260a0
 8001324:	400264a0 	.word	0x400264a0
 8001328:	40026400 	.word	0x40026400
 800132c:	400260b8 	.word	0x400260b8
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	4b7c      	ldr	r3, [pc, #496]	; (800152c <stdin_irq_dma+0x45c>)
 800133c:	429a      	cmp	r2, r3
 800133e:	d978      	bls.n	8001432 <stdin_irq_dma+0x362>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a79      	ldr	r2, [pc, #484]	; (8001530 <stdin_irq_dma+0x460>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d06d      	beq.n	800142a <stdin_irq_dma+0x35a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a77      	ldr	r2, [pc, #476]	; (8001534 <stdin_irq_dma+0x464>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d064      	beq.n	8001426 <stdin_irq_dma+0x356>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a74      	ldr	r2, [pc, #464]	; (8001538 <stdin_irq_dma+0x468>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d05b      	beq.n	8001422 <stdin_irq_dma+0x352>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a72      	ldr	r2, [pc, #456]	; (800153c <stdin_irq_dma+0x46c>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d052      	beq.n	800141e <stdin_irq_dma+0x34e>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a6f      	ldr	r2, [pc, #444]	; (8001540 <stdin_irq_dma+0x470>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d048      	beq.n	8001418 <stdin_irq_dma+0x348>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a6d      	ldr	r2, [pc, #436]	; (8001544 <stdin_irq_dma+0x474>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d03e      	beq.n	8001412 <stdin_irq_dma+0x342>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a6a      	ldr	r2, [pc, #424]	; (8001548 <stdin_irq_dma+0x478>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d034      	beq.n	800140c <stdin_irq_dma+0x33c>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a68      	ldr	r2, [pc, #416]	; (800154c <stdin_irq_dma+0x47c>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d02a      	beq.n	8001406 <stdin_irq_dma+0x336>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a65      	ldr	r2, [pc, #404]	; (8001550 <stdin_irq_dma+0x480>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d020      	beq.n	8001400 <stdin_irq_dma+0x330>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a63      	ldr	r2, [pc, #396]	; (8001554 <stdin_irq_dma+0x484>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d016      	beq.n	80013fa <stdin_irq_dma+0x32a>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a60      	ldr	r2, [pc, #384]	; (8001558 <stdin_irq_dma+0x488>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d00c      	beq.n	80013f4 <stdin_irq_dma+0x324>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a5e      	ldr	r2, [pc, #376]	; (800155c <stdin_irq_dma+0x48c>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d102      	bne.n	80013ee <stdin_irq_dma+0x31e>
 80013e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013ec:	e01e      	b.n	800142c <stdin_irq_dma+0x35c>
 80013ee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80013f2:	e01b      	b.n	800142c <stdin_irq_dma+0x35c>
 80013f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013f8:	e018      	b.n	800142c <stdin_irq_dma+0x35c>
 80013fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013fe:	e015      	b.n	800142c <stdin_irq_dma+0x35c>
 8001400:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001404:	e012      	b.n	800142c <stdin_irq_dma+0x35c>
 8001406:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800140a:	e00f      	b.n	800142c <stdin_irq_dma+0x35c>
 800140c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001410:	e00c      	b.n	800142c <stdin_irq_dma+0x35c>
 8001412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001416:	e009      	b.n	800142c <stdin_irq_dma+0x35c>
 8001418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800141c:	e006      	b.n	800142c <stdin_irq_dma+0x35c>
 800141e:	2310      	movs	r3, #16
 8001420:	e004      	b.n	800142c <stdin_irq_dma+0x35c>
 8001422:	2310      	movs	r3, #16
 8001424:	e002      	b.n	800142c <stdin_irq_dma+0x35c>
 8001426:	2310      	movs	r3, #16
 8001428:	e000      	b.n	800142c <stdin_irq_dma+0x35c>
 800142a:	2310      	movs	r3, #16
 800142c:	4a4c      	ldr	r2, [pc, #304]	; (8001560 <stdin_irq_dma+0x490>)
 800142e:	60d3      	str	r3, [r2, #12]
 8001430:	e077      	b.n	8001522 <stdin_irq_dma+0x452>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a3d      	ldr	r2, [pc, #244]	; (8001530 <stdin_irq_dma+0x460>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d06d      	beq.n	800151c <stdin_irq_dma+0x44c>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a3a      	ldr	r2, [pc, #232]	; (8001534 <stdin_irq_dma+0x464>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d064      	beq.n	8001518 <stdin_irq_dma+0x448>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a38      	ldr	r2, [pc, #224]	; (8001538 <stdin_irq_dma+0x468>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d05b      	beq.n	8001514 <stdin_irq_dma+0x444>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a35      	ldr	r2, [pc, #212]	; (800153c <stdin_irq_dma+0x46c>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d052      	beq.n	8001510 <stdin_irq_dma+0x440>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a33      	ldr	r2, [pc, #204]	; (8001540 <stdin_irq_dma+0x470>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d048      	beq.n	800150a <stdin_irq_dma+0x43a>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a30      	ldr	r2, [pc, #192]	; (8001544 <stdin_irq_dma+0x474>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d03e      	beq.n	8001504 <stdin_irq_dma+0x434>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a2e      	ldr	r2, [pc, #184]	; (8001548 <stdin_irq_dma+0x478>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d034      	beq.n	80014fe <stdin_irq_dma+0x42e>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a2b      	ldr	r2, [pc, #172]	; (800154c <stdin_irq_dma+0x47c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d02a      	beq.n	80014f8 <stdin_irq_dma+0x428>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a29      	ldr	r2, [pc, #164]	; (8001550 <stdin_irq_dma+0x480>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d020      	beq.n	80014f2 <stdin_irq_dma+0x422>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a26      	ldr	r2, [pc, #152]	; (8001554 <stdin_irq_dma+0x484>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d016      	beq.n	80014ec <stdin_irq_dma+0x41c>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a24      	ldr	r2, [pc, #144]	; (8001558 <stdin_irq_dma+0x488>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d00c      	beq.n	80014e6 <stdin_irq_dma+0x416>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a21      	ldr	r2, [pc, #132]	; (800155c <stdin_irq_dma+0x48c>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d102      	bne.n	80014e0 <stdin_irq_dma+0x410>
 80014da:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014de:	e01e      	b.n	800151e <stdin_irq_dma+0x44e>
 80014e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80014e4:	e01b      	b.n	800151e <stdin_irq_dma+0x44e>
 80014e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014ea:	e018      	b.n	800151e <stdin_irq_dma+0x44e>
 80014ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014f0:	e015      	b.n	800151e <stdin_irq_dma+0x44e>
 80014f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014f6:	e012      	b.n	800151e <stdin_irq_dma+0x44e>
 80014f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014fc:	e00f      	b.n	800151e <stdin_irq_dma+0x44e>
 80014fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001502:	e00c      	b.n	800151e <stdin_irq_dma+0x44e>
 8001504:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001508:	e009      	b.n	800151e <stdin_irq_dma+0x44e>
 800150a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800150e:	e006      	b.n	800151e <stdin_irq_dma+0x44e>
 8001510:	2310      	movs	r3, #16
 8001512:	e004      	b.n	800151e <stdin_irq_dma+0x44e>
 8001514:	2310      	movs	r3, #16
 8001516:	e002      	b.n	800151e <stdin_irq_dma+0x44e>
 8001518:	2310      	movs	r3, #16
 800151a:	e000      	b.n	800151e <stdin_irq_dma+0x44e>
 800151c:	2310      	movs	r3, #16
 800151e:	4a10      	ldr	r2, [pc, #64]	; (8001560 <stdin_irq_dma+0x490>)
 8001520:	6093      	str	r3, [r2, #8]
    check_buffer(in);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f001 f92c 	bl	8002780 <check_buffer>
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_FE_FLAG_INDEX(HDMA(in)));
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_DME_FLAG_INDEX(HDMA(in)));

    HAL_UART_Receive_DMA(in->huart, in->buffer, in->size);
  }
}
 8001528:	f001 b8ea 	b.w	8002700 <stdin_irq_dma+0x1630>
 800152c:	40026058 	.word	0x40026058
 8001530:	40026010 	.word	0x40026010
 8001534:	40026410 	.word	0x40026410
 8001538:	40026070 	.word	0x40026070
 800153c:	40026470 	.word	0x40026470
 8001540:	40026028 	.word	0x40026028
 8001544:	40026428 	.word	0x40026428
 8001548:	40026088 	.word	0x40026088
 800154c:	40026488 	.word	0x40026488
 8001550:	40026040 	.word	0x40026040
 8001554:	40026440 	.word	0x40026440
 8001558:	400260a0 	.word	0x400260a0
 800155c:	400264a0 	.word	0x400264a0
 8001560:	40026000 	.word	0x40026000
  else if (__HAL_DMA_GET_IT_SOURCE(HDMA(in), DMA_IT_TC))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0310 	and.w	r3, r3, #16
 8001572:	2b00      	cmp	r3, #0
 8001574:	f000 823c 	beq.w	80019f0 <stdin_irq_dma+0x920>
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_TC_FLAG_INDEX(HDMA(in)));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	4b7f      	ldr	r3, [pc, #508]	; (8001780 <stdin_irq_dma+0x6b0>)
 8001584:	429a      	cmp	r2, r3
 8001586:	d978      	bls.n	800167a <stdin_irq_dma+0x5aa>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a7c      	ldr	r2, [pc, #496]	; (8001784 <stdin_irq_dma+0x6b4>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d06d      	beq.n	8001672 <stdin_irq_dma+0x5a2>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a7a      	ldr	r2, [pc, #488]	; (8001788 <stdin_irq_dma+0x6b8>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d064      	beq.n	800166e <stdin_irq_dma+0x59e>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a77      	ldr	r2, [pc, #476]	; (800178c <stdin_irq_dma+0x6bc>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d05b      	beq.n	800166a <stdin_irq_dma+0x59a>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a75      	ldr	r2, [pc, #468]	; (8001790 <stdin_irq_dma+0x6c0>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d052      	beq.n	8001666 <stdin_irq_dma+0x596>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a72      	ldr	r2, [pc, #456]	; (8001794 <stdin_irq_dma+0x6c4>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d048      	beq.n	8001660 <stdin_irq_dma+0x590>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a70      	ldr	r2, [pc, #448]	; (8001798 <stdin_irq_dma+0x6c8>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d03e      	beq.n	800165a <stdin_irq_dma+0x58a>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a6d      	ldr	r2, [pc, #436]	; (800179c <stdin_irq_dma+0x6cc>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d034      	beq.n	8001654 <stdin_irq_dma+0x584>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a6b      	ldr	r2, [pc, #428]	; (80017a0 <stdin_irq_dma+0x6d0>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d02a      	beq.n	800164e <stdin_irq_dma+0x57e>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a68      	ldr	r2, [pc, #416]	; (80017a4 <stdin_irq_dma+0x6d4>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d020      	beq.n	8001648 <stdin_irq_dma+0x578>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a66      	ldr	r2, [pc, #408]	; (80017a8 <stdin_irq_dma+0x6d8>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d016      	beq.n	8001642 <stdin_irq_dma+0x572>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a63      	ldr	r2, [pc, #396]	; (80017ac <stdin_irq_dma+0x6dc>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d00c      	beq.n	800163c <stdin_irq_dma+0x56c>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a61      	ldr	r2, [pc, #388]	; (80017b0 <stdin_irq_dma+0x6e0>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d102      	bne.n	8001636 <stdin_irq_dma+0x566>
 8001630:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001634:	e01e      	b.n	8001674 <stdin_irq_dma+0x5a4>
 8001636:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800163a:	e01b      	b.n	8001674 <stdin_irq_dma+0x5a4>
 800163c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001640:	e018      	b.n	8001674 <stdin_irq_dma+0x5a4>
 8001642:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001646:	e015      	b.n	8001674 <stdin_irq_dma+0x5a4>
 8001648:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800164c:	e012      	b.n	8001674 <stdin_irq_dma+0x5a4>
 800164e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001652:	e00f      	b.n	8001674 <stdin_irq_dma+0x5a4>
 8001654:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001658:	e00c      	b.n	8001674 <stdin_irq_dma+0x5a4>
 800165a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800165e:	e009      	b.n	8001674 <stdin_irq_dma+0x5a4>
 8001660:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001664:	e006      	b.n	8001674 <stdin_irq_dma+0x5a4>
 8001666:	2320      	movs	r3, #32
 8001668:	e004      	b.n	8001674 <stdin_irq_dma+0x5a4>
 800166a:	2320      	movs	r3, #32
 800166c:	e002      	b.n	8001674 <stdin_irq_dma+0x5a4>
 800166e:	2320      	movs	r3, #32
 8001670:	e000      	b.n	8001674 <stdin_irq_dma+0x5a4>
 8001672:	2320      	movs	r3, #32
 8001674:	4a4f      	ldr	r2, [pc, #316]	; (80017b4 <stdin_irq_dma+0x6e4>)
 8001676:	60d3      	str	r3, [r2, #12]
 8001678:	e199      	b.n	80019ae <stdin_irq_dma+0x8de>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	4b4c      	ldr	r3, [pc, #304]	; (80017b8 <stdin_irq_dma+0x6e8>)
 8001686:	429a      	cmp	r2, r3
 8001688:	f240 8098 	bls.w	80017bc <stdin_irq_dma+0x6ec>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a3b      	ldr	r2, [pc, #236]	; (8001784 <stdin_irq_dma+0x6b4>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d06d      	beq.n	8001776 <stdin_irq_dma+0x6a6>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a39      	ldr	r2, [pc, #228]	; (8001788 <stdin_irq_dma+0x6b8>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d064      	beq.n	8001772 <stdin_irq_dma+0x6a2>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a36      	ldr	r2, [pc, #216]	; (800178c <stdin_irq_dma+0x6bc>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d05b      	beq.n	800176e <stdin_irq_dma+0x69e>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a34      	ldr	r2, [pc, #208]	; (8001790 <stdin_irq_dma+0x6c0>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d052      	beq.n	800176a <stdin_irq_dma+0x69a>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a31      	ldr	r2, [pc, #196]	; (8001794 <stdin_irq_dma+0x6c4>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d048      	beq.n	8001764 <stdin_irq_dma+0x694>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a2f      	ldr	r2, [pc, #188]	; (8001798 <stdin_irq_dma+0x6c8>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d03e      	beq.n	800175e <stdin_irq_dma+0x68e>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a2c      	ldr	r2, [pc, #176]	; (800179c <stdin_irq_dma+0x6cc>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d034      	beq.n	8001758 <stdin_irq_dma+0x688>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a2a      	ldr	r2, [pc, #168]	; (80017a0 <stdin_irq_dma+0x6d0>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d02a      	beq.n	8001752 <stdin_irq_dma+0x682>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a27      	ldr	r2, [pc, #156]	; (80017a4 <stdin_irq_dma+0x6d4>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d020      	beq.n	800174c <stdin_irq_dma+0x67c>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a25      	ldr	r2, [pc, #148]	; (80017a8 <stdin_irq_dma+0x6d8>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d016      	beq.n	8001746 <stdin_irq_dma+0x676>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a22      	ldr	r2, [pc, #136]	; (80017ac <stdin_irq_dma+0x6dc>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d00c      	beq.n	8001740 <stdin_irq_dma+0x670>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a20      	ldr	r2, [pc, #128]	; (80017b0 <stdin_irq_dma+0x6e0>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d102      	bne.n	800173a <stdin_irq_dma+0x66a>
 8001734:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001738:	e01e      	b.n	8001778 <stdin_irq_dma+0x6a8>
 800173a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800173e:	e01b      	b.n	8001778 <stdin_irq_dma+0x6a8>
 8001740:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001744:	e018      	b.n	8001778 <stdin_irq_dma+0x6a8>
 8001746:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800174a:	e015      	b.n	8001778 <stdin_irq_dma+0x6a8>
 800174c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001750:	e012      	b.n	8001778 <stdin_irq_dma+0x6a8>
 8001752:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001756:	e00f      	b.n	8001778 <stdin_irq_dma+0x6a8>
 8001758:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800175c:	e00c      	b.n	8001778 <stdin_irq_dma+0x6a8>
 800175e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001762:	e009      	b.n	8001778 <stdin_irq_dma+0x6a8>
 8001764:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001768:	e006      	b.n	8001778 <stdin_irq_dma+0x6a8>
 800176a:	2320      	movs	r3, #32
 800176c:	e004      	b.n	8001778 <stdin_irq_dma+0x6a8>
 800176e:	2320      	movs	r3, #32
 8001770:	e002      	b.n	8001778 <stdin_irq_dma+0x6a8>
 8001772:	2320      	movs	r3, #32
 8001774:	e000      	b.n	8001778 <stdin_irq_dma+0x6a8>
 8001776:	2320      	movs	r3, #32
 8001778:	4a0e      	ldr	r2, [pc, #56]	; (80017b4 <stdin_irq_dma+0x6e4>)
 800177a:	6093      	str	r3, [r2, #8]
 800177c:	e117      	b.n	80019ae <stdin_irq_dma+0x8de>
 800177e:	bf00      	nop
 8001780:	40026458 	.word	0x40026458
 8001784:	40026010 	.word	0x40026010
 8001788:	40026410 	.word	0x40026410
 800178c:	40026070 	.word	0x40026070
 8001790:	40026470 	.word	0x40026470
 8001794:	40026028 	.word	0x40026028
 8001798:	40026428 	.word	0x40026428
 800179c:	40026088 	.word	0x40026088
 80017a0:	40026488 	.word	0x40026488
 80017a4:	40026040 	.word	0x40026040
 80017a8:	40026440 	.word	0x40026440
 80017ac:	400260a0 	.word	0x400260a0
 80017b0:	400264a0 	.word	0x400264a0
 80017b4:	40026400 	.word	0x40026400
 80017b8:	400260b8 	.word	0x400260b8
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b7c      	ldr	r3, [pc, #496]	; (80019b8 <stdin_irq_dma+0x8e8>)
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d978      	bls.n	80018be <stdin_irq_dma+0x7ee>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a79      	ldr	r2, [pc, #484]	; (80019bc <stdin_irq_dma+0x8ec>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d06d      	beq.n	80018b6 <stdin_irq_dma+0x7e6>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a77      	ldr	r2, [pc, #476]	; (80019c0 <stdin_irq_dma+0x8f0>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d064      	beq.n	80018b2 <stdin_irq_dma+0x7e2>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a74      	ldr	r2, [pc, #464]	; (80019c4 <stdin_irq_dma+0x8f4>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d05b      	beq.n	80018ae <stdin_irq_dma+0x7de>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a72      	ldr	r2, [pc, #456]	; (80019c8 <stdin_irq_dma+0x8f8>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d052      	beq.n	80018aa <stdin_irq_dma+0x7da>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a6f      	ldr	r2, [pc, #444]	; (80019cc <stdin_irq_dma+0x8fc>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d048      	beq.n	80018a4 <stdin_irq_dma+0x7d4>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a6d      	ldr	r2, [pc, #436]	; (80019d0 <stdin_irq_dma+0x900>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d03e      	beq.n	800189e <stdin_irq_dma+0x7ce>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a6a      	ldr	r2, [pc, #424]	; (80019d4 <stdin_irq_dma+0x904>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d034      	beq.n	8001898 <stdin_irq_dma+0x7c8>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a68      	ldr	r2, [pc, #416]	; (80019d8 <stdin_irq_dma+0x908>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d02a      	beq.n	8001892 <stdin_irq_dma+0x7c2>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a65      	ldr	r2, [pc, #404]	; (80019dc <stdin_irq_dma+0x90c>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d020      	beq.n	800188c <stdin_irq_dma+0x7bc>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a63      	ldr	r2, [pc, #396]	; (80019e0 <stdin_irq_dma+0x910>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d016      	beq.n	8001886 <stdin_irq_dma+0x7b6>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a60      	ldr	r2, [pc, #384]	; (80019e4 <stdin_irq_dma+0x914>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d00c      	beq.n	8001880 <stdin_irq_dma+0x7b0>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a5e      	ldr	r2, [pc, #376]	; (80019e8 <stdin_irq_dma+0x918>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d102      	bne.n	800187a <stdin_irq_dma+0x7aa>
 8001874:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001878:	e01e      	b.n	80018b8 <stdin_irq_dma+0x7e8>
 800187a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800187e:	e01b      	b.n	80018b8 <stdin_irq_dma+0x7e8>
 8001880:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001884:	e018      	b.n	80018b8 <stdin_irq_dma+0x7e8>
 8001886:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800188a:	e015      	b.n	80018b8 <stdin_irq_dma+0x7e8>
 800188c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001890:	e012      	b.n	80018b8 <stdin_irq_dma+0x7e8>
 8001892:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001896:	e00f      	b.n	80018b8 <stdin_irq_dma+0x7e8>
 8001898:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800189c:	e00c      	b.n	80018b8 <stdin_irq_dma+0x7e8>
 800189e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018a2:	e009      	b.n	80018b8 <stdin_irq_dma+0x7e8>
 80018a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018a8:	e006      	b.n	80018b8 <stdin_irq_dma+0x7e8>
 80018aa:	2320      	movs	r3, #32
 80018ac:	e004      	b.n	80018b8 <stdin_irq_dma+0x7e8>
 80018ae:	2320      	movs	r3, #32
 80018b0:	e002      	b.n	80018b8 <stdin_irq_dma+0x7e8>
 80018b2:	2320      	movs	r3, #32
 80018b4:	e000      	b.n	80018b8 <stdin_irq_dma+0x7e8>
 80018b6:	2320      	movs	r3, #32
 80018b8:	4a4c      	ldr	r2, [pc, #304]	; (80019ec <stdin_irq_dma+0x91c>)
 80018ba:	60d3      	str	r3, [r2, #12]
 80018bc:	e077      	b.n	80019ae <stdin_irq_dma+0x8de>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a3d      	ldr	r2, [pc, #244]	; (80019bc <stdin_irq_dma+0x8ec>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d06d      	beq.n	80019a8 <stdin_irq_dma+0x8d8>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a3a      	ldr	r2, [pc, #232]	; (80019c0 <stdin_irq_dma+0x8f0>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d064      	beq.n	80019a4 <stdin_irq_dma+0x8d4>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a38      	ldr	r2, [pc, #224]	; (80019c4 <stdin_irq_dma+0x8f4>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d05b      	beq.n	80019a0 <stdin_irq_dma+0x8d0>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a35      	ldr	r2, [pc, #212]	; (80019c8 <stdin_irq_dma+0x8f8>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d052      	beq.n	800199c <stdin_irq_dma+0x8cc>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a33      	ldr	r2, [pc, #204]	; (80019cc <stdin_irq_dma+0x8fc>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d048      	beq.n	8001996 <stdin_irq_dma+0x8c6>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a30      	ldr	r2, [pc, #192]	; (80019d0 <stdin_irq_dma+0x900>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d03e      	beq.n	8001990 <stdin_irq_dma+0x8c0>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a2e      	ldr	r2, [pc, #184]	; (80019d4 <stdin_irq_dma+0x904>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d034      	beq.n	800198a <stdin_irq_dma+0x8ba>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a2b      	ldr	r2, [pc, #172]	; (80019d8 <stdin_irq_dma+0x908>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d02a      	beq.n	8001984 <stdin_irq_dma+0x8b4>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a29      	ldr	r2, [pc, #164]	; (80019dc <stdin_irq_dma+0x90c>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d020      	beq.n	800197e <stdin_irq_dma+0x8ae>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a26      	ldr	r2, [pc, #152]	; (80019e0 <stdin_irq_dma+0x910>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d016      	beq.n	8001978 <stdin_irq_dma+0x8a8>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a24      	ldr	r2, [pc, #144]	; (80019e4 <stdin_irq_dma+0x914>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d00c      	beq.n	8001972 <stdin_irq_dma+0x8a2>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a21      	ldr	r2, [pc, #132]	; (80019e8 <stdin_irq_dma+0x918>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d102      	bne.n	800196c <stdin_irq_dma+0x89c>
 8001966:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800196a:	e01e      	b.n	80019aa <stdin_irq_dma+0x8da>
 800196c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001970:	e01b      	b.n	80019aa <stdin_irq_dma+0x8da>
 8001972:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001976:	e018      	b.n	80019aa <stdin_irq_dma+0x8da>
 8001978:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800197c:	e015      	b.n	80019aa <stdin_irq_dma+0x8da>
 800197e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001982:	e012      	b.n	80019aa <stdin_irq_dma+0x8da>
 8001984:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001988:	e00f      	b.n	80019aa <stdin_irq_dma+0x8da>
 800198a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800198e:	e00c      	b.n	80019aa <stdin_irq_dma+0x8da>
 8001990:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001994:	e009      	b.n	80019aa <stdin_irq_dma+0x8da>
 8001996:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800199a:	e006      	b.n	80019aa <stdin_irq_dma+0x8da>
 800199c:	2320      	movs	r3, #32
 800199e:	e004      	b.n	80019aa <stdin_irq_dma+0x8da>
 80019a0:	2320      	movs	r3, #32
 80019a2:	e002      	b.n	80019aa <stdin_irq_dma+0x8da>
 80019a4:	2320      	movs	r3, #32
 80019a6:	e000      	b.n	80019aa <stdin_irq_dma+0x8da>
 80019a8:	2320      	movs	r3, #32
 80019aa:	4a10      	ldr	r2, [pc, #64]	; (80019ec <stdin_irq_dma+0x91c>)
 80019ac:	6093      	str	r3, [r2, #8]
    check_buffer(in);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 fee6 	bl	8002780 <check_buffer>
}
 80019b4:	f000 bea4 	b.w	8002700 <stdin_irq_dma+0x1630>
 80019b8:	40026058 	.word	0x40026058
 80019bc:	40026010 	.word	0x40026010
 80019c0:	40026410 	.word	0x40026410
 80019c4:	40026070 	.word	0x40026070
 80019c8:	40026470 	.word	0x40026470
 80019cc:	40026028 	.word	0x40026028
 80019d0:	40026428 	.word	0x40026428
 80019d4:	40026088 	.word	0x40026088
 80019d8:	40026488 	.word	0x40026488
 80019dc:	40026040 	.word	0x40026040
 80019e0:	40026440 	.word	0x40026440
 80019e4:	400260a0 	.word	0x400260a0
 80019e8:	400264a0 	.word	0x400264a0
 80019ec:	40026000 	.word	0x40026000
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_TE_FLAG_INDEX(HDMA(in)));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b7f      	ldr	r3, [pc, #508]	; (8001bf8 <stdin_irq_dma+0xb28>)
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d978      	bls.n	8001af2 <stdin_irq_dma+0xa22>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a7c      	ldr	r2, [pc, #496]	; (8001bfc <stdin_irq_dma+0xb2c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d06d      	beq.n	8001aea <stdin_irq_dma+0xa1a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a7a      	ldr	r2, [pc, #488]	; (8001c00 <stdin_irq_dma+0xb30>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d064      	beq.n	8001ae6 <stdin_irq_dma+0xa16>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a77      	ldr	r2, [pc, #476]	; (8001c04 <stdin_irq_dma+0xb34>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d05b      	beq.n	8001ae2 <stdin_irq_dma+0xa12>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a75      	ldr	r2, [pc, #468]	; (8001c08 <stdin_irq_dma+0xb38>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d052      	beq.n	8001ade <stdin_irq_dma+0xa0e>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a72      	ldr	r2, [pc, #456]	; (8001c0c <stdin_irq_dma+0xb3c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d048      	beq.n	8001ad8 <stdin_irq_dma+0xa08>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a70      	ldr	r2, [pc, #448]	; (8001c10 <stdin_irq_dma+0xb40>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d03e      	beq.n	8001ad2 <stdin_irq_dma+0xa02>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a6d      	ldr	r2, [pc, #436]	; (8001c14 <stdin_irq_dma+0xb44>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d034      	beq.n	8001acc <stdin_irq_dma+0x9fc>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a6b      	ldr	r2, [pc, #428]	; (8001c18 <stdin_irq_dma+0xb48>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d02a      	beq.n	8001ac6 <stdin_irq_dma+0x9f6>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a68      	ldr	r2, [pc, #416]	; (8001c1c <stdin_irq_dma+0xb4c>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d020      	beq.n	8001ac0 <stdin_irq_dma+0x9f0>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a66      	ldr	r2, [pc, #408]	; (8001c20 <stdin_irq_dma+0xb50>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d016      	beq.n	8001aba <stdin_irq_dma+0x9ea>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a63      	ldr	r2, [pc, #396]	; (8001c24 <stdin_irq_dma+0xb54>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d00c      	beq.n	8001ab4 <stdin_irq_dma+0x9e4>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a61      	ldr	r2, [pc, #388]	; (8001c28 <stdin_irq_dma+0xb58>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d102      	bne.n	8001aae <stdin_irq_dma+0x9de>
 8001aa8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001aac:	e01e      	b.n	8001aec <stdin_irq_dma+0xa1c>
 8001aae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ab2:	e01b      	b.n	8001aec <stdin_irq_dma+0xa1c>
 8001ab4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001ab8:	e018      	b.n	8001aec <stdin_irq_dma+0xa1c>
 8001aba:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001abe:	e015      	b.n	8001aec <stdin_irq_dma+0xa1c>
 8001ac0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001ac4:	e012      	b.n	8001aec <stdin_irq_dma+0xa1c>
 8001ac6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aca:	e00f      	b.n	8001aec <stdin_irq_dma+0xa1c>
 8001acc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ad0:	e00c      	b.n	8001aec <stdin_irq_dma+0xa1c>
 8001ad2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ad6:	e009      	b.n	8001aec <stdin_irq_dma+0xa1c>
 8001ad8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001adc:	e006      	b.n	8001aec <stdin_irq_dma+0xa1c>
 8001ade:	2308      	movs	r3, #8
 8001ae0:	e004      	b.n	8001aec <stdin_irq_dma+0xa1c>
 8001ae2:	2308      	movs	r3, #8
 8001ae4:	e002      	b.n	8001aec <stdin_irq_dma+0xa1c>
 8001ae6:	2308      	movs	r3, #8
 8001ae8:	e000      	b.n	8001aec <stdin_irq_dma+0xa1c>
 8001aea:	2308      	movs	r3, #8
 8001aec:	4a4f      	ldr	r2, [pc, #316]	; (8001c2c <stdin_irq_dma+0xb5c>)
 8001aee:	60d3      	str	r3, [r2, #12]
 8001af0:	e1b7      	b.n	8001e62 <stdin_irq_dma+0xd92>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	461a      	mov	r2, r3
 8001afc:	4b4c      	ldr	r3, [pc, #304]	; (8001c30 <stdin_irq_dma+0xb60>)
 8001afe:	429a      	cmp	r2, r3
 8001b00:	f240 8098 	bls.w	8001c34 <stdin_irq_dma+0xb64>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a3b      	ldr	r2, [pc, #236]	; (8001bfc <stdin_irq_dma+0xb2c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d06d      	beq.n	8001bee <stdin_irq_dma+0xb1e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a39      	ldr	r2, [pc, #228]	; (8001c00 <stdin_irq_dma+0xb30>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d064      	beq.n	8001bea <stdin_irq_dma+0xb1a>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a36      	ldr	r2, [pc, #216]	; (8001c04 <stdin_irq_dma+0xb34>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d05b      	beq.n	8001be6 <stdin_irq_dma+0xb16>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a34      	ldr	r2, [pc, #208]	; (8001c08 <stdin_irq_dma+0xb38>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d052      	beq.n	8001be2 <stdin_irq_dma+0xb12>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a31      	ldr	r2, [pc, #196]	; (8001c0c <stdin_irq_dma+0xb3c>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d048      	beq.n	8001bdc <stdin_irq_dma+0xb0c>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a2f      	ldr	r2, [pc, #188]	; (8001c10 <stdin_irq_dma+0xb40>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d03e      	beq.n	8001bd6 <stdin_irq_dma+0xb06>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a2c      	ldr	r2, [pc, #176]	; (8001c14 <stdin_irq_dma+0xb44>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d034      	beq.n	8001bd0 <stdin_irq_dma+0xb00>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a2a      	ldr	r2, [pc, #168]	; (8001c18 <stdin_irq_dma+0xb48>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d02a      	beq.n	8001bca <stdin_irq_dma+0xafa>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a27      	ldr	r2, [pc, #156]	; (8001c1c <stdin_irq_dma+0xb4c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d020      	beq.n	8001bc4 <stdin_irq_dma+0xaf4>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a25      	ldr	r2, [pc, #148]	; (8001c20 <stdin_irq_dma+0xb50>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d016      	beq.n	8001bbe <stdin_irq_dma+0xaee>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a22      	ldr	r2, [pc, #136]	; (8001c24 <stdin_irq_dma+0xb54>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d00c      	beq.n	8001bb8 <stdin_irq_dma+0xae8>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a20      	ldr	r2, [pc, #128]	; (8001c28 <stdin_irq_dma+0xb58>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d102      	bne.n	8001bb2 <stdin_irq_dma+0xae2>
 8001bac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001bb0:	e01e      	b.n	8001bf0 <stdin_irq_dma+0xb20>
 8001bb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bb6:	e01b      	b.n	8001bf0 <stdin_irq_dma+0xb20>
 8001bb8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001bbc:	e018      	b.n	8001bf0 <stdin_irq_dma+0xb20>
 8001bbe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001bc2:	e015      	b.n	8001bf0 <stdin_irq_dma+0xb20>
 8001bc4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001bc8:	e012      	b.n	8001bf0 <stdin_irq_dma+0xb20>
 8001bca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bce:	e00f      	b.n	8001bf0 <stdin_irq_dma+0xb20>
 8001bd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bd4:	e00c      	b.n	8001bf0 <stdin_irq_dma+0xb20>
 8001bd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bda:	e009      	b.n	8001bf0 <stdin_irq_dma+0xb20>
 8001bdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001be0:	e006      	b.n	8001bf0 <stdin_irq_dma+0xb20>
 8001be2:	2308      	movs	r3, #8
 8001be4:	e004      	b.n	8001bf0 <stdin_irq_dma+0xb20>
 8001be6:	2308      	movs	r3, #8
 8001be8:	e002      	b.n	8001bf0 <stdin_irq_dma+0xb20>
 8001bea:	2308      	movs	r3, #8
 8001bec:	e000      	b.n	8001bf0 <stdin_irq_dma+0xb20>
 8001bee:	2308      	movs	r3, #8
 8001bf0:	4a0e      	ldr	r2, [pc, #56]	; (8001c2c <stdin_irq_dma+0xb5c>)
 8001bf2:	6093      	str	r3, [r2, #8]
 8001bf4:	e135      	b.n	8001e62 <stdin_irq_dma+0xd92>
 8001bf6:	bf00      	nop
 8001bf8:	40026458 	.word	0x40026458
 8001bfc:	40026010 	.word	0x40026010
 8001c00:	40026410 	.word	0x40026410
 8001c04:	40026070 	.word	0x40026070
 8001c08:	40026470 	.word	0x40026470
 8001c0c:	40026028 	.word	0x40026028
 8001c10:	40026428 	.word	0x40026428
 8001c14:	40026088 	.word	0x40026088
 8001c18:	40026488 	.word	0x40026488
 8001c1c:	40026040 	.word	0x40026040
 8001c20:	40026440 	.word	0x40026440
 8001c24:	400260a0 	.word	0x400260a0
 8001c28:	400264a0 	.word	0x400264a0
 8001c2c:	40026400 	.word	0x40026400
 8001c30:	400260b8 	.word	0x400260b8
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b79      	ldr	r3, [pc, #484]	; (8001e24 <stdin_irq_dma+0xd54>)
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d978      	bls.n	8001d36 <stdin_irq_dma+0xc66>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a76      	ldr	r2, [pc, #472]	; (8001e28 <stdin_irq_dma+0xd58>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d06d      	beq.n	8001d2e <stdin_irq_dma+0xc5e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a74      	ldr	r2, [pc, #464]	; (8001e2c <stdin_irq_dma+0xd5c>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d064      	beq.n	8001d2a <stdin_irq_dma+0xc5a>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a71      	ldr	r2, [pc, #452]	; (8001e30 <stdin_irq_dma+0xd60>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d05b      	beq.n	8001d26 <stdin_irq_dma+0xc56>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a6f      	ldr	r2, [pc, #444]	; (8001e34 <stdin_irq_dma+0xd64>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d052      	beq.n	8001d22 <stdin_irq_dma+0xc52>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a6c      	ldr	r2, [pc, #432]	; (8001e38 <stdin_irq_dma+0xd68>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d048      	beq.n	8001d1c <stdin_irq_dma+0xc4c>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a6a      	ldr	r2, [pc, #424]	; (8001e3c <stdin_irq_dma+0xd6c>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d03e      	beq.n	8001d16 <stdin_irq_dma+0xc46>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a67      	ldr	r2, [pc, #412]	; (8001e40 <stdin_irq_dma+0xd70>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d034      	beq.n	8001d10 <stdin_irq_dma+0xc40>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a65      	ldr	r2, [pc, #404]	; (8001e44 <stdin_irq_dma+0xd74>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d02a      	beq.n	8001d0a <stdin_irq_dma+0xc3a>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a62      	ldr	r2, [pc, #392]	; (8001e48 <stdin_irq_dma+0xd78>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d020      	beq.n	8001d04 <stdin_irq_dma+0xc34>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a60      	ldr	r2, [pc, #384]	; (8001e4c <stdin_irq_dma+0xd7c>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d016      	beq.n	8001cfe <stdin_irq_dma+0xc2e>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a5d      	ldr	r2, [pc, #372]	; (8001e50 <stdin_irq_dma+0xd80>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d00c      	beq.n	8001cf8 <stdin_irq_dma+0xc28>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a5b      	ldr	r2, [pc, #364]	; (8001e54 <stdin_irq_dma+0xd84>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d102      	bne.n	8001cf2 <stdin_irq_dma+0xc22>
 8001cec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001cf0:	e01e      	b.n	8001d30 <stdin_irq_dma+0xc60>
 8001cf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cf6:	e01b      	b.n	8001d30 <stdin_irq_dma+0xc60>
 8001cf8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001cfc:	e018      	b.n	8001d30 <stdin_irq_dma+0xc60>
 8001cfe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001d02:	e015      	b.n	8001d30 <stdin_irq_dma+0xc60>
 8001d04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001d08:	e012      	b.n	8001d30 <stdin_irq_dma+0xc60>
 8001d0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d0e:	e00f      	b.n	8001d30 <stdin_irq_dma+0xc60>
 8001d10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d14:	e00c      	b.n	8001d30 <stdin_irq_dma+0xc60>
 8001d16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d1a:	e009      	b.n	8001d30 <stdin_irq_dma+0xc60>
 8001d1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d20:	e006      	b.n	8001d30 <stdin_irq_dma+0xc60>
 8001d22:	2308      	movs	r3, #8
 8001d24:	e004      	b.n	8001d30 <stdin_irq_dma+0xc60>
 8001d26:	2308      	movs	r3, #8
 8001d28:	e002      	b.n	8001d30 <stdin_irq_dma+0xc60>
 8001d2a:	2308      	movs	r3, #8
 8001d2c:	e000      	b.n	8001d30 <stdin_irq_dma+0xc60>
 8001d2e:	2308      	movs	r3, #8
 8001d30:	4a49      	ldr	r2, [pc, #292]	; (8001e58 <stdin_irq_dma+0xd88>)
 8001d32:	60d3      	str	r3, [r2, #12]
 8001d34:	e095      	b.n	8001e62 <stdin_irq_dma+0xd92>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a3a      	ldr	r2, [pc, #232]	; (8001e28 <stdin_irq_dma+0xd58>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	f000 808b 	beq.w	8001e5c <stdin_irq_dma+0xd8c>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a37      	ldr	r2, [pc, #220]	; (8001e2c <stdin_irq_dma+0xd5c>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d064      	beq.n	8001e1e <stdin_irq_dma+0xd4e>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a34      	ldr	r2, [pc, #208]	; (8001e30 <stdin_irq_dma+0xd60>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d05b      	beq.n	8001e1a <stdin_irq_dma+0xd4a>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a32      	ldr	r2, [pc, #200]	; (8001e34 <stdin_irq_dma+0xd64>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d052      	beq.n	8001e16 <stdin_irq_dma+0xd46>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a2f      	ldr	r2, [pc, #188]	; (8001e38 <stdin_irq_dma+0xd68>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d048      	beq.n	8001e10 <stdin_irq_dma+0xd40>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a2d      	ldr	r2, [pc, #180]	; (8001e3c <stdin_irq_dma+0xd6c>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d03e      	beq.n	8001e0a <stdin_irq_dma+0xd3a>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a2a      	ldr	r2, [pc, #168]	; (8001e40 <stdin_irq_dma+0xd70>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d034      	beq.n	8001e04 <stdin_irq_dma+0xd34>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a28      	ldr	r2, [pc, #160]	; (8001e44 <stdin_irq_dma+0xd74>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d02a      	beq.n	8001dfe <stdin_irq_dma+0xd2e>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a25      	ldr	r2, [pc, #148]	; (8001e48 <stdin_irq_dma+0xd78>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d020      	beq.n	8001df8 <stdin_irq_dma+0xd28>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a23      	ldr	r2, [pc, #140]	; (8001e4c <stdin_irq_dma+0xd7c>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d016      	beq.n	8001df2 <stdin_irq_dma+0xd22>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a20      	ldr	r2, [pc, #128]	; (8001e50 <stdin_irq_dma+0xd80>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d00c      	beq.n	8001dec <stdin_irq_dma+0xd1c>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a1e      	ldr	r2, [pc, #120]	; (8001e54 <stdin_irq_dma+0xd84>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d102      	bne.n	8001de6 <stdin_irq_dma+0xd16>
 8001de0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001de4:	e03b      	b.n	8001e5e <stdin_irq_dma+0xd8e>
 8001de6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dea:	e038      	b.n	8001e5e <stdin_irq_dma+0xd8e>
 8001dec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001df0:	e035      	b.n	8001e5e <stdin_irq_dma+0xd8e>
 8001df2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001df6:	e032      	b.n	8001e5e <stdin_irq_dma+0xd8e>
 8001df8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001dfc:	e02f      	b.n	8001e5e <stdin_irq_dma+0xd8e>
 8001dfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e02:	e02c      	b.n	8001e5e <stdin_irq_dma+0xd8e>
 8001e04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e08:	e029      	b.n	8001e5e <stdin_irq_dma+0xd8e>
 8001e0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e0e:	e026      	b.n	8001e5e <stdin_irq_dma+0xd8e>
 8001e10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e14:	e023      	b.n	8001e5e <stdin_irq_dma+0xd8e>
 8001e16:	2308      	movs	r3, #8
 8001e18:	e021      	b.n	8001e5e <stdin_irq_dma+0xd8e>
 8001e1a:	2308      	movs	r3, #8
 8001e1c:	e01f      	b.n	8001e5e <stdin_irq_dma+0xd8e>
 8001e1e:	2308      	movs	r3, #8
 8001e20:	e01d      	b.n	8001e5e <stdin_irq_dma+0xd8e>
 8001e22:	bf00      	nop
 8001e24:	40026058 	.word	0x40026058
 8001e28:	40026010 	.word	0x40026010
 8001e2c:	40026410 	.word	0x40026410
 8001e30:	40026070 	.word	0x40026070
 8001e34:	40026470 	.word	0x40026470
 8001e38:	40026028 	.word	0x40026028
 8001e3c:	40026428 	.word	0x40026428
 8001e40:	40026088 	.word	0x40026088
 8001e44:	40026488 	.word	0x40026488
 8001e48:	40026040 	.word	0x40026040
 8001e4c:	40026440 	.word	0x40026440
 8001e50:	400260a0 	.word	0x400260a0
 8001e54:	400264a0 	.word	0x400264a0
 8001e58:	40026000 	.word	0x40026000
 8001e5c:	2308      	movs	r3, #8
 8001e5e:	4a7e      	ldr	r2, [pc, #504]	; (8002058 <stdin_irq_dma+0xf88>)
 8001e60:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_FE_FLAG_INDEX(HDMA(in)));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	4b7b      	ldr	r3, [pc, #492]	; (800205c <stdin_irq_dma+0xf8c>)
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d974      	bls.n	8001f5c <stdin_irq_dma+0xe8c>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a79      	ldr	r2, [pc, #484]	; (8002060 <stdin_irq_dma+0xf90>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d069      	beq.n	8001f54 <stdin_irq_dma+0xe84>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a76      	ldr	r2, [pc, #472]	; (8002064 <stdin_irq_dma+0xf94>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d060      	beq.n	8001f50 <stdin_irq_dma+0xe80>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a74      	ldr	r2, [pc, #464]	; (8002068 <stdin_irq_dma+0xf98>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d057      	beq.n	8001f4c <stdin_irq_dma+0xe7c>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a71      	ldr	r2, [pc, #452]	; (800206c <stdin_irq_dma+0xf9c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d04e      	beq.n	8001f48 <stdin_irq_dma+0xe78>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a6f      	ldr	r2, [pc, #444]	; (8002070 <stdin_irq_dma+0xfa0>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d045      	beq.n	8001f44 <stdin_irq_dma+0xe74>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a6c      	ldr	r2, [pc, #432]	; (8002074 <stdin_irq_dma+0xfa4>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d03c      	beq.n	8001f40 <stdin_irq_dma+0xe70>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a6a      	ldr	r2, [pc, #424]	; (8002078 <stdin_irq_dma+0xfa8>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d033      	beq.n	8001f3c <stdin_irq_dma+0xe6c>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a67      	ldr	r2, [pc, #412]	; (800207c <stdin_irq_dma+0xfac>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d02a      	beq.n	8001f38 <stdin_irq_dma+0xe68>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a65      	ldr	r2, [pc, #404]	; (8002080 <stdin_irq_dma+0xfb0>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d020      	beq.n	8001f32 <stdin_irq_dma+0xe62>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a62      	ldr	r2, [pc, #392]	; (8002084 <stdin_irq_dma+0xfb4>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d016      	beq.n	8001f2c <stdin_irq_dma+0xe5c>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a60      	ldr	r2, [pc, #384]	; (8002088 <stdin_irq_dma+0xfb8>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d00c      	beq.n	8001f26 <stdin_irq_dma+0xe56>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a5d      	ldr	r2, [pc, #372]	; (800208c <stdin_irq_dma+0xfbc>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d102      	bne.n	8001f20 <stdin_irq_dma+0xe50>
 8001f1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f1e:	e01a      	b.n	8001f56 <stdin_irq_dma+0xe86>
 8001f20:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f24:	e017      	b.n	8001f56 <stdin_irq_dma+0xe86>
 8001f26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f2a:	e014      	b.n	8001f56 <stdin_irq_dma+0xe86>
 8001f2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f30:	e011      	b.n	8001f56 <stdin_irq_dma+0xe86>
 8001f32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f36:	e00e      	b.n	8001f56 <stdin_irq_dma+0xe86>
 8001f38:	2340      	movs	r3, #64	; 0x40
 8001f3a:	e00c      	b.n	8001f56 <stdin_irq_dma+0xe86>
 8001f3c:	2340      	movs	r3, #64	; 0x40
 8001f3e:	e00a      	b.n	8001f56 <stdin_irq_dma+0xe86>
 8001f40:	2340      	movs	r3, #64	; 0x40
 8001f42:	e008      	b.n	8001f56 <stdin_irq_dma+0xe86>
 8001f44:	2340      	movs	r3, #64	; 0x40
 8001f46:	e006      	b.n	8001f56 <stdin_irq_dma+0xe86>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e004      	b.n	8001f56 <stdin_irq_dma+0xe86>
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e002      	b.n	8001f56 <stdin_irq_dma+0xe86>
 8001f50:	2301      	movs	r3, #1
 8001f52:	e000      	b.n	8001f56 <stdin_irq_dma+0xe86>
 8001f54:	2301      	movs	r3, #1
 8001f56:	4a4e      	ldr	r2, [pc, #312]	; (8002090 <stdin_irq_dma+0xfc0>)
 8001f58:	60d3      	str	r3, [r2, #12]
 8001f5a:	e1ac      	b.n	80022b6 <stdin_irq_dma+0x11e6>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	461a      	mov	r2, r3
 8001f66:	4b4b      	ldr	r3, [pc, #300]	; (8002094 <stdin_irq_dma+0xfc4>)
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	f240 8095 	bls.w	8002098 <stdin_irq_dma+0xfc8>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a3a      	ldr	r2, [pc, #232]	; (8002060 <stdin_irq_dma+0xf90>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d069      	beq.n	8002050 <stdin_irq_dma+0xf80>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a37      	ldr	r2, [pc, #220]	; (8002064 <stdin_irq_dma+0xf94>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d060      	beq.n	800204c <stdin_irq_dma+0xf7c>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a35      	ldr	r2, [pc, #212]	; (8002068 <stdin_irq_dma+0xf98>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d057      	beq.n	8002048 <stdin_irq_dma+0xf78>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a32      	ldr	r2, [pc, #200]	; (800206c <stdin_irq_dma+0xf9c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d04e      	beq.n	8002044 <stdin_irq_dma+0xf74>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a30      	ldr	r2, [pc, #192]	; (8002070 <stdin_irq_dma+0xfa0>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d045      	beq.n	8002040 <stdin_irq_dma+0xf70>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a2d      	ldr	r2, [pc, #180]	; (8002074 <stdin_irq_dma+0xfa4>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d03c      	beq.n	800203c <stdin_irq_dma+0xf6c>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a2b      	ldr	r2, [pc, #172]	; (8002078 <stdin_irq_dma+0xfa8>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d033      	beq.n	8002038 <stdin_irq_dma+0xf68>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a28      	ldr	r2, [pc, #160]	; (800207c <stdin_irq_dma+0xfac>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d02a      	beq.n	8002034 <stdin_irq_dma+0xf64>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a26      	ldr	r2, [pc, #152]	; (8002080 <stdin_irq_dma+0xfb0>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d020      	beq.n	800202e <stdin_irq_dma+0xf5e>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a23      	ldr	r2, [pc, #140]	; (8002084 <stdin_irq_dma+0xfb4>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d016      	beq.n	8002028 <stdin_irq_dma+0xf58>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a21      	ldr	r2, [pc, #132]	; (8002088 <stdin_irq_dma+0xfb8>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d00c      	beq.n	8002022 <stdin_irq_dma+0xf52>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a1e      	ldr	r2, [pc, #120]	; (800208c <stdin_irq_dma+0xfbc>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d102      	bne.n	800201c <stdin_irq_dma+0xf4c>
 8002016:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800201a:	e01a      	b.n	8002052 <stdin_irq_dma+0xf82>
 800201c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002020:	e017      	b.n	8002052 <stdin_irq_dma+0xf82>
 8002022:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002026:	e014      	b.n	8002052 <stdin_irq_dma+0xf82>
 8002028:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800202c:	e011      	b.n	8002052 <stdin_irq_dma+0xf82>
 800202e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002032:	e00e      	b.n	8002052 <stdin_irq_dma+0xf82>
 8002034:	2340      	movs	r3, #64	; 0x40
 8002036:	e00c      	b.n	8002052 <stdin_irq_dma+0xf82>
 8002038:	2340      	movs	r3, #64	; 0x40
 800203a:	e00a      	b.n	8002052 <stdin_irq_dma+0xf82>
 800203c:	2340      	movs	r3, #64	; 0x40
 800203e:	e008      	b.n	8002052 <stdin_irq_dma+0xf82>
 8002040:	2340      	movs	r3, #64	; 0x40
 8002042:	e006      	b.n	8002052 <stdin_irq_dma+0xf82>
 8002044:	2301      	movs	r3, #1
 8002046:	e004      	b.n	8002052 <stdin_irq_dma+0xf82>
 8002048:	2301      	movs	r3, #1
 800204a:	e002      	b.n	8002052 <stdin_irq_dma+0xf82>
 800204c:	2301      	movs	r3, #1
 800204e:	e000      	b.n	8002052 <stdin_irq_dma+0xf82>
 8002050:	2301      	movs	r3, #1
 8002052:	4a0f      	ldr	r2, [pc, #60]	; (8002090 <stdin_irq_dma+0xfc0>)
 8002054:	6093      	str	r3, [r2, #8]
 8002056:	e12e      	b.n	80022b6 <stdin_irq_dma+0x11e6>
 8002058:	40026000 	.word	0x40026000
 800205c:	40026458 	.word	0x40026458
 8002060:	40026010 	.word	0x40026010
 8002064:	40026410 	.word	0x40026410
 8002068:	40026070 	.word	0x40026070
 800206c:	40026470 	.word	0x40026470
 8002070:	40026028 	.word	0x40026028
 8002074:	40026428 	.word	0x40026428
 8002078:	40026088 	.word	0x40026088
 800207c:	40026488 	.word	0x40026488
 8002080:	40026040 	.word	0x40026040
 8002084:	40026440 	.word	0x40026440
 8002088:	400260a0 	.word	0x400260a0
 800208c:	400264a0 	.word	0x400264a0
 8002090:	40026400 	.word	0x40026400
 8002094:	400260b8 	.word	0x400260b8
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	4b75      	ldr	r3, [pc, #468]	; (8002278 <stdin_irq_dma+0x11a8>)
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d974      	bls.n	8002192 <stdin_irq_dma+0x10c2>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a72      	ldr	r2, [pc, #456]	; (800227c <stdin_irq_dma+0x11ac>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d069      	beq.n	800218a <stdin_irq_dma+0x10ba>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a70      	ldr	r2, [pc, #448]	; (8002280 <stdin_irq_dma+0x11b0>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d060      	beq.n	8002186 <stdin_irq_dma+0x10b6>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a6d      	ldr	r2, [pc, #436]	; (8002284 <stdin_irq_dma+0x11b4>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d057      	beq.n	8002182 <stdin_irq_dma+0x10b2>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a6b      	ldr	r2, [pc, #428]	; (8002288 <stdin_irq_dma+0x11b8>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d04e      	beq.n	800217e <stdin_irq_dma+0x10ae>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a68      	ldr	r2, [pc, #416]	; (800228c <stdin_irq_dma+0x11bc>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d045      	beq.n	800217a <stdin_irq_dma+0x10aa>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a66      	ldr	r2, [pc, #408]	; (8002290 <stdin_irq_dma+0x11c0>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d03c      	beq.n	8002176 <stdin_irq_dma+0x10a6>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a63      	ldr	r2, [pc, #396]	; (8002294 <stdin_irq_dma+0x11c4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d033      	beq.n	8002172 <stdin_irq_dma+0x10a2>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a61      	ldr	r2, [pc, #388]	; (8002298 <stdin_irq_dma+0x11c8>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d02a      	beq.n	800216e <stdin_irq_dma+0x109e>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a5e      	ldr	r2, [pc, #376]	; (800229c <stdin_irq_dma+0x11cc>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d020      	beq.n	8002168 <stdin_irq_dma+0x1098>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a5c      	ldr	r2, [pc, #368]	; (80022a0 <stdin_irq_dma+0x11d0>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d016      	beq.n	8002162 <stdin_irq_dma+0x1092>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a59      	ldr	r2, [pc, #356]	; (80022a4 <stdin_irq_dma+0x11d4>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d00c      	beq.n	800215c <stdin_irq_dma+0x108c>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a57      	ldr	r2, [pc, #348]	; (80022a8 <stdin_irq_dma+0x11d8>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d102      	bne.n	8002156 <stdin_irq_dma+0x1086>
 8002150:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002154:	e01a      	b.n	800218c <stdin_irq_dma+0x10bc>
 8002156:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800215a:	e017      	b.n	800218c <stdin_irq_dma+0x10bc>
 800215c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002160:	e014      	b.n	800218c <stdin_irq_dma+0x10bc>
 8002162:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002166:	e011      	b.n	800218c <stdin_irq_dma+0x10bc>
 8002168:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800216c:	e00e      	b.n	800218c <stdin_irq_dma+0x10bc>
 800216e:	2340      	movs	r3, #64	; 0x40
 8002170:	e00c      	b.n	800218c <stdin_irq_dma+0x10bc>
 8002172:	2340      	movs	r3, #64	; 0x40
 8002174:	e00a      	b.n	800218c <stdin_irq_dma+0x10bc>
 8002176:	2340      	movs	r3, #64	; 0x40
 8002178:	e008      	b.n	800218c <stdin_irq_dma+0x10bc>
 800217a:	2340      	movs	r3, #64	; 0x40
 800217c:	e006      	b.n	800218c <stdin_irq_dma+0x10bc>
 800217e:	2301      	movs	r3, #1
 8002180:	e004      	b.n	800218c <stdin_irq_dma+0x10bc>
 8002182:	2301      	movs	r3, #1
 8002184:	e002      	b.n	800218c <stdin_irq_dma+0x10bc>
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <stdin_irq_dma+0x10bc>
 800218a:	2301      	movs	r3, #1
 800218c:	4a47      	ldr	r2, [pc, #284]	; (80022ac <stdin_irq_dma+0x11dc>)
 800218e:	60d3      	str	r3, [r2, #12]
 8002190:	e091      	b.n	80022b6 <stdin_irq_dma+0x11e6>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a38      	ldr	r2, [pc, #224]	; (800227c <stdin_irq_dma+0x11ac>)
 800219c:	4293      	cmp	r3, r2
 800219e:	f000 8087 	beq.w	80022b0 <stdin_irq_dma+0x11e0>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a35      	ldr	r2, [pc, #212]	; (8002280 <stdin_irq_dma+0x11b0>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d060      	beq.n	8002272 <stdin_irq_dma+0x11a2>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a32      	ldr	r2, [pc, #200]	; (8002284 <stdin_irq_dma+0x11b4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d057      	beq.n	800226e <stdin_irq_dma+0x119e>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a30      	ldr	r2, [pc, #192]	; (8002288 <stdin_irq_dma+0x11b8>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d04e      	beq.n	800226a <stdin_irq_dma+0x119a>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a2d      	ldr	r2, [pc, #180]	; (800228c <stdin_irq_dma+0x11bc>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d045      	beq.n	8002266 <stdin_irq_dma+0x1196>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a2b      	ldr	r2, [pc, #172]	; (8002290 <stdin_irq_dma+0x11c0>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d03c      	beq.n	8002262 <stdin_irq_dma+0x1192>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a28      	ldr	r2, [pc, #160]	; (8002294 <stdin_irq_dma+0x11c4>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d033      	beq.n	800225e <stdin_irq_dma+0x118e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a26      	ldr	r2, [pc, #152]	; (8002298 <stdin_irq_dma+0x11c8>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d02a      	beq.n	800225a <stdin_irq_dma+0x118a>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a23      	ldr	r2, [pc, #140]	; (800229c <stdin_irq_dma+0x11cc>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d020      	beq.n	8002254 <stdin_irq_dma+0x1184>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a21      	ldr	r2, [pc, #132]	; (80022a0 <stdin_irq_dma+0x11d0>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d016      	beq.n	800224e <stdin_irq_dma+0x117e>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a1e      	ldr	r2, [pc, #120]	; (80022a4 <stdin_irq_dma+0x11d4>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d00c      	beq.n	8002248 <stdin_irq_dma+0x1178>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a1c      	ldr	r2, [pc, #112]	; (80022a8 <stdin_irq_dma+0x11d8>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d102      	bne.n	8002242 <stdin_irq_dma+0x1172>
 800223c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002240:	e037      	b.n	80022b2 <stdin_irq_dma+0x11e2>
 8002242:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002246:	e034      	b.n	80022b2 <stdin_irq_dma+0x11e2>
 8002248:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800224c:	e031      	b.n	80022b2 <stdin_irq_dma+0x11e2>
 800224e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002252:	e02e      	b.n	80022b2 <stdin_irq_dma+0x11e2>
 8002254:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002258:	e02b      	b.n	80022b2 <stdin_irq_dma+0x11e2>
 800225a:	2340      	movs	r3, #64	; 0x40
 800225c:	e029      	b.n	80022b2 <stdin_irq_dma+0x11e2>
 800225e:	2340      	movs	r3, #64	; 0x40
 8002260:	e027      	b.n	80022b2 <stdin_irq_dma+0x11e2>
 8002262:	2340      	movs	r3, #64	; 0x40
 8002264:	e025      	b.n	80022b2 <stdin_irq_dma+0x11e2>
 8002266:	2340      	movs	r3, #64	; 0x40
 8002268:	e023      	b.n	80022b2 <stdin_irq_dma+0x11e2>
 800226a:	2301      	movs	r3, #1
 800226c:	e021      	b.n	80022b2 <stdin_irq_dma+0x11e2>
 800226e:	2301      	movs	r3, #1
 8002270:	e01f      	b.n	80022b2 <stdin_irq_dma+0x11e2>
 8002272:	2301      	movs	r3, #1
 8002274:	e01d      	b.n	80022b2 <stdin_irq_dma+0x11e2>
 8002276:	bf00      	nop
 8002278:	40026058 	.word	0x40026058
 800227c:	40026010 	.word	0x40026010
 8002280:	40026410 	.word	0x40026410
 8002284:	40026070 	.word	0x40026070
 8002288:	40026470 	.word	0x40026470
 800228c:	40026028 	.word	0x40026028
 8002290:	40026428 	.word	0x40026428
 8002294:	40026088 	.word	0x40026088
 8002298:	40026488 	.word	0x40026488
 800229c:	40026040 	.word	0x40026040
 80022a0:	40026440 	.word	0x40026440
 80022a4:	400260a0 	.word	0x400260a0
 80022a8:	400264a0 	.word	0x400264a0
 80022ac:	40026000 	.word	0x40026000
 80022b0:	2301      	movs	r3, #1
 80022b2:	4a82      	ldr	r2, [pc, #520]	; (80024bc <stdin_irq_dma+0x13ec>)
 80022b4:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_DME_FLAG_INDEX(HDMA(in)));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	461a      	mov	r2, r3
 80022c0:	4b7f      	ldr	r3, [pc, #508]	; (80024c0 <stdin_irq_dma+0x13f0>)
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d978      	bls.n	80023b8 <stdin_irq_dma+0x12e8>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a7d      	ldr	r2, [pc, #500]	; (80024c4 <stdin_irq_dma+0x13f4>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d06d      	beq.n	80023b0 <stdin_irq_dma+0x12e0>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a7a      	ldr	r2, [pc, #488]	; (80024c8 <stdin_irq_dma+0x13f8>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d064      	beq.n	80023ac <stdin_irq_dma+0x12dc>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a78      	ldr	r2, [pc, #480]	; (80024cc <stdin_irq_dma+0x13fc>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d05b      	beq.n	80023a8 <stdin_irq_dma+0x12d8>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a75      	ldr	r2, [pc, #468]	; (80024d0 <stdin_irq_dma+0x1400>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d052      	beq.n	80023a4 <stdin_irq_dma+0x12d4>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a73      	ldr	r2, [pc, #460]	; (80024d4 <stdin_irq_dma+0x1404>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d048      	beq.n	800239e <stdin_irq_dma+0x12ce>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a70      	ldr	r2, [pc, #448]	; (80024d8 <stdin_irq_dma+0x1408>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d03e      	beq.n	8002398 <stdin_irq_dma+0x12c8>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a6e      	ldr	r2, [pc, #440]	; (80024dc <stdin_irq_dma+0x140c>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d034      	beq.n	8002392 <stdin_irq_dma+0x12c2>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a6b      	ldr	r2, [pc, #428]	; (80024e0 <stdin_irq_dma+0x1410>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d02a      	beq.n	800238c <stdin_irq_dma+0x12bc>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a69      	ldr	r2, [pc, #420]	; (80024e4 <stdin_irq_dma+0x1414>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d020      	beq.n	8002386 <stdin_irq_dma+0x12b6>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a66      	ldr	r2, [pc, #408]	; (80024e8 <stdin_irq_dma+0x1418>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d016      	beq.n	8002380 <stdin_irq_dma+0x12b0>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a64      	ldr	r2, [pc, #400]	; (80024ec <stdin_irq_dma+0x141c>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d00c      	beq.n	800237a <stdin_irq_dma+0x12aa>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a61      	ldr	r2, [pc, #388]	; (80024f0 <stdin_irq_dma+0x1420>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d102      	bne.n	8002374 <stdin_irq_dma+0x12a4>
 800236e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002372:	e01e      	b.n	80023b2 <stdin_irq_dma+0x12e2>
 8002374:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002378:	e01b      	b.n	80023b2 <stdin_irq_dma+0x12e2>
 800237a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800237e:	e018      	b.n	80023b2 <stdin_irq_dma+0x12e2>
 8002380:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002384:	e015      	b.n	80023b2 <stdin_irq_dma+0x12e2>
 8002386:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800238a:	e012      	b.n	80023b2 <stdin_irq_dma+0x12e2>
 800238c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002390:	e00f      	b.n	80023b2 <stdin_irq_dma+0x12e2>
 8002392:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002396:	e00c      	b.n	80023b2 <stdin_irq_dma+0x12e2>
 8002398:	f44f 7380 	mov.w	r3, #256	; 0x100
 800239c:	e009      	b.n	80023b2 <stdin_irq_dma+0x12e2>
 800239e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023a2:	e006      	b.n	80023b2 <stdin_irq_dma+0x12e2>
 80023a4:	2304      	movs	r3, #4
 80023a6:	e004      	b.n	80023b2 <stdin_irq_dma+0x12e2>
 80023a8:	2304      	movs	r3, #4
 80023aa:	e002      	b.n	80023b2 <stdin_irq_dma+0x12e2>
 80023ac:	2304      	movs	r3, #4
 80023ae:	e000      	b.n	80023b2 <stdin_irq_dma+0x12e2>
 80023b0:	2304      	movs	r3, #4
 80023b2:	4a50      	ldr	r2, [pc, #320]	; (80024f4 <stdin_irq_dma+0x1424>)
 80023b4:	60d3      	str	r3, [r2, #12]
 80023b6:	e19a      	b.n	80026ee <stdin_irq_dma+0x161e>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	4b4d      	ldr	r3, [pc, #308]	; (80024f8 <stdin_irq_dma+0x1428>)
 80023c4:	429a      	cmp	r2, r3
 80023c6:	f240 8099 	bls.w	80024fc <stdin_irq_dma+0x142c>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a3c      	ldr	r2, [pc, #240]	; (80024c4 <stdin_irq_dma+0x13f4>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d06d      	beq.n	80024b4 <stdin_irq_dma+0x13e4>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a39      	ldr	r2, [pc, #228]	; (80024c8 <stdin_irq_dma+0x13f8>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d064      	beq.n	80024b0 <stdin_irq_dma+0x13e0>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a37      	ldr	r2, [pc, #220]	; (80024cc <stdin_irq_dma+0x13fc>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d05b      	beq.n	80024ac <stdin_irq_dma+0x13dc>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a34      	ldr	r2, [pc, #208]	; (80024d0 <stdin_irq_dma+0x1400>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d052      	beq.n	80024a8 <stdin_irq_dma+0x13d8>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a32      	ldr	r2, [pc, #200]	; (80024d4 <stdin_irq_dma+0x1404>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d048      	beq.n	80024a2 <stdin_irq_dma+0x13d2>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a2f      	ldr	r2, [pc, #188]	; (80024d8 <stdin_irq_dma+0x1408>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d03e      	beq.n	800249c <stdin_irq_dma+0x13cc>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a2d      	ldr	r2, [pc, #180]	; (80024dc <stdin_irq_dma+0x140c>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d034      	beq.n	8002496 <stdin_irq_dma+0x13c6>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a2a      	ldr	r2, [pc, #168]	; (80024e0 <stdin_irq_dma+0x1410>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d02a      	beq.n	8002490 <stdin_irq_dma+0x13c0>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a28      	ldr	r2, [pc, #160]	; (80024e4 <stdin_irq_dma+0x1414>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d020      	beq.n	800248a <stdin_irq_dma+0x13ba>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a25      	ldr	r2, [pc, #148]	; (80024e8 <stdin_irq_dma+0x1418>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d016      	beq.n	8002484 <stdin_irq_dma+0x13b4>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a23      	ldr	r2, [pc, #140]	; (80024ec <stdin_irq_dma+0x141c>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d00c      	beq.n	800247e <stdin_irq_dma+0x13ae>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a20      	ldr	r2, [pc, #128]	; (80024f0 <stdin_irq_dma+0x1420>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d102      	bne.n	8002478 <stdin_irq_dma+0x13a8>
 8002472:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002476:	e01e      	b.n	80024b6 <stdin_irq_dma+0x13e6>
 8002478:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800247c:	e01b      	b.n	80024b6 <stdin_irq_dma+0x13e6>
 800247e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002482:	e018      	b.n	80024b6 <stdin_irq_dma+0x13e6>
 8002484:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002488:	e015      	b.n	80024b6 <stdin_irq_dma+0x13e6>
 800248a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800248e:	e012      	b.n	80024b6 <stdin_irq_dma+0x13e6>
 8002490:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002494:	e00f      	b.n	80024b6 <stdin_irq_dma+0x13e6>
 8002496:	f44f 7380 	mov.w	r3, #256	; 0x100
 800249a:	e00c      	b.n	80024b6 <stdin_irq_dma+0x13e6>
 800249c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024a0:	e009      	b.n	80024b6 <stdin_irq_dma+0x13e6>
 80024a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024a6:	e006      	b.n	80024b6 <stdin_irq_dma+0x13e6>
 80024a8:	2304      	movs	r3, #4
 80024aa:	e004      	b.n	80024b6 <stdin_irq_dma+0x13e6>
 80024ac:	2304      	movs	r3, #4
 80024ae:	e002      	b.n	80024b6 <stdin_irq_dma+0x13e6>
 80024b0:	2304      	movs	r3, #4
 80024b2:	e000      	b.n	80024b6 <stdin_irq_dma+0x13e6>
 80024b4:	2304      	movs	r3, #4
 80024b6:	4a0f      	ldr	r2, [pc, #60]	; (80024f4 <stdin_irq_dma+0x1424>)
 80024b8:	6093      	str	r3, [r2, #8]
 80024ba:	e118      	b.n	80026ee <stdin_irq_dma+0x161e>
 80024bc:	40026000 	.word	0x40026000
 80024c0:	40026458 	.word	0x40026458
 80024c4:	40026010 	.word	0x40026010
 80024c8:	40026410 	.word	0x40026410
 80024cc:	40026070 	.word	0x40026070
 80024d0:	40026470 	.word	0x40026470
 80024d4:	40026028 	.word	0x40026028
 80024d8:	40026428 	.word	0x40026428
 80024dc:	40026088 	.word	0x40026088
 80024e0:	40026488 	.word	0x40026488
 80024e4:	40026040 	.word	0x40026040
 80024e8:	40026440 	.word	0x40026440
 80024ec:	400260a0 	.word	0x400260a0
 80024f0:	400264a0 	.word	0x400264a0
 80024f4:	40026400 	.word	0x40026400
 80024f8:	400260b8 	.word	0x400260b8
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	461a      	mov	r2, r3
 8002506:	4b80      	ldr	r3, [pc, #512]	; (8002708 <stdin_irq_dma+0x1638>)
 8002508:	429a      	cmp	r2, r3
 800250a:	d978      	bls.n	80025fe <stdin_irq_dma+0x152e>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a7d      	ldr	r2, [pc, #500]	; (800270c <stdin_irq_dma+0x163c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d06d      	beq.n	80025f6 <stdin_irq_dma+0x1526>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a7b      	ldr	r2, [pc, #492]	; (8002710 <stdin_irq_dma+0x1640>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d064      	beq.n	80025f2 <stdin_irq_dma+0x1522>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a78      	ldr	r2, [pc, #480]	; (8002714 <stdin_irq_dma+0x1644>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d05b      	beq.n	80025ee <stdin_irq_dma+0x151e>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a76      	ldr	r2, [pc, #472]	; (8002718 <stdin_irq_dma+0x1648>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d052      	beq.n	80025ea <stdin_irq_dma+0x151a>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a73      	ldr	r2, [pc, #460]	; (800271c <stdin_irq_dma+0x164c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d048      	beq.n	80025e4 <stdin_irq_dma+0x1514>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a71      	ldr	r2, [pc, #452]	; (8002720 <stdin_irq_dma+0x1650>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d03e      	beq.n	80025de <stdin_irq_dma+0x150e>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a6e      	ldr	r2, [pc, #440]	; (8002724 <stdin_irq_dma+0x1654>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d034      	beq.n	80025d8 <stdin_irq_dma+0x1508>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a6c      	ldr	r2, [pc, #432]	; (8002728 <stdin_irq_dma+0x1658>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d02a      	beq.n	80025d2 <stdin_irq_dma+0x1502>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a69      	ldr	r2, [pc, #420]	; (800272c <stdin_irq_dma+0x165c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d020      	beq.n	80025cc <stdin_irq_dma+0x14fc>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a67      	ldr	r2, [pc, #412]	; (8002730 <stdin_irq_dma+0x1660>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d016      	beq.n	80025c6 <stdin_irq_dma+0x14f6>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a64      	ldr	r2, [pc, #400]	; (8002734 <stdin_irq_dma+0x1664>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d00c      	beq.n	80025c0 <stdin_irq_dma+0x14f0>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a62      	ldr	r2, [pc, #392]	; (8002738 <stdin_irq_dma+0x1668>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d102      	bne.n	80025ba <stdin_irq_dma+0x14ea>
 80025b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80025b8:	e01e      	b.n	80025f8 <stdin_irq_dma+0x1528>
 80025ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025be:	e01b      	b.n	80025f8 <stdin_irq_dma+0x1528>
 80025c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80025c4:	e018      	b.n	80025f8 <stdin_irq_dma+0x1528>
 80025c6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80025ca:	e015      	b.n	80025f8 <stdin_irq_dma+0x1528>
 80025cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80025d0:	e012      	b.n	80025f8 <stdin_irq_dma+0x1528>
 80025d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025d6:	e00f      	b.n	80025f8 <stdin_irq_dma+0x1528>
 80025d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025dc:	e00c      	b.n	80025f8 <stdin_irq_dma+0x1528>
 80025de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025e2:	e009      	b.n	80025f8 <stdin_irq_dma+0x1528>
 80025e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025e8:	e006      	b.n	80025f8 <stdin_irq_dma+0x1528>
 80025ea:	2304      	movs	r3, #4
 80025ec:	e004      	b.n	80025f8 <stdin_irq_dma+0x1528>
 80025ee:	2304      	movs	r3, #4
 80025f0:	e002      	b.n	80025f8 <stdin_irq_dma+0x1528>
 80025f2:	2304      	movs	r3, #4
 80025f4:	e000      	b.n	80025f8 <stdin_irq_dma+0x1528>
 80025f6:	2304      	movs	r3, #4
 80025f8:	4a50      	ldr	r2, [pc, #320]	; (800273c <stdin_irq_dma+0x166c>)
 80025fa:	60d3      	str	r3, [r2, #12]
 80025fc:	e077      	b.n	80026ee <stdin_irq_dma+0x161e>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a41      	ldr	r2, [pc, #260]	; (800270c <stdin_irq_dma+0x163c>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d06d      	beq.n	80026e8 <stdin_irq_dma+0x1618>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a3e      	ldr	r2, [pc, #248]	; (8002710 <stdin_irq_dma+0x1640>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d064      	beq.n	80026e4 <stdin_irq_dma+0x1614>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a3c      	ldr	r2, [pc, #240]	; (8002714 <stdin_irq_dma+0x1644>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d05b      	beq.n	80026e0 <stdin_irq_dma+0x1610>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a39      	ldr	r2, [pc, #228]	; (8002718 <stdin_irq_dma+0x1648>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d052      	beq.n	80026dc <stdin_irq_dma+0x160c>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a37      	ldr	r2, [pc, #220]	; (800271c <stdin_irq_dma+0x164c>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d048      	beq.n	80026d6 <stdin_irq_dma+0x1606>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a34      	ldr	r2, [pc, #208]	; (8002720 <stdin_irq_dma+0x1650>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d03e      	beq.n	80026d0 <stdin_irq_dma+0x1600>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a32      	ldr	r2, [pc, #200]	; (8002724 <stdin_irq_dma+0x1654>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d034      	beq.n	80026ca <stdin_irq_dma+0x15fa>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a2f      	ldr	r2, [pc, #188]	; (8002728 <stdin_irq_dma+0x1658>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d02a      	beq.n	80026c4 <stdin_irq_dma+0x15f4>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a2d      	ldr	r2, [pc, #180]	; (800272c <stdin_irq_dma+0x165c>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d020      	beq.n	80026be <stdin_irq_dma+0x15ee>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a2a      	ldr	r2, [pc, #168]	; (8002730 <stdin_irq_dma+0x1660>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d016      	beq.n	80026b8 <stdin_irq_dma+0x15e8>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a28      	ldr	r2, [pc, #160]	; (8002734 <stdin_irq_dma+0x1664>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d00c      	beq.n	80026b2 <stdin_irq_dma+0x15e2>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a25      	ldr	r2, [pc, #148]	; (8002738 <stdin_irq_dma+0x1668>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d102      	bne.n	80026ac <stdin_irq_dma+0x15dc>
 80026a6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80026aa:	e01e      	b.n	80026ea <stdin_irq_dma+0x161a>
 80026ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026b0:	e01b      	b.n	80026ea <stdin_irq_dma+0x161a>
 80026b2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80026b6:	e018      	b.n	80026ea <stdin_irq_dma+0x161a>
 80026b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80026bc:	e015      	b.n	80026ea <stdin_irq_dma+0x161a>
 80026be:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80026c2:	e012      	b.n	80026ea <stdin_irq_dma+0x161a>
 80026c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026c8:	e00f      	b.n	80026ea <stdin_irq_dma+0x161a>
 80026ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026ce:	e00c      	b.n	80026ea <stdin_irq_dma+0x161a>
 80026d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026d4:	e009      	b.n	80026ea <stdin_irq_dma+0x161a>
 80026d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026da:	e006      	b.n	80026ea <stdin_irq_dma+0x161a>
 80026dc:	2304      	movs	r3, #4
 80026de:	e004      	b.n	80026ea <stdin_irq_dma+0x161a>
 80026e0:	2304      	movs	r3, #4
 80026e2:	e002      	b.n	80026ea <stdin_irq_dma+0x161a>
 80026e4:	2304      	movs	r3, #4
 80026e6:	e000      	b.n	80026ea <stdin_irq_dma+0x161a>
 80026e8:	2304      	movs	r3, #4
 80026ea:	4a14      	ldr	r2, [pc, #80]	; (800273c <stdin_irq_dma+0x166c>)
 80026ec:	6093      	str	r3, [r2, #8]
    HAL_UART_Receive_DMA(in->huart, in->buffer, in->size);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6818      	ldr	r0, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6899      	ldr	r1, [r3, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	899b      	ldrh	r3, [r3, #12]
 80026fa:	461a      	mov	r2, r3
 80026fc:	f004 f9b3 	bl	8006a66 <HAL_UART_Receive_DMA>
}
 8002700:	bf00      	nop
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40026058 	.word	0x40026058
 800270c:	40026010 	.word	0x40026010
 8002710:	40026410 	.word	0x40026410
 8002714:	40026070 	.word	0x40026070
 8002718:	40026470 	.word	0x40026470
 800271c:	40026028 	.word	0x40026028
 8002720:	40026428 	.word	0x40026428
 8002724:	40026088 	.word	0x40026088
 8002728:	40026488 	.word	0x40026488
 800272c:	40026040 	.word	0x40026040
 8002730:	40026440 	.word	0x40026440
 8002734:	400260a0 	.word	0x400260a0
 8002738:	400264a0 	.word	0x400264a0
 800273c:	40026000 	.word	0x40026000

08002740 <stdin_irq_uart>:

void stdin_irq_uart(stdin_t *in)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  if (__HAL_UART_GET_FLAG(in->huart, UART_FLAG_IDLE))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0310 	and.w	r3, r3, #16
 8002754:	2b10      	cmp	r3, #16
 8002756:	d10f      	bne.n	8002778 <stdin_irq_uart+0x38>
  {
    __HAL_UART_CLEAR_IDLEFLAG(in->huart);
 8002758:	2300      	movs	r3, #0
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]
    check_buffer(in);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f804 	bl	8002780 <check_buffer>
  }
}
 8002778:	bf00      	nop
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <check_buffer>:

/* Private function implementations
 * --------------------------------------------*/
static void check_buffer(stdin_t *in)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint16_t pos;
  uint16_t new;

  /* Calculate current position in buffer */
  new = __HAL_DMA_GET_COUNTER(HDMA(in));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	81fb      	strh	r3, [r7, #14]
  pos = in->size - new;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	899a      	ldrh	r2, [r3, #12]
 8002798:	89fb      	ldrh	r3, [r7, #14]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	81bb      	strh	r3, [r7, #12]

  /* Check change in received data */
  if (pos != in->pos)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	89db      	ldrh	r3, [r3, #14]
 80027a2:	89ba      	ldrh	r2, [r7, #12]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d025      	beq.n	80027f4 <check_buffer+0x74>
  {
    if (pos > in->pos)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	89db      	ldrh	r3, [r3, #14]
 80027ac:	89ba      	ldrh	r2, [r7, #12]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d90b      	bls.n	80027ca <check_buffer+0x4a>
      /* Current position is over previous one */
      /* We are in "linear" mode */
      /* Process data directly by subtracting "pointers" */
      fill_buffer(in, in->pos, pos - in->pos);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	89d9      	ldrh	r1, [r3, #14]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	89db      	ldrh	r3, [r3, #14]
 80027ba:	89ba      	ldrh	r2, [r7, #12]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	b29b      	uxth	r3, r3
 80027c0:	461a      	mov	r2, r3
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f824 	bl	8002810 <fill_buffer>
 80027c8:	e014      	b.n	80027f4 <check_buffer+0x74>
    else
    {
      /* We are in "overflow" mode */
      /* First process data to the end of buffer */
      fill_buffer(in, in->pos, in->size - in->pos);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	89d9      	ldrh	r1, [r3, #14]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	899a      	ldrh	r2, [r3, #12]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	89db      	ldrh	r3, [r3, #14]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	b29b      	uxth	r3, r3
 80027da:	461a      	mov	r2, r3
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 f817 	bl	8002810 <fill_buffer>
      /* Check and continue with beginning of buffer */
      if (pos > 0)
 80027e2:	89bb      	ldrh	r3, [r7, #12]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d005      	beq.n	80027f4 <check_buffer+0x74>
        fill_buffer(in, 0, pos);
 80027e8:	89bb      	ldrh	r3, [r7, #12]
 80027ea:	461a      	mov	r2, r3
 80027ec:	2100      	movs	r1, #0
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f80e 	bl	8002810 <fill_buffer>
    }
  }

  /* Check and manually update if we reached end of buffer */
  in->pos = (pos == in->size) ? 0 : pos;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	899b      	ldrh	r3, [r3, #12]
 80027f8:	89ba      	ldrh	r2, [r7, #12]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d001      	beq.n	8002802 <check_buffer+0x82>
 80027fe:	89ba      	ldrh	r2, [r7, #12]
 8002800:	e000      	b.n	8002804 <check_buffer+0x84>
 8002802:	2200      	movs	r2, #0
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	81da      	strh	r2, [r3, #14]
}
 8002808:	bf00      	nop
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <fill_buffer>:

static void fill_buffer(stdin_t *in, uint16_t pos, uint16_t size)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	807b      	strh	r3, [r7, #2]
 800281c:	4613      	mov	r3, r2
 800281e:	803b      	strh	r3, [r7, #0]
  if (NULL == in->callback)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d009      	beq.n	800283c <fill_buffer+0x2c>
    return;

  in->callback(&in->buffer[pos], size);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6891      	ldr	r1, [r2, #8]
 8002830:	887a      	ldrh	r2, [r7, #2]
 8002832:	440a      	add	r2, r1
 8002834:	8839      	ldrh	r1, [r7, #0]
 8002836:	4610      	mov	r0, r2
 8002838:	4798      	blx	r3
 800283a:	e000      	b.n	800283e <fill_buffer+0x2e>
    return;
 800283c:	bf00      	nop
}
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_MspInit>:

extern DMA_HandleTypeDef hdma_usart2_rx;


void HAL_MspInit(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	607b      	str	r3, [r7, #4]
 800284e:	4b10      	ldr	r3, [pc, #64]	; (8002890 <HAL_MspInit+0x4c>)
 8002850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002852:	4a0f      	ldr	r2, [pc, #60]	; (8002890 <HAL_MspInit+0x4c>)
 8002854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002858:	6453      	str	r3, [r2, #68]	; 0x44
 800285a:	4b0d      	ldr	r3, [pc, #52]	; (8002890 <HAL_MspInit+0x4c>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002862:	607b      	str	r3, [r7, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	603b      	str	r3, [r7, #0]
 800286a:	4b09      	ldr	r3, [pc, #36]	; (8002890 <HAL_MspInit+0x4c>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	4a08      	ldr	r2, [pc, #32]	; (8002890 <HAL_MspInit+0x4c>)
 8002870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002874:	6413      	str	r3, [r2, #64]	; 0x40
 8002876:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_MspInit+0x4c>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002882:	2007      	movs	r0, #7
 8002884:	f000 fcc4 	bl	8003210 <HAL_NVIC_SetPriorityGrouping>
}
 8002888:	bf00      	nop
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40023800 	.word	0x40023800

08002894 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08a      	sub	sp, #40	; 0x28
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289c:	f107 0314 	add.w	r3, r7, #20
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a34      	ldr	r2, [pc, #208]	; (8002984 <HAL_UART_MspInit+0xf0>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d162      	bne.n	800297c <HAL_UART_MspInit+0xe8>
  {
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	4b33      	ldr	r3, [pc, #204]	; (8002988 <HAL_UART_MspInit+0xf4>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	4a32      	ldr	r2, [pc, #200]	; (8002988 <HAL_UART_MspInit+0xf4>)
 80028c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028c4:	6413      	str	r3, [r2, #64]	; 0x40
 80028c6:	4b30      	ldr	r3, [pc, #192]	; (8002988 <HAL_UART_MspInit+0xf4>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ce:	613b      	str	r3, [r7, #16]
 80028d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	4b2c      	ldr	r3, [pc, #176]	; (8002988 <HAL_UART_MspInit+0xf4>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	4a2b      	ldr	r2, [pc, #172]	; (8002988 <HAL_UART_MspInit+0xf4>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	6313      	str	r3, [r2, #48]	; 0x30
 80028e2:	4b29      	ldr	r3, [pc, #164]	; (8002988 <HAL_UART_MspInit+0xf4>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin 		= USART_TX_Pin|USART_RX_Pin;
 80028ee:	230c      	movs	r3, #12
 80028f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 80028f2:	2302      	movs	r3, #2
 80028f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 80028fa:	2303      	movs	r3, #3
 80028fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate 	= GPIO_AF7_USART2;
 80028fe:	2307      	movs	r3, #7
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002902:	f107 0314 	add.w	r3, r7, #20
 8002906:	4619      	mov	r1, r3
 8002908:	4820      	ldr	r0, [pc, #128]	; (800298c <HAL_UART_MspInit+0xf8>)
 800290a:	f001 f8d3 	bl	8003ab4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance 				= DMA1_Stream5;
 800290e:	4b20      	ldr	r3, [pc, #128]	; (8002990 <HAL_UART_MspInit+0xfc>)
 8002910:	4a20      	ldr	r2, [pc, #128]	; (8002994 <HAL_UART_MspInit+0x100>)
 8002912:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel 			= DMA_CHANNEL_4;
 8002914:	4b1e      	ldr	r3, [pc, #120]	; (8002990 <HAL_UART_MspInit+0xfc>)
 8002916:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800291a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction 			= DMA_PERIPH_TO_MEMORY;
 800291c:	4b1c      	ldr	r3, [pc, #112]	; (8002990 <HAL_UART_MspInit+0xfc>)
 800291e:	2200      	movs	r2, #0
 8002920:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8002922:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <HAL_UART_MspInit+0xfc>)
 8002924:	2200      	movs	r2, #0
 8002926:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8002928:	4b19      	ldr	r3, [pc, #100]	; (8002990 <HAL_UART_MspInit+0xfc>)
 800292a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800292e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002930:	4b17      	ldr	r3, [pc, #92]	; (8002990 <HAL_UART_MspInit+0xfc>)
 8002932:	2200      	movs	r2, #0
 8002934:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8002936:	4b16      	ldr	r3, [pc, #88]	; (8002990 <HAL_UART_MspInit+0xfc>)
 8002938:	2200      	movs	r2, #0
 800293a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode 				= DMA_CIRCULAR;
 800293c:	4b14      	ldr	r3, [pc, #80]	; (8002990 <HAL_UART_MspInit+0xfc>)
 800293e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002942:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority 			= DMA_PRIORITY_LOW;
 8002944:	4b12      	ldr	r3, [pc, #72]	; (8002990 <HAL_UART_MspInit+0xfc>)
 8002946:	2200      	movs	r2, #0
 8002948:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 800294a:	4b11      	ldr	r3, [pc, #68]	; (8002990 <HAL_UART_MspInit+0xfc>)
 800294c:	2200      	movs	r2, #0
 800294e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002950:	480f      	ldr	r0, [pc, #60]	; (8002990 <HAL_UART_MspInit+0xfc>)
 8002952:	f000 fc9f 	bl	8003294 <HAL_DMA_Init>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800295c:	f7fe fac8 	bl	8000ef0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a0b      	ldr	r2, [pc, #44]	; (8002990 <HAL_UART_MspInit+0xfc>)
 8002964:	639a      	str	r2, [r3, #56]	; 0x38
 8002966:	4a0a      	ldr	r2, [pc, #40]	; (8002990 <HAL_UART_MspInit+0xfc>)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800296c:	2200      	movs	r2, #0
 800296e:	2100      	movs	r1, #0
 8002970:	2026      	movs	r0, #38	; 0x26
 8002972:	f000 fc58 	bl	8003226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002976:	2026      	movs	r0, #38	; 0x26
 8002978:	f000 fc71 	bl	800325e <HAL_NVIC_EnableIRQ>
  }

}
 800297c:	bf00      	nop
 800297e:	3728      	adds	r7, #40	; 0x28
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40004400 	.word	0x40004400
 8002988:	40023800 	.word	0x40023800
 800298c:	40020000 	.word	0x40020000
 8002990:	20000160 	.word	0x20000160
 8002994:	40026088 	.word	0x40026088

08002998 <HAL_I2C_MspInit>:
  *           - NVIC configuration for DMA interrupt request enable
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08a      	sub	sp, #40	; 0x28
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /*##-1- Enable GPIO Clocks #################################################*/
  /* Enable GPIO TX/RX clock */
  I2Cx_SCL_GPIO_CLK_ENABLE();
 80029a0:	2300      	movs	r3, #0
 80029a2:	613b      	str	r3, [r7, #16]
 80029a4:	4b2b      	ldr	r3, [pc, #172]	; (8002a54 <HAL_I2C_MspInit+0xbc>)
 80029a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a8:	4a2a      	ldr	r2, [pc, #168]	; (8002a54 <HAL_I2C_MspInit+0xbc>)
 80029aa:	f043 0302 	orr.w	r3, r3, #2
 80029ae:	6313      	str	r3, [r2, #48]	; 0x30
 80029b0:	4b28      	ldr	r3, [pc, #160]	; (8002a54 <HAL_I2C_MspInit+0xbc>)
 80029b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	693b      	ldr	r3, [r7, #16]
  I2Cx_SDA_GPIO_CLK_ENABLE();
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	4b24      	ldr	r3, [pc, #144]	; (8002a54 <HAL_I2C_MspInit+0xbc>)
 80029c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c4:	4a23      	ldr	r2, [pc, #140]	; (8002a54 <HAL_I2C_MspInit+0xbc>)
 80029c6:	f043 0302 	orr.w	r3, r3, #2
 80029ca:	6313      	str	r3, [r2, #48]	; 0x30
 80029cc:	4b21      	ldr	r3, [pc, #132]	; (8002a54 <HAL_I2C_MspInit+0xbc>)
 80029ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* I2C TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
 80029d8:	2340      	movs	r3, #64	; 0x40
 80029da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 80029dc:	2312      	movs	r3, #18
 80029de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80029e0:	2301      	movs	r3, #1
 80029e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80029e4:	2302      	movs	r3, #2
 80029e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
 80029e8:	2304      	movs	r3, #4
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80029ec:	f107 0314 	add.w	r3, r7, #20
 80029f0:	4619      	mov	r1, r3
 80029f2:	4819      	ldr	r0, [pc, #100]	; (8002a58 <HAL_I2C_MspInit+0xc0>)
 80029f4:	f001 f85e 	bl	8003ab4 <HAL_GPIO_Init>

  /* I2C RX GPIO pin configuration  */
  GPIO_InitStruct.Pin 		= I2Cx_SDA_PIN;
 80029f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = I2Cx_SDA_AF;
 80029fe:	2304      	movs	r3, #4
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002a02:	f107 0314 	add.w	r3, r7, #20
 8002a06:	4619      	mov	r1, r3
 8002a08:	4813      	ldr	r0, [pc, #76]	; (8002a58 <HAL_I2C_MspInit+0xc0>)
 8002a0a:	f001 f853 	bl	8003ab4 <HAL_GPIO_Init>

  /*##-3- Enable I2C peripheral Clock ########################################*/
  /* Enable I2C1 clock */
  I2Cx_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60bb      	str	r3, [r7, #8]
 8002a12:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <HAL_I2C_MspInit+0xbc>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	4a0f      	ldr	r2, [pc, #60]	; (8002a54 <HAL_I2C_MspInit+0xbc>)
 8002a18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a1e:	4b0d      	ldr	r3, [pc, #52]	; (8002a54 <HAL_I2C_MspInit+0xbc>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a26:	60bb      	str	r3, [r7, #8]
 8002a28:	68bb      	ldr	r3, [r7, #8]

  /*##-4- Configure the NVIC for I2C #########################################*/
  /* NVIC for I2C1 */
  HAL_NVIC_SetPriority(I2Cx_ER_IRQn, 1, 0);
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	2020      	movs	r0, #32
 8002a30:	f000 fbf9 	bl	8003226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2Cx_ER_IRQn);
 8002a34:	2020      	movs	r0, #32
 8002a36:	f000 fc12 	bl	800325e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(I2Cx_EV_IRQn, 2, 0);
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2102      	movs	r1, #2
 8002a3e:	201f      	movs	r0, #31
 8002a40:	f000 fbf1 	bl	8003226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2Cx_EV_IRQn);
 8002a44:	201f      	movs	r0, #31
 8002a46:	f000 fc0a 	bl	800325e <HAL_NVIC_EnableIRQ>
}
 8002a4a:	bf00      	nop
 8002a4c:	3728      	adds	r7, #40	; 0x28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40023800 	.word	0x40023800
 8002a58:	40020400 	.word	0x40020400

08002a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  while (1)
 8002a60:	e7fe      	b.n	8002a60 <NMI_Handler+0x4>

08002a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a62:	b480      	push	{r7}
 8002a64:	af00      	add	r7, sp, #0
  while (1)
 8002a66:	e7fe      	b.n	8002a66 <HardFault_Handler+0x4>

08002a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  while (1)
 8002a6c:	e7fe      	b.n	8002a6c <MemManage_Handler+0x4>

08002a6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	af00      	add	r7, sp, #0
  while (1)
 8002a72:	e7fe      	b.n	8002a72 <BusFault_Handler+0x4>

08002a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  while (1)
 8002a78:	e7fe      	b.n	8002a78 <UsageFault_Handler+0x4>

08002a7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	af00      	add	r7, sp, #0

}
 8002a7e:	bf00      	nop
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0

}
 8002a8c:	bf00      	nop
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a96:	b480      	push	{r7}
 8002a98:	af00      	add	r7, sp, #0

}
 8002a9a:	bf00      	nop
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8002aa8:	f000 fa9e 	bl	8002fe8 <HAL_IncTick>
}
 8002aac:	bf00      	nop
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002ab4:	4803      	ldr	r0, [pc, #12]	; (8002ac4 <DMA1_Stream5_IRQHandler+0x14>)
 8002ab6:	f000 fd85 	bl	80035c4 <HAL_DMA_IRQHandler>
  serial_handlerDMA();
 8002aba:	f7fe fa51 	bl	8000f60 <serial_handlerDMA>
}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20000160 	.word	0x20000160

08002ac8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 8002acc:	4803      	ldr	r0, [pc, #12]	; (8002adc <USART2_IRQHandler+0x14>)
 8002ace:	f004 f85f 	bl	8006b90 <HAL_UART_IRQHandler>
	serial_handlerUART();
 8002ad2:	f7fe fa3b 	bl	8000f4c <serial_handlerUART>
}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	2000011c 	.word	0x2000011c

08002ae0 <I2C1_EV_IRQHandler>:
  * @param  None
  * @retval None
  * @Note   This function is redefined in "main.h" and related to I2C data transmission
  */
void I2Cx_EV_IRQHandler(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(& I2cHandle);
 8002ae4:	4802      	ldr	r0, [pc, #8]	; (8002af0 <I2C1_EV_IRQHandler+0x10>)
 8002ae6:	f001 fc45 	bl	8004374 <HAL_I2C_EV_IRQHandler>
}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	200001c0 	.word	0x200001c0

08002af4 <I2C1_ER_IRQHandler>:
  * @param  None
  * @retval None
  * @Note   This function is redefined in "main.h" and related to I2C error
  */
void I2Cx_ER_IRQHandler(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(& I2cHandle);
 8002af8:	4802      	ldr	r0, [pc, #8]	; (8002b04 <I2C1_ER_IRQHandler+0x10>)
 8002afa:	f001 fda8 	bl	800464e <HAL_I2C_ER_IRQHandler>
}
 8002afe:	bf00      	nop
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	200001c0 	.word	0x200001c0

08002b08 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	e00a      	b.n	8002b30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b1a:	f3af 8000 	nop.w
 8002b1e:	4601      	mov	r1, r0
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	60ba      	str	r2, [r7, #8]
 8002b26:	b2ca      	uxtb	r2, r1
 8002b28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	dbf0      	blt.n	8002b1a <_read+0x12>
	}

return len;
 8002b38:	687b      	ldr	r3, [r7, #4]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b086      	sub	sp, #24
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	60f8      	str	r0, [r7, #12]
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	e009      	b.n	8002b68 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	60ba      	str	r2, [r7, #8]
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fd fdb1 	bl	80006c4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	3301      	adds	r3, #1
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	dbf1      	blt.n	8002b54 <_write+0x12>
	}
	return len;
 8002b70:	687b      	ldr	r3, [r7, #4]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <_close>:

int _close(int file)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
	return -1;
 8002b82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ba2:	605a      	str	r2, [r3, #4]
	return 0;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <_isatty>:

int _isatty(int file)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
	return 1;
 8002bba:	2301      	movs	r3, #1
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
	return 0;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
	...

08002be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bec:	4a14      	ldr	r2, [pc, #80]	; (8002c40 <_sbrk+0x5c>)
 8002bee:	4b15      	ldr	r3, [pc, #84]	; (8002c44 <_sbrk+0x60>)
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bf8:	4b13      	ldr	r3, [pc, #76]	; (8002c48 <_sbrk+0x64>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d102      	bne.n	8002c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c00:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <_sbrk+0x64>)
 8002c02:	4a12      	ldr	r2, [pc, #72]	; (8002c4c <_sbrk+0x68>)
 8002c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c06:	4b10      	ldr	r3, [pc, #64]	; (8002c48 <_sbrk+0x64>)
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d207      	bcs.n	8002c24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c14:	f005 f8ac 	bl	8007d70 <__errno>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	220c      	movs	r2, #12
 8002c1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c22:	e009      	b.n	8002c38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c24:	4b08      	ldr	r3, [pc, #32]	; (8002c48 <_sbrk+0x64>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c2a:	4b07      	ldr	r3, [pc, #28]	; (8002c48 <_sbrk+0x64>)
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4413      	add	r3, r2
 8002c32:	4a05      	ldr	r2, [pc, #20]	; (8002c48 <_sbrk+0x64>)
 8002c34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c36:	68fb      	ldr	r3, [r7, #12]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	20020000 	.word	0x20020000
 8002c44:	00000400 	.word	0x00000400
 8002c48:	200007d4 	.word	0x200007d4
 8002c4c:	200007f0 	.word	0x200007f0

08002c50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <SystemInit+0x20>)
 8002c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5a:	4a05      	ldr	r2, [pc, #20]	; (8002c70 <SystemInit+0x20>)
 8002c5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c64:	bf00      	nop
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	e000ed00 	.word	0xe000ed00

08002c74 <vShell_cmdParse>:

/* Public functions definitions */
/********************************************************
 * 	Parsing incoming message						   	*
 ********************************************************/
void vShell_cmdParse(char *input) {
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
	for(uint8_t u8_idx = 0; u8_idx < CFG_HEADER_NUM; u8_idx++) {
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	77fb      	strb	r3, [r7, #31]
 8002c80:	e124      	b.n	8002ecc <vShell_cmdParse+0x258>
		if(!memcmp(input,(char*)&str_cfg_header[u8_idx][0], CFG_HEADER_LEN)) {
 8002c82:	7ffa      	ldrb	r2, [r7, #31]
 8002c84:	4613      	mov	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	4a95      	ldr	r2, [pc, #596]	; (8002ee0 <vShell_cmdParse+0x26c>)
 8002c8c:	4413      	add	r3, r2
 8002c8e:	2205      	movs	r2, #5
 8002c90:	4619      	mov	r1, r3
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f005 f896 	bl	8007dc4 <memcmp>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f040 8113 	bne.w	8002ec6 <vShell_cmdParse+0x252>
			if (u8_idx==1) {					//{RBA}
 8002ca0:	7ffb      	ldrb	r3, [r7, #31]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d107      	bne.n	8002cb6 <vShell_cmdParse+0x42>
				bitFlag |= BFLAG_I2C_RBA;
 8002ca6:	4b8f      	ldr	r3, [pc, #572]	; (8002ee4 <vShell_cmdParse+0x270>)
 8002ca8:	881b      	ldrh	r3, [r3, #0]
 8002caa:	f043 0302 	orr.w	r3, r3, #2
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	4b8c      	ldr	r3, [pc, #560]	; (8002ee4 <vShell_cmdParse+0x270>)
 8002cb2:	801a      	strh	r2, [r3, #0]
 8002cb4:	e107      	b.n	8002ec6 <vShell_cmdParse+0x252>
			}

			else if (u8_idx>=2 && u8_idx<=2) {	//{WB1: {WB2: {WB3:
 8002cb6:	7ffb      	ldrb	r3, [r7, #31]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d974      	bls.n	8002da6 <vShell_cmdParse+0x132>
 8002cbc:	7ffb      	ldrb	r3, [r7, #31]
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d871      	bhi.n	8002da6 <vShell_cmdParse+0x132>
				bitFlag |= BFLAG_I2C_WBS;
 8002cc2:	4b88      	ldr	r3, [pc, #544]	; (8002ee4 <vShell_cmdParse+0x270>)
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	f043 0304 	orr.w	r3, r3, #4
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	4b85      	ldr	r3, [pc, #532]	; (8002ee4 <vShell_cmdParse+0x270>)
 8002cce:	801a      	strh	r2, [r3, #0]

				uint32_t num = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	61bb      	str	r3, [r7, #24]
				uint8_t start = 5;
 8002cd4:	2305      	movs	r3, #5
 8002cd6:	75fb      	strb	r3, [r7, #23]

			    for (uint8_t j = 0; j<CFG_LENGTH; j++)
 8002cd8:	2300      	movs	r3, #0
 8002cda:	75bb      	strb	r3, [r7, #22]
 8002cdc:	e04a      	b.n	8002d74 <vShell_cmdParse+0x100>
			    {
			    	if(input[start+3]<128)
 8002cde:	7dfb      	ldrb	r3, [r7, #23]
 8002ce0:	3303      	adds	r3, #3
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	b25b      	sxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	db1b      	blt.n	8002d26 <vShell_cmdParse+0xb2>
			    	{
			    		num = input[start]+(input[start+1]*256)+(input[start+2]*65536)+(input[start+3]*16777216);
 8002cee:	7dfb      	ldrb	r3, [r7, #23]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	7dfb      	ldrb	r3, [r7, #23]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	4413      	add	r3, r2
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	021b      	lsls	r3, r3, #8
 8002d04:	18ca      	adds	r2, r1, r3
 8002d06:	7dfb      	ldrb	r3, [r7, #23]
 8002d08:	3302      	adds	r3, #2
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	440b      	add	r3, r1
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	041b      	lsls	r3, r3, #16
 8002d12:	441a      	add	r2, r3
 8002d14:	7dfb      	ldrb	r3, [r7, #23]
 8002d16:	3303      	adds	r3, #3
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	440b      	add	r3, r1
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	061b      	lsls	r3, r3, #24
 8002d20:	4413      	add	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
 8002d24:	e01a      	b.n	8002d5c <vShell_cmdParse+0xe8>
			    	}
			    	else
			    	{
			    		num = (input[start]+(input[start+1]*256)+(input[start+2]*65536)+(input[start+3]*16777216))-4294967296;
 8002d26:	7dfb      	ldrb	r3, [r7, #23]
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	4619      	mov	r1, r3
 8002d30:	7dfb      	ldrb	r3, [r7, #23]
 8002d32:	3301      	adds	r3, #1
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	4413      	add	r3, r2
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	021b      	lsls	r3, r3, #8
 8002d3c:	18ca      	adds	r2, r1, r3
 8002d3e:	7dfb      	ldrb	r3, [r7, #23]
 8002d40:	3302      	adds	r3, #2
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	440b      	add	r3, r1
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	041b      	lsls	r3, r3, #16
 8002d4a:	441a      	add	r2, r3
 8002d4c:	7dfb      	ldrb	r3, [r7, #23]
 8002d4e:	3303      	adds	r3, #3
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	440b      	add	r3, r1
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	061b      	lsls	r3, r3, #24
 8002d58:	4413      	add	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
			    	}
			    	aTxBuffer[j+1] = num;
 8002d5c:	7dbb      	ldrb	r3, [r7, #22]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4961      	ldr	r1, [pc, #388]	; (8002ee8 <vShell_cmdParse+0x274>)
 8002d64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			    	start+=4;
 8002d68:	7dfb      	ldrb	r3, [r7, #23]
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	75fb      	strb	r3, [r7, #23]
			    for (uint8_t j = 0; j<CFG_LENGTH; j++)
 8002d6e:	7dbb      	ldrb	r3, [r7, #22]
 8002d70:	3301      	adds	r3, #1
 8002d72:	75bb      	strb	r3, [r7, #22]
 8002d74:	7dbb      	ldrb	r3, [r7, #22]
 8002d76:	2b09      	cmp	r3, #9
 8002d78:	d9b1      	bls.n	8002cde <vShell_cmdParse+0x6a>
			    }
			    if(u8_idx==2){aTxBuffer[0] = 1;}
 8002d7a:	7ffb      	ldrb	r3, [r7, #31]
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d103      	bne.n	8002d88 <vShell_cmdParse+0x114>
 8002d80:	4b59      	ldr	r3, [pc, #356]	; (8002ee8 <vShell_cmdParse+0x274>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	601a      	str	r2, [r3, #0]
			else if (u8_idx>=2 && u8_idx<=2) {	//{WB1: {WB2: {WB3:
 8002d86:	e09d      	b.n	8002ec4 <vShell_cmdParse+0x250>
			    else if(u8_idx==3){aTxBuffer[0] = 2;}
 8002d88:	7ffb      	ldrb	r3, [r7, #31]
 8002d8a:	2b03      	cmp	r3, #3
 8002d8c:	d103      	bne.n	8002d96 <vShell_cmdParse+0x122>
 8002d8e:	4b56      	ldr	r3, [pc, #344]	; (8002ee8 <vShell_cmdParse+0x274>)
 8002d90:	2202      	movs	r2, #2
 8002d92:	601a      	str	r2, [r3, #0]
			else if (u8_idx>=2 && u8_idx<=2) {	//{WB1: {WB2: {WB3:
 8002d94:	e096      	b.n	8002ec4 <vShell_cmdParse+0x250>
			    else if(u8_idx==4){aTxBuffer[0] = 3;}
 8002d96:	7ffb      	ldrb	r3, [r7, #31]
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	f040 8093 	bne.w	8002ec4 <vShell_cmdParse+0x250>
 8002d9e:	4b52      	ldr	r3, [pc, #328]	; (8002ee8 <vShell_cmdParse+0x274>)
 8002da0:	2203      	movs	r2, #3
 8002da2:	601a      	str	r2, [r3, #0]
			else if (u8_idx>=2 && u8_idx<=2) {	//{WB1: {WB2: {WB3:
 8002da4:	e08e      	b.n	8002ec4 <vShell_cmdParse+0x250>
			}

			else if (u8_idx==5) {					//{RB1}
 8002da6:	7ffb      	ldrb	r3, [r7, #31]
 8002da8:	2b05      	cmp	r3, #5
 8002daa:	d10a      	bne.n	8002dc2 <vShell_cmdParse+0x14e>
				bitFlag |= BFLAG_I2C_WBS;
 8002dac:	4b4d      	ldr	r3, [pc, #308]	; (8002ee4 <vShell_cmdParse+0x270>)
 8002dae:	881b      	ldrh	r3, [r3, #0]
 8002db0:	f043 0304 	orr.w	r3, r3, #4
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	4b4b      	ldr	r3, [pc, #300]	; (8002ee4 <vShell_cmdParse+0x270>)
 8002db8:	801a      	strh	r2, [r3, #0]
				aTxBuffer[0] = 4;
 8002dba:	4b4b      	ldr	r3, [pc, #300]	; (8002ee8 <vShell_cmdParse+0x274>)
 8002dbc:	2204      	movs	r2, #4
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	e081      	b.n	8002ec6 <vShell_cmdParse+0x252>
			}

			else if (u8_idx==6) {					//{RB2}
 8002dc2:	7ffb      	ldrb	r3, [r7, #31]
 8002dc4:	2b06      	cmp	r3, #6
 8002dc6:	d10a      	bne.n	8002dde <vShell_cmdParse+0x16a>
				bitFlag |= BFLAG_I2C_WBS;
 8002dc8:	4b46      	ldr	r3, [pc, #280]	; (8002ee4 <vShell_cmdParse+0x270>)
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	f043 0304 	orr.w	r3, r3, #4
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	4b44      	ldr	r3, [pc, #272]	; (8002ee4 <vShell_cmdParse+0x270>)
 8002dd4:	801a      	strh	r2, [r3, #0]
				aTxBuffer[0] = 5;
 8002dd6:	4b44      	ldr	r3, [pc, #272]	; (8002ee8 <vShell_cmdParse+0x274>)
 8002dd8:	2205      	movs	r2, #5
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	e073      	b.n	8002ec6 <vShell_cmdParse+0x252>
			}

			else if (u8_idx==7) {					//{RB3}
 8002dde:	7ffb      	ldrb	r3, [r7, #31]
 8002de0:	2b07      	cmp	r3, #7
 8002de2:	d10a      	bne.n	8002dfa <vShell_cmdParse+0x186>
				bitFlag |= BFLAG_I2C_WBS;
 8002de4:	4b3f      	ldr	r3, [pc, #252]	; (8002ee4 <vShell_cmdParse+0x270>)
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	f043 0304 	orr.w	r3, r3, #4
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	4b3d      	ldr	r3, [pc, #244]	; (8002ee4 <vShell_cmdParse+0x270>)
 8002df0:	801a      	strh	r2, [r3, #0]
				aTxBuffer[0] = 6;
 8002df2:	4b3d      	ldr	r3, [pc, #244]	; (8002ee8 <vShell_cmdParse+0x274>)
 8002df4:	2206      	movs	r2, #6
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	e065      	b.n	8002ec6 <vShell_cmdParse+0x252>
			}

			else if (u8_idx==8) {					//{WBA:
 8002dfa:	7ffb      	ldrb	r3, [r7, #31]
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d162      	bne.n	8002ec6 <vShell_cmdParse+0x252>
				bitFlag |= BFLAG_I2C_WBA;
 8002e00:	4b38      	ldr	r3, [pc, #224]	; (8002ee4 <vShell_cmdParse+0x270>)
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	f043 0310 	orr.w	r3, r3, #16
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	4b36      	ldr	r3, [pc, #216]	; (8002ee4 <vShell_cmdParse+0x270>)
 8002e0c:	801a      	strh	r2, [r3, #0]

				uint32_t num = 0;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	613b      	str	r3, [r7, #16]
				uint8_t start = 5;
 8002e12:	2305      	movs	r3, #5
 8002e14:	73fb      	strb	r3, [r7, #15]

				for (uint8_t j = 0; j<CFG_LENGTH*3; j++)
 8002e16:	2300      	movs	r3, #0
 8002e18:	73bb      	strb	r3, [r7, #14]
 8002e1a:	e049      	b.n	8002eb0 <vShell_cmdParse+0x23c>
				{
					if(input[start+3]<128)
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
 8002e1e:	3303      	adds	r3, #3
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	4413      	add	r3, r2
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	b25b      	sxtb	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	db1b      	blt.n	8002e64 <vShell_cmdParse+0x1f0>
					{
						num = input[start]+(input[start+1]*256)+(input[start+2]*65536)+(input[start+3]*16777216);
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	4413      	add	r3, r2
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	4619      	mov	r1, r3
 8002e36:	7bfb      	ldrb	r3, [r7, #15]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	021b      	lsls	r3, r3, #8
 8002e42:	18ca      	adds	r2, r1, r3
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
 8002e46:	3302      	adds	r3, #2
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	440b      	add	r3, r1
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	041b      	lsls	r3, r3, #16
 8002e50:	441a      	add	r2, r3
 8002e52:	7bfb      	ldrb	r3, [r7, #15]
 8002e54:	3303      	adds	r3, #3
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	440b      	add	r3, r1
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	061b      	lsls	r3, r3, #24
 8002e5e:	4413      	add	r3, r2
 8002e60:	613b      	str	r3, [r7, #16]
 8002e62:	e01a      	b.n	8002e9a <vShell_cmdParse+0x226>
					}
					else
					{
						num = (input[start]+(input[start+1]*256)+(input[start+2]*65536)+(input[start+3]*16777216))-4294967296;
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	4413      	add	r3, r2
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	7bfb      	ldrb	r3, [r7, #15]
 8002e70:	3301      	adds	r3, #1
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	4413      	add	r3, r2
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	021b      	lsls	r3, r3, #8
 8002e7a:	18ca      	adds	r2, r1, r3
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
 8002e7e:	3302      	adds	r3, #2
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	440b      	add	r3, r1
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	041b      	lsls	r3, r3, #16
 8002e88:	441a      	add	r2, r3
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
 8002e8c:	3303      	adds	r3, #3
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	440b      	add	r3, r1
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	061b      	lsls	r3, r3, #24
 8002e96:	4413      	add	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
					}
					temp[j] = num;
 8002e9a:	7bbb      	ldrb	r3, [r7, #14]
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	4913      	ldr	r1, [pc, #76]	; (8002eec <vShell_cmdParse+0x278>)
 8002ea0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					start+=4;
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	73fb      	strb	r3, [r7, #15]
				for (uint8_t j = 0; j<CFG_LENGTH*3; j++)
 8002eaa:	7bbb      	ldrb	r3, [r7, #14]
 8002eac:	3301      	adds	r3, #1
 8002eae:	73bb      	strb	r3, [r7, #14]
 8002eb0:	7bbb      	ldrb	r3, [r7, #14]
 8002eb2:	2b1d      	cmp	r3, #29
 8002eb4:	d9b2      	bls.n	8002e1c <vShell_cmdParse+0x1a8>
				}
				Set_aTxBuffer(7, temp, 0, CFG_LENGTH*sizeof(temp[0]));
 8002eb6:	2328      	movs	r3, #40	; 0x28
 8002eb8:	2200      	movs	r2, #0
 8002eba:	490c      	ldr	r1, [pc, #48]	; (8002eec <vShell_cmdParse+0x278>)
 8002ebc:	2007      	movs	r0, #7
 8002ebe:	f7fd fbd1 	bl	8000664 <Set_aTxBuffer>
 8002ec2:	e000      	b.n	8002ec6 <vShell_cmdParse+0x252>
			else if (u8_idx>=2 && u8_idx<=2) {	//{WB1: {WB2: {WB3:
 8002ec4:	bf00      	nop
	for(uint8_t u8_idx = 0; u8_idx < CFG_HEADER_NUM; u8_idx++) {
 8002ec6:	7ffb      	ldrb	r3, [r7, #31]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	77fb      	strb	r3, [r7, #31]
 8002ecc:	7ffb      	ldrb	r3, [r7, #31]
 8002ece:	2b13      	cmp	r3, #19
 8002ed0:	f67f aed7 	bls.w	8002c82 <vShell_cmdParse+0xe>
			}
		}
	}
}
 8002ed4:	bf00      	nop
 8002ed6:	bf00      	nop
 8002ed8:	3720      	adds	r7, #32
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20000030 	.word	0x20000030
 8002ee4:	20000518 	.word	0x20000518
 8002ee8:	20000000 	.word	0x20000000
 8002eec:	20000548 	.word	0x20000548

08002ef0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ef0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ef4:	480d      	ldr	r0, [pc, #52]	; (8002f2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ef6:	490e      	ldr	r1, [pc, #56]	; (8002f30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ef8:	4a0e      	ldr	r2, [pc, #56]	; (8002f34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002efc:	e002      	b.n	8002f04 <LoopCopyDataInit>

08002efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f02:	3304      	adds	r3, #4

08002f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f08:	d3f9      	bcc.n	8002efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f0a:	4a0b      	ldr	r2, [pc, #44]	; (8002f38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f0c:	4c0b      	ldr	r4, [pc, #44]	; (8002f3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f10:	e001      	b.n	8002f16 <LoopFillZerobss>

08002f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f14:	3204      	adds	r2, #4

08002f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f18:	d3fb      	bcc.n	8002f12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f1a:	f7ff fe99 	bl	8002c50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f1e:	f004 ff2d 	bl	8007d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f22:	f7fd fbe1 	bl	80006e8 <main>
  bx  lr    
 8002f26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f30:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8002f34:	080089e4 	.word	0x080089e4
  ldr r2, =_sbss
 8002f38:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8002f3c:	200007ec 	.word	0x200007ec

08002f40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f40:	e7fe      	b.n	8002f40 <ADC_IRQHandler>
	...

08002f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f48:	4b0e      	ldr	r3, [pc, #56]	; (8002f84 <HAL_Init+0x40>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a0d      	ldr	r2, [pc, #52]	; (8002f84 <HAL_Init+0x40>)
 8002f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f54:	4b0b      	ldr	r3, [pc, #44]	; (8002f84 <HAL_Init+0x40>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a0a      	ldr	r2, [pc, #40]	; (8002f84 <HAL_Init+0x40>)
 8002f5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f60:	4b08      	ldr	r3, [pc, #32]	; (8002f84 <HAL_Init+0x40>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a07      	ldr	r2, [pc, #28]	; (8002f84 <HAL_Init+0x40>)
 8002f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f6c:	2003      	movs	r0, #3
 8002f6e:	f000 f94f 	bl	8003210 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f72:	2000      	movs	r0, #0
 8002f74:	f000 f808 	bl	8002f88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f78:	f7ff fc64 	bl	8002844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40023c00 	.word	0x40023c00

08002f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f90:	4b12      	ldr	r3, [pc, #72]	; (8002fdc <HAL_InitTick+0x54>)
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	4b12      	ldr	r3, [pc, #72]	; (8002fe0 <HAL_InitTick+0x58>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	4619      	mov	r1, r3
 8002f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 f967 	bl	800327a <HAL_SYSTICK_Config>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e00e      	b.n	8002fd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b0f      	cmp	r3, #15
 8002fba:	d80a      	bhi.n	8002fd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc4:	f000 f92f 	bl	8003226 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fc8:	4a06      	ldr	r2, [pc, #24]	; (8002fe4 <HAL_InitTick+0x5c>)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	e000      	b.n	8002fd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	2000002c 	.word	0x2000002c
 8002fe0:	20000098 	.word	0x20000098
 8002fe4:	20000094 	.word	0x20000094

08002fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fec:	4b06      	ldr	r3, [pc, #24]	; (8003008 <HAL_IncTick+0x20>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	4b06      	ldr	r3, [pc, #24]	; (800300c <HAL_IncTick+0x24>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	4a04      	ldr	r2, [pc, #16]	; (800300c <HAL_IncTick+0x24>)
 8002ffa:	6013      	str	r3, [r2, #0]
}
 8002ffc:	bf00      	nop
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	20000098 	.word	0x20000098
 800300c:	200007d8 	.word	0x200007d8

08003010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  return uwTick;
 8003014:	4b03      	ldr	r3, [pc, #12]	; (8003024 <HAL_GetTick+0x14>)
 8003016:	681b      	ldr	r3, [r3, #0]
}
 8003018:	4618      	mov	r0, r3
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	200007d8 	.word	0x200007d8

08003028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003030:	f7ff ffee 	bl	8003010 <HAL_GetTick>
 8003034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003040:	d005      	beq.n	800304e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003042:	4b0a      	ldr	r3, [pc, #40]	; (800306c <HAL_Delay+0x44>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	461a      	mov	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4413      	add	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800304e:	bf00      	nop
 8003050:	f7ff ffde 	bl	8003010 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	429a      	cmp	r2, r3
 800305e:	d8f7      	bhi.n	8003050 <HAL_Delay+0x28>
  {
  }
}
 8003060:	bf00      	nop
 8003062:	bf00      	nop
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	20000098 	.word	0x20000098

08003070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003080:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800308c:	4013      	ands	r3, r2
 800308e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003098:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800309c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030a2:	4a04      	ldr	r2, [pc, #16]	; (80030b4 <__NVIC_SetPriorityGrouping+0x44>)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	60d3      	str	r3, [r2, #12]
}
 80030a8:	bf00      	nop
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	e000ed00 	.word	0xe000ed00

080030b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030bc:	4b04      	ldr	r3, [pc, #16]	; (80030d0 <__NVIC_GetPriorityGrouping+0x18>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	0a1b      	lsrs	r3, r3, #8
 80030c2:	f003 0307 	and.w	r3, r3, #7
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	e000ed00 	.word	0xe000ed00

080030d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	db0b      	blt.n	80030fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	f003 021f 	and.w	r2, r3, #31
 80030ec:	4907      	ldr	r1, [pc, #28]	; (800310c <__NVIC_EnableIRQ+0x38>)
 80030ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	2001      	movs	r0, #1
 80030f6:	fa00 f202 	lsl.w	r2, r0, r2
 80030fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	e000e100 	.word	0xe000e100

08003110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	6039      	str	r1, [r7, #0]
 800311a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800311c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003120:	2b00      	cmp	r3, #0
 8003122:	db0a      	blt.n	800313a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	b2da      	uxtb	r2, r3
 8003128:	490c      	ldr	r1, [pc, #48]	; (800315c <__NVIC_SetPriority+0x4c>)
 800312a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312e:	0112      	lsls	r2, r2, #4
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	440b      	add	r3, r1
 8003134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003138:	e00a      	b.n	8003150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	b2da      	uxtb	r2, r3
 800313e:	4908      	ldr	r1, [pc, #32]	; (8003160 <__NVIC_SetPriority+0x50>)
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	3b04      	subs	r3, #4
 8003148:	0112      	lsls	r2, r2, #4
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	440b      	add	r3, r1
 800314e:	761a      	strb	r2, [r3, #24]
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	e000e100 	.word	0xe000e100
 8003160:	e000ed00 	.word	0xe000ed00

08003164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003164:	b480      	push	{r7}
 8003166:	b089      	sub	sp, #36	; 0x24
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f1c3 0307 	rsb	r3, r3, #7
 800317e:	2b04      	cmp	r3, #4
 8003180:	bf28      	it	cs
 8003182:	2304      	movcs	r3, #4
 8003184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	3304      	adds	r3, #4
 800318a:	2b06      	cmp	r3, #6
 800318c:	d902      	bls.n	8003194 <NVIC_EncodePriority+0x30>
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	3b03      	subs	r3, #3
 8003192:	e000      	b.n	8003196 <NVIC_EncodePriority+0x32>
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003198:	f04f 32ff 	mov.w	r2, #4294967295
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43da      	mvns	r2, r3
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	401a      	ands	r2, r3
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031ac:	f04f 31ff 	mov.w	r1, #4294967295
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	fa01 f303 	lsl.w	r3, r1, r3
 80031b6:	43d9      	mvns	r1, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031bc:	4313      	orrs	r3, r2
         );
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3724      	adds	r7, #36	; 0x24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
	...

080031cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031dc:	d301      	bcc.n	80031e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031de:	2301      	movs	r3, #1
 80031e0:	e00f      	b.n	8003202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031e2:	4a0a      	ldr	r2, [pc, #40]	; (800320c <SysTick_Config+0x40>)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3b01      	subs	r3, #1
 80031e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ea:	210f      	movs	r1, #15
 80031ec:	f04f 30ff 	mov.w	r0, #4294967295
 80031f0:	f7ff ff8e 	bl	8003110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031f4:	4b05      	ldr	r3, [pc, #20]	; (800320c <SysTick_Config+0x40>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031fa:	4b04      	ldr	r3, [pc, #16]	; (800320c <SysTick_Config+0x40>)
 80031fc:	2207      	movs	r2, #7
 80031fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	e000e010 	.word	0xe000e010

08003210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7ff ff29 	bl	8003070 <__NVIC_SetPriorityGrouping>
}
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003226:	b580      	push	{r7, lr}
 8003228:	b086      	sub	sp, #24
 800322a:	af00      	add	r7, sp, #0
 800322c:	4603      	mov	r3, r0
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	607a      	str	r2, [r7, #4]
 8003232:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003238:	f7ff ff3e 	bl	80030b8 <__NVIC_GetPriorityGrouping>
 800323c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	68b9      	ldr	r1, [r7, #8]
 8003242:	6978      	ldr	r0, [r7, #20]
 8003244:	f7ff ff8e 	bl	8003164 <NVIC_EncodePriority>
 8003248:	4602      	mov	r2, r0
 800324a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800324e:	4611      	mov	r1, r2
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff ff5d 	bl	8003110 <__NVIC_SetPriority>
}
 8003256:	bf00      	nop
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	4603      	mov	r3, r0
 8003266:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff ff31 	bl	80030d4 <__NVIC_EnableIRQ>
}
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff ffa2 	bl	80031cc <SysTick_Config>
 8003288:	4603      	mov	r3, r0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032a0:	f7ff feb6 	bl	8003010 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e099      	b.n	80033e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0201 	bic.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032d0:	e00f      	b.n	80032f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032d2:	f7ff fe9d 	bl	8003010 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b05      	cmp	r3, #5
 80032de:	d908      	bls.n	80032f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2220      	movs	r2, #32
 80032e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2203      	movs	r2, #3
 80032ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e078      	b.n	80033e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1e8      	bne.n	80032d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	4b38      	ldr	r3, [pc, #224]	; (80033ec <HAL_DMA_Init+0x158>)
 800330c:	4013      	ands	r3, r2
 800330e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800331e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800332a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003336:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	4313      	orrs	r3, r2
 8003342:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	2b04      	cmp	r3, #4
 800334a:	d107      	bne.n	800335c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003354:	4313      	orrs	r3, r2
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	4313      	orrs	r3, r2
 800335a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f023 0307 	bic.w	r3, r3, #7
 8003372:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	4313      	orrs	r3, r2
 800337c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	2b04      	cmp	r3, #4
 8003384:	d117      	bne.n	80033b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	4313      	orrs	r3, r2
 800338e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00e      	beq.n	80033b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 fb0f 	bl	80039bc <DMA_CheckFifoParam>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2240      	movs	r2, #64	; 0x40
 80033a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80033b2:	2301      	movs	r3, #1
 80033b4:	e016      	b.n	80033e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 fac6 	bl	8003950 <DMA_CalcBaseAndBitshift>
 80033c4:	4603      	mov	r3, r0
 80033c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033cc:	223f      	movs	r2, #63	; 0x3f
 80033ce:	409a      	lsls	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	f010803f 	.word	0xf010803f

080033f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003406:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_DMA_Start_IT+0x26>
 8003412:	2302      	movs	r3, #2
 8003414:	e040      	b.n	8003498 <HAL_DMA_Start_IT+0xa8>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b01      	cmp	r3, #1
 8003428:	d12f      	bne.n	800348a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2202      	movs	r2, #2
 800342e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	68b9      	ldr	r1, [r7, #8]
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 fa58 	bl	80038f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003448:	223f      	movs	r2, #63	; 0x3f
 800344a:	409a      	lsls	r2, r3
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0216 	orr.w	r2, r2, #22
 800345e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	2b00      	cmp	r3, #0
 8003466:	d007      	beq.n	8003478 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0208 	orr.w	r2, r2, #8
 8003476:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0201 	orr.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	e005      	b.n	8003496 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003492:	2302      	movs	r3, #2
 8003494:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003496:	7dfb      	ldrb	r3, [r7, #23]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034ae:	f7ff fdaf 	bl	8003010 <HAL_GetTick>
 80034b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d008      	beq.n	80034d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2280      	movs	r2, #128	; 0x80
 80034c4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e052      	b.n	8003578 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0216 	bic.w	r2, r2, #22
 80034e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695a      	ldr	r2, [r3, #20]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d103      	bne.n	8003502 <HAL_DMA_Abort+0x62>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d007      	beq.n	8003512 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0208 	bic.w	r2, r2, #8
 8003510:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0201 	bic.w	r2, r2, #1
 8003520:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003522:	e013      	b.n	800354c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003524:	f7ff fd74 	bl	8003010 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b05      	cmp	r3, #5
 8003530:	d90c      	bls.n	800354c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2220      	movs	r2, #32
 8003536:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2203      	movs	r2, #3
 800353c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e015      	b.n	8003578 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1e4      	bne.n	8003524 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355e:	223f      	movs	r2, #63	; 0x3f
 8003560:	409a      	lsls	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d004      	beq.n	800359e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2280      	movs	r2, #128	; 0x80
 8003598:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e00c      	b.n	80035b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2205      	movs	r2, #5
 80035a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035d0:	4b8e      	ldr	r3, [pc, #568]	; (800380c <HAL_DMA_IRQHandler+0x248>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a8e      	ldr	r2, [pc, #568]	; (8003810 <HAL_DMA_IRQHandler+0x24c>)
 80035d6:	fba2 2303 	umull	r2, r3, r2, r3
 80035da:	0a9b      	lsrs	r3, r3, #10
 80035dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ee:	2208      	movs	r2, #8
 80035f0:	409a      	lsls	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4013      	ands	r3, r2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d01a      	beq.n	8003630 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	d013      	beq.n	8003630 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0204 	bic.w	r2, r2, #4
 8003616:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361c:	2208      	movs	r2, #8
 800361e:	409a      	lsls	r2, r3
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003628:	f043 0201 	orr.w	r2, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003634:	2201      	movs	r2, #1
 8003636:	409a      	lsls	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4013      	ands	r3, r2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d012      	beq.n	8003666 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00b      	beq.n	8003666 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003652:	2201      	movs	r2, #1
 8003654:	409a      	lsls	r2, r3
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365e:	f043 0202 	orr.w	r2, r3, #2
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366a:	2204      	movs	r2, #4
 800366c:	409a      	lsls	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	4013      	ands	r3, r2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d012      	beq.n	800369c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00b      	beq.n	800369c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003688:	2204      	movs	r2, #4
 800368a:	409a      	lsls	r2, r3
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003694:	f043 0204 	orr.w	r2, r3, #4
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a0:	2210      	movs	r2, #16
 80036a2:	409a      	lsls	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d043      	beq.n	8003734 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d03c      	beq.n	8003734 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036be:	2210      	movs	r2, #16
 80036c0:	409a      	lsls	r2, r3
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d018      	beq.n	8003706 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d108      	bne.n	80036f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d024      	beq.n	8003734 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	4798      	blx	r3
 80036f2:	e01f      	b.n	8003734 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d01b      	beq.n	8003734 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	4798      	blx	r3
 8003704:	e016      	b.n	8003734 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003710:	2b00      	cmp	r3, #0
 8003712:	d107      	bne.n	8003724 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0208 	bic.w	r2, r2, #8
 8003722:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003738:	2220      	movs	r2, #32
 800373a:	409a      	lsls	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4013      	ands	r3, r2
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 808f 	beq.w	8003864 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0310 	and.w	r3, r3, #16
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 8087 	beq.w	8003864 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375a:	2220      	movs	r2, #32
 800375c:	409a      	lsls	r2, r3
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b05      	cmp	r3, #5
 800376c:	d136      	bne.n	80037dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0216 	bic.w	r2, r2, #22
 800377c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695a      	ldr	r2, [r3, #20]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800378c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	2b00      	cmp	r3, #0
 8003794:	d103      	bne.n	800379e <HAL_DMA_IRQHandler+0x1da>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800379a:	2b00      	cmp	r3, #0
 800379c:	d007      	beq.n	80037ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0208 	bic.w	r2, r2, #8
 80037ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b2:	223f      	movs	r2, #63	; 0x3f
 80037b4:	409a      	lsls	r2, r3
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d07e      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	4798      	blx	r3
        }
        return;
 80037da:	e079      	b.n	80038d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d01d      	beq.n	8003826 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10d      	bne.n	8003814 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d031      	beq.n	8003864 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	4798      	blx	r3
 8003808:	e02c      	b.n	8003864 <HAL_DMA_IRQHandler+0x2a0>
 800380a:	bf00      	nop
 800380c:	2000002c 	.word	0x2000002c
 8003810:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003818:	2b00      	cmp	r3, #0
 800381a:	d023      	beq.n	8003864 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	4798      	blx	r3
 8003824:	e01e      	b.n	8003864 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10f      	bne.n	8003854 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0210 	bic.w	r2, r2, #16
 8003842:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003868:	2b00      	cmp	r3, #0
 800386a:	d032      	beq.n	80038d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b00      	cmp	r3, #0
 8003876:	d022      	beq.n	80038be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2205      	movs	r2, #5
 800387c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0201 	bic.w	r2, r2, #1
 800388e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	3301      	adds	r3, #1
 8003894:	60bb      	str	r3, [r7, #8]
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	429a      	cmp	r2, r3
 800389a:	d307      	bcc.n	80038ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1f2      	bne.n	8003890 <HAL_DMA_IRQHandler+0x2cc>
 80038aa:	e000      	b.n	80038ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80038ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d005      	beq.n	80038d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	4798      	blx	r3
 80038ce:	e000      	b.n	80038d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80038d0:	bf00      	nop
    }
  }
}
 80038d2:	3718      	adds	r7, #24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038e6:	b2db      	uxtb	r3, r3
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
 8003900:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003910:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2b40      	cmp	r3, #64	; 0x40
 8003920:	d108      	bne.n	8003934 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003932:	e007      	b.n	8003944 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	60da      	str	r2, [r3, #12]
}
 8003944:	bf00      	nop
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	b2db      	uxtb	r3, r3
 800395e:	3b10      	subs	r3, #16
 8003960:	4a14      	ldr	r2, [pc, #80]	; (80039b4 <DMA_CalcBaseAndBitshift+0x64>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	091b      	lsrs	r3, r3, #4
 8003968:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800396a:	4a13      	ldr	r2, [pc, #76]	; (80039b8 <DMA_CalcBaseAndBitshift+0x68>)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4413      	add	r3, r2
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b03      	cmp	r3, #3
 800397c:	d909      	bls.n	8003992 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003986:	f023 0303 	bic.w	r3, r3, #3
 800398a:	1d1a      	adds	r2, r3, #4
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	659a      	str	r2, [r3, #88]	; 0x58
 8003990:	e007      	b.n	80039a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800399a:	f023 0303 	bic.w	r3, r3, #3
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	aaaaaaab 	.word	0xaaaaaaab
 80039b8:	08008968 	.word	0x08008968

080039bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039c4:	2300      	movs	r3, #0
 80039c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d11f      	bne.n	8003a16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2b03      	cmp	r3, #3
 80039da:	d856      	bhi.n	8003a8a <DMA_CheckFifoParam+0xce>
 80039dc:	a201      	add	r2, pc, #4	; (adr r2, 80039e4 <DMA_CheckFifoParam+0x28>)
 80039de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e2:	bf00      	nop
 80039e4:	080039f5 	.word	0x080039f5
 80039e8:	08003a07 	.word	0x08003a07
 80039ec:	080039f5 	.word	0x080039f5
 80039f0:	08003a8b 	.word	0x08003a8b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d046      	beq.n	8003a8e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a04:	e043      	b.n	8003a8e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a0e:	d140      	bne.n	8003a92 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a14:	e03d      	b.n	8003a92 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a1e:	d121      	bne.n	8003a64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d837      	bhi.n	8003a96 <DMA_CheckFifoParam+0xda>
 8003a26:	a201      	add	r2, pc, #4	; (adr r2, 8003a2c <DMA_CheckFifoParam+0x70>)
 8003a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2c:	08003a3d 	.word	0x08003a3d
 8003a30:	08003a43 	.word	0x08003a43
 8003a34:	08003a3d 	.word	0x08003a3d
 8003a38:	08003a55 	.word	0x08003a55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a40:	e030      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d025      	beq.n	8003a9a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a52:	e022      	b.n	8003a9a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a5c:	d11f      	bne.n	8003a9e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a62:	e01c      	b.n	8003a9e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d903      	bls.n	8003a72 <DMA_CheckFifoParam+0xb6>
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	d003      	beq.n	8003a78 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a70:	e018      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	73fb      	strb	r3, [r7, #15]
      break;
 8003a76:	e015      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00e      	beq.n	8003aa2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	73fb      	strb	r3, [r7, #15]
      break;
 8003a88:	e00b      	b.n	8003aa2 <DMA_CheckFifoParam+0xe6>
      break;
 8003a8a:	bf00      	nop
 8003a8c:	e00a      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8003a8e:	bf00      	nop
 8003a90:	e008      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8003a92:	bf00      	nop
 8003a94:	e006      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8003a96:	bf00      	nop
 8003a98:	e004      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8003a9a:	bf00      	nop
 8003a9c:	e002      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a9e:	bf00      	nop
 8003aa0:	e000      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8003aa2:	bf00      	nop
    }
  } 
  
  return status; 
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop

08003ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b089      	sub	sp, #36	; 0x24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aca:	2300      	movs	r3, #0
 8003acc:	61fb      	str	r3, [r7, #28]
 8003ace:	e165      	b.n	8003d9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	f040 8154 	bne.w	8003d96 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d005      	beq.n	8003b06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d130      	bne.n	8003b68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	2203      	movs	r2, #3
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	43db      	mvns	r3, r3
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	68da      	ldr	r2, [r3, #12]
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	43db      	mvns	r3, r3
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	091b      	lsrs	r3, r3, #4
 8003b52:	f003 0201 	and.w	r2, r3, #1
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f003 0303 	and.w	r3, r3, #3
 8003b70:	2b03      	cmp	r3, #3
 8003b72:	d017      	beq.n	8003ba4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	2203      	movs	r2, #3
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	43db      	mvns	r3, r3
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f003 0303 	and.w	r3, r3, #3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d123      	bne.n	8003bf8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	08da      	lsrs	r2, r3, #3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3208      	adds	r2, #8
 8003bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	220f      	movs	r2, #15
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	691a      	ldr	r2, [r3, #16]
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	08da      	lsrs	r2, r3, #3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	3208      	adds	r2, #8
 8003bf2:	69b9      	ldr	r1, [r7, #24]
 8003bf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	2203      	movs	r2, #3
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f003 0203 	and.w	r2, r3, #3
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 80ae 	beq.w	8003d96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	4b5d      	ldr	r3, [pc, #372]	; (8003db4 <HAL_GPIO_Init+0x300>)
 8003c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c42:	4a5c      	ldr	r2, [pc, #368]	; (8003db4 <HAL_GPIO_Init+0x300>)
 8003c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c48:	6453      	str	r3, [r2, #68]	; 0x44
 8003c4a:	4b5a      	ldr	r3, [pc, #360]	; (8003db4 <HAL_GPIO_Init+0x300>)
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c56:	4a58      	ldr	r2, [pc, #352]	; (8003db8 <HAL_GPIO_Init+0x304>)
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	089b      	lsrs	r3, r3, #2
 8003c5c:	3302      	adds	r3, #2
 8003c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	220f      	movs	r2, #15
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	43db      	mvns	r3, r3
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	4013      	ands	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a4f      	ldr	r2, [pc, #316]	; (8003dbc <HAL_GPIO_Init+0x308>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d025      	beq.n	8003cce <HAL_GPIO_Init+0x21a>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a4e      	ldr	r2, [pc, #312]	; (8003dc0 <HAL_GPIO_Init+0x30c>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d01f      	beq.n	8003cca <HAL_GPIO_Init+0x216>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a4d      	ldr	r2, [pc, #308]	; (8003dc4 <HAL_GPIO_Init+0x310>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d019      	beq.n	8003cc6 <HAL_GPIO_Init+0x212>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a4c      	ldr	r2, [pc, #304]	; (8003dc8 <HAL_GPIO_Init+0x314>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d013      	beq.n	8003cc2 <HAL_GPIO_Init+0x20e>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a4b      	ldr	r2, [pc, #300]	; (8003dcc <HAL_GPIO_Init+0x318>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d00d      	beq.n	8003cbe <HAL_GPIO_Init+0x20a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a4a      	ldr	r2, [pc, #296]	; (8003dd0 <HAL_GPIO_Init+0x31c>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d007      	beq.n	8003cba <HAL_GPIO_Init+0x206>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a49      	ldr	r2, [pc, #292]	; (8003dd4 <HAL_GPIO_Init+0x320>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d101      	bne.n	8003cb6 <HAL_GPIO_Init+0x202>
 8003cb2:	2306      	movs	r3, #6
 8003cb4:	e00c      	b.n	8003cd0 <HAL_GPIO_Init+0x21c>
 8003cb6:	2307      	movs	r3, #7
 8003cb8:	e00a      	b.n	8003cd0 <HAL_GPIO_Init+0x21c>
 8003cba:	2305      	movs	r3, #5
 8003cbc:	e008      	b.n	8003cd0 <HAL_GPIO_Init+0x21c>
 8003cbe:	2304      	movs	r3, #4
 8003cc0:	e006      	b.n	8003cd0 <HAL_GPIO_Init+0x21c>
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e004      	b.n	8003cd0 <HAL_GPIO_Init+0x21c>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	e002      	b.n	8003cd0 <HAL_GPIO_Init+0x21c>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e000      	b.n	8003cd0 <HAL_GPIO_Init+0x21c>
 8003cce:	2300      	movs	r3, #0
 8003cd0:	69fa      	ldr	r2, [r7, #28]
 8003cd2:	f002 0203 	and.w	r2, r2, #3
 8003cd6:	0092      	lsls	r2, r2, #2
 8003cd8:	4093      	lsls	r3, r2
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ce0:	4935      	ldr	r1, [pc, #212]	; (8003db8 <HAL_GPIO_Init+0x304>)
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	089b      	lsrs	r3, r3, #2
 8003ce6:	3302      	adds	r3, #2
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cee:	4b3a      	ldr	r3, [pc, #232]	; (8003dd8 <HAL_GPIO_Init+0x324>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	43db      	mvns	r3, r3
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d12:	4a31      	ldr	r2, [pc, #196]	; (8003dd8 <HAL_GPIO_Init+0x324>)
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d18:	4b2f      	ldr	r3, [pc, #188]	; (8003dd8 <HAL_GPIO_Init+0x324>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	43db      	mvns	r3, r3
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	4013      	ands	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d003      	beq.n	8003d3c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d3c:	4a26      	ldr	r2, [pc, #152]	; (8003dd8 <HAL_GPIO_Init+0x324>)
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d42:	4b25      	ldr	r3, [pc, #148]	; (8003dd8 <HAL_GPIO_Init+0x324>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d66:	4a1c      	ldr	r2, [pc, #112]	; (8003dd8 <HAL_GPIO_Init+0x324>)
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d6c:	4b1a      	ldr	r3, [pc, #104]	; (8003dd8 <HAL_GPIO_Init+0x324>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	43db      	mvns	r3, r3
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d90:	4a11      	ldr	r2, [pc, #68]	; (8003dd8 <HAL_GPIO_Init+0x324>)
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	61fb      	str	r3, [r7, #28]
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	2b0f      	cmp	r3, #15
 8003da0:	f67f ae96 	bls.w	8003ad0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003da4:	bf00      	nop
 8003da6:	bf00      	nop
 8003da8:	3724      	adds	r7, #36	; 0x24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	40023800 	.word	0x40023800
 8003db8:	40013800 	.word	0x40013800
 8003dbc:	40020000 	.word	0x40020000
 8003dc0:	40020400 	.word	0x40020400
 8003dc4:	40020800 	.word	0x40020800
 8003dc8:	40020c00 	.word	0x40020c00
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	40021400 	.word	0x40021400
 8003dd4:	40021800 	.word	0x40021800
 8003dd8:	40013c00 	.word	0x40013c00

08003ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	460b      	mov	r3, r1
 8003de6:	807b      	strh	r3, [r7, #2]
 8003de8:	4613      	mov	r3, r2
 8003dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dec:	787b      	ldrb	r3, [r7, #1]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003df2:	887a      	ldrh	r2, [r7, #2]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003df8:	e003      	b.n	8003e02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dfa:	887b      	ldrh	r3, [r7, #2]
 8003dfc:	041a      	lsls	r2, r3, #16
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	619a      	str	r2, [r3, #24]
}
 8003e02:	bf00      	nop
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b085      	sub	sp, #20
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
 8003e16:	460b      	mov	r3, r1
 8003e18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e20:	887a      	ldrh	r2, [r7, #2]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	4013      	ands	r3, r2
 8003e26:	041a      	lsls	r2, r3, #16
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	43d9      	mvns	r1, r3
 8003e2c:	887b      	ldrh	r3, [r7, #2]
 8003e2e:	400b      	ands	r3, r1
 8003e30:	431a      	orrs	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	619a      	str	r2, [r3, #24]
}
 8003e36:	bf00      	nop
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
	...

08003e44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e12b      	b.n	80040ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d106      	bne.n	8003e70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7fe fd94 	bl	8002998 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2224      	movs	r2, #36	; 0x24
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0201 	bic.w	r2, r2, #1
 8003e86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ea6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ea8:	f002 f808 	bl	8005ebc <HAL_RCC_GetPCLK1Freq>
 8003eac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	4a81      	ldr	r2, [pc, #516]	; (80040b8 <HAL_I2C_Init+0x274>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d807      	bhi.n	8003ec8 <HAL_I2C_Init+0x84>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4a80      	ldr	r2, [pc, #512]	; (80040bc <HAL_I2C_Init+0x278>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	bf94      	ite	ls
 8003ec0:	2301      	movls	r3, #1
 8003ec2:	2300      	movhi	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	e006      	b.n	8003ed6 <HAL_I2C_Init+0x92>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4a7d      	ldr	r2, [pc, #500]	; (80040c0 <HAL_I2C_Init+0x27c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	bf94      	ite	ls
 8003ed0:	2301      	movls	r3, #1
 8003ed2:	2300      	movhi	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e0e7      	b.n	80040ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4a78      	ldr	r2, [pc, #480]	; (80040c4 <HAL_I2C_Init+0x280>)
 8003ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee6:	0c9b      	lsrs	r3, r3, #18
 8003ee8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	4a6a      	ldr	r2, [pc, #424]	; (80040b8 <HAL_I2C_Init+0x274>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d802      	bhi.n	8003f18 <HAL_I2C_Init+0xd4>
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	3301      	adds	r3, #1
 8003f16:	e009      	b.n	8003f2c <HAL_I2C_Init+0xe8>
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f1e:	fb02 f303 	mul.w	r3, r2, r3
 8003f22:	4a69      	ldr	r2, [pc, #420]	; (80040c8 <HAL_I2C_Init+0x284>)
 8003f24:	fba2 2303 	umull	r2, r3, r2, r3
 8003f28:	099b      	lsrs	r3, r3, #6
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	6812      	ldr	r2, [r2, #0]
 8003f30:	430b      	orrs	r3, r1
 8003f32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	495c      	ldr	r1, [pc, #368]	; (80040b8 <HAL_I2C_Init+0x274>)
 8003f48:	428b      	cmp	r3, r1
 8003f4a:	d819      	bhi.n	8003f80 <HAL_I2C_Init+0x13c>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	1e59      	subs	r1, r3, #1
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f5a:	1c59      	adds	r1, r3, #1
 8003f5c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f60:	400b      	ands	r3, r1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00a      	beq.n	8003f7c <HAL_I2C_Init+0x138>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	1e59      	subs	r1, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f74:	3301      	adds	r3, #1
 8003f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f7a:	e051      	b.n	8004020 <HAL_I2C_Init+0x1dc>
 8003f7c:	2304      	movs	r3, #4
 8003f7e:	e04f      	b.n	8004020 <HAL_I2C_Init+0x1dc>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d111      	bne.n	8003fac <HAL_I2C_Init+0x168>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	1e58      	subs	r0, r3, #1
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6859      	ldr	r1, [r3, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	440b      	add	r3, r1
 8003f96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	bf0c      	ite	eq
 8003fa4:	2301      	moveq	r3, #1
 8003fa6:	2300      	movne	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	e012      	b.n	8003fd2 <HAL_I2C_Init+0x18e>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	1e58      	subs	r0, r3, #1
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6859      	ldr	r1, [r3, #4]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	0099      	lsls	r1, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	bf0c      	ite	eq
 8003fcc:	2301      	moveq	r3, #1
 8003fce:	2300      	movne	r3, #0
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <HAL_I2C_Init+0x196>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e022      	b.n	8004020 <HAL_I2C_Init+0x1dc>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10e      	bne.n	8004000 <HAL_I2C_Init+0x1bc>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	1e58      	subs	r0, r3, #1
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6859      	ldr	r1, [r3, #4]
 8003fea:	460b      	mov	r3, r1
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	440b      	add	r3, r1
 8003ff0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ffe:	e00f      	b.n	8004020 <HAL_I2C_Init+0x1dc>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	1e58      	subs	r0, r3, #1
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6859      	ldr	r1, [r3, #4]
 8004008:	460b      	mov	r3, r1
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	0099      	lsls	r1, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	fbb0 f3f3 	udiv	r3, r0, r3
 8004016:	3301      	adds	r3, #1
 8004018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800401c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004020:	6879      	ldr	r1, [r7, #4]
 8004022:	6809      	ldr	r1, [r1, #0]
 8004024:	4313      	orrs	r3, r2
 8004026:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	69da      	ldr	r2, [r3, #28]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800404e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	6911      	ldr	r1, [r2, #16]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	68d2      	ldr	r2, [r2, #12]
 800405a:	4311      	orrs	r1, r2
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6812      	ldr	r2, [r2, #0]
 8004060:	430b      	orrs	r3, r1
 8004062:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	695a      	ldr	r2, [r3, #20]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	430a      	orrs	r2, r1
 800407e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0201 	orr.w	r2, r2, #1
 800408e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2220      	movs	r2, #32
 800409a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	000186a0 	.word	0x000186a0
 80040bc:	001e847f 	.word	0x001e847f
 80040c0:	003d08ff 	.word	0x003d08ff
 80040c4:	431bde83 	.word	0x431bde83
 80040c8:	10624dd3 	.word	0x10624dd3

080040cc <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	607a      	str	r2, [r7, #4]
 80040d6:	461a      	mov	r2, r3
 80040d8:	460b      	mov	r3, r1
 80040da:	817b      	strh	r3, [r7, #10]
 80040dc:	4613      	mov	r3, r2
 80040de:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b20      	cmp	r3, #32
 80040ee:	f040 8085 	bne.w	80041fc <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80040f2:	4b46      	ldr	r3, [pc, #280]	; (800420c <HAL_I2C_Master_Transmit_IT+0x140>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	08db      	lsrs	r3, r3, #3
 80040f8:	4a45      	ldr	r2, [pc, #276]	; (8004210 <HAL_I2C_Master_Transmit_IT+0x144>)
 80040fa:	fba2 2303 	umull	r2, r3, r2, r3
 80040fe:	0a1a      	lsrs	r2, r3, #8
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	009a      	lsls	r2, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	3b01      	subs	r3, #1
 8004110:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d116      	bne.n	8004146 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2220      	movs	r2, #32
 8004122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	f043 0220 	orr.w	r2, r3, #32
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e05b      	b.n	80041fe <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b02      	cmp	r3, #2
 8004152:	d0db      	beq.n	800410c <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800415a:	2b01      	cmp	r3, #1
 800415c:	d101      	bne.n	8004162 <HAL_I2C_Master_Transmit_IT+0x96>
 800415e:	2302      	movs	r3, #2
 8004160:	e04d      	b.n	80041fe <HAL_I2C_Master_Transmit_IT+0x132>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	2b01      	cmp	r3, #1
 8004176:	d007      	beq.n	8004188 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f042 0201 	orr.w	r2, r2, #1
 8004186:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004196:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2221      	movs	r2, #33	; 0x21
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2210      	movs	r2, #16
 80041a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	893a      	ldrh	r2, [r7, #8]
 80041b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041be:	b29a      	uxth	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	4a13      	ldr	r2, [pc, #76]	; (8004214 <HAL_I2C_Master_Transmit_IT+0x148>)
 80041c8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80041ca:	897a      	ldrh	r2, [r7, #10]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041de:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80041f6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80041f8:	2300      	movs	r3, #0
 80041fa:	e000      	b.n	80041fe <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 80041fc:	2302      	movs	r3, #2
  }
}
 80041fe:	4618      	mov	r0, r3
 8004200:	371c      	adds	r7, #28
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	2000002c 	.word	0x2000002c
 8004210:	14f8b589 	.word	0x14f8b589
 8004214:	ffff0000 	.word	0xffff0000

08004218 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004218:	b480      	push	{r7}
 800421a:	b087      	sub	sp, #28
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	607a      	str	r2, [r7, #4]
 8004222:	461a      	mov	r2, r3
 8004224:	460b      	mov	r3, r1
 8004226:	817b      	strh	r3, [r7, #10]
 8004228:	4613      	mov	r3, r2
 800422a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b20      	cmp	r3, #32
 800423a:	f040 808d 	bne.w	8004358 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800423e:	4b4a      	ldr	r3, [pc, #296]	; (8004368 <HAL_I2C_Master_Receive_IT+0x150>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	08db      	lsrs	r3, r3, #3
 8004244:	4a49      	ldr	r2, [pc, #292]	; (800436c <HAL_I2C_Master_Receive_IT+0x154>)
 8004246:	fba2 2303 	umull	r2, r3, r2, r3
 800424a:	0a1a      	lsrs	r2, r3, #8
 800424c:	4613      	mov	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	009a      	lsls	r2, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	3b01      	subs	r3, #1
 800425c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d116      	bne.n	8004292 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2220      	movs	r2, #32
 800426e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	f043 0220 	orr.w	r2, r3, #32
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e063      	b.n	800435a <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b02      	cmp	r3, #2
 800429e:	d0db      	beq.n	8004258 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d101      	bne.n	80042ae <HAL_I2C_Master_Receive_IT+0x96>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e055      	b.n	800435a <HAL_I2C_Master_Receive_IT+0x142>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d007      	beq.n	80042d4 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0201 	orr.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2222      	movs	r2, #34	; 0x22
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2210      	movs	r2, #16
 80042f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	893a      	ldrh	r2, [r7, #8]
 8004304:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430a:	b29a      	uxth	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4a17      	ldr	r2, [pc, #92]	; (8004370 <HAL_I2C_Master_Receive_IT+0x158>)
 8004314:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004316:	897a      	ldrh	r2, [r7, #10]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800432a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800433a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004352:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004354:	2300      	movs	r3, #0
 8004356:	e000      	b.n	800435a <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8004358:	2302      	movs	r3, #2
  }
}
 800435a:	4618      	mov	r0, r3
 800435c:	371c      	adds	r7, #28
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	2000002c 	.word	0x2000002c
 800436c:	14f8b589 	.word	0x14f8b589
 8004370:	ffff0000 	.word	0xffff0000

08004374 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004394:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800439e:	7bfb      	ldrb	r3, [r7, #15]
 80043a0:	2b10      	cmp	r3, #16
 80043a2:	d003      	beq.n	80043ac <HAL_I2C_EV_IRQHandler+0x38>
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
 80043a6:	2b40      	cmp	r3, #64	; 0x40
 80043a8:	f040 80bd 	bne.w	8004526 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10d      	bne.n	80043e2 <HAL_I2C_EV_IRQHandler+0x6e>
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80043cc:	d003      	beq.n	80043d6 <HAL_I2C_EV_IRQHandler+0x62>
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80043d4:	d101      	bne.n	80043da <HAL_I2C_EV_IRQHandler+0x66>
 80043d6:	2301      	movs	r3, #1
 80043d8:	e000      	b.n	80043dc <HAL_I2C_EV_IRQHandler+0x68>
 80043da:	2300      	movs	r3, #0
 80043dc:	2b01      	cmp	r3, #1
 80043de:	f000 812e 	beq.w	800463e <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00c      	beq.n	8004406 <HAL_I2C_EV_IRQHandler+0x92>
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	0a5b      	lsrs	r3, r3, #9
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d006      	beq.n	8004406 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f001 fc51 	bl	8005ca0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 fd5e 	bl	8004ec0 <I2C_Master_SB>
 8004404:	e08e      	b.n	8004524 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	08db      	lsrs	r3, r3, #3
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	d009      	beq.n	8004426 <HAL_I2C_EV_IRQHandler+0xb2>
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	0a5b      	lsrs	r3, r3, #9
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 fdd4 	bl	8004fcc <I2C_Master_ADD10>
 8004424:	e07e      	b.n	8004524 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	085b      	lsrs	r3, r3, #1
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d009      	beq.n	8004446 <HAL_I2C_EV_IRQHandler+0xd2>
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	0a5b      	lsrs	r3, r3, #9
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fdee 	bl	8005020 <I2C_Master_ADDR>
 8004444:	e06e      	b.n	8004524 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	089b      	lsrs	r3, r3, #2
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d037      	beq.n	80044c2 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800445c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004460:	f000 80ef 	beq.w	8004642 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	09db      	lsrs	r3, r3, #7
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00f      	beq.n	8004490 <HAL_I2C_EV_IRQHandler+0x11c>
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	0a9b      	lsrs	r3, r3, #10
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b00      	cmp	r3, #0
 800447a:	d009      	beq.n	8004490 <HAL_I2C_EV_IRQHandler+0x11c>
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	089b      	lsrs	r3, r3, #2
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	d103      	bne.n	8004490 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f9eb 	bl	8004864 <I2C_MasterTransmit_TXE>
 800448e:	e049      	b.n	8004524 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	089b      	lsrs	r3, r3, #2
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 80d2 	beq.w	8004642 <HAL_I2C_EV_IRQHandler+0x2ce>
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	0a5b      	lsrs	r3, r3, #9
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 80cb 	beq.w	8004642 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80044ac:	7bfb      	ldrb	r3, [r7, #15]
 80044ae:	2b10      	cmp	r3, #16
 80044b0:	d103      	bne.n	80044ba <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 fa72 	bl	800499c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044b8:	e0c3      	b.n	8004642 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fad6 	bl	8004a6c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044c0:	e0bf      	b.n	8004642 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044d0:	f000 80b7 	beq.w	8004642 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	099b      	lsrs	r3, r3, #6
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00f      	beq.n	8004500 <HAL_I2C_EV_IRQHandler+0x18c>
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	0a9b      	lsrs	r3, r3, #10
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d009      	beq.n	8004500 <HAL_I2C_EV_IRQHandler+0x18c>
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	089b      	lsrs	r3, r3, #2
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d103      	bne.n	8004500 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 fb46 	bl	8004b8a <I2C_MasterReceive_RXNE>
 80044fe:	e011      	b.n	8004524 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	089b      	lsrs	r3, r3, #2
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 809a 	beq.w	8004642 <HAL_I2C_EV_IRQHandler+0x2ce>
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	0a5b      	lsrs	r3, r3, #9
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 8093 	beq.w	8004642 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 fbe5 	bl	8004cec <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004522:	e08e      	b.n	8004642 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004524:	e08d      	b.n	8004642 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	2b00      	cmp	r3, #0
 800452c:	d004      	beq.n	8004538 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	61fb      	str	r3, [r7, #28]
 8004536:	e007      	b.n	8004548 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	085b      	lsrs	r3, r3, #1
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b00      	cmp	r3, #0
 8004552:	d012      	beq.n	800457a <HAL_I2C_EV_IRQHandler+0x206>
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	0a5b      	lsrs	r3, r3, #9
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00c      	beq.n	800457a <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004570:	69b9      	ldr	r1, [r7, #24]
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 ffa3 	bl	80054be <I2C_Slave_ADDR>
 8004578:	e066      	b.n	8004648 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	091b      	lsrs	r3, r3, #4
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d009      	beq.n	800459a <HAL_I2C_EV_IRQHandler+0x226>
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	0a5b      	lsrs	r3, r3, #9
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d003      	beq.n	800459a <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 ffd8 	bl	8005548 <I2C_Slave_STOPF>
 8004598:	e056      	b.n	8004648 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800459a:	7bbb      	ldrb	r3, [r7, #14]
 800459c:	2b21      	cmp	r3, #33	; 0x21
 800459e:	d002      	beq.n	80045a6 <HAL_I2C_EV_IRQHandler+0x232>
 80045a0:	7bbb      	ldrb	r3, [r7, #14]
 80045a2:	2b29      	cmp	r3, #41	; 0x29
 80045a4:	d125      	bne.n	80045f2 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	09db      	lsrs	r3, r3, #7
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00f      	beq.n	80045d2 <HAL_I2C_EV_IRQHandler+0x25e>
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	0a9b      	lsrs	r3, r3, #10
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d009      	beq.n	80045d2 <HAL_I2C_EV_IRQHandler+0x25e>
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	089b      	lsrs	r3, r3, #2
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d103      	bne.n	80045d2 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 feb9 	bl	8005342 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045d0:	e039      	b.n	8004646 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	089b      	lsrs	r3, r3, #2
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d033      	beq.n	8004646 <HAL_I2C_EV_IRQHandler+0x2d2>
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	0a5b      	lsrs	r3, r3, #9
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d02d      	beq.n	8004646 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 fee6 	bl	80053bc <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045f0:	e029      	b.n	8004646 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	099b      	lsrs	r3, r3, #6
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00f      	beq.n	800461e <HAL_I2C_EV_IRQHandler+0x2aa>
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	0a9b      	lsrs	r3, r3, #10
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d009      	beq.n	800461e <HAL_I2C_EV_IRQHandler+0x2aa>
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	089b      	lsrs	r3, r3, #2
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d103      	bne.n	800461e <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fef1 	bl	80053fe <I2C_SlaveReceive_RXNE>
 800461c:	e014      	b.n	8004648 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	089b      	lsrs	r3, r3, #2
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00e      	beq.n	8004648 <HAL_I2C_EV_IRQHandler+0x2d4>
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	0a5b      	lsrs	r3, r3, #9
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d008      	beq.n	8004648 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 ff1f 	bl	800547a <I2C_SlaveReceive_BTF>
 800463c:	e004      	b.n	8004648 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800463e:	bf00      	nop
 8004640:	e002      	b.n	8004648 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004642:	bf00      	nop
 8004644:	e000      	b.n	8004648 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004646:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004648:	3720      	adds	r7, #32
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b08a      	sub	sp, #40	; 0x28
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004666:	2300      	movs	r3, #0
 8004668:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004670:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	0a1b      	lsrs	r3, r3, #8
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00e      	beq.n	800469c <HAL_I2C_ER_IRQHandler+0x4e>
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	0a1b      	lsrs	r3, r3, #8
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d008      	beq.n	800469c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	f043 0301 	orr.w	r3, r3, #1
 8004690:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800469a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800469c:	6a3b      	ldr	r3, [r7, #32]
 800469e:	0a5b      	lsrs	r3, r3, #9
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00e      	beq.n	80046c6 <HAL_I2C_ER_IRQHandler+0x78>
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	0a1b      	lsrs	r3, r3, #8
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d008      	beq.n	80046c6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	f043 0302 	orr.w	r3, r3, #2
 80046ba:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80046c4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	0a9b      	lsrs	r3, r3, #10
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d03f      	beq.n	8004752 <HAL_I2C_ER_IRQHandler+0x104>
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	0a1b      	lsrs	r3, r3, #8
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d039      	beq.n	8004752 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80046de:	7efb      	ldrb	r3, [r7, #27]
 80046e0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80046f8:	7ebb      	ldrb	r3, [r7, #26]
 80046fa:	2b20      	cmp	r3, #32
 80046fc:	d112      	bne.n	8004724 <HAL_I2C_ER_IRQHandler+0xd6>
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10f      	bne.n	8004724 <HAL_I2C_ER_IRQHandler+0xd6>
 8004704:	7cfb      	ldrb	r3, [r7, #19]
 8004706:	2b21      	cmp	r3, #33	; 0x21
 8004708:	d008      	beq.n	800471c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800470a:	7cfb      	ldrb	r3, [r7, #19]
 800470c:	2b29      	cmp	r3, #41	; 0x29
 800470e:	d005      	beq.n	800471c <HAL_I2C_ER_IRQHandler+0xce>
 8004710:	7cfb      	ldrb	r3, [r7, #19]
 8004712:	2b28      	cmp	r3, #40	; 0x28
 8004714:	d106      	bne.n	8004724 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2b21      	cmp	r3, #33	; 0x21
 800471a:	d103      	bne.n	8004724 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f001 f843 	bl	80057a8 <I2C_Slave_AF>
 8004722:	e016      	b.n	8004752 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800472c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004730:	f043 0304 	orr.w	r3, r3, #4
 8004734:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004736:	7efb      	ldrb	r3, [r7, #27]
 8004738:	2b10      	cmp	r3, #16
 800473a:	d002      	beq.n	8004742 <HAL_I2C_ER_IRQHandler+0xf4>
 800473c:	7efb      	ldrb	r3, [r7, #27]
 800473e:	2b40      	cmp	r3, #64	; 0x40
 8004740:	d107      	bne.n	8004752 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004750:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	0adb      	lsrs	r3, r3, #11
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00e      	beq.n	800477c <HAL_I2C_ER_IRQHandler+0x12e>
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	0a1b      	lsrs	r3, r3, #8
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d008      	beq.n	800477c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	f043 0308 	orr.w	r3, r3, #8
 8004770:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800477a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	2b00      	cmp	r3, #0
 8004780:	d008      	beq.n	8004794 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	431a      	orrs	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f001 f87a 	bl	8005888 <I2C_ITError>
  }
}
 8004794:	bf00      	nop
 8004796:	3728      	adds	r7, #40	; 0x28
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	460b      	mov	r3, r1
 80047ce:	70fb      	strb	r3, [r7, #3]
 80047d0:	4613      	mov	r3, r2
 80047d2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800483e:	b2db      	uxtb	r3, r3
}
 8004840:	4618      	mov	r0, r3
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004858:	4618      	mov	r0, r3
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004872:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800487a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004886:	2b00      	cmp	r3, #0
 8004888:	d150      	bne.n	800492c <I2C_MasterTransmit_TXE+0xc8>
 800488a:	7bfb      	ldrb	r3, [r7, #15]
 800488c:	2b21      	cmp	r3, #33	; 0x21
 800488e:	d14d      	bne.n	800492c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2b08      	cmp	r3, #8
 8004894:	d01d      	beq.n	80048d2 <I2C_MasterTransmit_TXE+0x6e>
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	2b20      	cmp	r3, #32
 800489a:	d01a      	beq.n	80048d2 <I2C_MasterTransmit_TXE+0x6e>
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048a2:	d016      	beq.n	80048d2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048b2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2211      	movs	r2, #17
 80048b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2220      	movs	r2, #32
 80048c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7fc f904 	bl	8000ad8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80048d0:	e060      	b.n	8004994 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048e0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048f0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b40      	cmp	r3, #64	; 0x40
 800490a:	d107      	bne.n	800491c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f7ff ff6d 	bl	80047f4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800491a:	e03b      	b.n	8004994 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7fc f8d7 	bl	8000ad8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800492a:	e033      	b.n	8004994 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800492c:	7bfb      	ldrb	r3, [r7, #15]
 800492e:	2b21      	cmp	r3, #33	; 0x21
 8004930:	d005      	beq.n	800493e <I2C_MasterTransmit_TXE+0xda>
 8004932:	7bbb      	ldrb	r3, [r7, #14]
 8004934:	2b40      	cmp	r3, #64	; 0x40
 8004936:	d12d      	bne.n	8004994 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004938:	7bfb      	ldrb	r3, [r7, #15]
 800493a:	2b22      	cmp	r3, #34	; 0x22
 800493c:	d12a      	bne.n	8004994 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004942:	b29b      	uxth	r3, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	d108      	bne.n	800495a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004956:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004958:	e01c      	b.n	8004994 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b40      	cmp	r3, #64	; 0x40
 8004964:	d103      	bne.n	800496e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f880 	bl	8004a6c <I2C_MemoryTransmit_TXE_BTF>
}
 800496c:	e012      	b.n	8004994 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	781a      	ldrb	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497e:	1c5a      	adds	r2, r3, #1
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004988:	b29b      	uxth	r3, r3
 800498a:	3b01      	subs	r3, #1
 800498c:	b29a      	uxth	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004992:	e7ff      	b.n	8004994 <I2C_MasterTransmit_TXE+0x130>
 8004994:	bf00      	nop
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b21      	cmp	r3, #33	; 0x21
 80049b4:	d156      	bne.n	8004a64 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d012      	beq.n	80049e6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	781a      	ldrb	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	1c5a      	adds	r2, r3, #1
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049da:	b29b      	uxth	r3, r3
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80049e4:	e03e      	b.n	8004a64 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	d01d      	beq.n	8004a28 <I2C_MasterTransmit_BTF+0x8c>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2b20      	cmp	r3, #32
 80049f0:	d01a      	beq.n	8004a28 <I2C_MasterTransmit_BTF+0x8c>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049f8:	d016      	beq.n	8004a28 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	685a      	ldr	r2, [r3, #4]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a08:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2211      	movs	r2, #17
 8004a0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7fc f859 	bl	8000ad8 <HAL_I2C_MasterTxCpltCallback>
}
 8004a26:	e01d      	b.n	8004a64 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a36:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a46:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2220      	movs	r2, #32
 8004a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7fc f83a 	bl	8000ad8 <HAL_I2C_MasterTxCpltCallback>
}
 8004a64:	bf00      	nop
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a7a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d11d      	bne.n	8004ac0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d10b      	bne.n	8004aa4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a9c:	1c9a      	adds	r2, r3, #2
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004aa2:	e06e      	b.n	8004b82 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	121b      	asrs	r3, r3, #8
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab8:	1c5a      	adds	r2, r3, #1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004abe:	e060      	b.n	8004b82 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d10b      	bne.n	8004ae0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad8:	1c5a      	adds	r2, r3, #1
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ade:	e050      	b.n	8004b82 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d14c      	bne.n	8004b82 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
 8004aea:	2b22      	cmp	r3, #34	; 0x22
 8004aec:	d108      	bne.n	8004b00 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004afc:	601a      	str	r2, [r3, #0]
}
 8004afe:	e040      	b.n	8004b82 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d015      	beq.n	8004b36 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8004b0a:	7bfb      	ldrb	r3, [r7, #15]
 8004b0c:	2b21      	cmp	r3, #33	; 0x21
 8004b0e:	d112      	bne.n	8004b36 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	781a      	ldrb	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	1c5a      	adds	r2, r3, #1
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b34:	e025      	b.n	8004b82 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d120      	bne.n	8004b82 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8004b40:	7bfb      	ldrb	r3, [r7, #15]
 8004b42:	2b21      	cmp	r3, #33	; 0x21
 8004b44:	d11d      	bne.n	8004b82 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b54:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b64:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f7ff fe39 	bl	80047f4 <HAL_I2C_MemTxCpltCallback>
}
 8004b82:	bf00      	nop
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b084      	sub	sp, #16
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b22      	cmp	r3, #34	; 0x22
 8004b9c:	f040 80a2 	bne.w	8004ce4 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2b03      	cmp	r3, #3
 8004bac:	d921      	bls.n	8004bf2 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	691a      	ldr	r2, [r3, #16]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb8:	b2d2      	uxtb	r2, r2
 8004bba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	1c5a      	adds	r2, r3, #1
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	2b03      	cmp	r3, #3
 8004bdc:	f040 8082 	bne.w	8004ce4 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bee:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004bf0:	e078      	b.n	8004ce4 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d074      	beq.n	8004ce4 <I2C_MasterReceive_RXNE+0x15a>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d002      	beq.n	8004c06 <I2C_MasterReceive_RXNE+0x7c>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d16e      	bne.n	8004ce4 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f001 f818 	bl	8005c3c <I2C_WaitOnSTOPRequestThroughIT>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d142      	bne.n	8004c98 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c20:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c30:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	691a      	ldr	r2, [r3, #16]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3c:	b2d2      	uxtb	r2, r2
 8004c3e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c44:	1c5a      	adds	r2, r3, #1
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b40      	cmp	r3, #64	; 0x40
 8004c6a:	d10a      	bne.n	8004c82 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7ff fdc4 	bl	8004808 <HAL_I2C_MemRxCpltCallback>
}
 8004c80:	e030      	b.n	8004ce4 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2212      	movs	r2, #18
 8004c8e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7fb ff31 	bl	8000af8 <HAL_I2C_MasterRxCpltCallback>
}
 8004c96:	e025      	b.n	8004ce4 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ca6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	691a      	ldr	r2, [r3, #16]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	b2d2      	uxtb	r2, r2
 8004cb4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7fb ff1a 	bl	8000b18 <HAL_I2C_ErrorCallback>
}
 8004ce4:	bf00      	nop
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	2b04      	cmp	r3, #4
 8004d02:	d11b      	bne.n	8004d3c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d12:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	691a      	ldr	r2, [r3, #16]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	1c5a      	adds	r2, r3, #1
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	3b01      	subs	r3, #1
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004d3a:	e0bd      	b.n	8004eb8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	2b03      	cmp	r3, #3
 8004d44:	d129      	bne.n	8004d9a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d54:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2b04      	cmp	r3, #4
 8004d5a:	d00a      	beq.n	8004d72 <I2C_MasterReceive_BTF+0x86>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d007      	beq.n	8004d72 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d70:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	691a      	ldr	r2, [r3, #16]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	b2d2      	uxtb	r2, r2
 8004d7e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d98:	e08e      	b.n	8004eb8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d176      	bne.n	8004e92 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d002      	beq.n	8004db0 <I2C_MasterReceive_BTF+0xc4>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2b10      	cmp	r3, #16
 8004dae:	d108      	bne.n	8004dc2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	e019      	b.n	8004df6 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2b04      	cmp	r3, #4
 8004dc6:	d002      	beq.n	8004dce <I2C_MasterReceive_BTF+0xe2>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d108      	bne.n	8004de0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	e00a      	b.n	8004df6 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2b10      	cmp	r3, #16
 8004de4:	d007      	beq.n	8004df6 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004df4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	691a      	ldr	r2, [r3, #16]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	b2d2      	uxtb	r2, r2
 8004e02:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	1c5a      	adds	r2, r3, #1
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	691a      	ldr	r2, [r3, #16]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	b2d2      	uxtb	r2, r2
 8004e28:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	1c5a      	adds	r2, r3, #1
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004e50:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b40      	cmp	r3, #64	; 0x40
 8004e64:	d10a      	bne.n	8004e7c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f7ff fcc7 	bl	8004808 <HAL_I2C_MemRxCpltCallback>
}
 8004e7a:	e01d      	b.n	8004eb8 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2212      	movs	r2, #18
 8004e88:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7fb fe34 	bl	8000af8 <HAL_I2C_MasterRxCpltCallback>
}
 8004e90:	e012      	b.n	8004eb8 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	691a      	ldr	r2, [r3, #16]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	b2d2      	uxtb	r2, r2
 8004e9e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004eb8:	bf00      	nop
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b40      	cmp	r3, #64	; 0x40
 8004ed2:	d117      	bne.n	8004f04 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d109      	bne.n	8004ef0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004eec:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004eee:	e067      	b.n	8004fc0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	f043 0301 	orr.w	r3, r3, #1
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	611a      	str	r2, [r3, #16]
}
 8004f02:	e05d      	b.n	8004fc0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f0c:	d133      	bne.n	8004f76 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b21      	cmp	r3, #33	; 0x21
 8004f18:	d109      	bne.n	8004f2e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	461a      	mov	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f2a:	611a      	str	r2, [r3, #16]
 8004f2c:	e008      	b.n	8004f40 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	f043 0301 	orr.w	r3, r3, #1
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d004      	beq.n	8004f52 <I2C_Master_SB+0x92>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d108      	bne.n	8004f64 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d032      	beq.n	8004fc0 <I2C_Master_SB+0x100>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d02d      	beq.n	8004fc0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f72:	605a      	str	r2, [r3, #4]
}
 8004f74:	e024      	b.n	8004fc0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10e      	bne.n	8004f9c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	11db      	asrs	r3, r3, #7
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	f003 0306 	and.w	r3, r3, #6
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	f063 030f 	orn	r3, r3, #15
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	611a      	str	r2, [r3, #16]
}
 8004f9a:	e011      	b.n	8004fc0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d10d      	bne.n	8004fc0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	11db      	asrs	r3, r3, #7
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	f003 0306 	and.w	r3, r3, #6
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	f063 030e 	orn	r3, r3, #14
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	611a      	str	r2, [r3, #16]
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd8:	b2da      	uxtb	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d004      	beq.n	8004ff2 <I2C_Master_ADD10+0x26>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d108      	bne.n	8005004 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00c      	beq.n	8005014 <I2C_Master_ADD10+0x48>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005000:	2b00      	cmp	r3, #0
 8005002:	d007      	beq.n	8005014 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005012:	605a      	str	r2, [r3, #4]
  }
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005020:	b480      	push	{r7}
 8005022:	b091      	sub	sp, #68	; 0x44
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800502e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005036:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b22      	cmp	r3, #34	; 0x22
 8005048:	f040 8169 	bne.w	800531e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10f      	bne.n	8005074 <I2C_Master_ADDR+0x54>
 8005054:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005058:	2b40      	cmp	r3, #64	; 0x40
 800505a:	d10b      	bne.n	8005074 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800505c:	2300      	movs	r3, #0
 800505e:	633b      	str	r3, [r7, #48]	; 0x30
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	633b      	str	r3, [r7, #48]	; 0x30
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	633b      	str	r3, [r7, #48]	; 0x30
 8005070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005072:	e160      	b.n	8005336 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005078:	2b00      	cmp	r3, #0
 800507a:	d11d      	bne.n	80050b8 <I2C_Master_ADDR+0x98>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005084:	d118      	bne.n	80050b8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005086:	2300      	movs	r3, #0
 8005088:	62fb      	str	r3, [r7, #44]	; 0x2c
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	62fb      	str	r3, [r7, #44]	; 0x2c
 800509a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050aa:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	651a      	str	r2, [r3, #80]	; 0x50
 80050b6:	e13e      	b.n	8005336 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050bc:	b29b      	uxth	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d113      	bne.n	80050ea <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050c2:	2300      	movs	r3, #0
 80050c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80050d6:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	e115      	b.n	8005316 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	f040 808a 	bne.w	800520a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80050f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050fc:	d137      	bne.n	800516e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800510c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005118:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800511c:	d113      	bne.n	8005146 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800512c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800512e:	2300      	movs	r3, #0
 8005130:	627b      	str	r3, [r7, #36]	; 0x24
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	627b      	str	r3, [r7, #36]	; 0x24
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	627b      	str	r3, [r7, #36]	; 0x24
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	e0e7      	b.n	8005316 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005146:	2300      	movs	r3, #0
 8005148:	623b      	str	r3, [r7, #32]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	623b      	str	r3, [r7, #32]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	623b      	str	r3, [r7, #32]
 800515a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800516a:	601a      	str	r2, [r3, #0]
 800516c:	e0d3      	b.n	8005316 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800516e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005170:	2b08      	cmp	r3, #8
 8005172:	d02e      	beq.n	80051d2 <I2C_Master_ADDR+0x1b2>
 8005174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005176:	2b20      	cmp	r3, #32
 8005178:	d02b      	beq.n	80051d2 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800517a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800517c:	2b12      	cmp	r3, #18
 800517e:	d102      	bne.n	8005186 <I2C_Master_ADDR+0x166>
 8005180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005182:	2b01      	cmp	r3, #1
 8005184:	d125      	bne.n	80051d2 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005188:	2b04      	cmp	r3, #4
 800518a:	d00e      	beq.n	80051aa <I2C_Master_ADDR+0x18a>
 800518c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518e:	2b02      	cmp	r3, #2
 8005190:	d00b      	beq.n	80051aa <I2C_Master_ADDR+0x18a>
 8005192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005194:	2b10      	cmp	r3, #16
 8005196:	d008      	beq.n	80051aa <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	e007      	b.n	80051ba <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051b8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ba:	2300      	movs	r3, #0
 80051bc:	61fb      	str	r3, [r7, #28]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	61fb      	str	r3, [r7, #28]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	61fb      	str	r3, [r7, #28]
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	e0a1      	b.n	8005316 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051e0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051e2:	2300      	movs	r3, #0
 80051e4:	61bb      	str	r3, [r7, #24]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	61bb      	str	r3, [r7, #24]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	61bb      	str	r3, [r7, #24]
 80051f6:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005206:	601a      	str	r2, [r3, #0]
 8005208:	e085      	b.n	8005316 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520e:	b29b      	uxth	r3, r3
 8005210:	2b02      	cmp	r3, #2
 8005212:	d14d      	bne.n	80052b0 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005216:	2b04      	cmp	r3, #4
 8005218:	d016      	beq.n	8005248 <I2C_Master_ADDR+0x228>
 800521a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521c:	2b02      	cmp	r3, #2
 800521e:	d013      	beq.n	8005248 <I2C_Master_ADDR+0x228>
 8005220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005222:	2b10      	cmp	r3, #16
 8005224:	d010      	beq.n	8005248 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005234:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	e007      	b.n	8005258 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005256:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005262:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005266:	d117      	bne.n	8005298 <I2C_Master_ADDR+0x278>
 8005268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800526e:	d00b      	beq.n	8005288 <I2C_Master_ADDR+0x268>
 8005270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005272:	2b01      	cmp	r3, #1
 8005274:	d008      	beq.n	8005288 <I2C_Master_ADDR+0x268>
 8005276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005278:	2b08      	cmp	r3, #8
 800527a:	d005      	beq.n	8005288 <I2C_Master_ADDR+0x268>
 800527c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527e:	2b10      	cmp	r3, #16
 8005280:	d002      	beq.n	8005288 <I2C_Master_ADDR+0x268>
 8005282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005284:	2b20      	cmp	r3, #32
 8005286:	d107      	bne.n	8005298 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005296:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005298:	2300      	movs	r3, #0
 800529a:	617b      	str	r3, [r7, #20]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	617b      	str	r3, [r7, #20]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	617b      	str	r3, [r7, #20]
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	e032      	b.n	8005316 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052be:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ce:	d117      	bne.n	8005300 <I2C_Master_ADDR+0x2e0>
 80052d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052d6:	d00b      	beq.n	80052f0 <I2C_Master_ADDR+0x2d0>
 80052d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d008      	beq.n	80052f0 <I2C_Master_ADDR+0x2d0>
 80052de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d005      	beq.n	80052f0 <I2C_Master_ADDR+0x2d0>
 80052e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e6:	2b10      	cmp	r3, #16
 80052e8:	d002      	beq.n	80052f0 <I2C_Master_ADDR+0x2d0>
 80052ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ec:	2b20      	cmp	r3, #32
 80052ee:	d107      	bne.n	8005300 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052fe:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005300:	2300      	movs	r3, #0
 8005302:	613b      	str	r3, [r7, #16]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	613b      	str	r3, [r7, #16]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	613b      	str	r3, [r7, #16]
 8005314:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800531c:	e00b      	b.n	8005336 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800531e:	2300      	movs	r3, #0
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	60fb      	str	r3, [r7, #12]
 8005332:	68fb      	ldr	r3, [r7, #12]
}
 8005334:	e7ff      	b.n	8005336 <I2C_Master_ADDR+0x316>
 8005336:	bf00      	nop
 8005338:	3744      	adds	r7, #68	; 0x44
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b084      	sub	sp, #16
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005350:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005356:	b29b      	uxth	r3, r3
 8005358:	2b00      	cmp	r3, #0
 800535a:	d02b      	beq.n	80053b4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	781a      	ldrb	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005376:	b29b      	uxth	r3, r3
 8005378:	3b01      	subs	r3, #1
 800537a:	b29a      	uxth	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005384:	b29b      	uxth	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d114      	bne.n	80053b4 <I2C_SlaveTransmit_TXE+0x72>
 800538a:	7bfb      	ldrb	r3, [r7, #15]
 800538c:	2b29      	cmp	r3, #41	; 0x29
 800538e:	d111      	bne.n	80053b4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800539e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2221      	movs	r2, #33	; 0x21
 80053a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2228      	movs	r2, #40	; 0x28
 80053aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7ff f9f4 	bl	800479c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80053b4:	bf00      	nop
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d011      	beq.n	80053f2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d2:	781a      	ldrb	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053de:	1c5a      	adds	r2, r3, #1
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	3b01      	subs	r3, #1
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80053f2:	bf00      	nop
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b084      	sub	sp, #16
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800540c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005412:	b29b      	uxth	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	d02c      	beq.n	8005472 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	691a      	ldr	r2, [r3, #16]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542a:	1c5a      	adds	r2, r3, #1
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005434:	b29b      	uxth	r3, r3
 8005436:	3b01      	subs	r3, #1
 8005438:	b29a      	uxth	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005442:	b29b      	uxth	r3, r3
 8005444:	2b00      	cmp	r3, #0
 8005446:	d114      	bne.n	8005472 <I2C_SlaveReceive_RXNE+0x74>
 8005448:	7bfb      	ldrb	r3, [r7, #15]
 800544a:	2b2a      	cmp	r3, #42	; 0x2a
 800544c:	d111      	bne.n	8005472 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800545c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2222      	movs	r2, #34	; 0x22
 8005462:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2228      	movs	r2, #40	; 0x28
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f7ff f99f 	bl	80047b0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005472:	bf00      	nop
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005486:	b29b      	uxth	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	d012      	beq.n	80054b2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691a      	ldr	r2, [r3, #16]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	b2d2      	uxtb	r2, r2
 8005498:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549e:	1c5a      	adds	r2, r3, #1
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	3b01      	subs	r3, #1
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80054b2:	bf00      	nop
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b084      	sub	sp, #16
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
 80054c6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80054c8:	2300      	movs	r3, #0
 80054ca:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80054d8:	2b28      	cmp	r3, #40	; 0x28
 80054da:	d127      	bne.n	800552c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ea:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	089b      	lsrs	r3, r3, #2
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80054f8:	2301      	movs	r3, #1
 80054fa:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	09db      	lsrs	r3, r3, #7
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b00      	cmp	r3, #0
 8005506:	d103      	bne.n	8005510 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	81bb      	strh	r3, [r7, #12]
 800550e:	e002      	b.n	8005516 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800551e:	89ba      	ldrh	r2, [r7, #12]
 8005520:	7bfb      	ldrb	r3, [r7, #15]
 8005522:	4619      	mov	r1, r3
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7ff f94d 	bl	80047c4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800552a:	e008      	b.n	800553e <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f06f 0202 	mvn.w	r2, #2
 8005534:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800553e:	bf00      	nop
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
	...

08005548 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005556:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005566:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005568:	2300      	movs	r3, #0
 800556a:	60bb      	str	r3, [r7, #8]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	60bb      	str	r3, [r7, #8]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f042 0201 	orr.w	r2, r2, #1
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005594:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055a4:	d172      	bne.n	800568c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80055a6:	7bfb      	ldrb	r3, [r7, #15]
 80055a8:	2b22      	cmp	r3, #34	; 0x22
 80055aa:	d002      	beq.n	80055b2 <I2C_Slave_STOPF+0x6a>
 80055ac:	7bfb      	ldrb	r3, [r7, #15]
 80055ae:	2b2a      	cmp	r3, #42	; 0x2a
 80055b0:	d135      	bne.n	800561e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d005      	beq.n	80055d6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ce:	f043 0204 	orr.w	r2, r3, #4
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055e4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fe f974 	bl	80038d8 <HAL_DMA_GetState>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d049      	beq.n	800568a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fa:	4a69      	ldr	r2, [pc, #420]	; (80057a0 <I2C_Slave_STOPF+0x258>)
 80055fc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005602:	4618      	mov	r0, r3
 8005604:	f7fd ffbc 	bl	8003580 <HAL_DMA_Abort_IT>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d03d      	beq.n	800568a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005618:	4610      	mov	r0, r2
 800561a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800561c:	e035      	b.n	800568a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	b29a      	uxth	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005630:	b29b      	uxth	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d005      	beq.n	8005642 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	f043 0204 	orr.w	r2, r3, #4
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685a      	ldr	r2, [r3, #4]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005650:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005656:	4618      	mov	r0, r3
 8005658:	f7fe f93e 	bl	80038d8 <HAL_DMA_GetState>
 800565c:	4603      	mov	r3, r0
 800565e:	2b01      	cmp	r3, #1
 8005660:	d014      	beq.n	800568c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005666:	4a4e      	ldr	r2, [pc, #312]	; (80057a0 <I2C_Slave_STOPF+0x258>)
 8005668:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800566e:	4618      	mov	r0, r3
 8005670:	f7fd ff86 	bl	8003580 <HAL_DMA_Abort_IT>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d008      	beq.n	800568c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005684:	4610      	mov	r0, r2
 8005686:	4798      	blx	r3
 8005688:	e000      	b.n	800568c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800568a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005690:	b29b      	uxth	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d03e      	beq.n	8005714 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	f003 0304 	and.w	r3, r3, #4
 80056a0:	2b04      	cmp	r3, #4
 80056a2:	d112      	bne.n	80056ca <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	691a      	ldr	r2, [r3, #16]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	b2d2      	uxtb	r2, r2
 80056b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b6:	1c5a      	adds	r2, r3, #1
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	3b01      	subs	r3, #1
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d4:	2b40      	cmp	r3, #64	; 0x40
 80056d6:	d112      	bne.n	80056fe <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	691a      	ldr	r2, [r3, #16]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	b2d2      	uxtb	r2, r2
 80056e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	1c5a      	adds	r2, r3, #1
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	3b01      	subs	r3, #1
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005702:	b29b      	uxth	r3, r3
 8005704:	2b00      	cmp	r3, #0
 8005706:	d005      	beq.n	8005714 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570c:	f043 0204 	orr.w	r2, r3, #4
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 f8b3 	bl	8005888 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005722:	e039      	b.n	8005798 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005724:	7bfb      	ldrb	r3, [r7, #15]
 8005726:	2b2a      	cmp	r3, #42	; 0x2a
 8005728:	d109      	bne.n	800573e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2228      	movs	r2, #40	; 0x28
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f7ff f839 	bl	80047b0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b28      	cmp	r3, #40	; 0x28
 8005748:	d111      	bne.n	800576e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a15      	ldr	r2, [pc, #84]	; (80057a4 <I2C_Slave_STOPF+0x25c>)
 800574e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2220      	movs	r2, #32
 800575a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7ff f83a 	bl	80047e0 <HAL_I2C_ListenCpltCallback>
}
 800576c:	e014      	b.n	8005798 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005772:	2b22      	cmp	r3, #34	; 0x22
 8005774:	d002      	beq.n	800577c <I2C_Slave_STOPF+0x234>
 8005776:	7bfb      	ldrb	r3, [r7, #15]
 8005778:	2b22      	cmp	r3, #34	; 0x22
 800577a:	d10d      	bne.n	8005798 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2220      	movs	r2, #32
 8005786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7ff f80c 	bl	80047b0 <HAL_I2C_SlaveRxCpltCallback>
}
 8005798:	bf00      	nop
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	08005aed 	.word	0x08005aed
 80057a4:	ffff0000 	.word	0xffff0000

080057a8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057bc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d002      	beq.n	80057ca <I2C_Slave_AF+0x22>
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	2b20      	cmp	r3, #32
 80057c8:	d129      	bne.n	800581e <I2C_Slave_AF+0x76>
 80057ca:	7bfb      	ldrb	r3, [r7, #15]
 80057cc:	2b28      	cmp	r3, #40	; 0x28
 80057ce:	d126      	bne.n	800581e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a2c      	ldr	r2, [pc, #176]	; (8005884 <I2C_Slave_AF+0xdc>)
 80057d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057e4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057ee:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057fe:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2220      	movs	r2, #32
 800580a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7fe ffe2 	bl	80047e0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800581c:	e02e      	b.n	800587c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800581e:	7bfb      	ldrb	r3, [r7, #15]
 8005820:	2b21      	cmp	r3, #33	; 0x21
 8005822:	d126      	bne.n	8005872 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a17      	ldr	r2, [pc, #92]	; (8005884 <I2C_Slave_AF+0xdc>)
 8005828:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2221      	movs	r2, #33	; 0x21
 800582e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2220      	movs	r2, #32
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800584e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005858:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005868:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7fe ff96 	bl	800479c <HAL_I2C_SlaveTxCpltCallback>
}
 8005870:	e004      	b.n	800587c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800587a:	615a      	str	r2, [r3, #20]
}
 800587c:	bf00      	nop
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	ffff0000 	.word	0xffff0000

08005888 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005896:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800589e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80058a0:	7bbb      	ldrb	r3, [r7, #14]
 80058a2:	2b10      	cmp	r3, #16
 80058a4:	d002      	beq.n	80058ac <I2C_ITError+0x24>
 80058a6:	7bbb      	ldrb	r3, [r7, #14]
 80058a8:	2b40      	cmp	r3, #64	; 0x40
 80058aa:	d10a      	bne.n	80058c2 <I2C_ITError+0x3a>
 80058ac:	7bfb      	ldrb	r3, [r7, #15]
 80058ae:	2b22      	cmp	r3, #34	; 0x22
 80058b0:	d107      	bne.n	80058c2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058c0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80058c2:	7bfb      	ldrb	r3, [r7, #15]
 80058c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80058c8:	2b28      	cmp	r3, #40	; 0x28
 80058ca:	d107      	bne.n	80058dc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2228      	movs	r2, #40	; 0x28
 80058d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80058da:	e015      	b.n	8005908 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058ea:	d00a      	beq.n	8005902 <I2C_ITError+0x7a>
 80058ec:	7bfb      	ldrb	r3, [r7, #15]
 80058ee:	2b60      	cmp	r3, #96	; 0x60
 80058f0:	d007      	beq.n	8005902 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2220      	movs	r2, #32
 80058f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005912:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005916:	d162      	bne.n	80059de <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005926:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800592c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b01      	cmp	r3, #1
 8005934:	d020      	beq.n	8005978 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593a:	4a6a      	ldr	r2, [pc, #424]	; (8005ae4 <I2C_ITError+0x25c>)
 800593c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005942:	4618      	mov	r0, r3
 8005944:	f7fd fe1c 	bl	8003580 <HAL_DMA_Abort_IT>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 8089 	beq.w	8005a62 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 0201 	bic.w	r2, r2, #1
 800595e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2220      	movs	r2, #32
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800596c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005972:	4610      	mov	r0, r2
 8005974:	4798      	blx	r3
 8005976:	e074      	b.n	8005a62 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597c:	4a59      	ldr	r2, [pc, #356]	; (8005ae4 <I2C_ITError+0x25c>)
 800597e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005984:	4618      	mov	r0, r3
 8005986:	f7fd fdfb 	bl	8003580 <HAL_DMA_Abort_IT>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d068      	beq.n	8005a62 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599a:	2b40      	cmp	r3, #64	; 0x40
 800599c:	d10b      	bne.n	80059b6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	691a      	ldr	r2, [r3, #16]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a8:	b2d2      	uxtb	r2, r2
 80059aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b0:	1c5a      	adds	r2, r3, #1
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 0201 	bic.w	r2, r2, #1
 80059c4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2220      	movs	r2, #32
 80059ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80059d8:	4610      	mov	r0, r2
 80059da:	4798      	blx	r3
 80059dc:	e041      	b.n	8005a62 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b60      	cmp	r3, #96	; 0x60
 80059e8:	d125      	bne.n	8005a36 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2220      	movs	r2, #32
 80059ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a02:	2b40      	cmp	r3, #64	; 0x40
 8005a04:	d10b      	bne.n	8005a1e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	691a      	ldr	r2, [r3, #16]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a10:	b2d2      	uxtb	r2, r2
 8005a12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a18:	1c5a      	adds	r2, r3, #1
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f022 0201 	bic.w	r2, r2, #1
 8005a2c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f7fe fef4 	bl	800481c <HAL_I2C_AbortCpltCallback>
 8005a34:	e015      	b.n	8005a62 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a40:	2b40      	cmp	r3, #64	; 0x40
 8005a42:	d10b      	bne.n	8005a5c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	691a      	ldr	r2, [r3, #16]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4e:	b2d2      	uxtb	r2, r2
 8005a50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a56:	1c5a      	adds	r2, r3, #1
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f7fb f85b 	bl	8000b18 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a66:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10e      	bne.n	8005a90 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d109      	bne.n	8005a90 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d104      	bne.n	8005a90 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d007      	beq.n	8005aa0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a9e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aac:	f003 0304 	and.w	r3, r3, #4
 8005ab0:	2b04      	cmp	r3, #4
 8005ab2:	d113      	bne.n	8005adc <I2C_ITError+0x254>
 8005ab4:	7bfb      	ldrb	r3, [r7, #15]
 8005ab6:	2b28      	cmp	r3, #40	; 0x28
 8005ab8:	d110      	bne.n	8005adc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a0a      	ldr	r2, [pc, #40]	; (8005ae8 <I2C_ITError+0x260>)
 8005abe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7fe fe82 	bl	80047e0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005adc:	bf00      	nop
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	08005aed 	.word	0x08005aed
 8005ae8:	ffff0000 	.word	0xffff0000

08005aec <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005af4:	2300      	movs	r3, #0
 8005af6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b04:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005b06:	4b4b      	ldr	r3, [pc, #300]	; (8005c34 <I2C_DMAAbort+0x148>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	08db      	lsrs	r3, r3, #3
 8005b0c:	4a4a      	ldr	r2, [pc, #296]	; (8005c38 <I2C_DMAAbort+0x14c>)
 8005b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b12:	0a1a      	lsrs	r2, r3, #8
 8005b14:	4613      	mov	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	00da      	lsls	r2, r3, #3
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d106      	bne.n	8005b34 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2a:	f043 0220 	orr.w	r2, r3, #32
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005b32:	e00a      	b.n	8005b4a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b48:	d0ea      	beq.n	8005b20 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b56:	2200      	movs	r2, #0
 8005b58:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b66:	2200      	movs	r2, #0
 8005b68:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b78:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d003      	beq.n	8005b90 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d003      	beq.n	8005ba0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f022 0201 	bic.w	r2, r2, #1
 8005bae:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b60      	cmp	r3, #96	; 0x60
 8005bba:	d10e      	bne.n	8005bda <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005bd2:	6978      	ldr	r0, [r7, #20]
 8005bd4:	f7fe fe22 	bl	800481c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005bd8:	e027      	b.n	8005c2a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005bda:	7cfb      	ldrb	r3, [r7, #19]
 8005bdc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005be0:	2b28      	cmp	r3, #40	; 0x28
 8005be2:	d117      	bne.n	8005c14 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f042 0201 	orr.w	r2, r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c02:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	2200      	movs	r2, #0
 8005c08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2228      	movs	r2, #40	; 0x28
 8005c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005c12:	e007      	b.n	8005c24 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	2220      	movs	r2, #32
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005c24:	6978      	ldr	r0, [r7, #20]
 8005c26:	f7fa ff77 	bl	8000b18 <HAL_I2C_ErrorCallback>
}
 8005c2a:	bf00      	nop
 8005c2c:	3718      	adds	r7, #24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	2000002c 	.word	0x2000002c
 8005c38:	14f8b589 	.word	0x14f8b589

08005c3c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c44:	2300      	movs	r3, #0
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005c48:	4b13      	ldr	r3, [pc, #76]	; (8005c98 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	08db      	lsrs	r3, r3, #3
 8005c4e:	4a13      	ldr	r2, [pc, #76]	; (8005c9c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005c50:	fba2 2303 	umull	r2, r3, r2, r3
 8005c54:	0a1a      	lsrs	r2, r3, #8
 8005c56:	4613      	mov	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4413      	add	r3, r2
 8005c5c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	3b01      	subs	r3, #1
 8005c62:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d107      	bne.n	8005c7a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	f043 0220 	orr.w	r2, r3, #32
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e008      	b.n	8005c8c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c88:	d0e9      	beq.n	8005c5e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3714      	adds	r7, #20
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	2000002c 	.word	0x2000002c
 8005c9c:	14f8b589 	.word	0x14f8b589

08005ca0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cac:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005cb0:	d103      	bne.n	8005cba <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005cb8:	e007      	b.n	8005cca <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbe:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005cc2:	d102      	bne.n	8005cca <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2208      	movs	r2, #8
 8005cc8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005cca:	bf00      	nop
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
	...

08005cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d101      	bne.n	8005cec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e0cc      	b.n	8005e86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005cec:	4b68      	ldr	r3, [pc, #416]	; (8005e90 <HAL_RCC_ClockConfig+0x1b8>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 030f 	and.w	r3, r3, #15
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d90c      	bls.n	8005d14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cfa:	4b65      	ldr	r3, [pc, #404]	; (8005e90 <HAL_RCC_ClockConfig+0x1b8>)
 8005cfc:	683a      	ldr	r2, [r7, #0]
 8005cfe:	b2d2      	uxtb	r2, r2
 8005d00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d02:	4b63      	ldr	r3, [pc, #396]	; (8005e90 <HAL_RCC_ClockConfig+0x1b8>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 030f 	and.w	r3, r3, #15
 8005d0a:	683a      	ldr	r2, [r7, #0]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d001      	beq.n	8005d14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e0b8      	b.n	8005e86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0302 	and.w	r3, r3, #2
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d020      	beq.n	8005d62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0304 	and.w	r3, r3, #4
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d005      	beq.n	8005d38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d2c:	4b59      	ldr	r3, [pc, #356]	; (8005e94 <HAL_RCC_ClockConfig+0x1bc>)
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	4a58      	ldr	r2, [pc, #352]	; (8005e94 <HAL_RCC_ClockConfig+0x1bc>)
 8005d32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0308 	and.w	r3, r3, #8
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d005      	beq.n	8005d50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d44:	4b53      	ldr	r3, [pc, #332]	; (8005e94 <HAL_RCC_ClockConfig+0x1bc>)
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	4a52      	ldr	r2, [pc, #328]	; (8005e94 <HAL_RCC_ClockConfig+0x1bc>)
 8005d4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d50:	4b50      	ldr	r3, [pc, #320]	; (8005e94 <HAL_RCC_ClockConfig+0x1bc>)
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	494d      	ldr	r1, [pc, #308]	; (8005e94 <HAL_RCC_ClockConfig+0x1bc>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0301 	and.w	r3, r3, #1
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d044      	beq.n	8005df8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d107      	bne.n	8005d86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d76:	4b47      	ldr	r3, [pc, #284]	; (8005e94 <HAL_RCC_ClockConfig+0x1bc>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d119      	bne.n	8005db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e07f      	b.n	8005e86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d003      	beq.n	8005d96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d92:	2b03      	cmp	r3, #3
 8005d94:	d107      	bne.n	8005da6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d96:	4b3f      	ldr	r3, [pc, #252]	; (8005e94 <HAL_RCC_ClockConfig+0x1bc>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d109      	bne.n	8005db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e06f      	b.n	8005e86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005da6:	4b3b      	ldr	r3, [pc, #236]	; (8005e94 <HAL_RCC_ClockConfig+0x1bc>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0302 	and.w	r3, r3, #2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e067      	b.n	8005e86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005db6:	4b37      	ldr	r3, [pc, #220]	; (8005e94 <HAL_RCC_ClockConfig+0x1bc>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f023 0203 	bic.w	r2, r3, #3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	4934      	ldr	r1, [pc, #208]	; (8005e94 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005dc8:	f7fd f922 	bl	8003010 <HAL_GetTick>
 8005dcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dce:	e00a      	b.n	8005de6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dd0:	f7fd f91e 	bl	8003010 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d901      	bls.n	8005de6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e04f      	b.n	8005e86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005de6:	4b2b      	ldr	r3, [pc, #172]	; (8005e94 <HAL_RCC_ClockConfig+0x1bc>)
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f003 020c 	and.w	r2, r3, #12
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d1eb      	bne.n	8005dd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005df8:	4b25      	ldr	r3, [pc, #148]	; (8005e90 <HAL_RCC_ClockConfig+0x1b8>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 030f 	and.w	r3, r3, #15
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d20c      	bcs.n	8005e20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e06:	4b22      	ldr	r3, [pc, #136]	; (8005e90 <HAL_RCC_ClockConfig+0x1b8>)
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	b2d2      	uxtb	r2, r2
 8005e0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e0e:	4b20      	ldr	r3, [pc, #128]	; (8005e90 <HAL_RCC_ClockConfig+0x1b8>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 030f 	and.w	r3, r3, #15
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d001      	beq.n	8005e20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e032      	b.n	8005e86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0304 	and.w	r3, r3, #4
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d008      	beq.n	8005e3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e2c:	4b19      	ldr	r3, [pc, #100]	; (8005e94 <HAL_RCC_ClockConfig+0x1bc>)
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	4916      	ldr	r1, [pc, #88]	; (8005e94 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0308 	and.w	r3, r3, #8
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d009      	beq.n	8005e5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e4a:	4b12      	ldr	r3, [pc, #72]	; (8005e94 <HAL_RCC_ClockConfig+0x1bc>)
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	00db      	lsls	r3, r3, #3
 8005e58:	490e      	ldr	r1, [pc, #56]	; (8005e94 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e5e:	f000 f855 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 8005e62:	4602      	mov	r2, r0
 8005e64:	4b0b      	ldr	r3, [pc, #44]	; (8005e94 <HAL_RCC_ClockConfig+0x1bc>)
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	091b      	lsrs	r3, r3, #4
 8005e6a:	f003 030f 	and.w	r3, r3, #15
 8005e6e:	490a      	ldr	r1, [pc, #40]	; (8005e98 <HAL_RCC_ClockConfig+0x1c0>)
 8005e70:	5ccb      	ldrb	r3, [r1, r3]
 8005e72:	fa22 f303 	lsr.w	r3, r2, r3
 8005e76:	4a09      	ldr	r2, [pc, #36]	; (8005e9c <HAL_RCC_ClockConfig+0x1c4>)
 8005e78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e7a:	4b09      	ldr	r3, [pc, #36]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fd f882 	bl	8002f88 <HAL_InitTick>

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	40023c00 	.word	0x40023c00
 8005e94:	40023800 	.word	0x40023800
 8005e98:	08008950 	.word	0x08008950
 8005e9c:	2000002c 	.word	0x2000002c
 8005ea0:	20000094 	.word	0x20000094

08005ea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ea8:	4b03      	ldr	r3, [pc, #12]	; (8005eb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	2000002c 	.word	0x2000002c

08005ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ec0:	f7ff fff0 	bl	8005ea4 <HAL_RCC_GetHCLKFreq>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	4b05      	ldr	r3, [pc, #20]	; (8005edc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	0a9b      	lsrs	r3, r3, #10
 8005ecc:	f003 0307 	and.w	r3, r3, #7
 8005ed0:	4903      	ldr	r1, [pc, #12]	; (8005ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ed2:	5ccb      	ldrb	r3, [r1, r3]
 8005ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	40023800 	.word	0x40023800
 8005ee0:	08008960 	.word	0x08008960

08005ee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ee8:	f7ff ffdc 	bl	8005ea4 <HAL_RCC_GetHCLKFreq>
 8005eec:	4602      	mov	r2, r0
 8005eee:	4b05      	ldr	r3, [pc, #20]	; (8005f04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	0b5b      	lsrs	r3, r3, #13
 8005ef4:	f003 0307 	and.w	r3, r3, #7
 8005ef8:	4903      	ldr	r1, [pc, #12]	; (8005f08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005efa:	5ccb      	ldrb	r3, [r1, r3]
 8005efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	40023800 	.word	0x40023800
 8005f08:	08008960 	.word	0x08008960

08005f0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f10:	b0ae      	sub	sp, #184	; 0xb8
 8005f12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005f14:	2300      	movs	r3, #0
 8005f16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005f20:	2300      	movs	r3, #0
 8005f22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8005f26:	2300      	movs	r3, #0
 8005f28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f32:	4bcb      	ldr	r3, [pc, #812]	; (8006260 <HAL_RCC_GetSysClockFreq+0x354>)
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f003 030c 	and.w	r3, r3, #12
 8005f3a:	2b0c      	cmp	r3, #12
 8005f3c:	f200 8206 	bhi.w	800634c <HAL_RCC_GetSysClockFreq+0x440>
 8005f40:	a201      	add	r2, pc, #4	; (adr r2, 8005f48 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f46:	bf00      	nop
 8005f48:	08005f7d 	.word	0x08005f7d
 8005f4c:	0800634d 	.word	0x0800634d
 8005f50:	0800634d 	.word	0x0800634d
 8005f54:	0800634d 	.word	0x0800634d
 8005f58:	08005f85 	.word	0x08005f85
 8005f5c:	0800634d 	.word	0x0800634d
 8005f60:	0800634d 	.word	0x0800634d
 8005f64:	0800634d 	.word	0x0800634d
 8005f68:	08005f8d 	.word	0x08005f8d
 8005f6c:	0800634d 	.word	0x0800634d
 8005f70:	0800634d 	.word	0x0800634d
 8005f74:	0800634d 	.word	0x0800634d
 8005f78:	0800617d 	.word	0x0800617d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f7c:	4bb9      	ldr	r3, [pc, #740]	; (8006264 <HAL_RCC_GetSysClockFreq+0x358>)
 8005f7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8005f82:	e1e7      	b.n	8006354 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f84:	4bb8      	ldr	r3, [pc, #736]	; (8006268 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005f86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005f8a:	e1e3      	b.n	8006354 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f8c:	4bb4      	ldr	r3, [pc, #720]	; (8006260 <HAL_RCC_GetSysClockFreq+0x354>)
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f98:	4bb1      	ldr	r3, [pc, #708]	; (8006260 <HAL_RCC_GetSysClockFreq+0x354>)
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d071      	beq.n	8006088 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fa4:	4bae      	ldr	r3, [pc, #696]	; (8006260 <HAL_RCC_GetSysClockFreq+0x354>)
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	099b      	lsrs	r3, r3, #6
 8005faa:	2200      	movs	r2, #0
 8005fac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005fb0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005fb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fbc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005fc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005fca:	4622      	mov	r2, r4
 8005fcc:	462b      	mov	r3, r5
 8005fce:	f04f 0000 	mov.w	r0, #0
 8005fd2:	f04f 0100 	mov.w	r1, #0
 8005fd6:	0159      	lsls	r1, r3, #5
 8005fd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fdc:	0150      	lsls	r0, r2, #5
 8005fde:	4602      	mov	r2, r0
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	4621      	mov	r1, r4
 8005fe4:	1a51      	subs	r1, r2, r1
 8005fe6:	6439      	str	r1, [r7, #64]	; 0x40
 8005fe8:	4629      	mov	r1, r5
 8005fea:	eb63 0301 	sbc.w	r3, r3, r1
 8005fee:	647b      	str	r3, [r7, #68]	; 0x44
 8005ff0:	f04f 0200 	mov.w	r2, #0
 8005ff4:	f04f 0300 	mov.w	r3, #0
 8005ff8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005ffc:	4649      	mov	r1, r9
 8005ffe:	018b      	lsls	r3, r1, #6
 8006000:	4641      	mov	r1, r8
 8006002:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006006:	4641      	mov	r1, r8
 8006008:	018a      	lsls	r2, r1, #6
 800600a:	4641      	mov	r1, r8
 800600c:	1a51      	subs	r1, r2, r1
 800600e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006010:	4649      	mov	r1, r9
 8006012:	eb63 0301 	sbc.w	r3, r3, r1
 8006016:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006018:	f04f 0200 	mov.w	r2, #0
 800601c:	f04f 0300 	mov.w	r3, #0
 8006020:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8006024:	4649      	mov	r1, r9
 8006026:	00cb      	lsls	r3, r1, #3
 8006028:	4641      	mov	r1, r8
 800602a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800602e:	4641      	mov	r1, r8
 8006030:	00ca      	lsls	r2, r1, #3
 8006032:	4610      	mov	r0, r2
 8006034:	4619      	mov	r1, r3
 8006036:	4603      	mov	r3, r0
 8006038:	4622      	mov	r2, r4
 800603a:	189b      	adds	r3, r3, r2
 800603c:	633b      	str	r3, [r7, #48]	; 0x30
 800603e:	462b      	mov	r3, r5
 8006040:	460a      	mov	r2, r1
 8006042:	eb42 0303 	adc.w	r3, r2, r3
 8006046:	637b      	str	r3, [r7, #52]	; 0x34
 8006048:	f04f 0200 	mov.w	r2, #0
 800604c:	f04f 0300 	mov.w	r3, #0
 8006050:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006054:	4629      	mov	r1, r5
 8006056:	024b      	lsls	r3, r1, #9
 8006058:	4621      	mov	r1, r4
 800605a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800605e:	4621      	mov	r1, r4
 8006060:	024a      	lsls	r2, r1, #9
 8006062:	4610      	mov	r0, r2
 8006064:	4619      	mov	r1, r3
 8006066:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800606a:	2200      	movs	r2, #0
 800606c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006070:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006074:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006078:	f7fa f8c4 	bl	8000204 <__aeabi_uldivmod>
 800607c:	4602      	mov	r2, r0
 800607e:	460b      	mov	r3, r1
 8006080:	4613      	mov	r3, r2
 8006082:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006086:	e067      	b.n	8006158 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006088:	4b75      	ldr	r3, [pc, #468]	; (8006260 <HAL_RCC_GetSysClockFreq+0x354>)
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	099b      	lsrs	r3, r3, #6
 800608e:	2200      	movs	r2, #0
 8006090:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006094:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006098:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800609c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80060a2:	2300      	movs	r3, #0
 80060a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80060a6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80060aa:	4622      	mov	r2, r4
 80060ac:	462b      	mov	r3, r5
 80060ae:	f04f 0000 	mov.w	r0, #0
 80060b2:	f04f 0100 	mov.w	r1, #0
 80060b6:	0159      	lsls	r1, r3, #5
 80060b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060bc:	0150      	lsls	r0, r2, #5
 80060be:	4602      	mov	r2, r0
 80060c0:	460b      	mov	r3, r1
 80060c2:	4621      	mov	r1, r4
 80060c4:	1a51      	subs	r1, r2, r1
 80060c6:	62b9      	str	r1, [r7, #40]	; 0x28
 80060c8:	4629      	mov	r1, r5
 80060ca:	eb63 0301 	sbc.w	r3, r3, r1
 80060ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060d0:	f04f 0200 	mov.w	r2, #0
 80060d4:	f04f 0300 	mov.w	r3, #0
 80060d8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80060dc:	4649      	mov	r1, r9
 80060de:	018b      	lsls	r3, r1, #6
 80060e0:	4641      	mov	r1, r8
 80060e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80060e6:	4641      	mov	r1, r8
 80060e8:	018a      	lsls	r2, r1, #6
 80060ea:	4641      	mov	r1, r8
 80060ec:	ebb2 0a01 	subs.w	sl, r2, r1
 80060f0:	4649      	mov	r1, r9
 80060f2:	eb63 0b01 	sbc.w	fp, r3, r1
 80060f6:	f04f 0200 	mov.w	r2, #0
 80060fa:	f04f 0300 	mov.w	r3, #0
 80060fe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006102:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006106:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800610a:	4692      	mov	sl, r2
 800610c:	469b      	mov	fp, r3
 800610e:	4623      	mov	r3, r4
 8006110:	eb1a 0303 	adds.w	r3, sl, r3
 8006114:	623b      	str	r3, [r7, #32]
 8006116:	462b      	mov	r3, r5
 8006118:	eb4b 0303 	adc.w	r3, fp, r3
 800611c:	627b      	str	r3, [r7, #36]	; 0x24
 800611e:	f04f 0200 	mov.w	r2, #0
 8006122:	f04f 0300 	mov.w	r3, #0
 8006126:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800612a:	4629      	mov	r1, r5
 800612c:	028b      	lsls	r3, r1, #10
 800612e:	4621      	mov	r1, r4
 8006130:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006134:	4621      	mov	r1, r4
 8006136:	028a      	lsls	r2, r1, #10
 8006138:	4610      	mov	r0, r2
 800613a:	4619      	mov	r1, r3
 800613c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006140:	2200      	movs	r2, #0
 8006142:	673b      	str	r3, [r7, #112]	; 0x70
 8006144:	677a      	str	r2, [r7, #116]	; 0x74
 8006146:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800614a:	f7fa f85b 	bl	8000204 <__aeabi_uldivmod>
 800614e:	4602      	mov	r2, r0
 8006150:	460b      	mov	r3, r1
 8006152:	4613      	mov	r3, r2
 8006154:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006158:	4b41      	ldr	r3, [pc, #260]	; (8006260 <HAL_RCC_GetSysClockFreq+0x354>)
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	0c1b      	lsrs	r3, r3, #16
 800615e:	f003 0303 	and.w	r3, r3, #3
 8006162:	3301      	adds	r3, #1
 8006164:	005b      	lsls	r3, r3, #1
 8006166:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800616a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800616e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006172:	fbb2 f3f3 	udiv	r3, r2, r3
 8006176:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800617a:	e0eb      	b.n	8006354 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800617c:	4b38      	ldr	r3, [pc, #224]	; (8006260 <HAL_RCC_GetSysClockFreq+0x354>)
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006184:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006188:	4b35      	ldr	r3, [pc, #212]	; (8006260 <HAL_RCC_GetSysClockFreq+0x354>)
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d06b      	beq.n	800626c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006194:	4b32      	ldr	r3, [pc, #200]	; (8006260 <HAL_RCC_GetSysClockFreq+0x354>)
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	099b      	lsrs	r3, r3, #6
 800619a:	2200      	movs	r2, #0
 800619c:	66bb      	str	r3, [r7, #104]	; 0x68
 800619e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80061a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061a6:	663b      	str	r3, [r7, #96]	; 0x60
 80061a8:	2300      	movs	r3, #0
 80061aa:	667b      	str	r3, [r7, #100]	; 0x64
 80061ac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80061b0:	4622      	mov	r2, r4
 80061b2:	462b      	mov	r3, r5
 80061b4:	f04f 0000 	mov.w	r0, #0
 80061b8:	f04f 0100 	mov.w	r1, #0
 80061bc:	0159      	lsls	r1, r3, #5
 80061be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061c2:	0150      	lsls	r0, r2, #5
 80061c4:	4602      	mov	r2, r0
 80061c6:	460b      	mov	r3, r1
 80061c8:	4621      	mov	r1, r4
 80061ca:	1a51      	subs	r1, r2, r1
 80061cc:	61b9      	str	r1, [r7, #24]
 80061ce:	4629      	mov	r1, r5
 80061d0:	eb63 0301 	sbc.w	r3, r3, r1
 80061d4:	61fb      	str	r3, [r7, #28]
 80061d6:	f04f 0200 	mov.w	r2, #0
 80061da:	f04f 0300 	mov.w	r3, #0
 80061de:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80061e2:	4659      	mov	r1, fp
 80061e4:	018b      	lsls	r3, r1, #6
 80061e6:	4651      	mov	r1, sl
 80061e8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80061ec:	4651      	mov	r1, sl
 80061ee:	018a      	lsls	r2, r1, #6
 80061f0:	4651      	mov	r1, sl
 80061f2:	ebb2 0801 	subs.w	r8, r2, r1
 80061f6:	4659      	mov	r1, fp
 80061f8:	eb63 0901 	sbc.w	r9, r3, r1
 80061fc:	f04f 0200 	mov.w	r2, #0
 8006200:	f04f 0300 	mov.w	r3, #0
 8006204:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006208:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800620c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006210:	4690      	mov	r8, r2
 8006212:	4699      	mov	r9, r3
 8006214:	4623      	mov	r3, r4
 8006216:	eb18 0303 	adds.w	r3, r8, r3
 800621a:	613b      	str	r3, [r7, #16]
 800621c:	462b      	mov	r3, r5
 800621e:	eb49 0303 	adc.w	r3, r9, r3
 8006222:	617b      	str	r3, [r7, #20]
 8006224:	f04f 0200 	mov.w	r2, #0
 8006228:	f04f 0300 	mov.w	r3, #0
 800622c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006230:	4629      	mov	r1, r5
 8006232:	024b      	lsls	r3, r1, #9
 8006234:	4621      	mov	r1, r4
 8006236:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800623a:	4621      	mov	r1, r4
 800623c:	024a      	lsls	r2, r1, #9
 800623e:	4610      	mov	r0, r2
 8006240:	4619      	mov	r1, r3
 8006242:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006246:	2200      	movs	r2, #0
 8006248:	65bb      	str	r3, [r7, #88]	; 0x58
 800624a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800624c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006250:	f7f9 ffd8 	bl	8000204 <__aeabi_uldivmod>
 8006254:	4602      	mov	r2, r0
 8006256:	460b      	mov	r3, r1
 8006258:	4613      	mov	r3, r2
 800625a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800625e:	e065      	b.n	800632c <HAL_RCC_GetSysClockFreq+0x420>
 8006260:	40023800 	.word	0x40023800
 8006264:	00f42400 	.word	0x00f42400
 8006268:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800626c:	4b3d      	ldr	r3, [pc, #244]	; (8006364 <HAL_RCC_GetSysClockFreq+0x458>)
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	099b      	lsrs	r3, r3, #6
 8006272:	2200      	movs	r2, #0
 8006274:	4618      	mov	r0, r3
 8006276:	4611      	mov	r1, r2
 8006278:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800627c:	653b      	str	r3, [r7, #80]	; 0x50
 800627e:	2300      	movs	r3, #0
 8006280:	657b      	str	r3, [r7, #84]	; 0x54
 8006282:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8006286:	4642      	mov	r2, r8
 8006288:	464b      	mov	r3, r9
 800628a:	f04f 0000 	mov.w	r0, #0
 800628e:	f04f 0100 	mov.w	r1, #0
 8006292:	0159      	lsls	r1, r3, #5
 8006294:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006298:	0150      	lsls	r0, r2, #5
 800629a:	4602      	mov	r2, r0
 800629c:	460b      	mov	r3, r1
 800629e:	4641      	mov	r1, r8
 80062a0:	1a51      	subs	r1, r2, r1
 80062a2:	60b9      	str	r1, [r7, #8]
 80062a4:	4649      	mov	r1, r9
 80062a6:	eb63 0301 	sbc.w	r3, r3, r1
 80062aa:	60fb      	str	r3, [r7, #12]
 80062ac:	f04f 0200 	mov.w	r2, #0
 80062b0:	f04f 0300 	mov.w	r3, #0
 80062b4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80062b8:	4659      	mov	r1, fp
 80062ba:	018b      	lsls	r3, r1, #6
 80062bc:	4651      	mov	r1, sl
 80062be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80062c2:	4651      	mov	r1, sl
 80062c4:	018a      	lsls	r2, r1, #6
 80062c6:	4651      	mov	r1, sl
 80062c8:	1a54      	subs	r4, r2, r1
 80062ca:	4659      	mov	r1, fp
 80062cc:	eb63 0501 	sbc.w	r5, r3, r1
 80062d0:	f04f 0200 	mov.w	r2, #0
 80062d4:	f04f 0300 	mov.w	r3, #0
 80062d8:	00eb      	lsls	r3, r5, #3
 80062da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062de:	00e2      	lsls	r2, r4, #3
 80062e0:	4614      	mov	r4, r2
 80062e2:	461d      	mov	r5, r3
 80062e4:	4643      	mov	r3, r8
 80062e6:	18e3      	adds	r3, r4, r3
 80062e8:	603b      	str	r3, [r7, #0]
 80062ea:	464b      	mov	r3, r9
 80062ec:	eb45 0303 	adc.w	r3, r5, r3
 80062f0:	607b      	str	r3, [r7, #4]
 80062f2:	f04f 0200 	mov.w	r2, #0
 80062f6:	f04f 0300 	mov.w	r3, #0
 80062fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80062fe:	4629      	mov	r1, r5
 8006300:	028b      	lsls	r3, r1, #10
 8006302:	4621      	mov	r1, r4
 8006304:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006308:	4621      	mov	r1, r4
 800630a:	028a      	lsls	r2, r1, #10
 800630c:	4610      	mov	r0, r2
 800630e:	4619      	mov	r1, r3
 8006310:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006314:	2200      	movs	r2, #0
 8006316:	64bb      	str	r3, [r7, #72]	; 0x48
 8006318:	64fa      	str	r2, [r7, #76]	; 0x4c
 800631a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800631e:	f7f9 ff71 	bl	8000204 <__aeabi_uldivmod>
 8006322:	4602      	mov	r2, r0
 8006324:	460b      	mov	r3, r1
 8006326:	4613      	mov	r3, r2
 8006328:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800632c:	4b0d      	ldr	r3, [pc, #52]	; (8006364 <HAL_RCC_GetSysClockFreq+0x458>)
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	0f1b      	lsrs	r3, r3, #28
 8006332:	f003 0307 	and.w	r3, r3, #7
 8006336:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800633a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800633e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006342:	fbb2 f3f3 	udiv	r3, r2, r3
 8006346:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800634a:	e003      	b.n	8006354 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800634c:	4b06      	ldr	r3, [pc, #24]	; (8006368 <HAL_RCC_GetSysClockFreq+0x45c>)
 800634e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006352:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006354:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006358:	4618      	mov	r0, r3
 800635a:	37b8      	adds	r7, #184	; 0xb8
 800635c:	46bd      	mov	sp, r7
 800635e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006362:	bf00      	nop
 8006364:	40023800 	.word	0x40023800
 8006368:	00f42400 	.word	0x00f42400

0800636c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e28d      	b.n	800689a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b00      	cmp	r3, #0
 8006388:	f000 8083 	beq.w	8006492 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800638c:	4b94      	ldr	r3, [pc, #592]	; (80065e0 <HAL_RCC_OscConfig+0x274>)
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	f003 030c 	and.w	r3, r3, #12
 8006394:	2b04      	cmp	r3, #4
 8006396:	d019      	beq.n	80063cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006398:	4b91      	ldr	r3, [pc, #580]	; (80065e0 <HAL_RCC_OscConfig+0x274>)
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80063a0:	2b08      	cmp	r3, #8
 80063a2:	d106      	bne.n	80063b2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80063a4:	4b8e      	ldr	r3, [pc, #568]	; (80065e0 <HAL_RCC_OscConfig+0x274>)
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063b0:	d00c      	beq.n	80063cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063b2:	4b8b      	ldr	r3, [pc, #556]	; (80065e0 <HAL_RCC_OscConfig+0x274>)
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80063ba:	2b0c      	cmp	r3, #12
 80063bc:	d112      	bne.n	80063e4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063be:	4b88      	ldr	r3, [pc, #544]	; (80065e0 <HAL_RCC_OscConfig+0x274>)
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063ca:	d10b      	bne.n	80063e4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063cc:	4b84      	ldr	r3, [pc, #528]	; (80065e0 <HAL_RCC_OscConfig+0x274>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d05b      	beq.n	8006490 <HAL_RCC_OscConfig+0x124>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d157      	bne.n	8006490 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e25a      	b.n	800689a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ec:	d106      	bne.n	80063fc <HAL_RCC_OscConfig+0x90>
 80063ee:	4b7c      	ldr	r3, [pc, #496]	; (80065e0 <HAL_RCC_OscConfig+0x274>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a7b      	ldr	r2, [pc, #492]	; (80065e0 <HAL_RCC_OscConfig+0x274>)
 80063f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063f8:	6013      	str	r3, [r2, #0]
 80063fa:	e01d      	b.n	8006438 <HAL_RCC_OscConfig+0xcc>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006404:	d10c      	bne.n	8006420 <HAL_RCC_OscConfig+0xb4>
 8006406:	4b76      	ldr	r3, [pc, #472]	; (80065e0 <HAL_RCC_OscConfig+0x274>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a75      	ldr	r2, [pc, #468]	; (80065e0 <HAL_RCC_OscConfig+0x274>)
 800640c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006410:	6013      	str	r3, [r2, #0]
 8006412:	4b73      	ldr	r3, [pc, #460]	; (80065e0 <HAL_RCC_OscConfig+0x274>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a72      	ldr	r2, [pc, #456]	; (80065e0 <HAL_RCC_OscConfig+0x274>)
 8006418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800641c:	6013      	str	r3, [r2, #0]
 800641e:	e00b      	b.n	8006438 <HAL_RCC_OscConfig+0xcc>
 8006420:	4b6f      	ldr	r3, [pc, #444]	; (80065e0 <HAL_RCC_OscConfig+0x274>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a6e      	ldr	r2, [pc, #440]	; (80065e0 <HAL_RCC_OscConfig+0x274>)
 8006426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800642a:	6013      	str	r3, [r2, #0]
 800642c:	4b6c      	ldr	r3, [pc, #432]	; (80065e0 <HAL_RCC_OscConfig+0x274>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a6b      	ldr	r2, [pc, #428]	; (80065e0 <HAL_RCC_OscConfig+0x274>)
 8006432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006436:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d013      	beq.n	8006468 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006440:	f7fc fde6 	bl	8003010 <HAL_GetTick>
 8006444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006446:	e008      	b.n	800645a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006448:	f7fc fde2 	bl	8003010 <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	2b64      	cmp	r3, #100	; 0x64
 8006454:	d901      	bls.n	800645a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e21f      	b.n	800689a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800645a:	4b61      	ldr	r3, [pc, #388]	; (80065e0 <HAL_RCC_OscConfig+0x274>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d0f0      	beq.n	8006448 <HAL_RCC_OscConfig+0xdc>
 8006466:	e014      	b.n	8006492 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006468:	f7fc fdd2 	bl	8003010 <HAL_GetTick>
 800646c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800646e:	e008      	b.n	8006482 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006470:	f7fc fdce 	bl	8003010 <HAL_GetTick>
 8006474:	4602      	mov	r2, r0
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	2b64      	cmp	r3, #100	; 0x64
 800647c:	d901      	bls.n	8006482 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e20b      	b.n	800689a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006482:	4b57      	ldr	r3, [pc, #348]	; (80065e0 <HAL_RCC_OscConfig+0x274>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1f0      	bne.n	8006470 <HAL_RCC_OscConfig+0x104>
 800648e:	e000      	b.n	8006492 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0302 	and.w	r3, r3, #2
 800649a:	2b00      	cmp	r3, #0
 800649c:	d06f      	beq.n	800657e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800649e:	4b50      	ldr	r3, [pc, #320]	; (80065e0 <HAL_RCC_OscConfig+0x274>)
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f003 030c 	and.w	r3, r3, #12
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d017      	beq.n	80064da <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80064aa:	4b4d      	ldr	r3, [pc, #308]	; (80065e0 <HAL_RCC_OscConfig+0x274>)
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80064b2:	2b08      	cmp	r3, #8
 80064b4:	d105      	bne.n	80064c2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80064b6:	4b4a      	ldr	r3, [pc, #296]	; (80065e0 <HAL_RCC_OscConfig+0x274>)
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00b      	beq.n	80064da <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064c2:	4b47      	ldr	r3, [pc, #284]	; (80065e0 <HAL_RCC_OscConfig+0x274>)
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80064ca:	2b0c      	cmp	r3, #12
 80064cc:	d11c      	bne.n	8006508 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064ce:	4b44      	ldr	r3, [pc, #272]	; (80065e0 <HAL_RCC_OscConfig+0x274>)
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d116      	bne.n	8006508 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064da:	4b41      	ldr	r3, [pc, #260]	; (80065e0 <HAL_RCC_OscConfig+0x274>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0302 	and.w	r3, r3, #2
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d005      	beq.n	80064f2 <HAL_RCC_OscConfig+0x186>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d001      	beq.n	80064f2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e1d3      	b.n	800689a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064f2:	4b3b      	ldr	r3, [pc, #236]	; (80065e0 <HAL_RCC_OscConfig+0x274>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	00db      	lsls	r3, r3, #3
 8006500:	4937      	ldr	r1, [pc, #220]	; (80065e0 <HAL_RCC_OscConfig+0x274>)
 8006502:	4313      	orrs	r3, r2
 8006504:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006506:	e03a      	b.n	800657e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d020      	beq.n	8006552 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006510:	4b34      	ldr	r3, [pc, #208]	; (80065e4 <HAL_RCC_OscConfig+0x278>)
 8006512:	2201      	movs	r2, #1
 8006514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006516:	f7fc fd7b 	bl	8003010 <HAL_GetTick>
 800651a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800651c:	e008      	b.n	8006530 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800651e:	f7fc fd77 	bl	8003010 <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	2b02      	cmp	r3, #2
 800652a:	d901      	bls.n	8006530 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e1b4      	b.n	800689a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006530:	4b2b      	ldr	r3, [pc, #172]	; (80065e0 <HAL_RCC_OscConfig+0x274>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0302 	and.w	r3, r3, #2
 8006538:	2b00      	cmp	r3, #0
 800653a:	d0f0      	beq.n	800651e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800653c:	4b28      	ldr	r3, [pc, #160]	; (80065e0 <HAL_RCC_OscConfig+0x274>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	00db      	lsls	r3, r3, #3
 800654a:	4925      	ldr	r1, [pc, #148]	; (80065e0 <HAL_RCC_OscConfig+0x274>)
 800654c:	4313      	orrs	r3, r2
 800654e:	600b      	str	r3, [r1, #0]
 8006550:	e015      	b.n	800657e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006552:	4b24      	ldr	r3, [pc, #144]	; (80065e4 <HAL_RCC_OscConfig+0x278>)
 8006554:	2200      	movs	r2, #0
 8006556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006558:	f7fc fd5a 	bl	8003010 <HAL_GetTick>
 800655c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800655e:	e008      	b.n	8006572 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006560:	f7fc fd56 	bl	8003010 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	2b02      	cmp	r3, #2
 800656c:	d901      	bls.n	8006572 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e193      	b.n	800689a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006572:	4b1b      	ldr	r3, [pc, #108]	; (80065e0 <HAL_RCC_OscConfig+0x274>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1f0      	bne.n	8006560 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0308 	and.w	r3, r3, #8
 8006586:	2b00      	cmp	r3, #0
 8006588:	d036      	beq.n	80065f8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d016      	beq.n	80065c0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006592:	4b15      	ldr	r3, [pc, #84]	; (80065e8 <HAL_RCC_OscConfig+0x27c>)
 8006594:	2201      	movs	r2, #1
 8006596:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006598:	f7fc fd3a 	bl	8003010 <HAL_GetTick>
 800659c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800659e:	e008      	b.n	80065b2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065a0:	f7fc fd36 	bl	8003010 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d901      	bls.n	80065b2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e173      	b.n	800689a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065b2:	4b0b      	ldr	r3, [pc, #44]	; (80065e0 <HAL_RCC_OscConfig+0x274>)
 80065b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d0f0      	beq.n	80065a0 <HAL_RCC_OscConfig+0x234>
 80065be:	e01b      	b.n	80065f8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065c0:	4b09      	ldr	r3, [pc, #36]	; (80065e8 <HAL_RCC_OscConfig+0x27c>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065c6:	f7fc fd23 	bl	8003010 <HAL_GetTick>
 80065ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065cc:	e00e      	b.n	80065ec <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065ce:	f7fc fd1f 	bl	8003010 <HAL_GetTick>
 80065d2:	4602      	mov	r2, r0
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d907      	bls.n	80065ec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e15c      	b.n	800689a <HAL_RCC_OscConfig+0x52e>
 80065e0:	40023800 	.word	0x40023800
 80065e4:	42470000 	.word	0x42470000
 80065e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065ec:	4b8a      	ldr	r3, [pc, #552]	; (8006818 <HAL_RCC_OscConfig+0x4ac>)
 80065ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065f0:	f003 0302 	and.w	r3, r3, #2
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1ea      	bne.n	80065ce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0304 	and.w	r3, r3, #4
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 8097 	beq.w	8006734 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006606:	2300      	movs	r3, #0
 8006608:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800660a:	4b83      	ldr	r3, [pc, #524]	; (8006818 <HAL_RCC_OscConfig+0x4ac>)
 800660c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10f      	bne.n	8006636 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006616:	2300      	movs	r3, #0
 8006618:	60bb      	str	r3, [r7, #8]
 800661a:	4b7f      	ldr	r3, [pc, #508]	; (8006818 <HAL_RCC_OscConfig+0x4ac>)
 800661c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661e:	4a7e      	ldr	r2, [pc, #504]	; (8006818 <HAL_RCC_OscConfig+0x4ac>)
 8006620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006624:	6413      	str	r3, [r2, #64]	; 0x40
 8006626:	4b7c      	ldr	r3, [pc, #496]	; (8006818 <HAL_RCC_OscConfig+0x4ac>)
 8006628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800662e:	60bb      	str	r3, [r7, #8]
 8006630:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006632:	2301      	movs	r3, #1
 8006634:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006636:	4b79      	ldr	r3, [pc, #484]	; (800681c <HAL_RCC_OscConfig+0x4b0>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800663e:	2b00      	cmp	r3, #0
 8006640:	d118      	bne.n	8006674 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006642:	4b76      	ldr	r3, [pc, #472]	; (800681c <HAL_RCC_OscConfig+0x4b0>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a75      	ldr	r2, [pc, #468]	; (800681c <HAL_RCC_OscConfig+0x4b0>)
 8006648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800664c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800664e:	f7fc fcdf 	bl	8003010 <HAL_GetTick>
 8006652:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006654:	e008      	b.n	8006668 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006656:	f7fc fcdb 	bl	8003010 <HAL_GetTick>
 800665a:	4602      	mov	r2, r0
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	2b02      	cmp	r3, #2
 8006662:	d901      	bls.n	8006668 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006664:	2303      	movs	r3, #3
 8006666:	e118      	b.n	800689a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006668:	4b6c      	ldr	r3, [pc, #432]	; (800681c <HAL_RCC_OscConfig+0x4b0>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006670:	2b00      	cmp	r3, #0
 8006672:	d0f0      	beq.n	8006656 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d106      	bne.n	800668a <HAL_RCC_OscConfig+0x31e>
 800667c:	4b66      	ldr	r3, [pc, #408]	; (8006818 <HAL_RCC_OscConfig+0x4ac>)
 800667e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006680:	4a65      	ldr	r2, [pc, #404]	; (8006818 <HAL_RCC_OscConfig+0x4ac>)
 8006682:	f043 0301 	orr.w	r3, r3, #1
 8006686:	6713      	str	r3, [r2, #112]	; 0x70
 8006688:	e01c      	b.n	80066c4 <HAL_RCC_OscConfig+0x358>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	2b05      	cmp	r3, #5
 8006690:	d10c      	bne.n	80066ac <HAL_RCC_OscConfig+0x340>
 8006692:	4b61      	ldr	r3, [pc, #388]	; (8006818 <HAL_RCC_OscConfig+0x4ac>)
 8006694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006696:	4a60      	ldr	r2, [pc, #384]	; (8006818 <HAL_RCC_OscConfig+0x4ac>)
 8006698:	f043 0304 	orr.w	r3, r3, #4
 800669c:	6713      	str	r3, [r2, #112]	; 0x70
 800669e:	4b5e      	ldr	r3, [pc, #376]	; (8006818 <HAL_RCC_OscConfig+0x4ac>)
 80066a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a2:	4a5d      	ldr	r2, [pc, #372]	; (8006818 <HAL_RCC_OscConfig+0x4ac>)
 80066a4:	f043 0301 	orr.w	r3, r3, #1
 80066a8:	6713      	str	r3, [r2, #112]	; 0x70
 80066aa:	e00b      	b.n	80066c4 <HAL_RCC_OscConfig+0x358>
 80066ac:	4b5a      	ldr	r3, [pc, #360]	; (8006818 <HAL_RCC_OscConfig+0x4ac>)
 80066ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b0:	4a59      	ldr	r2, [pc, #356]	; (8006818 <HAL_RCC_OscConfig+0x4ac>)
 80066b2:	f023 0301 	bic.w	r3, r3, #1
 80066b6:	6713      	str	r3, [r2, #112]	; 0x70
 80066b8:	4b57      	ldr	r3, [pc, #348]	; (8006818 <HAL_RCC_OscConfig+0x4ac>)
 80066ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066bc:	4a56      	ldr	r2, [pc, #344]	; (8006818 <HAL_RCC_OscConfig+0x4ac>)
 80066be:	f023 0304 	bic.w	r3, r3, #4
 80066c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d015      	beq.n	80066f8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066cc:	f7fc fca0 	bl	8003010 <HAL_GetTick>
 80066d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066d2:	e00a      	b.n	80066ea <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066d4:	f7fc fc9c 	bl	8003010 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	f241 3288 	movw	r2, #5000	; 0x1388
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d901      	bls.n	80066ea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e0d7      	b.n	800689a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066ea:	4b4b      	ldr	r3, [pc, #300]	; (8006818 <HAL_RCC_OscConfig+0x4ac>)
 80066ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d0ee      	beq.n	80066d4 <HAL_RCC_OscConfig+0x368>
 80066f6:	e014      	b.n	8006722 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066f8:	f7fc fc8a 	bl	8003010 <HAL_GetTick>
 80066fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066fe:	e00a      	b.n	8006716 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006700:	f7fc fc86 	bl	8003010 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	f241 3288 	movw	r2, #5000	; 0x1388
 800670e:	4293      	cmp	r3, r2
 8006710:	d901      	bls.n	8006716 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	e0c1      	b.n	800689a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006716:	4b40      	ldr	r3, [pc, #256]	; (8006818 <HAL_RCC_OscConfig+0x4ac>)
 8006718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800671a:	f003 0302 	and.w	r3, r3, #2
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1ee      	bne.n	8006700 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006722:	7dfb      	ldrb	r3, [r7, #23]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d105      	bne.n	8006734 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006728:	4b3b      	ldr	r3, [pc, #236]	; (8006818 <HAL_RCC_OscConfig+0x4ac>)
 800672a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672c:	4a3a      	ldr	r2, [pc, #232]	; (8006818 <HAL_RCC_OscConfig+0x4ac>)
 800672e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006732:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	2b00      	cmp	r3, #0
 800673a:	f000 80ad 	beq.w	8006898 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800673e:	4b36      	ldr	r3, [pc, #216]	; (8006818 <HAL_RCC_OscConfig+0x4ac>)
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	f003 030c 	and.w	r3, r3, #12
 8006746:	2b08      	cmp	r3, #8
 8006748:	d060      	beq.n	800680c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	2b02      	cmp	r3, #2
 8006750:	d145      	bne.n	80067de <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006752:	4b33      	ldr	r3, [pc, #204]	; (8006820 <HAL_RCC_OscConfig+0x4b4>)
 8006754:	2200      	movs	r2, #0
 8006756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006758:	f7fc fc5a 	bl	8003010 <HAL_GetTick>
 800675c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800675e:	e008      	b.n	8006772 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006760:	f7fc fc56 	bl	8003010 <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	2b02      	cmp	r3, #2
 800676c:	d901      	bls.n	8006772 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e093      	b.n	800689a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006772:	4b29      	ldr	r3, [pc, #164]	; (8006818 <HAL_RCC_OscConfig+0x4ac>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1f0      	bne.n	8006760 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	69da      	ldr	r2, [r3, #28]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	431a      	orrs	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678c:	019b      	lsls	r3, r3, #6
 800678e:	431a      	orrs	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006794:	085b      	lsrs	r3, r3, #1
 8006796:	3b01      	subs	r3, #1
 8006798:	041b      	lsls	r3, r3, #16
 800679a:	431a      	orrs	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a0:	061b      	lsls	r3, r3, #24
 80067a2:	431a      	orrs	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a8:	071b      	lsls	r3, r3, #28
 80067aa:	491b      	ldr	r1, [pc, #108]	; (8006818 <HAL_RCC_OscConfig+0x4ac>)
 80067ac:	4313      	orrs	r3, r2
 80067ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067b0:	4b1b      	ldr	r3, [pc, #108]	; (8006820 <HAL_RCC_OscConfig+0x4b4>)
 80067b2:	2201      	movs	r2, #1
 80067b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067b6:	f7fc fc2b 	bl	8003010 <HAL_GetTick>
 80067ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067bc:	e008      	b.n	80067d0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067be:	f7fc fc27 	bl	8003010 <HAL_GetTick>
 80067c2:	4602      	mov	r2, r0
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d901      	bls.n	80067d0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e064      	b.n	800689a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067d0:	4b11      	ldr	r3, [pc, #68]	; (8006818 <HAL_RCC_OscConfig+0x4ac>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d0f0      	beq.n	80067be <HAL_RCC_OscConfig+0x452>
 80067dc:	e05c      	b.n	8006898 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067de:	4b10      	ldr	r3, [pc, #64]	; (8006820 <HAL_RCC_OscConfig+0x4b4>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e4:	f7fc fc14 	bl	8003010 <HAL_GetTick>
 80067e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067ea:	e008      	b.n	80067fe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067ec:	f7fc fc10 	bl	8003010 <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d901      	bls.n	80067fe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e04d      	b.n	800689a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067fe:	4b06      	ldr	r3, [pc, #24]	; (8006818 <HAL_RCC_OscConfig+0x4ac>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1f0      	bne.n	80067ec <HAL_RCC_OscConfig+0x480>
 800680a:	e045      	b.n	8006898 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d107      	bne.n	8006824 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e040      	b.n	800689a <HAL_RCC_OscConfig+0x52e>
 8006818:	40023800 	.word	0x40023800
 800681c:	40007000 	.word	0x40007000
 8006820:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006824:	4b1f      	ldr	r3, [pc, #124]	; (80068a4 <HAL_RCC_OscConfig+0x538>)
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d030      	beq.n	8006894 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800683c:	429a      	cmp	r2, r3
 800683e:	d129      	bne.n	8006894 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800684a:	429a      	cmp	r2, r3
 800684c:	d122      	bne.n	8006894 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006854:	4013      	ands	r3, r2
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800685a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800685c:	4293      	cmp	r3, r2
 800685e:	d119      	bne.n	8006894 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686a:	085b      	lsrs	r3, r3, #1
 800686c:	3b01      	subs	r3, #1
 800686e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006870:	429a      	cmp	r2, r3
 8006872:	d10f      	bne.n	8006894 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006880:	429a      	cmp	r2, r3
 8006882:	d107      	bne.n	8006894 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006890:	429a      	cmp	r2, r3
 8006892:	d001      	beq.n	8006898 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e000      	b.n	800689a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3718      	adds	r7, #24
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	40023800 	.word	0x40023800

080068a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d101      	bne.n	80068ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e03f      	b.n	800693a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d106      	bne.n	80068d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f7fb ffe0 	bl	8002894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2224      	movs	r2, #36	; 0x24
 80068d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68da      	ldr	r2, [r3, #12]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 ffcb 	bl	8007888 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	691a      	ldr	r2, [r3, #16]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006900:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	695a      	ldr	r2, [r3, #20]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006910:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68da      	ldr	r2, [r3, #12]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006920:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2220      	movs	r2, #32
 800692c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2220      	movs	r2, #32
 8006934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b08a      	sub	sp, #40	; 0x28
 8006946:	af02      	add	r7, sp, #8
 8006948:	60f8      	str	r0, [r7, #12]
 800694a:	60b9      	str	r1, [r7, #8]
 800694c:	603b      	str	r3, [r7, #0]
 800694e:	4613      	mov	r3, r2
 8006950:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006952:	2300      	movs	r3, #0
 8006954:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2b20      	cmp	r3, #32
 8006960:	d17c      	bne.n	8006a5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d002      	beq.n	800696e <HAL_UART_Transmit+0x2c>
 8006968:	88fb      	ldrh	r3, [r7, #6]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e075      	b.n	8006a5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006978:	2b01      	cmp	r3, #1
 800697a:	d101      	bne.n	8006980 <HAL_UART_Transmit+0x3e>
 800697c:	2302      	movs	r3, #2
 800697e:	e06e      	b.n	8006a5e <HAL_UART_Transmit+0x11c>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2221      	movs	r2, #33	; 0x21
 8006992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006996:	f7fc fb3b 	bl	8003010 <HAL_GetTick>
 800699a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	88fa      	ldrh	r2, [r7, #6]
 80069a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	88fa      	ldrh	r2, [r7, #6]
 80069a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069b0:	d108      	bne.n	80069c4 <HAL_UART_Transmit+0x82>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d104      	bne.n	80069c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80069ba:	2300      	movs	r3, #0
 80069bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	61bb      	str	r3, [r7, #24]
 80069c2:	e003      	b.n	80069cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069c8:	2300      	movs	r3, #0
 80069ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80069d4:	e02a      	b.n	8006a2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	2200      	movs	r2, #0
 80069de:	2180      	movs	r1, #128	; 0x80
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 fc83 	bl	80072ec <UART_WaitOnFlagUntilTimeout>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d001      	beq.n	80069f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e036      	b.n	8006a5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10b      	bne.n	8006a0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	881b      	ldrh	r3, [r3, #0]
 80069fa:	461a      	mov	r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	3302      	adds	r3, #2
 8006a0a:	61bb      	str	r3, [r7, #24]
 8006a0c:	e007      	b.n	8006a1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	781a      	ldrb	r2, [r3, #0]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	3b01      	subs	r3, #1
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1cf      	bne.n	80069d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	2140      	movs	r1, #64	; 0x40
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 fc53 	bl	80072ec <UART_WaitOnFlagUntilTimeout>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d001      	beq.n	8006a50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e006      	b.n	8006a5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2220      	movs	r2, #32
 8006a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	e000      	b.n	8006a5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006a5c:	2302      	movs	r3, #2
  }
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3720      	adds	r7, #32
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b084      	sub	sp, #16
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	60f8      	str	r0, [r7, #12]
 8006a6e:	60b9      	str	r1, [r7, #8]
 8006a70:	4613      	mov	r3, r2
 8006a72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b20      	cmp	r3, #32
 8006a7e:	d11d      	bne.n	8006abc <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d002      	beq.n	8006a8c <HAL_UART_Receive_DMA+0x26>
 8006a86:	88fb      	ldrh	r3, [r7, #6]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d101      	bne.n	8006a90 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e016      	b.n	8006abe <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d101      	bne.n	8006a9e <HAL_UART_Receive_DMA+0x38>
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	e00f      	b.n	8006abe <HAL_UART_Receive_DMA+0x58>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006aac:	88fb      	ldrh	r3, [r7, #6]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	68b9      	ldr	r1, [r7, #8]
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f000 fc88 	bl	80073c8 <UART_Start_Receive_DMA>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	e000      	b.n	8006abe <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006abc:	2302      	movs	r3, #2
  }
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b08c      	sub	sp, #48	; 0x30
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	60f8      	str	r0, [r7, #12]
 8006ace:	60b9      	str	r1, [r7, #8]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	2b20      	cmp	r3, #32
 8006ade:	d152      	bne.n	8006b86 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d002      	beq.n	8006aec <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006ae6:	88fb      	ldrh	r3, [r7, #6]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d101      	bne.n	8006af0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e04b      	b.n	8006b88 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d101      	bne.n	8006afe <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8006afa:	2302      	movs	r3, #2
 8006afc:	e044      	b.n	8006b88 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006b0c:	88fb      	ldrh	r3, [r7, #6]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	68b9      	ldr	r1, [r7, #8]
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 fc58 	bl	80073c8 <UART_Start_Receive_DMA>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006b1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d12c      	bne.n	8006b80 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d125      	bne.n	8006b7a <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b2e:	2300      	movs	r3, #0
 8006b30:	613b      	str	r3, [r7, #16]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	613b      	str	r3, [r7, #16]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	613b      	str	r3, [r7, #16]
 8006b42:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	330c      	adds	r3, #12
 8006b4a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	e853 3f00 	ldrex	r3, [r3]
 8006b52:	617b      	str	r3, [r7, #20]
   return(result);
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	f043 0310 	orr.w	r3, r3, #16
 8006b5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	330c      	adds	r3, #12
 8006b62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b64:	627a      	str	r2, [r7, #36]	; 0x24
 8006b66:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b68:	6a39      	ldr	r1, [r7, #32]
 8006b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b6c:	e841 2300 	strex	r3, r2, [r1]
 8006b70:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1e5      	bne.n	8006b44 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8006b78:	e002      	b.n	8006b80 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006b80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b84:	e000      	b.n	8006b88 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8006b86:	2302      	movs	r3, #2
  }
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3730      	adds	r7, #48	; 0x30
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b0ba      	sub	sp, #232	; 0xe8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bc6:	f003 030f 	and.w	r3, r3, #15
 8006bca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006bce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10f      	bne.n	8006bf6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bda:	f003 0320 	and.w	r3, r3, #32
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d009      	beq.n	8006bf6 <HAL_UART_IRQHandler+0x66>
 8006be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006be6:	f003 0320 	and.w	r3, r3, #32
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d003      	beq.n	8006bf6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fd8f 	bl	8007712 <UART_Receive_IT>
      return;
 8006bf4:	e256      	b.n	80070a4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006bf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f000 80de 	beq.w	8006dbc <HAL_UART_IRQHandler+0x22c>
 8006c00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c04:	f003 0301 	and.w	r3, r3, #1
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d106      	bne.n	8006c1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c10:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f000 80d1 	beq.w	8006dbc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00b      	beq.n	8006c3e <HAL_UART_IRQHandler+0xae>
 8006c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d005      	beq.n	8006c3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c36:	f043 0201 	orr.w	r2, r3, #1
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c42:	f003 0304 	and.w	r3, r3, #4
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00b      	beq.n	8006c62 <HAL_UART_IRQHandler+0xd2>
 8006c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d005      	beq.n	8006c62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5a:	f043 0202 	orr.w	r2, r3, #2
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c66:	f003 0302 	and.w	r3, r3, #2
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00b      	beq.n	8006c86 <HAL_UART_IRQHandler+0xf6>
 8006c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d005      	beq.n	8006c86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7e:	f043 0204 	orr.w	r2, r3, #4
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c8a:	f003 0308 	and.w	r3, r3, #8
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d011      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x126>
 8006c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c96:	f003 0320 	and.w	r3, r3, #32
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d105      	bne.n	8006caa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d005      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cae:	f043 0208 	orr.w	r2, r3, #8
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f000 81ed 	beq.w	800709a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cc4:	f003 0320 	and.w	r3, r3, #32
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d008      	beq.n	8006cde <HAL_UART_IRQHandler+0x14e>
 8006ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cd0:	f003 0320 	and.w	r3, r3, #32
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d002      	beq.n	8006cde <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 fd1a 	bl	8007712 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce8:	2b40      	cmp	r3, #64	; 0x40
 8006cea:	bf0c      	ite	eq
 8006cec:	2301      	moveq	r3, #1
 8006cee:	2300      	movne	r3, #0
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfa:	f003 0308 	and.w	r3, r3, #8
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d103      	bne.n	8006d0a <HAL_UART_IRQHandler+0x17a>
 8006d02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d04f      	beq.n	8006daa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 fc22 	bl	8007554 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d1a:	2b40      	cmp	r3, #64	; 0x40
 8006d1c:	d141      	bne.n	8006da2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	3314      	adds	r3, #20
 8006d24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d2c:	e853 3f00 	ldrex	r3, [r3]
 8006d30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	3314      	adds	r3, #20
 8006d46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d5a:	e841 2300 	strex	r3, r2, [r1]
 8006d5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1d9      	bne.n	8006d1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d013      	beq.n	8006d9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d76:	4a7d      	ldr	r2, [pc, #500]	; (8006f6c <HAL_UART_IRQHandler+0x3dc>)
 8006d78:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fc fbfe 	bl	8003580 <HAL_DMA_Abort_IT>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d016      	beq.n	8006db8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d94:	4610      	mov	r0, r2
 8006d96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d98:	e00e      	b.n	8006db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f9a4 	bl	80070e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006da0:	e00a      	b.n	8006db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f9a0 	bl	80070e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006da8:	e006      	b.n	8006db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f99c 	bl	80070e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006db6:	e170      	b.n	800709a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006db8:	bf00      	nop
    return;
 8006dba:	e16e      	b.n	800709a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	f040 814a 	bne.w	800705a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dca:	f003 0310 	and.w	r3, r3, #16
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f000 8143 	beq.w	800705a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dd8:	f003 0310 	and.w	r3, r3, #16
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f000 813c 	beq.w	800705a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006de2:	2300      	movs	r3, #0
 8006de4:	60bb      	str	r3, [r7, #8]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	60bb      	str	r3, [r7, #8]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	60bb      	str	r3, [r7, #8]
 8006df6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e02:	2b40      	cmp	r3, #64	; 0x40
 8006e04:	f040 80b4 	bne.w	8006f70 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f000 8140 	beq.w	800709e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e26:	429a      	cmp	r2, r3
 8006e28:	f080 8139 	bcs.w	800709e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e32:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e38:	69db      	ldr	r3, [r3, #28]
 8006e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e3e:	f000 8088 	beq.w	8006f52 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	330c      	adds	r3, #12
 8006e48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e50:	e853 3f00 	ldrex	r3, [r3]
 8006e54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	330c      	adds	r3, #12
 8006e6a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006e6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006e72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e76:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e7e:	e841 2300 	strex	r3, r2, [r1]
 8006e82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1d9      	bne.n	8006e42 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	3314      	adds	r3, #20
 8006e94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e98:	e853 3f00 	ldrex	r3, [r3]
 8006e9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006e9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ea0:	f023 0301 	bic.w	r3, r3, #1
 8006ea4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	3314      	adds	r3, #20
 8006eae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006eb2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006eb6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006eba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ebe:	e841 2300 	strex	r3, r2, [r1]
 8006ec2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ec4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1e1      	bne.n	8006e8e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	3314      	adds	r3, #20
 8006ed0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ed4:	e853 3f00 	ldrex	r3, [r3]
 8006ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006edc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ee0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	3314      	adds	r3, #20
 8006eea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006eee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ef0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ef4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ef6:	e841 2300 	strex	r3, r2, [r1]
 8006efa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006efc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1e3      	bne.n	8006eca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2220      	movs	r2, #32
 8006f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	330c      	adds	r3, #12
 8006f16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f1a:	e853 3f00 	ldrex	r3, [r3]
 8006f1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f22:	f023 0310 	bic.w	r3, r3, #16
 8006f26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	330c      	adds	r3, #12
 8006f30:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006f34:	65ba      	str	r2, [r7, #88]	; 0x58
 8006f36:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f3c:	e841 2300 	strex	r3, r2, [r1]
 8006f40:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1e3      	bne.n	8006f10 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7fc faa7 	bl	80034a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	4619      	mov	r1, r3
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7f9 ffa4 	bl	8000eb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f68:	e099      	b.n	800709e <HAL_UART_IRQHandler+0x50e>
 8006f6a:	bf00      	nop
 8006f6c:	0800761b 	.word	0x0800761b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f000 808b 	beq.w	80070a2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006f8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f000 8086 	beq.w	80070a2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	330c      	adds	r3, #12
 8006f9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa0:	e853 3f00 	ldrex	r3, [r3]
 8006fa4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	330c      	adds	r3, #12
 8006fb6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006fba:	647a      	str	r2, [r7, #68]	; 0x44
 8006fbc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006fc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fc2:	e841 2300 	strex	r3, r2, [r1]
 8006fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1e3      	bne.n	8006f96 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	3314      	adds	r3, #20
 8006fd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd8:	e853 3f00 	ldrex	r3, [r3]
 8006fdc:	623b      	str	r3, [r7, #32]
   return(result);
 8006fde:	6a3b      	ldr	r3, [r7, #32]
 8006fe0:	f023 0301 	bic.w	r3, r3, #1
 8006fe4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	3314      	adds	r3, #20
 8006fee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ff2:	633a      	str	r2, [r7, #48]	; 0x30
 8006ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ffa:	e841 2300 	strex	r3, r2, [r1]
 8006ffe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1e3      	bne.n	8006fce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2220      	movs	r2, #32
 800700a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	330c      	adds	r3, #12
 800701a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	e853 3f00 	ldrex	r3, [r3]
 8007022:	60fb      	str	r3, [r7, #12]
   return(result);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f023 0310 	bic.w	r3, r3, #16
 800702a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	330c      	adds	r3, #12
 8007034:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007038:	61fa      	str	r2, [r7, #28]
 800703a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703c:	69b9      	ldr	r1, [r7, #24]
 800703e:	69fa      	ldr	r2, [r7, #28]
 8007040:	e841 2300 	strex	r3, r2, [r1]
 8007044:	617b      	str	r3, [r7, #20]
   return(result);
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1e3      	bne.n	8007014 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800704c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007050:	4619      	mov	r1, r3
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f7f9 ff2c 	bl	8000eb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007058:	e023      	b.n	80070a2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800705a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800705e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007062:	2b00      	cmp	r3, #0
 8007064:	d009      	beq.n	800707a <HAL_UART_IRQHandler+0x4ea>
 8007066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800706a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800706e:	2b00      	cmp	r3, #0
 8007070:	d003      	beq.n	800707a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 fae5 	bl	8007642 <UART_Transmit_IT>
    return;
 8007078:	e014      	b.n	80070a4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800707a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800707e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00e      	beq.n	80070a4 <HAL_UART_IRQHandler+0x514>
 8007086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800708a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800708e:	2b00      	cmp	r3, #0
 8007090:	d008      	beq.n	80070a4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fb25 	bl	80076e2 <UART_EndTransmit_IT>
    return;
 8007098:	e004      	b.n	80070a4 <HAL_UART_IRQHandler+0x514>
    return;
 800709a:	bf00      	nop
 800709c:	e002      	b.n	80070a4 <HAL_UART_IRQHandler+0x514>
      return;
 800709e:	bf00      	nop
 80070a0:	e000      	b.n	80070a4 <HAL_UART_IRQHandler+0x514>
      return;
 80070a2:	bf00      	nop
  }
}
 80070a4:	37e8      	adds	r7, #232	; 0xe8
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop

080070ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80070b4:	bf00      	nop
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80070c8:	bf00      	nop
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80070f0:	bf00      	nop
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b09c      	sub	sp, #112	; 0x70
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007108:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007114:	2b00      	cmp	r3, #0
 8007116:	d172      	bne.n	80071fe <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800711a:	2200      	movs	r2, #0
 800711c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800711e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	330c      	adds	r3, #12
 8007124:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007128:	e853 3f00 	ldrex	r3, [r3]
 800712c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800712e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007130:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007134:	66bb      	str	r3, [r7, #104]	; 0x68
 8007136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	330c      	adds	r3, #12
 800713c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800713e:	65ba      	str	r2, [r7, #88]	; 0x58
 8007140:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007142:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007144:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007146:	e841 2300 	strex	r3, r2, [r1]
 800714a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800714c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800714e:	2b00      	cmp	r3, #0
 8007150:	d1e5      	bne.n	800711e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	3314      	adds	r3, #20
 8007158:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715c:	e853 3f00 	ldrex	r3, [r3]
 8007160:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007164:	f023 0301 	bic.w	r3, r3, #1
 8007168:	667b      	str	r3, [r7, #100]	; 0x64
 800716a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	3314      	adds	r3, #20
 8007170:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007172:	647a      	str	r2, [r7, #68]	; 0x44
 8007174:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007176:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007178:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800717a:	e841 2300 	strex	r3, r2, [r1]
 800717e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1e5      	bne.n	8007152 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	3314      	adds	r3, #20
 800718c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007190:	e853 3f00 	ldrex	r3, [r3]
 8007194:	623b      	str	r3, [r7, #32]
   return(result);
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800719c:	663b      	str	r3, [r7, #96]	; 0x60
 800719e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	3314      	adds	r3, #20
 80071a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80071a6:	633a      	str	r2, [r7, #48]	; 0x30
 80071a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071ae:	e841 2300 	strex	r3, r2, [r1]
 80071b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d1e5      	bne.n	8007186 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80071ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071bc:	2220      	movs	r2, #32
 80071be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d119      	bne.n	80071fe <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	330c      	adds	r3, #12
 80071d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	e853 3f00 	ldrex	r3, [r3]
 80071d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f023 0310 	bic.w	r3, r3, #16
 80071e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	330c      	adds	r3, #12
 80071e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80071ea:	61fa      	str	r2, [r7, #28]
 80071ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ee:	69b9      	ldr	r1, [r7, #24]
 80071f0:	69fa      	ldr	r2, [r7, #28]
 80071f2:	e841 2300 	strex	r3, r2, [r1]
 80071f6:	617b      	str	r3, [r7, #20]
   return(result);
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1e5      	bne.n	80071ca <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007202:	2b01      	cmp	r3, #1
 8007204:	d106      	bne.n	8007214 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007208:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800720a:	4619      	mov	r1, r3
 800720c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800720e:	f7f9 fe4f 	bl	8000eb0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007212:	e002      	b.n	800721a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007214:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007216:	f7ff ff53 	bl	80070c0 <HAL_UART_RxCpltCallback>
}
 800721a:	bf00      	nop
 800721c:	3770      	adds	r7, #112	; 0x70
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b084      	sub	sp, #16
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007234:	2b01      	cmp	r3, #1
 8007236:	d108      	bne.n	800724a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800723c:	085b      	lsrs	r3, r3, #1
 800723e:	b29b      	uxth	r3, r3
 8007240:	4619      	mov	r1, r3
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f7f9 fe34 	bl	8000eb0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007248:	e002      	b.n	8007250 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f7ff ff42 	bl	80070d4 <HAL_UART_RxHalfCpltCallback>
}
 8007250:	bf00      	nop
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007260:	2300      	movs	r3, #0
 8007262:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007268:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	695b      	ldr	r3, [r3, #20]
 8007270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007274:	2b80      	cmp	r3, #128	; 0x80
 8007276:	bf0c      	ite	eq
 8007278:	2301      	moveq	r3, #1
 800727a:	2300      	movne	r3, #0
 800727c:	b2db      	uxtb	r3, r3
 800727e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007286:	b2db      	uxtb	r3, r3
 8007288:	2b21      	cmp	r3, #33	; 0x21
 800728a:	d108      	bne.n	800729e <UART_DMAError+0x46>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d005      	beq.n	800729e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	2200      	movs	r2, #0
 8007296:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007298:	68b8      	ldr	r0, [r7, #8]
 800729a:	f000 f933 	bl	8007504 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	695b      	ldr	r3, [r3, #20]
 80072a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072a8:	2b40      	cmp	r3, #64	; 0x40
 80072aa:	bf0c      	ite	eq
 80072ac:	2301      	moveq	r3, #1
 80072ae:	2300      	movne	r3, #0
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	2b22      	cmp	r3, #34	; 0x22
 80072be:	d108      	bne.n	80072d2 <UART_DMAError+0x7a>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d005      	beq.n	80072d2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	2200      	movs	r2, #0
 80072ca:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80072cc:	68b8      	ldr	r0, [r7, #8]
 80072ce:	f000 f941 	bl	8007554 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d6:	f043 0210 	orr.w	r2, r3, #16
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072de:	68b8      	ldr	r0, [r7, #8]
 80072e0:	f7ff ff02 	bl	80070e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072e4:	bf00      	nop
 80072e6:	3710      	adds	r7, #16
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b090      	sub	sp, #64	; 0x40
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	603b      	str	r3, [r7, #0]
 80072f8:	4613      	mov	r3, r2
 80072fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072fc:	e050      	b.n	80073a0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007304:	d04c      	beq.n	80073a0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007308:	2b00      	cmp	r3, #0
 800730a:	d007      	beq.n	800731c <UART_WaitOnFlagUntilTimeout+0x30>
 800730c:	f7fb fe80 	bl	8003010 <HAL_GetTick>
 8007310:	4602      	mov	r2, r0
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007318:	429a      	cmp	r2, r3
 800731a:	d241      	bcs.n	80073a0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	330c      	adds	r3, #12
 8007322:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007326:	e853 3f00 	ldrex	r3, [r3]
 800732a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800732c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007332:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	330c      	adds	r3, #12
 800733a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800733c:	637a      	str	r2, [r7, #52]	; 0x34
 800733e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007340:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007342:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007344:	e841 2300 	strex	r3, r2, [r1]
 8007348:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800734a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1e5      	bne.n	800731c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	3314      	adds	r3, #20
 8007356:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	e853 3f00 	ldrex	r3, [r3]
 800735e:	613b      	str	r3, [r7, #16]
   return(result);
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	f023 0301 	bic.w	r3, r3, #1
 8007366:	63bb      	str	r3, [r7, #56]	; 0x38
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	3314      	adds	r3, #20
 800736e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007370:	623a      	str	r2, [r7, #32]
 8007372:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007374:	69f9      	ldr	r1, [r7, #28]
 8007376:	6a3a      	ldr	r2, [r7, #32]
 8007378:	e841 2300 	strex	r3, r2, [r1]
 800737c:	61bb      	str	r3, [r7, #24]
   return(result);
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1e5      	bne.n	8007350 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2220      	movs	r2, #32
 8007388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2220      	movs	r2, #32
 8007390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2200      	movs	r2, #0
 8007398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	e00f      	b.n	80073c0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	4013      	ands	r3, r2
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	bf0c      	ite	eq
 80073b0:	2301      	moveq	r3, #1
 80073b2:	2300      	movne	r3, #0
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	461a      	mov	r2, r3
 80073b8:	79fb      	ldrb	r3, [r7, #7]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d09f      	beq.n	80072fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3740      	adds	r7, #64	; 0x40
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b098      	sub	sp, #96	; 0x60
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	4613      	mov	r3, r2
 80073d4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	88fa      	ldrh	r2, [r7, #6]
 80073e0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2200      	movs	r2, #0
 80073e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2222      	movs	r2, #34	; 0x22
 80073ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f4:	4a40      	ldr	r2, [pc, #256]	; (80074f8 <UART_Start_Receive_DMA+0x130>)
 80073f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fc:	4a3f      	ldr	r2, [pc, #252]	; (80074fc <UART_Start_Receive_DMA+0x134>)
 80073fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007404:	4a3e      	ldr	r2, [pc, #248]	; (8007500 <UART_Start_Receive_DMA+0x138>)
 8007406:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740c:	2200      	movs	r2, #0
 800740e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007410:	f107 0308 	add.w	r3, r7, #8
 8007414:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	3304      	adds	r3, #4
 8007420:	4619      	mov	r1, r3
 8007422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	88fb      	ldrh	r3, [r7, #6]
 8007428:	f7fb ffe2 	bl	80033f0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800742c:	2300      	movs	r3, #0
 800742e:	613b      	str	r3, [r7, #16]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	613b      	str	r3, [r7, #16]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	613b      	str	r3, [r7, #16]
 8007440:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d019      	beq.n	8007486 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	330c      	adds	r3, #12
 8007458:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800745c:	e853 3f00 	ldrex	r3, [r3]
 8007460:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007468:	65bb      	str	r3, [r7, #88]	; 0x58
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	330c      	adds	r3, #12
 8007470:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007472:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007474:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007476:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007478:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800747a:	e841 2300 	strex	r3, r2, [r1]
 800747e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1e5      	bne.n	8007452 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	3314      	adds	r3, #20
 800748c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007490:	e853 3f00 	ldrex	r3, [r3]
 8007494:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007498:	f043 0301 	orr.w	r3, r3, #1
 800749c:	657b      	str	r3, [r7, #84]	; 0x54
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3314      	adds	r3, #20
 80074a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80074a6:	63ba      	str	r2, [r7, #56]	; 0x38
 80074a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80074ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074ae:	e841 2300 	strex	r3, r2, [r1]
 80074b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80074b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1e5      	bne.n	8007486 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	3314      	adds	r3, #20
 80074c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	e853 3f00 	ldrex	r3, [r3]
 80074c8:	617b      	str	r3, [r7, #20]
   return(result);
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074d0:	653b      	str	r3, [r7, #80]	; 0x50
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	3314      	adds	r3, #20
 80074d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80074da:	627a      	str	r2, [r7, #36]	; 0x24
 80074dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074de:	6a39      	ldr	r1, [r7, #32]
 80074e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074e2:	e841 2300 	strex	r3, r2, [r1]
 80074e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1e5      	bne.n	80074ba <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3760      	adds	r7, #96	; 0x60
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	080070fd 	.word	0x080070fd
 80074fc:	08007223 	.word	0x08007223
 8007500:	08007259 	.word	0x08007259

08007504 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007504:	b480      	push	{r7}
 8007506:	b089      	sub	sp, #36	; 0x24
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	330c      	adds	r3, #12
 8007512:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	e853 3f00 	ldrex	r3, [r3]
 800751a:	60bb      	str	r3, [r7, #8]
   return(result);
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007522:	61fb      	str	r3, [r7, #28]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	330c      	adds	r3, #12
 800752a:	69fa      	ldr	r2, [r7, #28]
 800752c:	61ba      	str	r2, [r7, #24]
 800752e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007530:	6979      	ldr	r1, [r7, #20]
 8007532:	69ba      	ldr	r2, [r7, #24]
 8007534:	e841 2300 	strex	r3, r2, [r1]
 8007538:	613b      	str	r3, [r7, #16]
   return(result);
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1e5      	bne.n	800750c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2220      	movs	r2, #32
 8007544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007548:	bf00      	nop
 800754a:	3724      	adds	r7, #36	; 0x24
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007554:	b480      	push	{r7}
 8007556:	b095      	sub	sp, #84	; 0x54
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	330c      	adds	r3, #12
 8007562:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007566:	e853 3f00 	ldrex	r3, [r3]
 800756a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800756c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007572:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	330c      	adds	r3, #12
 800757a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800757c:	643a      	str	r2, [r7, #64]	; 0x40
 800757e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007580:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007582:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007584:	e841 2300 	strex	r3, r2, [r1]
 8007588:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800758a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1e5      	bne.n	800755c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	3314      	adds	r3, #20
 8007596:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007598:	6a3b      	ldr	r3, [r7, #32]
 800759a:	e853 3f00 	ldrex	r3, [r3]
 800759e:	61fb      	str	r3, [r7, #28]
   return(result);
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	f023 0301 	bic.w	r3, r3, #1
 80075a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	3314      	adds	r3, #20
 80075ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075b8:	e841 2300 	strex	r3, r2, [r1]
 80075bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1e5      	bne.n	8007590 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d119      	bne.n	8007600 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	330c      	adds	r3, #12
 80075d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	e853 3f00 	ldrex	r3, [r3]
 80075da:	60bb      	str	r3, [r7, #8]
   return(result);
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	f023 0310 	bic.w	r3, r3, #16
 80075e2:	647b      	str	r3, [r7, #68]	; 0x44
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	330c      	adds	r3, #12
 80075ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075ec:	61ba      	str	r2, [r7, #24]
 80075ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f0:	6979      	ldr	r1, [r7, #20]
 80075f2:	69ba      	ldr	r2, [r7, #24]
 80075f4:	e841 2300 	strex	r3, r2, [r1]
 80075f8:	613b      	str	r3, [r7, #16]
   return(result);
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1e5      	bne.n	80075cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2220      	movs	r2, #32
 8007604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800760e:	bf00      	nop
 8007610:	3754      	adds	r7, #84	; 0x54
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr

0800761a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b084      	sub	sp, #16
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007626:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2200      	movs	r2, #0
 8007632:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f7ff fd57 	bl	80070e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800763a:	bf00      	nop
 800763c:	3710      	adds	r7, #16
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007642:	b480      	push	{r7}
 8007644:	b085      	sub	sp, #20
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007650:	b2db      	uxtb	r3, r3
 8007652:	2b21      	cmp	r3, #33	; 0x21
 8007654:	d13e      	bne.n	80076d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800765e:	d114      	bne.n	800768a <UART_Transmit_IT+0x48>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	691b      	ldr	r3, [r3, #16]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d110      	bne.n	800768a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a1b      	ldr	r3, [r3, #32]
 800766c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	461a      	mov	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800767c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a1b      	ldr	r3, [r3, #32]
 8007682:	1c9a      	adds	r2, r3, #2
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	621a      	str	r2, [r3, #32]
 8007688:	e008      	b.n	800769c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a1b      	ldr	r3, [r3, #32]
 800768e:	1c59      	adds	r1, r3, #1
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	6211      	str	r1, [r2, #32]
 8007694:	781a      	ldrb	r2, [r3, #0]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	3b01      	subs	r3, #1
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	4619      	mov	r1, r3
 80076aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d10f      	bne.n	80076d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68da      	ldr	r2, [r3, #12]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68da      	ldr	r2, [r3, #12]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80076d0:	2300      	movs	r3, #0
 80076d2:	e000      	b.n	80076d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80076d4:	2302      	movs	r3, #2
  }
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr

080076e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b082      	sub	sp, #8
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68da      	ldr	r2, [r3, #12]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2220      	movs	r2, #32
 80076fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f7ff fcd2 	bl	80070ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007712:	b580      	push	{r7, lr}
 8007714:	b08c      	sub	sp, #48	; 0x30
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b22      	cmp	r3, #34	; 0x22
 8007724:	f040 80ab 	bne.w	800787e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007730:	d117      	bne.n	8007762 <UART_Receive_IT+0x50>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d113      	bne.n	8007762 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800773a:	2300      	movs	r3, #0
 800773c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007742:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	b29b      	uxth	r3, r3
 800774c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007750:	b29a      	uxth	r2, r3
 8007752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007754:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775a:	1c9a      	adds	r2, r3, #2
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	629a      	str	r2, [r3, #40]	; 0x28
 8007760:	e026      	b.n	80077b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007766:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007768:	2300      	movs	r3, #0
 800776a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007774:	d007      	beq.n	8007786 <UART_Receive_IT+0x74>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d10a      	bne.n	8007794 <UART_Receive_IT+0x82>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d106      	bne.n	8007794 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	b2da      	uxtb	r2, r3
 800778e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007790:	701a      	strb	r2, [r3, #0]
 8007792:	e008      	b.n	80077a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	b2db      	uxtb	r3, r3
 800779c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077a0:	b2da      	uxtb	r2, r3
 80077a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077aa:	1c5a      	adds	r2, r3, #1
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	3b01      	subs	r3, #1
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	4619      	mov	r1, r3
 80077be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d15a      	bne.n	800787a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68da      	ldr	r2, [r3, #12]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f022 0220 	bic.w	r2, r2, #32
 80077d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68da      	ldr	r2, [r3, #12]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	695a      	ldr	r2, [r3, #20]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f022 0201 	bic.w	r2, r2, #1
 80077f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2220      	movs	r2, #32
 80077f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007800:	2b01      	cmp	r3, #1
 8007802:	d135      	bne.n	8007870 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	330c      	adds	r3, #12
 8007810:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	e853 3f00 	ldrex	r3, [r3]
 8007818:	613b      	str	r3, [r7, #16]
   return(result);
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	f023 0310 	bic.w	r3, r3, #16
 8007820:	627b      	str	r3, [r7, #36]	; 0x24
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	330c      	adds	r3, #12
 8007828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800782a:	623a      	str	r2, [r7, #32]
 800782c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782e:	69f9      	ldr	r1, [r7, #28]
 8007830:	6a3a      	ldr	r2, [r7, #32]
 8007832:	e841 2300 	strex	r3, r2, [r1]
 8007836:	61bb      	str	r3, [r7, #24]
   return(result);
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1e5      	bne.n	800780a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 0310 	and.w	r3, r3, #16
 8007848:	2b10      	cmp	r3, #16
 800784a:	d10a      	bne.n	8007862 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800784c:	2300      	movs	r3, #0
 800784e:	60fb      	str	r3, [r7, #12]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	60fb      	str	r3, [r7, #12]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	60fb      	str	r3, [r7, #12]
 8007860:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7f9 fb21 	bl	8000eb0 <HAL_UARTEx_RxEventCallback>
 800786e:	e002      	b.n	8007876 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f7ff fc25 	bl	80070c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	e002      	b.n	8007880 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	e000      	b.n	8007880 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800787e:	2302      	movs	r3, #2
  }
}
 8007880:	4618      	mov	r0, r3
 8007882:	3730      	adds	r7, #48	; 0x30
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800788c:	b0c0      	sub	sp, #256	; 0x100
 800788e:	af00      	add	r7, sp, #0
 8007890:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80078a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078a4:	68d9      	ldr	r1, [r3, #12]
 80078a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	ea40 0301 	orr.w	r3, r0, r1
 80078b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80078b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078b6:	689a      	ldr	r2, [r3, #8]
 80078b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	431a      	orrs	r2, r3
 80078c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	431a      	orrs	r2, r3
 80078c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078cc:	69db      	ldr	r3, [r3, #28]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80078d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80078e0:	f021 010c 	bic.w	r1, r1, #12
 80078e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80078ee:	430b      	orrs	r3, r1
 80078f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80078f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80078fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007902:	6999      	ldr	r1, [r3, #24]
 8007904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	ea40 0301 	orr.w	r3, r0, r1
 800790e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	4b8f      	ldr	r3, [pc, #572]	; (8007b54 <UART_SetConfig+0x2cc>)
 8007918:	429a      	cmp	r2, r3
 800791a:	d005      	beq.n	8007928 <UART_SetConfig+0xa0>
 800791c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	4b8d      	ldr	r3, [pc, #564]	; (8007b58 <UART_SetConfig+0x2d0>)
 8007924:	429a      	cmp	r2, r3
 8007926:	d104      	bne.n	8007932 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007928:	f7fe fadc 	bl	8005ee4 <HAL_RCC_GetPCLK2Freq>
 800792c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007930:	e003      	b.n	800793a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007932:	f7fe fac3 	bl	8005ebc <HAL_RCC_GetPCLK1Freq>
 8007936:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800793a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800793e:	69db      	ldr	r3, [r3, #28]
 8007940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007944:	f040 810c 	bne.w	8007b60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800794c:	2200      	movs	r2, #0
 800794e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007952:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007956:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800795a:	4622      	mov	r2, r4
 800795c:	462b      	mov	r3, r5
 800795e:	1891      	adds	r1, r2, r2
 8007960:	65b9      	str	r1, [r7, #88]	; 0x58
 8007962:	415b      	adcs	r3, r3
 8007964:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007966:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800796a:	4621      	mov	r1, r4
 800796c:	eb12 0801 	adds.w	r8, r2, r1
 8007970:	4629      	mov	r1, r5
 8007972:	eb43 0901 	adc.w	r9, r3, r1
 8007976:	f04f 0200 	mov.w	r2, #0
 800797a:	f04f 0300 	mov.w	r3, #0
 800797e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007982:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007986:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800798a:	4690      	mov	r8, r2
 800798c:	4699      	mov	r9, r3
 800798e:	4623      	mov	r3, r4
 8007990:	eb18 0303 	adds.w	r3, r8, r3
 8007994:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007998:	462b      	mov	r3, r5
 800799a:	eb49 0303 	adc.w	r3, r9, r3
 800799e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80079a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80079ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80079b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80079b6:	460b      	mov	r3, r1
 80079b8:	18db      	adds	r3, r3, r3
 80079ba:	653b      	str	r3, [r7, #80]	; 0x50
 80079bc:	4613      	mov	r3, r2
 80079be:	eb42 0303 	adc.w	r3, r2, r3
 80079c2:	657b      	str	r3, [r7, #84]	; 0x54
 80079c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80079c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80079cc:	f7f8 fc1a 	bl	8000204 <__aeabi_uldivmod>
 80079d0:	4602      	mov	r2, r0
 80079d2:	460b      	mov	r3, r1
 80079d4:	4b61      	ldr	r3, [pc, #388]	; (8007b5c <UART_SetConfig+0x2d4>)
 80079d6:	fba3 2302 	umull	r2, r3, r3, r2
 80079da:	095b      	lsrs	r3, r3, #5
 80079dc:	011c      	lsls	r4, r3, #4
 80079de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079e2:	2200      	movs	r2, #0
 80079e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80079ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80079f0:	4642      	mov	r2, r8
 80079f2:	464b      	mov	r3, r9
 80079f4:	1891      	adds	r1, r2, r2
 80079f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80079f8:	415b      	adcs	r3, r3
 80079fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007a00:	4641      	mov	r1, r8
 8007a02:	eb12 0a01 	adds.w	sl, r2, r1
 8007a06:	4649      	mov	r1, r9
 8007a08:	eb43 0b01 	adc.w	fp, r3, r1
 8007a0c:	f04f 0200 	mov.w	r2, #0
 8007a10:	f04f 0300 	mov.w	r3, #0
 8007a14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007a18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007a1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a20:	4692      	mov	sl, r2
 8007a22:	469b      	mov	fp, r3
 8007a24:	4643      	mov	r3, r8
 8007a26:	eb1a 0303 	adds.w	r3, sl, r3
 8007a2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a2e:	464b      	mov	r3, r9
 8007a30:	eb4b 0303 	adc.w	r3, fp, r3
 8007a34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007a48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	18db      	adds	r3, r3, r3
 8007a50:	643b      	str	r3, [r7, #64]	; 0x40
 8007a52:	4613      	mov	r3, r2
 8007a54:	eb42 0303 	adc.w	r3, r2, r3
 8007a58:	647b      	str	r3, [r7, #68]	; 0x44
 8007a5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007a5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007a62:	f7f8 fbcf 	bl	8000204 <__aeabi_uldivmod>
 8007a66:	4602      	mov	r2, r0
 8007a68:	460b      	mov	r3, r1
 8007a6a:	4611      	mov	r1, r2
 8007a6c:	4b3b      	ldr	r3, [pc, #236]	; (8007b5c <UART_SetConfig+0x2d4>)
 8007a6e:	fba3 2301 	umull	r2, r3, r3, r1
 8007a72:	095b      	lsrs	r3, r3, #5
 8007a74:	2264      	movs	r2, #100	; 0x64
 8007a76:	fb02 f303 	mul.w	r3, r2, r3
 8007a7a:	1acb      	subs	r3, r1, r3
 8007a7c:	00db      	lsls	r3, r3, #3
 8007a7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007a82:	4b36      	ldr	r3, [pc, #216]	; (8007b5c <UART_SetConfig+0x2d4>)
 8007a84:	fba3 2302 	umull	r2, r3, r3, r2
 8007a88:	095b      	lsrs	r3, r3, #5
 8007a8a:	005b      	lsls	r3, r3, #1
 8007a8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a90:	441c      	add	r4, r3
 8007a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a96:	2200      	movs	r2, #0
 8007a98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007aa0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007aa4:	4642      	mov	r2, r8
 8007aa6:	464b      	mov	r3, r9
 8007aa8:	1891      	adds	r1, r2, r2
 8007aaa:	63b9      	str	r1, [r7, #56]	; 0x38
 8007aac:	415b      	adcs	r3, r3
 8007aae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ab0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007ab4:	4641      	mov	r1, r8
 8007ab6:	1851      	adds	r1, r2, r1
 8007ab8:	6339      	str	r1, [r7, #48]	; 0x30
 8007aba:	4649      	mov	r1, r9
 8007abc:	414b      	adcs	r3, r1
 8007abe:	637b      	str	r3, [r7, #52]	; 0x34
 8007ac0:	f04f 0200 	mov.w	r2, #0
 8007ac4:	f04f 0300 	mov.w	r3, #0
 8007ac8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007acc:	4659      	mov	r1, fp
 8007ace:	00cb      	lsls	r3, r1, #3
 8007ad0:	4651      	mov	r1, sl
 8007ad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ad6:	4651      	mov	r1, sl
 8007ad8:	00ca      	lsls	r2, r1, #3
 8007ada:	4610      	mov	r0, r2
 8007adc:	4619      	mov	r1, r3
 8007ade:	4603      	mov	r3, r0
 8007ae0:	4642      	mov	r2, r8
 8007ae2:	189b      	adds	r3, r3, r2
 8007ae4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ae8:	464b      	mov	r3, r9
 8007aea:	460a      	mov	r2, r1
 8007aec:	eb42 0303 	adc.w	r3, r2, r3
 8007af0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007b00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007b04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007b08:	460b      	mov	r3, r1
 8007b0a:	18db      	adds	r3, r3, r3
 8007b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b0e:	4613      	mov	r3, r2
 8007b10:	eb42 0303 	adc.w	r3, r2, r3
 8007b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007b1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007b1e:	f7f8 fb71 	bl	8000204 <__aeabi_uldivmod>
 8007b22:	4602      	mov	r2, r0
 8007b24:	460b      	mov	r3, r1
 8007b26:	4b0d      	ldr	r3, [pc, #52]	; (8007b5c <UART_SetConfig+0x2d4>)
 8007b28:	fba3 1302 	umull	r1, r3, r3, r2
 8007b2c:	095b      	lsrs	r3, r3, #5
 8007b2e:	2164      	movs	r1, #100	; 0x64
 8007b30:	fb01 f303 	mul.w	r3, r1, r3
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	00db      	lsls	r3, r3, #3
 8007b38:	3332      	adds	r3, #50	; 0x32
 8007b3a:	4a08      	ldr	r2, [pc, #32]	; (8007b5c <UART_SetConfig+0x2d4>)
 8007b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b40:	095b      	lsrs	r3, r3, #5
 8007b42:	f003 0207 	and.w	r2, r3, #7
 8007b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4422      	add	r2, r4
 8007b4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b50:	e105      	b.n	8007d5e <UART_SetConfig+0x4d6>
 8007b52:	bf00      	nop
 8007b54:	40011000 	.word	0x40011000
 8007b58:	40011400 	.word	0x40011400
 8007b5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b64:	2200      	movs	r2, #0
 8007b66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007b6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007b6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007b72:	4642      	mov	r2, r8
 8007b74:	464b      	mov	r3, r9
 8007b76:	1891      	adds	r1, r2, r2
 8007b78:	6239      	str	r1, [r7, #32]
 8007b7a:	415b      	adcs	r3, r3
 8007b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8007b7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b82:	4641      	mov	r1, r8
 8007b84:	1854      	adds	r4, r2, r1
 8007b86:	4649      	mov	r1, r9
 8007b88:	eb43 0501 	adc.w	r5, r3, r1
 8007b8c:	f04f 0200 	mov.w	r2, #0
 8007b90:	f04f 0300 	mov.w	r3, #0
 8007b94:	00eb      	lsls	r3, r5, #3
 8007b96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b9a:	00e2      	lsls	r2, r4, #3
 8007b9c:	4614      	mov	r4, r2
 8007b9e:	461d      	mov	r5, r3
 8007ba0:	4643      	mov	r3, r8
 8007ba2:	18e3      	adds	r3, r4, r3
 8007ba4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007ba8:	464b      	mov	r3, r9
 8007baa:	eb45 0303 	adc.w	r3, r5, r3
 8007bae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007bbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007bc2:	f04f 0200 	mov.w	r2, #0
 8007bc6:	f04f 0300 	mov.w	r3, #0
 8007bca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007bce:	4629      	mov	r1, r5
 8007bd0:	008b      	lsls	r3, r1, #2
 8007bd2:	4621      	mov	r1, r4
 8007bd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bd8:	4621      	mov	r1, r4
 8007bda:	008a      	lsls	r2, r1, #2
 8007bdc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007be0:	f7f8 fb10 	bl	8000204 <__aeabi_uldivmod>
 8007be4:	4602      	mov	r2, r0
 8007be6:	460b      	mov	r3, r1
 8007be8:	4b60      	ldr	r3, [pc, #384]	; (8007d6c <UART_SetConfig+0x4e4>)
 8007bea:	fba3 2302 	umull	r2, r3, r3, r2
 8007bee:	095b      	lsrs	r3, r3, #5
 8007bf0:	011c      	lsls	r4, r3, #4
 8007bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007bfc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007c00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007c04:	4642      	mov	r2, r8
 8007c06:	464b      	mov	r3, r9
 8007c08:	1891      	adds	r1, r2, r2
 8007c0a:	61b9      	str	r1, [r7, #24]
 8007c0c:	415b      	adcs	r3, r3
 8007c0e:	61fb      	str	r3, [r7, #28]
 8007c10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c14:	4641      	mov	r1, r8
 8007c16:	1851      	adds	r1, r2, r1
 8007c18:	6139      	str	r1, [r7, #16]
 8007c1a:	4649      	mov	r1, r9
 8007c1c:	414b      	adcs	r3, r1
 8007c1e:	617b      	str	r3, [r7, #20]
 8007c20:	f04f 0200 	mov.w	r2, #0
 8007c24:	f04f 0300 	mov.w	r3, #0
 8007c28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c2c:	4659      	mov	r1, fp
 8007c2e:	00cb      	lsls	r3, r1, #3
 8007c30:	4651      	mov	r1, sl
 8007c32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c36:	4651      	mov	r1, sl
 8007c38:	00ca      	lsls	r2, r1, #3
 8007c3a:	4610      	mov	r0, r2
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	4603      	mov	r3, r0
 8007c40:	4642      	mov	r2, r8
 8007c42:	189b      	adds	r3, r3, r2
 8007c44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c48:	464b      	mov	r3, r9
 8007c4a:	460a      	mov	r2, r1
 8007c4c:	eb42 0303 	adc.w	r3, r2, r3
 8007c50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007c60:	f04f 0200 	mov.w	r2, #0
 8007c64:	f04f 0300 	mov.w	r3, #0
 8007c68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007c6c:	4649      	mov	r1, r9
 8007c6e:	008b      	lsls	r3, r1, #2
 8007c70:	4641      	mov	r1, r8
 8007c72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c76:	4641      	mov	r1, r8
 8007c78:	008a      	lsls	r2, r1, #2
 8007c7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007c7e:	f7f8 fac1 	bl	8000204 <__aeabi_uldivmod>
 8007c82:	4602      	mov	r2, r0
 8007c84:	460b      	mov	r3, r1
 8007c86:	4b39      	ldr	r3, [pc, #228]	; (8007d6c <UART_SetConfig+0x4e4>)
 8007c88:	fba3 1302 	umull	r1, r3, r3, r2
 8007c8c:	095b      	lsrs	r3, r3, #5
 8007c8e:	2164      	movs	r1, #100	; 0x64
 8007c90:	fb01 f303 	mul.w	r3, r1, r3
 8007c94:	1ad3      	subs	r3, r2, r3
 8007c96:	011b      	lsls	r3, r3, #4
 8007c98:	3332      	adds	r3, #50	; 0x32
 8007c9a:	4a34      	ldr	r2, [pc, #208]	; (8007d6c <UART_SetConfig+0x4e4>)
 8007c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca0:	095b      	lsrs	r3, r3, #5
 8007ca2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ca6:	441c      	add	r4, r3
 8007ca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cac:	2200      	movs	r2, #0
 8007cae:	673b      	str	r3, [r7, #112]	; 0x70
 8007cb0:	677a      	str	r2, [r7, #116]	; 0x74
 8007cb2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007cb6:	4642      	mov	r2, r8
 8007cb8:	464b      	mov	r3, r9
 8007cba:	1891      	adds	r1, r2, r2
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	415b      	adcs	r3, r3
 8007cc0:	60fb      	str	r3, [r7, #12]
 8007cc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007cc6:	4641      	mov	r1, r8
 8007cc8:	1851      	adds	r1, r2, r1
 8007cca:	6039      	str	r1, [r7, #0]
 8007ccc:	4649      	mov	r1, r9
 8007cce:	414b      	adcs	r3, r1
 8007cd0:	607b      	str	r3, [r7, #4]
 8007cd2:	f04f 0200 	mov.w	r2, #0
 8007cd6:	f04f 0300 	mov.w	r3, #0
 8007cda:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007cde:	4659      	mov	r1, fp
 8007ce0:	00cb      	lsls	r3, r1, #3
 8007ce2:	4651      	mov	r1, sl
 8007ce4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ce8:	4651      	mov	r1, sl
 8007cea:	00ca      	lsls	r2, r1, #3
 8007cec:	4610      	mov	r0, r2
 8007cee:	4619      	mov	r1, r3
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	4642      	mov	r2, r8
 8007cf4:	189b      	adds	r3, r3, r2
 8007cf6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007cf8:	464b      	mov	r3, r9
 8007cfa:	460a      	mov	r2, r1
 8007cfc:	eb42 0303 	adc.w	r3, r2, r3
 8007d00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	663b      	str	r3, [r7, #96]	; 0x60
 8007d0c:	667a      	str	r2, [r7, #100]	; 0x64
 8007d0e:	f04f 0200 	mov.w	r2, #0
 8007d12:	f04f 0300 	mov.w	r3, #0
 8007d16:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007d1a:	4649      	mov	r1, r9
 8007d1c:	008b      	lsls	r3, r1, #2
 8007d1e:	4641      	mov	r1, r8
 8007d20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d24:	4641      	mov	r1, r8
 8007d26:	008a      	lsls	r2, r1, #2
 8007d28:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007d2c:	f7f8 fa6a 	bl	8000204 <__aeabi_uldivmod>
 8007d30:	4602      	mov	r2, r0
 8007d32:	460b      	mov	r3, r1
 8007d34:	4b0d      	ldr	r3, [pc, #52]	; (8007d6c <UART_SetConfig+0x4e4>)
 8007d36:	fba3 1302 	umull	r1, r3, r3, r2
 8007d3a:	095b      	lsrs	r3, r3, #5
 8007d3c:	2164      	movs	r1, #100	; 0x64
 8007d3e:	fb01 f303 	mul.w	r3, r1, r3
 8007d42:	1ad3      	subs	r3, r2, r3
 8007d44:	011b      	lsls	r3, r3, #4
 8007d46:	3332      	adds	r3, #50	; 0x32
 8007d48:	4a08      	ldr	r2, [pc, #32]	; (8007d6c <UART_SetConfig+0x4e4>)
 8007d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d4e:	095b      	lsrs	r3, r3, #5
 8007d50:	f003 020f 	and.w	r2, r3, #15
 8007d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4422      	add	r2, r4
 8007d5c:	609a      	str	r2, [r3, #8]
}
 8007d5e:	bf00      	nop
 8007d60:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007d64:	46bd      	mov	sp, r7
 8007d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d6a:	bf00      	nop
 8007d6c:	51eb851f 	.word	0x51eb851f

08007d70 <__errno>:
 8007d70:	4b01      	ldr	r3, [pc, #4]	; (8007d78 <__errno+0x8>)
 8007d72:	6818      	ldr	r0, [r3, #0]
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	2000009c 	.word	0x2000009c

08007d7c <__libc_init_array>:
 8007d7c:	b570      	push	{r4, r5, r6, lr}
 8007d7e:	4d0d      	ldr	r5, [pc, #52]	; (8007db4 <__libc_init_array+0x38>)
 8007d80:	4c0d      	ldr	r4, [pc, #52]	; (8007db8 <__libc_init_array+0x3c>)
 8007d82:	1b64      	subs	r4, r4, r5
 8007d84:	10a4      	asrs	r4, r4, #2
 8007d86:	2600      	movs	r6, #0
 8007d88:	42a6      	cmp	r6, r4
 8007d8a:	d109      	bne.n	8007da0 <__libc_init_array+0x24>
 8007d8c:	4d0b      	ldr	r5, [pc, #44]	; (8007dbc <__libc_init_array+0x40>)
 8007d8e:	4c0c      	ldr	r4, [pc, #48]	; (8007dc0 <__libc_init_array+0x44>)
 8007d90:	f000 fd3c 	bl	800880c <_init>
 8007d94:	1b64      	subs	r4, r4, r5
 8007d96:	10a4      	asrs	r4, r4, #2
 8007d98:	2600      	movs	r6, #0
 8007d9a:	42a6      	cmp	r6, r4
 8007d9c:	d105      	bne.n	8007daa <__libc_init_array+0x2e>
 8007d9e:	bd70      	pop	{r4, r5, r6, pc}
 8007da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007da4:	4798      	blx	r3
 8007da6:	3601      	adds	r6, #1
 8007da8:	e7ee      	b.n	8007d88 <__libc_init_array+0xc>
 8007daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dae:	4798      	blx	r3
 8007db0:	3601      	adds	r6, #1
 8007db2:	e7f2      	b.n	8007d9a <__libc_init_array+0x1e>
 8007db4:	080089dc 	.word	0x080089dc
 8007db8:	080089dc 	.word	0x080089dc
 8007dbc:	080089dc 	.word	0x080089dc
 8007dc0:	080089e0 	.word	0x080089e0

08007dc4 <memcmp>:
 8007dc4:	b510      	push	{r4, lr}
 8007dc6:	3901      	subs	r1, #1
 8007dc8:	4402      	add	r2, r0
 8007dca:	4290      	cmp	r0, r2
 8007dcc:	d101      	bne.n	8007dd2 <memcmp+0xe>
 8007dce:	2000      	movs	r0, #0
 8007dd0:	e005      	b.n	8007dde <memcmp+0x1a>
 8007dd2:	7803      	ldrb	r3, [r0, #0]
 8007dd4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007dd8:	42a3      	cmp	r3, r4
 8007dda:	d001      	beq.n	8007de0 <memcmp+0x1c>
 8007ddc:	1b18      	subs	r0, r3, r4
 8007dde:	bd10      	pop	{r4, pc}
 8007de0:	3001      	adds	r0, #1
 8007de2:	e7f2      	b.n	8007dca <memcmp+0x6>

08007de4 <memcpy>:
 8007de4:	440a      	add	r2, r1
 8007de6:	4291      	cmp	r1, r2
 8007de8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007dec:	d100      	bne.n	8007df0 <memcpy+0xc>
 8007dee:	4770      	bx	lr
 8007df0:	b510      	push	{r4, lr}
 8007df2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007df6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dfa:	4291      	cmp	r1, r2
 8007dfc:	d1f9      	bne.n	8007df2 <memcpy+0xe>
 8007dfe:	bd10      	pop	{r4, pc}

08007e00 <memset>:
 8007e00:	4402      	add	r2, r0
 8007e02:	4603      	mov	r3, r0
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d100      	bne.n	8007e0a <memset+0xa>
 8007e08:	4770      	bx	lr
 8007e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8007e0e:	e7f9      	b.n	8007e04 <memset+0x4>

08007e10 <_puts_r>:
 8007e10:	b570      	push	{r4, r5, r6, lr}
 8007e12:	460e      	mov	r6, r1
 8007e14:	4605      	mov	r5, r0
 8007e16:	b118      	cbz	r0, 8007e20 <_puts_r+0x10>
 8007e18:	6983      	ldr	r3, [r0, #24]
 8007e1a:	b90b      	cbnz	r3, 8007e20 <_puts_r+0x10>
 8007e1c:	f000 fa48 	bl	80082b0 <__sinit>
 8007e20:	69ab      	ldr	r3, [r5, #24]
 8007e22:	68ac      	ldr	r4, [r5, #8]
 8007e24:	b913      	cbnz	r3, 8007e2c <_puts_r+0x1c>
 8007e26:	4628      	mov	r0, r5
 8007e28:	f000 fa42 	bl	80082b0 <__sinit>
 8007e2c:	4b2c      	ldr	r3, [pc, #176]	; (8007ee0 <_puts_r+0xd0>)
 8007e2e:	429c      	cmp	r4, r3
 8007e30:	d120      	bne.n	8007e74 <_puts_r+0x64>
 8007e32:	686c      	ldr	r4, [r5, #4]
 8007e34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e36:	07db      	lsls	r3, r3, #31
 8007e38:	d405      	bmi.n	8007e46 <_puts_r+0x36>
 8007e3a:	89a3      	ldrh	r3, [r4, #12]
 8007e3c:	0598      	lsls	r0, r3, #22
 8007e3e:	d402      	bmi.n	8007e46 <_puts_r+0x36>
 8007e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e42:	f000 fad3 	bl	80083ec <__retarget_lock_acquire_recursive>
 8007e46:	89a3      	ldrh	r3, [r4, #12]
 8007e48:	0719      	lsls	r1, r3, #28
 8007e4a:	d51d      	bpl.n	8007e88 <_puts_r+0x78>
 8007e4c:	6923      	ldr	r3, [r4, #16]
 8007e4e:	b1db      	cbz	r3, 8007e88 <_puts_r+0x78>
 8007e50:	3e01      	subs	r6, #1
 8007e52:	68a3      	ldr	r3, [r4, #8]
 8007e54:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	60a3      	str	r3, [r4, #8]
 8007e5c:	bb39      	cbnz	r1, 8007eae <_puts_r+0x9e>
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	da38      	bge.n	8007ed4 <_puts_r+0xc4>
 8007e62:	4622      	mov	r2, r4
 8007e64:	210a      	movs	r1, #10
 8007e66:	4628      	mov	r0, r5
 8007e68:	f000 f848 	bl	8007efc <__swbuf_r>
 8007e6c:	3001      	adds	r0, #1
 8007e6e:	d011      	beq.n	8007e94 <_puts_r+0x84>
 8007e70:	250a      	movs	r5, #10
 8007e72:	e011      	b.n	8007e98 <_puts_r+0x88>
 8007e74:	4b1b      	ldr	r3, [pc, #108]	; (8007ee4 <_puts_r+0xd4>)
 8007e76:	429c      	cmp	r4, r3
 8007e78:	d101      	bne.n	8007e7e <_puts_r+0x6e>
 8007e7a:	68ac      	ldr	r4, [r5, #8]
 8007e7c:	e7da      	b.n	8007e34 <_puts_r+0x24>
 8007e7e:	4b1a      	ldr	r3, [pc, #104]	; (8007ee8 <_puts_r+0xd8>)
 8007e80:	429c      	cmp	r4, r3
 8007e82:	bf08      	it	eq
 8007e84:	68ec      	ldreq	r4, [r5, #12]
 8007e86:	e7d5      	b.n	8007e34 <_puts_r+0x24>
 8007e88:	4621      	mov	r1, r4
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	f000 f888 	bl	8007fa0 <__swsetup_r>
 8007e90:	2800      	cmp	r0, #0
 8007e92:	d0dd      	beq.n	8007e50 <_puts_r+0x40>
 8007e94:	f04f 35ff 	mov.w	r5, #4294967295
 8007e98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e9a:	07da      	lsls	r2, r3, #31
 8007e9c:	d405      	bmi.n	8007eaa <_puts_r+0x9a>
 8007e9e:	89a3      	ldrh	r3, [r4, #12]
 8007ea0:	059b      	lsls	r3, r3, #22
 8007ea2:	d402      	bmi.n	8007eaa <_puts_r+0x9a>
 8007ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ea6:	f000 faa2 	bl	80083ee <__retarget_lock_release_recursive>
 8007eaa:	4628      	mov	r0, r5
 8007eac:	bd70      	pop	{r4, r5, r6, pc}
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	da04      	bge.n	8007ebc <_puts_r+0xac>
 8007eb2:	69a2      	ldr	r2, [r4, #24]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	dc06      	bgt.n	8007ec6 <_puts_r+0xb6>
 8007eb8:	290a      	cmp	r1, #10
 8007eba:	d004      	beq.n	8007ec6 <_puts_r+0xb6>
 8007ebc:	6823      	ldr	r3, [r4, #0]
 8007ebe:	1c5a      	adds	r2, r3, #1
 8007ec0:	6022      	str	r2, [r4, #0]
 8007ec2:	7019      	strb	r1, [r3, #0]
 8007ec4:	e7c5      	b.n	8007e52 <_puts_r+0x42>
 8007ec6:	4622      	mov	r2, r4
 8007ec8:	4628      	mov	r0, r5
 8007eca:	f000 f817 	bl	8007efc <__swbuf_r>
 8007ece:	3001      	adds	r0, #1
 8007ed0:	d1bf      	bne.n	8007e52 <_puts_r+0x42>
 8007ed2:	e7df      	b.n	8007e94 <_puts_r+0x84>
 8007ed4:	6823      	ldr	r3, [r4, #0]
 8007ed6:	250a      	movs	r5, #10
 8007ed8:	1c5a      	adds	r2, r3, #1
 8007eda:	6022      	str	r2, [r4, #0]
 8007edc:	701d      	strb	r5, [r3, #0]
 8007ede:	e7db      	b.n	8007e98 <_puts_r+0x88>
 8007ee0:	08008994 	.word	0x08008994
 8007ee4:	080089b4 	.word	0x080089b4
 8007ee8:	08008974 	.word	0x08008974

08007eec <puts>:
 8007eec:	4b02      	ldr	r3, [pc, #8]	; (8007ef8 <puts+0xc>)
 8007eee:	4601      	mov	r1, r0
 8007ef0:	6818      	ldr	r0, [r3, #0]
 8007ef2:	f7ff bf8d 	b.w	8007e10 <_puts_r>
 8007ef6:	bf00      	nop
 8007ef8:	2000009c 	.word	0x2000009c

08007efc <__swbuf_r>:
 8007efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007efe:	460e      	mov	r6, r1
 8007f00:	4614      	mov	r4, r2
 8007f02:	4605      	mov	r5, r0
 8007f04:	b118      	cbz	r0, 8007f0e <__swbuf_r+0x12>
 8007f06:	6983      	ldr	r3, [r0, #24]
 8007f08:	b90b      	cbnz	r3, 8007f0e <__swbuf_r+0x12>
 8007f0a:	f000 f9d1 	bl	80082b0 <__sinit>
 8007f0e:	4b21      	ldr	r3, [pc, #132]	; (8007f94 <__swbuf_r+0x98>)
 8007f10:	429c      	cmp	r4, r3
 8007f12:	d12b      	bne.n	8007f6c <__swbuf_r+0x70>
 8007f14:	686c      	ldr	r4, [r5, #4]
 8007f16:	69a3      	ldr	r3, [r4, #24]
 8007f18:	60a3      	str	r3, [r4, #8]
 8007f1a:	89a3      	ldrh	r3, [r4, #12]
 8007f1c:	071a      	lsls	r2, r3, #28
 8007f1e:	d52f      	bpl.n	8007f80 <__swbuf_r+0x84>
 8007f20:	6923      	ldr	r3, [r4, #16]
 8007f22:	b36b      	cbz	r3, 8007f80 <__swbuf_r+0x84>
 8007f24:	6923      	ldr	r3, [r4, #16]
 8007f26:	6820      	ldr	r0, [r4, #0]
 8007f28:	1ac0      	subs	r0, r0, r3
 8007f2a:	6963      	ldr	r3, [r4, #20]
 8007f2c:	b2f6      	uxtb	r6, r6
 8007f2e:	4283      	cmp	r3, r0
 8007f30:	4637      	mov	r7, r6
 8007f32:	dc04      	bgt.n	8007f3e <__swbuf_r+0x42>
 8007f34:	4621      	mov	r1, r4
 8007f36:	4628      	mov	r0, r5
 8007f38:	f000 f926 	bl	8008188 <_fflush_r>
 8007f3c:	bb30      	cbnz	r0, 8007f8c <__swbuf_r+0x90>
 8007f3e:	68a3      	ldr	r3, [r4, #8]
 8007f40:	3b01      	subs	r3, #1
 8007f42:	60a3      	str	r3, [r4, #8]
 8007f44:	6823      	ldr	r3, [r4, #0]
 8007f46:	1c5a      	adds	r2, r3, #1
 8007f48:	6022      	str	r2, [r4, #0]
 8007f4a:	701e      	strb	r6, [r3, #0]
 8007f4c:	6963      	ldr	r3, [r4, #20]
 8007f4e:	3001      	adds	r0, #1
 8007f50:	4283      	cmp	r3, r0
 8007f52:	d004      	beq.n	8007f5e <__swbuf_r+0x62>
 8007f54:	89a3      	ldrh	r3, [r4, #12]
 8007f56:	07db      	lsls	r3, r3, #31
 8007f58:	d506      	bpl.n	8007f68 <__swbuf_r+0x6c>
 8007f5a:	2e0a      	cmp	r6, #10
 8007f5c:	d104      	bne.n	8007f68 <__swbuf_r+0x6c>
 8007f5e:	4621      	mov	r1, r4
 8007f60:	4628      	mov	r0, r5
 8007f62:	f000 f911 	bl	8008188 <_fflush_r>
 8007f66:	b988      	cbnz	r0, 8007f8c <__swbuf_r+0x90>
 8007f68:	4638      	mov	r0, r7
 8007f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f6c:	4b0a      	ldr	r3, [pc, #40]	; (8007f98 <__swbuf_r+0x9c>)
 8007f6e:	429c      	cmp	r4, r3
 8007f70:	d101      	bne.n	8007f76 <__swbuf_r+0x7a>
 8007f72:	68ac      	ldr	r4, [r5, #8]
 8007f74:	e7cf      	b.n	8007f16 <__swbuf_r+0x1a>
 8007f76:	4b09      	ldr	r3, [pc, #36]	; (8007f9c <__swbuf_r+0xa0>)
 8007f78:	429c      	cmp	r4, r3
 8007f7a:	bf08      	it	eq
 8007f7c:	68ec      	ldreq	r4, [r5, #12]
 8007f7e:	e7ca      	b.n	8007f16 <__swbuf_r+0x1a>
 8007f80:	4621      	mov	r1, r4
 8007f82:	4628      	mov	r0, r5
 8007f84:	f000 f80c 	bl	8007fa0 <__swsetup_r>
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	d0cb      	beq.n	8007f24 <__swbuf_r+0x28>
 8007f8c:	f04f 37ff 	mov.w	r7, #4294967295
 8007f90:	e7ea      	b.n	8007f68 <__swbuf_r+0x6c>
 8007f92:	bf00      	nop
 8007f94:	08008994 	.word	0x08008994
 8007f98:	080089b4 	.word	0x080089b4
 8007f9c:	08008974 	.word	0x08008974

08007fa0 <__swsetup_r>:
 8007fa0:	4b32      	ldr	r3, [pc, #200]	; (800806c <__swsetup_r+0xcc>)
 8007fa2:	b570      	push	{r4, r5, r6, lr}
 8007fa4:	681d      	ldr	r5, [r3, #0]
 8007fa6:	4606      	mov	r6, r0
 8007fa8:	460c      	mov	r4, r1
 8007faa:	b125      	cbz	r5, 8007fb6 <__swsetup_r+0x16>
 8007fac:	69ab      	ldr	r3, [r5, #24]
 8007fae:	b913      	cbnz	r3, 8007fb6 <__swsetup_r+0x16>
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	f000 f97d 	bl	80082b0 <__sinit>
 8007fb6:	4b2e      	ldr	r3, [pc, #184]	; (8008070 <__swsetup_r+0xd0>)
 8007fb8:	429c      	cmp	r4, r3
 8007fba:	d10f      	bne.n	8007fdc <__swsetup_r+0x3c>
 8007fbc:	686c      	ldr	r4, [r5, #4]
 8007fbe:	89a3      	ldrh	r3, [r4, #12]
 8007fc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fc4:	0719      	lsls	r1, r3, #28
 8007fc6:	d42c      	bmi.n	8008022 <__swsetup_r+0x82>
 8007fc8:	06dd      	lsls	r5, r3, #27
 8007fca:	d411      	bmi.n	8007ff0 <__swsetup_r+0x50>
 8007fcc:	2309      	movs	r3, #9
 8007fce:	6033      	str	r3, [r6, #0]
 8007fd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007fd4:	81a3      	strh	r3, [r4, #12]
 8007fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8007fda:	e03e      	b.n	800805a <__swsetup_r+0xba>
 8007fdc:	4b25      	ldr	r3, [pc, #148]	; (8008074 <__swsetup_r+0xd4>)
 8007fde:	429c      	cmp	r4, r3
 8007fe0:	d101      	bne.n	8007fe6 <__swsetup_r+0x46>
 8007fe2:	68ac      	ldr	r4, [r5, #8]
 8007fe4:	e7eb      	b.n	8007fbe <__swsetup_r+0x1e>
 8007fe6:	4b24      	ldr	r3, [pc, #144]	; (8008078 <__swsetup_r+0xd8>)
 8007fe8:	429c      	cmp	r4, r3
 8007fea:	bf08      	it	eq
 8007fec:	68ec      	ldreq	r4, [r5, #12]
 8007fee:	e7e6      	b.n	8007fbe <__swsetup_r+0x1e>
 8007ff0:	0758      	lsls	r0, r3, #29
 8007ff2:	d512      	bpl.n	800801a <__swsetup_r+0x7a>
 8007ff4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ff6:	b141      	cbz	r1, 800800a <__swsetup_r+0x6a>
 8007ff8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ffc:	4299      	cmp	r1, r3
 8007ffe:	d002      	beq.n	8008006 <__swsetup_r+0x66>
 8008000:	4630      	mov	r0, r6
 8008002:	f000 fa5b 	bl	80084bc <_free_r>
 8008006:	2300      	movs	r3, #0
 8008008:	6363      	str	r3, [r4, #52]	; 0x34
 800800a:	89a3      	ldrh	r3, [r4, #12]
 800800c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008010:	81a3      	strh	r3, [r4, #12]
 8008012:	2300      	movs	r3, #0
 8008014:	6063      	str	r3, [r4, #4]
 8008016:	6923      	ldr	r3, [r4, #16]
 8008018:	6023      	str	r3, [r4, #0]
 800801a:	89a3      	ldrh	r3, [r4, #12]
 800801c:	f043 0308 	orr.w	r3, r3, #8
 8008020:	81a3      	strh	r3, [r4, #12]
 8008022:	6923      	ldr	r3, [r4, #16]
 8008024:	b94b      	cbnz	r3, 800803a <__swsetup_r+0x9a>
 8008026:	89a3      	ldrh	r3, [r4, #12]
 8008028:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800802c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008030:	d003      	beq.n	800803a <__swsetup_r+0x9a>
 8008032:	4621      	mov	r1, r4
 8008034:	4630      	mov	r0, r6
 8008036:	f000 fa01 	bl	800843c <__smakebuf_r>
 800803a:	89a0      	ldrh	r0, [r4, #12]
 800803c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008040:	f010 0301 	ands.w	r3, r0, #1
 8008044:	d00a      	beq.n	800805c <__swsetup_r+0xbc>
 8008046:	2300      	movs	r3, #0
 8008048:	60a3      	str	r3, [r4, #8]
 800804a:	6963      	ldr	r3, [r4, #20]
 800804c:	425b      	negs	r3, r3
 800804e:	61a3      	str	r3, [r4, #24]
 8008050:	6923      	ldr	r3, [r4, #16]
 8008052:	b943      	cbnz	r3, 8008066 <__swsetup_r+0xc6>
 8008054:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008058:	d1ba      	bne.n	8007fd0 <__swsetup_r+0x30>
 800805a:	bd70      	pop	{r4, r5, r6, pc}
 800805c:	0781      	lsls	r1, r0, #30
 800805e:	bf58      	it	pl
 8008060:	6963      	ldrpl	r3, [r4, #20]
 8008062:	60a3      	str	r3, [r4, #8]
 8008064:	e7f4      	b.n	8008050 <__swsetup_r+0xb0>
 8008066:	2000      	movs	r0, #0
 8008068:	e7f7      	b.n	800805a <__swsetup_r+0xba>
 800806a:	bf00      	nop
 800806c:	2000009c 	.word	0x2000009c
 8008070:	08008994 	.word	0x08008994
 8008074:	080089b4 	.word	0x080089b4
 8008078:	08008974 	.word	0x08008974

0800807c <__sflush_r>:
 800807c:	898a      	ldrh	r2, [r1, #12]
 800807e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008082:	4605      	mov	r5, r0
 8008084:	0710      	lsls	r0, r2, #28
 8008086:	460c      	mov	r4, r1
 8008088:	d458      	bmi.n	800813c <__sflush_r+0xc0>
 800808a:	684b      	ldr	r3, [r1, #4]
 800808c:	2b00      	cmp	r3, #0
 800808e:	dc05      	bgt.n	800809c <__sflush_r+0x20>
 8008090:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008092:	2b00      	cmp	r3, #0
 8008094:	dc02      	bgt.n	800809c <__sflush_r+0x20>
 8008096:	2000      	movs	r0, #0
 8008098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800809c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800809e:	2e00      	cmp	r6, #0
 80080a0:	d0f9      	beq.n	8008096 <__sflush_r+0x1a>
 80080a2:	2300      	movs	r3, #0
 80080a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80080a8:	682f      	ldr	r7, [r5, #0]
 80080aa:	602b      	str	r3, [r5, #0]
 80080ac:	d032      	beq.n	8008114 <__sflush_r+0x98>
 80080ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80080b0:	89a3      	ldrh	r3, [r4, #12]
 80080b2:	075a      	lsls	r2, r3, #29
 80080b4:	d505      	bpl.n	80080c2 <__sflush_r+0x46>
 80080b6:	6863      	ldr	r3, [r4, #4]
 80080b8:	1ac0      	subs	r0, r0, r3
 80080ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080bc:	b10b      	cbz	r3, 80080c2 <__sflush_r+0x46>
 80080be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080c0:	1ac0      	subs	r0, r0, r3
 80080c2:	2300      	movs	r3, #0
 80080c4:	4602      	mov	r2, r0
 80080c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080c8:	6a21      	ldr	r1, [r4, #32]
 80080ca:	4628      	mov	r0, r5
 80080cc:	47b0      	blx	r6
 80080ce:	1c43      	adds	r3, r0, #1
 80080d0:	89a3      	ldrh	r3, [r4, #12]
 80080d2:	d106      	bne.n	80080e2 <__sflush_r+0x66>
 80080d4:	6829      	ldr	r1, [r5, #0]
 80080d6:	291d      	cmp	r1, #29
 80080d8:	d82c      	bhi.n	8008134 <__sflush_r+0xb8>
 80080da:	4a2a      	ldr	r2, [pc, #168]	; (8008184 <__sflush_r+0x108>)
 80080dc:	40ca      	lsrs	r2, r1
 80080de:	07d6      	lsls	r6, r2, #31
 80080e0:	d528      	bpl.n	8008134 <__sflush_r+0xb8>
 80080e2:	2200      	movs	r2, #0
 80080e4:	6062      	str	r2, [r4, #4]
 80080e6:	04d9      	lsls	r1, r3, #19
 80080e8:	6922      	ldr	r2, [r4, #16]
 80080ea:	6022      	str	r2, [r4, #0]
 80080ec:	d504      	bpl.n	80080f8 <__sflush_r+0x7c>
 80080ee:	1c42      	adds	r2, r0, #1
 80080f0:	d101      	bne.n	80080f6 <__sflush_r+0x7a>
 80080f2:	682b      	ldr	r3, [r5, #0]
 80080f4:	b903      	cbnz	r3, 80080f8 <__sflush_r+0x7c>
 80080f6:	6560      	str	r0, [r4, #84]	; 0x54
 80080f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080fa:	602f      	str	r7, [r5, #0]
 80080fc:	2900      	cmp	r1, #0
 80080fe:	d0ca      	beq.n	8008096 <__sflush_r+0x1a>
 8008100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008104:	4299      	cmp	r1, r3
 8008106:	d002      	beq.n	800810e <__sflush_r+0x92>
 8008108:	4628      	mov	r0, r5
 800810a:	f000 f9d7 	bl	80084bc <_free_r>
 800810e:	2000      	movs	r0, #0
 8008110:	6360      	str	r0, [r4, #52]	; 0x34
 8008112:	e7c1      	b.n	8008098 <__sflush_r+0x1c>
 8008114:	6a21      	ldr	r1, [r4, #32]
 8008116:	2301      	movs	r3, #1
 8008118:	4628      	mov	r0, r5
 800811a:	47b0      	blx	r6
 800811c:	1c41      	adds	r1, r0, #1
 800811e:	d1c7      	bne.n	80080b0 <__sflush_r+0x34>
 8008120:	682b      	ldr	r3, [r5, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d0c4      	beq.n	80080b0 <__sflush_r+0x34>
 8008126:	2b1d      	cmp	r3, #29
 8008128:	d001      	beq.n	800812e <__sflush_r+0xb2>
 800812a:	2b16      	cmp	r3, #22
 800812c:	d101      	bne.n	8008132 <__sflush_r+0xb6>
 800812e:	602f      	str	r7, [r5, #0]
 8008130:	e7b1      	b.n	8008096 <__sflush_r+0x1a>
 8008132:	89a3      	ldrh	r3, [r4, #12]
 8008134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008138:	81a3      	strh	r3, [r4, #12]
 800813a:	e7ad      	b.n	8008098 <__sflush_r+0x1c>
 800813c:	690f      	ldr	r7, [r1, #16]
 800813e:	2f00      	cmp	r7, #0
 8008140:	d0a9      	beq.n	8008096 <__sflush_r+0x1a>
 8008142:	0793      	lsls	r3, r2, #30
 8008144:	680e      	ldr	r6, [r1, #0]
 8008146:	bf08      	it	eq
 8008148:	694b      	ldreq	r3, [r1, #20]
 800814a:	600f      	str	r7, [r1, #0]
 800814c:	bf18      	it	ne
 800814e:	2300      	movne	r3, #0
 8008150:	eba6 0807 	sub.w	r8, r6, r7
 8008154:	608b      	str	r3, [r1, #8]
 8008156:	f1b8 0f00 	cmp.w	r8, #0
 800815a:	dd9c      	ble.n	8008096 <__sflush_r+0x1a>
 800815c:	6a21      	ldr	r1, [r4, #32]
 800815e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008160:	4643      	mov	r3, r8
 8008162:	463a      	mov	r2, r7
 8008164:	4628      	mov	r0, r5
 8008166:	47b0      	blx	r6
 8008168:	2800      	cmp	r0, #0
 800816a:	dc06      	bgt.n	800817a <__sflush_r+0xfe>
 800816c:	89a3      	ldrh	r3, [r4, #12]
 800816e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008172:	81a3      	strh	r3, [r4, #12]
 8008174:	f04f 30ff 	mov.w	r0, #4294967295
 8008178:	e78e      	b.n	8008098 <__sflush_r+0x1c>
 800817a:	4407      	add	r7, r0
 800817c:	eba8 0800 	sub.w	r8, r8, r0
 8008180:	e7e9      	b.n	8008156 <__sflush_r+0xda>
 8008182:	bf00      	nop
 8008184:	20400001 	.word	0x20400001

08008188 <_fflush_r>:
 8008188:	b538      	push	{r3, r4, r5, lr}
 800818a:	690b      	ldr	r3, [r1, #16]
 800818c:	4605      	mov	r5, r0
 800818e:	460c      	mov	r4, r1
 8008190:	b913      	cbnz	r3, 8008198 <_fflush_r+0x10>
 8008192:	2500      	movs	r5, #0
 8008194:	4628      	mov	r0, r5
 8008196:	bd38      	pop	{r3, r4, r5, pc}
 8008198:	b118      	cbz	r0, 80081a2 <_fflush_r+0x1a>
 800819a:	6983      	ldr	r3, [r0, #24]
 800819c:	b90b      	cbnz	r3, 80081a2 <_fflush_r+0x1a>
 800819e:	f000 f887 	bl	80082b0 <__sinit>
 80081a2:	4b14      	ldr	r3, [pc, #80]	; (80081f4 <_fflush_r+0x6c>)
 80081a4:	429c      	cmp	r4, r3
 80081a6:	d11b      	bne.n	80081e0 <_fflush_r+0x58>
 80081a8:	686c      	ldr	r4, [r5, #4]
 80081aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d0ef      	beq.n	8008192 <_fflush_r+0xa>
 80081b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80081b4:	07d0      	lsls	r0, r2, #31
 80081b6:	d404      	bmi.n	80081c2 <_fflush_r+0x3a>
 80081b8:	0599      	lsls	r1, r3, #22
 80081ba:	d402      	bmi.n	80081c2 <_fflush_r+0x3a>
 80081bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081be:	f000 f915 	bl	80083ec <__retarget_lock_acquire_recursive>
 80081c2:	4628      	mov	r0, r5
 80081c4:	4621      	mov	r1, r4
 80081c6:	f7ff ff59 	bl	800807c <__sflush_r>
 80081ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081cc:	07da      	lsls	r2, r3, #31
 80081ce:	4605      	mov	r5, r0
 80081d0:	d4e0      	bmi.n	8008194 <_fflush_r+0xc>
 80081d2:	89a3      	ldrh	r3, [r4, #12]
 80081d4:	059b      	lsls	r3, r3, #22
 80081d6:	d4dd      	bmi.n	8008194 <_fflush_r+0xc>
 80081d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081da:	f000 f908 	bl	80083ee <__retarget_lock_release_recursive>
 80081de:	e7d9      	b.n	8008194 <_fflush_r+0xc>
 80081e0:	4b05      	ldr	r3, [pc, #20]	; (80081f8 <_fflush_r+0x70>)
 80081e2:	429c      	cmp	r4, r3
 80081e4:	d101      	bne.n	80081ea <_fflush_r+0x62>
 80081e6:	68ac      	ldr	r4, [r5, #8]
 80081e8:	e7df      	b.n	80081aa <_fflush_r+0x22>
 80081ea:	4b04      	ldr	r3, [pc, #16]	; (80081fc <_fflush_r+0x74>)
 80081ec:	429c      	cmp	r4, r3
 80081ee:	bf08      	it	eq
 80081f0:	68ec      	ldreq	r4, [r5, #12]
 80081f2:	e7da      	b.n	80081aa <_fflush_r+0x22>
 80081f4:	08008994 	.word	0x08008994
 80081f8:	080089b4 	.word	0x080089b4
 80081fc:	08008974 	.word	0x08008974

08008200 <std>:
 8008200:	2300      	movs	r3, #0
 8008202:	b510      	push	{r4, lr}
 8008204:	4604      	mov	r4, r0
 8008206:	e9c0 3300 	strd	r3, r3, [r0]
 800820a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800820e:	6083      	str	r3, [r0, #8]
 8008210:	8181      	strh	r1, [r0, #12]
 8008212:	6643      	str	r3, [r0, #100]	; 0x64
 8008214:	81c2      	strh	r2, [r0, #14]
 8008216:	6183      	str	r3, [r0, #24]
 8008218:	4619      	mov	r1, r3
 800821a:	2208      	movs	r2, #8
 800821c:	305c      	adds	r0, #92	; 0x5c
 800821e:	f7ff fdef 	bl	8007e00 <memset>
 8008222:	4b05      	ldr	r3, [pc, #20]	; (8008238 <std+0x38>)
 8008224:	6263      	str	r3, [r4, #36]	; 0x24
 8008226:	4b05      	ldr	r3, [pc, #20]	; (800823c <std+0x3c>)
 8008228:	62a3      	str	r3, [r4, #40]	; 0x28
 800822a:	4b05      	ldr	r3, [pc, #20]	; (8008240 <std+0x40>)
 800822c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800822e:	4b05      	ldr	r3, [pc, #20]	; (8008244 <std+0x44>)
 8008230:	6224      	str	r4, [r4, #32]
 8008232:	6323      	str	r3, [r4, #48]	; 0x30
 8008234:	bd10      	pop	{r4, pc}
 8008236:	bf00      	nop
 8008238:	0800869d 	.word	0x0800869d
 800823c:	080086bf 	.word	0x080086bf
 8008240:	080086f7 	.word	0x080086f7
 8008244:	0800871b 	.word	0x0800871b

08008248 <_cleanup_r>:
 8008248:	4901      	ldr	r1, [pc, #4]	; (8008250 <_cleanup_r+0x8>)
 800824a:	f000 b8af 	b.w	80083ac <_fwalk_reent>
 800824e:	bf00      	nop
 8008250:	08008189 	.word	0x08008189

08008254 <__sfmoreglue>:
 8008254:	b570      	push	{r4, r5, r6, lr}
 8008256:	2268      	movs	r2, #104	; 0x68
 8008258:	1e4d      	subs	r5, r1, #1
 800825a:	4355      	muls	r5, r2
 800825c:	460e      	mov	r6, r1
 800825e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008262:	f000 f997 	bl	8008594 <_malloc_r>
 8008266:	4604      	mov	r4, r0
 8008268:	b140      	cbz	r0, 800827c <__sfmoreglue+0x28>
 800826a:	2100      	movs	r1, #0
 800826c:	e9c0 1600 	strd	r1, r6, [r0]
 8008270:	300c      	adds	r0, #12
 8008272:	60a0      	str	r0, [r4, #8]
 8008274:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008278:	f7ff fdc2 	bl	8007e00 <memset>
 800827c:	4620      	mov	r0, r4
 800827e:	bd70      	pop	{r4, r5, r6, pc}

08008280 <__sfp_lock_acquire>:
 8008280:	4801      	ldr	r0, [pc, #4]	; (8008288 <__sfp_lock_acquire+0x8>)
 8008282:	f000 b8b3 	b.w	80083ec <__retarget_lock_acquire_recursive>
 8008286:	bf00      	nop
 8008288:	200007dd 	.word	0x200007dd

0800828c <__sfp_lock_release>:
 800828c:	4801      	ldr	r0, [pc, #4]	; (8008294 <__sfp_lock_release+0x8>)
 800828e:	f000 b8ae 	b.w	80083ee <__retarget_lock_release_recursive>
 8008292:	bf00      	nop
 8008294:	200007dd 	.word	0x200007dd

08008298 <__sinit_lock_acquire>:
 8008298:	4801      	ldr	r0, [pc, #4]	; (80082a0 <__sinit_lock_acquire+0x8>)
 800829a:	f000 b8a7 	b.w	80083ec <__retarget_lock_acquire_recursive>
 800829e:	bf00      	nop
 80082a0:	200007de 	.word	0x200007de

080082a4 <__sinit_lock_release>:
 80082a4:	4801      	ldr	r0, [pc, #4]	; (80082ac <__sinit_lock_release+0x8>)
 80082a6:	f000 b8a2 	b.w	80083ee <__retarget_lock_release_recursive>
 80082aa:	bf00      	nop
 80082ac:	200007de 	.word	0x200007de

080082b0 <__sinit>:
 80082b0:	b510      	push	{r4, lr}
 80082b2:	4604      	mov	r4, r0
 80082b4:	f7ff fff0 	bl	8008298 <__sinit_lock_acquire>
 80082b8:	69a3      	ldr	r3, [r4, #24]
 80082ba:	b11b      	cbz	r3, 80082c4 <__sinit+0x14>
 80082bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082c0:	f7ff bff0 	b.w	80082a4 <__sinit_lock_release>
 80082c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80082c8:	6523      	str	r3, [r4, #80]	; 0x50
 80082ca:	4b13      	ldr	r3, [pc, #76]	; (8008318 <__sinit+0x68>)
 80082cc:	4a13      	ldr	r2, [pc, #76]	; (800831c <__sinit+0x6c>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80082d2:	42a3      	cmp	r3, r4
 80082d4:	bf04      	itt	eq
 80082d6:	2301      	moveq	r3, #1
 80082d8:	61a3      	streq	r3, [r4, #24]
 80082da:	4620      	mov	r0, r4
 80082dc:	f000 f820 	bl	8008320 <__sfp>
 80082e0:	6060      	str	r0, [r4, #4]
 80082e2:	4620      	mov	r0, r4
 80082e4:	f000 f81c 	bl	8008320 <__sfp>
 80082e8:	60a0      	str	r0, [r4, #8]
 80082ea:	4620      	mov	r0, r4
 80082ec:	f000 f818 	bl	8008320 <__sfp>
 80082f0:	2200      	movs	r2, #0
 80082f2:	60e0      	str	r0, [r4, #12]
 80082f4:	2104      	movs	r1, #4
 80082f6:	6860      	ldr	r0, [r4, #4]
 80082f8:	f7ff ff82 	bl	8008200 <std>
 80082fc:	68a0      	ldr	r0, [r4, #8]
 80082fe:	2201      	movs	r2, #1
 8008300:	2109      	movs	r1, #9
 8008302:	f7ff ff7d 	bl	8008200 <std>
 8008306:	68e0      	ldr	r0, [r4, #12]
 8008308:	2202      	movs	r2, #2
 800830a:	2112      	movs	r1, #18
 800830c:	f7ff ff78 	bl	8008200 <std>
 8008310:	2301      	movs	r3, #1
 8008312:	61a3      	str	r3, [r4, #24]
 8008314:	e7d2      	b.n	80082bc <__sinit+0xc>
 8008316:	bf00      	nop
 8008318:	08008970 	.word	0x08008970
 800831c:	08008249 	.word	0x08008249

08008320 <__sfp>:
 8008320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008322:	4607      	mov	r7, r0
 8008324:	f7ff ffac 	bl	8008280 <__sfp_lock_acquire>
 8008328:	4b1e      	ldr	r3, [pc, #120]	; (80083a4 <__sfp+0x84>)
 800832a:	681e      	ldr	r6, [r3, #0]
 800832c:	69b3      	ldr	r3, [r6, #24]
 800832e:	b913      	cbnz	r3, 8008336 <__sfp+0x16>
 8008330:	4630      	mov	r0, r6
 8008332:	f7ff ffbd 	bl	80082b0 <__sinit>
 8008336:	3648      	adds	r6, #72	; 0x48
 8008338:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800833c:	3b01      	subs	r3, #1
 800833e:	d503      	bpl.n	8008348 <__sfp+0x28>
 8008340:	6833      	ldr	r3, [r6, #0]
 8008342:	b30b      	cbz	r3, 8008388 <__sfp+0x68>
 8008344:	6836      	ldr	r6, [r6, #0]
 8008346:	e7f7      	b.n	8008338 <__sfp+0x18>
 8008348:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800834c:	b9d5      	cbnz	r5, 8008384 <__sfp+0x64>
 800834e:	4b16      	ldr	r3, [pc, #88]	; (80083a8 <__sfp+0x88>)
 8008350:	60e3      	str	r3, [r4, #12]
 8008352:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008356:	6665      	str	r5, [r4, #100]	; 0x64
 8008358:	f000 f847 	bl	80083ea <__retarget_lock_init_recursive>
 800835c:	f7ff ff96 	bl	800828c <__sfp_lock_release>
 8008360:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008364:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008368:	6025      	str	r5, [r4, #0]
 800836a:	61a5      	str	r5, [r4, #24]
 800836c:	2208      	movs	r2, #8
 800836e:	4629      	mov	r1, r5
 8008370:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008374:	f7ff fd44 	bl	8007e00 <memset>
 8008378:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800837c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008380:	4620      	mov	r0, r4
 8008382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008384:	3468      	adds	r4, #104	; 0x68
 8008386:	e7d9      	b.n	800833c <__sfp+0x1c>
 8008388:	2104      	movs	r1, #4
 800838a:	4638      	mov	r0, r7
 800838c:	f7ff ff62 	bl	8008254 <__sfmoreglue>
 8008390:	4604      	mov	r4, r0
 8008392:	6030      	str	r0, [r6, #0]
 8008394:	2800      	cmp	r0, #0
 8008396:	d1d5      	bne.n	8008344 <__sfp+0x24>
 8008398:	f7ff ff78 	bl	800828c <__sfp_lock_release>
 800839c:	230c      	movs	r3, #12
 800839e:	603b      	str	r3, [r7, #0]
 80083a0:	e7ee      	b.n	8008380 <__sfp+0x60>
 80083a2:	bf00      	nop
 80083a4:	08008970 	.word	0x08008970
 80083a8:	ffff0001 	.word	0xffff0001

080083ac <_fwalk_reent>:
 80083ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083b0:	4606      	mov	r6, r0
 80083b2:	4688      	mov	r8, r1
 80083b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80083b8:	2700      	movs	r7, #0
 80083ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80083be:	f1b9 0901 	subs.w	r9, r9, #1
 80083c2:	d505      	bpl.n	80083d0 <_fwalk_reent+0x24>
 80083c4:	6824      	ldr	r4, [r4, #0]
 80083c6:	2c00      	cmp	r4, #0
 80083c8:	d1f7      	bne.n	80083ba <_fwalk_reent+0xe>
 80083ca:	4638      	mov	r0, r7
 80083cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083d0:	89ab      	ldrh	r3, [r5, #12]
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d907      	bls.n	80083e6 <_fwalk_reent+0x3a>
 80083d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083da:	3301      	adds	r3, #1
 80083dc:	d003      	beq.n	80083e6 <_fwalk_reent+0x3a>
 80083de:	4629      	mov	r1, r5
 80083e0:	4630      	mov	r0, r6
 80083e2:	47c0      	blx	r8
 80083e4:	4307      	orrs	r7, r0
 80083e6:	3568      	adds	r5, #104	; 0x68
 80083e8:	e7e9      	b.n	80083be <_fwalk_reent+0x12>

080083ea <__retarget_lock_init_recursive>:
 80083ea:	4770      	bx	lr

080083ec <__retarget_lock_acquire_recursive>:
 80083ec:	4770      	bx	lr

080083ee <__retarget_lock_release_recursive>:
 80083ee:	4770      	bx	lr

080083f0 <__swhatbuf_r>:
 80083f0:	b570      	push	{r4, r5, r6, lr}
 80083f2:	460e      	mov	r6, r1
 80083f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083f8:	2900      	cmp	r1, #0
 80083fa:	b096      	sub	sp, #88	; 0x58
 80083fc:	4614      	mov	r4, r2
 80083fe:	461d      	mov	r5, r3
 8008400:	da08      	bge.n	8008414 <__swhatbuf_r+0x24>
 8008402:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008406:	2200      	movs	r2, #0
 8008408:	602a      	str	r2, [r5, #0]
 800840a:	061a      	lsls	r2, r3, #24
 800840c:	d410      	bmi.n	8008430 <__swhatbuf_r+0x40>
 800840e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008412:	e00e      	b.n	8008432 <__swhatbuf_r+0x42>
 8008414:	466a      	mov	r2, sp
 8008416:	f000 f9a7 	bl	8008768 <_fstat_r>
 800841a:	2800      	cmp	r0, #0
 800841c:	dbf1      	blt.n	8008402 <__swhatbuf_r+0x12>
 800841e:	9a01      	ldr	r2, [sp, #4]
 8008420:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008424:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008428:	425a      	negs	r2, r3
 800842a:	415a      	adcs	r2, r3
 800842c:	602a      	str	r2, [r5, #0]
 800842e:	e7ee      	b.n	800840e <__swhatbuf_r+0x1e>
 8008430:	2340      	movs	r3, #64	; 0x40
 8008432:	2000      	movs	r0, #0
 8008434:	6023      	str	r3, [r4, #0]
 8008436:	b016      	add	sp, #88	; 0x58
 8008438:	bd70      	pop	{r4, r5, r6, pc}
	...

0800843c <__smakebuf_r>:
 800843c:	898b      	ldrh	r3, [r1, #12]
 800843e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008440:	079d      	lsls	r5, r3, #30
 8008442:	4606      	mov	r6, r0
 8008444:	460c      	mov	r4, r1
 8008446:	d507      	bpl.n	8008458 <__smakebuf_r+0x1c>
 8008448:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800844c:	6023      	str	r3, [r4, #0]
 800844e:	6123      	str	r3, [r4, #16]
 8008450:	2301      	movs	r3, #1
 8008452:	6163      	str	r3, [r4, #20]
 8008454:	b002      	add	sp, #8
 8008456:	bd70      	pop	{r4, r5, r6, pc}
 8008458:	ab01      	add	r3, sp, #4
 800845a:	466a      	mov	r2, sp
 800845c:	f7ff ffc8 	bl	80083f0 <__swhatbuf_r>
 8008460:	9900      	ldr	r1, [sp, #0]
 8008462:	4605      	mov	r5, r0
 8008464:	4630      	mov	r0, r6
 8008466:	f000 f895 	bl	8008594 <_malloc_r>
 800846a:	b948      	cbnz	r0, 8008480 <__smakebuf_r+0x44>
 800846c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008470:	059a      	lsls	r2, r3, #22
 8008472:	d4ef      	bmi.n	8008454 <__smakebuf_r+0x18>
 8008474:	f023 0303 	bic.w	r3, r3, #3
 8008478:	f043 0302 	orr.w	r3, r3, #2
 800847c:	81a3      	strh	r3, [r4, #12]
 800847e:	e7e3      	b.n	8008448 <__smakebuf_r+0xc>
 8008480:	4b0d      	ldr	r3, [pc, #52]	; (80084b8 <__smakebuf_r+0x7c>)
 8008482:	62b3      	str	r3, [r6, #40]	; 0x28
 8008484:	89a3      	ldrh	r3, [r4, #12]
 8008486:	6020      	str	r0, [r4, #0]
 8008488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800848c:	81a3      	strh	r3, [r4, #12]
 800848e:	9b00      	ldr	r3, [sp, #0]
 8008490:	6163      	str	r3, [r4, #20]
 8008492:	9b01      	ldr	r3, [sp, #4]
 8008494:	6120      	str	r0, [r4, #16]
 8008496:	b15b      	cbz	r3, 80084b0 <__smakebuf_r+0x74>
 8008498:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800849c:	4630      	mov	r0, r6
 800849e:	f000 f975 	bl	800878c <_isatty_r>
 80084a2:	b128      	cbz	r0, 80084b0 <__smakebuf_r+0x74>
 80084a4:	89a3      	ldrh	r3, [r4, #12]
 80084a6:	f023 0303 	bic.w	r3, r3, #3
 80084aa:	f043 0301 	orr.w	r3, r3, #1
 80084ae:	81a3      	strh	r3, [r4, #12]
 80084b0:	89a0      	ldrh	r0, [r4, #12]
 80084b2:	4305      	orrs	r5, r0
 80084b4:	81a5      	strh	r5, [r4, #12]
 80084b6:	e7cd      	b.n	8008454 <__smakebuf_r+0x18>
 80084b8:	08008249 	.word	0x08008249

080084bc <_free_r>:
 80084bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084be:	2900      	cmp	r1, #0
 80084c0:	d044      	beq.n	800854c <_free_r+0x90>
 80084c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084c6:	9001      	str	r0, [sp, #4]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f1a1 0404 	sub.w	r4, r1, #4
 80084ce:	bfb8      	it	lt
 80084d0:	18e4      	addlt	r4, r4, r3
 80084d2:	f000 f97d 	bl	80087d0 <__malloc_lock>
 80084d6:	4a1e      	ldr	r2, [pc, #120]	; (8008550 <_free_r+0x94>)
 80084d8:	9801      	ldr	r0, [sp, #4]
 80084da:	6813      	ldr	r3, [r2, #0]
 80084dc:	b933      	cbnz	r3, 80084ec <_free_r+0x30>
 80084de:	6063      	str	r3, [r4, #4]
 80084e0:	6014      	str	r4, [r2, #0]
 80084e2:	b003      	add	sp, #12
 80084e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084e8:	f000 b978 	b.w	80087dc <__malloc_unlock>
 80084ec:	42a3      	cmp	r3, r4
 80084ee:	d908      	bls.n	8008502 <_free_r+0x46>
 80084f0:	6825      	ldr	r5, [r4, #0]
 80084f2:	1961      	adds	r1, r4, r5
 80084f4:	428b      	cmp	r3, r1
 80084f6:	bf01      	itttt	eq
 80084f8:	6819      	ldreq	r1, [r3, #0]
 80084fa:	685b      	ldreq	r3, [r3, #4]
 80084fc:	1949      	addeq	r1, r1, r5
 80084fe:	6021      	streq	r1, [r4, #0]
 8008500:	e7ed      	b.n	80084de <_free_r+0x22>
 8008502:	461a      	mov	r2, r3
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	b10b      	cbz	r3, 800850c <_free_r+0x50>
 8008508:	42a3      	cmp	r3, r4
 800850a:	d9fa      	bls.n	8008502 <_free_r+0x46>
 800850c:	6811      	ldr	r1, [r2, #0]
 800850e:	1855      	adds	r5, r2, r1
 8008510:	42a5      	cmp	r5, r4
 8008512:	d10b      	bne.n	800852c <_free_r+0x70>
 8008514:	6824      	ldr	r4, [r4, #0]
 8008516:	4421      	add	r1, r4
 8008518:	1854      	adds	r4, r2, r1
 800851a:	42a3      	cmp	r3, r4
 800851c:	6011      	str	r1, [r2, #0]
 800851e:	d1e0      	bne.n	80084e2 <_free_r+0x26>
 8008520:	681c      	ldr	r4, [r3, #0]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	6053      	str	r3, [r2, #4]
 8008526:	4421      	add	r1, r4
 8008528:	6011      	str	r1, [r2, #0]
 800852a:	e7da      	b.n	80084e2 <_free_r+0x26>
 800852c:	d902      	bls.n	8008534 <_free_r+0x78>
 800852e:	230c      	movs	r3, #12
 8008530:	6003      	str	r3, [r0, #0]
 8008532:	e7d6      	b.n	80084e2 <_free_r+0x26>
 8008534:	6825      	ldr	r5, [r4, #0]
 8008536:	1961      	adds	r1, r4, r5
 8008538:	428b      	cmp	r3, r1
 800853a:	bf04      	itt	eq
 800853c:	6819      	ldreq	r1, [r3, #0]
 800853e:	685b      	ldreq	r3, [r3, #4]
 8008540:	6063      	str	r3, [r4, #4]
 8008542:	bf04      	itt	eq
 8008544:	1949      	addeq	r1, r1, r5
 8008546:	6021      	streq	r1, [r4, #0]
 8008548:	6054      	str	r4, [r2, #4]
 800854a:	e7ca      	b.n	80084e2 <_free_r+0x26>
 800854c:	b003      	add	sp, #12
 800854e:	bd30      	pop	{r4, r5, pc}
 8008550:	200007e0 	.word	0x200007e0

08008554 <sbrk_aligned>:
 8008554:	b570      	push	{r4, r5, r6, lr}
 8008556:	4e0e      	ldr	r6, [pc, #56]	; (8008590 <sbrk_aligned+0x3c>)
 8008558:	460c      	mov	r4, r1
 800855a:	6831      	ldr	r1, [r6, #0]
 800855c:	4605      	mov	r5, r0
 800855e:	b911      	cbnz	r1, 8008566 <sbrk_aligned+0x12>
 8008560:	f000 f88c 	bl	800867c <_sbrk_r>
 8008564:	6030      	str	r0, [r6, #0]
 8008566:	4621      	mov	r1, r4
 8008568:	4628      	mov	r0, r5
 800856a:	f000 f887 	bl	800867c <_sbrk_r>
 800856e:	1c43      	adds	r3, r0, #1
 8008570:	d00a      	beq.n	8008588 <sbrk_aligned+0x34>
 8008572:	1cc4      	adds	r4, r0, #3
 8008574:	f024 0403 	bic.w	r4, r4, #3
 8008578:	42a0      	cmp	r0, r4
 800857a:	d007      	beq.n	800858c <sbrk_aligned+0x38>
 800857c:	1a21      	subs	r1, r4, r0
 800857e:	4628      	mov	r0, r5
 8008580:	f000 f87c 	bl	800867c <_sbrk_r>
 8008584:	3001      	adds	r0, #1
 8008586:	d101      	bne.n	800858c <sbrk_aligned+0x38>
 8008588:	f04f 34ff 	mov.w	r4, #4294967295
 800858c:	4620      	mov	r0, r4
 800858e:	bd70      	pop	{r4, r5, r6, pc}
 8008590:	200007e4 	.word	0x200007e4

08008594 <_malloc_r>:
 8008594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008598:	1ccd      	adds	r5, r1, #3
 800859a:	f025 0503 	bic.w	r5, r5, #3
 800859e:	3508      	adds	r5, #8
 80085a0:	2d0c      	cmp	r5, #12
 80085a2:	bf38      	it	cc
 80085a4:	250c      	movcc	r5, #12
 80085a6:	2d00      	cmp	r5, #0
 80085a8:	4607      	mov	r7, r0
 80085aa:	db01      	blt.n	80085b0 <_malloc_r+0x1c>
 80085ac:	42a9      	cmp	r1, r5
 80085ae:	d905      	bls.n	80085bc <_malloc_r+0x28>
 80085b0:	230c      	movs	r3, #12
 80085b2:	603b      	str	r3, [r7, #0]
 80085b4:	2600      	movs	r6, #0
 80085b6:	4630      	mov	r0, r6
 80085b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085bc:	4e2e      	ldr	r6, [pc, #184]	; (8008678 <_malloc_r+0xe4>)
 80085be:	f000 f907 	bl	80087d0 <__malloc_lock>
 80085c2:	6833      	ldr	r3, [r6, #0]
 80085c4:	461c      	mov	r4, r3
 80085c6:	bb34      	cbnz	r4, 8008616 <_malloc_r+0x82>
 80085c8:	4629      	mov	r1, r5
 80085ca:	4638      	mov	r0, r7
 80085cc:	f7ff ffc2 	bl	8008554 <sbrk_aligned>
 80085d0:	1c43      	adds	r3, r0, #1
 80085d2:	4604      	mov	r4, r0
 80085d4:	d14d      	bne.n	8008672 <_malloc_r+0xde>
 80085d6:	6834      	ldr	r4, [r6, #0]
 80085d8:	4626      	mov	r6, r4
 80085da:	2e00      	cmp	r6, #0
 80085dc:	d140      	bne.n	8008660 <_malloc_r+0xcc>
 80085de:	6823      	ldr	r3, [r4, #0]
 80085e0:	4631      	mov	r1, r6
 80085e2:	4638      	mov	r0, r7
 80085e4:	eb04 0803 	add.w	r8, r4, r3
 80085e8:	f000 f848 	bl	800867c <_sbrk_r>
 80085ec:	4580      	cmp	r8, r0
 80085ee:	d13a      	bne.n	8008666 <_malloc_r+0xd2>
 80085f0:	6821      	ldr	r1, [r4, #0]
 80085f2:	3503      	adds	r5, #3
 80085f4:	1a6d      	subs	r5, r5, r1
 80085f6:	f025 0503 	bic.w	r5, r5, #3
 80085fa:	3508      	adds	r5, #8
 80085fc:	2d0c      	cmp	r5, #12
 80085fe:	bf38      	it	cc
 8008600:	250c      	movcc	r5, #12
 8008602:	4629      	mov	r1, r5
 8008604:	4638      	mov	r0, r7
 8008606:	f7ff ffa5 	bl	8008554 <sbrk_aligned>
 800860a:	3001      	adds	r0, #1
 800860c:	d02b      	beq.n	8008666 <_malloc_r+0xd2>
 800860e:	6823      	ldr	r3, [r4, #0]
 8008610:	442b      	add	r3, r5
 8008612:	6023      	str	r3, [r4, #0]
 8008614:	e00e      	b.n	8008634 <_malloc_r+0xa0>
 8008616:	6822      	ldr	r2, [r4, #0]
 8008618:	1b52      	subs	r2, r2, r5
 800861a:	d41e      	bmi.n	800865a <_malloc_r+0xc6>
 800861c:	2a0b      	cmp	r2, #11
 800861e:	d916      	bls.n	800864e <_malloc_r+0xba>
 8008620:	1961      	adds	r1, r4, r5
 8008622:	42a3      	cmp	r3, r4
 8008624:	6025      	str	r5, [r4, #0]
 8008626:	bf18      	it	ne
 8008628:	6059      	strne	r1, [r3, #4]
 800862a:	6863      	ldr	r3, [r4, #4]
 800862c:	bf08      	it	eq
 800862e:	6031      	streq	r1, [r6, #0]
 8008630:	5162      	str	r2, [r4, r5]
 8008632:	604b      	str	r3, [r1, #4]
 8008634:	4638      	mov	r0, r7
 8008636:	f104 060b 	add.w	r6, r4, #11
 800863a:	f000 f8cf 	bl	80087dc <__malloc_unlock>
 800863e:	f026 0607 	bic.w	r6, r6, #7
 8008642:	1d23      	adds	r3, r4, #4
 8008644:	1af2      	subs	r2, r6, r3
 8008646:	d0b6      	beq.n	80085b6 <_malloc_r+0x22>
 8008648:	1b9b      	subs	r3, r3, r6
 800864a:	50a3      	str	r3, [r4, r2]
 800864c:	e7b3      	b.n	80085b6 <_malloc_r+0x22>
 800864e:	6862      	ldr	r2, [r4, #4]
 8008650:	42a3      	cmp	r3, r4
 8008652:	bf0c      	ite	eq
 8008654:	6032      	streq	r2, [r6, #0]
 8008656:	605a      	strne	r2, [r3, #4]
 8008658:	e7ec      	b.n	8008634 <_malloc_r+0xa0>
 800865a:	4623      	mov	r3, r4
 800865c:	6864      	ldr	r4, [r4, #4]
 800865e:	e7b2      	b.n	80085c6 <_malloc_r+0x32>
 8008660:	4634      	mov	r4, r6
 8008662:	6876      	ldr	r6, [r6, #4]
 8008664:	e7b9      	b.n	80085da <_malloc_r+0x46>
 8008666:	230c      	movs	r3, #12
 8008668:	603b      	str	r3, [r7, #0]
 800866a:	4638      	mov	r0, r7
 800866c:	f000 f8b6 	bl	80087dc <__malloc_unlock>
 8008670:	e7a1      	b.n	80085b6 <_malloc_r+0x22>
 8008672:	6025      	str	r5, [r4, #0]
 8008674:	e7de      	b.n	8008634 <_malloc_r+0xa0>
 8008676:	bf00      	nop
 8008678:	200007e0 	.word	0x200007e0

0800867c <_sbrk_r>:
 800867c:	b538      	push	{r3, r4, r5, lr}
 800867e:	4d06      	ldr	r5, [pc, #24]	; (8008698 <_sbrk_r+0x1c>)
 8008680:	2300      	movs	r3, #0
 8008682:	4604      	mov	r4, r0
 8008684:	4608      	mov	r0, r1
 8008686:	602b      	str	r3, [r5, #0]
 8008688:	f7fa faac 	bl	8002be4 <_sbrk>
 800868c:	1c43      	adds	r3, r0, #1
 800868e:	d102      	bne.n	8008696 <_sbrk_r+0x1a>
 8008690:	682b      	ldr	r3, [r5, #0]
 8008692:	b103      	cbz	r3, 8008696 <_sbrk_r+0x1a>
 8008694:	6023      	str	r3, [r4, #0]
 8008696:	bd38      	pop	{r3, r4, r5, pc}
 8008698:	200007e8 	.word	0x200007e8

0800869c <__sread>:
 800869c:	b510      	push	{r4, lr}
 800869e:	460c      	mov	r4, r1
 80086a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086a4:	f000 f8a0 	bl	80087e8 <_read_r>
 80086a8:	2800      	cmp	r0, #0
 80086aa:	bfab      	itete	ge
 80086ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80086ae:	89a3      	ldrhlt	r3, [r4, #12]
 80086b0:	181b      	addge	r3, r3, r0
 80086b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80086b6:	bfac      	ite	ge
 80086b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80086ba:	81a3      	strhlt	r3, [r4, #12]
 80086bc:	bd10      	pop	{r4, pc}

080086be <__swrite>:
 80086be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086c2:	461f      	mov	r7, r3
 80086c4:	898b      	ldrh	r3, [r1, #12]
 80086c6:	05db      	lsls	r3, r3, #23
 80086c8:	4605      	mov	r5, r0
 80086ca:	460c      	mov	r4, r1
 80086cc:	4616      	mov	r6, r2
 80086ce:	d505      	bpl.n	80086dc <__swrite+0x1e>
 80086d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086d4:	2302      	movs	r3, #2
 80086d6:	2200      	movs	r2, #0
 80086d8:	f000 f868 	bl	80087ac <_lseek_r>
 80086dc:	89a3      	ldrh	r3, [r4, #12]
 80086de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086e6:	81a3      	strh	r3, [r4, #12]
 80086e8:	4632      	mov	r2, r6
 80086ea:	463b      	mov	r3, r7
 80086ec:	4628      	mov	r0, r5
 80086ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086f2:	f000 b817 	b.w	8008724 <_write_r>

080086f6 <__sseek>:
 80086f6:	b510      	push	{r4, lr}
 80086f8:	460c      	mov	r4, r1
 80086fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086fe:	f000 f855 	bl	80087ac <_lseek_r>
 8008702:	1c43      	adds	r3, r0, #1
 8008704:	89a3      	ldrh	r3, [r4, #12]
 8008706:	bf15      	itete	ne
 8008708:	6560      	strne	r0, [r4, #84]	; 0x54
 800870a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800870e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008712:	81a3      	strheq	r3, [r4, #12]
 8008714:	bf18      	it	ne
 8008716:	81a3      	strhne	r3, [r4, #12]
 8008718:	bd10      	pop	{r4, pc}

0800871a <__sclose>:
 800871a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800871e:	f000 b813 	b.w	8008748 <_close_r>
	...

08008724 <_write_r>:
 8008724:	b538      	push	{r3, r4, r5, lr}
 8008726:	4d07      	ldr	r5, [pc, #28]	; (8008744 <_write_r+0x20>)
 8008728:	4604      	mov	r4, r0
 800872a:	4608      	mov	r0, r1
 800872c:	4611      	mov	r1, r2
 800872e:	2200      	movs	r2, #0
 8008730:	602a      	str	r2, [r5, #0]
 8008732:	461a      	mov	r2, r3
 8008734:	f7fa fa05 	bl	8002b42 <_write>
 8008738:	1c43      	adds	r3, r0, #1
 800873a:	d102      	bne.n	8008742 <_write_r+0x1e>
 800873c:	682b      	ldr	r3, [r5, #0]
 800873e:	b103      	cbz	r3, 8008742 <_write_r+0x1e>
 8008740:	6023      	str	r3, [r4, #0]
 8008742:	bd38      	pop	{r3, r4, r5, pc}
 8008744:	200007e8 	.word	0x200007e8

08008748 <_close_r>:
 8008748:	b538      	push	{r3, r4, r5, lr}
 800874a:	4d06      	ldr	r5, [pc, #24]	; (8008764 <_close_r+0x1c>)
 800874c:	2300      	movs	r3, #0
 800874e:	4604      	mov	r4, r0
 8008750:	4608      	mov	r0, r1
 8008752:	602b      	str	r3, [r5, #0]
 8008754:	f7fa fa11 	bl	8002b7a <_close>
 8008758:	1c43      	adds	r3, r0, #1
 800875a:	d102      	bne.n	8008762 <_close_r+0x1a>
 800875c:	682b      	ldr	r3, [r5, #0]
 800875e:	b103      	cbz	r3, 8008762 <_close_r+0x1a>
 8008760:	6023      	str	r3, [r4, #0]
 8008762:	bd38      	pop	{r3, r4, r5, pc}
 8008764:	200007e8 	.word	0x200007e8

08008768 <_fstat_r>:
 8008768:	b538      	push	{r3, r4, r5, lr}
 800876a:	4d07      	ldr	r5, [pc, #28]	; (8008788 <_fstat_r+0x20>)
 800876c:	2300      	movs	r3, #0
 800876e:	4604      	mov	r4, r0
 8008770:	4608      	mov	r0, r1
 8008772:	4611      	mov	r1, r2
 8008774:	602b      	str	r3, [r5, #0]
 8008776:	f7fa fa0c 	bl	8002b92 <_fstat>
 800877a:	1c43      	adds	r3, r0, #1
 800877c:	d102      	bne.n	8008784 <_fstat_r+0x1c>
 800877e:	682b      	ldr	r3, [r5, #0]
 8008780:	b103      	cbz	r3, 8008784 <_fstat_r+0x1c>
 8008782:	6023      	str	r3, [r4, #0]
 8008784:	bd38      	pop	{r3, r4, r5, pc}
 8008786:	bf00      	nop
 8008788:	200007e8 	.word	0x200007e8

0800878c <_isatty_r>:
 800878c:	b538      	push	{r3, r4, r5, lr}
 800878e:	4d06      	ldr	r5, [pc, #24]	; (80087a8 <_isatty_r+0x1c>)
 8008790:	2300      	movs	r3, #0
 8008792:	4604      	mov	r4, r0
 8008794:	4608      	mov	r0, r1
 8008796:	602b      	str	r3, [r5, #0]
 8008798:	f7fa fa0b 	bl	8002bb2 <_isatty>
 800879c:	1c43      	adds	r3, r0, #1
 800879e:	d102      	bne.n	80087a6 <_isatty_r+0x1a>
 80087a0:	682b      	ldr	r3, [r5, #0]
 80087a2:	b103      	cbz	r3, 80087a6 <_isatty_r+0x1a>
 80087a4:	6023      	str	r3, [r4, #0]
 80087a6:	bd38      	pop	{r3, r4, r5, pc}
 80087a8:	200007e8 	.word	0x200007e8

080087ac <_lseek_r>:
 80087ac:	b538      	push	{r3, r4, r5, lr}
 80087ae:	4d07      	ldr	r5, [pc, #28]	; (80087cc <_lseek_r+0x20>)
 80087b0:	4604      	mov	r4, r0
 80087b2:	4608      	mov	r0, r1
 80087b4:	4611      	mov	r1, r2
 80087b6:	2200      	movs	r2, #0
 80087b8:	602a      	str	r2, [r5, #0]
 80087ba:	461a      	mov	r2, r3
 80087bc:	f7fa fa04 	bl	8002bc8 <_lseek>
 80087c0:	1c43      	adds	r3, r0, #1
 80087c2:	d102      	bne.n	80087ca <_lseek_r+0x1e>
 80087c4:	682b      	ldr	r3, [r5, #0]
 80087c6:	b103      	cbz	r3, 80087ca <_lseek_r+0x1e>
 80087c8:	6023      	str	r3, [r4, #0]
 80087ca:	bd38      	pop	{r3, r4, r5, pc}
 80087cc:	200007e8 	.word	0x200007e8

080087d0 <__malloc_lock>:
 80087d0:	4801      	ldr	r0, [pc, #4]	; (80087d8 <__malloc_lock+0x8>)
 80087d2:	f7ff be0b 	b.w	80083ec <__retarget_lock_acquire_recursive>
 80087d6:	bf00      	nop
 80087d8:	200007dc 	.word	0x200007dc

080087dc <__malloc_unlock>:
 80087dc:	4801      	ldr	r0, [pc, #4]	; (80087e4 <__malloc_unlock+0x8>)
 80087de:	f7ff be06 	b.w	80083ee <__retarget_lock_release_recursive>
 80087e2:	bf00      	nop
 80087e4:	200007dc 	.word	0x200007dc

080087e8 <_read_r>:
 80087e8:	b538      	push	{r3, r4, r5, lr}
 80087ea:	4d07      	ldr	r5, [pc, #28]	; (8008808 <_read_r+0x20>)
 80087ec:	4604      	mov	r4, r0
 80087ee:	4608      	mov	r0, r1
 80087f0:	4611      	mov	r1, r2
 80087f2:	2200      	movs	r2, #0
 80087f4:	602a      	str	r2, [r5, #0]
 80087f6:	461a      	mov	r2, r3
 80087f8:	f7fa f986 	bl	8002b08 <_read>
 80087fc:	1c43      	adds	r3, r0, #1
 80087fe:	d102      	bne.n	8008806 <_read_r+0x1e>
 8008800:	682b      	ldr	r3, [r5, #0]
 8008802:	b103      	cbz	r3, 8008806 <_read_r+0x1e>
 8008804:	6023      	str	r3, [r4, #0]
 8008806:	bd38      	pop	{r3, r4, r5, pc}
 8008808:	200007e8 	.word	0x200007e8

0800880c <_init>:
 800880c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800880e:	bf00      	nop
 8008810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008812:	bc08      	pop	{r3}
 8008814:	469e      	mov	lr, r3
 8008816:	4770      	bx	lr

08008818 <_fini>:
 8008818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800881a:	bf00      	nop
 800881c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800881e:	bc08      	pop	{r3}
 8008820:	469e      	mov	lr, r3
 8008822:	4770      	bx	lr
