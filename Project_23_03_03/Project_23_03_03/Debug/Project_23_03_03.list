
Project_23_03_03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fb0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08009180  08009180  00019180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009400  08009400  00020138  2**0
                  CONTENTS
  4 .ARM          00000008  08009400  08009400  00019400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009408  08009408  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009408  08009408  00019408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800940c  0800940c  0001940c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  08009410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  20000138  08009548  00020138  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  08009548  000203a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e5c6  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000217f  00000000  00000000  0002e72e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  000308b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  00031450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022e03  00000000  00000000  00031f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c1d  00000000  00000000  00054d73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cccfb  00000000  00000000  00065990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013268b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003978  00000000  00000000  001326dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000138 	.word	0x20000138
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009168 	.word	0x08009168

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000013c 	.word	0x2000013c
 800020c:	08009168 	.word	0x08009168

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <__io_putchar>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

/* @brief  Retargets the C library printf function to the USART. */
PUTCHAR_PROTOTYPE {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80005cc:	1d39      	adds	r1, r7, #4
 80005ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005d2:	2201      	movs	r2, #1
 80005d4:	4803      	ldr	r0, [pc, #12]	; (80005e4 <__io_putchar+0x20>)
 80005d6:	f006 f97a 	bl	80068ce <HAL_UART_Transmit>
  return ch;
 80005da:	687b      	ldr	r3, [r7, #4]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20000154 	.word	0x20000154

080005e8 <main>:

/* bit flag */
uint8_t bitFlag = 0;

int main(void)
{
 80005e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ea:	b08f      	sub	sp, #60	; 0x3c
 80005ec:	af08      	add	r7, sp, #32
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f002 fc6f 	bl	8002ed0 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 fa0f 	bl	8000a14 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 facb 	bl	8000b90 <MX_GPIO_Init>
  MX_DMA_Init();
 80005fa:	f000 faa9 	bl	8000b50 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005fe:	f000 fa77 	bl	8000af0 <MX_USART2_UART_Init>

  /*##-1- Configure the I2C peripheral ######################################*/
  I2cHandle.Instance             = I2Cx;
 8000602:	4b7e      	ldr	r3, [pc, #504]	; (80007fc <main+0x214>)
 8000604:	4a7e      	ldr	r2, [pc, #504]	; (8000800 <main+0x218>)
 8000606:	601a      	str	r2, [r3, #0]
  I2cHandle.Init.AddressingMode  = I2C_ADDRESSINGMODE_10BIT;
 8000608:	4b7c      	ldr	r3, [pc, #496]	; (80007fc <main+0x214>)
 800060a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800060e:	611a      	str	r2, [r3, #16]
  I2cHandle.Init.ClockSpeed      = 400000;
 8000610:	4b7a      	ldr	r3, [pc, #488]	; (80007fc <main+0x214>)
 8000612:	4a7c      	ldr	r2, [pc, #496]	; (8000804 <main+0x21c>)
 8000614:	605a      	str	r2, [r3, #4]
  I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000616:	4b79      	ldr	r3, [pc, #484]	; (80007fc <main+0x214>)
 8000618:	2200      	movs	r2, #0
 800061a:	615a      	str	r2, [r3, #20]
  I2cHandle.Init.DutyCycle       = I2C_DUTYCYCLE_16_9;
 800061c:	4b77      	ldr	r3, [pc, #476]	; (80007fc <main+0x214>)
 800061e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000622:	609a      	str	r2, [r3, #8]
  I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000624:	4b75      	ldr	r3, [pc, #468]	; (80007fc <main+0x214>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 800062a:	4b74      	ldr	r3, [pc, #464]	; (80007fc <main+0x214>)
 800062c:	2200      	movs	r2, #0
 800062e:	621a      	str	r2, [r3, #32]
  I2cHandle.Init.OwnAddress1     = I2C_ADDRESS;
 8000630:	4b72      	ldr	r3, [pc, #456]	; (80007fc <main+0x214>)
 8000632:	f240 320f 	movw	r2, #783	; 0x30f
 8000636:	60da      	str	r2, [r3, #12]
  I2cHandle.Init.OwnAddress2     = 0xFE;
 8000638:	4b70      	ldr	r3, [pc, #448]	; (80007fc <main+0x214>)
 800063a:	22fe      	movs	r2, #254	; 0xfe
 800063c:	619a      	str	r2, [r3, #24]

  if(HAL_I2C_Init(&I2cHandle) != HAL_OK){ Error_Handler(); }
 800063e:	486f      	ldr	r0, [pc, #444]	; (80007fc <main+0x214>)
 8000640:	f003 fbc6 	bl	8003dd0 <HAL_I2C_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <main+0x66>
 800064a:	f000 fd55 	bl	80010f8 <Error_Handler>

  serial_init();
 800064e:	f000 fd67 	bl	8001120 <serial_init>
  #ifdef MASTER_BOARD
  	  printf("Init OK\r\n");
 8000652:	486d      	ldr	r0, [pc, #436]	; (8000808 <main+0x220>)
 8000654:	f007 fc28 	bl	8007ea8 <puts>


  /****************** MAIN **********************/
  while (1) {
	  /*Perintah untuk kirim data ke UART*/
  	  if (bitFlag & BFLAG_UART_RCV) {
 8000658:	4b6c      	ldr	r3, [pc, #432]	; (800080c <main+0x224>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	f003 0301 	and.w	r3, r3, #1
 8000660:	2b00      	cmp	r3, #0
 8000662:	d016      	beq.n	8000692 <main+0xaa>
  		  uartProcessing (u8arr_uartEvent, u16_lenCnt - 2); // remove \r & \n
 8000664:	4b6a      	ldr	r3, [pc, #424]	; (8000810 <main+0x228>)
 8000666:	881b      	ldrh	r3, [r3, #0]
 8000668:	3b02      	subs	r3, #2
 800066a:	b29b      	uxth	r3, r3
 800066c:	4619      	mov	r1, r3
 800066e:	4869      	ldr	r0, [pc, #420]	; (8000814 <main+0x22c>)
 8000670:	f000 fc9a 	bl	8000fa8 <uartProcessing>
  		  memset(u8arr_uartEvent, 0, UART_BUF_SZ);
 8000674:	2240      	movs	r2, #64	; 0x40
 8000676:	2100      	movs	r1, #0
 8000678:	4866      	ldr	r0, [pc, #408]	; (8000814 <main+0x22c>)
 800067a:	f007 fb87 	bl	8007d8c <memset>
  		  u16_lenCnt = 0;
 800067e:	4b64      	ldr	r3, [pc, #400]	; (8000810 <main+0x228>)
 8000680:	2200      	movs	r2, #0
 8000682:	801a      	strh	r2, [r3, #0]

  		  /* Reset bit 0 bitflag */
  		  bitFlag 	&= ~BFLAG_UART_RCV;
 8000684:	4b61      	ldr	r3, [pc, #388]	; (800080c <main+0x224>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	f023 0301 	bic.w	r3, r3, #1
 800068c:	b2da      	uxtb	r2, r3
 800068e:	4b5f      	ldr	r3, [pc, #380]	; (800080c <main+0x224>)
 8000690:	701a      	strb	r2, [r3, #0]
  	  }

  	  /* Perintah untuk WRITE atau sending I2C */
  	  if ((bitFlag & BFLAG_I2C_WR1) || (bitFlag & BFLAG_I2C_WR2) || (bitFlag & BFLAG_I2C_WR3)) {
 8000692:	4b5e      	ldr	r3, [pc, #376]	; (800080c <main+0x224>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	f003 0308 	and.w	r3, r3, #8
 800069a:	2b00      	cmp	r3, #0
 800069c:	d10b      	bne.n	80006b6 <main+0xce>
 800069e:	4b5b      	ldr	r3, [pc, #364]	; (800080c <main+0x224>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	f003 0310 	and.w	r3, r3, #16
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d105      	bne.n	80006b6 <main+0xce>
 80006aa:	4b58      	ldr	r3, [pc, #352]	; (800080c <main+0x224>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	f003 0320 	and.w	r3, r3, #32
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d025      	beq.n	8000702 <main+0x11a>
	  	  #ifdef MASTER_BOARD
			  printf("Master I2C Sending... \r\n");
 80006b6:	4858      	ldr	r0, [pc, #352]	; (8000818 <main+0x230>)
 80006b8:	f007 fbf6 	bl	8007ea8 <puts>

			  do
			  {
				  /*##-2- Proses transmission START #####################################*/
				  if(HAL_I2C_Master_Transmit_IT(&I2cHandle, (uint16_t)I2C_ADDRESS, (uint8_t*)aTxBuffer, TXBUFFERSIZE)!= HAL_OK)
 80006bc:	2364      	movs	r3, #100	; 0x64
 80006be:	4a57      	ldr	r2, [pc, #348]	; (800081c <main+0x234>)
 80006c0:	f240 310f 	movw	r1, #783	; 0x30f
 80006c4:	484d      	ldr	r0, [pc, #308]	; (80007fc <main+0x214>)
 80006c6:	f003 fcc7 	bl	8004058 <HAL_I2C_Master_Transmit_IT>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <main+0xec>
				  	  {Error_Handler();
 80006d0:	f000 fd12 	bl	80010f8 <Error_Handler>
				  }

				  /*##-3- Menunggu transfer data selesai ###################################*/
				  while (HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY)
 80006d4:	bf00      	nop
 80006d6:	4849      	ldr	r0, [pc, #292]	; (80007fc <main+0x214>)
 80006d8:	f004 f870 	bl	80047bc <HAL_I2C_GetState>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b20      	cmp	r3, #32
 80006e0:	d1f9      	bne.n	80006d6 <main+0xee>
				  {}
				  printf("Sending Success!!\r\n\n");
 80006e2:	484f      	ldr	r0, [pc, #316]	; (8000820 <main+0x238>)
 80006e4:	f007 fbe0 	bl	8007ea8 <puts>
			  } while(HAL_I2C_GetError(&I2cHandle) == HAL_I2C_ERROR_AF);
 80006e8:	4844      	ldr	r0, [pc, #272]	; (80007fc <main+0x214>)
 80006ea:	f004 f875 	bl	80047d8 <HAL_I2C_GetError>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b04      	cmp	r3, #4
 80006f2:	d0e3      	beq.n	80006bc <main+0xd4>

			  bitFlag |= BFLAG_I2C_RD1;
 80006f4:	4b45      	ldr	r3, [pc, #276]	; (800080c <main+0x224>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4b43      	ldr	r3, [pc, #268]	; (800080c <main+0x224>)
 8000700:	701a      	strb	r2, [r3, #0]
			  /* Reset bit 2 bitflag ada di bagian BFLAG_I2C_RD0*/
	  	  #endif
  	 }

  	/* Perintah untuk Compare buffer dan READ dari I2C */
  	 if (bitFlag & BFLAG_I2C_RD1)
 8000702:	4b42      	ldr	r3, [pc, #264]	; (800080c <main+0x224>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	f003 0304 	and.w	r3, r3, #4
 800070a:	2b00      	cmp	r3, #0
 800070c:	f000 80bb 	beq.w	8000886 <main+0x29e>
  	 {
  		 #ifdef MASTER_BOARD

  		 	 /*##-4- I2C periperal siap menerima data ############################*/
  			  do {
  				  printf("Master I2C Receiving... \r\n");
 8000710:	4844      	ldr	r0, [pc, #272]	; (8000824 <main+0x23c>)
 8000712:	f007 fbc9 	bl	8007ea8 <puts>

  				  if(HAL_I2C_Master_Receive_IT(&I2cHandle, (uint16_t)I2C_ADDRESS, (uint8_t *)aRxBuffer, RXBUFFERSIZE) != HAL_OK) {Error_Handler();}
 8000716:	2364      	movs	r3, #100	; 0x64
 8000718:	4a43      	ldr	r2, [pc, #268]	; (8000828 <main+0x240>)
 800071a:	f240 310f 	movw	r1, #783	; 0x30f
 800071e:	4837      	ldr	r0, [pc, #220]	; (80007fc <main+0x214>)
 8000720:	f003 fd40 	bl	80041a4 <HAL_I2C_Master_Receive_IT>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <main+0x146>
 800072a:	f000 fce5 	bl	80010f8 <Error_Handler>

  				  /* Saat Acknowledge failure (Slave tidak mengakui alamatnya) Master memulai ulang komunikasi */
  			  } while (HAL_I2C_GetError(&I2cHandle) == HAL_I2C_ERROR_AF);
 800072e:	4833      	ldr	r0, [pc, #204]	; (80007fc <main+0x214>)
 8000730:	f004 f852 	bl	80047d8 <HAL_I2C_GetError>
 8000734:	4603      	mov	r3, r0
 8000736:	2b04      	cmp	r3, #4
 8000738:	d0ea      	beq.n	8000710 <main+0x128>

  			  /*##-5- Menunggu akhir transfer ###################################*/
  			  while (HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY){}
 800073a:	bf00      	nop
 800073c:	482f      	ldr	r0, [pc, #188]	; (80007fc <main+0x214>)
 800073e:	f004 f83d 	bl	80047bc <HAL_I2C_GetState>
 8000742:	4603      	mov	r3, r0
 8000744:	2b20      	cmp	r3, #32
 8000746:	d1f9      	bne.n	800073c <main+0x154>
  			  printf("Master I2C Receive Success\r\n\n");
 8000748:	4838      	ldr	r0, [pc, #224]	; (800082c <main+0x244>)
 800074a:	f007 fbad 	bl	8007ea8 <puts>

  			  /*##-6- Compare the sent and received buffers ##############################*/
  			  if(Buffercmp((uint8_t*)aTxBuffer,(uint8_t*)aRxBuffer, RXBUFFERSIZE)){
 800074e:	2264      	movs	r2, #100	; 0x64
 8000750:	4935      	ldr	r1, [pc, #212]	; (8000828 <main+0x240>)
 8000752:	4832      	ldr	r0, [pc, #200]	; (800081c <main+0x234>)
 8000754:	f000 f92e 	bl	80009b4 <Buffercmp>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d003      	beq.n	8000766 <main+0x17e>
  				  printf("Buffer compare Fail!!!\r\n\n");
 800075e:	4834      	ldr	r0, [pc, #208]	; (8000830 <main+0x248>)
 8000760:	f007 fba2 	bl	8007ea8 <puts>
 8000764:	e002      	b.n	800076c <main+0x184>
  			  }
  			  else {
  				  printf("Buffer compare Success!!!\r\n\n");
 8000766:	4833      	ldr	r0, [pc, #204]	; (8000834 <main+0x24c>)
 8000768:	f007 fb9e 	bl	8007ea8 <puts>
  			  }

  			  /* Jika di write di form 1 maka nilai buffer disimpan di var res1 dan atur BFLAG_I2C_WR1*/
  			  if (bitFlag & BFLAG_I2C_WR1)
 800076c:	4b27      	ldr	r3, [pc, #156]	; (800080c <main+0x224>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	f003 0308 	and.w	r3, r3, #8
 8000774:	2b00      	cmp	r3, #0
 8000776:	d018      	beq.n	80007aa <main+0x1c2>
  			  {
  				  for (uint8_t i=0; i<10; i++)
 8000778:	2300      	movs	r3, #0
 800077a:	75fb      	strb	r3, [r7, #23]
 800077c:	e00a      	b.n	8000794 <main+0x1ac>
  				  {
  					  res1[i] = aRxBuffer[i];
 800077e:	7dfa      	ldrb	r2, [r7, #23]
 8000780:	7dfb      	ldrb	r3, [r7, #23]
 8000782:	4929      	ldr	r1, [pc, #164]	; (8000828 <main+0x240>)
 8000784:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000788:	492b      	ldr	r1, [pc, #172]	; (8000838 <main+0x250>)
 800078a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  				  for (uint8_t i=0; i<10; i++)
 800078e:	7dfb      	ldrb	r3, [r7, #23]
 8000790:	3301      	adds	r3, #1
 8000792:	75fb      	strb	r3, [r7, #23]
 8000794:	7dfb      	ldrb	r3, [r7, #23]
 8000796:	2b09      	cmp	r3, #9
 8000798:	d9f1      	bls.n	800077e <main+0x196>
  				  }

  				  /* Reset bit 2 bitflag ada di bagian BFLAG_I2C_RD0*/
  				  bitFlag 	&= ~BFLAG_I2C_WR1;
 800079a:	4b1c      	ldr	r3, [pc, #112]	; (800080c <main+0x224>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	f023 0308 	bic.w	r3, r3, #8
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	4b19      	ldr	r3, [pc, #100]	; (800080c <main+0x224>)
 80007a6:	701a      	strb	r2, [r3, #0]
 80007a8:	e05f      	b.n	800086a <main+0x282>
  			  }
  			  else if (bitFlag & BFLAG_I2C_WR2)
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <main+0x224>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	f003 0310 	and.w	r3, r3, #16
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d018      	beq.n	80007e8 <main+0x200>
			  {
				  for (uint8_t i=0; i<10; i++)
 80007b6:	2300      	movs	r3, #0
 80007b8:	75bb      	strb	r3, [r7, #22]
 80007ba:	e00a      	b.n	80007d2 <main+0x1ea>
				  {
					  res2[i] = aRxBuffer[i];
 80007bc:	7dba      	ldrb	r2, [r7, #22]
 80007be:	7dbb      	ldrb	r3, [r7, #22]
 80007c0:	4919      	ldr	r1, [pc, #100]	; (8000828 <main+0x240>)
 80007c2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80007c6:	491d      	ldr	r1, [pc, #116]	; (800083c <main+0x254>)
 80007c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				  for (uint8_t i=0; i<10; i++)
 80007cc:	7dbb      	ldrb	r3, [r7, #22]
 80007ce:	3301      	adds	r3, #1
 80007d0:	75bb      	strb	r3, [r7, #22]
 80007d2:	7dbb      	ldrb	r3, [r7, #22]
 80007d4:	2b09      	cmp	r3, #9
 80007d6:	d9f1      	bls.n	80007bc <main+0x1d4>
				  }

				  /* Reset bit 2 bitflag ada di bagian BFLAG_I2C_RD0*/
				  bitFlag 	&= ~BFLAG_I2C_WR2;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <main+0x224>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	f023 0310 	bic.w	r3, r3, #16
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <main+0x224>)
 80007e4:	701a      	strb	r2, [r3, #0]
 80007e6:	e040      	b.n	800086a <main+0x282>
			  }
  			  else if (bitFlag & BFLAG_I2C_WR3)
 80007e8:	4b08      	ldr	r3, [pc, #32]	; (800080c <main+0x224>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	f003 0320 	and.w	r3, r3, #32
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d03a      	beq.n	800086a <main+0x282>
			  {
				  for (uint8_t i=0; i<10; i++)
 80007f4:	2300      	movs	r3, #0
 80007f6:	757b      	strb	r3, [r7, #21]
 80007f8:	e02d      	b.n	8000856 <main+0x26e>
 80007fa:	bf00      	nop
 80007fc:	200001f8 	.word	0x200001f8
 8000800:	40005400 	.word	0x40005400
 8000804:	00061a80 	.word	0x00061a80
 8000808:	08009180 	.word	0x08009180
 800080c:	200002f8 	.word	0x200002f8
 8000810:	200002f6 	.word	0x200002f6
 8000814:	200002b4 	.word	0x200002b4
 8000818:	0800918c 	.word	0x0800918c
 800081c:	20000078 	.word	0x20000078
 8000820:	080091a4 	.word	0x080091a4
 8000824:	080091b8 	.word	0x080091b8
 8000828:	2000024c 	.word	0x2000024c
 800082c:	080091d4 	.word	0x080091d4
 8000830:	080091f4 	.word	0x080091f4
 8000834:	08009210 	.word	0x08009210
 8000838:	20000000 	.word	0x20000000
 800083c:	20000028 	.word	0x20000028
				  {
					  res3[i] = aRxBuffer[i];
 8000840:	7d7a      	ldrb	r2, [r7, #21]
 8000842:	7d7b      	ldrb	r3, [r7, #21]
 8000844:	493b      	ldr	r1, [pc, #236]	; (8000934 <main+0x34c>)
 8000846:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800084a:	493b      	ldr	r1, [pc, #236]	; (8000938 <main+0x350>)
 800084c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				  for (uint8_t i=0; i<10; i++)
 8000850:	7d7b      	ldrb	r3, [r7, #21]
 8000852:	3301      	adds	r3, #1
 8000854:	757b      	strb	r3, [r7, #21]
 8000856:	7d7b      	ldrb	r3, [r7, #21]
 8000858:	2b09      	cmp	r3, #9
 800085a:	d9f1      	bls.n	8000840 <main+0x258>
				  }

				  /* Reset bit 2 bitflag ada di bagian BFLAG_I2C_RD0*/
				  bitFlag 	&= ~BFLAG_I2C_WR3;
 800085c:	4b37      	ldr	r3, [pc, #220]	; (800093c <main+0x354>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	f023 0320 	bic.w	r3, r3, #32
 8000864:	b2da      	uxtb	r2, r3
 8000866:	4b35      	ldr	r3, [pc, #212]	; (800093c <main+0x354>)
 8000868:	701a      	strb	r2, [r3, #0]
			  }

  			 /* Reset bit 1 bitflag */
			 bitFlag 	&= ~BFLAG_I2C_RD1;
 800086a:	4b34      	ldr	r3, [pc, #208]	; (800093c <main+0x354>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	f023 0304 	bic.w	r3, r3, #4
 8000872:	b2da      	uxtb	r2, r3
 8000874:	4b31      	ldr	r3, [pc, #196]	; (800093c <main+0x354>)
 8000876:	701a      	strb	r2, [r3, #0]
			 bitFlag 	|= BFLAG_I2C_RD0;
 8000878:	4b30      	ldr	r3, [pc, #192]	; (800093c <main+0x354>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	b2da      	uxtb	r2, r3
 8000882:	4b2e      	ldr	r3, [pc, #184]	; (800093c <main+0x354>)
 8000884:	701a      	strb	r2, [r3, #0]
		 #endif
	 }
  	 if (bitFlag & BFLAG_I2C_RD0)
 8000886:	4b2d      	ldr	r3, [pc, #180]	; (800093c <main+0x354>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	2b00      	cmp	r3, #0
 8000890:	f43f aee2 	beq.w	8000658 <main+0x70>
  	 {
  	  	 #ifdef MASTER_BOARD

  	  		 printf("TX integer: %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld\r\n",
 8000894:	4b2a      	ldr	r3, [pc, #168]	; (8000940 <main+0x358>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	4b29      	ldr	r3, [pc, #164]	; (8000940 <main+0x358>)
 800089c:	685a      	ldr	r2, [r3, #4]
 800089e:	60ba      	str	r2, [r7, #8]
 80008a0:	4b27      	ldr	r3, [pc, #156]	; (8000940 <main+0x358>)
 80008a2:	6898      	ldr	r0, [r3, #8]
 80008a4:	6078      	str	r0, [r7, #4]
 80008a6:	4b26      	ldr	r3, [pc, #152]	; (8000940 <main+0x358>)
 80008a8:	68db      	ldr	r3, [r3, #12]
 80008aa:	4a25      	ldr	r2, [pc, #148]	; (8000940 <main+0x358>)
 80008ac:	6912      	ldr	r2, [r2, #16]
 80008ae:	4924      	ldr	r1, [pc, #144]	; (8000940 <main+0x358>)
 80008b0:	6949      	ldr	r1, [r1, #20]
 80008b2:	4823      	ldr	r0, [pc, #140]	; (8000940 <main+0x358>)
 80008b4:	6980      	ldr	r0, [r0, #24]
 80008b6:	4c22      	ldr	r4, [pc, #136]	; (8000940 <main+0x358>)
 80008b8:	69e4      	ldr	r4, [r4, #28]
 80008ba:	4d21      	ldr	r5, [pc, #132]	; (8000940 <main+0x358>)
 80008bc:	6a2d      	ldr	r5, [r5, #32]
 80008be:	4e20      	ldr	r6, [pc, #128]	; (8000940 <main+0x358>)
 80008c0:	6a76      	ldr	r6, [r6, #36]	; 0x24
 80008c2:	9606      	str	r6, [sp, #24]
 80008c4:	9505      	str	r5, [sp, #20]
 80008c6:	9404      	str	r4, [sp, #16]
 80008c8:	9003      	str	r0, [sp, #12]
 80008ca:	9102      	str	r1, [sp, #8]
 80008cc:	9201      	str	r2, [sp, #4]
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	68f9      	ldr	r1, [r7, #12]
 80008d6:	481b      	ldr	r0, [pc, #108]	; (8000944 <main+0x35c>)
 80008d8:	f007 fa60 	bl	8007d9c <iprintf>
  	  				 aTxBuffer[0], aTxBuffer[1], aTxBuffer[2],
					 aTxBuffer[3], aTxBuffer[4], aTxBuffer[5],
					 aTxBuffer[6], aTxBuffer[7], aTxBuffer[8], aTxBuffer[9]);
  	  		 printf("RX integer: %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld\r\n\n",
 80008dc:	4b15      	ldr	r3, [pc, #84]	; (8000934 <main+0x34c>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <main+0x34c>)
 80008e4:	685a      	ldr	r2, [r3, #4]
 80008e6:	60ba      	str	r2, [r7, #8]
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <main+0x34c>)
 80008ea:	6898      	ldr	r0, [r3, #8]
 80008ec:	6078      	str	r0, [r7, #4]
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <main+0x34c>)
 80008f0:	68db      	ldr	r3, [r3, #12]
 80008f2:	4a10      	ldr	r2, [pc, #64]	; (8000934 <main+0x34c>)
 80008f4:	6912      	ldr	r2, [r2, #16]
 80008f6:	490f      	ldr	r1, [pc, #60]	; (8000934 <main+0x34c>)
 80008f8:	6949      	ldr	r1, [r1, #20]
 80008fa:	480e      	ldr	r0, [pc, #56]	; (8000934 <main+0x34c>)
 80008fc:	6980      	ldr	r0, [r0, #24]
 80008fe:	4c0d      	ldr	r4, [pc, #52]	; (8000934 <main+0x34c>)
 8000900:	69e4      	ldr	r4, [r4, #28]
 8000902:	4d0c      	ldr	r5, [pc, #48]	; (8000934 <main+0x34c>)
 8000904:	6a2d      	ldr	r5, [r5, #32]
 8000906:	4e0b      	ldr	r6, [pc, #44]	; (8000934 <main+0x34c>)
 8000908:	6a76      	ldr	r6, [r6, #36]	; 0x24
 800090a:	9606      	str	r6, [sp, #24]
 800090c:	9505      	str	r5, [sp, #20]
 800090e:	9404      	str	r4, [sp, #16]
 8000910:	9003      	str	r0, [sp, #12]
 8000912:	9102      	str	r1, [sp, #8]
 8000914:	9201      	str	r2, [sp, #4]
 8000916:	9300      	str	r3, [sp, #0]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	68f9      	ldr	r1, [r7, #12]
 800091e:	480a      	ldr	r0, [pc, #40]	; (8000948 <main+0x360>)
 8000920:	f007 fa3c 	bl	8007d9c <iprintf>
					 aRxBuffer[0], aRxBuffer[1], aRxBuffer[2],
					 aRxBuffer[3], aRxBuffer[4], aRxBuffer[5],
					 aRxBuffer[6], aRxBuffer[7], aRxBuffer[8], aRxBuffer[9]);

  	  		 /* Reset bit 1 bitflag */
  			 bitFlag 	&= ~BFLAG_I2C_RD0;
 8000924:	4b05      	ldr	r3, [pc, #20]	; (800093c <main+0x354>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	f023 0302 	bic.w	r3, r3, #2
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4b03      	ldr	r3, [pc, #12]	; (800093c <main+0x354>)
 8000930:	701a      	strb	r2, [r3, #0]
  	  if (bitFlag & BFLAG_UART_RCV) {
 8000932:	e691      	b.n	8000658 <main+0x70>
 8000934:	2000024c 	.word	0x2000024c
 8000938:	20000050 	.word	0x20000050
 800093c:	200002f8 	.word	0x200002f8
 8000940:	20000078 	.word	0x20000078
 8000944:	0800922c 	.word	0x0800922c
 8000948:	0800926c 	.word	0x0800926c

0800094c <HAL_I2C_MasterTxCpltCallback>:
  * @param  I2cHandle: I2C handle
  * @note	Turn LED2 on: Jika kirim data berhasil
  ***********************************************************************************/
#ifdef MASTER_BOARD
//Untuk MASTER BOARD
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2cHandle){
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000954:	2201      	movs	r2, #1
 8000956:	2120      	movs	r1, #32
 8000958:	4803      	ldr	r0, [pc, #12]	; (8000968 <HAL_I2C_MasterTxCpltCallback+0x1c>)
 800095a:	f003 fa05 	bl	8003d68 <HAL_GPIO_WritePin>
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40020000 	.word	0x40020000

0800096c <HAL_I2C_MasterRxCpltCallback>:
  * @param  I2cHandle: I2C handle
  * @note	Turn LED2 on: Jika menerima data berhasil
  ************************************************************************************/
#ifdef MASTER_BOARD
// MASTER BOARD
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *I2cHandle) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000974:	2201      	movs	r2, #1
 8000976:	2120      	movs	r1, #32
 8000978:	4803      	ldr	r0, [pc, #12]	; (8000988 <HAL_I2C_MasterRxCpltCallback+0x1c>)
 800097a:	f003 f9f5 	bl	8003d68 <HAL_GPIO_WritePin>
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40020000 	.word	0x40020000

0800098c <HAL_I2C_ErrorCallback>:



/* @brief  I2C error callbacks
   @param  I2cHandle: I2C handle */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle){
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	printf("\r\nI2C ERROR \r\n\n");
 8000994:	4805      	ldr	r0, [pc, #20]	; (80009ac <HAL_I2C_ErrorCallback+0x20>)
 8000996:	f007 fa87 	bl	8007ea8 <puts>
	while(1) {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800099a:	2120      	movs	r1, #32
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <HAL_I2C_ErrorCallback+0x24>)
 800099e:	f003 f9fc 	bl	8003d9a <HAL_GPIO_TogglePin>
		HAL_Delay(20);
 80009a2:	2014      	movs	r0, #20
 80009a4:	f002 fb06 	bl	8002fb4 <HAL_Delay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80009a8:	e7f7      	b.n	800099a <HAL_I2C_ErrorCallback+0xe>
 80009aa:	bf00      	nop
 80009ac:	080092ac 	.word	0x080092ac
 80009b0:	40020000 	.word	0x40020000

080009b4 <Buffercmp>:
  * @param  pBuffer1, pBuffer2: buffers to be compared.
  * @param  BufferLength: buffer's length
  * @retval 0  : pBuffer1 identical to pBuffer2
  *         >0 : pBuffer1 differs from pBuffer2
  */
static uint16_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	4613      	mov	r3, r2
 80009c0:	80fb      	strh	r3, [r7, #6]
	printf("Compare prosess...\r\n");
 80009c2:	4811      	ldr	r0, [pc, #68]	; (8000a08 <Buffercmp+0x54>)
 80009c4:	f007 fa70 	bl	8007ea8 <puts>
	while (BufferLength--){
 80009c8:	e010      	b.n	80009ec <Buffercmp+0x38>
		if ((*pBuffer1) != *pBuffer2){
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	781a      	ldrb	r2, [r3, #0]
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d004      	beq.n	80009e0 <Buffercmp+0x2c>
			printf("Buffer different!!!\r\n");
 80009d6:	480d      	ldr	r0, [pc, #52]	; (8000a0c <Buffercmp+0x58>)
 80009d8:	f007 fa66 	bl	8007ea8 <puts>
			return BufferLength;
 80009dc:	88fb      	ldrh	r3, [r7, #6]
 80009de:	e00e      	b.n	80009fe <Buffercmp+0x4a>
		}
		pBuffer1++;
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	3301      	adds	r3, #1
 80009e4:	60fb      	str	r3, [r7, #12]
		pBuffer2++;
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	3301      	adds	r3, #1
 80009ea:	60bb      	str	r3, [r7, #8]
	while (BufferLength--){
 80009ec:	88fb      	ldrh	r3, [r7, #6]
 80009ee:	1e5a      	subs	r2, r3, #1
 80009f0:	80fa      	strh	r2, [r7, #6]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d1e9      	bne.n	80009ca <Buffercmp+0x16>
	}
	printf("Buffer same!!!\r\n");
 80009f6:	4806      	ldr	r0, [pc, #24]	; (8000a10 <Buffercmp+0x5c>)
 80009f8:	f007 fa56 	bl	8007ea8 <puts>
	return 0;
 80009fc:	2300      	movs	r3, #0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	080092bc 	.word	0x080092bc
 8000a0c:	080092d0 	.word	0x080092d0
 8000a10:	080092e8 	.word	0x080092e8

08000a14 <SystemClock_Config>:

/* @brief System Clock Configuration */
void SystemClock_Config(void) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b094      	sub	sp, #80	; 0x50
 8000a18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	2234      	movs	r2, #52	; 0x34
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f007 f9b2 	bl	8007d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a28:	f107 0308 	add.w	r3, r7, #8
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a38:	2300      	movs	r3, #0
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ae8 <SystemClock_Config+0xd4>)
 8000a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a40:	4a29      	ldr	r2, [pc, #164]	; (8000ae8 <SystemClock_Config+0xd4>)
 8000a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a46:	6413      	str	r3, [r2, #64]	; 0x40
 8000a48:	4b27      	ldr	r3, [pc, #156]	; (8000ae8 <SystemClock_Config+0xd4>)
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a54:	2300      	movs	r3, #0
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	4b24      	ldr	r3, [pc, #144]	; (8000aec <SystemClock_Config+0xd8>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a60:	4a22      	ldr	r2, [pc, #136]	; (8000aec <SystemClock_Config+0xd8>)
 8000a62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a66:	6013      	str	r3, [r2, #0]
 8000a68:	4b20      	ldr	r3, [pc, #128]	; (8000aec <SystemClock_Config+0xd8>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a70:	603b      	str	r3, [r7, #0]
 8000a72:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.*/
  RCC_OscInitStruct.OscillatorType 		= RCC_OSCILLATORTYPE_HSI;
 8000a74:	2302      	movs	r3, #2
 8000a76:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState 			= RCC_HSI_ON;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a7c:	2310      	movs	r3, #16
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState 		= RCC_PLL_ON;
 8000a80:	2302      	movs	r3, #2
 8000a82:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource 		= RCC_PLLSOURCE_HSI;
 8000a84:	2300      	movs	r3, #0
 8000a86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM 			= 16;
 8000a88:	2310      	movs	r3, #16
 8000a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN 			= 336;
 8000a8c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a90:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP 			= RCC_PLLP_DIV4;
 8000a92:	2304      	movs	r3, #4
 8000a94:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ 			= 2;
 8000a96:	2302      	movs	r3, #2
 8000a98:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR 			= 2;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f005 fc28 	bl	80062f8 <HAL_RCC_OscConfig>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000aae:	f000 fb23 	bl	80010f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab2:	230f      	movs	r3, #15
 8000ab4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000abe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ac2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK){
 8000ac8:	f107 0308 	add.w	r3, r7, #8
 8000acc:	2105      	movs	r1, #5
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f005 f8c8 	bl	8005c64 <HAL_RCC_ClockConfig>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0xca>
    Error_Handler();
 8000ada:	f000 fb0d 	bl	80010f8 <Error_Handler>
  }
}
 8000ade:	bf00      	nop
 8000ae0:	3750      	adds	r7, #80	; 0x50
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40007000 	.word	0x40007000

08000af0 <MX_USART2_UART_Init>:

/* @brief USART2 Initialization Function*/
static void MX_USART2_UART_Init(void) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  huart2.Instance 			= USART2;
 8000af4:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <MX_USART2_UART_Init+0x54>)
 8000af6:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <MX_USART2_UART_Init+0x58>)
 8000af8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate 		= 115200;
 8000afa:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <MX_USART2_UART_Init+0x54>)
 8000afc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength 	= UART_WORDLENGTH_8B;
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <MX_USART2_UART_Init+0x54>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits 		= UART_STOPBITS_1;
 8000b08:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_USART2_UART_Init+0x54>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity 		= UART_PARITY_NONE;
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <MX_USART2_UART_Init+0x54>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode 			= UART_MODE_TX_RX;
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <MX_USART2_UART_Init+0x54>)
 8000b16:	220c      	movs	r2, #12
 8000b18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl 	= UART_HWCONTROL_NONE;
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <MX_USART2_UART_Init+0x54>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling 	= UART_OVERSAMPLING_16;
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <MX_USART2_UART_Init+0x54>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart2) != HAL_OK){
 8000b26:	4807      	ldr	r0, [pc, #28]	; (8000b44 <MX_USART2_UART_Init+0x54>)
 8000b28:	f005 fe84 	bl	8006834 <HAL_UART_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_USART2_UART_Init+0x46>
    Error_Handler();
 8000b32:	f000 fae1 	bl	80010f8 <Error_Handler>
  }

  #ifdef RX_EVENT_CB
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, u8arr_eventBuff, UART_BUF_SZ);
 8000b36:	2240      	movs	r2, #64	; 0x40
 8000b38:	4904      	ldr	r1, [pc, #16]	; (8000b4c <MX_USART2_UART_Init+0x5c>)
 8000b3a:	4802      	ldr	r0, [pc, #8]	; (8000b44 <MX_USART2_UART_Init+0x54>)
 8000b3c:	f005 ff89 	bl	8006a52 <HAL_UARTEx_ReceiveToIdle_DMA>
  #else
	serial_init();
  #endif
}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000154 	.word	0x20000154
 8000b48:	40004400 	.word	0x40004400
 8000b4c:	20000274 	.word	0x20000274

08000b50 <MX_DMA_Init>:


static void MX_DMA_Init(void) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_DMA_Init+0x3c>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a0b      	ldr	r2, [pc, #44]	; (8000b8c <MX_DMA_Init+0x3c>)
 8000b60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_DMA_Init+0x3c>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2100      	movs	r1, #0
 8000b76:	2010      	movs	r0, #16
 8000b78:	f002 fb1b 	bl	80031b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000b7c:	2010      	movs	r0, #16
 8000b7e:	f002 fb34 	bl	80031ea <HAL_NVIC_EnableIRQ>
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800

08000b90 <MX_GPIO_Init>:

/* @brief GPIO Initialization Function*/
static void MX_GPIO_Init(void) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
 8000ba4:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	4b2d      	ldr	r3, [pc, #180]	; (8000c60 <MX_GPIO_Init+0xd0>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a2c      	ldr	r2, [pc, #176]	; (8000c60 <MX_GPIO_Init+0xd0>)
 8000bb0:	f043 0304 	orr.w	r3, r3, #4
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b2a      	ldr	r3, [pc, #168]	; (8000c60 <MX_GPIO_Init+0xd0>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0304 	and.w	r3, r3, #4
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	4b26      	ldr	r3, [pc, #152]	; (8000c60 <MX_GPIO_Init+0xd0>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a25      	ldr	r2, [pc, #148]	; (8000c60 <MX_GPIO_Init+0xd0>)
 8000bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <MX_GPIO_Init+0xd0>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	4b1f      	ldr	r3, [pc, #124]	; (8000c60 <MX_GPIO_Init+0xd0>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a1e      	ldr	r2, [pc, #120]	; (8000c60 <MX_GPIO_Init+0xd0>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b1c      	ldr	r3, [pc, #112]	; (8000c60 <MX_GPIO_Init+0xd0>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <MX_GPIO_Init+0xd0>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a17      	ldr	r2, [pc, #92]	; (8000c60 <MX_GPIO_Init+0xd0>)
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <MX_GPIO_Init+0xd0>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2120      	movs	r1, #32
 8000c1a:	4812      	ldr	r0, [pc, #72]	; (8000c64 <MX_GPIO_Init+0xd4>)
 8000c1c:	f003 f8a4 	bl	8003d68 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin 		= B1_Pin;
 8000c20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 8000c26:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4619      	mov	r1, r3
 8000c36:	480c      	ldr	r0, [pc, #48]	; (8000c68 <MX_GPIO_Init+0xd8>)
 8000c38:	f002 ff02 	bl	8003a40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin 		= LD2_Pin;
 8000c3c:	2320      	movs	r3, #32
 8000c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode 		= GPIO_MODE_OUTPUT_PP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed 	= GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4619      	mov	r1, r3
 8000c52:	4804      	ldr	r0, [pc, #16]	; (8000c64 <MX_GPIO_Init+0xd4>)
 8000c54:	f002 fef4 	bl	8003a40 <HAL_GPIO_Init>
}
 8000c58:	bf00      	nop
 8000c5a:	3728      	adds	r7, #40	; 0x28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020000 	.word	0x40020000
 8000c68:	40020800 	.word	0x40020800

08000c6c <tinysh_dec>:

/*********************************************************************
 * @name	: tinysh_dec
 * @brief	: string to decimal conversion (up to 15 chars).
 *********************************************************************/
long tinysh_dec(char *s) {
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  unsigned long res=0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	60fb      	str	r3, [r7, #12]
  uint8_t index = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	72fb      	strb	r3, [r7, #11]
  int8_t min	= 1;			//Penanda masukan - atau +
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	72bb      	strb	r3, [r7, #10]

  while(*s) {
 8000c80:	e031      	b.n	8000ce6 <tinysh_dec+0x7a>
	  res*=10;					//berfungsi menjadikan result kelipatan pangkat 10 (menjadikan puluhan)
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	4613      	mov	r3, r2
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	4413      	add	r3, r2
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	60fb      	str	r3, [r7, #12]

	  if((*s == '-')&&(index == 0))			// jika inputan negatif
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b2d      	cmp	r3, #45	; 0x2d
 8000c94:	d105      	bne.n	8000ca2 <tinysh_dec+0x36>
 8000c96:	7afb      	ldrb	r3, [r7, #11]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d102      	bne.n	8000ca2 <tinysh_dec+0x36>
		  min = -1;
 8000c9c:	23ff      	movs	r3, #255	; 0xff
 8000c9e:	72bb      	strb	r3, [r7, #10]
 8000ca0:	e018      	b.n	8000cd4 <tinysh_dec+0x68>
	  else if((*s == '0')&&(index == 0))	// jika inputan 0
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b30      	cmp	r3, #48	; 0x30
 8000ca8:	d105      	bne.n	8000cb6 <tinysh_dec+0x4a>
 8000caa:	7afb      	ldrb	r3, [r7, #11]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d102      	bne.n	8000cb6 <tinysh_dec+0x4a>
		  res = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	e00e      	b.n	8000cd4 <tinysh_dec+0x68>
	  else if(*s>='0' && *s<='9')			// jika inputan normal
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b2f      	cmp	r3, #47	; 0x2f
 8000cbc:	d919      	bls.n	8000cf2 <tinysh_dec+0x86>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b39      	cmp	r3, #57	; 0x39
 8000cc4:	d815      	bhi.n	8000cf2 <tinysh_dec+0x86>
		  res+=*s-'0';			//bagian ini berfungsi mengurangi ascii inputna dengan ascii 0 sehingga didapat nilai integer sesungguhnya
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	4413      	add	r3, r2
 8000cd0:	3b30      	subs	r3, #48	; 0x30
 8000cd2:	60fb      	str	r3, [r7, #12]
	  else
		  break;

	  s++;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	607b      	str	r3, [r7, #4]
	  index++;
 8000cda:	7afb      	ldrb	r3, [r7, #11]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	72fb      	strb	r3, [r7, #11]

	  if(index > 15)
 8000ce0:	7afb      	ldrb	r3, [r7, #11]
 8000ce2:	2b0f      	cmp	r3, #15
 8000ce4:	d804      	bhi.n	8000cf0 <tinysh_dec+0x84>
  while(*s) {
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1c9      	bne.n	8000c82 <tinysh_dec+0x16>
 8000cee:	e000      	b.n	8000cf2 <tinysh_dec+0x86>
	  {
		 break;
 8000cf0:	bf00      	nop
	  }
  }

  return (res * min);
 8000cf2:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	fb02 f303 	mul.w	r3, r2, r3
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <vShell_cmdParse>:

/********************************************************
 * 	Parsing incoming message						   	*
 ********************************************************/
static void vShell_cmdParse(char *input) {
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b08d      	sub	sp, #52	; 0x34
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	for(uint8_t u8_idx = 0; u8_idx < CFG_HEADER_NUM; u8_idx++) {
 8000d10:	2300      	movs	r3, #0
 8000d12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000d16:	e0d9      	b.n	8000ecc <vShell_cmdParse+0x1c4>
		if(!memcmp(input,(char*)&str_cfg_header[u8_idx][0], CFG_HEADER_CHARS_LEN)) {
 8000d18:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	4413      	add	r3, r2
 8000d22:	4a6f      	ldr	r2, [pc, #444]	; (8000ee0 <vShell_cmdParse+0x1d8>)
 8000d24:	4413      	add	r3, r2
 8000d26:	2205      	movs	r2, #5
 8000d28:	4619      	mov	r1, r3
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f007 f810 	bl	8007d50 <memcmp>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f040 80c5 	bne.w	8000ec2 <vShell_cmdParse+0x1ba>
			char *pChar 		= &input[CFG_HEADER_CHARS_LEN];		//pointer untuk menyimpan header (5 char)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3305      	adds	r3, #5
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
			char *pChar2 		= &input[CFG_HEADER_CHARS_LEN];		//pointer untuk menyimpan header (5 char)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	3305      	adds	r3, #5
 8000d42:	623b      	str	r3, [r7, #32]
			uint8_t u8_start 	= 0;			// ini penanda yang akan bergeser tiap indeks (menandai lokasi dari sparating symboll)
 8000d44:	2300      	movs	r3, #0
 8000d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			uint8_t u8_stop 	= 0;			// ini penenda start pointer paling awal atau awal baru setelah sparating symboll
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			uint8_t u8_cnt 		= 0;			// menampung ada berapa sih inputan nya
 8000d50:	2300      	movs	r3, #0
 8000d52:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

			char str_res[20];

			if (u8_idx < 4) {
 8000d56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d5a:	2b03      	cmp	r3, #3
 8000d5c:	f200 808e 	bhi.w	8000e7c <vShell_cmdParse+0x174>
				/* Reset TX Buffer*/
				for (uint8_t i=0; i<10; i++){
 8000d60:	2300      	movs	r3, #0
 8000d62:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000d66:	e00a      	b.n	8000d7e <vShell_cmdParse+0x76>
					aTxBuffer[i] = 0;
 8000d68:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d6c:	4a5d      	ldr	r2, [pc, #372]	; (8000ee4 <vShell_cmdParse+0x1dc>)
 8000d6e:	2100      	movs	r1, #0
 8000d70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (uint8_t i=0; i<10; i++){
 8000d74:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d78:	3301      	adds	r3, #1
 8000d7a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000d7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d82:	2b09      	cmp	r3, #9
 8000d84:	d9f0      	bls.n	8000d68 <vShell_cmdParse+0x60>
				}
				//memset(&aTxBuffer[0], 0, 100);
				/* WRITE HEADER */
				while (*pChar) {
 8000d86:	e073      	b.n	8000e70 <vShell_cmdParse+0x168>
					if(*pChar == ';' || *pChar == '}') {
 8000d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b3b      	cmp	r3, #59	; 0x3b
 8000d8e:	d003      	beq.n	8000d98 <vShell_cmdParse+0x90>
 8000d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b7d      	cmp	r3, #125	; 0x7d
 8000d96:	d163      	bne.n	8000e60 <vShell_cmdParse+0x158>
						memset(&str_res[0], 0, 20);		// default/reset untuk mendeklarasikan array str_res akan bernilai 0 semua sebanyak 10 indeks mulai dari str_res[0]
 8000d98:	f107 030c 	add.w	r3, r7, #12
 8000d9c:	2214      	movs	r2, #20
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f006 fff3 	bl	8007d8c <memset>
						memcpy(&str_res[0], &pChar2[u8_stop], u8_start - u8_stop);	// mengcopy data array dari pChar2[u8_stop] sejumlah (u8_start - u8_stop0 char menuju str_res
 8000da6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000daa:	6a3a      	ldr	r2, [r7, #32]
 8000dac:	18d1      	adds	r1, r2, r3
 8000dae:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000db2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	461a      	mov	r2, r3
 8000dba:	f107 030c 	add.w	r3, r7, #12
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f006 ffd6 	bl	8007d70 <memcpy>

						if(strlen(str_res)>0){
 8000dc4:	f107 030c 	add.w	r3, r7, #12
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d00a      	beq.n	8000de4 <vShell_cmdParse+0xdc>
							aTxBuffer[u8_cnt] = tinysh_dec(&str_res[0]);
 8000dce:	f897 4025 	ldrb.w	r4, [r7, #37]	; 0x25
 8000dd2:	f107 030c 	add.w	r3, r7, #12
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff ff48 	bl	8000c6c <tinysh_dec>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	4a41      	ldr	r2, [pc, #260]	; (8000ee4 <vShell_cmdParse+0x1dc>)
 8000de0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
						}

						if(*pChar == ';') { u8_stop = u8_start + 1; }
 8000de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b3b      	cmp	r3, #59	; 0x3b
 8000dea:	d105      	bne.n	8000df8 <vShell_cmdParse+0xf0>
 8000dec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000df0:	3301      	adds	r3, #1
 8000df2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000df6:	e02e      	b.n	8000e56 <vShell_cmdParse+0x14e>
						else if(*pChar == '}') {
 8000df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b7d      	cmp	r3, #125	; 0x7d
 8000dfe:	d12a      	bne.n	8000e56 <vShell_cmdParse+0x14e>
							if (u8_idx == 1){
 8000e00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d107      	bne.n	8000e18 <vShell_cmdParse+0x110>
								bitFlag |= BFLAG_I2C_WR1;
 8000e08:	4b37      	ldr	r3, [pc, #220]	; (8000ee8 <vShell_cmdParse+0x1e0>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	f043 0308 	orr.w	r3, r3, #8
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4b35      	ldr	r3, [pc, #212]	; (8000ee8 <vShell_cmdParse+0x1e0>)
 8000e14:	701a      	strb	r2, [r3, #0]
 8000e16:	e016      	b.n	8000e46 <vShell_cmdParse+0x13e>
							}
							else if (u8_idx == 2){
 8000e18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d107      	bne.n	8000e30 <vShell_cmdParse+0x128>
								bitFlag |= BFLAG_I2C_WR2;
 8000e20:	4b31      	ldr	r3, [pc, #196]	; (8000ee8 <vShell_cmdParse+0x1e0>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	f043 0310 	orr.w	r3, r3, #16
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ee8 <vShell_cmdParse+0x1e0>)
 8000e2c:	701a      	strb	r2, [r3, #0]
 8000e2e:	e00a      	b.n	8000e46 <vShell_cmdParse+0x13e>
							}
							else if (u8_idx == 3){
 8000e30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e34:	2b03      	cmp	r3, #3
 8000e36:	d106      	bne.n	8000e46 <vShell_cmdParse+0x13e>
								bitFlag |= BFLAG_I2C_WR3;
 8000e38:	4b2b      	ldr	r3, [pc, #172]	; (8000ee8 <vShell_cmdParse+0x1e0>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	f043 0320 	orr.w	r3, r3, #32
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4b29      	ldr	r3, [pc, #164]	; (8000ee8 <vShell_cmdParse+0x1e0>)
 8000e44:	701a      	strb	r2, [r3, #0]
							}

							bitFlag |= BFLAG_I2C_RD0;
 8000e46:	4b28      	ldr	r3, [pc, #160]	; (8000ee8 <vShell_cmdParse+0x1e0>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	f043 0302 	orr.w	r3, r3, #2
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	4b25      	ldr	r3, [pc, #148]	; (8000ee8 <vShell_cmdParse+0x1e0>)
 8000e52:	701a      	strb	r2, [r3, #0]
							break;
 8000e54:	e011      	b.n	8000e7a <vShell_cmdParse+0x172>
						}
						u8_cnt++;
 8000e56:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					}
					pChar++;
 8000e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e62:	3301      	adds	r3, #1
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
					u8_start++;
 8000e66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				while (*pChar) {
 8000e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d187      	bne.n	8000d88 <vShell_cmdParse+0x80>
				}
				break;
 8000e78:	bf00      	nop
				/* READ HEADER */
				read_header(res3);
			}
		}
	}
}
 8000e7a:	e02c      	b.n	8000ed6 <vShell_cmdParse+0x1ce>
			else if (u8_idx == 4){
 8000e7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e80:	2b04      	cmp	r3, #4
 8000e82:	d107      	bne.n	8000e94 <vShell_cmdParse+0x18c>
				bitFlag |= BFLAG_I2C_RD0;
 8000e84:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <vShell_cmdParse+0x1e0>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	f043 0302 	orr.w	r3, r3, #2
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <vShell_cmdParse+0x1e0>)
 8000e90:	701a      	strb	r2, [r3, #0]
 8000e92:	e016      	b.n	8000ec2 <vShell_cmdParse+0x1ba>
			else if (u8_idx == 5){
 8000e94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e98:	2b05      	cmp	r3, #5
 8000e9a:	d103      	bne.n	8000ea4 <vShell_cmdParse+0x19c>
				read_header(res1);
 8000e9c:	4813      	ldr	r0, [pc, #76]	; (8000eec <vShell_cmdParse+0x1e4>)
 8000e9e:	f000 f82b 	bl	8000ef8 <read_header>
 8000ea2:	e00e      	b.n	8000ec2 <vShell_cmdParse+0x1ba>
			else if (u8_idx == 6){
 8000ea4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ea8:	2b06      	cmp	r3, #6
 8000eaa:	d103      	bne.n	8000eb4 <vShell_cmdParse+0x1ac>
				read_header(res2);
 8000eac:	4810      	ldr	r0, [pc, #64]	; (8000ef0 <vShell_cmdParse+0x1e8>)
 8000eae:	f000 f823 	bl	8000ef8 <read_header>
 8000eb2:	e006      	b.n	8000ec2 <vShell_cmdParse+0x1ba>
			else if (u8_idx == 7){
 8000eb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000eb8:	2b07      	cmp	r3, #7
 8000eba:	d102      	bne.n	8000ec2 <vShell_cmdParse+0x1ba>
				read_header(res3);
 8000ebc:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <vShell_cmdParse+0x1ec>)
 8000ebe:	f000 f81b 	bl	8000ef8 <read_header>
	for(uint8_t u8_idx = 0; u8_idx < CFG_HEADER_NUM; u8_idx++) {
 8000ec2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000ecc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ed0:	2b07      	cmp	r3, #7
 8000ed2:	f67f af21 	bls.w	8000d18 <vShell_cmdParse+0x10>
}
 8000ed6:	bf00      	nop
 8000ed8:	3734      	adds	r7, #52	; 0x34
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd90      	pop	{r4, r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200000a0 	.word	0x200000a0
 8000ee4:	20000078 	.word	0x20000078
 8000ee8:	200002f8 	.word	0x200002f8
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	20000028 	.word	0x20000028
 8000ef4:	20000050 	.word	0x20000050

08000ef8 <read_header>:

void read_header(int32_t arr[]){		/* READ HEADER */
 8000ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000efa:	b0a9      	sub	sp, #164	; 0xa4
 8000efc:	af0a      	add	r7, sp, #40	; 0x28
 8000efe:	60f8      	str	r0, [r7, #12]
	char sendStr[STRLENMAX];
	memset (sendStr, 0, STRLENMAX);
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	2264      	movs	r2, #100	; 0x64
 8000f06:	2100      	movs	r1, #0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f006 ff3f 	bl	8007d8c <memset>
	snprintf(sendStr, STRLENMAX,
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	60bb      	str	r3, [r7, #8]
			"READ: %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld\r\n",
			arr[0] , arr[1], arr[2], arr[3], arr[4],
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	3304      	adds	r3, #4
	snprintf(sendStr, STRLENMAX,
 8000f18:	681b      	ldr	r3, [r3, #0]
			arr[0] , arr[1], arr[2], arr[3], arr[4],
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	3208      	adds	r2, #8
	snprintf(sendStr, STRLENMAX,
 8000f1e:	6812      	ldr	r2, [r2, #0]
 8000f20:	607a      	str	r2, [r7, #4]
			arr[0] , arr[1], arr[2], arr[3], arr[4],
 8000f22:	68f9      	ldr	r1, [r7, #12]
 8000f24:	310c      	adds	r1, #12
	snprintf(sendStr, STRLENMAX,
 8000f26:	6809      	ldr	r1, [r1, #0]
			arr[0] , arr[1], arr[2], arr[3], arr[4],
 8000f28:	68f8      	ldr	r0, [r7, #12]
 8000f2a:	3010      	adds	r0, #16
	snprintf(sendStr, STRLENMAX,
 8000f2c:	6800      	ldr	r0, [r0, #0]
			arr[5], arr[6], arr[7] , arr[8], arr[9]);
 8000f2e:	68fc      	ldr	r4, [r7, #12]
 8000f30:	3414      	adds	r4, #20
	snprintf(sendStr, STRLENMAX,
 8000f32:	6824      	ldr	r4, [r4, #0]
			arr[5], arr[6], arr[7] , arr[8], arr[9]);
 8000f34:	68fd      	ldr	r5, [r7, #12]
 8000f36:	3518      	adds	r5, #24
	snprintf(sendStr, STRLENMAX,
 8000f38:	682d      	ldr	r5, [r5, #0]
			arr[5], arr[6], arr[7] , arr[8], arr[9]);
 8000f3a:	68fe      	ldr	r6, [r7, #12]
 8000f3c:	361c      	adds	r6, #28
	snprintf(sendStr, STRLENMAX,
 8000f3e:	6836      	ldr	r6, [r6, #0]
			arr[5], arr[6], arr[7] , arr[8], arr[9]);
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	f102 0c20 	add.w	ip, r2, #32
	snprintf(sendStr, STRLENMAX,
 8000f46:	f8dc 2000 	ldr.w	r2, [ip]
 8000f4a:	603a      	str	r2, [r7, #0]
			arr[5], arr[6], arr[7] , arr[8], arr[9]);
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	f102 0c24 	add.w	ip, r2, #36	; 0x24
	snprintf(sendStr, STRLENMAX,
 8000f52:	f8dc 2000 	ldr.w	r2, [ip]
 8000f56:	f107 0c14 	add.w	ip, r7, #20
 8000f5a:	9208      	str	r2, [sp, #32]
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	9207      	str	r2, [sp, #28]
 8000f60:	9606      	str	r6, [sp, #24]
 8000f62:	9505      	str	r5, [sp, #20]
 8000f64:	9404      	str	r4, [sp, #16]
 8000f66:	9003      	str	r0, [sp, #12]
 8000f68:	9102      	str	r1, [sp, #8]
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	9201      	str	r2, [sp, #4]
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <read_header+0xa8>)
 8000f74:	2164      	movs	r1, #100	; 0x64
 8000f76:	4660      	mov	r0, ip
 8000f78:	f006 ff9e 	bl	8007eb8 <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)sendStr, strlen(sendStr), 0xFFFF);
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff f945 	bl	8000210 <strlen>
 8000f86:	4603      	mov	r3, r0
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	f107 0114 	add.w	r1, r7, #20
 8000f8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f92:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <read_header+0xac>)
 8000f94:	f005 fc9b 	bl	80068ce <HAL_UART_Transmit>
}
 8000f98:	bf00      	nop
 8000f9a:	377c      	adds	r7, #124	; 0x7c
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fa0:	080092f8 	.word	0x080092f8
 8000fa4:	20000154 	.word	0x20000154

08000fa8 <uartProcessing>:


void uartProcessing (uint8_t *u8p_buffer, uint16_t u16_size){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	807b      	strh	r3, [r7, #2]
	//Bagian ini akan dipanggil di serial.c, line 57
	//printf("UART jalan\r\n"); // Harusnya bisa langsung jalan kalo di konek lewat UI
	vShell_cmdParse((char*)u8p_buffer);
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff fea7 	bl	8000d08 <vShell_cmdParse>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <vUAFE_uart_handle>:
/*****************************************************************
 * @name 	vUAFE_uart_handle
 * @brief	handle afe uart data copy
 ****************************************************************/
static void vUAFE_uart_handle(uint16_t Size)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	80fb      	strh	r3, [r7, #6]
	uint16_t u16_numData;

	/* Check if number of received data in reception buffer has changed */
	if (Size != u16_oldPos)
 8000fce:	4b36      	ldr	r3, [pc, #216]	; (80010a8 <vUAFE_uart_handle+0xe4>)
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	88fa      	ldrh	r2, [r7, #6]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d05f      	beq.n	8001098 <vUAFE_uart_handle+0xd4>
	{
		if (Size > u16_oldPos)
 8000fd8:	4b33      	ldr	r3, [pc, #204]	; (80010a8 <vUAFE_uart_handle+0xe4>)
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	88fa      	ldrh	r2, [r7, #6]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d91a      	bls.n	8001018 <vUAFE_uart_handle+0x54>
		{
			/* Current position is higher than previous one */
			u16_numData = Size - u16_oldPos;
 8000fe2:	4b31      	ldr	r3, [pc, #196]	; (80010a8 <vUAFE_uart_handle+0xe4>)
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	88fa      	ldrh	r2, [r7, #6]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	81fb      	strh	r3, [r7, #14]
			memcpy(&u8arr_uartEvent[u16_lenCnt],&u8arr_eventBuff[u16_oldPos],u16_numData);
 8000fec:	4b2f      	ldr	r3, [pc, #188]	; (80010ac <vUAFE_uart_handle+0xe8>)
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b2f      	ldr	r3, [pc, #188]	; (80010b0 <vUAFE_uart_handle+0xec>)
 8000ff4:	4413      	add	r3, r2
 8000ff6:	4a2c      	ldr	r2, [pc, #176]	; (80010a8 <vUAFE_uart_handle+0xe4>)
 8000ff8:	8812      	ldrh	r2, [r2, #0]
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4a2d      	ldr	r2, [pc, #180]	; (80010b4 <vUAFE_uart_handle+0xf0>)
 8000ffe:	4411      	add	r1, r2
 8001000:	89fa      	ldrh	r2, [r7, #14]
 8001002:	4618      	mov	r0, r3
 8001004:	f006 feb4 	bl	8007d70 <memcpy>
			u16_lenCnt += u16_numData;
 8001008:	4b28      	ldr	r3, [pc, #160]	; (80010ac <vUAFE_uart_handle+0xe8>)
 800100a:	881a      	ldrh	r2, [r3, #0]
 800100c:	89fb      	ldrh	r3, [r7, #14]
 800100e:	4413      	add	r3, r2
 8001010:	b29a      	uxth	r2, r3
 8001012:	4b26      	ldr	r3, [pc, #152]	; (80010ac <vUAFE_uart_handle+0xe8>)
 8001014:	801a      	strh	r2, [r3, #0]
 8001016:	e02a      	b.n	800106e <vUAFE_uart_handle+0xaa>
		}
		else
		{
			/* End of buffer has been reached */
			u16_numData = UART_BUF_SZ - u16_oldPos;
 8001018:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <vUAFE_uart_handle+0xe4>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001020:	81fb      	strh	r3, [r7, #14]

			memcpy (&u8arr_uartEvent[u16_lenCnt], 			// copy data in that remaining space
 8001022:	4b22      	ldr	r3, [pc, #136]	; (80010ac <vUAFE_uart_handle+0xe8>)
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <vUAFE_uart_handle+0xec>)
 800102a:	4413      	add	r3, r2
					&u8arr_eventBuff[u16_oldPos],
 800102c:	4a1e      	ldr	r2, [pc, #120]	; (80010a8 <vUAFE_uart_handle+0xe4>)
 800102e:	8812      	ldrh	r2, [r2, #0]
 8001030:	4611      	mov	r1, r2
 8001032:	4a20      	ldr	r2, [pc, #128]	; (80010b4 <vUAFE_uart_handle+0xf0>)
 8001034:	4411      	add	r1, r2
			memcpy (&u8arr_uartEvent[u16_lenCnt], 			// copy data in that remaining space
 8001036:	89fa      	ldrh	r2, [r7, #14]
 8001038:	4618      	mov	r0, r3
 800103a:	f006 fe99 	bl	8007d70 <memcpy>
					u16_numData);

			u16_lenCnt += u16_numData;
 800103e:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <vUAFE_uart_handle+0xe8>)
 8001040:	881a      	ldrh	r2, [r3, #0]
 8001042:	89fb      	ldrh	r3, [r7, #14]
 8001044:	4413      	add	r3, r2
 8001046:	b29a      	uxth	r2, r3
 8001048:	4b18      	ldr	r3, [pc, #96]	; (80010ac <vUAFE_uart_handle+0xe8>)
 800104a:	801a      	strh	r2, [r3, #0]

			memcpy (&u8arr_uartEvent[u16_lenCnt], 			// copy the remaining data
 800104c:	4b17      	ldr	r3, [pc, #92]	; (80010ac <vUAFE_uart_handle+0xe8>)
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <vUAFE_uart_handle+0xec>)
 8001054:	4413      	add	r3, r2
 8001056:	88fa      	ldrh	r2, [r7, #6]
 8001058:	4916      	ldr	r1, [pc, #88]	; (80010b4 <vUAFE_uart_handle+0xf0>)
 800105a:	4618      	mov	r0, r3
 800105c:	f006 fe88 	bl	8007d70 <memcpy>
					&u8arr_eventBuff[0],
					Size);

			u16_lenCnt += Size;
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <vUAFE_uart_handle+0xe8>)
 8001062:	881a      	ldrh	r2, [r3, #0]
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	4413      	add	r3, r2
 8001068:	b29a      	uxth	r2, r3
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <vUAFE_uart_handle+0xe8>)
 800106c:	801a      	strh	r2, [r3, #0]
		}

		/* Check for ready to process */
		if((u8arr_uartEvent[u16_lenCnt - 1] == '\n')&&(u8arr_uartEvent[u16_lenCnt - 2]== '\r'))
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <vUAFE_uart_handle+0xe8>)
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	3b01      	subs	r3, #1
 8001074:	4a0e      	ldr	r2, [pc, #56]	; (80010b0 <vUAFE_uart_handle+0xec>)
 8001076:	5cd3      	ldrb	r3, [r2, r3]
 8001078:	2b0a      	cmp	r3, #10
 800107a:	d10d      	bne.n	8001098 <vUAFE_uart_handle+0xd4>
 800107c:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <vUAFE_uart_handle+0xe8>)
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	3b02      	subs	r3, #2
 8001082:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <vUAFE_uart_handle+0xec>)
 8001084:	5cd3      	ldrb	r3, [r2, r3]
 8001086:	2b0d      	cmp	r3, #13
 8001088:	d106      	bne.n	8001098 <vUAFE_uart_handle+0xd4>
		{
			bitFlag |= BFLAG_UART_RCV;
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <vUAFE_uart_handle+0xf4>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	b2da      	uxtb	r2, r3
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <vUAFE_uart_handle+0xf4>)
 8001096:	701a      	strb	r2, [r3, #0]
		}

	}

	u16_oldPos = Size;
 8001098:	4a03      	ldr	r2, [pc, #12]	; (80010a8 <vUAFE_uart_handle+0xe4>)
 800109a:	88fb      	ldrh	r3, [r7, #6]
 800109c:	8013      	strh	r3, [r2, #0]
}
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200002f4 	.word	0x200002f4
 80010ac:	200002f6 	.word	0x200002f6
 80010b0:	200002b4 	.word	0x200002b4
 80010b4:	20000274 	.word	0x20000274
 80010b8:	200002f8 	.word	0x200002f8

080010bc <HAL_UARTEx_RxEventCallback>:
/*****************************************************************
 * @name HAL_UARTEx_RxEventCallback
 * @brief
 ****************************************************************/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	807b      	strh	r3, [r7, #2]
	#ifdef RX_EVENT_CB
		if (huart->Instance == USART2)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a07      	ldr	r2, [pc, #28]	; (80010ec <HAL_UARTEx_RxEventCallback+0x30>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d108      	bne.n	80010e4 <HAL_UARTEx_RxEventCallback+0x28>
		{
			vUAFE_uart_handle(Size);
 80010d2:	887b      	ldrh	r3, [r7, #2]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff75 	bl	8000fc4 <vUAFE_uart_handle>
			HAL_UARTEx_ReceiveToIdle_DMA(&huart2, u8arr_eventBuff, UART_BUF_SZ);
 80010da:	2240      	movs	r2, #64	; 0x40
 80010dc:	4904      	ldr	r1, [pc, #16]	; (80010f0 <HAL_UARTEx_RxEventCallback+0x34>)
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <HAL_UARTEx_RxEventCallback+0x38>)
 80010e0:	f005 fcb7 	bl	8006a52 <HAL_UARTEx_ReceiveToIdle_DMA>
		}
	#endif
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40004400 	.word	0x40004400
 80010f0:	20000274 	.word	0x20000274
 80010f4:	20000154 	.word	0x20000154

080010f8 <Error_Handler>:


/*******************************************************************
  * @brief  This function is executed in case of error occurrence.
  ******************************************************************/
void Error_Handler(void) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  printf("\r\nerror handler!!!\r\n");
 80010fc:	4806      	ldr	r0, [pc, #24]	; (8001118 <Error_Handler+0x20>)
 80010fe:	f006 fed3 	bl	8007ea8 <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001102:	b672      	cpsid	i
}
 8001104:	bf00      	nop
  __disable_irq();

  while (1) {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001106:	2120      	movs	r1, #32
 8001108:	4804      	ldr	r0, [pc, #16]	; (800111c <Error_Handler+0x24>)
 800110a:	f002 fe46 	bl	8003d9a <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 800110e:	2032      	movs	r0, #50	; 0x32
 8001110:	f001 ff50 	bl	8002fb4 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001114:	e7f7      	b.n	8001106 <Error_Handler+0xe>
 8001116:	bf00      	nop
 8001118:	08009334 	.word	0x08009334
 800111c:	40020000 	.word	0x40020000

08001120 <serial_init>:
static uint8_t u8arr_uart[UART_BUF_SZ];
static uint8_t u8idx;

/* Public functions definitions */
void serial_init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* initialize serial */
  stdin_init(&hstdin, &huart2, u8arr_buffer, UART_BUF_SZ);
 8001124:	2340      	movs	r3, #64	; 0x40
 8001126:	4a07      	ldr	r2, [pc, #28]	; (8001144 <serial_init+0x24>)
 8001128:	4907      	ldr	r1, [pc, #28]	; (8001148 <serial_init+0x28>)
 800112a:	4808      	ldr	r0, [pc, #32]	; (800114c <serial_init+0x2c>)
 800112c:	f000 f866 	bl	80011fc <stdin_init>
  stdin_set_callback(&hstdin, stdin_callback);
 8001130:	4907      	ldr	r1, [pc, #28]	; (8001150 <serial_init+0x30>)
 8001132:	4806      	ldr	r0, [pc, #24]	; (800114c <serial_init+0x2c>)
 8001134:	f000 f879 	bl	800122a <stdin_set_callback>
  stdin_start(&hstdin);
 8001138:	4804      	ldr	r0, [pc, #16]	; (800114c <serial_init+0x2c>)
 800113a:	f000 f897 	bl	800126c <stdin_start>
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	2000030c 	.word	0x2000030c
 8001148:	20000154 	.word	0x20000154
 800114c:	200002fc 	.word	0x200002fc
 8001150:	0800117d 	.word	0x0800117d

08001154 <serial_handlerUART>:

void serial_handlerUART(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  stdin_irq_uart(&hstdin);
 8001158:	4802      	ldr	r0, [pc, #8]	; (8001164 <serial_handlerUART+0x10>)
 800115a:	f001 fbf5 	bl	8002948 <stdin_irq_uart>
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200002fc 	.word	0x200002fc

08001168 <serial_handlerDMA>:

void serial_handlerDMA(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  stdin_irq_dma(&hstdin);
 800116c:	4802      	ldr	r0, [pc, #8]	; (8001178 <serial_handlerDMA+0x10>)
 800116e:	f000 f8b3 	bl	80012d8 <stdin_irq_dma>
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200002fc 	.word	0x200002fc

0800117c <stdin_callback>:

/* Private function definitions */
static void stdin_callback(uint8_t *u8p_buffer, uint16_t u16_size)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	807b      	strh	r3, [r7, #2]
	//printf("UART RX Handler\r\n\n");

	memcpy(&u8arr_uart[u8idx], u8p_buffer, u16_size);
 8001188:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <stdin_callback+0x78>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <stdin_callback+0x7c>)
 8001190:	4413      	add	r3, r2
 8001192:	887a      	ldrh	r2, [r7, #2]
 8001194:	6879      	ldr	r1, [r7, #4]
 8001196:	4618      	mov	r0, r3
 8001198:	f006 fdea 	bl	8007d70 <memcpy>
	u8idx += u16_size;
 800119c:	887b      	ldrh	r3, [r7, #2]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <stdin_callback+0x78>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4413      	add	r3, r2
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <stdin_callback+0x78>)
 80011aa:	701a      	strb	r2, [r3, #0]

	if((u8p_buffer[u16_size - 1] == '\n')&&(u8p_buffer[u16_size - 2]== '\r'))
 80011ac:	887b      	ldrh	r3, [r7, #2]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	4413      	add	r3, r2
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b0a      	cmp	r3, #10
 80011b8:	d117      	bne.n	80011ea <stdin_callback+0x6e>
 80011ba:	887b      	ldrh	r3, [r7, #2]
 80011bc:	3b02      	subs	r3, #2
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b0d      	cmp	r3, #13
 80011c6:	d110      	bne.n	80011ea <stdin_callback+0x6e>
	{
		uartProcessing (u8arr_uart, u8idx - 2);
 80011c8:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <stdin_callback+0x78>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	3b02      	subs	r3, #2
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	4619      	mov	r1, r3
 80011d4:	4808      	ldr	r0, [pc, #32]	; (80011f8 <stdin_callback+0x7c>)
 80011d6:	f7ff fee7 	bl	8000fa8 <uartProcessing>
		memset(u8arr_uart, 0, UART_BUF_SZ);
 80011da:	2240      	movs	r2, #64	; 0x40
 80011dc:	2100      	movs	r1, #0
 80011de:	4806      	ldr	r0, [pc, #24]	; (80011f8 <stdin_callback+0x7c>)
 80011e0:	f006 fdd4 	bl	8007d8c <memset>
		u8idx = 0;
 80011e4:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <stdin_callback+0x78>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
	}
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2000038c 	.word	0x2000038c
 80011f8:	2000034c 	.word	0x2000034c

080011fc <stdin_init>:
static void fill_buffer(stdin_t *in, uint16_t pos, uint16_t size);

/* Public function implementations
 * --------------------------------------------*/
void stdin_init(stdin_t *in, UART_HandleTypeDef *uart, uint8_t *buffer, uint16_t size)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
 8001208:	807b      	strh	r3, [r7, #2]
  in->huart = uart;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	68ba      	ldr	r2, [r7, #8]
 800120e:	601a      	str	r2, [r3, #0]
  in->buffer = buffer;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	609a      	str	r2, [r3, #8]
  in->size = size;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	887a      	ldrh	r2, [r7, #2]
 800121a:	819a      	strh	r2, [r3, #12]

  stdin_flush(in);
 800121c:	68f8      	ldr	r0, [r7, #12]
 800121e:	f000 f812 	bl	8001246 <stdin_flush>
}
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <stdin_set_callback>:

void stdin_set_callback(stdin_t *in, stdin_callback_t cb)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	6039      	str	r1, [r7, #0]
  in->callback = cb;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	605a      	str	r2, [r3, #4]
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <stdin_flush>:

void stdin_flush(stdin_t *in)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  memset(in->buffer, 0, in->size);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6898      	ldr	r0, [r3, #8]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	899b      	ldrh	r3, [r3, #12]
 8001256:	461a      	mov	r2, r3
 8001258:	2100      	movs	r1, #0
 800125a:	f006 fd97 	bl	8007d8c <memset>
  in->pos = 0;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	81da      	strh	r2, [r3, #14]
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <stdin_start>:

HAL_StatusTypeDef stdin_start(stdin_t *in)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Enable interrupts */
  __HAL_UART_ENABLE_IT(in->huart, UART_IT_IDLE);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	68da      	ldr	r2, [r3, #12]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f042 0210 	orr.w	r2, r2, #16
 8001286:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(HDMA(in), DMA_IT_TC);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f042 0210 	orr.w	r2, r2, #16
 800129e:	601a      	str	r2, [r3, #0]
  __HAL_DMA_ENABLE_IT(HDMA(in), DMA_IT_HT);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f042 0208 	orr.w	r2, r2, #8
 80012b6:	601a      	str	r2, [r3, #0]

  /* Start receiving UART in DMA mode */
  status = HAL_UART_Receive_DMA(in->huart, in->buffer, in->size);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6818      	ldr	r0, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6899      	ldr	r1, [r3, #8]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	899b      	ldrh	r3, [r3, #12]
 80012c4:	461a      	mov	r2, r3
 80012c6:	f005 fb94 	bl	80069f2 <HAL_UART_Receive_DMA>
 80012ca:	4603      	mov	r3, r0
 80012cc:	73fb      	strb	r3, [r7, #15]
  return (status);
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <stdin_irq_dma>:
  status = HAL_UART_DMAStop(in->huart);
  return (status);
}

void stdin_irq_dma(stdin_t *in)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Handle HT interrupt */
  if (__HAL_DMA_GET_IT_SOURCE(HDMA(in), DMA_IT_HT))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0308 	and.w	r3, r3, #8
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 823c 	beq.w	800176c <stdin_irq_dma+0x494>
  {
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_HT_FLAG_INDEX(HDMA(in)));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b7f      	ldr	r3, [pc, #508]	; (80014fc <stdin_irq_dma+0x224>)
 8001300:	429a      	cmp	r2, r3
 8001302:	d978      	bls.n	80013f6 <stdin_irq_dma+0x11e>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a7c      	ldr	r2, [pc, #496]	; (8001500 <stdin_irq_dma+0x228>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d06d      	beq.n	80013ee <stdin_irq_dma+0x116>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a7a      	ldr	r2, [pc, #488]	; (8001504 <stdin_irq_dma+0x22c>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d064      	beq.n	80013ea <stdin_irq_dma+0x112>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a77      	ldr	r2, [pc, #476]	; (8001508 <stdin_irq_dma+0x230>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d05b      	beq.n	80013e6 <stdin_irq_dma+0x10e>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a75      	ldr	r2, [pc, #468]	; (800150c <stdin_irq_dma+0x234>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d052      	beq.n	80013e2 <stdin_irq_dma+0x10a>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a72      	ldr	r2, [pc, #456]	; (8001510 <stdin_irq_dma+0x238>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d048      	beq.n	80013dc <stdin_irq_dma+0x104>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a70      	ldr	r2, [pc, #448]	; (8001514 <stdin_irq_dma+0x23c>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d03e      	beq.n	80013d6 <stdin_irq_dma+0xfe>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a6d      	ldr	r2, [pc, #436]	; (8001518 <stdin_irq_dma+0x240>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d034      	beq.n	80013d0 <stdin_irq_dma+0xf8>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a6b      	ldr	r2, [pc, #428]	; (800151c <stdin_irq_dma+0x244>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d02a      	beq.n	80013ca <stdin_irq_dma+0xf2>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a68      	ldr	r2, [pc, #416]	; (8001520 <stdin_irq_dma+0x248>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d020      	beq.n	80013c4 <stdin_irq_dma+0xec>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a66      	ldr	r2, [pc, #408]	; (8001524 <stdin_irq_dma+0x24c>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d016      	beq.n	80013be <stdin_irq_dma+0xe6>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a63      	ldr	r2, [pc, #396]	; (8001528 <stdin_irq_dma+0x250>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d00c      	beq.n	80013b8 <stdin_irq_dma+0xe0>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a61      	ldr	r2, [pc, #388]	; (800152c <stdin_irq_dma+0x254>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d102      	bne.n	80013b2 <stdin_irq_dma+0xda>
 80013ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013b0:	e01e      	b.n	80013f0 <stdin_irq_dma+0x118>
 80013b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80013b6:	e01b      	b.n	80013f0 <stdin_irq_dma+0x118>
 80013b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013bc:	e018      	b.n	80013f0 <stdin_irq_dma+0x118>
 80013be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013c2:	e015      	b.n	80013f0 <stdin_irq_dma+0x118>
 80013c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013c8:	e012      	b.n	80013f0 <stdin_irq_dma+0x118>
 80013ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ce:	e00f      	b.n	80013f0 <stdin_irq_dma+0x118>
 80013d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013d4:	e00c      	b.n	80013f0 <stdin_irq_dma+0x118>
 80013d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013da:	e009      	b.n	80013f0 <stdin_irq_dma+0x118>
 80013dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013e0:	e006      	b.n	80013f0 <stdin_irq_dma+0x118>
 80013e2:	2310      	movs	r3, #16
 80013e4:	e004      	b.n	80013f0 <stdin_irq_dma+0x118>
 80013e6:	2310      	movs	r3, #16
 80013e8:	e002      	b.n	80013f0 <stdin_irq_dma+0x118>
 80013ea:	2310      	movs	r3, #16
 80013ec:	e000      	b.n	80013f0 <stdin_irq_dma+0x118>
 80013ee:	2310      	movs	r3, #16
 80013f0:	4a4f      	ldr	r2, [pc, #316]	; (8001530 <stdin_irq_dma+0x258>)
 80013f2:	60d3      	str	r3, [r2, #12]
 80013f4:	e199      	b.n	800172a <stdin_irq_dma+0x452>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	4b4c      	ldr	r3, [pc, #304]	; (8001534 <stdin_irq_dma+0x25c>)
 8001402:	429a      	cmp	r2, r3
 8001404:	f240 8098 	bls.w	8001538 <stdin_irq_dma+0x260>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a3b      	ldr	r2, [pc, #236]	; (8001500 <stdin_irq_dma+0x228>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d06d      	beq.n	80014f2 <stdin_irq_dma+0x21a>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a39      	ldr	r2, [pc, #228]	; (8001504 <stdin_irq_dma+0x22c>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d064      	beq.n	80014ee <stdin_irq_dma+0x216>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a36      	ldr	r2, [pc, #216]	; (8001508 <stdin_irq_dma+0x230>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d05b      	beq.n	80014ea <stdin_irq_dma+0x212>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a34      	ldr	r2, [pc, #208]	; (800150c <stdin_irq_dma+0x234>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d052      	beq.n	80014e6 <stdin_irq_dma+0x20e>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a31      	ldr	r2, [pc, #196]	; (8001510 <stdin_irq_dma+0x238>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d048      	beq.n	80014e0 <stdin_irq_dma+0x208>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a2f      	ldr	r2, [pc, #188]	; (8001514 <stdin_irq_dma+0x23c>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d03e      	beq.n	80014da <stdin_irq_dma+0x202>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a2c      	ldr	r2, [pc, #176]	; (8001518 <stdin_irq_dma+0x240>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d034      	beq.n	80014d4 <stdin_irq_dma+0x1fc>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a2a      	ldr	r2, [pc, #168]	; (800151c <stdin_irq_dma+0x244>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d02a      	beq.n	80014ce <stdin_irq_dma+0x1f6>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a27      	ldr	r2, [pc, #156]	; (8001520 <stdin_irq_dma+0x248>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d020      	beq.n	80014c8 <stdin_irq_dma+0x1f0>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a25      	ldr	r2, [pc, #148]	; (8001524 <stdin_irq_dma+0x24c>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d016      	beq.n	80014c2 <stdin_irq_dma+0x1ea>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a22      	ldr	r2, [pc, #136]	; (8001528 <stdin_irq_dma+0x250>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d00c      	beq.n	80014bc <stdin_irq_dma+0x1e4>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a20      	ldr	r2, [pc, #128]	; (800152c <stdin_irq_dma+0x254>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d102      	bne.n	80014b6 <stdin_irq_dma+0x1de>
 80014b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014b4:	e01e      	b.n	80014f4 <stdin_irq_dma+0x21c>
 80014b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80014ba:	e01b      	b.n	80014f4 <stdin_irq_dma+0x21c>
 80014bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014c0:	e018      	b.n	80014f4 <stdin_irq_dma+0x21c>
 80014c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014c6:	e015      	b.n	80014f4 <stdin_irq_dma+0x21c>
 80014c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014cc:	e012      	b.n	80014f4 <stdin_irq_dma+0x21c>
 80014ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014d2:	e00f      	b.n	80014f4 <stdin_irq_dma+0x21c>
 80014d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014d8:	e00c      	b.n	80014f4 <stdin_irq_dma+0x21c>
 80014da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014de:	e009      	b.n	80014f4 <stdin_irq_dma+0x21c>
 80014e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014e4:	e006      	b.n	80014f4 <stdin_irq_dma+0x21c>
 80014e6:	2310      	movs	r3, #16
 80014e8:	e004      	b.n	80014f4 <stdin_irq_dma+0x21c>
 80014ea:	2310      	movs	r3, #16
 80014ec:	e002      	b.n	80014f4 <stdin_irq_dma+0x21c>
 80014ee:	2310      	movs	r3, #16
 80014f0:	e000      	b.n	80014f4 <stdin_irq_dma+0x21c>
 80014f2:	2310      	movs	r3, #16
 80014f4:	4a0e      	ldr	r2, [pc, #56]	; (8001530 <stdin_irq_dma+0x258>)
 80014f6:	6093      	str	r3, [r2, #8]
 80014f8:	e117      	b.n	800172a <stdin_irq_dma+0x452>
 80014fa:	bf00      	nop
 80014fc:	40026458 	.word	0x40026458
 8001500:	40026010 	.word	0x40026010
 8001504:	40026410 	.word	0x40026410
 8001508:	40026070 	.word	0x40026070
 800150c:	40026470 	.word	0x40026470
 8001510:	40026028 	.word	0x40026028
 8001514:	40026428 	.word	0x40026428
 8001518:	40026088 	.word	0x40026088
 800151c:	40026488 	.word	0x40026488
 8001520:	40026040 	.word	0x40026040
 8001524:	40026440 	.word	0x40026440
 8001528:	400260a0 	.word	0x400260a0
 800152c:	400264a0 	.word	0x400264a0
 8001530:	40026400 	.word	0x40026400
 8001534:	400260b8 	.word	0x400260b8
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	461a      	mov	r2, r3
 8001542:	4b7c      	ldr	r3, [pc, #496]	; (8001734 <stdin_irq_dma+0x45c>)
 8001544:	429a      	cmp	r2, r3
 8001546:	d978      	bls.n	800163a <stdin_irq_dma+0x362>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a79      	ldr	r2, [pc, #484]	; (8001738 <stdin_irq_dma+0x460>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d06d      	beq.n	8001632 <stdin_irq_dma+0x35a>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a77      	ldr	r2, [pc, #476]	; (800173c <stdin_irq_dma+0x464>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d064      	beq.n	800162e <stdin_irq_dma+0x356>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a74      	ldr	r2, [pc, #464]	; (8001740 <stdin_irq_dma+0x468>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d05b      	beq.n	800162a <stdin_irq_dma+0x352>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a72      	ldr	r2, [pc, #456]	; (8001744 <stdin_irq_dma+0x46c>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d052      	beq.n	8001626 <stdin_irq_dma+0x34e>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a6f      	ldr	r2, [pc, #444]	; (8001748 <stdin_irq_dma+0x470>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d048      	beq.n	8001620 <stdin_irq_dma+0x348>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a6d      	ldr	r2, [pc, #436]	; (800174c <stdin_irq_dma+0x474>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d03e      	beq.n	800161a <stdin_irq_dma+0x342>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a6a      	ldr	r2, [pc, #424]	; (8001750 <stdin_irq_dma+0x478>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d034      	beq.n	8001614 <stdin_irq_dma+0x33c>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a68      	ldr	r2, [pc, #416]	; (8001754 <stdin_irq_dma+0x47c>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d02a      	beq.n	800160e <stdin_irq_dma+0x336>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a65      	ldr	r2, [pc, #404]	; (8001758 <stdin_irq_dma+0x480>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d020      	beq.n	8001608 <stdin_irq_dma+0x330>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a63      	ldr	r2, [pc, #396]	; (800175c <stdin_irq_dma+0x484>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d016      	beq.n	8001602 <stdin_irq_dma+0x32a>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a60      	ldr	r2, [pc, #384]	; (8001760 <stdin_irq_dma+0x488>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d00c      	beq.n	80015fc <stdin_irq_dma+0x324>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a5e      	ldr	r2, [pc, #376]	; (8001764 <stdin_irq_dma+0x48c>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d102      	bne.n	80015f6 <stdin_irq_dma+0x31e>
 80015f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015f4:	e01e      	b.n	8001634 <stdin_irq_dma+0x35c>
 80015f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80015fa:	e01b      	b.n	8001634 <stdin_irq_dma+0x35c>
 80015fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001600:	e018      	b.n	8001634 <stdin_irq_dma+0x35c>
 8001602:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001606:	e015      	b.n	8001634 <stdin_irq_dma+0x35c>
 8001608:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800160c:	e012      	b.n	8001634 <stdin_irq_dma+0x35c>
 800160e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001612:	e00f      	b.n	8001634 <stdin_irq_dma+0x35c>
 8001614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001618:	e00c      	b.n	8001634 <stdin_irq_dma+0x35c>
 800161a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800161e:	e009      	b.n	8001634 <stdin_irq_dma+0x35c>
 8001620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001624:	e006      	b.n	8001634 <stdin_irq_dma+0x35c>
 8001626:	2310      	movs	r3, #16
 8001628:	e004      	b.n	8001634 <stdin_irq_dma+0x35c>
 800162a:	2310      	movs	r3, #16
 800162c:	e002      	b.n	8001634 <stdin_irq_dma+0x35c>
 800162e:	2310      	movs	r3, #16
 8001630:	e000      	b.n	8001634 <stdin_irq_dma+0x35c>
 8001632:	2310      	movs	r3, #16
 8001634:	4a4c      	ldr	r2, [pc, #304]	; (8001768 <stdin_irq_dma+0x490>)
 8001636:	60d3      	str	r3, [r2, #12]
 8001638:	e077      	b.n	800172a <stdin_irq_dma+0x452>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a3d      	ldr	r2, [pc, #244]	; (8001738 <stdin_irq_dma+0x460>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d06d      	beq.n	8001724 <stdin_irq_dma+0x44c>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a3a      	ldr	r2, [pc, #232]	; (800173c <stdin_irq_dma+0x464>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d064      	beq.n	8001720 <stdin_irq_dma+0x448>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a38      	ldr	r2, [pc, #224]	; (8001740 <stdin_irq_dma+0x468>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d05b      	beq.n	800171c <stdin_irq_dma+0x444>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a35      	ldr	r2, [pc, #212]	; (8001744 <stdin_irq_dma+0x46c>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d052      	beq.n	8001718 <stdin_irq_dma+0x440>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a33      	ldr	r2, [pc, #204]	; (8001748 <stdin_irq_dma+0x470>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d048      	beq.n	8001712 <stdin_irq_dma+0x43a>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a30      	ldr	r2, [pc, #192]	; (800174c <stdin_irq_dma+0x474>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d03e      	beq.n	800170c <stdin_irq_dma+0x434>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a2e      	ldr	r2, [pc, #184]	; (8001750 <stdin_irq_dma+0x478>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d034      	beq.n	8001706 <stdin_irq_dma+0x42e>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a2b      	ldr	r2, [pc, #172]	; (8001754 <stdin_irq_dma+0x47c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d02a      	beq.n	8001700 <stdin_irq_dma+0x428>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a29      	ldr	r2, [pc, #164]	; (8001758 <stdin_irq_dma+0x480>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d020      	beq.n	80016fa <stdin_irq_dma+0x422>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a26      	ldr	r2, [pc, #152]	; (800175c <stdin_irq_dma+0x484>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d016      	beq.n	80016f4 <stdin_irq_dma+0x41c>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a24      	ldr	r2, [pc, #144]	; (8001760 <stdin_irq_dma+0x488>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d00c      	beq.n	80016ee <stdin_irq_dma+0x416>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a21      	ldr	r2, [pc, #132]	; (8001764 <stdin_irq_dma+0x48c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d102      	bne.n	80016e8 <stdin_irq_dma+0x410>
 80016e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016e6:	e01e      	b.n	8001726 <stdin_irq_dma+0x44e>
 80016e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016ec:	e01b      	b.n	8001726 <stdin_irq_dma+0x44e>
 80016ee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016f2:	e018      	b.n	8001726 <stdin_irq_dma+0x44e>
 80016f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016f8:	e015      	b.n	8001726 <stdin_irq_dma+0x44e>
 80016fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016fe:	e012      	b.n	8001726 <stdin_irq_dma+0x44e>
 8001700:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001704:	e00f      	b.n	8001726 <stdin_irq_dma+0x44e>
 8001706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800170a:	e00c      	b.n	8001726 <stdin_irq_dma+0x44e>
 800170c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001710:	e009      	b.n	8001726 <stdin_irq_dma+0x44e>
 8001712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001716:	e006      	b.n	8001726 <stdin_irq_dma+0x44e>
 8001718:	2310      	movs	r3, #16
 800171a:	e004      	b.n	8001726 <stdin_irq_dma+0x44e>
 800171c:	2310      	movs	r3, #16
 800171e:	e002      	b.n	8001726 <stdin_irq_dma+0x44e>
 8001720:	2310      	movs	r3, #16
 8001722:	e000      	b.n	8001726 <stdin_irq_dma+0x44e>
 8001724:	2310      	movs	r3, #16
 8001726:	4a10      	ldr	r2, [pc, #64]	; (8001768 <stdin_irq_dma+0x490>)
 8001728:	6093      	str	r3, [r2, #8]
    check_buffer(in);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f001 f92c 	bl	8002988 <check_buffer>
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_FE_FLAG_INDEX(HDMA(in)));
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_DME_FLAG_INDEX(HDMA(in)));

    HAL_UART_Receive_DMA(in->huart, in->buffer, in->size);
  }
}
 8001730:	f001 b8ea 	b.w	8002908 <stdin_irq_dma+0x1630>
 8001734:	40026058 	.word	0x40026058
 8001738:	40026010 	.word	0x40026010
 800173c:	40026410 	.word	0x40026410
 8001740:	40026070 	.word	0x40026070
 8001744:	40026470 	.word	0x40026470
 8001748:	40026028 	.word	0x40026028
 800174c:	40026428 	.word	0x40026428
 8001750:	40026088 	.word	0x40026088
 8001754:	40026488 	.word	0x40026488
 8001758:	40026040 	.word	0x40026040
 800175c:	40026440 	.word	0x40026440
 8001760:	400260a0 	.word	0x400260a0
 8001764:	400264a0 	.word	0x400264a0
 8001768:	40026000 	.word	0x40026000
  else if (__HAL_DMA_GET_IT_SOURCE(HDMA(in), DMA_IT_TC))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0310 	and.w	r3, r3, #16
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 823c 	beq.w	8001bf8 <stdin_irq_dma+0x920>
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_TC_FLAG_INDEX(HDMA(in)));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	461a      	mov	r2, r3
 800178a:	4b7f      	ldr	r3, [pc, #508]	; (8001988 <stdin_irq_dma+0x6b0>)
 800178c:	429a      	cmp	r2, r3
 800178e:	d978      	bls.n	8001882 <stdin_irq_dma+0x5aa>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a7c      	ldr	r2, [pc, #496]	; (800198c <stdin_irq_dma+0x6b4>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d06d      	beq.n	800187a <stdin_irq_dma+0x5a2>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a7a      	ldr	r2, [pc, #488]	; (8001990 <stdin_irq_dma+0x6b8>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d064      	beq.n	8001876 <stdin_irq_dma+0x59e>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a77      	ldr	r2, [pc, #476]	; (8001994 <stdin_irq_dma+0x6bc>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d05b      	beq.n	8001872 <stdin_irq_dma+0x59a>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a75      	ldr	r2, [pc, #468]	; (8001998 <stdin_irq_dma+0x6c0>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d052      	beq.n	800186e <stdin_irq_dma+0x596>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a72      	ldr	r2, [pc, #456]	; (800199c <stdin_irq_dma+0x6c4>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d048      	beq.n	8001868 <stdin_irq_dma+0x590>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a70      	ldr	r2, [pc, #448]	; (80019a0 <stdin_irq_dma+0x6c8>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d03e      	beq.n	8001862 <stdin_irq_dma+0x58a>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a6d      	ldr	r2, [pc, #436]	; (80019a4 <stdin_irq_dma+0x6cc>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d034      	beq.n	800185c <stdin_irq_dma+0x584>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a6b      	ldr	r2, [pc, #428]	; (80019a8 <stdin_irq_dma+0x6d0>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d02a      	beq.n	8001856 <stdin_irq_dma+0x57e>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a68      	ldr	r2, [pc, #416]	; (80019ac <stdin_irq_dma+0x6d4>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d020      	beq.n	8001850 <stdin_irq_dma+0x578>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a66      	ldr	r2, [pc, #408]	; (80019b0 <stdin_irq_dma+0x6d8>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d016      	beq.n	800184a <stdin_irq_dma+0x572>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a63      	ldr	r2, [pc, #396]	; (80019b4 <stdin_irq_dma+0x6dc>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d00c      	beq.n	8001844 <stdin_irq_dma+0x56c>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a61      	ldr	r2, [pc, #388]	; (80019b8 <stdin_irq_dma+0x6e0>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d102      	bne.n	800183e <stdin_irq_dma+0x566>
 8001838:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800183c:	e01e      	b.n	800187c <stdin_irq_dma+0x5a4>
 800183e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001842:	e01b      	b.n	800187c <stdin_irq_dma+0x5a4>
 8001844:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001848:	e018      	b.n	800187c <stdin_irq_dma+0x5a4>
 800184a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800184e:	e015      	b.n	800187c <stdin_irq_dma+0x5a4>
 8001850:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001854:	e012      	b.n	800187c <stdin_irq_dma+0x5a4>
 8001856:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800185a:	e00f      	b.n	800187c <stdin_irq_dma+0x5a4>
 800185c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001860:	e00c      	b.n	800187c <stdin_irq_dma+0x5a4>
 8001862:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001866:	e009      	b.n	800187c <stdin_irq_dma+0x5a4>
 8001868:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800186c:	e006      	b.n	800187c <stdin_irq_dma+0x5a4>
 800186e:	2320      	movs	r3, #32
 8001870:	e004      	b.n	800187c <stdin_irq_dma+0x5a4>
 8001872:	2320      	movs	r3, #32
 8001874:	e002      	b.n	800187c <stdin_irq_dma+0x5a4>
 8001876:	2320      	movs	r3, #32
 8001878:	e000      	b.n	800187c <stdin_irq_dma+0x5a4>
 800187a:	2320      	movs	r3, #32
 800187c:	4a4f      	ldr	r2, [pc, #316]	; (80019bc <stdin_irq_dma+0x6e4>)
 800187e:	60d3      	str	r3, [r2, #12]
 8001880:	e199      	b.n	8001bb6 <stdin_irq_dma+0x8de>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	461a      	mov	r2, r3
 800188c:	4b4c      	ldr	r3, [pc, #304]	; (80019c0 <stdin_irq_dma+0x6e8>)
 800188e:	429a      	cmp	r2, r3
 8001890:	f240 8098 	bls.w	80019c4 <stdin_irq_dma+0x6ec>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a3b      	ldr	r2, [pc, #236]	; (800198c <stdin_irq_dma+0x6b4>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d06d      	beq.n	800197e <stdin_irq_dma+0x6a6>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a39      	ldr	r2, [pc, #228]	; (8001990 <stdin_irq_dma+0x6b8>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d064      	beq.n	800197a <stdin_irq_dma+0x6a2>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a36      	ldr	r2, [pc, #216]	; (8001994 <stdin_irq_dma+0x6bc>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d05b      	beq.n	8001976 <stdin_irq_dma+0x69e>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a34      	ldr	r2, [pc, #208]	; (8001998 <stdin_irq_dma+0x6c0>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d052      	beq.n	8001972 <stdin_irq_dma+0x69a>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a31      	ldr	r2, [pc, #196]	; (800199c <stdin_irq_dma+0x6c4>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d048      	beq.n	800196c <stdin_irq_dma+0x694>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a2f      	ldr	r2, [pc, #188]	; (80019a0 <stdin_irq_dma+0x6c8>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d03e      	beq.n	8001966 <stdin_irq_dma+0x68e>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a2c      	ldr	r2, [pc, #176]	; (80019a4 <stdin_irq_dma+0x6cc>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d034      	beq.n	8001960 <stdin_irq_dma+0x688>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a2a      	ldr	r2, [pc, #168]	; (80019a8 <stdin_irq_dma+0x6d0>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d02a      	beq.n	800195a <stdin_irq_dma+0x682>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a27      	ldr	r2, [pc, #156]	; (80019ac <stdin_irq_dma+0x6d4>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d020      	beq.n	8001954 <stdin_irq_dma+0x67c>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a25      	ldr	r2, [pc, #148]	; (80019b0 <stdin_irq_dma+0x6d8>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d016      	beq.n	800194e <stdin_irq_dma+0x676>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a22      	ldr	r2, [pc, #136]	; (80019b4 <stdin_irq_dma+0x6dc>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d00c      	beq.n	8001948 <stdin_irq_dma+0x670>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a20      	ldr	r2, [pc, #128]	; (80019b8 <stdin_irq_dma+0x6e0>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d102      	bne.n	8001942 <stdin_irq_dma+0x66a>
 800193c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001940:	e01e      	b.n	8001980 <stdin_irq_dma+0x6a8>
 8001942:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001946:	e01b      	b.n	8001980 <stdin_irq_dma+0x6a8>
 8001948:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800194c:	e018      	b.n	8001980 <stdin_irq_dma+0x6a8>
 800194e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001952:	e015      	b.n	8001980 <stdin_irq_dma+0x6a8>
 8001954:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001958:	e012      	b.n	8001980 <stdin_irq_dma+0x6a8>
 800195a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800195e:	e00f      	b.n	8001980 <stdin_irq_dma+0x6a8>
 8001960:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001964:	e00c      	b.n	8001980 <stdin_irq_dma+0x6a8>
 8001966:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800196a:	e009      	b.n	8001980 <stdin_irq_dma+0x6a8>
 800196c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001970:	e006      	b.n	8001980 <stdin_irq_dma+0x6a8>
 8001972:	2320      	movs	r3, #32
 8001974:	e004      	b.n	8001980 <stdin_irq_dma+0x6a8>
 8001976:	2320      	movs	r3, #32
 8001978:	e002      	b.n	8001980 <stdin_irq_dma+0x6a8>
 800197a:	2320      	movs	r3, #32
 800197c:	e000      	b.n	8001980 <stdin_irq_dma+0x6a8>
 800197e:	2320      	movs	r3, #32
 8001980:	4a0e      	ldr	r2, [pc, #56]	; (80019bc <stdin_irq_dma+0x6e4>)
 8001982:	6093      	str	r3, [r2, #8]
 8001984:	e117      	b.n	8001bb6 <stdin_irq_dma+0x8de>
 8001986:	bf00      	nop
 8001988:	40026458 	.word	0x40026458
 800198c:	40026010 	.word	0x40026010
 8001990:	40026410 	.word	0x40026410
 8001994:	40026070 	.word	0x40026070
 8001998:	40026470 	.word	0x40026470
 800199c:	40026028 	.word	0x40026028
 80019a0:	40026428 	.word	0x40026428
 80019a4:	40026088 	.word	0x40026088
 80019a8:	40026488 	.word	0x40026488
 80019ac:	40026040 	.word	0x40026040
 80019b0:	40026440 	.word	0x40026440
 80019b4:	400260a0 	.word	0x400260a0
 80019b8:	400264a0 	.word	0x400264a0
 80019bc:	40026400 	.word	0x40026400
 80019c0:	400260b8 	.word	0x400260b8
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b7c      	ldr	r3, [pc, #496]	; (8001bc0 <stdin_irq_dma+0x8e8>)
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d978      	bls.n	8001ac6 <stdin_irq_dma+0x7ee>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a79      	ldr	r2, [pc, #484]	; (8001bc4 <stdin_irq_dma+0x8ec>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d06d      	beq.n	8001abe <stdin_irq_dma+0x7e6>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a77      	ldr	r2, [pc, #476]	; (8001bc8 <stdin_irq_dma+0x8f0>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d064      	beq.n	8001aba <stdin_irq_dma+0x7e2>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a74      	ldr	r2, [pc, #464]	; (8001bcc <stdin_irq_dma+0x8f4>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d05b      	beq.n	8001ab6 <stdin_irq_dma+0x7de>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a72      	ldr	r2, [pc, #456]	; (8001bd0 <stdin_irq_dma+0x8f8>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d052      	beq.n	8001ab2 <stdin_irq_dma+0x7da>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a6f      	ldr	r2, [pc, #444]	; (8001bd4 <stdin_irq_dma+0x8fc>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d048      	beq.n	8001aac <stdin_irq_dma+0x7d4>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a6d      	ldr	r2, [pc, #436]	; (8001bd8 <stdin_irq_dma+0x900>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d03e      	beq.n	8001aa6 <stdin_irq_dma+0x7ce>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a6a      	ldr	r2, [pc, #424]	; (8001bdc <stdin_irq_dma+0x904>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d034      	beq.n	8001aa0 <stdin_irq_dma+0x7c8>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a68      	ldr	r2, [pc, #416]	; (8001be0 <stdin_irq_dma+0x908>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d02a      	beq.n	8001a9a <stdin_irq_dma+0x7c2>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a65      	ldr	r2, [pc, #404]	; (8001be4 <stdin_irq_dma+0x90c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d020      	beq.n	8001a94 <stdin_irq_dma+0x7bc>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a63      	ldr	r2, [pc, #396]	; (8001be8 <stdin_irq_dma+0x910>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d016      	beq.n	8001a8e <stdin_irq_dma+0x7b6>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a60      	ldr	r2, [pc, #384]	; (8001bec <stdin_irq_dma+0x914>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d00c      	beq.n	8001a88 <stdin_irq_dma+0x7b0>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a5e      	ldr	r2, [pc, #376]	; (8001bf0 <stdin_irq_dma+0x918>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d102      	bne.n	8001a82 <stdin_irq_dma+0x7aa>
 8001a7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a80:	e01e      	b.n	8001ac0 <stdin_irq_dma+0x7e8>
 8001a82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001a86:	e01b      	b.n	8001ac0 <stdin_irq_dma+0x7e8>
 8001a88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a8c:	e018      	b.n	8001ac0 <stdin_irq_dma+0x7e8>
 8001a8e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a92:	e015      	b.n	8001ac0 <stdin_irq_dma+0x7e8>
 8001a94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a98:	e012      	b.n	8001ac0 <stdin_irq_dma+0x7e8>
 8001a9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a9e:	e00f      	b.n	8001ac0 <stdin_irq_dma+0x7e8>
 8001aa0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001aa4:	e00c      	b.n	8001ac0 <stdin_irq_dma+0x7e8>
 8001aa6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001aaa:	e009      	b.n	8001ac0 <stdin_irq_dma+0x7e8>
 8001aac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ab0:	e006      	b.n	8001ac0 <stdin_irq_dma+0x7e8>
 8001ab2:	2320      	movs	r3, #32
 8001ab4:	e004      	b.n	8001ac0 <stdin_irq_dma+0x7e8>
 8001ab6:	2320      	movs	r3, #32
 8001ab8:	e002      	b.n	8001ac0 <stdin_irq_dma+0x7e8>
 8001aba:	2320      	movs	r3, #32
 8001abc:	e000      	b.n	8001ac0 <stdin_irq_dma+0x7e8>
 8001abe:	2320      	movs	r3, #32
 8001ac0:	4a4c      	ldr	r2, [pc, #304]	; (8001bf4 <stdin_irq_dma+0x91c>)
 8001ac2:	60d3      	str	r3, [r2, #12]
 8001ac4:	e077      	b.n	8001bb6 <stdin_irq_dma+0x8de>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a3d      	ldr	r2, [pc, #244]	; (8001bc4 <stdin_irq_dma+0x8ec>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d06d      	beq.n	8001bb0 <stdin_irq_dma+0x8d8>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a3a      	ldr	r2, [pc, #232]	; (8001bc8 <stdin_irq_dma+0x8f0>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d064      	beq.n	8001bac <stdin_irq_dma+0x8d4>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a38      	ldr	r2, [pc, #224]	; (8001bcc <stdin_irq_dma+0x8f4>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d05b      	beq.n	8001ba8 <stdin_irq_dma+0x8d0>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a35      	ldr	r2, [pc, #212]	; (8001bd0 <stdin_irq_dma+0x8f8>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d052      	beq.n	8001ba4 <stdin_irq_dma+0x8cc>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a33      	ldr	r2, [pc, #204]	; (8001bd4 <stdin_irq_dma+0x8fc>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d048      	beq.n	8001b9e <stdin_irq_dma+0x8c6>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a30      	ldr	r2, [pc, #192]	; (8001bd8 <stdin_irq_dma+0x900>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d03e      	beq.n	8001b98 <stdin_irq_dma+0x8c0>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a2e      	ldr	r2, [pc, #184]	; (8001bdc <stdin_irq_dma+0x904>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d034      	beq.n	8001b92 <stdin_irq_dma+0x8ba>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a2b      	ldr	r2, [pc, #172]	; (8001be0 <stdin_irq_dma+0x908>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d02a      	beq.n	8001b8c <stdin_irq_dma+0x8b4>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a29      	ldr	r2, [pc, #164]	; (8001be4 <stdin_irq_dma+0x90c>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d020      	beq.n	8001b86 <stdin_irq_dma+0x8ae>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a26      	ldr	r2, [pc, #152]	; (8001be8 <stdin_irq_dma+0x910>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d016      	beq.n	8001b80 <stdin_irq_dma+0x8a8>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a24      	ldr	r2, [pc, #144]	; (8001bec <stdin_irq_dma+0x914>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d00c      	beq.n	8001b7a <stdin_irq_dma+0x8a2>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a21      	ldr	r2, [pc, #132]	; (8001bf0 <stdin_irq_dma+0x918>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d102      	bne.n	8001b74 <stdin_irq_dma+0x89c>
 8001b6e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b72:	e01e      	b.n	8001bb2 <stdin_irq_dma+0x8da>
 8001b74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001b78:	e01b      	b.n	8001bb2 <stdin_irq_dma+0x8da>
 8001b7a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b7e:	e018      	b.n	8001bb2 <stdin_irq_dma+0x8da>
 8001b80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b84:	e015      	b.n	8001bb2 <stdin_irq_dma+0x8da>
 8001b86:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b8a:	e012      	b.n	8001bb2 <stdin_irq_dma+0x8da>
 8001b8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b90:	e00f      	b.n	8001bb2 <stdin_irq_dma+0x8da>
 8001b92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b96:	e00c      	b.n	8001bb2 <stdin_irq_dma+0x8da>
 8001b98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b9c:	e009      	b.n	8001bb2 <stdin_irq_dma+0x8da>
 8001b9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ba2:	e006      	b.n	8001bb2 <stdin_irq_dma+0x8da>
 8001ba4:	2320      	movs	r3, #32
 8001ba6:	e004      	b.n	8001bb2 <stdin_irq_dma+0x8da>
 8001ba8:	2320      	movs	r3, #32
 8001baa:	e002      	b.n	8001bb2 <stdin_irq_dma+0x8da>
 8001bac:	2320      	movs	r3, #32
 8001bae:	e000      	b.n	8001bb2 <stdin_irq_dma+0x8da>
 8001bb0:	2320      	movs	r3, #32
 8001bb2:	4a10      	ldr	r2, [pc, #64]	; (8001bf4 <stdin_irq_dma+0x91c>)
 8001bb4:	6093      	str	r3, [r2, #8]
    check_buffer(in);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 fee6 	bl	8002988 <check_buffer>
}
 8001bbc:	f000 bea4 	b.w	8002908 <stdin_irq_dma+0x1630>
 8001bc0:	40026058 	.word	0x40026058
 8001bc4:	40026010 	.word	0x40026010
 8001bc8:	40026410 	.word	0x40026410
 8001bcc:	40026070 	.word	0x40026070
 8001bd0:	40026470 	.word	0x40026470
 8001bd4:	40026028 	.word	0x40026028
 8001bd8:	40026428 	.word	0x40026428
 8001bdc:	40026088 	.word	0x40026088
 8001be0:	40026488 	.word	0x40026488
 8001be4:	40026040 	.word	0x40026040
 8001be8:	40026440 	.word	0x40026440
 8001bec:	400260a0 	.word	0x400260a0
 8001bf0:	400264a0 	.word	0x400264a0
 8001bf4:	40026000 	.word	0x40026000
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_TE_FLAG_INDEX(HDMA(in)));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b7f      	ldr	r3, [pc, #508]	; (8001e00 <stdin_irq_dma+0xb28>)
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d978      	bls.n	8001cfa <stdin_irq_dma+0xa22>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a7c      	ldr	r2, [pc, #496]	; (8001e04 <stdin_irq_dma+0xb2c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d06d      	beq.n	8001cf2 <stdin_irq_dma+0xa1a>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a7a      	ldr	r2, [pc, #488]	; (8001e08 <stdin_irq_dma+0xb30>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d064      	beq.n	8001cee <stdin_irq_dma+0xa16>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a77      	ldr	r2, [pc, #476]	; (8001e0c <stdin_irq_dma+0xb34>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d05b      	beq.n	8001cea <stdin_irq_dma+0xa12>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a75      	ldr	r2, [pc, #468]	; (8001e10 <stdin_irq_dma+0xb38>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d052      	beq.n	8001ce6 <stdin_irq_dma+0xa0e>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a72      	ldr	r2, [pc, #456]	; (8001e14 <stdin_irq_dma+0xb3c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d048      	beq.n	8001ce0 <stdin_irq_dma+0xa08>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a70      	ldr	r2, [pc, #448]	; (8001e18 <stdin_irq_dma+0xb40>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d03e      	beq.n	8001cda <stdin_irq_dma+0xa02>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a6d      	ldr	r2, [pc, #436]	; (8001e1c <stdin_irq_dma+0xb44>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d034      	beq.n	8001cd4 <stdin_irq_dma+0x9fc>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a6b      	ldr	r2, [pc, #428]	; (8001e20 <stdin_irq_dma+0xb48>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d02a      	beq.n	8001cce <stdin_irq_dma+0x9f6>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a68      	ldr	r2, [pc, #416]	; (8001e24 <stdin_irq_dma+0xb4c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d020      	beq.n	8001cc8 <stdin_irq_dma+0x9f0>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a66      	ldr	r2, [pc, #408]	; (8001e28 <stdin_irq_dma+0xb50>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d016      	beq.n	8001cc2 <stdin_irq_dma+0x9ea>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a63      	ldr	r2, [pc, #396]	; (8001e2c <stdin_irq_dma+0xb54>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d00c      	beq.n	8001cbc <stdin_irq_dma+0x9e4>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a61      	ldr	r2, [pc, #388]	; (8001e30 <stdin_irq_dma+0xb58>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d102      	bne.n	8001cb6 <stdin_irq_dma+0x9de>
 8001cb0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001cb4:	e01e      	b.n	8001cf4 <stdin_irq_dma+0xa1c>
 8001cb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cba:	e01b      	b.n	8001cf4 <stdin_irq_dma+0xa1c>
 8001cbc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001cc0:	e018      	b.n	8001cf4 <stdin_irq_dma+0xa1c>
 8001cc2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001cc6:	e015      	b.n	8001cf4 <stdin_irq_dma+0xa1c>
 8001cc8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001ccc:	e012      	b.n	8001cf4 <stdin_irq_dma+0xa1c>
 8001cce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cd2:	e00f      	b.n	8001cf4 <stdin_irq_dma+0xa1c>
 8001cd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cd8:	e00c      	b.n	8001cf4 <stdin_irq_dma+0xa1c>
 8001cda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cde:	e009      	b.n	8001cf4 <stdin_irq_dma+0xa1c>
 8001ce0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ce4:	e006      	b.n	8001cf4 <stdin_irq_dma+0xa1c>
 8001ce6:	2308      	movs	r3, #8
 8001ce8:	e004      	b.n	8001cf4 <stdin_irq_dma+0xa1c>
 8001cea:	2308      	movs	r3, #8
 8001cec:	e002      	b.n	8001cf4 <stdin_irq_dma+0xa1c>
 8001cee:	2308      	movs	r3, #8
 8001cf0:	e000      	b.n	8001cf4 <stdin_irq_dma+0xa1c>
 8001cf2:	2308      	movs	r3, #8
 8001cf4:	4a4f      	ldr	r2, [pc, #316]	; (8001e34 <stdin_irq_dma+0xb5c>)
 8001cf6:	60d3      	str	r3, [r2, #12]
 8001cf8:	e1b7      	b.n	800206a <stdin_irq_dma+0xd92>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	461a      	mov	r2, r3
 8001d04:	4b4c      	ldr	r3, [pc, #304]	; (8001e38 <stdin_irq_dma+0xb60>)
 8001d06:	429a      	cmp	r2, r3
 8001d08:	f240 8098 	bls.w	8001e3c <stdin_irq_dma+0xb64>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a3b      	ldr	r2, [pc, #236]	; (8001e04 <stdin_irq_dma+0xb2c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d06d      	beq.n	8001df6 <stdin_irq_dma+0xb1e>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a39      	ldr	r2, [pc, #228]	; (8001e08 <stdin_irq_dma+0xb30>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d064      	beq.n	8001df2 <stdin_irq_dma+0xb1a>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a36      	ldr	r2, [pc, #216]	; (8001e0c <stdin_irq_dma+0xb34>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d05b      	beq.n	8001dee <stdin_irq_dma+0xb16>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a34      	ldr	r2, [pc, #208]	; (8001e10 <stdin_irq_dma+0xb38>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d052      	beq.n	8001dea <stdin_irq_dma+0xb12>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a31      	ldr	r2, [pc, #196]	; (8001e14 <stdin_irq_dma+0xb3c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d048      	beq.n	8001de4 <stdin_irq_dma+0xb0c>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a2f      	ldr	r2, [pc, #188]	; (8001e18 <stdin_irq_dma+0xb40>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d03e      	beq.n	8001dde <stdin_irq_dma+0xb06>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a2c      	ldr	r2, [pc, #176]	; (8001e1c <stdin_irq_dma+0xb44>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d034      	beq.n	8001dd8 <stdin_irq_dma+0xb00>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a2a      	ldr	r2, [pc, #168]	; (8001e20 <stdin_irq_dma+0xb48>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d02a      	beq.n	8001dd2 <stdin_irq_dma+0xafa>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a27      	ldr	r2, [pc, #156]	; (8001e24 <stdin_irq_dma+0xb4c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d020      	beq.n	8001dcc <stdin_irq_dma+0xaf4>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a25      	ldr	r2, [pc, #148]	; (8001e28 <stdin_irq_dma+0xb50>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d016      	beq.n	8001dc6 <stdin_irq_dma+0xaee>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a22      	ldr	r2, [pc, #136]	; (8001e2c <stdin_irq_dma+0xb54>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d00c      	beq.n	8001dc0 <stdin_irq_dma+0xae8>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a20      	ldr	r2, [pc, #128]	; (8001e30 <stdin_irq_dma+0xb58>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d102      	bne.n	8001dba <stdin_irq_dma+0xae2>
 8001db4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001db8:	e01e      	b.n	8001df8 <stdin_irq_dma+0xb20>
 8001dba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dbe:	e01b      	b.n	8001df8 <stdin_irq_dma+0xb20>
 8001dc0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001dc4:	e018      	b.n	8001df8 <stdin_irq_dma+0xb20>
 8001dc6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001dca:	e015      	b.n	8001df8 <stdin_irq_dma+0xb20>
 8001dcc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001dd0:	e012      	b.n	8001df8 <stdin_irq_dma+0xb20>
 8001dd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dd6:	e00f      	b.n	8001df8 <stdin_irq_dma+0xb20>
 8001dd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ddc:	e00c      	b.n	8001df8 <stdin_irq_dma+0xb20>
 8001dde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001de2:	e009      	b.n	8001df8 <stdin_irq_dma+0xb20>
 8001de4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001de8:	e006      	b.n	8001df8 <stdin_irq_dma+0xb20>
 8001dea:	2308      	movs	r3, #8
 8001dec:	e004      	b.n	8001df8 <stdin_irq_dma+0xb20>
 8001dee:	2308      	movs	r3, #8
 8001df0:	e002      	b.n	8001df8 <stdin_irq_dma+0xb20>
 8001df2:	2308      	movs	r3, #8
 8001df4:	e000      	b.n	8001df8 <stdin_irq_dma+0xb20>
 8001df6:	2308      	movs	r3, #8
 8001df8:	4a0e      	ldr	r2, [pc, #56]	; (8001e34 <stdin_irq_dma+0xb5c>)
 8001dfa:	6093      	str	r3, [r2, #8]
 8001dfc:	e135      	b.n	800206a <stdin_irq_dma+0xd92>
 8001dfe:	bf00      	nop
 8001e00:	40026458 	.word	0x40026458
 8001e04:	40026010 	.word	0x40026010
 8001e08:	40026410 	.word	0x40026410
 8001e0c:	40026070 	.word	0x40026070
 8001e10:	40026470 	.word	0x40026470
 8001e14:	40026028 	.word	0x40026028
 8001e18:	40026428 	.word	0x40026428
 8001e1c:	40026088 	.word	0x40026088
 8001e20:	40026488 	.word	0x40026488
 8001e24:	40026040 	.word	0x40026040
 8001e28:	40026440 	.word	0x40026440
 8001e2c:	400260a0 	.word	0x400260a0
 8001e30:	400264a0 	.word	0x400264a0
 8001e34:	40026400 	.word	0x40026400
 8001e38:	400260b8 	.word	0x400260b8
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	4b79      	ldr	r3, [pc, #484]	; (800202c <stdin_irq_dma+0xd54>)
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d978      	bls.n	8001f3e <stdin_irq_dma+0xc66>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a76      	ldr	r2, [pc, #472]	; (8002030 <stdin_irq_dma+0xd58>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d06d      	beq.n	8001f36 <stdin_irq_dma+0xc5e>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a74      	ldr	r2, [pc, #464]	; (8002034 <stdin_irq_dma+0xd5c>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d064      	beq.n	8001f32 <stdin_irq_dma+0xc5a>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a71      	ldr	r2, [pc, #452]	; (8002038 <stdin_irq_dma+0xd60>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d05b      	beq.n	8001f2e <stdin_irq_dma+0xc56>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a6f      	ldr	r2, [pc, #444]	; (800203c <stdin_irq_dma+0xd64>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d052      	beq.n	8001f2a <stdin_irq_dma+0xc52>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a6c      	ldr	r2, [pc, #432]	; (8002040 <stdin_irq_dma+0xd68>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d048      	beq.n	8001f24 <stdin_irq_dma+0xc4c>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a6a      	ldr	r2, [pc, #424]	; (8002044 <stdin_irq_dma+0xd6c>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d03e      	beq.n	8001f1e <stdin_irq_dma+0xc46>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a67      	ldr	r2, [pc, #412]	; (8002048 <stdin_irq_dma+0xd70>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d034      	beq.n	8001f18 <stdin_irq_dma+0xc40>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a65      	ldr	r2, [pc, #404]	; (800204c <stdin_irq_dma+0xd74>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d02a      	beq.n	8001f12 <stdin_irq_dma+0xc3a>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a62      	ldr	r2, [pc, #392]	; (8002050 <stdin_irq_dma+0xd78>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d020      	beq.n	8001f0c <stdin_irq_dma+0xc34>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a60      	ldr	r2, [pc, #384]	; (8002054 <stdin_irq_dma+0xd7c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d016      	beq.n	8001f06 <stdin_irq_dma+0xc2e>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a5d      	ldr	r2, [pc, #372]	; (8002058 <stdin_irq_dma+0xd80>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d00c      	beq.n	8001f00 <stdin_irq_dma+0xc28>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a5b      	ldr	r2, [pc, #364]	; (800205c <stdin_irq_dma+0xd84>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d102      	bne.n	8001efa <stdin_irq_dma+0xc22>
 8001ef4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001ef8:	e01e      	b.n	8001f38 <stdin_irq_dma+0xc60>
 8001efa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001efe:	e01b      	b.n	8001f38 <stdin_irq_dma+0xc60>
 8001f00:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f04:	e018      	b.n	8001f38 <stdin_irq_dma+0xc60>
 8001f06:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f0a:	e015      	b.n	8001f38 <stdin_irq_dma+0xc60>
 8001f0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f10:	e012      	b.n	8001f38 <stdin_irq_dma+0xc60>
 8001f12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f16:	e00f      	b.n	8001f38 <stdin_irq_dma+0xc60>
 8001f18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f1c:	e00c      	b.n	8001f38 <stdin_irq_dma+0xc60>
 8001f1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f22:	e009      	b.n	8001f38 <stdin_irq_dma+0xc60>
 8001f24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f28:	e006      	b.n	8001f38 <stdin_irq_dma+0xc60>
 8001f2a:	2308      	movs	r3, #8
 8001f2c:	e004      	b.n	8001f38 <stdin_irq_dma+0xc60>
 8001f2e:	2308      	movs	r3, #8
 8001f30:	e002      	b.n	8001f38 <stdin_irq_dma+0xc60>
 8001f32:	2308      	movs	r3, #8
 8001f34:	e000      	b.n	8001f38 <stdin_irq_dma+0xc60>
 8001f36:	2308      	movs	r3, #8
 8001f38:	4a49      	ldr	r2, [pc, #292]	; (8002060 <stdin_irq_dma+0xd88>)
 8001f3a:	60d3      	str	r3, [r2, #12]
 8001f3c:	e095      	b.n	800206a <stdin_irq_dma+0xd92>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a3a      	ldr	r2, [pc, #232]	; (8002030 <stdin_irq_dma+0xd58>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	f000 808b 	beq.w	8002064 <stdin_irq_dma+0xd8c>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a37      	ldr	r2, [pc, #220]	; (8002034 <stdin_irq_dma+0xd5c>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d064      	beq.n	8002026 <stdin_irq_dma+0xd4e>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a34      	ldr	r2, [pc, #208]	; (8002038 <stdin_irq_dma+0xd60>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d05b      	beq.n	8002022 <stdin_irq_dma+0xd4a>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a32      	ldr	r2, [pc, #200]	; (800203c <stdin_irq_dma+0xd64>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d052      	beq.n	800201e <stdin_irq_dma+0xd46>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a2f      	ldr	r2, [pc, #188]	; (8002040 <stdin_irq_dma+0xd68>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d048      	beq.n	8002018 <stdin_irq_dma+0xd40>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a2d      	ldr	r2, [pc, #180]	; (8002044 <stdin_irq_dma+0xd6c>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d03e      	beq.n	8002012 <stdin_irq_dma+0xd3a>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a2a      	ldr	r2, [pc, #168]	; (8002048 <stdin_irq_dma+0xd70>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d034      	beq.n	800200c <stdin_irq_dma+0xd34>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a28      	ldr	r2, [pc, #160]	; (800204c <stdin_irq_dma+0xd74>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d02a      	beq.n	8002006 <stdin_irq_dma+0xd2e>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a25      	ldr	r2, [pc, #148]	; (8002050 <stdin_irq_dma+0xd78>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d020      	beq.n	8002000 <stdin_irq_dma+0xd28>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a23      	ldr	r2, [pc, #140]	; (8002054 <stdin_irq_dma+0xd7c>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d016      	beq.n	8001ffa <stdin_irq_dma+0xd22>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a20      	ldr	r2, [pc, #128]	; (8002058 <stdin_irq_dma+0xd80>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d00c      	beq.n	8001ff4 <stdin_irq_dma+0xd1c>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a1e      	ldr	r2, [pc, #120]	; (800205c <stdin_irq_dma+0xd84>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d102      	bne.n	8001fee <stdin_irq_dma+0xd16>
 8001fe8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001fec:	e03b      	b.n	8002066 <stdin_irq_dma+0xd8e>
 8001fee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ff2:	e038      	b.n	8002066 <stdin_irq_dma+0xd8e>
 8001ff4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001ff8:	e035      	b.n	8002066 <stdin_irq_dma+0xd8e>
 8001ffa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001ffe:	e032      	b.n	8002066 <stdin_irq_dma+0xd8e>
 8002000:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002004:	e02f      	b.n	8002066 <stdin_irq_dma+0xd8e>
 8002006:	f44f 7300 	mov.w	r3, #512	; 0x200
 800200a:	e02c      	b.n	8002066 <stdin_irq_dma+0xd8e>
 800200c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002010:	e029      	b.n	8002066 <stdin_irq_dma+0xd8e>
 8002012:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002016:	e026      	b.n	8002066 <stdin_irq_dma+0xd8e>
 8002018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800201c:	e023      	b.n	8002066 <stdin_irq_dma+0xd8e>
 800201e:	2308      	movs	r3, #8
 8002020:	e021      	b.n	8002066 <stdin_irq_dma+0xd8e>
 8002022:	2308      	movs	r3, #8
 8002024:	e01f      	b.n	8002066 <stdin_irq_dma+0xd8e>
 8002026:	2308      	movs	r3, #8
 8002028:	e01d      	b.n	8002066 <stdin_irq_dma+0xd8e>
 800202a:	bf00      	nop
 800202c:	40026058 	.word	0x40026058
 8002030:	40026010 	.word	0x40026010
 8002034:	40026410 	.word	0x40026410
 8002038:	40026070 	.word	0x40026070
 800203c:	40026470 	.word	0x40026470
 8002040:	40026028 	.word	0x40026028
 8002044:	40026428 	.word	0x40026428
 8002048:	40026088 	.word	0x40026088
 800204c:	40026488 	.word	0x40026488
 8002050:	40026040 	.word	0x40026040
 8002054:	40026440 	.word	0x40026440
 8002058:	400260a0 	.word	0x400260a0
 800205c:	400264a0 	.word	0x400264a0
 8002060:	40026000 	.word	0x40026000
 8002064:	2308      	movs	r3, #8
 8002066:	4a7e      	ldr	r2, [pc, #504]	; (8002260 <stdin_irq_dma+0xf88>)
 8002068:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_FE_FLAG_INDEX(HDMA(in)));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	461a      	mov	r2, r3
 8002074:	4b7b      	ldr	r3, [pc, #492]	; (8002264 <stdin_irq_dma+0xf8c>)
 8002076:	429a      	cmp	r2, r3
 8002078:	d974      	bls.n	8002164 <stdin_irq_dma+0xe8c>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a79      	ldr	r2, [pc, #484]	; (8002268 <stdin_irq_dma+0xf90>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d069      	beq.n	800215c <stdin_irq_dma+0xe84>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a76      	ldr	r2, [pc, #472]	; (800226c <stdin_irq_dma+0xf94>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d060      	beq.n	8002158 <stdin_irq_dma+0xe80>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a74      	ldr	r2, [pc, #464]	; (8002270 <stdin_irq_dma+0xf98>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d057      	beq.n	8002154 <stdin_irq_dma+0xe7c>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a71      	ldr	r2, [pc, #452]	; (8002274 <stdin_irq_dma+0xf9c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d04e      	beq.n	8002150 <stdin_irq_dma+0xe78>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a6f      	ldr	r2, [pc, #444]	; (8002278 <stdin_irq_dma+0xfa0>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d045      	beq.n	800214c <stdin_irq_dma+0xe74>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a6c      	ldr	r2, [pc, #432]	; (800227c <stdin_irq_dma+0xfa4>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d03c      	beq.n	8002148 <stdin_irq_dma+0xe70>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a6a      	ldr	r2, [pc, #424]	; (8002280 <stdin_irq_dma+0xfa8>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d033      	beq.n	8002144 <stdin_irq_dma+0xe6c>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a67      	ldr	r2, [pc, #412]	; (8002284 <stdin_irq_dma+0xfac>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d02a      	beq.n	8002140 <stdin_irq_dma+0xe68>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a65      	ldr	r2, [pc, #404]	; (8002288 <stdin_irq_dma+0xfb0>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d020      	beq.n	800213a <stdin_irq_dma+0xe62>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a62      	ldr	r2, [pc, #392]	; (800228c <stdin_irq_dma+0xfb4>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d016      	beq.n	8002134 <stdin_irq_dma+0xe5c>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a60      	ldr	r2, [pc, #384]	; (8002290 <stdin_irq_dma+0xfb8>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d00c      	beq.n	800212e <stdin_irq_dma+0xe56>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a5d      	ldr	r2, [pc, #372]	; (8002294 <stdin_irq_dma+0xfbc>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d102      	bne.n	8002128 <stdin_irq_dma+0xe50>
 8002122:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002126:	e01a      	b.n	800215e <stdin_irq_dma+0xe86>
 8002128:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800212c:	e017      	b.n	800215e <stdin_irq_dma+0xe86>
 800212e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002132:	e014      	b.n	800215e <stdin_irq_dma+0xe86>
 8002134:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002138:	e011      	b.n	800215e <stdin_irq_dma+0xe86>
 800213a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800213e:	e00e      	b.n	800215e <stdin_irq_dma+0xe86>
 8002140:	2340      	movs	r3, #64	; 0x40
 8002142:	e00c      	b.n	800215e <stdin_irq_dma+0xe86>
 8002144:	2340      	movs	r3, #64	; 0x40
 8002146:	e00a      	b.n	800215e <stdin_irq_dma+0xe86>
 8002148:	2340      	movs	r3, #64	; 0x40
 800214a:	e008      	b.n	800215e <stdin_irq_dma+0xe86>
 800214c:	2340      	movs	r3, #64	; 0x40
 800214e:	e006      	b.n	800215e <stdin_irq_dma+0xe86>
 8002150:	2301      	movs	r3, #1
 8002152:	e004      	b.n	800215e <stdin_irq_dma+0xe86>
 8002154:	2301      	movs	r3, #1
 8002156:	e002      	b.n	800215e <stdin_irq_dma+0xe86>
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <stdin_irq_dma+0xe86>
 800215c:	2301      	movs	r3, #1
 800215e:	4a4e      	ldr	r2, [pc, #312]	; (8002298 <stdin_irq_dma+0xfc0>)
 8002160:	60d3      	str	r3, [r2, #12]
 8002162:	e1ac      	b.n	80024be <stdin_irq_dma+0x11e6>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	461a      	mov	r2, r3
 800216e:	4b4b      	ldr	r3, [pc, #300]	; (800229c <stdin_irq_dma+0xfc4>)
 8002170:	429a      	cmp	r2, r3
 8002172:	f240 8095 	bls.w	80022a0 <stdin_irq_dma+0xfc8>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a3a      	ldr	r2, [pc, #232]	; (8002268 <stdin_irq_dma+0xf90>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d069      	beq.n	8002258 <stdin_irq_dma+0xf80>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a37      	ldr	r2, [pc, #220]	; (800226c <stdin_irq_dma+0xf94>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d060      	beq.n	8002254 <stdin_irq_dma+0xf7c>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a35      	ldr	r2, [pc, #212]	; (8002270 <stdin_irq_dma+0xf98>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d057      	beq.n	8002250 <stdin_irq_dma+0xf78>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a32      	ldr	r2, [pc, #200]	; (8002274 <stdin_irq_dma+0xf9c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d04e      	beq.n	800224c <stdin_irq_dma+0xf74>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a30      	ldr	r2, [pc, #192]	; (8002278 <stdin_irq_dma+0xfa0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d045      	beq.n	8002248 <stdin_irq_dma+0xf70>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a2d      	ldr	r2, [pc, #180]	; (800227c <stdin_irq_dma+0xfa4>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d03c      	beq.n	8002244 <stdin_irq_dma+0xf6c>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a2b      	ldr	r2, [pc, #172]	; (8002280 <stdin_irq_dma+0xfa8>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d033      	beq.n	8002240 <stdin_irq_dma+0xf68>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a28      	ldr	r2, [pc, #160]	; (8002284 <stdin_irq_dma+0xfac>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d02a      	beq.n	800223c <stdin_irq_dma+0xf64>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a26      	ldr	r2, [pc, #152]	; (8002288 <stdin_irq_dma+0xfb0>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d020      	beq.n	8002236 <stdin_irq_dma+0xf5e>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a23      	ldr	r2, [pc, #140]	; (800228c <stdin_irq_dma+0xfb4>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d016      	beq.n	8002230 <stdin_irq_dma+0xf58>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a21      	ldr	r2, [pc, #132]	; (8002290 <stdin_irq_dma+0xfb8>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d00c      	beq.n	800222a <stdin_irq_dma+0xf52>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a1e      	ldr	r2, [pc, #120]	; (8002294 <stdin_irq_dma+0xfbc>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d102      	bne.n	8002224 <stdin_irq_dma+0xf4c>
 800221e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002222:	e01a      	b.n	800225a <stdin_irq_dma+0xf82>
 8002224:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002228:	e017      	b.n	800225a <stdin_irq_dma+0xf82>
 800222a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800222e:	e014      	b.n	800225a <stdin_irq_dma+0xf82>
 8002230:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002234:	e011      	b.n	800225a <stdin_irq_dma+0xf82>
 8002236:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800223a:	e00e      	b.n	800225a <stdin_irq_dma+0xf82>
 800223c:	2340      	movs	r3, #64	; 0x40
 800223e:	e00c      	b.n	800225a <stdin_irq_dma+0xf82>
 8002240:	2340      	movs	r3, #64	; 0x40
 8002242:	e00a      	b.n	800225a <stdin_irq_dma+0xf82>
 8002244:	2340      	movs	r3, #64	; 0x40
 8002246:	e008      	b.n	800225a <stdin_irq_dma+0xf82>
 8002248:	2340      	movs	r3, #64	; 0x40
 800224a:	e006      	b.n	800225a <stdin_irq_dma+0xf82>
 800224c:	2301      	movs	r3, #1
 800224e:	e004      	b.n	800225a <stdin_irq_dma+0xf82>
 8002250:	2301      	movs	r3, #1
 8002252:	e002      	b.n	800225a <stdin_irq_dma+0xf82>
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <stdin_irq_dma+0xf82>
 8002258:	2301      	movs	r3, #1
 800225a:	4a0f      	ldr	r2, [pc, #60]	; (8002298 <stdin_irq_dma+0xfc0>)
 800225c:	6093      	str	r3, [r2, #8]
 800225e:	e12e      	b.n	80024be <stdin_irq_dma+0x11e6>
 8002260:	40026000 	.word	0x40026000
 8002264:	40026458 	.word	0x40026458
 8002268:	40026010 	.word	0x40026010
 800226c:	40026410 	.word	0x40026410
 8002270:	40026070 	.word	0x40026070
 8002274:	40026470 	.word	0x40026470
 8002278:	40026028 	.word	0x40026028
 800227c:	40026428 	.word	0x40026428
 8002280:	40026088 	.word	0x40026088
 8002284:	40026488 	.word	0x40026488
 8002288:	40026040 	.word	0x40026040
 800228c:	40026440 	.word	0x40026440
 8002290:	400260a0 	.word	0x400260a0
 8002294:	400264a0 	.word	0x400264a0
 8002298:	40026400 	.word	0x40026400
 800229c:	400260b8 	.word	0x400260b8
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	461a      	mov	r2, r3
 80022aa:	4b75      	ldr	r3, [pc, #468]	; (8002480 <stdin_irq_dma+0x11a8>)
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d974      	bls.n	800239a <stdin_irq_dma+0x10c2>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a72      	ldr	r2, [pc, #456]	; (8002484 <stdin_irq_dma+0x11ac>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d069      	beq.n	8002392 <stdin_irq_dma+0x10ba>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a70      	ldr	r2, [pc, #448]	; (8002488 <stdin_irq_dma+0x11b0>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d060      	beq.n	800238e <stdin_irq_dma+0x10b6>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a6d      	ldr	r2, [pc, #436]	; (800248c <stdin_irq_dma+0x11b4>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d057      	beq.n	800238a <stdin_irq_dma+0x10b2>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a6b      	ldr	r2, [pc, #428]	; (8002490 <stdin_irq_dma+0x11b8>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d04e      	beq.n	8002386 <stdin_irq_dma+0x10ae>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a68      	ldr	r2, [pc, #416]	; (8002494 <stdin_irq_dma+0x11bc>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d045      	beq.n	8002382 <stdin_irq_dma+0x10aa>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a66      	ldr	r2, [pc, #408]	; (8002498 <stdin_irq_dma+0x11c0>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d03c      	beq.n	800237e <stdin_irq_dma+0x10a6>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a63      	ldr	r2, [pc, #396]	; (800249c <stdin_irq_dma+0x11c4>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d033      	beq.n	800237a <stdin_irq_dma+0x10a2>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a61      	ldr	r2, [pc, #388]	; (80024a0 <stdin_irq_dma+0x11c8>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d02a      	beq.n	8002376 <stdin_irq_dma+0x109e>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a5e      	ldr	r2, [pc, #376]	; (80024a4 <stdin_irq_dma+0x11cc>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d020      	beq.n	8002370 <stdin_irq_dma+0x1098>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a5c      	ldr	r2, [pc, #368]	; (80024a8 <stdin_irq_dma+0x11d0>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d016      	beq.n	800236a <stdin_irq_dma+0x1092>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a59      	ldr	r2, [pc, #356]	; (80024ac <stdin_irq_dma+0x11d4>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d00c      	beq.n	8002364 <stdin_irq_dma+0x108c>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a57      	ldr	r2, [pc, #348]	; (80024b0 <stdin_irq_dma+0x11d8>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d102      	bne.n	800235e <stdin_irq_dma+0x1086>
 8002358:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800235c:	e01a      	b.n	8002394 <stdin_irq_dma+0x10bc>
 800235e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002362:	e017      	b.n	8002394 <stdin_irq_dma+0x10bc>
 8002364:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002368:	e014      	b.n	8002394 <stdin_irq_dma+0x10bc>
 800236a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800236e:	e011      	b.n	8002394 <stdin_irq_dma+0x10bc>
 8002370:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002374:	e00e      	b.n	8002394 <stdin_irq_dma+0x10bc>
 8002376:	2340      	movs	r3, #64	; 0x40
 8002378:	e00c      	b.n	8002394 <stdin_irq_dma+0x10bc>
 800237a:	2340      	movs	r3, #64	; 0x40
 800237c:	e00a      	b.n	8002394 <stdin_irq_dma+0x10bc>
 800237e:	2340      	movs	r3, #64	; 0x40
 8002380:	e008      	b.n	8002394 <stdin_irq_dma+0x10bc>
 8002382:	2340      	movs	r3, #64	; 0x40
 8002384:	e006      	b.n	8002394 <stdin_irq_dma+0x10bc>
 8002386:	2301      	movs	r3, #1
 8002388:	e004      	b.n	8002394 <stdin_irq_dma+0x10bc>
 800238a:	2301      	movs	r3, #1
 800238c:	e002      	b.n	8002394 <stdin_irq_dma+0x10bc>
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <stdin_irq_dma+0x10bc>
 8002392:	2301      	movs	r3, #1
 8002394:	4a47      	ldr	r2, [pc, #284]	; (80024b4 <stdin_irq_dma+0x11dc>)
 8002396:	60d3      	str	r3, [r2, #12]
 8002398:	e091      	b.n	80024be <stdin_irq_dma+0x11e6>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a38      	ldr	r2, [pc, #224]	; (8002484 <stdin_irq_dma+0x11ac>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	f000 8087 	beq.w	80024b8 <stdin_irq_dma+0x11e0>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a35      	ldr	r2, [pc, #212]	; (8002488 <stdin_irq_dma+0x11b0>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d060      	beq.n	800247a <stdin_irq_dma+0x11a2>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a32      	ldr	r2, [pc, #200]	; (800248c <stdin_irq_dma+0x11b4>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d057      	beq.n	8002476 <stdin_irq_dma+0x119e>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a30      	ldr	r2, [pc, #192]	; (8002490 <stdin_irq_dma+0x11b8>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d04e      	beq.n	8002472 <stdin_irq_dma+0x119a>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a2d      	ldr	r2, [pc, #180]	; (8002494 <stdin_irq_dma+0x11bc>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d045      	beq.n	800246e <stdin_irq_dma+0x1196>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a2b      	ldr	r2, [pc, #172]	; (8002498 <stdin_irq_dma+0x11c0>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d03c      	beq.n	800246a <stdin_irq_dma+0x1192>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a28      	ldr	r2, [pc, #160]	; (800249c <stdin_irq_dma+0x11c4>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d033      	beq.n	8002466 <stdin_irq_dma+0x118e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a26      	ldr	r2, [pc, #152]	; (80024a0 <stdin_irq_dma+0x11c8>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d02a      	beq.n	8002462 <stdin_irq_dma+0x118a>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a23      	ldr	r2, [pc, #140]	; (80024a4 <stdin_irq_dma+0x11cc>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d020      	beq.n	800245c <stdin_irq_dma+0x1184>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a21      	ldr	r2, [pc, #132]	; (80024a8 <stdin_irq_dma+0x11d0>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d016      	beq.n	8002456 <stdin_irq_dma+0x117e>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a1e      	ldr	r2, [pc, #120]	; (80024ac <stdin_irq_dma+0x11d4>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d00c      	beq.n	8002450 <stdin_irq_dma+0x1178>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a1c      	ldr	r2, [pc, #112]	; (80024b0 <stdin_irq_dma+0x11d8>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d102      	bne.n	800244a <stdin_irq_dma+0x1172>
 8002444:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002448:	e037      	b.n	80024ba <stdin_irq_dma+0x11e2>
 800244a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800244e:	e034      	b.n	80024ba <stdin_irq_dma+0x11e2>
 8002450:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002454:	e031      	b.n	80024ba <stdin_irq_dma+0x11e2>
 8002456:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800245a:	e02e      	b.n	80024ba <stdin_irq_dma+0x11e2>
 800245c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002460:	e02b      	b.n	80024ba <stdin_irq_dma+0x11e2>
 8002462:	2340      	movs	r3, #64	; 0x40
 8002464:	e029      	b.n	80024ba <stdin_irq_dma+0x11e2>
 8002466:	2340      	movs	r3, #64	; 0x40
 8002468:	e027      	b.n	80024ba <stdin_irq_dma+0x11e2>
 800246a:	2340      	movs	r3, #64	; 0x40
 800246c:	e025      	b.n	80024ba <stdin_irq_dma+0x11e2>
 800246e:	2340      	movs	r3, #64	; 0x40
 8002470:	e023      	b.n	80024ba <stdin_irq_dma+0x11e2>
 8002472:	2301      	movs	r3, #1
 8002474:	e021      	b.n	80024ba <stdin_irq_dma+0x11e2>
 8002476:	2301      	movs	r3, #1
 8002478:	e01f      	b.n	80024ba <stdin_irq_dma+0x11e2>
 800247a:	2301      	movs	r3, #1
 800247c:	e01d      	b.n	80024ba <stdin_irq_dma+0x11e2>
 800247e:	bf00      	nop
 8002480:	40026058 	.word	0x40026058
 8002484:	40026010 	.word	0x40026010
 8002488:	40026410 	.word	0x40026410
 800248c:	40026070 	.word	0x40026070
 8002490:	40026470 	.word	0x40026470
 8002494:	40026028 	.word	0x40026028
 8002498:	40026428 	.word	0x40026428
 800249c:	40026088 	.word	0x40026088
 80024a0:	40026488 	.word	0x40026488
 80024a4:	40026040 	.word	0x40026040
 80024a8:	40026440 	.word	0x40026440
 80024ac:	400260a0 	.word	0x400260a0
 80024b0:	400264a0 	.word	0x400264a0
 80024b4:	40026000 	.word	0x40026000
 80024b8:	2301      	movs	r3, #1
 80024ba:	4a82      	ldr	r2, [pc, #520]	; (80026c4 <stdin_irq_dma+0x13ec>)
 80024bc:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_DME_FLAG_INDEX(HDMA(in)));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	461a      	mov	r2, r3
 80024c8:	4b7f      	ldr	r3, [pc, #508]	; (80026c8 <stdin_irq_dma+0x13f0>)
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d978      	bls.n	80025c0 <stdin_irq_dma+0x12e8>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a7d      	ldr	r2, [pc, #500]	; (80026cc <stdin_irq_dma+0x13f4>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d06d      	beq.n	80025b8 <stdin_irq_dma+0x12e0>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a7a      	ldr	r2, [pc, #488]	; (80026d0 <stdin_irq_dma+0x13f8>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d064      	beq.n	80025b4 <stdin_irq_dma+0x12dc>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a78      	ldr	r2, [pc, #480]	; (80026d4 <stdin_irq_dma+0x13fc>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d05b      	beq.n	80025b0 <stdin_irq_dma+0x12d8>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a75      	ldr	r2, [pc, #468]	; (80026d8 <stdin_irq_dma+0x1400>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d052      	beq.n	80025ac <stdin_irq_dma+0x12d4>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a73      	ldr	r2, [pc, #460]	; (80026dc <stdin_irq_dma+0x1404>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d048      	beq.n	80025a6 <stdin_irq_dma+0x12ce>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a70      	ldr	r2, [pc, #448]	; (80026e0 <stdin_irq_dma+0x1408>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d03e      	beq.n	80025a0 <stdin_irq_dma+0x12c8>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a6e      	ldr	r2, [pc, #440]	; (80026e4 <stdin_irq_dma+0x140c>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d034      	beq.n	800259a <stdin_irq_dma+0x12c2>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a6b      	ldr	r2, [pc, #428]	; (80026e8 <stdin_irq_dma+0x1410>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d02a      	beq.n	8002594 <stdin_irq_dma+0x12bc>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a69      	ldr	r2, [pc, #420]	; (80026ec <stdin_irq_dma+0x1414>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d020      	beq.n	800258e <stdin_irq_dma+0x12b6>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a66      	ldr	r2, [pc, #408]	; (80026f0 <stdin_irq_dma+0x1418>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d016      	beq.n	8002588 <stdin_irq_dma+0x12b0>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a64      	ldr	r2, [pc, #400]	; (80026f4 <stdin_irq_dma+0x141c>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d00c      	beq.n	8002582 <stdin_irq_dma+0x12aa>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a61      	ldr	r2, [pc, #388]	; (80026f8 <stdin_irq_dma+0x1420>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d102      	bne.n	800257c <stdin_irq_dma+0x12a4>
 8002576:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800257a:	e01e      	b.n	80025ba <stdin_irq_dma+0x12e2>
 800257c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002580:	e01b      	b.n	80025ba <stdin_irq_dma+0x12e2>
 8002582:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002586:	e018      	b.n	80025ba <stdin_irq_dma+0x12e2>
 8002588:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800258c:	e015      	b.n	80025ba <stdin_irq_dma+0x12e2>
 800258e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002592:	e012      	b.n	80025ba <stdin_irq_dma+0x12e2>
 8002594:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002598:	e00f      	b.n	80025ba <stdin_irq_dma+0x12e2>
 800259a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800259e:	e00c      	b.n	80025ba <stdin_irq_dma+0x12e2>
 80025a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025a4:	e009      	b.n	80025ba <stdin_irq_dma+0x12e2>
 80025a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025aa:	e006      	b.n	80025ba <stdin_irq_dma+0x12e2>
 80025ac:	2304      	movs	r3, #4
 80025ae:	e004      	b.n	80025ba <stdin_irq_dma+0x12e2>
 80025b0:	2304      	movs	r3, #4
 80025b2:	e002      	b.n	80025ba <stdin_irq_dma+0x12e2>
 80025b4:	2304      	movs	r3, #4
 80025b6:	e000      	b.n	80025ba <stdin_irq_dma+0x12e2>
 80025b8:	2304      	movs	r3, #4
 80025ba:	4a50      	ldr	r2, [pc, #320]	; (80026fc <stdin_irq_dma+0x1424>)
 80025bc:	60d3      	str	r3, [r2, #12]
 80025be:	e19a      	b.n	80028f6 <stdin_irq_dma+0x161e>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	461a      	mov	r2, r3
 80025ca:	4b4d      	ldr	r3, [pc, #308]	; (8002700 <stdin_irq_dma+0x1428>)
 80025cc:	429a      	cmp	r2, r3
 80025ce:	f240 8099 	bls.w	8002704 <stdin_irq_dma+0x142c>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a3c      	ldr	r2, [pc, #240]	; (80026cc <stdin_irq_dma+0x13f4>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d06d      	beq.n	80026bc <stdin_irq_dma+0x13e4>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a39      	ldr	r2, [pc, #228]	; (80026d0 <stdin_irq_dma+0x13f8>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d064      	beq.n	80026b8 <stdin_irq_dma+0x13e0>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a37      	ldr	r2, [pc, #220]	; (80026d4 <stdin_irq_dma+0x13fc>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d05b      	beq.n	80026b4 <stdin_irq_dma+0x13dc>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a34      	ldr	r2, [pc, #208]	; (80026d8 <stdin_irq_dma+0x1400>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d052      	beq.n	80026b0 <stdin_irq_dma+0x13d8>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a32      	ldr	r2, [pc, #200]	; (80026dc <stdin_irq_dma+0x1404>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d048      	beq.n	80026aa <stdin_irq_dma+0x13d2>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a2f      	ldr	r2, [pc, #188]	; (80026e0 <stdin_irq_dma+0x1408>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d03e      	beq.n	80026a4 <stdin_irq_dma+0x13cc>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a2d      	ldr	r2, [pc, #180]	; (80026e4 <stdin_irq_dma+0x140c>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d034      	beq.n	800269e <stdin_irq_dma+0x13c6>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a2a      	ldr	r2, [pc, #168]	; (80026e8 <stdin_irq_dma+0x1410>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d02a      	beq.n	8002698 <stdin_irq_dma+0x13c0>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a28      	ldr	r2, [pc, #160]	; (80026ec <stdin_irq_dma+0x1414>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d020      	beq.n	8002692 <stdin_irq_dma+0x13ba>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a25      	ldr	r2, [pc, #148]	; (80026f0 <stdin_irq_dma+0x1418>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d016      	beq.n	800268c <stdin_irq_dma+0x13b4>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a23      	ldr	r2, [pc, #140]	; (80026f4 <stdin_irq_dma+0x141c>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d00c      	beq.n	8002686 <stdin_irq_dma+0x13ae>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a20      	ldr	r2, [pc, #128]	; (80026f8 <stdin_irq_dma+0x1420>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d102      	bne.n	8002680 <stdin_irq_dma+0x13a8>
 800267a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800267e:	e01e      	b.n	80026be <stdin_irq_dma+0x13e6>
 8002680:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002684:	e01b      	b.n	80026be <stdin_irq_dma+0x13e6>
 8002686:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800268a:	e018      	b.n	80026be <stdin_irq_dma+0x13e6>
 800268c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002690:	e015      	b.n	80026be <stdin_irq_dma+0x13e6>
 8002692:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002696:	e012      	b.n	80026be <stdin_irq_dma+0x13e6>
 8002698:	f44f 7380 	mov.w	r3, #256	; 0x100
 800269c:	e00f      	b.n	80026be <stdin_irq_dma+0x13e6>
 800269e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026a2:	e00c      	b.n	80026be <stdin_irq_dma+0x13e6>
 80026a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026a8:	e009      	b.n	80026be <stdin_irq_dma+0x13e6>
 80026aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026ae:	e006      	b.n	80026be <stdin_irq_dma+0x13e6>
 80026b0:	2304      	movs	r3, #4
 80026b2:	e004      	b.n	80026be <stdin_irq_dma+0x13e6>
 80026b4:	2304      	movs	r3, #4
 80026b6:	e002      	b.n	80026be <stdin_irq_dma+0x13e6>
 80026b8:	2304      	movs	r3, #4
 80026ba:	e000      	b.n	80026be <stdin_irq_dma+0x13e6>
 80026bc:	2304      	movs	r3, #4
 80026be:	4a0f      	ldr	r2, [pc, #60]	; (80026fc <stdin_irq_dma+0x1424>)
 80026c0:	6093      	str	r3, [r2, #8]
 80026c2:	e118      	b.n	80028f6 <stdin_irq_dma+0x161e>
 80026c4:	40026000 	.word	0x40026000
 80026c8:	40026458 	.word	0x40026458
 80026cc:	40026010 	.word	0x40026010
 80026d0:	40026410 	.word	0x40026410
 80026d4:	40026070 	.word	0x40026070
 80026d8:	40026470 	.word	0x40026470
 80026dc:	40026028 	.word	0x40026028
 80026e0:	40026428 	.word	0x40026428
 80026e4:	40026088 	.word	0x40026088
 80026e8:	40026488 	.word	0x40026488
 80026ec:	40026040 	.word	0x40026040
 80026f0:	40026440 	.word	0x40026440
 80026f4:	400260a0 	.word	0x400260a0
 80026f8:	400264a0 	.word	0x400264a0
 80026fc:	40026400 	.word	0x40026400
 8002700:	400260b8 	.word	0x400260b8
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	461a      	mov	r2, r3
 800270e:	4b80      	ldr	r3, [pc, #512]	; (8002910 <stdin_irq_dma+0x1638>)
 8002710:	429a      	cmp	r2, r3
 8002712:	d978      	bls.n	8002806 <stdin_irq_dma+0x152e>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a7d      	ldr	r2, [pc, #500]	; (8002914 <stdin_irq_dma+0x163c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d06d      	beq.n	80027fe <stdin_irq_dma+0x1526>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a7b      	ldr	r2, [pc, #492]	; (8002918 <stdin_irq_dma+0x1640>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d064      	beq.n	80027fa <stdin_irq_dma+0x1522>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a78      	ldr	r2, [pc, #480]	; (800291c <stdin_irq_dma+0x1644>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d05b      	beq.n	80027f6 <stdin_irq_dma+0x151e>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a76      	ldr	r2, [pc, #472]	; (8002920 <stdin_irq_dma+0x1648>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d052      	beq.n	80027f2 <stdin_irq_dma+0x151a>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a73      	ldr	r2, [pc, #460]	; (8002924 <stdin_irq_dma+0x164c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d048      	beq.n	80027ec <stdin_irq_dma+0x1514>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a71      	ldr	r2, [pc, #452]	; (8002928 <stdin_irq_dma+0x1650>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d03e      	beq.n	80027e6 <stdin_irq_dma+0x150e>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a6e      	ldr	r2, [pc, #440]	; (800292c <stdin_irq_dma+0x1654>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d034      	beq.n	80027e0 <stdin_irq_dma+0x1508>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a6c      	ldr	r2, [pc, #432]	; (8002930 <stdin_irq_dma+0x1658>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d02a      	beq.n	80027da <stdin_irq_dma+0x1502>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a69      	ldr	r2, [pc, #420]	; (8002934 <stdin_irq_dma+0x165c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d020      	beq.n	80027d4 <stdin_irq_dma+0x14fc>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a67      	ldr	r2, [pc, #412]	; (8002938 <stdin_irq_dma+0x1660>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d016      	beq.n	80027ce <stdin_irq_dma+0x14f6>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a64      	ldr	r2, [pc, #400]	; (800293c <stdin_irq_dma+0x1664>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d00c      	beq.n	80027c8 <stdin_irq_dma+0x14f0>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a62      	ldr	r2, [pc, #392]	; (8002940 <stdin_irq_dma+0x1668>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d102      	bne.n	80027c2 <stdin_irq_dma+0x14ea>
 80027bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80027c0:	e01e      	b.n	8002800 <stdin_irq_dma+0x1528>
 80027c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027c6:	e01b      	b.n	8002800 <stdin_irq_dma+0x1528>
 80027c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80027cc:	e018      	b.n	8002800 <stdin_irq_dma+0x1528>
 80027ce:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80027d2:	e015      	b.n	8002800 <stdin_irq_dma+0x1528>
 80027d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80027d8:	e012      	b.n	8002800 <stdin_irq_dma+0x1528>
 80027da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027de:	e00f      	b.n	8002800 <stdin_irq_dma+0x1528>
 80027e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027e4:	e00c      	b.n	8002800 <stdin_irq_dma+0x1528>
 80027e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027ea:	e009      	b.n	8002800 <stdin_irq_dma+0x1528>
 80027ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027f0:	e006      	b.n	8002800 <stdin_irq_dma+0x1528>
 80027f2:	2304      	movs	r3, #4
 80027f4:	e004      	b.n	8002800 <stdin_irq_dma+0x1528>
 80027f6:	2304      	movs	r3, #4
 80027f8:	e002      	b.n	8002800 <stdin_irq_dma+0x1528>
 80027fa:	2304      	movs	r3, #4
 80027fc:	e000      	b.n	8002800 <stdin_irq_dma+0x1528>
 80027fe:	2304      	movs	r3, #4
 8002800:	4a50      	ldr	r2, [pc, #320]	; (8002944 <stdin_irq_dma+0x166c>)
 8002802:	60d3      	str	r3, [r2, #12]
 8002804:	e077      	b.n	80028f6 <stdin_irq_dma+0x161e>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a41      	ldr	r2, [pc, #260]	; (8002914 <stdin_irq_dma+0x163c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d06d      	beq.n	80028f0 <stdin_irq_dma+0x1618>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a3e      	ldr	r2, [pc, #248]	; (8002918 <stdin_irq_dma+0x1640>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d064      	beq.n	80028ec <stdin_irq_dma+0x1614>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a3c      	ldr	r2, [pc, #240]	; (800291c <stdin_irq_dma+0x1644>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d05b      	beq.n	80028e8 <stdin_irq_dma+0x1610>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a39      	ldr	r2, [pc, #228]	; (8002920 <stdin_irq_dma+0x1648>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d052      	beq.n	80028e4 <stdin_irq_dma+0x160c>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a37      	ldr	r2, [pc, #220]	; (8002924 <stdin_irq_dma+0x164c>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d048      	beq.n	80028de <stdin_irq_dma+0x1606>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a34      	ldr	r2, [pc, #208]	; (8002928 <stdin_irq_dma+0x1650>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d03e      	beq.n	80028d8 <stdin_irq_dma+0x1600>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a32      	ldr	r2, [pc, #200]	; (800292c <stdin_irq_dma+0x1654>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d034      	beq.n	80028d2 <stdin_irq_dma+0x15fa>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a2f      	ldr	r2, [pc, #188]	; (8002930 <stdin_irq_dma+0x1658>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d02a      	beq.n	80028cc <stdin_irq_dma+0x15f4>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a2d      	ldr	r2, [pc, #180]	; (8002934 <stdin_irq_dma+0x165c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d020      	beq.n	80028c6 <stdin_irq_dma+0x15ee>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a2a      	ldr	r2, [pc, #168]	; (8002938 <stdin_irq_dma+0x1660>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d016      	beq.n	80028c0 <stdin_irq_dma+0x15e8>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a28      	ldr	r2, [pc, #160]	; (800293c <stdin_irq_dma+0x1664>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d00c      	beq.n	80028ba <stdin_irq_dma+0x15e2>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a25      	ldr	r2, [pc, #148]	; (8002940 <stdin_irq_dma+0x1668>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d102      	bne.n	80028b4 <stdin_irq_dma+0x15dc>
 80028ae:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80028b2:	e01e      	b.n	80028f2 <stdin_irq_dma+0x161a>
 80028b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028b8:	e01b      	b.n	80028f2 <stdin_irq_dma+0x161a>
 80028ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80028be:	e018      	b.n	80028f2 <stdin_irq_dma+0x161a>
 80028c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80028c4:	e015      	b.n	80028f2 <stdin_irq_dma+0x161a>
 80028c6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80028ca:	e012      	b.n	80028f2 <stdin_irq_dma+0x161a>
 80028cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028d0:	e00f      	b.n	80028f2 <stdin_irq_dma+0x161a>
 80028d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028d6:	e00c      	b.n	80028f2 <stdin_irq_dma+0x161a>
 80028d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028dc:	e009      	b.n	80028f2 <stdin_irq_dma+0x161a>
 80028de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028e2:	e006      	b.n	80028f2 <stdin_irq_dma+0x161a>
 80028e4:	2304      	movs	r3, #4
 80028e6:	e004      	b.n	80028f2 <stdin_irq_dma+0x161a>
 80028e8:	2304      	movs	r3, #4
 80028ea:	e002      	b.n	80028f2 <stdin_irq_dma+0x161a>
 80028ec:	2304      	movs	r3, #4
 80028ee:	e000      	b.n	80028f2 <stdin_irq_dma+0x161a>
 80028f0:	2304      	movs	r3, #4
 80028f2:	4a14      	ldr	r2, [pc, #80]	; (8002944 <stdin_irq_dma+0x166c>)
 80028f4:	6093      	str	r3, [r2, #8]
    HAL_UART_Receive_DMA(in->huart, in->buffer, in->size);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6818      	ldr	r0, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6899      	ldr	r1, [r3, #8]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	899b      	ldrh	r3, [r3, #12]
 8002902:	461a      	mov	r2, r3
 8002904:	f004 f875 	bl	80069f2 <HAL_UART_Receive_DMA>
}
 8002908:	bf00      	nop
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40026058 	.word	0x40026058
 8002914:	40026010 	.word	0x40026010
 8002918:	40026410 	.word	0x40026410
 800291c:	40026070 	.word	0x40026070
 8002920:	40026470 	.word	0x40026470
 8002924:	40026028 	.word	0x40026028
 8002928:	40026428 	.word	0x40026428
 800292c:	40026088 	.word	0x40026088
 8002930:	40026488 	.word	0x40026488
 8002934:	40026040 	.word	0x40026040
 8002938:	40026440 	.word	0x40026440
 800293c:	400260a0 	.word	0x400260a0
 8002940:	400264a0 	.word	0x400264a0
 8002944:	40026000 	.word	0x40026000

08002948 <stdin_irq_uart>:

void stdin_irq_uart(stdin_t *in)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  if (__HAL_UART_GET_FLAG(in->huart, UART_FLAG_IDLE))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0310 	and.w	r3, r3, #16
 800295c:	2b10      	cmp	r3, #16
 800295e:	d10f      	bne.n	8002980 <stdin_irq_uart+0x38>
  {
    __HAL_UART_CLEAR_IDLEFLAG(in->huart);
 8002960:	2300      	movs	r3, #0
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]
    check_buffer(in);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f804 	bl	8002988 <check_buffer>
  }
}
 8002980:	bf00      	nop
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <check_buffer>:

/* Private function implementations
 * --------------------------------------------*/
static void check_buffer(stdin_t *in)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint16_t pos;
  uint16_t new;

  /* Calculate current position in buffer */
  new = __HAL_DMA_GET_COUNTER(HDMA(in));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	81fb      	strh	r3, [r7, #14]
  pos = in->size - new;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	899a      	ldrh	r2, [r3, #12]
 80029a0:	89fb      	ldrh	r3, [r7, #14]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	81bb      	strh	r3, [r7, #12]

  /* Check change in received data */
  if (pos != in->pos)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	89db      	ldrh	r3, [r3, #14]
 80029aa:	89ba      	ldrh	r2, [r7, #12]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d025      	beq.n	80029fc <check_buffer+0x74>
  {
    if (pos > in->pos)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	89db      	ldrh	r3, [r3, #14]
 80029b4:	89ba      	ldrh	r2, [r7, #12]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d90b      	bls.n	80029d2 <check_buffer+0x4a>
      /* Current position is over previous one */
      /* We are in "linear" mode */
      /* Process data directly by subtracting "pointers" */
      fill_buffer(in, in->pos, pos - in->pos);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	89d9      	ldrh	r1, [r3, #14]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	89db      	ldrh	r3, [r3, #14]
 80029c2:	89ba      	ldrh	r2, [r7, #12]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	461a      	mov	r2, r3
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f824 	bl	8002a18 <fill_buffer>
 80029d0:	e014      	b.n	80029fc <check_buffer+0x74>
    else
    {
      /* We are in "overflow" mode */
      /* First process data to the end of buffer */
      fill_buffer(in, in->pos, in->size - in->pos);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	89d9      	ldrh	r1, [r3, #14]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	899a      	ldrh	r2, [r3, #12]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	89db      	ldrh	r3, [r3, #14]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	461a      	mov	r2, r3
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f817 	bl	8002a18 <fill_buffer>
      /* Check and continue with beginning of buffer */
      if (pos > 0)
 80029ea:	89bb      	ldrh	r3, [r7, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <check_buffer+0x74>
        fill_buffer(in, 0, pos);
 80029f0:	89bb      	ldrh	r3, [r7, #12]
 80029f2:	461a      	mov	r2, r3
 80029f4:	2100      	movs	r1, #0
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f80e 	bl	8002a18 <fill_buffer>
    }
  }

  /* Check and manually update if we reached end of buffer */
  in->pos = (pos == in->size) ? 0 : pos;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	899b      	ldrh	r3, [r3, #12]
 8002a00:	89ba      	ldrh	r2, [r7, #12]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d001      	beq.n	8002a0a <check_buffer+0x82>
 8002a06:	89ba      	ldrh	r2, [r7, #12]
 8002a08:	e000      	b.n	8002a0c <check_buffer+0x84>
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	81da      	strh	r2, [r3, #14]
}
 8002a10:	bf00      	nop
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <fill_buffer>:

static void fill_buffer(stdin_t *in, uint16_t pos, uint16_t size)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	460b      	mov	r3, r1
 8002a22:	807b      	strh	r3, [r7, #2]
 8002a24:	4613      	mov	r3, r2
 8002a26:	803b      	strh	r3, [r7, #0]
  if (NULL == in->callback)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d009      	beq.n	8002a44 <fill_buffer+0x2c>
    return;

  in->callback(&in->buffer[pos], size);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6891      	ldr	r1, [r2, #8]
 8002a38:	887a      	ldrh	r2, [r7, #2]
 8002a3a:	440a      	add	r2, r1
 8002a3c:	8839      	ldrh	r1, [r7, #0]
 8002a3e:	4610      	mov	r0, r2
 8002a40:	4798      	blx	r3
 8002a42:	e000      	b.n	8002a46 <fill_buffer+0x2e>
    return;
 8002a44:	bf00      	nop
}
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_MspInit>:

extern DMA_HandleTypeDef hdma_usart2_rx;


void HAL_MspInit(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	607b      	str	r3, [r7, #4]
 8002a56:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <HAL_MspInit+0x4c>)
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	4a0f      	ldr	r2, [pc, #60]	; (8002a98 <HAL_MspInit+0x4c>)
 8002a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a60:	6453      	str	r3, [r2, #68]	; 0x44
 8002a62:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <HAL_MspInit+0x4c>)
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a6a:	607b      	str	r3, [r7, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	603b      	str	r3, [r7, #0]
 8002a72:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <HAL_MspInit+0x4c>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	4a08      	ldr	r2, [pc, #32]	; (8002a98 <HAL_MspInit+0x4c>)
 8002a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a7e:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <HAL_MspInit+0x4c>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a86:	603b      	str	r3, [r7, #0]
 8002a88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002a8a:	2007      	movs	r0, #7
 8002a8c:	f000 fb86 	bl	800319c <HAL_NVIC_SetPriorityGrouping>
}
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40023800 	.word	0x40023800

08002a9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08a      	sub	sp, #40	; 0x28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa4:	f107 0314 	add.w	r3, r7, #20
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	60da      	str	r2, [r3, #12]
 8002ab2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a34      	ldr	r2, [pc, #208]	; (8002b8c <HAL_UART_MspInit+0xf0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d162      	bne.n	8002b84 <HAL_UART_MspInit+0xe8>
  {
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	613b      	str	r3, [r7, #16]
 8002ac2:	4b33      	ldr	r3, [pc, #204]	; (8002b90 <HAL_UART_MspInit+0xf4>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	4a32      	ldr	r2, [pc, #200]	; (8002b90 <HAL_UART_MspInit+0xf4>)
 8002ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002acc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ace:	4b30      	ldr	r3, [pc, #192]	; (8002b90 <HAL_UART_MspInit+0xf4>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad6:	613b      	str	r3, [r7, #16]
 8002ad8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	4b2c      	ldr	r3, [pc, #176]	; (8002b90 <HAL_UART_MspInit+0xf4>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	4a2b      	ldr	r2, [pc, #172]	; (8002b90 <HAL_UART_MspInit+0xf4>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aea:	4b29      	ldr	r3, [pc, #164]	; (8002b90 <HAL_UART_MspInit+0xf4>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin 		= USART_TX_Pin|USART_RX_Pin;
 8002af6:	230c      	movs	r3, #12
 8002af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 8002afa:	2302      	movs	r3, #2
 8002afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 8002b02:	2303      	movs	r3, #3
 8002b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate 	= GPIO_AF7_USART2;
 8002b06:	2307      	movs	r3, #7
 8002b08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b0a:	f107 0314 	add.w	r3, r7, #20
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4820      	ldr	r0, [pc, #128]	; (8002b94 <HAL_UART_MspInit+0xf8>)
 8002b12:	f000 ff95 	bl	8003a40 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance 				= DMA1_Stream5;
 8002b16:	4b20      	ldr	r3, [pc, #128]	; (8002b98 <HAL_UART_MspInit+0xfc>)
 8002b18:	4a20      	ldr	r2, [pc, #128]	; (8002b9c <HAL_UART_MspInit+0x100>)
 8002b1a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel 			= DMA_CHANNEL_4;
 8002b1c:	4b1e      	ldr	r3, [pc, #120]	; (8002b98 <HAL_UART_MspInit+0xfc>)
 8002b1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b22:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction 			= DMA_PERIPH_TO_MEMORY;
 8002b24:	4b1c      	ldr	r3, [pc, #112]	; (8002b98 <HAL_UART_MspInit+0xfc>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8002b2a:	4b1b      	ldr	r3, [pc, #108]	; (8002b98 <HAL_UART_MspInit+0xfc>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8002b30:	4b19      	ldr	r3, [pc, #100]	; (8002b98 <HAL_UART_MspInit+0xfc>)
 8002b32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b36:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b38:	4b17      	ldr	r3, [pc, #92]	; (8002b98 <HAL_UART_MspInit+0xfc>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8002b3e:	4b16      	ldr	r3, [pc, #88]	; (8002b98 <HAL_UART_MspInit+0xfc>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode 				= DMA_CIRCULAR;
 8002b44:	4b14      	ldr	r3, [pc, #80]	; (8002b98 <HAL_UART_MspInit+0xfc>)
 8002b46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b4a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority 			= DMA_PRIORITY_LOW;
 8002b4c:	4b12      	ldr	r3, [pc, #72]	; (8002b98 <HAL_UART_MspInit+0xfc>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 8002b52:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <HAL_UART_MspInit+0xfc>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002b58:	480f      	ldr	r0, [pc, #60]	; (8002b98 <HAL_UART_MspInit+0xfc>)
 8002b5a:	f000 fb61 	bl	8003220 <HAL_DMA_Init>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002b64:	f7fe fac8 	bl	80010f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a0b      	ldr	r2, [pc, #44]	; (8002b98 <HAL_UART_MspInit+0xfc>)
 8002b6c:	639a      	str	r2, [r3, #56]	; 0x38
 8002b6e:	4a0a      	ldr	r2, [pc, #40]	; (8002b98 <HAL_UART_MspInit+0xfc>)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b74:	2200      	movs	r2, #0
 8002b76:	2100      	movs	r1, #0
 8002b78:	2026      	movs	r0, #38	; 0x26
 8002b7a:	f000 fb1a 	bl	80031b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b7e:	2026      	movs	r0, #38	; 0x26
 8002b80:	f000 fb33 	bl	80031ea <HAL_NVIC_EnableIRQ>
  }

}
 8002b84:	bf00      	nop
 8002b86:	3728      	adds	r7, #40	; 0x28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40004400 	.word	0x40004400
 8002b90:	40023800 	.word	0x40023800
 8002b94:	40020000 	.word	0x40020000
 8002b98:	20000198 	.word	0x20000198
 8002b9c:	40026088 	.word	0x40026088

08002ba0 <HAL_I2C_MspInit>:
  *           - NVIC configuration for DMA interrupt request enable
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08a      	sub	sp, #40	; 0x28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /*##-1- Enable GPIO Clocks #################################################*/
  /* Enable GPIO TX/RX clock */
  I2Cx_SCL_GPIO_CLK_ENABLE();
 8002ba8:	2300      	movs	r3, #0
 8002baa:	613b      	str	r3, [r7, #16]
 8002bac:	4b2b      	ldr	r3, [pc, #172]	; (8002c5c <HAL_I2C_MspInit+0xbc>)
 8002bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb0:	4a2a      	ldr	r2, [pc, #168]	; (8002c5c <HAL_I2C_MspInit+0xbc>)
 8002bb2:	f043 0302 	orr.w	r3, r3, #2
 8002bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb8:	4b28      	ldr	r3, [pc, #160]	; (8002c5c <HAL_I2C_MspInit+0xbc>)
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	693b      	ldr	r3, [r7, #16]
  I2Cx_SDA_GPIO_CLK_ENABLE();
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	4b24      	ldr	r3, [pc, #144]	; (8002c5c <HAL_I2C_MspInit+0xbc>)
 8002bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bcc:	4a23      	ldr	r2, [pc, #140]	; (8002c5c <HAL_I2C_MspInit+0xbc>)
 8002bce:	f043 0302 	orr.w	r3, r3, #2
 8002bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd4:	4b21      	ldr	r3, [pc, #132]	; (8002c5c <HAL_I2C_MspInit+0xbc>)
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* I2C TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
 8002be0:	2340      	movs	r3, #64	; 0x40
 8002be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8002be4:	2312      	movs	r3, #18
 8002be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8002be8:	2301      	movs	r3, #1
 8002bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8002bec:	2302      	movs	r3, #2
 8002bee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
 8002bf0:	2304      	movs	r3, #4
 8002bf2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002bf4:	f107 0314 	add.w	r3, r7, #20
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4819      	ldr	r0, [pc, #100]	; (8002c60 <HAL_I2C_MspInit+0xc0>)
 8002bfc:	f000 ff20 	bl	8003a40 <HAL_GPIO_Init>

  /* I2C RX GPIO pin configuration  */
  GPIO_InitStruct.Pin 		= I2Cx_SDA_PIN;
 8002c00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = I2Cx_SDA_AF;
 8002c06:	2304      	movs	r3, #4
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002c0a:	f107 0314 	add.w	r3, r7, #20
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4813      	ldr	r0, [pc, #76]	; (8002c60 <HAL_I2C_MspInit+0xc0>)
 8002c12:	f000 ff15 	bl	8003a40 <HAL_GPIO_Init>

  /*##-3- Enable I2C peripheral Clock ########################################*/
  /* Enable I2C1 clock */
  I2Cx_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	60bb      	str	r3, [r7, #8]
 8002c1a:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <HAL_I2C_MspInit+0xbc>)
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	4a0f      	ldr	r2, [pc, #60]	; (8002c5c <HAL_I2C_MspInit+0xbc>)
 8002c20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c24:	6413      	str	r3, [r2, #64]	; 0x40
 8002c26:	4b0d      	ldr	r3, [pc, #52]	; (8002c5c <HAL_I2C_MspInit+0xbc>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c2e:	60bb      	str	r3, [r7, #8]
 8002c30:	68bb      	ldr	r3, [r7, #8]

  /*##-4- Configure the NVIC for I2C #########################################*/
  /* NVIC for I2C1 */
  HAL_NVIC_SetPriority(I2Cx_ER_IRQn, 1, 0);
 8002c32:	2200      	movs	r2, #0
 8002c34:	2101      	movs	r1, #1
 8002c36:	2020      	movs	r0, #32
 8002c38:	f000 fabb 	bl	80031b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2Cx_ER_IRQn);
 8002c3c:	2020      	movs	r0, #32
 8002c3e:	f000 fad4 	bl	80031ea <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(I2Cx_EV_IRQn, 2, 0);
 8002c42:	2200      	movs	r2, #0
 8002c44:	2102      	movs	r1, #2
 8002c46:	201f      	movs	r0, #31
 8002c48:	f000 fab3 	bl	80031b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2Cx_EV_IRQn);
 8002c4c:	201f      	movs	r0, #31
 8002c4e:	f000 facc 	bl	80031ea <HAL_NVIC_EnableIRQ>
}
 8002c52:	bf00      	nop
 8002c54:	3728      	adds	r7, #40	; 0x28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	40020400 	.word	0x40020400

08002c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  while (1)
 8002c68:	e7fe      	b.n	8002c68 <NMI_Handler+0x4>

08002c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	af00      	add	r7, sp, #0
  while (1)
 8002c6e:	e7fe      	b.n	8002c6e <HardFault_Handler+0x4>

08002c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  while (1)
 8002c74:	e7fe      	b.n	8002c74 <MemManage_Handler+0x4>

08002c76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c76:	b480      	push	{r7}
 8002c78:	af00      	add	r7, sp, #0
  while (1)
 8002c7a:	e7fe      	b.n	8002c7a <BusFault_Handler+0x4>

08002c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  while (1)
 8002c80:	e7fe      	b.n	8002c80 <UsageFault_Handler+0x4>

08002c82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c82:	b480      	push	{r7}
 8002c84:	af00      	add	r7, sp, #0

}
 8002c86:	bf00      	nop
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0

}
 8002c94:	bf00      	nop
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	af00      	add	r7, sp, #0

}
 8002ca2:	bf00      	nop
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8002cb0:	f000 f960 	bl	8002f74 <HAL_IncTick>
}
 8002cb4:	bf00      	nop
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002cbc:	4803      	ldr	r0, [pc, #12]	; (8002ccc <DMA1_Stream5_IRQHandler+0x14>)
 8002cbe:	f000 fc47 	bl	8003550 <HAL_DMA_IRQHandler>
  serial_handlerDMA();
 8002cc2:	f7fe fa51 	bl	8001168 <serial_handlerDMA>
}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	20000198 	.word	0x20000198

08002cd0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 8002cd4:	4803      	ldr	r0, [pc, #12]	; (8002ce4 <USART2_IRQHandler+0x14>)
 8002cd6:	f003 ff21 	bl	8006b1c <HAL_UART_IRQHandler>
	serial_handlerUART();
 8002cda:	f7fe fa3b 	bl	8001154 <serial_handlerUART>
}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	20000154 	.word	0x20000154

08002ce8 <I2C1_EV_IRQHandler>:
  * @param  None
  * @retval None
  * @Note   This function is redefined in "main.h" and related to I2C data transmission
  */
void I2Cx_EV_IRQHandler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(& I2cHandle);
 8002cec:	4802      	ldr	r0, [pc, #8]	; (8002cf8 <I2C1_EV_IRQHandler+0x10>)
 8002cee:	f001 fb07 	bl	8004300 <HAL_I2C_EV_IRQHandler>
}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	200001f8 	.word	0x200001f8

08002cfc <I2C1_ER_IRQHandler>:
  * @param  None
  * @retval None
  * @Note   This function is redefined in "main.h" and related to I2C error
  */
void I2Cx_ER_IRQHandler(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(& I2cHandle);
 8002d00:	4802      	ldr	r0, [pc, #8]	; (8002d0c <I2C1_ER_IRQHandler+0x10>)
 8002d02:	f001 fc6a 	bl	80045da <HAL_I2C_ER_IRQHandler>
}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	200001f8 	.word	0x200001f8

08002d10 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	e00a      	b.n	8002d38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d22:	f3af 8000 	nop.w
 8002d26:	4601      	mov	r1, r0
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	1c5a      	adds	r2, r3, #1
 8002d2c:	60ba      	str	r2, [r7, #8]
 8002d2e:	b2ca      	uxtb	r2, r1
 8002d30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	3301      	adds	r3, #1
 8002d36:	617b      	str	r3, [r7, #20]
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	dbf0      	blt.n	8002d22 <_read+0x12>
	}

return len;
 8002d40:	687b      	ldr	r3, [r7, #4]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3718      	adds	r7, #24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b086      	sub	sp, #24
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	e009      	b.n	8002d70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	1c5a      	adds	r2, r3, #1
 8002d60:	60ba      	str	r2, [r7, #8]
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fd fc2d 	bl	80005c4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	dbf1      	blt.n	8002d5c <_write+0x12>
	}
	return len;
 8002d78:	687b      	ldr	r3, [r7, #4]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <_close>:

int _close(int file)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
	return -1;
 8002d8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002daa:	605a      	str	r2, [r3, #4]
	return 0;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <_isatty>:

int _isatty(int file)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
	return 1;
 8002dc2:	2301      	movs	r3, #1
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
	return 0;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
	...

08002dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002df4:	4a14      	ldr	r2, [pc, #80]	; (8002e48 <_sbrk+0x5c>)
 8002df6:	4b15      	ldr	r3, [pc, #84]	; (8002e4c <_sbrk+0x60>)
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e00:	4b13      	ldr	r3, [pc, #76]	; (8002e50 <_sbrk+0x64>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d102      	bne.n	8002e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e08:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <_sbrk+0x64>)
 8002e0a:	4a12      	ldr	r2, [pc, #72]	; (8002e54 <_sbrk+0x68>)
 8002e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e0e:	4b10      	ldr	r3, [pc, #64]	; (8002e50 <_sbrk+0x64>)
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4413      	add	r3, r2
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d207      	bcs.n	8002e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e1c:	f004 ff6e 	bl	8007cfc <__errno>
 8002e20:	4603      	mov	r3, r0
 8002e22:	220c      	movs	r2, #12
 8002e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e26:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2a:	e009      	b.n	8002e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e2c:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <_sbrk+0x64>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e32:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <_sbrk+0x64>)
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4413      	add	r3, r2
 8002e3a:	4a05      	ldr	r2, [pc, #20]	; (8002e50 <_sbrk+0x64>)
 8002e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3718      	adds	r7, #24
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	20020000 	.word	0x20020000
 8002e4c:	00000400 	.word	0x00000400
 8002e50:	20000390 	.word	0x20000390
 8002e54:	200003a8 	.word	0x200003a8

08002e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e5c:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <SystemInit+0x20>)
 8002e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e62:	4a05      	ldr	r2, [pc, #20]	; (8002e78 <SystemInit+0x20>)
 8002e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	e000ed00 	.word	0xe000ed00

08002e7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002eb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e80:	480d      	ldr	r0, [pc, #52]	; (8002eb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e82:	490e      	ldr	r1, [pc, #56]	; (8002ebc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e84:	4a0e      	ldr	r2, [pc, #56]	; (8002ec0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e88:	e002      	b.n	8002e90 <LoopCopyDataInit>

08002e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e8e:	3304      	adds	r3, #4

08002e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e94:	d3f9      	bcc.n	8002e8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e96:	4a0b      	ldr	r2, [pc, #44]	; (8002ec4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e98:	4c0b      	ldr	r4, [pc, #44]	; (8002ec8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e9c:	e001      	b.n	8002ea2 <LoopFillZerobss>

08002e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ea0:	3204      	adds	r2, #4

08002ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ea4:	d3fb      	bcc.n	8002e9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ea6:	f7ff ffd7 	bl	8002e58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eaa:	f004 ff2d 	bl	8007d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eae:	f7fd fb9b 	bl	80005e8 <main>
  bx  lr    
 8002eb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002eb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ebc:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 8002ec0:	08009410 	.word	0x08009410
  ldr r2, =_sbss
 8002ec4:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 8002ec8:	200003a8 	.word	0x200003a8

08002ecc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ecc:	e7fe      	b.n	8002ecc <ADC_IRQHandler>
	...

08002ed0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ed4:	4b0e      	ldr	r3, [pc, #56]	; (8002f10 <HAL_Init+0x40>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a0d      	ldr	r2, [pc, #52]	; (8002f10 <HAL_Init+0x40>)
 8002eda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ede:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <HAL_Init+0x40>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a0a      	ldr	r2, [pc, #40]	; (8002f10 <HAL_Init+0x40>)
 8002ee6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002eec:	4b08      	ldr	r3, [pc, #32]	; (8002f10 <HAL_Init+0x40>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a07      	ldr	r2, [pc, #28]	; (8002f10 <HAL_Init+0x40>)
 8002ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ef8:	2003      	movs	r0, #3
 8002efa:	f000 f94f 	bl	800319c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002efe:	2000      	movs	r0, #0
 8002f00:	f000 f808 	bl	8002f14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f04:	f7ff fda2 	bl	8002a4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40023c00 	.word	0x40023c00

08002f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f1c:	4b12      	ldr	r3, [pc, #72]	; (8002f68 <HAL_InitTick+0x54>)
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	4b12      	ldr	r3, [pc, #72]	; (8002f6c <HAL_InitTick+0x58>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	4619      	mov	r1, r3
 8002f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 f967 	bl	8003206 <HAL_SYSTICK_Config>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e00e      	b.n	8002f60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b0f      	cmp	r3, #15
 8002f46:	d80a      	bhi.n	8002f5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f48:	2200      	movs	r2, #0
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f50:	f000 f92f 	bl	80031b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f54:	4a06      	ldr	r2, [pc, #24]	; (8002f70 <HAL_InitTick+0x5c>)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e000      	b.n	8002f60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	200000c8 	.word	0x200000c8
 8002f6c:	200000d0 	.word	0x200000d0
 8002f70:	200000cc 	.word	0x200000cc

08002f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f78:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_IncTick+0x20>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <HAL_IncTick+0x24>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4413      	add	r3, r2
 8002f84:	4a04      	ldr	r2, [pc, #16]	; (8002f98 <HAL_IncTick+0x24>)
 8002f86:	6013      	str	r3, [r2, #0]
}
 8002f88:	bf00      	nop
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	200000d0 	.word	0x200000d0
 8002f98:	20000394 	.word	0x20000394

08002f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002fa0:	4b03      	ldr	r3, [pc, #12]	; (8002fb0 <HAL_GetTick+0x14>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	20000394 	.word	0x20000394

08002fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fbc:	f7ff ffee 	bl	8002f9c <HAL_GetTick>
 8002fc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fcc:	d005      	beq.n	8002fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fce:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <HAL_Delay+0x44>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fda:	bf00      	nop
 8002fdc:	f7ff ffde 	bl	8002f9c <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d8f7      	bhi.n	8002fdc <HAL_Delay+0x28>
  {
  }
}
 8002fec:	bf00      	nop
 8002fee:	bf00      	nop
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	200000d0 	.word	0x200000d0

08002ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800300c:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <__NVIC_SetPriorityGrouping+0x44>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003018:	4013      	ands	r3, r2
 800301a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003024:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800302c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800302e:	4a04      	ldr	r2, [pc, #16]	; (8003040 <__NVIC_SetPriorityGrouping+0x44>)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	60d3      	str	r3, [r2, #12]
}
 8003034:	bf00      	nop
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	e000ed00 	.word	0xe000ed00

08003044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003048:	4b04      	ldr	r3, [pc, #16]	; (800305c <__NVIC_GetPriorityGrouping+0x18>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	0a1b      	lsrs	r3, r3, #8
 800304e:	f003 0307 	and.w	r3, r3, #7
}
 8003052:	4618      	mov	r0, r3
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800306a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306e:	2b00      	cmp	r3, #0
 8003070:	db0b      	blt.n	800308a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003072:	79fb      	ldrb	r3, [r7, #7]
 8003074:	f003 021f 	and.w	r2, r3, #31
 8003078:	4907      	ldr	r1, [pc, #28]	; (8003098 <__NVIC_EnableIRQ+0x38>)
 800307a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307e:	095b      	lsrs	r3, r3, #5
 8003080:	2001      	movs	r0, #1
 8003082:	fa00 f202 	lsl.w	r2, r0, r2
 8003086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	e000e100 	.word	0xe000e100

0800309c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	6039      	str	r1, [r7, #0]
 80030a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	db0a      	blt.n	80030c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	490c      	ldr	r1, [pc, #48]	; (80030e8 <__NVIC_SetPriority+0x4c>)
 80030b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ba:	0112      	lsls	r2, r2, #4
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	440b      	add	r3, r1
 80030c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030c4:	e00a      	b.n	80030dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	4908      	ldr	r1, [pc, #32]	; (80030ec <__NVIC_SetPriority+0x50>)
 80030cc:	79fb      	ldrb	r3, [r7, #7]
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	3b04      	subs	r3, #4
 80030d4:	0112      	lsls	r2, r2, #4
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	440b      	add	r3, r1
 80030da:	761a      	strb	r2, [r3, #24]
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	e000e100 	.word	0xe000e100
 80030ec:	e000ed00 	.word	0xe000ed00

080030f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b089      	sub	sp, #36	; 0x24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	f1c3 0307 	rsb	r3, r3, #7
 800310a:	2b04      	cmp	r3, #4
 800310c:	bf28      	it	cs
 800310e:	2304      	movcs	r3, #4
 8003110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	3304      	adds	r3, #4
 8003116:	2b06      	cmp	r3, #6
 8003118:	d902      	bls.n	8003120 <NVIC_EncodePriority+0x30>
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	3b03      	subs	r3, #3
 800311e:	e000      	b.n	8003122 <NVIC_EncodePriority+0x32>
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003124:	f04f 32ff 	mov.w	r2, #4294967295
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43da      	mvns	r2, r3
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	401a      	ands	r2, r3
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003138:	f04f 31ff 	mov.w	r1, #4294967295
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	fa01 f303 	lsl.w	r3, r1, r3
 8003142:	43d9      	mvns	r1, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003148:	4313      	orrs	r3, r2
         );
}
 800314a:	4618      	mov	r0, r3
 800314c:	3724      	adds	r7, #36	; 0x24
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
	...

08003158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3b01      	subs	r3, #1
 8003164:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003168:	d301      	bcc.n	800316e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800316a:	2301      	movs	r3, #1
 800316c:	e00f      	b.n	800318e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800316e:	4a0a      	ldr	r2, [pc, #40]	; (8003198 <SysTick_Config+0x40>)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3b01      	subs	r3, #1
 8003174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003176:	210f      	movs	r1, #15
 8003178:	f04f 30ff 	mov.w	r0, #4294967295
 800317c:	f7ff ff8e 	bl	800309c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003180:	4b05      	ldr	r3, [pc, #20]	; (8003198 <SysTick_Config+0x40>)
 8003182:	2200      	movs	r2, #0
 8003184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003186:	4b04      	ldr	r3, [pc, #16]	; (8003198 <SysTick_Config+0x40>)
 8003188:	2207      	movs	r2, #7
 800318a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	e000e010 	.word	0xe000e010

0800319c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7ff ff29 	bl	8002ffc <__NVIC_SetPriorityGrouping>
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b086      	sub	sp, #24
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	4603      	mov	r3, r0
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	607a      	str	r2, [r7, #4]
 80031be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031c4:	f7ff ff3e 	bl	8003044 <__NVIC_GetPriorityGrouping>
 80031c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	68b9      	ldr	r1, [r7, #8]
 80031ce:	6978      	ldr	r0, [r7, #20]
 80031d0:	f7ff ff8e 	bl	80030f0 <NVIC_EncodePriority>
 80031d4:	4602      	mov	r2, r0
 80031d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031da:	4611      	mov	r1, r2
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff ff5d 	bl	800309c <__NVIC_SetPriority>
}
 80031e2:	bf00      	nop
 80031e4:	3718      	adds	r7, #24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	4603      	mov	r3, r0
 80031f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff ff31 	bl	8003060 <__NVIC_EnableIRQ>
}
 80031fe:	bf00      	nop
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b082      	sub	sp, #8
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7ff ffa2 	bl	8003158 <SysTick_Config>
 8003214:	4603      	mov	r3, r0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
	...

08003220 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800322c:	f7ff feb6 	bl	8002f9c <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e099      	b.n	8003370 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0201 	bic.w	r2, r2, #1
 800325a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800325c:	e00f      	b.n	800327e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800325e:	f7ff fe9d 	bl	8002f9c <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b05      	cmp	r3, #5
 800326a:	d908      	bls.n	800327e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2220      	movs	r2, #32
 8003270:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2203      	movs	r2, #3
 8003276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e078      	b.n	8003370 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1e8      	bne.n	800325e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	4b38      	ldr	r3, [pc, #224]	; (8003378 <HAL_DMA_Init+0x158>)
 8003298:	4013      	ands	r3, r2
 800329a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	d107      	bne.n	80032e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	4313      	orrs	r3, r2
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f023 0307 	bic.w	r3, r3, #7
 80032fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	4313      	orrs	r3, r2
 8003308:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	2b04      	cmp	r3, #4
 8003310:	d117      	bne.n	8003342 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	4313      	orrs	r3, r2
 800331a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00e      	beq.n	8003342 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 fb0f 	bl	8003948 <DMA_CheckFifoParam>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2240      	movs	r2, #64	; 0x40
 8003334:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800333e:	2301      	movs	r3, #1
 8003340:	e016      	b.n	8003370 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 fac6 	bl	80038dc <DMA_CalcBaseAndBitshift>
 8003350:	4603      	mov	r3, r0
 8003352:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003358:	223f      	movs	r2, #63	; 0x3f
 800335a:	409a      	lsls	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	f010803f 	.word	0xf010803f

0800337c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
 8003388:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800338a:	2300      	movs	r3, #0
 800338c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003392:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_DMA_Start_IT+0x26>
 800339e:	2302      	movs	r3, #2
 80033a0:	e040      	b.n	8003424 <HAL_DMA_Start_IT+0xa8>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d12f      	bne.n	8003416 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2202      	movs	r2, #2
 80033ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	68b9      	ldr	r1, [r7, #8]
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 fa58 	bl	8003880 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d4:	223f      	movs	r2, #63	; 0x3f
 80033d6:	409a      	lsls	r2, r3
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0216 	orr.w	r2, r2, #22
 80033ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d007      	beq.n	8003404 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0208 	orr.w	r2, r2, #8
 8003402:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f042 0201 	orr.w	r2, r2, #1
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	e005      	b.n	8003422 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800341e:	2302      	movs	r3, #2
 8003420:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003422:	7dfb      	ldrb	r3, [r7, #23]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3718      	adds	r7, #24
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003438:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800343a:	f7ff fdaf 	bl	8002f9c <HAL_GetTick>
 800343e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d008      	beq.n	800345e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2280      	movs	r2, #128	; 0x80
 8003450:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e052      	b.n	8003504 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0216 	bic.w	r2, r2, #22
 800346c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	695a      	ldr	r2, [r3, #20]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800347c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	2b00      	cmp	r3, #0
 8003484:	d103      	bne.n	800348e <HAL_DMA_Abort+0x62>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800348a:	2b00      	cmp	r3, #0
 800348c:	d007      	beq.n	800349e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 0208 	bic.w	r2, r2, #8
 800349c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0201 	bic.w	r2, r2, #1
 80034ac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034ae:	e013      	b.n	80034d8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034b0:	f7ff fd74 	bl	8002f9c <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b05      	cmp	r3, #5
 80034bc:	d90c      	bls.n	80034d8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2220      	movs	r2, #32
 80034c2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2203      	movs	r2, #3
 80034c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e015      	b.n	8003504 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1e4      	bne.n	80034b0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ea:	223f      	movs	r2, #63	; 0x3f
 80034ec:	409a      	lsls	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d004      	beq.n	800352a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2280      	movs	r2, #128	; 0x80
 8003524:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e00c      	b.n	8003544 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2205      	movs	r2, #5
 800352e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0201 	bic.w	r2, r2, #1
 8003540:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800355c:	4b8e      	ldr	r3, [pc, #568]	; (8003798 <HAL_DMA_IRQHandler+0x248>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a8e      	ldr	r2, [pc, #568]	; (800379c <HAL_DMA_IRQHandler+0x24c>)
 8003562:	fba2 2303 	umull	r2, r3, r2, r3
 8003566:	0a9b      	lsrs	r3, r3, #10
 8003568:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357a:	2208      	movs	r2, #8
 800357c:	409a      	lsls	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	4013      	ands	r3, r2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d01a      	beq.n	80035bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d013      	beq.n	80035bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0204 	bic.w	r2, r2, #4
 80035a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a8:	2208      	movs	r2, #8
 80035aa:	409a      	lsls	r2, r3
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b4:	f043 0201 	orr.w	r2, r3, #1
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c0:	2201      	movs	r2, #1
 80035c2:	409a      	lsls	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4013      	ands	r3, r2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d012      	beq.n	80035f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00b      	beq.n	80035f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035de:	2201      	movs	r2, #1
 80035e0:	409a      	lsls	r2, r3
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ea:	f043 0202 	orr.w	r2, r3, #2
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f6:	2204      	movs	r2, #4
 80035f8:	409a      	lsls	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	4013      	ands	r3, r2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d012      	beq.n	8003628 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00b      	beq.n	8003628 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003614:	2204      	movs	r2, #4
 8003616:	409a      	lsls	r2, r3
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003620:	f043 0204 	orr.w	r2, r3, #4
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362c:	2210      	movs	r2, #16
 800362e:	409a      	lsls	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4013      	ands	r3, r2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d043      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	2b00      	cmp	r3, #0
 8003644:	d03c      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364a:	2210      	movs	r2, #16
 800364c:	409a      	lsls	r2, r3
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d018      	beq.n	8003692 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d108      	bne.n	8003680 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	2b00      	cmp	r3, #0
 8003674:	d024      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	4798      	blx	r3
 800367e:	e01f      	b.n	80036c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003684:	2b00      	cmp	r3, #0
 8003686:	d01b      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	4798      	blx	r3
 8003690:	e016      	b.n	80036c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369c:	2b00      	cmp	r3, #0
 800369e:	d107      	bne.n	80036b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0208 	bic.w	r2, r2, #8
 80036ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c4:	2220      	movs	r2, #32
 80036c6:	409a      	lsls	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4013      	ands	r3, r2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 808f 	beq.w	80037f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0310 	and.w	r3, r3, #16
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 8087 	beq.w	80037f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e6:	2220      	movs	r2, #32
 80036e8:	409a      	lsls	r2, r3
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b05      	cmp	r3, #5
 80036f8:	d136      	bne.n	8003768 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0216 	bic.w	r2, r2, #22
 8003708:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	695a      	ldr	r2, [r3, #20]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003718:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	2b00      	cmp	r3, #0
 8003720:	d103      	bne.n	800372a <HAL_DMA_IRQHandler+0x1da>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003726:	2b00      	cmp	r3, #0
 8003728:	d007      	beq.n	800373a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0208 	bic.w	r2, r2, #8
 8003738:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373e:	223f      	movs	r2, #63	; 0x3f
 8003740:	409a      	lsls	r2, r3
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800375a:	2b00      	cmp	r3, #0
 800375c:	d07e      	beq.n	800385c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	4798      	blx	r3
        }
        return;
 8003766:	e079      	b.n	800385c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d01d      	beq.n	80037b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10d      	bne.n	80037a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003788:	2b00      	cmp	r3, #0
 800378a:	d031      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	4798      	blx	r3
 8003794:	e02c      	b.n	80037f0 <HAL_DMA_IRQHandler+0x2a0>
 8003796:	bf00      	nop
 8003798:	200000c8 	.word	0x200000c8
 800379c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d023      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	4798      	blx	r3
 80037b0:	e01e      	b.n	80037f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10f      	bne.n	80037e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0210 	bic.w	r2, r2, #16
 80037ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d003      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d032      	beq.n	800385e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b00      	cmp	r3, #0
 8003802:	d022      	beq.n	800384a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2205      	movs	r2, #5
 8003808:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0201 	bic.w	r2, r2, #1
 800381a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	3301      	adds	r3, #1
 8003820:	60bb      	str	r3, [r7, #8]
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	429a      	cmp	r2, r3
 8003826:	d307      	bcc.n	8003838 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1f2      	bne.n	800381c <HAL_DMA_IRQHandler+0x2cc>
 8003836:	e000      	b.n	800383a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003838:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800384e:	2b00      	cmp	r3, #0
 8003850:	d005      	beq.n	800385e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	4798      	blx	r3
 800385a:	e000      	b.n	800385e <HAL_DMA_IRQHandler+0x30e>
        return;
 800385c:	bf00      	nop
    }
  }
}
 800385e:	3718      	adds	r7, #24
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003872:	b2db      	uxtb	r3, r3
}
 8003874:	4618      	mov	r0, r3
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
 800388c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800389c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	2b40      	cmp	r3, #64	; 0x40
 80038ac:	d108      	bne.n	80038c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80038be:	e007      	b.n	80038d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	60da      	str	r2, [r3, #12]
}
 80038d0:	bf00      	nop
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	3b10      	subs	r3, #16
 80038ec:	4a14      	ldr	r2, [pc, #80]	; (8003940 <DMA_CalcBaseAndBitshift+0x64>)
 80038ee:	fba2 2303 	umull	r2, r3, r2, r3
 80038f2:	091b      	lsrs	r3, r3, #4
 80038f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038f6:	4a13      	ldr	r2, [pc, #76]	; (8003944 <DMA_CalcBaseAndBitshift+0x68>)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4413      	add	r3, r2
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	461a      	mov	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2b03      	cmp	r3, #3
 8003908:	d909      	bls.n	800391e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003912:	f023 0303 	bic.w	r3, r3, #3
 8003916:	1d1a      	adds	r2, r3, #4
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	659a      	str	r2, [r3, #88]	; 0x58
 800391c:	e007      	b.n	800392e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003926:	f023 0303 	bic.w	r3, r3, #3
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003932:	4618      	mov	r0, r3
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	aaaaaaab 	.word	0xaaaaaaab
 8003944:	08009360 	.word	0x08009360

08003948 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003950:	2300      	movs	r3, #0
 8003952:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003958:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d11f      	bne.n	80039a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	2b03      	cmp	r3, #3
 8003966:	d856      	bhi.n	8003a16 <DMA_CheckFifoParam+0xce>
 8003968:	a201      	add	r2, pc, #4	; (adr r2, 8003970 <DMA_CheckFifoParam+0x28>)
 800396a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396e:	bf00      	nop
 8003970:	08003981 	.word	0x08003981
 8003974:	08003993 	.word	0x08003993
 8003978:	08003981 	.word	0x08003981
 800397c:	08003a17 	.word	0x08003a17
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003984:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d046      	beq.n	8003a1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003990:	e043      	b.n	8003a1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003996:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800399a:	d140      	bne.n	8003a1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039a0:	e03d      	b.n	8003a1e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039aa:	d121      	bne.n	80039f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	2b03      	cmp	r3, #3
 80039b0:	d837      	bhi.n	8003a22 <DMA_CheckFifoParam+0xda>
 80039b2:	a201      	add	r2, pc, #4	; (adr r2, 80039b8 <DMA_CheckFifoParam+0x70>)
 80039b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b8:	080039c9 	.word	0x080039c9
 80039bc:	080039cf 	.word	0x080039cf
 80039c0:	080039c9 	.word	0x080039c9
 80039c4:	080039e1 	.word	0x080039e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	73fb      	strb	r3, [r7, #15]
      break;
 80039cc:	e030      	b.n	8003a30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d025      	beq.n	8003a26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039de:	e022      	b.n	8003a26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039e8:	d11f      	bne.n	8003a2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039ee:	e01c      	b.n	8003a2a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d903      	bls.n	80039fe <DMA_CheckFifoParam+0xb6>
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2b03      	cmp	r3, #3
 80039fa:	d003      	beq.n	8003a04 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039fc:	e018      	b.n	8003a30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	73fb      	strb	r3, [r7, #15]
      break;
 8003a02:	e015      	b.n	8003a30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00e      	beq.n	8003a2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	73fb      	strb	r3, [r7, #15]
      break;
 8003a14:	e00b      	b.n	8003a2e <DMA_CheckFifoParam+0xe6>
      break;
 8003a16:	bf00      	nop
 8003a18:	e00a      	b.n	8003a30 <DMA_CheckFifoParam+0xe8>
      break;
 8003a1a:	bf00      	nop
 8003a1c:	e008      	b.n	8003a30 <DMA_CheckFifoParam+0xe8>
      break;
 8003a1e:	bf00      	nop
 8003a20:	e006      	b.n	8003a30 <DMA_CheckFifoParam+0xe8>
      break;
 8003a22:	bf00      	nop
 8003a24:	e004      	b.n	8003a30 <DMA_CheckFifoParam+0xe8>
      break;
 8003a26:	bf00      	nop
 8003a28:	e002      	b.n	8003a30 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a2a:	bf00      	nop
 8003a2c:	e000      	b.n	8003a30 <DMA_CheckFifoParam+0xe8>
      break;
 8003a2e:	bf00      	nop
    }
  } 
  
  return status; 
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop

08003a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b089      	sub	sp, #36	; 0x24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a56:	2300      	movs	r3, #0
 8003a58:	61fb      	str	r3, [r7, #28]
 8003a5a:	e165      	b.n	8003d28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	f040 8154 	bne.w	8003d22 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d005      	beq.n	8003a92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d130      	bne.n	8003af4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	2203      	movs	r2, #3
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ac8:	2201      	movs	r2, #1
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	091b      	lsrs	r3, r3, #4
 8003ade:	f003 0201 	and.w	r2, r3, #1
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f003 0303 	and.w	r3, r3, #3
 8003afc:	2b03      	cmp	r3, #3
 8003afe:	d017      	beq.n	8003b30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	2203      	movs	r2, #3
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	43db      	mvns	r3, r3
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	4013      	ands	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f003 0303 	and.w	r3, r3, #3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d123      	bne.n	8003b84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	08da      	lsrs	r2, r3, #3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3208      	adds	r2, #8
 8003b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	220f      	movs	r2, #15
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	691a      	ldr	r2, [r3, #16]
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	08da      	lsrs	r2, r3, #3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3208      	adds	r2, #8
 8003b7e:	69b9      	ldr	r1, [r7, #24]
 8003b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	2203      	movs	r2, #3
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	43db      	mvns	r3, r3
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f003 0203 	and.w	r2, r3, #3
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 80ae 	beq.w	8003d22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60fb      	str	r3, [r7, #12]
 8003bca:	4b5d      	ldr	r3, [pc, #372]	; (8003d40 <HAL_GPIO_Init+0x300>)
 8003bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bce:	4a5c      	ldr	r2, [pc, #368]	; (8003d40 <HAL_GPIO_Init+0x300>)
 8003bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8003bd6:	4b5a      	ldr	r3, [pc, #360]	; (8003d40 <HAL_GPIO_Init+0x300>)
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003be2:	4a58      	ldr	r2, [pc, #352]	; (8003d44 <HAL_GPIO_Init+0x304>)
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	089b      	lsrs	r3, r3, #2
 8003be8:	3302      	adds	r3, #2
 8003bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	220f      	movs	r2, #15
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	43db      	mvns	r3, r3
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4013      	ands	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a4f      	ldr	r2, [pc, #316]	; (8003d48 <HAL_GPIO_Init+0x308>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d025      	beq.n	8003c5a <HAL_GPIO_Init+0x21a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a4e      	ldr	r2, [pc, #312]	; (8003d4c <HAL_GPIO_Init+0x30c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d01f      	beq.n	8003c56 <HAL_GPIO_Init+0x216>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a4d      	ldr	r2, [pc, #308]	; (8003d50 <HAL_GPIO_Init+0x310>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d019      	beq.n	8003c52 <HAL_GPIO_Init+0x212>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a4c      	ldr	r2, [pc, #304]	; (8003d54 <HAL_GPIO_Init+0x314>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d013      	beq.n	8003c4e <HAL_GPIO_Init+0x20e>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a4b      	ldr	r2, [pc, #300]	; (8003d58 <HAL_GPIO_Init+0x318>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00d      	beq.n	8003c4a <HAL_GPIO_Init+0x20a>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a4a      	ldr	r2, [pc, #296]	; (8003d5c <HAL_GPIO_Init+0x31c>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d007      	beq.n	8003c46 <HAL_GPIO_Init+0x206>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a49      	ldr	r2, [pc, #292]	; (8003d60 <HAL_GPIO_Init+0x320>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d101      	bne.n	8003c42 <HAL_GPIO_Init+0x202>
 8003c3e:	2306      	movs	r3, #6
 8003c40:	e00c      	b.n	8003c5c <HAL_GPIO_Init+0x21c>
 8003c42:	2307      	movs	r3, #7
 8003c44:	e00a      	b.n	8003c5c <HAL_GPIO_Init+0x21c>
 8003c46:	2305      	movs	r3, #5
 8003c48:	e008      	b.n	8003c5c <HAL_GPIO_Init+0x21c>
 8003c4a:	2304      	movs	r3, #4
 8003c4c:	e006      	b.n	8003c5c <HAL_GPIO_Init+0x21c>
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e004      	b.n	8003c5c <HAL_GPIO_Init+0x21c>
 8003c52:	2302      	movs	r3, #2
 8003c54:	e002      	b.n	8003c5c <HAL_GPIO_Init+0x21c>
 8003c56:	2301      	movs	r3, #1
 8003c58:	e000      	b.n	8003c5c <HAL_GPIO_Init+0x21c>
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	69fa      	ldr	r2, [r7, #28]
 8003c5e:	f002 0203 	and.w	r2, r2, #3
 8003c62:	0092      	lsls	r2, r2, #2
 8003c64:	4093      	lsls	r3, r2
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c6c:	4935      	ldr	r1, [pc, #212]	; (8003d44 <HAL_GPIO_Init+0x304>)
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	089b      	lsrs	r3, r3, #2
 8003c72:	3302      	adds	r3, #2
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c7a:	4b3a      	ldr	r3, [pc, #232]	; (8003d64 <HAL_GPIO_Init+0x324>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	43db      	mvns	r3, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4013      	ands	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c9e:	4a31      	ldr	r2, [pc, #196]	; (8003d64 <HAL_GPIO_Init+0x324>)
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ca4:	4b2f      	ldr	r3, [pc, #188]	; (8003d64 <HAL_GPIO_Init+0x324>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	43db      	mvns	r3, r3
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d003      	beq.n	8003cc8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cc8:	4a26      	ldr	r2, [pc, #152]	; (8003d64 <HAL_GPIO_Init+0x324>)
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cce:	4b25      	ldr	r3, [pc, #148]	; (8003d64 <HAL_GPIO_Init+0x324>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	43db      	mvns	r3, r3
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cf2:	4a1c      	ldr	r2, [pc, #112]	; (8003d64 <HAL_GPIO_Init+0x324>)
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cf8:	4b1a      	ldr	r3, [pc, #104]	; (8003d64 <HAL_GPIO_Init+0x324>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	43db      	mvns	r3, r3
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	4013      	ands	r3, r2
 8003d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d1c:	4a11      	ldr	r2, [pc, #68]	; (8003d64 <HAL_GPIO_Init+0x324>)
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	3301      	adds	r3, #1
 8003d26:	61fb      	str	r3, [r7, #28]
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	2b0f      	cmp	r3, #15
 8003d2c:	f67f ae96 	bls.w	8003a5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d30:	bf00      	nop
 8003d32:	bf00      	nop
 8003d34:	3724      	adds	r7, #36	; 0x24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	40023800 	.word	0x40023800
 8003d44:	40013800 	.word	0x40013800
 8003d48:	40020000 	.word	0x40020000
 8003d4c:	40020400 	.word	0x40020400
 8003d50:	40020800 	.word	0x40020800
 8003d54:	40020c00 	.word	0x40020c00
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	40021400 	.word	0x40021400
 8003d60:	40021800 	.word	0x40021800
 8003d64:	40013c00 	.word	0x40013c00

08003d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	460b      	mov	r3, r1
 8003d72:	807b      	strh	r3, [r7, #2]
 8003d74:	4613      	mov	r3, r2
 8003d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d78:	787b      	ldrb	r3, [r7, #1]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d7e:	887a      	ldrh	r2, [r7, #2]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d84:	e003      	b.n	8003d8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d86:	887b      	ldrh	r3, [r7, #2]
 8003d88:	041a      	lsls	r2, r3, #16
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	619a      	str	r2, [r3, #24]
}
 8003d8e:	bf00      	nop
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b085      	sub	sp, #20
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
 8003da2:	460b      	mov	r3, r1
 8003da4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003dac:	887a      	ldrh	r2, [r7, #2]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	4013      	ands	r3, r2
 8003db2:	041a      	lsls	r2, r3, #16
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	43d9      	mvns	r1, r3
 8003db8:	887b      	ldrh	r3, [r7, #2]
 8003dba:	400b      	ands	r3, r1
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	619a      	str	r2, [r3, #24]
}
 8003dc2:	bf00      	nop
 8003dc4:	3714      	adds	r7, #20
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
	...

08003dd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e12b      	b.n	800403a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d106      	bne.n	8003dfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7fe fed2 	bl	8002ba0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2224      	movs	r2, #36	; 0x24
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0201 	bic.w	r2, r2, #1
 8003e12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e34:	f002 f808 	bl	8005e48 <HAL_RCC_GetPCLK1Freq>
 8003e38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	4a81      	ldr	r2, [pc, #516]	; (8004044 <HAL_I2C_Init+0x274>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d807      	bhi.n	8003e54 <HAL_I2C_Init+0x84>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4a80      	ldr	r2, [pc, #512]	; (8004048 <HAL_I2C_Init+0x278>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	bf94      	ite	ls
 8003e4c:	2301      	movls	r3, #1
 8003e4e:	2300      	movhi	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	e006      	b.n	8003e62 <HAL_I2C_Init+0x92>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4a7d      	ldr	r2, [pc, #500]	; (800404c <HAL_I2C_Init+0x27c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	bf94      	ite	ls
 8003e5c:	2301      	movls	r3, #1
 8003e5e:	2300      	movhi	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e0e7      	b.n	800403a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	4a78      	ldr	r2, [pc, #480]	; (8004050 <HAL_I2C_Init+0x280>)
 8003e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e72:	0c9b      	lsrs	r3, r3, #18
 8003e74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	4a6a      	ldr	r2, [pc, #424]	; (8004044 <HAL_I2C_Init+0x274>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d802      	bhi.n	8003ea4 <HAL_I2C_Init+0xd4>
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	e009      	b.n	8003eb8 <HAL_I2C_Init+0xe8>
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003eaa:	fb02 f303 	mul.w	r3, r2, r3
 8003eae:	4a69      	ldr	r2, [pc, #420]	; (8004054 <HAL_I2C_Init+0x284>)
 8003eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb4:	099b      	lsrs	r3, r3, #6
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	6812      	ldr	r2, [r2, #0]
 8003ebc:	430b      	orrs	r3, r1
 8003ebe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003eca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	495c      	ldr	r1, [pc, #368]	; (8004044 <HAL_I2C_Init+0x274>)
 8003ed4:	428b      	cmp	r3, r1
 8003ed6:	d819      	bhi.n	8003f0c <HAL_I2C_Init+0x13c>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	1e59      	subs	r1, r3, #1
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ee6:	1c59      	adds	r1, r3, #1
 8003ee8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003eec:	400b      	ands	r3, r1
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <HAL_I2C_Init+0x138>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	1e59      	subs	r1, r3, #1
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f00:	3301      	adds	r3, #1
 8003f02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f06:	e051      	b.n	8003fac <HAL_I2C_Init+0x1dc>
 8003f08:	2304      	movs	r3, #4
 8003f0a:	e04f      	b.n	8003fac <HAL_I2C_Init+0x1dc>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d111      	bne.n	8003f38 <HAL_I2C_Init+0x168>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	1e58      	subs	r0, r3, #1
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6859      	ldr	r1, [r3, #4]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	440b      	add	r3, r1
 8003f22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f26:	3301      	adds	r3, #1
 8003f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	bf0c      	ite	eq
 8003f30:	2301      	moveq	r3, #1
 8003f32:	2300      	movne	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	e012      	b.n	8003f5e <HAL_I2C_Init+0x18e>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	1e58      	subs	r0, r3, #1
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6859      	ldr	r1, [r3, #4]
 8003f40:	460b      	mov	r3, r1
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	0099      	lsls	r1, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f4e:	3301      	adds	r3, #1
 8003f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	bf0c      	ite	eq
 8003f58:	2301      	moveq	r3, #1
 8003f5a:	2300      	movne	r3, #0
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_I2C_Init+0x196>
 8003f62:	2301      	movs	r3, #1
 8003f64:	e022      	b.n	8003fac <HAL_I2C_Init+0x1dc>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10e      	bne.n	8003f8c <HAL_I2C_Init+0x1bc>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	1e58      	subs	r0, r3, #1
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6859      	ldr	r1, [r3, #4]
 8003f76:	460b      	mov	r3, r1
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	440b      	add	r3, r1
 8003f7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f80:	3301      	adds	r3, #1
 8003f82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f8a:	e00f      	b.n	8003fac <HAL_I2C_Init+0x1dc>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	1e58      	subs	r0, r3, #1
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6859      	ldr	r1, [r3, #4]
 8003f94:	460b      	mov	r3, r1
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	440b      	add	r3, r1
 8003f9a:	0099      	lsls	r1, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fac:	6879      	ldr	r1, [r7, #4]
 8003fae:	6809      	ldr	r1, [r1, #0]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69da      	ldr	r2, [r3, #28]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003fda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	6911      	ldr	r1, [r2, #16]
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	68d2      	ldr	r2, [r2, #12]
 8003fe6:	4311      	orrs	r1, r2
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6812      	ldr	r2, [r2, #0]
 8003fec:	430b      	orrs	r3, r1
 8003fee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	695a      	ldr	r2, [r3, #20]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	431a      	orrs	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0201 	orr.w	r2, r2, #1
 800401a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2220      	movs	r2, #32
 8004026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	000186a0 	.word	0x000186a0
 8004048:	001e847f 	.word	0x001e847f
 800404c:	003d08ff 	.word	0x003d08ff
 8004050:	431bde83 	.word	0x431bde83
 8004054:	10624dd3 	.word	0x10624dd3

08004058 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	607a      	str	r2, [r7, #4]
 8004062:	461a      	mov	r2, r3
 8004064:	460b      	mov	r3, r1
 8004066:	817b      	strh	r3, [r7, #10]
 8004068:	4613      	mov	r3, r2
 800406a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b20      	cmp	r3, #32
 800407a:	f040 8085 	bne.w	8004188 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800407e:	4b46      	ldr	r3, [pc, #280]	; (8004198 <HAL_I2C_Master_Transmit_IT+0x140>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	08db      	lsrs	r3, r3, #3
 8004084:	4a45      	ldr	r2, [pc, #276]	; (800419c <HAL_I2C_Master_Transmit_IT+0x144>)
 8004086:	fba2 2303 	umull	r2, r3, r2, r3
 800408a:	0a1a      	lsrs	r2, r3, #8
 800408c:	4613      	mov	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	009a      	lsls	r2, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	3b01      	subs	r3, #1
 800409c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d116      	bne.n	80040d2 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2220      	movs	r2, #32
 80040ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	f043 0220 	orr.w	r2, r3, #32
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e05b      	b.n	800418a <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d0db      	beq.n	8004098 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d101      	bne.n	80040ee <HAL_I2C_Master_Transmit_IT+0x96>
 80040ea:	2302      	movs	r3, #2
 80040ec:	e04d      	b.n	800418a <HAL_I2C_Master_Transmit_IT+0x132>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b01      	cmp	r3, #1
 8004102:	d007      	beq.n	8004114 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0201 	orr.w	r2, r2, #1
 8004112:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004122:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2221      	movs	r2, #33	; 0x21
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2210      	movs	r2, #16
 8004130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	893a      	ldrh	r2, [r7, #8]
 8004144:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4a13      	ldr	r2, [pc, #76]	; (80041a0 <HAL_I2C_Master_Transmit_IT+0x148>)
 8004154:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004156:	897a      	ldrh	r2, [r7, #10]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800416a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004182:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004184:	2300      	movs	r3, #0
 8004186:	e000      	b.n	800418a <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8004188:	2302      	movs	r3, #2
  }
}
 800418a:	4618      	mov	r0, r3
 800418c:	371c      	adds	r7, #28
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	200000c8 	.word	0x200000c8
 800419c:	14f8b589 	.word	0x14f8b589
 80041a0:	ffff0000 	.word	0xffff0000

080041a4 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b087      	sub	sp, #28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	607a      	str	r2, [r7, #4]
 80041ae:	461a      	mov	r2, r3
 80041b0:	460b      	mov	r3, r1
 80041b2:	817b      	strh	r3, [r7, #10]
 80041b4:	4613      	mov	r3, r2
 80041b6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b20      	cmp	r3, #32
 80041c6:	f040 808d 	bne.w	80042e4 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80041ca:	4b4a      	ldr	r3, [pc, #296]	; (80042f4 <HAL_I2C_Master_Receive_IT+0x150>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	08db      	lsrs	r3, r3, #3
 80041d0:	4a49      	ldr	r2, [pc, #292]	; (80042f8 <HAL_I2C_Master_Receive_IT+0x154>)
 80041d2:	fba2 2303 	umull	r2, r3, r2, r3
 80041d6:	0a1a      	lsrs	r2, r3, #8
 80041d8:	4613      	mov	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	009a      	lsls	r2, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	3b01      	subs	r3, #1
 80041e8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d116      	bne.n	800421e <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2220      	movs	r2, #32
 80041fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	f043 0220 	orr.w	r2, r3, #32
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e063      	b.n	80042e6 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b02      	cmp	r3, #2
 800422a:	d0db      	beq.n	80041e4 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004232:	2b01      	cmp	r3, #1
 8004234:	d101      	bne.n	800423a <HAL_I2C_Master_Receive_IT+0x96>
 8004236:	2302      	movs	r3, #2
 8004238:	e055      	b.n	80042e6 <HAL_I2C_Master_Receive_IT+0x142>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b01      	cmp	r3, #1
 800424e:	d007      	beq.n	8004260 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0201 	orr.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800426e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2222      	movs	r2, #34	; 0x22
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2210      	movs	r2, #16
 800427c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	893a      	ldrh	r2, [r7, #8]
 8004290:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004296:	b29a      	uxth	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4a17      	ldr	r2, [pc, #92]	; (80042fc <HAL_I2C_Master_Receive_IT+0x158>)
 80042a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80042a2:	897a      	ldrh	r2, [r7, #10]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042b6:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042c6:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80042de:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	e000      	b.n	80042e6 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 80042e4:	2302      	movs	r3, #2
  }
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	371c      	adds	r7, #28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	200000c8 	.word	0x200000c8
 80042f8:	14f8b589 	.word	0x14f8b589
 80042fc:	ffff0000 	.word	0xffff0000

08004300 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b088      	sub	sp, #32
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004320:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004328:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800432a:	7bfb      	ldrb	r3, [r7, #15]
 800432c:	2b10      	cmp	r3, #16
 800432e:	d003      	beq.n	8004338 <HAL_I2C_EV_IRQHandler+0x38>
 8004330:	7bfb      	ldrb	r3, [r7, #15]
 8004332:	2b40      	cmp	r3, #64	; 0x40
 8004334:	f040 80bd 	bne.w	80044b2 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10d      	bne.n	800436e <HAL_I2C_EV_IRQHandler+0x6e>
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004358:	d003      	beq.n	8004362 <HAL_I2C_EV_IRQHandler+0x62>
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004360:	d101      	bne.n	8004366 <HAL_I2C_EV_IRQHandler+0x66>
 8004362:	2301      	movs	r3, #1
 8004364:	e000      	b.n	8004368 <HAL_I2C_EV_IRQHandler+0x68>
 8004366:	2300      	movs	r3, #0
 8004368:	2b01      	cmp	r3, #1
 800436a:	f000 812e 	beq.w	80045ca <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00c      	beq.n	8004392 <HAL_I2C_EV_IRQHandler+0x92>
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	0a5b      	lsrs	r3, r3, #9
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b00      	cmp	r3, #0
 8004382:	d006      	beq.n	8004392 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f001 fc51 	bl	8005c2c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fd5e 	bl	8004e4c <I2C_Master_SB>
 8004390:	e08e      	b.n	80044b0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	08db      	lsrs	r3, r3, #3
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b00      	cmp	r3, #0
 800439c:	d009      	beq.n	80043b2 <HAL_I2C_EV_IRQHandler+0xb2>
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	0a5b      	lsrs	r3, r3, #9
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 fdd4 	bl	8004f58 <I2C_Master_ADD10>
 80043b0:	e07e      	b.n	80044b0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	085b      	lsrs	r3, r3, #1
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d009      	beq.n	80043d2 <HAL_I2C_EV_IRQHandler+0xd2>
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	0a5b      	lsrs	r3, r3, #9
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 fdee 	bl	8004fac <I2C_Master_ADDR>
 80043d0:	e06e      	b.n	80044b0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	089b      	lsrs	r3, r3, #2
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d037      	beq.n	800444e <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ec:	f000 80ef 	beq.w	80045ce <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	09db      	lsrs	r3, r3, #7
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00f      	beq.n	800441c <HAL_I2C_EV_IRQHandler+0x11c>
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	0a9b      	lsrs	r3, r3, #10
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b00      	cmp	r3, #0
 8004406:	d009      	beq.n	800441c <HAL_I2C_EV_IRQHandler+0x11c>
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	089b      	lsrs	r3, r3, #2
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	2b00      	cmp	r3, #0
 8004412:	d103      	bne.n	800441c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f9eb 	bl	80047f0 <I2C_MasterTransmit_TXE>
 800441a:	e049      	b.n	80044b0 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	089b      	lsrs	r3, r3, #2
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 80d2 	beq.w	80045ce <HAL_I2C_EV_IRQHandler+0x2ce>
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	0a5b      	lsrs	r3, r3, #9
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 80cb 	beq.w	80045ce <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8004438:	7bfb      	ldrb	r3, [r7, #15]
 800443a:	2b10      	cmp	r3, #16
 800443c:	d103      	bne.n	8004446 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fa72 	bl	8004928 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004444:	e0c3      	b.n	80045ce <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fad6 	bl	80049f8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800444c:	e0bf      	b.n	80045ce <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004458:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800445c:	f000 80b7 	beq.w	80045ce <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	099b      	lsrs	r3, r3, #6
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00f      	beq.n	800448c <HAL_I2C_EV_IRQHandler+0x18c>
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	0a9b      	lsrs	r3, r3, #10
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b00      	cmp	r3, #0
 8004476:	d009      	beq.n	800448c <HAL_I2C_EV_IRQHandler+0x18c>
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	089b      	lsrs	r3, r3, #2
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b00      	cmp	r3, #0
 8004482:	d103      	bne.n	800448c <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 fb46 	bl	8004b16 <I2C_MasterReceive_RXNE>
 800448a:	e011      	b.n	80044b0 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	089b      	lsrs	r3, r3, #2
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 809a 	beq.w	80045ce <HAL_I2C_EV_IRQHandler+0x2ce>
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	0a5b      	lsrs	r3, r3, #9
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 8093 	beq.w	80045ce <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 fbe5 	bl	8004c78 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044ae:	e08e      	b.n	80045ce <HAL_I2C_EV_IRQHandler+0x2ce>
 80044b0:	e08d      	b.n	80045ce <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d004      	beq.n	80044c4 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	61fb      	str	r3, [r7, #28]
 80044c2:	e007      	b.n	80044d4 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	085b      	lsrs	r3, r3, #1
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d012      	beq.n	8004506 <HAL_I2C_EV_IRQHandler+0x206>
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	0a5b      	lsrs	r3, r3, #9
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00c      	beq.n	8004506 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80044fc:	69b9      	ldr	r1, [r7, #24]
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 ffa3 	bl	800544a <I2C_Slave_ADDR>
 8004504:	e066      	b.n	80045d4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	091b      	lsrs	r3, r3, #4
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d009      	beq.n	8004526 <HAL_I2C_EV_IRQHandler+0x226>
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	0a5b      	lsrs	r3, r3, #9
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 ffd8 	bl	80054d4 <I2C_Slave_STOPF>
 8004524:	e056      	b.n	80045d4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004526:	7bbb      	ldrb	r3, [r7, #14]
 8004528:	2b21      	cmp	r3, #33	; 0x21
 800452a:	d002      	beq.n	8004532 <HAL_I2C_EV_IRQHandler+0x232>
 800452c:	7bbb      	ldrb	r3, [r7, #14]
 800452e:	2b29      	cmp	r3, #41	; 0x29
 8004530:	d125      	bne.n	800457e <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	09db      	lsrs	r3, r3, #7
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00f      	beq.n	800455e <HAL_I2C_EV_IRQHandler+0x25e>
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	0a9b      	lsrs	r3, r3, #10
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d009      	beq.n	800455e <HAL_I2C_EV_IRQHandler+0x25e>
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	089b      	lsrs	r3, r3, #2
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d103      	bne.n	800455e <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 feb9 	bl	80052ce <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800455c:	e039      	b.n	80045d2 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	089b      	lsrs	r3, r3, #2
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d033      	beq.n	80045d2 <HAL_I2C_EV_IRQHandler+0x2d2>
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	0a5b      	lsrs	r3, r3, #9
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d02d      	beq.n	80045d2 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 fee6 	bl	8005348 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800457c:	e029      	b.n	80045d2 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	099b      	lsrs	r3, r3, #6
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00f      	beq.n	80045aa <HAL_I2C_EV_IRQHandler+0x2aa>
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	0a9b      	lsrs	r3, r3, #10
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d009      	beq.n	80045aa <HAL_I2C_EV_IRQHandler+0x2aa>
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	089b      	lsrs	r3, r3, #2
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d103      	bne.n	80045aa <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 fef1 	bl	800538a <I2C_SlaveReceive_RXNE>
 80045a8:	e014      	b.n	80045d4 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	089b      	lsrs	r3, r3, #2
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00e      	beq.n	80045d4 <HAL_I2C_EV_IRQHandler+0x2d4>
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	0a5b      	lsrs	r3, r3, #9
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d008      	beq.n	80045d4 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 ff1f 	bl	8005406 <I2C_SlaveReceive_BTF>
 80045c8:	e004      	b.n	80045d4 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 80045ca:	bf00      	nop
 80045cc:	e002      	b.n	80045d4 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045ce:	bf00      	nop
 80045d0:	e000      	b.n	80045d4 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045d2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80045d4:	3720      	adds	r7, #32
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b08a      	sub	sp, #40	; 0x28
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80045f2:	2300      	movs	r3, #0
 80045f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045fc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	0a1b      	lsrs	r3, r3, #8
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00e      	beq.n	8004628 <HAL_I2C_ER_IRQHandler+0x4e>
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	0a1b      	lsrs	r3, r3, #8
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d008      	beq.n	8004628 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	f043 0301 	orr.w	r3, r3, #1
 800461c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004626:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004628:	6a3b      	ldr	r3, [r7, #32]
 800462a:	0a5b      	lsrs	r3, r3, #9
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00e      	beq.n	8004652 <HAL_I2C_ER_IRQHandler+0x78>
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	0a1b      	lsrs	r3, r3, #8
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b00      	cmp	r3, #0
 800463e:	d008      	beq.n	8004652 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	f043 0302 	orr.w	r3, r3, #2
 8004646:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004650:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	0a9b      	lsrs	r3, r3, #10
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d03f      	beq.n	80046de <HAL_I2C_ER_IRQHandler+0x104>
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	0a1b      	lsrs	r3, r3, #8
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d039      	beq.n	80046de <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800466a:	7efb      	ldrb	r3, [r7, #27]
 800466c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004672:	b29b      	uxth	r3, r3
 8004674:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800467c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004682:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004684:	7ebb      	ldrb	r3, [r7, #26]
 8004686:	2b20      	cmp	r3, #32
 8004688:	d112      	bne.n	80046b0 <HAL_I2C_ER_IRQHandler+0xd6>
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10f      	bne.n	80046b0 <HAL_I2C_ER_IRQHandler+0xd6>
 8004690:	7cfb      	ldrb	r3, [r7, #19]
 8004692:	2b21      	cmp	r3, #33	; 0x21
 8004694:	d008      	beq.n	80046a8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004696:	7cfb      	ldrb	r3, [r7, #19]
 8004698:	2b29      	cmp	r3, #41	; 0x29
 800469a:	d005      	beq.n	80046a8 <HAL_I2C_ER_IRQHandler+0xce>
 800469c:	7cfb      	ldrb	r3, [r7, #19]
 800469e:	2b28      	cmp	r3, #40	; 0x28
 80046a0:	d106      	bne.n	80046b0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2b21      	cmp	r3, #33	; 0x21
 80046a6:	d103      	bne.n	80046b0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f001 f843 	bl	8005734 <I2C_Slave_AF>
 80046ae:	e016      	b.n	80046de <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046b8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046bc:	f043 0304 	orr.w	r3, r3, #4
 80046c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80046c2:	7efb      	ldrb	r3, [r7, #27]
 80046c4:	2b10      	cmp	r3, #16
 80046c6:	d002      	beq.n	80046ce <HAL_I2C_ER_IRQHandler+0xf4>
 80046c8:	7efb      	ldrb	r3, [r7, #27]
 80046ca:	2b40      	cmp	r3, #64	; 0x40
 80046cc:	d107      	bne.n	80046de <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046dc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80046de:	6a3b      	ldr	r3, [r7, #32]
 80046e0:	0adb      	lsrs	r3, r3, #11
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00e      	beq.n	8004708 <HAL_I2C_ER_IRQHandler+0x12e>
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	0a1b      	lsrs	r3, r3, #8
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d008      	beq.n	8004708 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	f043 0308 	orr.w	r3, r3, #8
 80046fc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004706:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	2b00      	cmp	r3, #0
 800470c:	d008      	beq.n	8004720 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	431a      	orrs	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f001 f87a 	bl	8005814 <I2C_ITError>
  }
}
 8004720:	bf00      	nop
 8004722:	3728      	adds	r7, #40	; 0x28
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	460b      	mov	r3, r1
 800475a:	70fb      	strb	r3, [r7, #3]
 800475c:	4613      	mov	r3, r2
 800475e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ca:	b2db      	uxtb	r3, r3
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047fe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004806:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004812:	2b00      	cmp	r3, #0
 8004814:	d150      	bne.n	80048b8 <I2C_MasterTransmit_TXE+0xc8>
 8004816:	7bfb      	ldrb	r3, [r7, #15]
 8004818:	2b21      	cmp	r3, #33	; 0x21
 800481a:	d14d      	bne.n	80048b8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	2b08      	cmp	r3, #8
 8004820:	d01d      	beq.n	800485e <I2C_MasterTransmit_TXE+0x6e>
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	2b20      	cmp	r3, #32
 8004826:	d01a      	beq.n	800485e <I2C_MasterTransmit_TXE+0x6e>
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800482e:	d016      	beq.n	800485e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800483e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2211      	movs	r2, #17
 8004844:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2220      	movs	r2, #32
 8004852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7fc f878 	bl	800094c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800485c:	e060      	b.n	8004920 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800486c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800487c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2220      	movs	r2, #32
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b40      	cmp	r3, #64	; 0x40
 8004896:	d107      	bne.n	80048a8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f7ff ff6d 	bl	8004780 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80048a6:	e03b      	b.n	8004920 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f7fc f84b 	bl	800094c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80048b6:	e033      	b.n	8004920 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
 80048ba:	2b21      	cmp	r3, #33	; 0x21
 80048bc:	d005      	beq.n	80048ca <I2C_MasterTransmit_TXE+0xda>
 80048be:	7bbb      	ldrb	r3, [r7, #14]
 80048c0:	2b40      	cmp	r3, #64	; 0x40
 80048c2:	d12d      	bne.n	8004920 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
 80048c6:	2b22      	cmp	r3, #34	; 0x22
 80048c8:	d12a      	bne.n	8004920 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d108      	bne.n	80048e6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048e2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80048e4:	e01c      	b.n	8004920 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b40      	cmp	r3, #64	; 0x40
 80048f0:	d103      	bne.n	80048fa <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f880 	bl	80049f8 <I2C_MemoryTransmit_TXE_BTF>
}
 80048f8:	e012      	b.n	8004920 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	781a      	ldrb	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	1c5a      	adds	r2, r3, #1
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004914:	b29b      	uxth	r3, r3
 8004916:	3b01      	subs	r3, #1
 8004918:	b29a      	uxth	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800491e:	e7ff      	b.n	8004920 <I2C_MasterTransmit_TXE+0x130>
 8004920:	bf00      	nop
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004934:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b21      	cmp	r3, #33	; 0x21
 8004940:	d156      	bne.n	80049f0 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004946:	b29b      	uxth	r3, r3
 8004948:	2b00      	cmp	r3, #0
 800494a:	d012      	beq.n	8004972 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	781a      	ldrb	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004966:	b29b      	uxth	r3, r3
 8004968:	3b01      	subs	r3, #1
 800496a:	b29a      	uxth	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004970:	e03e      	b.n	80049f0 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2b08      	cmp	r3, #8
 8004976:	d01d      	beq.n	80049b4 <I2C_MasterTransmit_BTF+0x8c>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2b20      	cmp	r3, #32
 800497c:	d01a      	beq.n	80049b4 <I2C_MasterTransmit_BTF+0x8c>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004984:	d016      	beq.n	80049b4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004994:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2211      	movs	r2, #17
 800499a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2220      	movs	r2, #32
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f7fb ffcd 	bl	800094c <HAL_I2C_MasterTxCpltCallback>
}
 80049b2:	e01d      	b.n	80049f0 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049c2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049d2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2220      	movs	r2, #32
 80049de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7fb ffae 	bl	800094c <HAL_I2C_MasterTxCpltCallback>
}
 80049f0:	bf00      	nop
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a06:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d11d      	bne.n	8004a4c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d10b      	bne.n	8004a30 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a28:	1c9a      	adds	r2, r3, #2
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004a2e:	e06e      	b.n	8004b0e <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	121b      	asrs	r3, r3, #8
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004a4a:	e060      	b.n	8004b0e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d10b      	bne.n	8004a6c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a64:	1c5a      	adds	r2, r3, #1
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004a6a:	e050      	b.n	8004b0e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d14c      	bne.n	8004b0e <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
 8004a76:	2b22      	cmp	r3, #34	; 0x22
 8004a78:	d108      	bne.n	8004a8c <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a88:	601a      	str	r2, [r3, #0]
}
 8004a8a:	e040      	b.n	8004b0e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d015      	beq.n	8004ac2 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
 8004a98:	2b21      	cmp	r3, #33	; 0x21
 8004a9a:	d112      	bne.n	8004ac2 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	781a      	ldrb	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	1c5a      	adds	r2, r3, #1
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004ac0:	e025      	b.n	8004b0e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d120      	bne.n	8004b0e <I2C_MemoryTransmit_TXE_BTF+0x116>
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
 8004ace:	2b21      	cmp	r3, #33	; 0x21
 8004ad0:	d11d      	bne.n	8004b0e <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ae0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004af0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2220      	movs	r2, #32
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff fe39 	bl	8004780 <HAL_I2C_MemTxCpltCallback>
}
 8004b0e:	bf00      	nop
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b084      	sub	sp, #16
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b22      	cmp	r3, #34	; 0x22
 8004b28:	f040 80a2 	bne.w	8004c70 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2b03      	cmp	r3, #3
 8004b38:	d921      	bls.n	8004b7e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	691a      	ldr	r2, [r3, #16]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	b2d2      	uxtb	r2, r2
 8004b46:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	1c5a      	adds	r2, r3, #1
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	2b03      	cmp	r3, #3
 8004b68:	f040 8082 	bne.w	8004c70 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b7a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004b7c:	e078      	b.n	8004c70 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d074      	beq.n	8004c70 <I2C_MasterReceive_RXNE+0x15a>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d002      	beq.n	8004b92 <I2C_MasterReceive_RXNE+0x7c>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d16e      	bne.n	8004c70 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f001 f818 	bl	8005bc8 <I2C_WaitOnSTOPRequestThroughIT>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d142      	bne.n	8004c24 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bac:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bbc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	691a      	ldr	r2, [r3, #16]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc8:	b2d2      	uxtb	r2, r2
 8004bca:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2220      	movs	r2, #32
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b40      	cmp	r3, #64	; 0x40
 8004bf6:	d10a      	bne.n	8004c0e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7ff fdc4 	bl	8004794 <HAL_I2C_MemRxCpltCallback>
}
 8004c0c:	e030      	b.n	8004c70 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2212      	movs	r2, #18
 8004c1a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7fb fea5 	bl	800096c <HAL_I2C_MasterRxCpltCallback>
}
 8004c22:	e025      	b.n	8004c70 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	685a      	ldr	r2, [r3, #4]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c32:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	691a      	ldr	r2, [r3, #16]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	b2d2      	uxtb	r2, r2
 8004c40:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	1c5a      	adds	r2, r3, #1
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7fb fe8e 	bl	800098c <HAL_I2C_ErrorCallback>
}
 8004c70:	bf00      	nop
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c84:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	2b04      	cmp	r3, #4
 8004c8e:	d11b      	bne.n	8004cc8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c9e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691a      	ldr	r2, [r3, #16]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	1c5a      	adds	r2, r3, #1
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004cc6:	e0bd      	b.n	8004e44 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	2b03      	cmp	r3, #3
 8004cd0:	d129      	bne.n	8004d26 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ce0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d00a      	beq.n	8004cfe <I2C_MasterReceive_BTF+0x86>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d007      	beq.n	8004cfe <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cfc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	691a      	ldr	r2, [r3, #16]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	b2d2      	uxtb	r2, r2
 8004d0a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d24:	e08e      	b.n	8004e44 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d176      	bne.n	8004e1e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d002      	beq.n	8004d3c <I2C_MasterReceive_BTF+0xc4>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2b10      	cmp	r3, #16
 8004d3a:	d108      	bne.n	8004d4e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	e019      	b.n	8004d82 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2b04      	cmp	r3, #4
 8004d52:	d002      	beq.n	8004d5a <I2C_MasterReceive_BTF+0xe2>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d108      	bne.n	8004d6c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	e00a      	b.n	8004d82 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2b10      	cmp	r3, #16
 8004d70:	d007      	beq.n	8004d82 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d80:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	691a      	ldr	r2, [r3, #16]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	b2d2      	uxtb	r2, r2
 8004d8e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d94:	1c5a      	adds	r2, r3, #1
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	3b01      	subs	r3, #1
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	691a      	ldr	r2, [r3, #16]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	1c5a      	adds	r2, r3, #1
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004ddc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2220      	movs	r2, #32
 8004de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b40      	cmp	r3, #64	; 0x40
 8004df0:	d10a      	bne.n	8004e08 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7ff fcc7 	bl	8004794 <HAL_I2C_MemRxCpltCallback>
}
 8004e06:	e01d      	b.n	8004e44 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2212      	movs	r2, #18
 8004e14:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7fb fda8 	bl	800096c <HAL_I2C_MasterRxCpltCallback>
}
 8004e1c:	e012      	b.n	8004e44 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	691a      	ldr	r2, [r3, #16]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e28:	b2d2      	uxtb	r2, r2
 8004e2a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	1c5a      	adds	r2, r3, #1
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004e44:	bf00      	nop
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b40      	cmp	r3, #64	; 0x40
 8004e5e:	d117      	bne.n	8004e90 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d109      	bne.n	8004e7c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	461a      	mov	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e78:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004e7a:	e067      	b.n	8004f4c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	f043 0301 	orr.w	r3, r3, #1
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	611a      	str	r2, [r3, #16]
}
 8004e8e:	e05d      	b.n	8004f4c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e98:	d133      	bne.n	8004f02 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b21      	cmp	r3, #33	; 0x21
 8004ea4:	d109      	bne.n	8004eba <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	461a      	mov	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004eb6:	611a      	str	r2, [r3, #16]
 8004eb8:	e008      	b.n	8004ecc <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	f043 0301 	orr.w	r3, r3, #1
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d004      	beq.n	8004ede <I2C_Master_SB+0x92>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d108      	bne.n	8004ef0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d032      	beq.n	8004f4c <I2C_Master_SB+0x100>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d02d      	beq.n	8004f4c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004efe:	605a      	str	r2, [r3, #4]
}
 8004f00:	e024      	b.n	8004f4c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10e      	bne.n	8004f28 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	11db      	asrs	r3, r3, #7
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	f003 0306 	and.w	r3, r3, #6
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	f063 030f 	orn	r3, r3, #15
 8004f1e:	b2da      	uxtb	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	611a      	str	r2, [r3, #16]
}
 8004f26:	e011      	b.n	8004f4c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d10d      	bne.n	8004f4c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	11db      	asrs	r3, r3, #7
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	f003 0306 	and.w	r3, r3, #6
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	f063 030e 	orn	r3, r3, #14
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	611a      	str	r2, [r3, #16]
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f64:	b2da      	uxtb	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d004      	beq.n	8004f7e <I2C_Master_ADD10+0x26>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d108      	bne.n	8004f90 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00c      	beq.n	8004fa0 <I2C_Master_ADD10+0x48>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d007      	beq.n	8004fa0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f9e:	605a      	str	r2, [r3, #4]
  }
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b091      	sub	sp, #68	; 0x44
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b22      	cmp	r3, #34	; 0x22
 8004fd4:	f040 8169 	bne.w	80052aa <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10f      	bne.n	8005000 <I2C_Master_ADDR+0x54>
 8004fe0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004fe4:	2b40      	cmp	r3, #64	; 0x40
 8004fe6:	d10b      	bne.n	8005000 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fe8:	2300      	movs	r3, #0
 8004fea:	633b      	str	r3, [r7, #48]	; 0x30
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	633b      	str	r3, [r7, #48]	; 0x30
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	633b      	str	r3, [r7, #48]	; 0x30
 8004ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffe:	e160      	b.n	80052c2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005004:	2b00      	cmp	r3, #0
 8005006:	d11d      	bne.n	8005044 <I2C_Master_ADDR+0x98>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005010:	d118      	bne.n	8005044 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005012:	2300      	movs	r3, #0
 8005014:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005026:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005036:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800503c:	1c5a      	adds	r2, r3, #1
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	651a      	str	r2, [r3, #80]	; 0x50
 8005042:	e13e      	b.n	80052c2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005048:	b29b      	uxth	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d113      	bne.n	8005076 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800504e:	2300      	movs	r3, #0
 8005050:	62bb      	str	r3, [r7, #40]	; 0x28
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	62bb      	str	r3, [r7, #40]	; 0x28
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	62bb      	str	r3, [r7, #40]	; 0x28
 8005062:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	e115      	b.n	80052a2 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800507a:	b29b      	uxth	r3, r3
 800507c:	2b01      	cmp	r3, #1
 800507e:	f040 808a 	bne.w	8005196 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005084:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005088:	d137      	bne.n	80050fa <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005098:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050a8:	d113      	bne.n	80050d2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ba:	2300      	movs	r3, #0
 80050bc:	627b      	str	r3, [r7, #36]	; 0x24
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	627b      	str	r3, [r7, #36]	; 0x24
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	627b      	str	r3, [r7, #36]	; 0x24
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	e0e7      	b.n	80052a2 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050d2:	2300      	movs	r3, #0
 80050d4:	623b      	str	r3, [r7, #32]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	623b      	str	r3, [r7, #32]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	623b      	str	r3, [r7, #32]
 80050e6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050f6:	601a      	str	r2, [r3, #0]
 80050f8:	e0d3      	b.n	80052a2 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80050fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d02e      	beq.n	800515e <I2C_Master_ADDR+0x1b2>
 8005100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005102:	2b20      	cmp	r3, #32
 8005104:	d02b      	beq.n	800515e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005108:	2b12      	cmp	r3, #18
 800510a:	d102      	bne.n	8005112 <I2C_Master_ADDR+0x166>
 800510c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510e:	2b01      	cmp	r3, #1
 8005110:	d125      	bne.n	800515e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005114:	2b04      	cmp	r3, #4
 8005116:	d00e      	beq.n	8005136 <I2C_Master_ADDR+0x18a>
 8005118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511a:	2b02      	cmp	r3, #2
 800511c:	d00b      	beq.n	8005136 <I2C_Master_ADDR+0x18a>
 800511e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005120:	2b10      	cmp	r3, #16
 8005122:	d008      	beq.n	8005136 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005132:	601a      	str	r2, [r3, #0]
 8005134:	e007      	b.n	8005146 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005144:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005146:	2300      	movs	r3, #0
 8005148:	61fb      	str	r3, [r7, #28]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	61fb      	str	r3, [r7, #28]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	61fb      	str	r3, [r7, #28]
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	e0a1      	b.n	80052a2 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800516c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800516e:	2300      	movs	r3, #0
 8005170:	61bb      	str	r3, [r7, #24]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	61bb      	str	r3, [r7, #24]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	61bb      	str	r3, [r7, #24]
 8005182:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	e085      	b.n	80052a2 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800519a:	b29b      	uxth	r3, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d14d      	bne.n	800523c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80051a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a2:	2b04      	cmp	r3, #4
 80051a4:	d016      	beq.n	80051d4 <I2C_Master_ADDR+0x228>
 80051a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d013      	beq.n	80051d4 <I2C_Master_ADDR+0x228>
 80051ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ae:	2b10      	cmp	r3, #16
 80051b0:	d010      	beq.n	80051d4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051c0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	e007      	b.n	80051e4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051e2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051f2:	d117      	bne.n	8005224 <I2C_Master_ADDR+0x278>
 80051f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051fa:	d00b      	beq.n	8005214 <I2C_Master_ADDR+0x268>
 80051fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d008      	beq.n	8005214 <I2C_Master_ADDR+0x268>
 8005202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005204:	2b08      	cmp	r3, #8
 8005206:	d005      	beq.n	8005214 <I2C_Master_ADDR+0x268>
 8005208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520a:	2b10      	cmp	r3, #16
 800520c:	d002      	beq.n	8005214 <I2C_Master_ADDR+0x268>
 800520e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005210:	2b20      	cmp	r3, #32
 8005212:	d107      	bne.n	8005224 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685a      	ldr	r2, [r3, #4]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005222:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005224:	2300      	movs	r3, #0
 8005226:	617b      	str	r3, [r7, #20]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	617b      	str	r3, [r7, #20]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	617b      	str	r3, [r7, #20]
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	e032      	b.n	80052a2 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800524a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005256:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800525a:	d117      	bne.n	800528c <I2C_Master_ADDR+0x2e0>
 800525c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005262:	d00b      	beq.n	800527c <I2C_Master_ADDR+0x2d0>
 8005264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005266:	2b01      	cmp	r3, #1
 8005268:	d008      	beq.n	800527c <I2C_Master_ADDR+0x2d0>
 800526a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526c:	2b08      	cmp	r3, #8
 800526e:	d005      	beq.n	800527c <I2C_Master_ADDR+0x2d0>
 8005270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005272:	2b10      	cmp	r3, #16
 8005274:	d002      	beq.n	800527c <I2C_Master_ADDR+0x2d0>
 8005276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005278:	2b20      	cmp	r3, #32
 800527a:	d107      	bne.n	800528c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800528a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800528c:	2300      	movs	r3, #0
 800528e:	613b      	str	r3, [r7, #16]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	613b      	str	r3, [r7, #16]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	613b      	str	r3, [r7, #16]
 80052a0:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80052a8:	e00b      	b.n	80052c2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052aa:	2300      	movs	r3, #0
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	60fb      	str	r3, [r7, #12]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	60fb      	str	r3, [r7, #12]
 80052be:	68fb      	ldr	r3, [r7, #12]
}
 80052c0:	e7ff      	b.n	80052c2 <I2C_Master_ADDR+0x316>
 80052c2:	bf00      	nop
 80052c4:	3744      	adds	r7, #68	; 0x44
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b084      	sub	sp, #16
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052dc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d02b      	beq.n	8005340 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ec:	781a      	ldrb	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	1c5a      	adds	r2, r3, #1
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005302:	b29b      	uxth	r3, r3
 8005304:	3b01      	subs	r3, #1
 8005306:	b29a      	uxth	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005310:	b29b      	uxth	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d114      	bne.n	8005340 <I2C_SlaveTransmit_TXE+0x72>
 8005316:	7bfb      	ldrb	r3, [r7, #15]
 8005318:	2b29      	cmp	r3, #41	; 0x29
 800531a:	d111      	bne.n	8005340 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800532a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2221      	movs	r2, #33	; 0x21
 8005330:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2228      	movs	r2, #40	; 0x28
 8005336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7ff f9f4 	bl	8004728 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005340:	bf00      	nop
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005354:	b29b      	uxth	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d011      	beq.n	800537e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	781a      	ldrb	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005374:	b29b      	uxth	r3, r3
 8005376:	3b01      	subs	r3, #1
 8005378:	b29a      	uxth	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800537e:	bf00      	nop
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b084      	sub	sp, #16
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005398:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539e:	b29b      	uxth	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d02c      	beq.n	80053fe <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	691a      	ldr	r2, [r3, #16]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ae:	b2d2      	uxtb	r2, r2
 80053b0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b6:	1c5a      	adds	r2, r3, #1
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	3b01      	subs	r3, #1
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d114      	bne.n	80053fe <I2C_SlaveReceive_RXNE+0x74>
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
 80053d6:	2b2a      	cmp	r3, #42	; 0x2a
 80053d8:	d111      	bne.n	80053fe <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053e8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2222      	movs	r2, #34	; 0x22
 80053ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2228      	movs	r2, #40	; 0x28
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f7ff f99f 	bl	800473c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80053fe:	bf00      	nop
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005412:	b29b      	uxth	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	d012      	beq.n	800543e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	691a      	ldr	r2, [r3, #16]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542a:	1c5a      	adds	r2, r3, #1
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005434:	b29b      	uxth	r3, r3
 8005436:	3b01      	subs	r3, #1
 8005438:	b29a      	uxth	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800543e:	bf00      	nop
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b084      	sub	sp, #16
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
 8005452:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005454:	2300      	movs	r3, #0
 8005456:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800545e:	b2db      	uxtb	r3, r3
 8005460:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005464:	2b28      	cmp	r3, #40	; 0x28
 8005466:	d127      	bne.n	80054b8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685a      	ldr	r2, [r3, #4]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005476:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	089b      	lsrs	r3, r3, #2
 800547c:	f003 0301 	and.w	r3, r3, #1
 8005480:	2b00      	cmp	r3, #0
 8005482:	d101      	bne.n	8005488 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005484:	2301      	movs	r3, #1
 8005486:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	09db      	lsrs	r3, r3, #7
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	2b00      	cmp	r3, #0
 8005492:	d103      	bne.n	800549c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	81bb      	strh	r3, [r7, #12]
 800549a:	e002      	b.n	80054a2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80054aa:	89ba      	ldrh	r2, [r7, #12]
 80054ac:	7bfb      	ldrb	r3, [r7, #15]
 80054ae:	4619      	mov	r1, r3
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f7ff f94d 	bl	8004750 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80054b6:	e008      	b.n	80054ca <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f06f 0202 	mvn.w	r2, #2
 80054c0:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80054ca:	bf00      	nop
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
	...

080054d4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054e2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054f2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80054f4:	2300      	movs	r3, #0
 80054f6:	60bb      	str	r3, [r7, #8]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	60bb      	str	r3, [r7, #8]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0201 	orr.w	r2, r2, #1
 800550e:	601a      	str	r2, [r3, #0]
 8005510:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005520:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800552c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005530:	d172      	bne.n	8005618 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005532:	7bfb      	ldrb	r3, [r7, #15]
 8005534:	2b22      	cmp	r3, #34	; 0x22
 8005536:	d002      	beq.n	800553e <I2C_Slave_STOPF+0x6a>
 8005538:	7bfb      	ldrb	r3, [r7, #15]
 800553a:	2b2a      	cmp	r3, #42	; 0x2a
 800553c:	d135      	bne.n	80055aa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	b29a      	uxth	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005550:	b29b      	uxth	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d005      	beq.n	8005562 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555a:	f043 0204 	orr.w	r2, r3, #4
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005570:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005576:	4618      	mov	r0, r3
 8005578:	f7fe f974 	bl	8003864 <HAL_DMA_GetState>
 800557c:	4603      	mov	r3, r0
 800557e:	2b01      	cmp	r3, #1
 8005580:	d049      	beq.n	8005616 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005586:	4a69      	ldr	r2, [pc, #420]	; (800572c <I2C_Slave_STOPF+0x258>)
 8005588:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558e:	4618      	mov	r0, r3
 8005590:	f7fd ffbc 	bl	800350c <HAL_DMA_Abort_IT>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d03d      	beq.n	8005616 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055a4:	4610      	mov	r0, r2
 80055a6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80055a8:	e035      	b.n	8005616 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055bc:	b29b      	uxth	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d005      	beq.n	80055ce <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c6:	f043 0204 	orr.w	r2, r3, #4
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055dc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7fe f93e 	bl	8003864 <HAL_DMA_GetState>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d014      	beq.n	8005618 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f2:	4a4e      	ldr	r2, [pc, #312]	; (800572c <I2C_Slave_STOPF+0x258>)
 80055f4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7fd ff86 	bl	800350c <HAL_DMA_Abort_IT>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d008      	beq.n	8005618 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800560a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005610:	4610      	mov	r0, r2
 8005612:	4798      	blx	r3
 8005614:	e000      	b.n	8005618 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005616:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800561c:	b29b      	uxth	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d03e      	beq.n	80056a0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	695b      	ldr	r3, [r3, #20]
 8005628:	f003 0304 	and.w	r3, r3, #4
 800562c:	2b04      	cmp	r3, #4
 800562e:	d112      	bne.n	8005656 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	691a      	ldr	r2, [r3, #16]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	b2d2      	uxtb	r2, r2
 800563c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	1c5a      	adds	r2, r3, #1
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800564c:	b29b      	uxth	r3, r3
 800564e:	3b01      	subs	r3, #1
 8005650:	b29a      	uxth	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005660:	2b40      	cmp	r3, #64	; 0x40
 8005662:	d112      	bne.n	800568a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691a      	ldr	r2, [r3, #16]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566e:	b2d2      	uxtb	r2, r2
 8005670:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005676:	1c5a      	adds	r2, r3, #1
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005680:	b29b      	uxth	r3, r3
 8005682:	3b01      	subs	r3, #1
 8005684:	b29a      	uxth	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800568e:	b29b      	uxth	r3, r3
 8005690:	2b00      	cmp	r3, #0
 8005692:	d005      	beq.n	80056a0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005698:	f043 0204 	orr.w	r2, r3, #4
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d003      	beq.n	80056b0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 f8b3 	bl	8005814 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80056ae:	e039      	b.n	8005724 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
 80056b2:	2b2a      	cmp	r3, #42	; 0x2a
 80056b4:	d109      	bne.n	80056ca <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2228      	movs	r2, #40	; 0x28
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f7ff f839 	bl	800473c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b28      	cmp	r3, #40	; 0x28
 80056d4:	d111      	bne.n	80056fa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a15      	ldr	r2, [pc, #84]	; (8005730 <I2C_Slave_STOPF+0x25c>)
 80056da:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2220      	movs	r2, #32
 80056e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7ff f83a 	bl	800476c <HAL_I2C_ListenCpltCallback>
}
 80056f8:	e014      	b.n	8005724 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fe:	2b22      	cmp	r3, #34	; 0x22
 8005700:	d002      	beq.n	8005708 <I2C_Slave_STOPF+0x234>
 8005702:	7bfb      	ldrb	r3, [r7, #15]
 8005704:	2b22      	cmp	r3, #34	; 0x22
 8005706:	d10d      	bne.n	8005724 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2220      	movs	r2, #32
 8005712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7ff f80c 	bl	800473c <HAL_I2C_SlaveRxCpltCallback>
}
 8005724:	bf00      	nop
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	08005a79 	.word	0x08005a79
 8005730:	ffff0000 	.word	0xffff0000

08005734 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005742:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005748:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	2b08      	cmp	r3, #8
 800574e:	d002      	beq.n	8005756 <I2C_Slave_AF+0x22>
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	2b20      	cmp	r3, #32
 8005754:	d129      	bne.n	80057aa <I2C_Slave_AF+0x76>
 8005756:	7bfb      	ldrb	r3, [r7, #15]
 8005758:	2b28      	cmp	r3, #40	; 0x28
 800575a:	d126      	bne.n	80057aa <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a2c      	ldr	r2, [pc, #176]	; (8005810 <I2C_Slave_AF+0xdc>)
 8005760:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005770:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800577a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800578a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2220      	movs	r2, #32
 8005796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7fe ffe2 	bl	800476c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80057a8:	e02e      	b.n	8005808 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80057aa:	7bfb      	ldrb	r3, [r7, #15]
 80057ac:	2b21      	cmp	r3, #33	; 0x21
 80057ae:	d126      	bne.n	80057fe <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a17      	ldr	r2, [pc, #92]	; (8005810 <I2C_Slave_AF+0xdc>)
 80057b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2221      	movs	r2, #33	; 0x21
 80057ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2220      	movs	r2, #32
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057da:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057e4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057f4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7fe ff96 	bl	8004728 <HAL_I2C_SlaveTxCpltCallback>
}
 80057fc:	e004      	b.n	8005808 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005806:	615a      	str	r2, [r3, #20]
}
 8005808:	bf00      	nop
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	ffff0000 	.word	0xffff0000

08005814 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005822:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800582a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800582c:	7bbb      	ldrb	r3, [r7, #14]
 800582e:	2b10      	cmp	r3, #16
 8005830:	d002      	beq.n	8005838 <I2C_ITError+0x24>
 8005832:	7bbb      	ldrb	r3, [r7, #14]
 8005834:	2b40      	cmp	r3, #64	; 0x40
 8005836:	d10a      	bne.n	800584e <I2C_ITError+0x3a>
 8005838:	7bfb      	ldrb	r3, [r7, #15]
 800583a:	2b22      	cmp	r3, #34	; 0x22
 800583c:	d107      	bne.n	800584e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800584c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800584e:	7bfb      	ldrb	r3, [r7, #15]
 8005850:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005854:	2b28      	cmp	r3, #40	; 0x28
 8005856:	d107      	bne.n	8005868 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2228      	movs	r2, #40	; 0x28
 8005862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005866:	e015      	b.n	8005894 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005872:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005876:	d00a      	beq.n	800588e <I2C_ITError+0x7a>
 8005878:	7bfb      	ldrb	r3, [r7, #15]
 800587a:	2b60      	cmp	r3, #96	; 0x60
 800587c:	d007      	beq.n	800588e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2220      	movs	r2, #32
 8005882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800589e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058a2:	d162      	bne.n	800596a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058b2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d020      	beq.n	8005904 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c6:	4a6a      	ldr	r2, [pc, #424]	; (8005a70 <I2C_ITError+0x25c>)
 80058c8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fd fe1c 	bl	800350c <HAL_DMA_Abort_IT>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f000 8089 	beq.w	80059ee <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f022 0201 	bic.w	r2, r2, #1
 80058ea:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2220      	movs	r2, #32
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058fe:	4610      	mov	r0, r2
 8005900:	4798      	blx	r3
 8005902:	e074      	b.n	80059ee <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005908:	4a59      	ldr	r2, [pc, #356]	; (8005a70 <I2C_ITError+0x25c>)
 800590a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005910:	4618      	mov	r0, r3
 8005912:	f7fd fdfb 	bl	800350c <HAL_DMA_Abort_IT>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d068      	beq.n	80059ee <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005926:	2b40      	cmp	r3, #64	; 0x40
 8005928:	d10b      	bne.n	8005942 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	691a      	ldr	r2, [r3, #16]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005934:	b2d2      	uxtb	r2, r2
 8005936:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593c:	1c5a      	adds	r2, r3, #1
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 0201 	bic.w	r2, r2, #1
 8005950:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2220      	movs	r2, #32
 8005956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005964:	4610      	mov	r0, r2
 8005966:	4798      	blx	r3
 8005968:	e041      	b.n	80059ee <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b60      	cmp	r3, #96	; 0x60
 8005974:	d125      	bne.n	80059c2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2220      	movs	r2, #32
 800597a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598e:	2b40      	cmp	r3, #64	; 0x40
 8005990:	d10b      	bne.n	80059aa <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	691a      	ldr	r2, [r3, #16]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	b2d2      	uxtb	r2, r2
 800599e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	1c5a      	adds	r2, r3, #1
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 0201 	bic.w	r2, r2, #1
 80059b8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7fe fef4 	bl	80047a8 <HAL_I2C_AbortCpltCallback>
 80059c0:	e015      	b.n	80059ee <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059cc:	2b40      	cmp	r3, #64	; 0x40
 80059ce:	d10b      	bne.n	80059e8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	691a      	ldr	r2, [r3, #16]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e2:	1c5a      	adds	r2, r3, #1
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f7fa ffcf 	bl	800098c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10e      	bne.n	8005a1c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d109      	bne.n	8005a1c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d104      	bne.n	8005a1c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d007      	beq.n	8005a2c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a2a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a32:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a38:	f003 0304 	and.w	r3, r3, #4
 8005a3c:	2b04      	cmp	r3, #4
 8005a3e:	d113      	bne.n	8005a68 <I2C_ITError+0x254>
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
 8005a42:	2b28      	cmp	r3, #40	; 0x28
 8005a44:	d110      	bne.n	8005a68 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a0a      	ldr	r2, [pc, #40]	; (8005a74 <I2C_ITError+0x260>)
 8005a4a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2220      	movs	r2, #32
 8005a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7fe fe82 	bl	800476c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a68:	bf00      	nop
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	08005a79 	.word	0x08005a79
 8005a74:	ffff0000 	.word	0xffff0000

08005a78 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b086      	sub	sp, #24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a80:	2300      	movs	r3, #0
 8005a82:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a88:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a90:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005a92:	4b4b      	ldr	r3, [pc, #300]	; (8005bc0 <I2C_DMAAbort+0x148>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	08db      	lsrs	r3, r3, #3
 8005a98:	4a4a      	ldr	r2, [pc, #296]	; (8005bc4 <I2C_DMAAbort+0x14c>)
 8005a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a9e:	0a1a      	lsrs	r2, r3, #8
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	00da      	lsls	r2, r3, #3
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d106      	bne.n	8005ac0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab6:	f043 0220 	orr.w	r2, r3, #32
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005abe:	e00a      	b.n	8005ad6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ad4:	d0ea      	beq.n	8005aac <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af2:	2200      	movs	r2, #0
 8005af4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b04:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d003      	beq.n	8005b1c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b18:	2200      	movs	r2, #0
 8005b1a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d003      	beq.n	8005b2c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b28:	2200      	movs	r2, #0
 8005b2a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f022 0201 	bic.w	r2, r2, #1
 8005b3a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b60      	cmp	r3, #96	; 0x60
 8005b46:	d10e      	bne.n	8005b66 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	2220      	movs	r2, #32
 8005b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005b5e:	6978      	ldr	r0, [r7, #20]
 8005b60:	f7fe fe22 	bl	80047a8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b64:	e027      	b.n	8005bb6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b66:	7cfb      	ldrb	r3, [r7, #19]
 8005b68:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b6c:	2b28      	cmp	r3, #40	; 0x28
 8005b6e:	d117      	bne.n	8005ba0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f042 0201 	orr.w	r2, r2, #1
 8005b7e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b8e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	2200      	movs	r2, #0
 8005b94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	2228      	movs	r2, #40	; 0x28
 8005b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b9e:	e007      	b.n	8005bb0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005bb0:	6978      	ldr	r0, [r7, #20]
 8005bb2:	f7fa feeb 	bl	800098c <HAL_I2C_ErrorCallback>
}
 8005bb6:	bf00      	nop
 8005bb8:	3718      	adds	r7, #24
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	200000c8 	.word	0x200000c8
 8005bc4:	14f8b589 	.word	0x14f8b589

08005bc8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005bd4:	4b13      	ldr	r3, [pc, #76]	; (8005c24 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	08db      	lsrs	r3, r3, #3
 8005bda:	4a13      	ldr	r2, [pc, #76]	; (8005c28 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8005be0:	0a1a      	lsrs	r2, r3, #8
 8005be2:	4613      	mov	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4413      	add	r3, r2
 8005be8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	3b01      	subs	r3, #1
 8005bee:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d107      	bne.n	8005c06 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	f043 0220 	orr.w	r2, r3, #32
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e008      	b.n	8005c18 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c14:	d0e9      	beq.n	8005bea <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	200000c8 	.word	0x200000c8
 8005c28:	14f8b589 	.word	0x14f8b589

08005c2c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c38:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005c3c:	d103      	bne.n	8005c46 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005c44:	e007      	b.n	8005c56 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005c4e:	d102      	bne.n	8005c56 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2208      	movs	r2, #8
 8005c54:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
	...

08005c64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d101      	bne.n	8005c78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e0cc      	b.n	8005e12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c78:	4b68      	ldr	r3, [pc, #416]	; (8005e1c <HAL_RCC_ClockConfig+0x1b8>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 030f 	and.w	r3, r3, #15
 8005c80:	683a      	ldr	r2, [r7, #0]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d90c      	bls.n	8005ca0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c86:	4b65      	ldr	r3, [pc, #404]	; (8005e1c <HAL_RCC_ClockConfig+0x1b8>)
 8005c88:	683a      	ldr	r2, [r7, #0]
 8005c8a:	b2d2      	uxtb	r2, r2
 8005c8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c8e:	4b63      	ldr	r3, [pc, #396]	; (8005e1c <HAL_RCC_ClockConfig+0x1b8>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 030f 	and.w	r3, r3, #15
 8005c96:	683a      	ldr	r2, [r7, #0]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d001      	beq.n	8005ca0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e0b8      	b.n	8005e12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d020      	beq.n	8005cee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0304 	and.w	r3, r3, #4
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d005      	beq.n	8005cc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cb8:	4b59      	ldr	r3, [pc, #356]	; (8005e20 <HAL_RCC_ClockConfig+0x1bc>)
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	4a58      	ldr	r2, [pc, #352]	; (8005e20 <HAL_RCC_ClockConfig+0x1bc>)
 8005cbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005cc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0308 	and.w	r3, r3, #8
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d005      	beq.n	8005cdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cd0:	4b53      	ldr	r3, [pc, #332]	; (8005e20 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	4a52      	ldr	r2, [pc, #328]	; (8005e20 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005cda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cdc:	4b50      	ldr	r3, [pc, #320]	; (8005e20 <HAL_RCC_ClockConfig+0x1bc>)
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	494d      	ldr	r1, [pc, #308]	; (8005e20 <HAL_RCC_ClockConfig+0x1bc>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d044      	beq.n	8005d84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d107      	bne.n	8005d12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d02:	4b47      	ldr	r3, [pc, #284]	; (8005e20 <HAL_RCC_ClockConfig+0x1bc>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d119      	bne.n	8005d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e07f      	b.n	8005e12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d003      	beq.n	8005d22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d1e:	2b03      	cmp	r3, #3
 8005d20:	d107      	bne.n	8005d32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d22:	4b3f      	ldr	r3, [pc, #252]	; (8005e20 <HAL_RCC_ClockConfig+0x1bc>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d109      	bne.n	8005d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e06f      	b.n	8005e12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d32:	4b3b      	ldr	r3, [pc, #236]	; (8005e20 <HAL_RCC_ClockConfig+0x1bc>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0302 	and.w	r3, r3, #2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e067      	b.n	8005e12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d42:	4b37      	ldr	r3, [pc, #220]	; (8005e20 <HAL_RCC_ClockConfig+0x1bc>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f023 0203 	bic.w	r2, r3, #3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	4934      	ldr	r1, [pc, #208]	; (8005e20 <HAL_RCC_ClockConfig+0x1bc>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d54:	f7fd f922 	bl	8002f9c <HAL_GetTick>
 8005d58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d5a:	e00a      	b.n	8005d72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d5c:	f7fd f91e 	bl	8002f9c <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e04f      	b.n	8005e12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d72:	4b2b      	ldr	r3, [pc, #172]	; (8005e20 <HAL_RCC_ClockConfig+0x1bc>)
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f003 020c 	and.w	r2, r3, #12
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d1eb      	bne.n	8005d5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d84:	4b25      	ldr	r3, [pc, #148]	; (8005e1c <HAL_RCC_ClockConfig+0x1b8>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 030f 	and.w	r3, r3, #15
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d20c      	bcs.n	8005dac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d92:	4b22      	ldr	r3, [pc, #136]	; (8005e1c <HAL_RCC_ClockConfig+0x1b8>)
 8005d94:	683a      	ldr	r2, [r7, #0]
 8005d96:	b2d2      	uxtb	r2, r2
 8005d98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d9a:	4b20      	ldr	r3, [pc, #128]	; (8005e1c <HAL_RCC_ClockConfig+0x1b8>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 030f 	and.w	r3, r3, #15
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d001      	beq.n	8005dac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e032      	b.n	8005e12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0304 	and.w	r3, r3, #4
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d008      	beq.n	8005dca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005db8:	4b19      	ldr	r3, [pc, #100]	; (8005e20 <HAL_RCC_ClockConfig+0x1bc>)
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	4916      	ldr	r1, [pc, #88]	; (8005e20 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0308 	and.w	r3, r3, #8
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d009      	beq.n	8005dea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005dd6:	4b12      	ldr	r3, [pc, #72]	; (8005e20 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	490e      	ldr	r1, [pc, #56]	; (8005e20 <HAL_RCC_ClockConfig+0x1bc>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005dea:	f000 f855 	bl	8005e98 <HAL_RCC_GetSysClockFreq>
 8005dee:	4602      	mov	r2, r0
 8005df0:	4b0b      	ldr	r3, [pc, #44]	; (8005e20 <HAL_RCC_ClockConfig+0x1bc>)
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	091b      	lsrs	r3, r3, #4
 8005df6:	f003 030f 	and.w	r3, r3, #15
 8005dfa:	490a      	ldr	r1, [pc, #40]	; (8005e24 <HAL_RCC_ClockConfig+0x1c0>)
 8005dfc:	5ccb      	ldrb	r3, [r1, r3]
 8005dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8005e02:	4a09      	ldr	r2, [pc, #36]	; (8005e28 <HAL_RCC_ClockConfig+0x1c4>)
 8005e04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e06:	4b09      	ldr	r3, [pc, #36]	; (8005e2c <HAL_RCC_ClockConfig+0x1c8>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fd f882 	bl	8002f14 <HAL_InitTick>

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	40023c00 	.word	0x40023c00
 8005e20:	40023800 	.word	0x40023800
 8005e24:	08009348 	.word	0x08009348
 8005e28:	200000c8 	.word	0x200000c8
 8005e2c:	200000cc 	.word	0x200000cc

08005e30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e30:	b480      	push	{r7}
 8005e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e34:	4b03      	ldr	r3, [pc, #12]	; (8005e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e36:	681b      	ldr	r3, [r3, #0]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	200000c8 	.word	0x200000c8

08005e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e4c:	f7ff fff0 	bl	8005e30 <HAL_RCC_GetHCLKFreq>
 8005e50:	4602      	mov	r2, r0
 8005e52:	4b05      	ldr	r3, [pc, #20]	; (8005e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	0a9b      	lsrs	r3, r3, #10
 8005e58:	f003 0307 	and.w	r3, r3, #7
 8005e5c:	4903      	ldr	r1, [pc, #12]	; (8005e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e5e:	5ccb      	ldrb	r3, [r1, r3]
 8005e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	40023800 	.word	0x40023800
 8005e6c:	08009358 	.word	0x08009358

08005e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005e74:	f7ff ffdc 	bl	8005e30 <HAL_RCC_GetHCLKFreq>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	4b05      	ldr	r3, [pc, #20]	; (8005e90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	0b5b      	lsrs	r3, r3, #13
 8005e80:	f003 0307 	and.w	r3, r3, #7
 8005e84:	4903      	ldr	r1, [pc, #12]	; (8005e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e86:	5ccb      	ldrb	r3, [r1, r3]
 8005e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	40023800 	.word	0x40023800
 8005e94:	08009358 	.word	0x08009358

08005e98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e9c:	b0ae      	sub	sp, #184	; 0xb8
 8005e9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005eac:	2300      	movs	r3, #0
 8005eae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ebe:	4bcb      	ldr	r3, [pc, #812]	; (80061ec <HAL_RCC_GetSysClockFreq+0x354>)
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f003 030c 	and.w	r3, r3, #12
 8005ec6:	2b0c      	cmp	r3, #12
 8005ec8:	f200 8206 	bhi.w	80062d8 <HAL_RCC_GetSysClockFreq+0x440>
 8005ecc:	a201      	add	r2, pc, #4	; (adr r2, 8005ed4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed2:	bf00      	nop
 8005ed4:	08005f09 	.word	0x08005f09
 8005ed8:	080062d9 	.word	0x080062d9
 8005edc:	080062d9 	.word	0x080062d9
 8005ee0:	080062d9 	.word	0x080062d9
 8005ee4:	08005f11 	.word	0x08005f11
 8005ee8:	080062d9 	.word	0x080062d9
 8005eec:	080062d9 	.word	0x080062d9
 8005ef0:	080062d9 	.word	0x080062d9
 8005ef4:	08005f19 	.word	0x08005f19
 8005ef8:	080062d9 	.word	0x080062d9
 8005efc:	080062d9 	.word	0x080062d9
 8005f00:	080062d9 	.word	0x080062d9
 8005f04:	08006109 	.word	0x08006109
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f08:	4bb9      	ldr	r3, [pc, #740]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x358>)
 8005f0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8005f0e:	e1e7      	b.n	80062e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f10:	4bb8      	ldr	r3, [pc, #736]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005f12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005f16:	e1e3      	b.n	80062e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f18:	4bb4      	ldr	r3, [pc, #720]	; (80061ec <HAL_RCC_GetSysClockFreq+0x354>)
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f24:	4bb1      	ldr	r3, [pc, #708]	; (80061ec <HAL_RCC_GetSysClockFreq+0x354>)
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d071      	beq.n	8006014 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f30:	4bae      	ldr	r3, [pc, #696]	; (80061ec <HAL_RCC_GetSysClockFreq+0x354>)
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	099b      	lsrs	r3, r3, #6
 8005f36:	2200      	movs	r2, #0
 8005f38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f3c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005f40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005f56:	4622      	mov	r2, r4
 8005f58:	462b      	mov	r3, r5
 8005f5a:	f04f 0000 	mov.w	r0, #0
 8005f5e:	f04f 0100 	mov.w	r1, #0
 8005f62:	0159      	lsls	r1, r3, #5
 8005f64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f68:	0150      	lsls	r0, r2, #5
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	4621      	mov	r1, r4
 8005f70:	1a51      	subs	r1, r2, r1
 8005f72:	6439      	str	r1, [r7, #64]	; 0x40
 8005f74:	4629      	mov	r1, r5
 8005f76:	eb63 0301 	sbc.w	r3, r3, r1
 8005f7a:	647b      	str	r3, [r7, #68]	; 0x44
 8005f7c:	f04f 0200 	mov.w	r2, #0
 8005f80:	f04f 0300 	mov.w	r3, #0
 8005f84:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005f88:	4649      	mov	r1, r9
 8005f8a:	018b      	lsls	r3, r1, #6
 8005f8c:	4641      	mov	r1, r8
 8005f8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f92:	4641      	mov	r1, r8
 8005f94:	018a      	lsls	r2, r1, #6
 8005f96:	4641      	mov	r1, r8
 8005f98:	1a51      	subs	r1, r2, r1
 8005f9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f9c:	4649      	mov	r1, r9
 8005f9e:	eb63 0301 	sbc.w	r3, r3, r1
 8005fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fa4:	f04f 0200 	mov.w	r2, #0
 8005fa8:	f04f 0300 	mov.w	r3, #0
 8005fac:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005fb0:	4649      	mov	r1, r9
 8005fb2:	00cb      	lsls	r3, r1, #3
 8005fb4:	4641      	mov	r1, r8
 8005fb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fba:	4641      	mov	r1, r8
 8005fbc:	00ca      	lsls	r2, r1, #3
 8005fbe:	4610      	mov	r0, r2
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	4622      	mov	r2, r4
 8005fc6:	189b      	adds	r3, r3, r2
 8005fc8:	633b      	str	r3, [r7, #48]	; 0x30
 8005fca:	462b      	mov	r3, r5
 8005fcc:	460a      	mov	r2, r1
 8005fce:	eb42 0303 	adc.w	r3, r2, r3
 8005fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8005fd4:	f04f 0200 	mov.w	r2, #0
 8005fd8:	f04f 0300 	mov.w	r3, #0
 8005fdc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	024b      	lsls	r3, r1, #9
 8005fe4:	4621      	mov	r1, r4
 8005fe6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005fea:	4621      	mov	r1, r4
 8005fec:	024a      	lsls	r2, r1, #9
 8005fee:	4610      	mov	r0, r2
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ffc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006000:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006004:	f7fa f95c 	bl	80002c0 <__aeabi_uldivmod>
 8006008:	4602      	mov	r2, r0
 800600a:	460b      	mov	r3, r1
 800600c:	4613      	mov	r3, r2
 800600e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006012:	e067      	b.n	80060e4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006014:	4b75      	ldr	r3, [pc, #468]	; (80061ec <HAL_RCC_GetSysClockFreq+0x354>)
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	099b      	lsrs	r3, r3, #6
 800601a:	2200      	movs	r2, #0
 800601c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006020:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006024:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800602c:	67bb      	str	r3, [r7, #120]	; 0x78
 800602e:	2300      	movs	r3, #0
 8006030:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006032:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8006036:	4622      	mov	r2, r4
 8006038:	462b      	mov	r3, r5
 800603a:	f04f 0000 	mov.w	r0, #0
 800603e:	f04f 0100 	mov.w	r1, #0
 8006042:	0159      	lsls	r1, r3, #5
 8006044:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006048:	0150      	lsls	r0, r2, #5
 800604a:	4602      	mov	r2, r0
 800604c:	460b      	mov	r3, r1
 800604e:	4621      	mov	r1, r4
 8006050:	1a51      	subs	r1, r2, r1
 8006052:	62b9      	str	r1, [r7, #40]	; 0x28
 8006054:	4629      	mov	r1, r5
 8006056:	eb63 0301 	sbc.w	r3, r3, r1
 800605a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800605c:	f04f 0200 	mov.w	r2, #0
 8006060:	f04f 0300 	mov.w	r3, #0
 8006064:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006068:	4649      	mov	r1, r9
 800606a:	018b      	lsls	r3, r1, #6
 800606c:	4641      	mov	r1, r8
 800606e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006072:	4641      	mov	r1, r8
 8006074:	018a      	lsls	r2, r1, #6
 8006076:	4641      	mov	r1, r8
 8006078:	ebb2 0a01 	subs.w	sl, r2, r1
 800607c:	4649      	mov	r1, r9
 800607e:	eb63 0b01 	sbc.w	fp, r3, r1
 8006082:	f04f 0200 	mov.w	r2, #0
 8006086:	f04f 0300 	mov.w	r3, #0
 800608a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800608e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006092:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006096:	4692      	mov	sl, r2
 8006098:	469b      	mov	fp, r3
 800609a:	4623      	mov	r3, r4
 800609c:	eb1a 0303 	adds.w	r3, sl, r3
 80060a0:	623b      	str	r3, [r7, #32]
 80060a2:	462b      	mov	r3, r5
 80060a4:	eb4b 0303 	adc.w	r3, fp, r3
 80060a8:	627b      	str	r3, [r7, #36]	; 0x24
 80060aa:	f04f 0200 	mov.w	r2, #0
 80060ae:	f04f 0300 	mov.w	r3, #0
 80060b2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80060b6:	4629      	mov	r1, r5
 80060b8:	028b      	lsls	r3, r1, #10
 80060ba:	4621      	mov	r1, r4
 80060bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060c0:	4621      	mov	r1, r4
 80060c2:	028a      	lsls	r2, r1, #10
 80060c4:	4610      	mov	r0, r2
 80060c6:	4619      	mov	r1, r3
 80060c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060cc:	2200      	movs	r2, #0
 80060ce:	673b      	str	r3, [r7, #112]	; 0x70
 80060d0:	677a      	str	r2, [r7, #116]	; 0x74
 80060d2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80060d6:	f7fa f8f3 	bl	80002c0 <__aeabi_uldivmod>
 80060da:	4602      	mov	r2, r0
 80060dc:	460b      	mov	r3, r1
 80060de:	4613      	mov	r3, r2
 80060e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80060e4:	4b41      	ldr	r3, [pc, #260]	; (80061ec <HAL_RCC_GetSysClockFreq+0x354>)
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	0c1b      	lsrs	r3, r3, #16
 80060ea:	f003 0303 	and.w	r3, r3, #3
 80060ee:	3301      	adds	r3, #1
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80060f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80060fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006102:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006106:	e0eb      	b.n	80062e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006108:	4b38      	ldr	r3, [pc, #224]	; (80061ec <HAL_RCC_GetSysClockFreq+0x354>)
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006110:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006114:	4b35      	ldr	r3, [pc, #212]	; (80061ec <HAL_RCC_GetSysClockFreq+0x354>)
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d06b      	beq.n	80061f8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006120:	4b32      	ldr	r3, [pc, #200]	; (80061ec <HAL_RCC_GetSysClockFreq+0x354>)
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	099b      	lsrs	r3, r3, #6
 8006126:	2200      	movs	r2, #0
 8006128:	66bb      	str	r3, [r7, #104]	; 0x68
 800612a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800612c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800612e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006132:	663b      	str	r3, [r7, #96]	; 0x60
 8006134:	2300      	movs	r3, #0
 8006136:	667b      	str	r3, [r7, #100]	; 0x64
 8006138:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800613c:	4622      	mov	r2, r4
 800613e:	462b      	mov	r3, r5
 8006140:	f04f 0000 	mov.w	r0, #0
 8006144:	f04f 0100 	mov.w	r1, #0
 8006148:	0159      	lsls	r1, r3, #5
 800614a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800614e:	0150      	lsls	r0, r2, #5
 8006150:	4602      	mov	r2, r0
 8006152:	460b      	mov	r3, r1
 8006154:	4621      	mov	r1, r4
 8006156:	1a51      	subs	r1, r2, r1
 8006158:	61b9      	str	r1, [r7, #24]
 800615a:	4629      	mov	r1, r5
 800615c:	eb63 0301 	sbc.w	r3, r3, r1
 8006160:	61fb      	str	r3, [r7, #28]
 8006162:	f04f 0200 	mov.w	r2, #0
 8006166:	f04f 0300 	mov.w	r3, #0
 800616a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800616e:	4659      	mov	r1, fp
 8006170:	018b      	lsls	r3, r1, #6
 8006172:	4651      	mov	r1, sl
 8006174:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006178:	4651      	mov	r1, sl
 800617a:	018a      	lsls	r2, r1, #6
 800617c:	4651      	mov	r1, sl
 800617e:	ebb2 0801 	subs.w	r8, r2, r1
 8006182:	4659      	mov	r1, fp
 8006184:	eb63 0901 	sbc.w	r9, r3, r1
 8006188:	f04f 0200 	mov.w	r2, #0
 800618c:	f04f 0300 	mov.w	r3, #0
 8006190:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006194:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006198:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800619c:	4690      	mov	r8, r2
 800619e:	4699      	mov	r9, r3
 80061a0:	4623      	mov	r3, r4
 80061a2:	eb18 0303 	adds.w	r3, r8, r3
 80061a6:	613b      	str	r3, [r7, #16]
 80061a8:	462b      	mov	r3, r5
 80061aa:	eb49 0303 	adc.w	r3, r9, r3
 80061ae:	617b      	str	r3, [r7, #20]
 80061b0:	f04f 0200 	mov.w	r2, #0
 80061b4:	f04f 0300 	mov.w	r3, #0
 80061b8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80061bc:	4629      	mov	r1, r5
 80061be:	024b      	lsls	r3, r1, #9
 80061c0:	4621      	mov	r1, r4
 80061c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80061c6:	4621      	mov	r1, r4
 80061c8:	024a      	lsls	r2, r1, #9
 80061ca:	4610      	mov	r0, r2
 80061cc:	4619      	mov	r1, r3
 80061ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061d2:	2200      	movs	r2, #0
 80061d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80061d6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80061d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80061dc:	f7fa f870 	bl	80002c0 <__aeabi_uldivmod>
 80061e0:	4602      	mov	r2, r0
 80061e2:	460b      	mov	r3, r1
 80061e4:	4613      	mov	r3, r2
 80061e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061ea:	e065      	b.n	80062b8 <HAL_RCC_GetSysClockFreq+0x420>
 80061ec:	40023800 	.word	0x40023800
 80061f0:	00f42400 	.word	0x00f42400
 80061f4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061f8:	4b3d      	ldr	r3, [pc, #244]	; (80062f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	099b      	lsrs	r3, r3, #6
 80061fe:	2200      	movs	r2, #0
 8006200:	4618      	mov	r0, r3
 8006202:	4611      	mov	r1, r2
 8006204:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006208:	653b      	str	r3, [r7, #80]	; 0x50
 800620a:	2300      	movs	r3, #0
 800620c:	657b      	str	r3, [r7, #84]	; 0x54
 800620e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8006212:	4642      	mov	r2, r8
 8006214:	464b      	mov	r3, r9
 8006216:	f04f 0000 	mov.w	r0, #0
 800621a:	f04f 0100 	mov.w	r1, #0
 800621e:	0159      	lsls	r1, r3, #5
 8006220:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006224:	0150      	lsls	r0, r2, #5
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	4641      	mov	r1, r8
 800622c:	1a51      	subs	r1, r2, r1
 800622e:	60b9      	str	r1, [r7, #8]
 8006230:	4649      	mov	r1, r9
 8006232:	eb63 0301 	sbc.w	r3, r3, r1
 8006236:	60fb      	str	r3, [r7, #12]
 8006238:	f04f 0200 	mov.w	r2, #0
 800623c:	f04f 0300 	mov.w	r3, #0
 8006240:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006244:	4659      	mov	r1, fp
 8006246:	018b      	lsls	r3, r1, #6
 8006248:	4651      	mov	r1, sl
 800624a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800624e:	4651      	mov	r1, sl
 8006250:	018a      	lsls	r2, r1, #6
 8006252:	4651      	mov	r1, sl
 8006254:	1a54      	subs	r4, r2, r1
 8006256:	4659      	mov	r1, fp
 8006258:	eb63 0501 	sbc.w	r5, r3, r1
 800625c:	f04f 0200 	mov.w	r2, #0
 8006260:	f04f 0300 	mov.w	r3, #0
 8006264:	00eb      	lsls	r3, r5, #3
 8006266:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800626a:	00e2      	lsls	r2, r4, #3
 800626c:	4614      	mov	r4, r2
 800626e:	461d      	mov	r5, r3
 8006270:	4643      	mov	r3, r8
 8006272:	18e3      	adds	r3, r4, r3
 8006274:	603b      	str	r3, [r7, #0]
 8006276:	464b      	mov	r3, r9
 8006278:	eb45 0303 	adc.w	r3, r5, r3
 800627c:	607b      	str	r3, [r7, #4]
 800627e:	f04f 0200 	mov.w	r2, #0
 8006282:	f04f 0300 	mov.w	r3, #0
 8006286:	e9d7 4500 	ldrd	r4, r5, [r7]
 800628a:	4629      	mov	r1, r5
 800628c:	028b      	lsls	r3, r1, #10
 800628e:	4621      	mov	r1, r4
 8006290:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006294:	4621      	mov	r1, r4
 8006296:	028a      	lsls	r2, r1, #10
 8006298:	4610      	mov	r0, r2
 800629a:	4619      	mov	r1, r3
 800629c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062a0:	2200      	movs	r2, #0
 80062a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80062a4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80062a6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80062aa:	f7fa f809 	bl	80002c0 <__aeabi_uldivmod>
 80062ae:	4602      	mov	r2, r0
 80062b0:	460b      	mov	r3, r1
 80062b2:	4613      	mov	r3, r2
 80062b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80062b8:	4b0d      	ldr	r3, [pc, #52]	; (80062f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	0f1b      	lsrs	r3, r3, #28
 80062be:	f003 0307 	and.w	r3, r3, #7
 80062c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80062c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80062ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80062ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80062d6:	e003      	b.n	80062e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062d8:	4b06      	ldr	r3, [pc, #24]	; (80062f4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80062da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80062de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	37b8      	adds	r7, #184	; 0xb8
 80062e8:	46bd      	mov	sp, r7
 80062ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062ee:	bf00      	nop
 80062f0:	40023800 	.word	0x40023800
 80062f4:	00f42400 	.word	0x00f42400

080062f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b086      	sub	sp, #24
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e28d      	b.n	8006826 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b00      	cmp	r3, #0
 8006314:	f000 8083 	beq.w	800641e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006318:	4b94      	ldr	r3, [pc, #592]	; (800656c <HAL_RCC_OscConfig+0x274>)
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f003 030c 	and.w	r3, r3, #12
 8006320:	2b04      	cmp	r3, #4
 8006322:	d019      	beq.n	8006358 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006324:	4b91      	ldr	r3, [pc, #580]	; (800656c <HAL_RCC_OscConfig+0x274>)
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800632c:	2b08      	cmp	r3, #8
 800632e:	d106      	bne.n	800633e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006330:	4b8e      	ldr	r3, [pc, #568]	; (800656c <HAL_RCC_OscConfig+0x274>)
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006338:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800633c:	d00c      	beq.n	8006358 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800633e:	4b8b      	ldr	r3, [pc, #556]	; (800656c <HAL_RCC_OscConfig+0x274>)
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006346:	2b0c      	cmp	r3, #12
 8006348:	d112      	bne.n	8006370 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800634a:	4b88      	ldr	r3, [pc, #544]	; (800656c <HAL_RCC_OscConfig+0x274>)
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006352:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006356:	d10b      	bne.n	8006370 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006358:	4b84      	ldr	r3, [pc, #528]	; (800656c <HAL_RCC_OscConfig+0x274>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d05b      	beq.n	800641c <HAL_RCC_OscConfig+0x124>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d157      	bne.n	800641c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e25a      	b.n	8006826 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006378:	d106      	bne.n	8006388 <HAL_RCC_OscConfig+0x90>
 800637a:	4b7c      	ldr	r3, [pc, #496]	; (800656c <HAL_RCC_OscConfig+0x274>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a7b      	ldr	r2, [pc, #492]	; (800656c <HAL_RCC_OscConfig+0x274>)
 8006380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006384:	6013      	str	r3, [r2, #0]
 8006386:	e01d      	b.n	80063c4 <HAL_RCC_OscConfig+0xcc>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006390:	d10c      	bne.n	80063ac <HAL_RCC_OscConfig+0xb4>
 8006392:	4b76      	ldr	r3, [pc, #472]	; (800656c <HAL_RCC_OscConfig+0x274>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a75      	ldr	r2, [pc, #468]	; (800656c <HAL_RCC_OscConfig+0x274>)
 8006398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800639c:	6013      	str	r3, [r2, #0]
 800639e:	4b73      	ldr	r3, [pc, #460]	; (800656c <HAL_RCC_OscConfig+0x274>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a72      	ldr	r2, [pc, #456]	; (800656c <HAL_RCC_OscConfig+0x274>)
 80063a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063a8:	6013      	str	r3, [r2, #0]
 80063aa:	e00b      	b.n	80063c4 <HAL_RCC_OscConfig+0xcc>
 80063ac:	4b6f      	ldr	r3, [pc, #444]	; (800656c <HAL_RCC_OscConfig+0x274>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a6e      	ldr	r2, [pc, #440]	; (800656c <HAL_RCC_OscConfig+0x274>)
 80063b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063b6:	6013      	str	r3, [r2, #0]
 80063b8:	4b6c      	ldr	r3, [pc, #432]	; (800656c <HAL_RCC_OscConfig+0x274>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a6b      	ldr	r2, [pc, #428]	; (800656c <HAL_RCC_OscConfig+0x274>)
 80063be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d013      	beq.n	80063f4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063cc:	f7fc fde6 	bl	8002f9c <HAL_GetTick>
 80063d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063d2:	e008      	b.n	80063e6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063d4:	f7fc fde2 	bl	8002f9c <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	2b64      	cmp	r3, #100	; 0x64
 80063e0:	d901      	bls.n	80063e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e21f      	b.n	8006826 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063e6:	4b61      	ldr	r3, [pc, #388]	; (800656c <HAL_RCC_OscConfig+0x274>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d0f0      	beq.n	80063d4 <HAL_RCC_OscConfig+0xdc>
 80063f2:	e014      	b.n	800641e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f4:	f7fc fdd2 	bl	8002f9c <HAL_GetTick>
 80063f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063fa:	e008      	b.n	800640e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063fc:	f7fc fdce 	bl	8002f9c <HAL_GetTick>
 8006400:	4602      	mov	r2, r0
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	2b64      	cmp	r3, #100	; 0x64
 8006408:	d901      	bls.n	800640e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e20b      	b.n	8006826 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800640e:	4b57      	ldr	r3, [pc, #348]	; (800656c <HAL_RCC_OscConfig+0x274>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1f0      	bne.n	80063fc <HAL_RCC_OscConfig+0x104>
 800641a:	e000      	b.n	800641e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800641c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d06f      	beq.n	800650a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800642a:	4b50      	ldr	r3, [pc, #320]	; (800656c <HAL_RCC_OscConfig+0x274>)
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f003 030c 	and.w	r3, r3, #12
 8006432:	2b00      	cmp	r3, #0
 8006434:	d017      	beq.n	8006466 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006436:	4b4d      	ldr	r3, [pc, #308]	; (800656c <HAL_RCC_OscConfig+0x274>)
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800643e:	2b08      	cmp	r3, #8
 8006440:	d105      	bne.n	800644e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006442:	4b4a      	ldr	r3, [pc, #296]	; (800656c <HAL_RCC_OscConfig+0x274>)
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00b      	beq.n	8006466 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800644e:	4b47      	ldr	r3, [pc, #284]	; (800656c <HAL_RCC_OscConfig+0x274>)
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006456:	2b0c      	cmp	r3, #12
 8006458:	d11c      	bne.n	8006494 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800645a:	4b44      	ldr	r3, [pc, #272]	; (800656c <HAL_RCC_OscConfig+0x274>)
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d116      	bne.n	8006494 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006466:	4b41      	ldr	r3, [pc, #260]	; (800656c <HAL_RCC_OscConfig+0x274>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	2b00      	cmp	r3, #0
 8006470:	d005      	beq.n	800647e <HAL_RCC_OscConfig+0x186>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d001      	beq.n	800647e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e1d3      	b.n	8006826 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800647e:	4b3b      	ldr	r3, [pc, #236]	; (800656c <HAL_RCC_OscConfig+0x274>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	00db      	lsls	r3, r3, #3
 800648c:	4937      	ldr	r1, [pc, #220]	; (800656c <HAL_RCC_OscConfig+0x274>)
 800648e:	4313      	orrs	r3, r2
 8006490:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006492:	e03a      	b.n	800650a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d020      	beq.n	80064de <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800649c:	4b34      	ldr	r3, [pc, #208]	; (8006570 <HAL_RCC_OscConfig+0x278>)
 800649e:	2201      	movs	r2, #1
 80064a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a2:	f7fc fd7b 	bl	8002f9c <HAL_GetTick>
 80064a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064a8:	e008      	b.n	80064bc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064aa:	f7fc fd77 	bl	8002f9c <HAL_GetTick>
 80064ae:	4602      	mov	r2, r0
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d901      	bls.n	80064bc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e1b4      	b.n	8006826 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064bc:	4b2b      	ldr	r3, [pc, #172]	; (800656c <HAL_RCC_OscConfig+0x274>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0302 	and.w	r3, r3, #2
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d0f0      	beq.n	80064aa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064c8:	4b28      	ldr	r3, [pc, #160]	; (800656c <HAL_RCC_OscConfig+0x274>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	00db      	lsls	r3, r3, #3
 80064d6:	4925      	ldr	r1, [pc, #148]	; (800656c <HAL_RCC_OscConfig+0x274>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	600b      	str	r3, [r1, #0]
 80064dc:	e015      	b.n	800650a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064de:	4b24      	ldr	r3, [pc, #144]	; (8006570 <HAL_RCC_OscConfig+0x278>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e4:	f7fc fd5a 	bl	8002f9c <HAL_GetTick>
 80064e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064ea:	e008      	b.n	80064fe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064ec:	f7fc fd56 	bl	8002f9c <HAL_GetTick>
 80064f0:	4602      	mov	r2, r0
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d901      	bls.n	80064fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e193      	b.n	8006826 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064fe:	4b1b      	ldr	r3, [pc, #108]	; (800656c <HAL_RCC_OscConfig+0x274>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0302 	and.w	r3, r3, #2
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1f0      	bne.n	80064ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0308 	and.w	r3, r3, #8
 8006512:	2b00      	cmp	r3, #0
 8006514:	d036      	beq.n	8006584 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d016      	beq.n	800654c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800651e:	4b15      	ldr	r3, [pc, #84]	; (8006574 <HAL_RCC_OscConfig+0x27c>)
 8006520:	2201      	movs	r2, #1
 8006522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006524:	f7fc fd3a 	bl	8002f9c <HAL_GetTick>
 8006528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800652a:	e008      	b.n	800653e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800652c:	f7fc fd36 	bl	8002f9c <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	2b02      	cmp	r3, #2
 8006538:	d901      	bls.n	800653e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e173      	b.n	8006826 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800653e:	4b0b      	ldr	r3, [pc, #44]	; (800656c <HAL_RCC_OscConfig+0x274>)
 8006540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006542:	f003 0302 	and.w	r3, r3, #2
 8006546:	2b00      	cmp	r3, #0
 8006548:	d0f0      	beq.n	800652c <HAL_RCC_OscConfig+0x234>
 800654a:	e01b      	b.n	8006584 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800654c:	4b09      	ldr	r3, [pc, #36]	; (8006574 <HAL_RCC_OscConfig+0x27c>)
 800654e:	2200      	movs	r2, #0
 8006550:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006552:	f7fc fd23 	bl	8002f9c <HAL_GetTick>
 8006556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006558:	e00e      	b.n	8006578 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800655a:	f7fc fd1f 	bl	8002f9c <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	2b02      	cmp	r3, #2
 8006566:	d907      	bls.n	8006578 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e15c      	b.n	8006826 <HAL_RCC_OscConfig+0x52e>
 800656c:	40023800 	.word	0x40023800
 8006570:	42470000 	.word	0x42470000
 8006574:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006578:	4b8a      	ldr	r3, [pc, #552]	; (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 800657a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800657c:	f003 0302 	and.w	r3, r3, #2
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1ea      	bne.n	800655a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0304 	and.w	r3, r3, #4
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 8097 	beq.w	80066c0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006592:	2300      	movs	r3, #0
 8006594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006596:	4b83      	ldr	r3, [pc, #524]	; (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 8006598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10f      	bne.n	80065c2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065a2:	2300      	movs	r3, #0
 80065a4:	60bb      	str	r3, [r7, #8]
 80065a6:	4b7f      	ldr	r3, [pc, #508]	; (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 80065a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065aa:	4a7e      	ldr	r2, [pc, #504]	; (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 80065ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065b0:	6413      	str	r3, [r2, #64]	; 0x40
 80065b2:	4b7c      	ldr	r3, [pc, #496]	; (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ba:	60bb      	str	r3, [r7, #8]
 80065bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065be:	2301      	movs	r3, #1
 80065c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065c2:	4b79      	ldr	r3, [pc, #484]	; (80067a8 <HAL_RCC_OscConfig+0x4b0>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d118      	bne.n	8006600 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065ce:	4b76      	ldr	r3, [pc, #472]	; (80067a8 <HAL_RCC_OscConfig+0x4b0>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a75      	ldr	r2, [pc, #468]	; (80067a8 <HAL_RCC_OscConfig+0x4b0>)
 80065d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065da:	f7fc fcdf 	bl	8002f9c <HAL_GetTick>
 80065de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065e0:	e008      	b.n	80065f4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065e2:	f7fc fcdb 	bl	8002f9c <HAL_GetTick>
 80065e6:	4602      	mov	r2, r0
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d901      	bls.n	80065f4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80065f0:	2303      	movs	r3, #3
 80065f2:	e118      	b.n	8006826 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065f4:	4b6c      	ldr	r3, [pc, #432]	; (80067a8 <HAL_RCC_OscConfig+0x4b0>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d0f0      	beq.n	80065e2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d106      	bne.n	8006616 <HAL_RCC_OscConfig+0x31e>
 8006608:	4b66      	ldr	r3, [pc, #408]	; (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 800660a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660c:	4a65      	ldr	r2, [pc, #404]	; (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 800660e:	f043 0301 	orr.w	r3, r3, #1
 8006612:	6713      	str	r3, [r2, #112]	; 0x70
 8006614:	e01c      	b.n	8006650 <HAL_RCC_OscConfig+0x358>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	2b05      	cmp	r3, #5
 800661c:	d10c      	bne.n	8006638 <HAL_RCC_OscConfig+0x340>
 800661e:	4b61      	ldr	r3, [pc, #388]	; (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 8006620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006622:	4a60      	ldr	r2, [pc, #384]	; (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 8006624:	f043 0304 	orr.w	r3, r3, #4
 8006628:	6713      	str	r3, [r2, #112]	; 0x70
 800662a:	4b5e      	ldr	r3, [pc, #376]	; (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 800662c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800662e:	4a5d      	ldr	r2, [pc, #372]	; (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 8006630:	f043 0301 	orr.w	r3, r3, #1
 8006634:	6713      	str	r3, [r2, #112]	; 0x70
 8006636:	e00b      	b.n	8006650 <HAL_RCC_OscConfig+0x358>
 8006638:	4b5a      	ldr	r3, [pc, #360]	; (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 800663a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800663c:	4a59      	ldr	r2, [pc, #356]	; (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 800663e:	f023 0301 	bic.w	r3, r3, #1
 8006642:	6713      	str	r3, [r2, #112]	; 0x70
 8006644:	4b57      	ldr	r3, [pc, #348]	; (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 8006646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006648:	4a56      	ldr	r2, [pc, #344]	; (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 800664a:	f023 0304 	bic.w	r3, r3, #4
 800664e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d015      	beq.n	8006684 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006658:	f7fc fca0 	bl	8002f9c <HAL_GetTick>
 800665c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800665e:	e00a      	b.n	8006676 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006660:	f7fc fc9c 	bl	8002f9c <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	f241 3288 	movw	r2, #5000	; 0x1388
 800666e:	4293      	cmp	r3, r2
 8006670:	d901      	bls.n	8006676 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e0d7      	b.n	8006826 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006676:	4b4b      	ldr	r3, [pc, #300]	; (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 8006678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800667a:	f003 0302 	and.w	r3, r3, #2
 800667e:	2b00      	cmp	r3, #0
 8006680:	d0ee      	beq.n	8006660 <HAL_RCC_OscConfig+0x368>
 8006682:	e014      	b.n	80066ae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006684:	f7fc fc8a 	bl	8002f9c <HAL_GetTick>
 8006688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800668a:	e00a      	b.n	80066a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800668c:	f7fc fc86 	bl	8002f9c <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	f241 3288 	movw	r2, #5000	; 0x1388
 800669a:	4293      	cmp	r3, r2
 800669c:	d901      	bls.n	80066a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e0c1      	b.n	8006826 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066a2:	4b40      	ldr	r3, [pc, #256]	; (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 80066a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1ee      	bne.n	800668c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066ae:	7dfb      	ldrb	r3, [r7, #23]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d105      	bne.n	80066c0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066b4:	4b3b      	ldr	r3, [pc, #236]	; (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 80066b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b8:	4a3a      	ldr	r2, [pc, #232]	; (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 80066ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 80ad 	beq.w	8006824 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066ca:	4b36      	ldr	r3, [pc, #216]	; (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f003 030c 	and.w	r3, r3, #12
 80066d2:	2b08      	cmp	r3, #8
 80066d4:	d060      	beq.n	8006798 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d145      	bne.n	800676a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066de:	4b33      	ldr	r3, [pc, #204]	; (80067ac <HAL_RCC_OscConfig+0x4b4>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e4:	f7fc fc5a 	bl	8002f9c <HAL_GetTick>
 80066e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066ea:	e008      	b.n	80066fe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066ec:	f7fc fc56 	bl	8002f9c <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d901      	bls.n	80066fe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e093      	b.n	8006826 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066fe:	4b29      	ldr	r3, [pc, #164]	; (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1f0      	bne.n	80066ec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	69da      	ldr	r2, [r3, #28]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	431a      	orrs	r2, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006718:	019b      	lsls	r3, r3, #6
 800671a:	431a      	orrs	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006720:	085b      	lsrs	r3, r3, #1
 8006722:	3b01      	subs	r3, #1
 8006724:	041b      	lsls	r3, r3, #16
 8006726:	431a      	orrs	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672c:	061b      	lsls	r3, r3, #24
 800672e:	431a      	orrs	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006734:	071b      	lsls	r3, r3, #28
 8006736:	491b      	ldr	r1, [pc, #108]	; (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 8006738:	4313      	orrs	r3, r2
 800673a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800673c:	4b1b      	ldr	r3, [pc, #108]	; (80067ac <HAL_RCC_OscConfig+0x4b4>)
 800673e:	2201      	movs	r2, #1
 8006740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006742:	f7fc fc2b 	bl	8002f9c <HAL_GetTick>
 8006746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006748:	e008      	b.n	800675c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800674a:	f7fc fc27 	bl	8002f9c <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	2b02      	cmp	r3, #2
 8006756:	d901      	bls.n	800675c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e064      	b.n	8006826 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800675c:	4b11      	ldr	r3, [pc, #68]	; (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d0f0      	beq.n	800674a <HAL_RCC_OscConfig+0x452>
 8006768:	e05c      	b.n	8006824 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800676a:	4b10      	ldr	r3, [pc, #64]	; (80067ac <HAL_RCC_OscConfig+0x4b4>)
 800676c:	2200      	movs	r2, #0
 800676e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006770:	f7fc fc14 	bl	8002f9c <HAL_GetTick>
 8006774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006776:	e008      	b.n	800678a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006778:	f7fc fc10 	bl	8002f9c <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	2b02      	cmp	r3, #2
 8006784:	d901      	bls.n	800678a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e04d      	b.n	8006826 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800678a:	4b06      	ldr	r3, [pc, #24]	; (80067a4 <HAL_RCC_OscConfig+0x4ac>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1f0      	bne.n	8006778 <HAL_RCC_OscConfig+0x480>
 8006796:	e045      	b.n	8006824 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	2b01      	cmp	r3, #1
 800679e:	d107      	bne.n	80067b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e040      	b.n	8006826 <HAL_RCC_OscConfig+0x52e>
 80067a4:	40023800 	.word	0x40023800
 80067a8:	40007000 	.word	0x40007000
 80067ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80067b0:	4b1f      	ldr	r3, [pc, #124]	; (8006830 <HAL_RCC_OscConfig+0x538>)
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d030      	beq.n	8006820 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d129      	bne.n	8006820 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d122      	bne.n	8006820 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80067e0:	4013      	ands	r3, r2
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80067e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d119      	bne.n	8006820 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f6:	085b      	lsrs	r3, r3, #1
 80067f8:	3b01      	subs	r3, #1
 80067fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d10f      	bne.n	8006820 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800680c:	429a      	cmp	r2, r3
 800680e:	d107      	bne.n	8006820 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800681c:	429a      	cmp	r2, r3
 800681e:	d001      	beq.n	8006824 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e000      	b.n	8006826 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3718      	adds	r7, #24
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	40023800 	.word	0x40023800

08006834 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d101      	bne.n	8006846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e03f      	b.n	80068c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800684c:	b2db      	uxtb	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	d106      	bne.n	8006860 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f7fc f91e 	bl	8002a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2224      	movs	r2, #36	; 0x24
 8006864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68da      	ldr	r2, [r3, #12]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006876:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 ffcb 	bl	8007814 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	691a      	ldr	r2, [r3, #16]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800688c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	695a      	ldr	r2, [r3, #20]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800689c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68da      	ldr	r2, [r3, #12]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2220      	movs	r2, #32
 80068b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2220      	movs	r2, #32
 80068c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b08a      	sub	sp, #40	; 0x28
 80068d2:	af02      	add	r7, sp, #8
 80068d4:	60f8      	str	r0, [r7, #12]
 80068d6:	60b9      	str	r1, [r7, #8]
 80068d8:	603b      	str	r3, [r7, #0]
 80068da:	4613      	mov	r3, r2
 80068dc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80068de:	2300      	movs	r3, #0
 80068e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b20      	cmp	r3, #32
 80068ec:	d17c      	bne.n	80069e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d002      	beq.n	80068fa <HAL_UART_Transmit+0x2c>
 80068f4:	88fb      	ldrh	r3, [r7, #6]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d101      	bne.n	80068fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e075      	b.n	80069ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006904:	2b01      	cmp	r3, #1
 8006906:	d101      	bne.n	800690c <HAL_UART_Transmit+0x3e>
 8006908:	2302      	movs	r3, #2
 800690a:	e06e      	b.n	80069ea <HAL_UART_Transmit+0x11c>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2221      	movs	r2, #33	; 0x21
 800691e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006922:	f7fc fb3b 	bl	8002f9c <HAL_GetTick>
 8006926:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	88fa      	ldrh	r2, [r7, #6]
 800692c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	88fa      	ldrh	r2, [r7, #6]
 8006932:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800693c:	d108      	bne.n	8006950 <HAL_UART_Transmit+0x82>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d104      	bne.n	8006950 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006946:	2300      	movs	r3, #0
 8006948:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	61bb      	str	r3, [r7, #24]
 800694e:	e003      	b.n	8006958 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006954:	2300      	movs	r3, #0
 8006956:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006960:	e02a      	b.n	80069b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	2200      	movs	r2, #0
 800696a:	2180      	movs	r1, #128	; 0x80
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f000 fc83 	bl	8007278 <UART_WaitOnFlagUntilTimeout>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d001      	beq.n	800697c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e036      	b.n	80069ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d10b      	bne.n	800699a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	881b      	ldrh	r3, [r3, #0]
 8006986:	461a      	mov	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006990:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	3302      	adds	r3, #2
 8006996:	61bb      	str	r3, [r7, #24]
 8006998:	e007      	b.n	80069aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	781a      	ldrb	r2, [r3, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	3301      	adds	r3, #1
 80069a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	3b01      	subs	r3, #1
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069bc:	b29b      	uxth	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1cf      	bne.n	8006962 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	9300      	str	r3, [sp, #0]
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	2200      	movs	r2, #0
 80069ca:	2140      	movs	r1, #64	; 0x40
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f000 fc53 	bl	8007278 <UART_WaitOnFlagUntilTimeout>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d001      	beq.n	80069dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80069d8:	2303      	movs	r3, #3
 80069da:	e006      	b.n	80069ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2220      	movs	r2, #32
 80069e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80069e4:	2300      	movs	r3, #0
 80069e6:	e000      	b.n	80069ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80069e8:	2302      	movs	r3, #2
  }
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3720      	adds	r7, #32
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b084      	sub	sp, #16
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	60f8      	str	r0, [r7, #12]
 80069fa:	60b9      	str	r1, [r7, #8]
 80069fc:	4613      	mov	r3, r2
 80069fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b20      	cmp	r3, #32
 8006a0a:	d11d      	bne.n	8006a48 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d002      	beq.n	8006a18 <HAL_UART_Receive_DMA+0x26>
 8006a12:	88fb      	ldrh	r3, [r7, #6]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e016      	b.n	8006a4a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d101      	bne.n	8006a2a <HAL_UART_Receive_DMA+0x38>
 8006a26:	2302      	movs	r3, #2
 8006a28:	e00f      	b.n	8006a4a <HAL_UART_Receive_DMA+0x58>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006a38:	88fb      	ldrh	r3, [r7, #6]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	68b9      	ldr	r1, [r7, #8]
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f000 fc88 	bl	8007354 <UART_Start_Receive_DMA>
 8006a44:	4603      	mov	r3, r0
 8006a46:	e000      	b.n	8006a4a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006a48:	2302      	movs	r3, #2
  }
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b08c      	sub	sp, #48	; 0x30
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	60f8      	str	r0, [r7, #12]
 8006a5a:	60b9      	str	r1, [r7, #8]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b20      	cmp	r3, #32
 8006a6a:	d152      	bne.n	8006b12 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d002      	beq.n	8006a78 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006a72:	88fb      	ldrh	r3, [r7, #6]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d101      	bne.n	8006a7c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e04b      	b.n	8006b14 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d101      	bne.n	8006a8a <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8006a86:	2302      	movs	r3, #2
 8006a88:	e044      	b.n	8006b14 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2201      	movs	r2, #1
 8006a96:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006a98:	88fb      	ldrh	r3, [r7, #6]
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	68b9      	ldr	r1, [r7, #8]
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f000 fc58 	bl	8007354 <UART_Start_Receive_DMA>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006aaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d12c      	bne.n	8006b0c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d125      	bne.n	8006b06 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006aba:	2300      	movs	r3, #0
 8006abc:	613b      	str	r3, [r7, #16]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	613b      	str	r3, [r7, #16]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	613b      	str	r3, [r7, #16]
 8006ace:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	330c      	adds	r3, #12
 8006ad6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	e853 3f00 	ldrex	r3, [r3]
 8006ade:	617b      	str	r3, [r7, #20]
   return(result);
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	f043 0310 	orr.w	r3, r3, #16
 8006ae6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	330c      	adds	r3, #12
 8006aee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006af0:	627a      	str	r2, [r7, #36]	; 0x24
 8006af2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af4:	6a39      	ldr	r1, [r7, #32]
 8006af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006af8:	e841 2300 	strex	r3, r2, [r1]
 8006afc:	61fb      	str	r3, [r7, #28]
   return(result);
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1e5      	bne.n	8006ad0 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8006b04:	e002      	b.n	8006b0c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006b0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b10:	e000      	b.n	8006b14 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8006b12:	2302      	movs	r3, #2
  }
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3730      	adds	r7, #48	; 0x30
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b0ba      	sub	sp, #232	; 0xe8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006b42:	2300      	movs	r3, #0
 8006b44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b52:	f003 030f 	and.w	r3, r3, #15
 8006b56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006b5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10f      	bne.n	8006b82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b66:	f003 0320 	and.w	r3, r3, #32
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d009      	beq.n	8006b82 <HAL_UART_IRQHandler+0x66>
 8006b6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b72:	f003 0320 	and.w	r3, r3, #32
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d003      	beq.n	8006b82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fd8f 	bl	800769e <UART_Receive_IT>
      return;
 8006b80:	e256      	b.n	8007030 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006b82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f000 80de 	beq.w	8006d48 <HAL_UART_IRQHandler+0x22c>
 8006b8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d106      	bne.n	8006ba6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b9c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 80d1 	beq.w	8006d48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006baa:	f003 0301 	and.w	r3, r3, #1
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00b      	beq.n	8006bca <HAL_UART_IRQHandler+0xae>
 8006bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d005      	beq.n	8006bca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc2:	f043 0201 	orr.w	r2, r3, #1
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bce:	f003 0304 	and.w	r3, r3, #4
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00b      	beq.n	8006bee <HAL_UART_IRQHandler+0xd2>
 8006bd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d005      	beq.n	8006bee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be6:	f043 0202 	orr.w	r2, r3, #2
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bf2:	f003 0302 	and.w	r3, r3, #2
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00b      	beq.n	8006c12 <HAL_UART_IRQHandler+0xf6>
 8006bfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d005      	beq.n	8006c12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0a:	f043 0204 	orr.w	r2, r3, #4
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c16:	f003 0308 	and.w	r3, r3, #8
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d011      	beq.n	8006c42 <HAL_UART_IRQHandler+0x126>
 8006c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c22:	f003 0320 	and.w	r3, r3, #32
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d105      	bne.n	8006c36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006c2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d005      	beq.n	8006c42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3a:	f043 0208 	orr.w	r2, r3, #8
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f000 81ed 	beq.w	8007026 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c50:	f003 0320 	and.w	r3, r3, #32
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d008      	beq.n	8006c6a <HAL_UART_IRQHandler+0x14e>
 8006c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c5c:	f003 0320 	and.w	r3, r3, #32
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d002      	beq.n	8006c6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fd1a 	bl	800769e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	695b      	ldr	r3, [r3, #20]
 8006c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c74:	2b40      	cmp	r3, #64	; 0x40
 8006c76:	bf0c      	ite	eq
 8006c78:	2301      	moveq	r3, #1
 8006c7a:	2300      	movne	r3, #0
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c86:	f003 0308 	and.w	r3, r3, #8
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d103      	bne.n	8006c96 <HAL_UART_IRQHandler+0x17a>
 8006c8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d04f      	beq.n	8006d36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fc22 	bl	80074e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca6:	2b40      	cmp	r3, #64	; 0x40
 8006ca8:	d141      	bne.n	8006d2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	3314      	adds	r3, #20
 8006cb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cb8:	e853 3f00 	ldrex	r3, [r3]
 8006cbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006cc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	3314      	adds	r3, #20
 8006cd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006cd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006cda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006ce2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006ce6:	e841 2300 	strex	r3, r2, [r1]
 8006cea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006cee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1d9      	bne.n	8006caa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d013      	beq.n	8006d26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d02:	4a7d      	ldr	r2, [pc, #500]	; (8006ef8 <HAL_UART_IRQHandler+0x3dc>)
 8006d04:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7fc fbfe 	bl	800350c <HAL_DMA_Abort_IT>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d016      	beq.n	8006d44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d20:	4610      	mov	r0, r2
 8006d22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d24:	e00e      	b.n	8006d44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f9a4 	bl	8007074 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d2c:	e00a      	b.n	8006d44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f9a0 	bl	8007074 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d34:	e006      	b.n	8006d44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f99c 	bl	8007074 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006d42:	e170      	b.n	8007026 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d44:	bf00      	nop
    return;
 8006d46:	e16e      	b.n	8007026 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	f040 814a 	bne.w	8006fe6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d56:	f003 0310 	and.w	r3, r3, #16
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 8143 	beq.w	8006fe6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d64:	f003 0310 	and.w	r3, r3, #16
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 813c 	beq.w	8006fe6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d6e:	2300      	movs	r3, #0
 8006d70:	60bb      	str	r3, [r7, #8]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	60bb      	str	r3, [r7, #8]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	60bb      	str	r3, [r7, #8]
 8006d82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d8e:	2b40      	cmp	r3, #64	; 0x40
 8006d90:	f040 80b4 	bne.w	8006efc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006da0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f000 8140 	beq.w	800702a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006dae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006db2:	429a      	cmp	r2, r3
 8006db4:	f080 8139 	bcs.w	800702a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006dbe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dca:	f000 8088 	beq.w	8006ede <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	330c      	adds	r3, #12
 8006dd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ddc:	e853 3f00 	ldrex	r3, [r3]
 8006de0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006de4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006de8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	330c      	adds	r3, #12
 8006df6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006dfa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006dfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e0a:	e841 2300 	strex	r3, r2, [r1]
 8006e0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1d9      	bne.n	8006dce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	3314      	adds	r3, #20
 8006e20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e24:	e853 3f00 	ldrex	r3, [r3]
 8006e28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006e2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e2c:	f023 0301 	bic.w	r3, r3, #1
 8006e30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	3314      	adds	r3, #20
 8006e3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006e42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006e46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e4a:	e841 2300 	strex	r3, r2, [r1]
 8006e4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006e50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1e1      	bne.n	8006e1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	3314      	adds	r3, #20
 8006e5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e60:	e853 3f00 	ldrex	r3, [r3]
 8006e64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006e66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	3314      	adds	r3, #20
 8006e76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e82:	e841 2300 	strex	r3, r2, [r1]
 8006e86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1e3      	bne.n	8006e56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2220      	movs	r2, #32
 8006e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	330c      	adds	r3, #12
 8006ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ea6:	e853 3f00 	ldrex	r3, [r3]
 8006eaa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eae:	f023 0310 	bic.w	r3, r3, #16
 8006eb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	330c      	adds	r3, #12
 8006ebc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006ec0:	65ba      	str	r2, [r7, #88]	; 0x58
 8006ec2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ec6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ec8:	e841 2300 	strex	r3, r2, [r1]
 8006ecc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1e3      	bne.n	8006e9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7fc faa7 	bl	800342c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	4619      	mov	r1, r3
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f7fa f8e4 	bl	80010bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ef4:	e099      	b.n	800702a <HAL_UART_IRQHandler+0x50e>
 8006ef6:	bf00      	nop
 8006ef8:	080075a7 	.word	0x080075a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	1ad3      	subs	r3, r2, r3
 8006f08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f000 808b 	beq.w	800702e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006f18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 8086 	beq.w	800702e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	330c      	adds	r3, #12
 8006f28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2c:	e853 3f00 	ldrex	r3, [r3]
 8006f30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	330c      	adds	r3, #12
 8006f42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006f46:	647a      	str	r2, [r7, #68]	; 0x44
 8006f48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f4e:	e841 2300 	strex	r3, r2, [r1]
 8006f52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1e3      	bne.n	8006f22 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	3314      	adds	r3, #20
 8006f60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f64:	e853 3f00 	ldrex	r3, [r3]
 8006f68:	623b      	str	r3, [r7, #32]
   return(result);
 8006f6a:	6a3b      	ldr	r3, [r7, #32]
 8006f6c:	f023 0301 	bic.w	r3, r3, #1
 8006f70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	3314      	adds	r3, #20
 8006f7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f7e:	633a      	str	r2, [r7, #48]	; 0x30
 8006f80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f86:	e841 2300 	strex	r3, r2, [r1]
 8006f8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1e3      	bne.n	8006f5a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2220      	movs	r2, #32
 8006f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	330c      	adds	r3, #12
 8006fa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	e853 3f00 	ldrex	r3, [r3]
 8006fae:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f023 0310 	bic.w	r3, r3, #16
 8006fb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	330c      	adds	r3, #12
 8006fc0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006fc4:	61fa      	str	r2, [r7, #28]
 8006fc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc8:	69b9      	ldr	r1, [r7, #24]
 8006fca:	69fa      	ldr	r2, [r7, #28]
 8006fcc:	e841 2300 	strex	r3, r2, [r1]
 8006fd0:	617b      	str	r3, [r7, #20]
   return(result);
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1e3      	bne.n	8006fa0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006fd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fdc:	4619      	mov	r1, r3
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7fa f86c 	bl	80010bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006fe4:	e023      	b.n	800702e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d009      	beq.n	8007006 <HAL_UART_IRQHandler+0x4ea>
 8006ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d003      	beq.n	8007006 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fae5 	bl	80075ce <UART_Transmit_IT>
    return;
 8007004:	e014      	b.n	8007030 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800700a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00e      	beq.n	8007030 <HAL_UART_IRQHandler+0x514>
 8007012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800701a:	2b00      	cmp	r3, #0
 800701c:	d008      	beq.n	8007030 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 fb25 	bl	800766e <UART_EndTransmit_IT>
    return;
 8007024:	e004      	b.n	8007030 <HAL_UART_IRQHandler+0x514>
    return;
 8007026:	bf00      	nop
 8007028:	e002      	b.n	8007030 <HAL_UART_IRQHandler+0x514>
      return;
 800702a:	bf00      	nop
 800702c:	e000      	b.n	8007030 <HAL_UART_IRQHandler+0x514>
      return;
 800702e:	bf00      	nop
  }
}
 8007030:	37e8      	adds	r7, #232	; 0xe8
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop

08007038 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b09c      	sub	sp, #112	; 0x70
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007094:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d172      	bne.n	800718a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80070a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070a6:	2200      	movs	r2, #0
 80070a8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	330c      	adds	r3, #12
 80070b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070b4:	e853 3f00 	ldrex	r3, [r3]
 80070b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80070ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80070c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	330c      	adds	r3, #12
 80070c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80070ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80070cc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80070d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070d2:	e841 2300 	strex	r3, r2, [r1]
 80070d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80070d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1e5      	bne.n	80070aa <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	3314      	adds	r3, #20
 80070e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e8:	e853 3f00 	ldrex	r3, [r3]
 80070ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f0:	f023 0301 	bic.w	r3, r3, #1
 80070f4:	667b      	str	r3, [r7, #100]	; 0x64
 80070f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	3314      	adds	r3, #20
 80070fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80070fe:	647a      	str	r2, [r7, #68]	; 0x44
 8007100:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007102:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007104:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007106:	e841 2300 	strex	r3, r2, [r1]
 800710a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800710c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1e5      	bne.n	80070de <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	3314      	adds	r3, #20
 8007118:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711c:	e853 3f00 	ldrex	r3, [r3]
 8007120:	623b      	str	r3, [r7, #32]
   return(result);
 8007122:	6a3b      	ldr	r3, [r7, #32]
 8007124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007128:	663b      	str	r3, [r7, #96]	; 0x60
 800712a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	3314      	adds	r3, #20
 8007130:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007132:	633a      	str	r2, [r7, #48]	; 0x30
 8007134:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007136:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800713a:	e841 2300 	strex	r3, r2, [r1]
 800713e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1e5      	bne.n	8007112 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007148:	2220      	movs	r2, #32
 800714a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800714e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007152:	2b01      	cmp	r3, #1
 8007154:	d119      	bne.n	800718a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	330c      	adds	r3, #12
 800715c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	e853 3f00 	ldrex	r3, [r3]
 8007164:	60fb      	str	r3, [r7, #12]
   return(result);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f023 0310 	bic.w	r3, r3, #16
 800716c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800716e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	330c      	adds	r3, #12
 8007174:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007176:	61fa      	str	r2, [r7, #28]
 8007178:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717a:	69b9      	ldr	r1, [r7, #24]
 800717c:	69fa      	ldr	r2, [r7, #28]
 800717e:	e841 2300 	strex	r3, r2, [r1]
 8007182:	617b      	str	r3, [r7, #20]
   return(result);
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1e5      	bne.n	8007156 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800718a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800718c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718e:	2b01      	cmp	r3, #1
 8007190:	d106      	bne.n	80071a0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007194:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007196:	4619      	mov	r1, r3
 8007198:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800719a:	f7f9 ff8f 	bl	80010bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800719e:	e002      	b.n	80071a6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80071a0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80071a2:	f7ff ff53 	bl	800704c <HAL_UART_RxCpltCallback>
}
 80071a6:	bf00      	nop
 80071a8:	3770      	adds	r7, #112	; 0x70
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b084      	sub	sp, #16
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ba:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d108      	bne.n	80071d6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80071c8:	085b      	lsrs	r3, r3, #1
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	4619      	mov	r1, r3
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f7f9 ff74 	bl	80010bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80071d4:	e002      	b.n	80071dc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f7ff ff42 	bl	8007060 <HAL_UART_RxHalfCpltCallback>
}
 80071dc:	bf00      	nop
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80071ec:	2300      	movs	r3, #0
 80071ee:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	695b      	ldr	r3, [r3, #20]
 80071fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007200:	2b80      	cmp	r3, #128	; 0x80
 8007202:	bf0c      	ite	eq
 8007204:	2301      	moveq	r3, #1
 8007206:	2300      	movne	r3, #0
 8007208:	b2db      	uxtb	r3, r3
 800720a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b21      	cmp	r3, #33	; 0x21
 8007216:	d108      	bne.n	800722a <UART_DMAError+0x46>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d005      	beq.n	800722a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	2200      	movs	r2, #0
 8007222:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007224:	68b8      	ldr	r0, [r7, #8]
 8007226:	f000 f933 	bl	8007490 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	695b      	ldr	r3, [r3, #20]
 8007230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007234:	2b40      	cmp	r3, #64	; 0x40
 8007236:	bf0c      	ite	eq
 8007238:	2301      	moveq	r3, #1
 800723a:	2300      	movne	r3, #0
 800723c:	b2db      	uxtb	r3, r3
 800723e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b22      	cmp	r3, #34	; 0x22
 800724a:	d108      	bne.n	800725e <UART_DMAError+0x7a>
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d005      	beq.n	800725e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	2200      	movs	r2, #0
 8007256:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007258:	68b8      	ldr	r0, [r7, #8]
 800725a:	f000 f941 	bl	80074e0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007262:	f043 0210 	orr.w	r2, r3, #16
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800726a:	68b8      	ldr	r0, [r7, #8]
 800726c:	f7ff ff02 	bl	8007074 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007270:	bf00      	nop
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b090      	sub	sp, #64	; 0x40
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	603b      	str	r3, [r7, #0]
 8007284:	4613      	mov	r3, r2
 8007286:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007288:	e050      	b.n	800732c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800728a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800728c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007290:	d04c      	beq.n	800732c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007294:	2b00      	cmp	r3, #0
 8007296:	d007      	beq.n	80072a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007298:	f7fb fe80 	bl	8002f9c <HAL_GetTick>
 800729c:	4602      	mov	r2, r0
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d241      	bcs.n	800732c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	330c      	adds	r3, #12
 80072ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b2:	e853 3f00 	ldrex	r3, [r3]
 80072b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	330c      	adds	r3, #12
 80072c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80072c8:	637a      	str	r2, [r7, #52]	; 0x34
 80072ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072d0:	e841 2300 	strex	r3, r2, [r1]
 80072d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80072d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1e5      	bne.n	80072a8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	3314      	adds	r3, #20
 80072e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	e853 3f00 	ldrex	r3, [r3]
 80072ea:	613b      	str	r3, [r7, #16]
   return(result);
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	f023 0301 	bic.w	r3, r3, #1
 80072f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3314      	adds	r3, #20
 80072fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072fc:	623a      	str	r2, [r7, #32]
 80072fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007300:	69f9      	ldr	r1, [r7, #28]
 8007302:	6a3a      	ldr	r2, [r7, #32]
 8007304:	e841 2300 	strex	r3, r2, [r1]
 8007308:	61bb      	str	r3, [r7, #24]
   return(result);
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d1e5      	bne.n	80072dc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2220      	movs	r2, #32
 8007314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2220      	movs	r2, #32
 800731c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	e00f      	b.n	800734c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	4013      	ands	r3, r2
 8007336:	68ba      	ldr	r2, [r7, #8]
 8007338:	429a      	cmp	r2, r3
 800733a:	bf0c      	ite	eq
 800733c:	2301      	moveq	r3, #1
 800733e:	2300      	movne	r3, #0
 8007340:	b2db      	uxtb	r3, r3
 8007342:	461a      	mov	r2, r3
 8007344:	79fb      	ldrb	r3, [r7, #7]
 8007346:	429a      	cmp	r2, r3
 8007348:	d09f      	beq.n	800728a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3740      	adds	r7, #64	; 0x40
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b098      	sub	sp, #96	; 0x60
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	4613      	mov	r3, r2
 8007360:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	88fa      	ldrh	r2, [r7, #6]
 800736c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2222      	movs	r2, #34	; 0x22
 8007378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007380:	4a40      	ldr	r2, [pc, #256]	; (8007484 <UART_Start_Receive_DMA+0x130>)
 8007382:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007388:	4a3f      	ldr	r2, [pc, #252]	; (8007488 <UART_Start_Receive_DMA+0x134>)
 800738a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007390:	4a3e      	ldr	r2, [pc, #248]	; (800748c <UART_Start_Receive_DMA+0x138>)
 8007392:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007398:	2200      	movs	r2, #0
 800739a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800739c:	f107 0308 	add.w	r3, r7, #8
 80073a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	3304      	adds	r3, #4
 80073ac:	4619      	mov	r1, r3
 80073ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	88fb      	ldrh	r3, [r7, #6]
 80073b4:	f7fb ffe2 	bl	800337c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80073b8:	2300      	movs	r3, #0
 80073ba:	613b      	str	r3, [r7, #16]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	613b      	str	r3, [r7, #16]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	613b      	str	r3, [r7, #16]
 80073cc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d019      	beq.n	8007412 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	330c      	adds	r3, #12
 80073e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073e8:	e853 3f00 	ldrex	r3, [r3]
 80073ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	330c      	adds	r3, #12
 80073fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073fe:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007400:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007402:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007404:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007406:	e841 2300 	strex	r3, r2, [r1]
 800740a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800740c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1e5      	bne.n	80073de <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	3314      	adds	r3, #20
 8007418:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800741c:	e853 3f00 	ldrex	r3, [r3]
 8007420:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007424:	f043 0301 	orr.w	r3, r3, #1
 8007428:	657b      	str	r3, [r7, #84]	; 0x54
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	3314      	adds	r3, #20
 8007430:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007432:	63ba      	str	r2, [r7, #56]	; 0x38
 8007434:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007436:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007438:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800743a:	e841 2300 	strex	r3, r2, [r1]
 800743e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1e5      	bne.n	8007412 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	3314      	adds	r3, #20
 800744c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	e853 3f00 	ldrex	r3, [r3]
 8007454:	617b      	str	r3, [r7, #20]
   return(result);
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800745c:	653b      	str	r3, [r7, #80]	; 0x50
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	3314      	adds	r3, #20
 8007464:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007466:	627a      	str	r2, [r7, #36]	; 0x24
 8007468:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746a:	6a39      	ldr	r1, [r7, #32]
 800746c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800746e:	e841 2300 	strex	r3, r2, [r1]
 8007472:	61fb      	str	r3, [r7, #28]
   return(result);
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d1e5      	bne.n	8007446 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3760      	adds	r7, #96	; 0x60
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	08007089 	.word	0x08007089
 8007488:	080071af 	.word	0x080071af
 800748c:	080071e5 	.word	0x080071e5

08007490 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007490:	b480      	push	{r7}
 8007492:	b089      	sub	sp, #36	; 0x24
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	330c      	adds	r3, #12
 800749e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	e853 3f00 	ldrex	r3, [r3]
 80074a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80074ae:	61fb      	str	r3, [r7, #28]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	330c      	adds	r3, #12
 80074b6:	69fa      	ldr	r2, [r7, #28]
 80074b8:	61ba      	str	r2, [r7, #24]
 80074ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074bc:	6979      	ldr	r1, [r7, #20]
 80074be:	69ba      	ldr	r2, [r7, #24]
 80074c0:	e841 2300 	strex	r3, r2, [r1]
 80074c4:	613b      	str	r3, [r7, #16]
   return(result);
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1e5      	bne.n	8007498 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2220      	movs	r2, #32
 80074d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80074d4:	bf00      	nop
 80074d6:	3724      	adds	r7, #36	; 0x24
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b095      	sub	sp, #84	; 0x54
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	330c      	adds	r3, #12
 80074ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f2:	e853 3f00 	ldrex	r3, [r3]
 80074f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80074f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	330c      	adds	r3, #12
 8007506:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007508:	643a      	str	r2, [r7, #64]	; 0x40
 800750a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800750e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007510:	e841 2300 	strex	r3, r2, [r1]
 8007514:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1e5      	bne.n	80074e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	3314      	adds	r3, #20
 8007522:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007524:	6a3b      	ldr	r3, [r7, #32]
 8007526:	e853 3f00 	ldrex	r3, [r3]
 800752a:	61fb      	str	r3, [r7, #28]
   return(result);
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	f023 0301 	bic.w	r3, r3, #1
 8007532:	64bb      	str	r3, [r7, #72]	; 0x48
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	3314      	adds	r3, #20
 800753a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800753c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800753e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007540:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007544:	e841 2300 	strex	r3, r2, [r1]
 8007548:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800754a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1e5      	bne.n	800751c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007554:	2b01      	cmp	r3, #1
 8007556:	d119      	bne.n	800758c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	330c      	adds	r3, #12
 800755e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	e853 3f00 	ldrex	r3, [r3]
 8007566:	60bb      	str	r3, [r7, #8]
   return(result);
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	f023 0310 	bic.w	r3, r3, #16
 800756e:	647b      	str	r3, [r7, #68]	; 0x44
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	330c      	adds	r3, #12
 8007576:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007578:	61ba      	str	r2, [r7, #24]
 800757a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757c:	6979      	ldr	r1, [r7, #20]
 800757e:	69ba      	ldr	r2, [r7, #24]
 8007580:	e841 2300 	strex	r3, r2, [r1]
 8007584:	613b      	str	r3, [r7, #16]
   return(result);
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1e5      	bne.n	8007558 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2220      	movs	r2, #32
 8007590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	631a      	str	r2, [r3, #48]	; 0x30
}
 800759a:	bf00      	nop
 800759c:	3754      	adds	r7, #84	; 0x54
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b084      	sub	sp, #16
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2200      	movs	r2, #0
 80075be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f7ff fd57 	bl	8007074 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075c6:	bf00      	nop
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80075ce:	b480      	push	{r7}
 80075d0:	b085      	sub	sp, #20
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b21      	cmp	r3, #33	; 0x21
 80075e0:	d13e      	bne.n	8007660 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ea:	d114      	bne.n	8007616 <UART_Transmit_IT+0x48>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d110      	bne.n	8007616 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a1b      	ldr	r3, [r3, #32]
 80075f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	881b      	ldrh	r3, [r3, #0]
 80075fe:	461a      	mov	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007608:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a1b      	ldr	r3, [r3, #32]
 800760e:	1c9a      	adds	r2, r3, #2
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	621a      	str	r2, [r3, #32]
 8007614:	e008      	b.n	8007628 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a1b      	ldr	r3, [r3, #32]
 800761a:	1c59      	adds	r1, r3, #1
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	6211      	str	r1, [r2, #32]
 8007620:	781a      	ldrb	r2, [r3, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800762c:	b29b      	uxth	r3, r3
 800762e:	3b01      	subs	r3, #1
 8007630:	b29b      	uxth	r3, r3
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	4619      	mov	r1, r3
 8007636:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10f      	bne.n	800765c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68da      	ldr	r2, [r3, #12]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800764a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68da      	ldr	r2, [r3, #12]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800765a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800765c:	2300      	movs	r3, #0
 800765e:	e000      	b.n	8007662 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007660:	2302      	movs	r3, #2
  }
}
 8007662:	4618      	mov	r0, r3
 8007664:	3714      	adds	r7, #20
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b082      	sub	sp, #8
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68da      	ldr	r2, [r3, #12]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007684:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2220      	movs	r2, #32
 800768a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f7ff fcd2 	bl	8007038 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b08c      	sub	sp, #48	; 0x30
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	2b22      	cmp	r3, #34	; 0x22
 80076b0:	f040 80ab 	bne.w	800780a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076bc:	d117      	bne.n	80076ee <UART_Receive_IT+0x50>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d113      	bne.n	80076ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80076c6:	2300      	movs	r3, #0
 80076c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076dc:	b29a      	uxth	r2, r3
 80076de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e6:	1c9a      	adds	r2, r3, #2
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	629a      	str	r2, [r3, #40]	; 0x28
 80076ec:	e026      	b.n	800773c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80076f4:	2300      	movs	r3, #0
 80076f6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007700:	d007      	beq.n	8007712 <UART_Receive_IT+0x74>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d10a      	bne.n	8007720 <UART_Receive_IT+0x82>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d106      	bne.n	8007720 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	b2da      	uxtb	r2, r3
 800771a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771c:	701a      	strb	r2, [r3, #0]
 800771e:	e008      	b.n	8007732 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	b2db      	uxtb	r3, r3
 8007728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800772c:	b2da      	uxtb	r2, r3
 800772e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007730:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007736:	1c5a      	adds	r2, r3, #1
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007740:	b29b      	uxth	r3, r3
 8007742:	3b01      	subs	r3, #1
 8007744:	b29b      	uxth	r3, r3
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	4619      	mov	r1, r3
 800774a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800774c:	2b00      	cmp	r3, #0
 800774e:	d15a      	bne.n	8007806 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68da      	ldr	r2, [r3, #12]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f022 0220 	bic.w	r2, r2, #32
 800775e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68da      	ldr	r2, [r3, #12]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800776e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	695a      	ldr	r2, [r3, #20]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f022 0201 	bic.w	r2, r2, #1
 800777e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2220      	movs	r2, #32
 8007784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800778c:	2b01      	cmp	r3, #1
 800778e:	d135      	bne.n	80077fc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	330c      	adds	r3, #12
 800779c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	e853 3f00 	ldrex	r3, [r3]
 80077a4:	613b      	str	r3, [r7, #16]
   return(result);
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	f023 0310 	bic.w	r3, r3, #16
 80077ac:	627b      	str	r3, [r7, #36]	; 0x24
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	330c      	adds	r3, #12
 80077b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077b6:	623a      	str	r2, [r7, #32]
 80077b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ba:	69f9      	ldr	r1, [r7, #28]
 80077bc:	6a3a      	ldr	r2, [r7, #32]
 80077be:	e841 2300 	strex	r3, r2, [r1]
 80077c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1e5      	bne.n	8007796 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0310 	and.w	r3, r3, #16
 80077d4:	2b10      	cmp	r3, #16
 80077d6:	d10a      	bne.n	80077ee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80077d8:	2300      	movs	r3, #0
 80077da:	60fb      	str	r3, [r7, #12]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	60fb      	str	r3, [r7, #12]
 80077ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80077f2:	4619      	mov	r1, r3
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f7f9 fc61 	bl	80010bc <HAL_UARTEx_RxEventCallback>
 80077fa:	e002      	b.n	8007802 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f7ff fc25 	bl	800704c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007802:	2300      	movs	r3, #0
 8007804:	e002      	b.n	800780c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007806:	2300      	movs	r3, #0
 8007808:	e000      	b.n	800780c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800780a:	2302      	movs	r3, #2
  }
}
 800780c:	4618      	mov	r0, r3
 800780e:	3730      	adds	r7, #48	; 0x30
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007818:	b0c0      	sub	sp, #256	; 0x100
 800781a:	af00      	add	r7, sp, #0
 800781c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800782c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007830:	68d9      	ldr	r1, [r3, #12]
 8007832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	ea40 0301 	orr.w	r3, r0, r1
 800783c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800783e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007842:	689a      	ldr	r2, [r3, #8]
 8007844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	431a      	orrs	r2, r3
 800784c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	431a      	orrs	r2, r3
 8007854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	4313      	orrs	r3, r2
 800785c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800786c:	f021 010c 	bic.w	r1, r1, #12
 8007870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800787a:	430b      	orrs	r3, r1
 800787c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800787e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800788a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800788e:	6999      	ldr	r1, [r3, #24]
 8007890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	ea40 0301 	orr.w	r3, r0, r1
 800789a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800789c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	4b8f      	ldr	r3, [pc, #572]	; (8007ae0 <UART_SetConfig+0x2cc>)
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d005      	beq.n	80078b4 <UART_SetConfig+0xa0>
 80078a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	4b8d      	ldr	r3, [pc, #564]	; (8007ae4 <UART_SetConfig+0x2d0>)
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d104      	bne.n	80078be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80078b4:	f7fe fadc 	bl	8005e70 <HAL_RCC_GetPCLK2Freq>
 80078b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80078bc:	e003      	b.n	80078c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80078be:	f7fe fac3 	bl	8005e48 <HAL_RCC_GetPCLK1Freq>
 80078c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078ca:	69db      	ldr	r3, [r3, #28]
 80078cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078d0:	f040 810c 	bne.w	8007aec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80078d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078d8:	2200      	movs	r2, #0
 80078da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80078de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80078e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80078e6:	4622      	mov	r2, r4
 80078e8:	462b      	mov	r3, r5
 80078ea:	1891      	adds	r1, r2, r2
 80078ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80078ee:	415b      	adcs	r3, r3
 80078f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80078f6:	4621      	mov	r1, r4
 80078f8:	eb12 0801 	adds.w	r8, r2, r1
 80078fc:	4629      	mov	r1, r5
 80078fe:	eb43 0901 	adc.w	r9, r3, r1
 8007902:	f04f 0200 	mov.w	r2, #0
 8007906:	f04f 0300 	mov.w	r3, #0
 800790a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800790e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007912:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007916:	4690      	mov	r8, r2
 8007918:	4699      	mov	r9, r3
 800791a:	4623      	mov	r3, r4
 800791c:	eb18 0303 	adds.w	r3, r8, r3
 8007920:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007924:	462b      	mov	r3, r5
 8007926:	eb49 0303 	adc.w	r3, r9, r3
 800792a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800792e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800793a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800793e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007942:	460b      	mov	r3, r1
 8007944:	18db      	adds	r3, r3, r3
 8007946:	653b      	str	r3, [r7, #80]	; 0x50
 8007948:	4613      	mov	r3, r2
 800794a:	eb42 0303 	adc.w	r3, r2, r3
 800794e:	657b      	str	r3, [r7, #84]	; 0x54
 8007950:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007954:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007958:	f7f8 fcb2 	bl	80002c0 <__aeabi_uldivmod>
 800795c:	4602      	mov	r2, r0
 800795e:	460b      	mov	r3, r1
 8007960:	4b61      	ldr	r3, [pc, #388]	; (8007ae8 <UART_SetConfig+0x2d4>)
 8007962:	fba3 2302 	umull	r2, r3, r3, r2
 8007966:	095b      	lsrs	r3, r3, #5
 8007968:	011c      	lsls	r4, r3, #4
 800796a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800796e:	2200      	movs	r2, #0
 8007970:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007974:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007978:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800797c:	4642      	mov	r2, r8
 800797e:	464b      	mov	r3, r9
 8007980:	1891      	adds	r1, r2, r2
 8007982:	64b9      	str	r1, [r7, #72]	; 0x48
 8007984:	415b      	adcs	r3, r3
 8007986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007988:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800798c:	4641      	mov	r1, r8
 800798e:	eb12 0a01 	adds.w	sl, r2, r1
 8007992:	4649      	mov	r1, r9
 8007994:	eb43 0b01 	adc.w	fp, r3, r1
 8007998:	f04f 0200 	mov.w	r2, #0
 800799c:	f04f 0300 	mov.w	r3, #0
 80079a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80079a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80079a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079ac:	4692      	mov	sl, r2
 80079ae:	469b      	mov	fp, r3
 80079b0:	4643      	mov	r3, r8
 80079b2:	eb1a 0303 	adds.w	r3, sl, r3
 80079b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079ba:	464b      	mov	r3, r9
 80079bc:	eb4b 0303 	adc.w	r3, fp, r3
 80079c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80079c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80079d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80079d8:	460b      	mov	r3, r1
 80079da:	18db      	adds	r3, r3, r3
 80079dc:	643b      	str	r3, [r7, #64]	; 0x40
 80079de:	4613      	mov	r3, r2
 80079e0:	eb42 0303 	adc.w	r3, r2, r3
 80079e4:	647b      	str	r3, [r7, #68]	; 0x44
 80079e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80079ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80079ee:	f7f8 fc67 	bl	80002c0 <__aeabi_uldivmod>
 80079f2:	4602      	mov	r2, r0
 80079f4:	460b      	mov	r3, r1
 80079f6:	4611      	mov	r1, r2
 80079f8:	4b3b      	ldr	r3, [pc, #236]	; (8007ae8 <UART_SetConfig+0x2d4>)
 80079fa:	fba3 2301 	umull	r2, r3, r3, r1
 80079fe:	095b      	lsrs	r3, r3, #5
 8007a00:	2264      	movs	r2, #100	; 0x64
 8007a02:	fb02 f303 	mul.w	r3, r2, r3
 8007a06:	1acb      	subs	r3, r1, r3
 8007a08:	00db      	lsls	r3, r3, #3
 8007a0a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007a0e:	4b36      	ldr	r3, [pc, #216]	; (8007ae8 <UART_SetConfig+0x2d4>)
 8007a10:	fba3 2302 	umull	r2, r3, r3, r2
 8007a14:	095b      	lsrs	r3, r3, #5
 8007a16:	005b      	lsls	r3, r3, #1
 8007a18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a1c:	441c      	add	r4, r3
 8007a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a22:	2200      	movs	r2, #0
 8007a24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a28:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007a2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007a30:	4642      	mov	r2, r8
 8007a32:	464b      	mov	r3, r9
 8007a34:	1891      	adds	r1, r2, r2
 8007a36:	63b9      	str	r1, [r7, #56]	; 0x38
 8007a38:	415b      	adcs	r3, r3
 8007a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007a40:	4641      	mov	r1, r8
 8007a42:	1851      	adds	r1, r2, r1
 8007a44:	6339      	str	r1, [r7, #48]	; 0x30
 8007a46:	4649      	mov	r1, r9
 8007a48:	414b      	adcs	r3, r1
 8007a4a:	637b      	str	r3, [r7, #52]	; 0x34
 8007a4c:	f04f 0200 	mov.w	r2, #0
 8007a50:	f04f 0300 	mov.w	r3, #0
 8007a54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007a58:	4659      	mov	r1, fp
 8007a5a:	00cb      	lsls	r3, r1, #3
 8007a5c:	4651      	mov	r1, sl
 8007a5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a62:	4651      	mov	r1, sl
 8007a64:	00ca      	lsls	r2, r1, #3
 8007a66:	4610      	mov	r0, r2
 8007a68:	4619      	mov	r1, r3
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	4642      	mov	r2, r8
 8007a6e:	189b      	adds	r3, r3, r2
 8007a70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a74:	464b      	mov	r3, r9
 8007a76:	460a      	mov	r2, r1
 8007a78:	eb42 0303 	adc.w	r3, r2, r3
 8007a7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007a8c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007a90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007a94:	460b      	mov	r3, r1
 8007a96:	18db      	adds	r3, r3, r3
 8007a98:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	eb42 0303 	adc.w	r3, r2, r3
 8007aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007aa2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007aa6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007aaa:	f7f8 fc09 	bl	80002c0 <__aeabi_uldivmod>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	4b0d      	ldr	r3, [pc, #52]	; (8007ae8 <UART_SetConfig+0x2d4>)
 8007ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ab8:	095b      	lsrs	r3, r3, #5
 8007aba:	2164      	movs	r1, #100	; 0x64
 8007abc:	fb01 f303 	mul.w	r3, r1, r3
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	00db      	lsls	r3, r3, #3
 8007ac4:	3332      	adds	r3, #50	; 0x32
 8007ac6:	4a08      	ldr	r2, [pc, #32]	; (8007ae8 <UART_SetConfig+0x2d4>)
 8007ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8007acc:	095b      	lsrs	r3, r3, #5
 8007ace:	f003 0207 	and.w	r2, r3, #7
 8007ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4422      	add	r2, r4
 8007ada:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007adc:	e105      	b.n	8007cea <UART_SetConfig+0x4d6>
 8007ade:	bf00      	nop
 8007ae0:	40011000 	.word	0x40011000
 8007ae4:	40011400 	.word	0x40011400
 8007ae8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007aec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007af0:	2200      	movs	r2, #0
 8007af2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007af6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007afa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007afe:	4642      	mov	r2, r8
 8007b00:	464b      	mov	r3, r9
 8007b02:	1891      	adds	r1, r2, r2
 8007b04:	6239      	str	r1, [r7, #32]
 8007b06:	415b      	adcs	r3, r3
 8007b08:	627b      	str	r3, [r7, #36]	; 0x24
 8007b0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b0e:	4641      	mov	r1, r8
 8007b10:	1854      	adds	r4, r2, r1
 8007b12:	4649      	mov	r1, r9
 8007b14:	eb43 0501 	adc.w	r5, r3, r1
 8007b18:	f04f 0200 	mov.w	r2, #0
 8007b1c:	f04f 0300 	mov.w	r3, #0
 8007b20:	00eb      	lsls	r3, r5, #3
 8007b22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b26:	00e2      	lsls	r2, r4, #3
 8007b28:	4614      	mov	r4, r2
 8007b2a:	461d      	mov	r5, r3
 8007b2c:	4643      	mov	r3, r8
 8007b2e:	18e3      	adds	r3, r4, r3
 8007b30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007b34:	464b      	mov	r3, r9
 8007b36:	eb45 0303 	adc.w	r3, r5, r3
 8007b3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007b4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007b4e:	f04f 0200 	mov.w	r2, #0
 8007b52:	f04f 0300 	mov.w	r3, #0
 8007b56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007b5a:	4629      	mov	r1, r5
 8007b5c:	008b      	lsls	r3, r1, #2
 8007b5e:	4621      	mov	r1, r4
 8007b60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b64:	4621      	mov	r1, r4
 8007b66:	008a      	lsls	r2, r1, #2
 8007b68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007b6c:	f7f8 fba8 	bl	80002c0 <__aeabi_uldivmod>
 8007b70:	4602      	mov	r2, r0
 8007b72:	460b      	mov	r3, r1
 8007b74:	4b60      	ldr	r3, [pc, #384]	; (8007cf8 <UART_SetConfig+0x4e4>)
 8007b76:	fba3 2302 	umull	r2, r3, r3, r2
 8007b7a:	095b      	lsrs	r3, r3, #5
 8007b7c:	011c      	lsls	r4, r3, #4
 8007b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b82:	2200      	movs	r2, #0
 8007b84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007b88:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007b8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007b90:	4642      	mov	r2, r8
 8007b92:	464b      	mov	r3, r9
 8007b94:	1891      	adds	r1, r2, r2
 8007b96:	61b9      	str	r1, [r7, #24]
 8007b98:	415b      	adcs	r3, r3
 8007b9a:	61fb      	str	r3, [r7, #28]
 8007b9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ba0:	4641      	mov	r1, r8
 8007ba2:	1851      	adds	r1, r2, r1
 8007ba4:	6139      	str	r1, [r7, #16]
 8007ba6:	4649      	mov	r1, r9
 8007ba8:	414b      	adcs	r3, r1
 8007baa:	617b      	str	r3, [r7, #20]
 8007bac:	f04f 0200 	mov.w	r2, #0
 8007bb0:	f04f 0300 	mov.w	r3, #0
 8007bb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007bb8:	4659      	mov	r1, fp
 8007bba:	00cb      	lsls	r3, r1, #3
 8007bbc:	4651      	mov	r1, sl
 8007bbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bc2:	4651      	mov	r1, sl
 8007bc4:	00ca      	lsls	r2, r1, #3
 8007bc6:	4610      	mov	r0, r2
 8007bc8:	4619      	mov	r1, r3
 8007bca:	4603      	mov	r3, r0
 8007bcc:	4642      	mov	r2, r8
 8007bce:	189b      	adds	r3, r3, r2
 8007bd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007bd4:	464b      	mov	r3, r9
 8007bd6:	460a      	mov	r2, r1
 8007bd8:	eb42 0303 	adc.w	r3, r2, r3
 8007bdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	67bb      	str	r3, [r7, #120]	; 0x78
 8007bea:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007bec:	f04f 0200 	mov.w	r2, #0
 8007bf0:	f04f 0300 	mov.w	r3, #0
 8007bf4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007bf8:	4649      	mov	r1, r9
 8007bfa:	008b      	lsls	r3, r1, #2
 8007bfc:	4641      	mov	r1, r8
 8007bfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c02:	4641      	mov	r1, r8
 8007c04:	008a      	lsls	r2, r1, #2
 8007c06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007c0a:	f7f8 fb59 	bl	80002c0 <__aeabi_uldivmod>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	460b      	mov	r3, r1
 8007c12:	4b39      	ldr	r3, [pc, #228]	; (8007cf8 <UART_SetConfig+0x4e4>)
 8007c14:	fba3 1302 	umull	r1, r3, r3, r2
 8007c18:	095b      	lsrs	r3, r3, #5
 8007c1a:	2164      	movs	r1, #100	; 0x64
 8007c1c:	fb01 f303 	mul.w	r3, r1, r3
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	011b      	lsls	r3, r3, #4
 8007c24:	3332      	adds	r3, #50	; 0x32
 8007c26:	4a34      	ldr	r2, [pc, #208]	; (8007cf8 <UART_SetConfig+0x4e4>)
 8007c28:	fba2 2303 	umull	r2, r3, r2, r3
 8007c2c:	095b      	lsrs	r3, r3, #5
 8007c2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c32:	441c      	add	r4, r3
 8007c34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c38:	2200      	movs	r2, #0
 8007c3a:	673b      	str	r3, [r7, #112]	; 0x70
 8007c3c:	677a      	str	r2, [r7, #116]	; 0x74
 8007c3e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007c42:	4642      	mov	r2, r8
 8007c44:	464b      	mov	r3, r9
 8007c46:	1891      	adds	r1, r2, r2
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	415b      	adcs	r3, r3
 8007c4c:	60fb      	str	r3, [r7, #12]
 8007c4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c52:	4641      	mov	r1, r8
 8007c54:	1851      	adds	r1, r2, r1
 8007c56:	6039      	str	r1, [r7, #0]
 8007c58:	4649      	mov	r1, r9
 8007c5a:	414b      	adcs	r3, r1
 8007c5c:	607b      	str	r3, [r7, #4]
 8007c5e:	f04f 0200 	mov.w	r2, #0
 8007c62:	f04f 0300 	mov.w	r3, #0
 8007c66:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007c6a:	4659      	mov	r1, fp
 8007c6c:	00cb      	lsls	r3, r1, #3
 8007c6e:	4651      	mov	r1, sl
 8007c70:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c74:	4651      	mov	r1, sl
 8007c76:	00ca      	lsls	r2, r1, #3
 8007c78:	4610      	mov	r0, r2
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	4642      	mov	r2, r8
 8007c80:	189b      	adds	r3, r3, r2
 8007c82:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c84:	464b      	mov	r3, r9
 8007c86:	460a      	mov	r2, r1
 8007c88:	eb42 0303 	adc.w	r3, r2, r3
 8007c8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	663b      	str	r3, [r7, #96]	; 0x60
 8007c98:	667a      	str	r2, [r7, #100]	; 0x64
 8007c9a:	f04f 0200 	mov.w	r2, #0
 8007c9e:	f04f 0300 	mov.w	r3, #0
 8007ca2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007ca6:	4649      	mov	r1, r9
 8007ca8:	008b      	lsls	r3, r1, #2
 8007caa:	4641      	mov	r1, r8
 8007cac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cb0:	4641      	mov	r1, r8
 8007cb2:	008a      	lsls	r2, r1, #2
 8007cb4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007cb8:	f7f8 fb02 	bl	80002c0 <__aeabi_uldivmod>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	4b0d      	ldr	r3, [pc, #52]	; (8007cf8 <UART_SetConfig+0x4e4>)
 8007cc2:	fba3 1302 	umull	r1, r3, r3, r2
 8007cc6:	095b      	lsrs	r3, r3, #5
 8007cc8:	2164      	movs	r1, #100	; 0x64
 8007cca:	fb01 f303 	mul.w	r3, r1, r3
 8007cce:	1ad3      	subs	r3, r2, r3
 8007cd0:	011b      	lsls	r3, r3, #4
 8007cd2:	3332      	adds	r3, #50	; 0x32
 8007cd4:	4a08      	ldr	r2, [pc, #32]	; (8007cf8 <UART_SetConfig+0x4e4>)
 8007cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cda:	095b      	lsrs	r3, r3, #5
 8007cdc:	f003 020f 	and.w	r2, r3, #15
 8007ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4422      	add	r2, r4
 8007ce8:	609a      	str	r2, [r3, #8]
}
 8007cea:	bf00      	nop
 8007cec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cf6:	bf00      	nop
 8007cf8:	51eb851f 	.word	0x51eb851f

08007cfc <__errno>:
 8007cfc:	4b01      	ldr	r3, [pc, #4]	; (8007d04 <__errno+0x8>)
 8007cfe:	6818      	ldr	r0, [r3, #0]
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	200000d4 	.word	0x200000d4

08007d08 <__libc_init_array>:
 8007d08:	b570      	push	{r4, r5, r6, lr}
 8007d0a:	4d0d      	ldr	r5, [pc, #52]	; (8007d40 <__libc_init_array+0x38>)
 8007d0c:	4c0d      	ldr	r4, [pc, #52]	; (8007d44 <__libc_init_array+0x3c>)
 8007d0e:	1b64      	subs	r4, r4, r5
 8007d10:	10a4      	asrs	r4, r4, #2
 8007d12:	2600      	movs	r6, #0
 8007d14:	42a6      	cmp	r6, r4
 8007d16:	d109      	bne.n	8007d2c <__libc_init_array+0x24>
 8007d18:	4d0b      	ldr	r5, [pc, #44]	; (8007d48 <__libc_init_array+0x40>)
 8007d1a:	4c0c      	ldr	r4, [pc, #48]	; (8007d4c <__libc_init_array+0x44>)
 8007d1c:	f001 fa24 	bl	8009168 <_init>
 8007d20:	1b64      	subs	r4, r4, r5
 8007d22:	10a4      	asrs	r4, r4, #2
 8007d24:	2600      	movs	r6, #0
 8007d26:	42a6      	cmp	r6, r4
 8007d28:	d105      	bne.n	8007d36 <__libc_init_array+0x2e>
 8007d2a:	bd70      	pop	{r4, r5, r6, pc}
 8007d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d30:	4798      	blx	r3
 8007d32:	3601      	adds	r6, #1
 8007d34:	e7ee      	b.n	8007d14 <__libc_init_array+0xc>
 8007d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d3a:	4798      	blx	r3
 8007d3c:	3601      	adds	r6, #1
 8007d3e:	e7f2      	b.n	8007d26 <__libc_init_array+0x1e>
 8007d40:	08009408 	.word	0x08009408
 8007d44:	08009408 	.word	0x08009408
 8007d48:	08009408 	.word	0x08009408
 8007d4c:	0800940c 	.word	0x0800940c

08007d50 <memcmp>:
 8007d50:	b510      	push	{r4, lr}
 8007d52:	3901      	subs	r1, #1
 8007d54:	4402      	add	r2, r0
 8007d56:	4290      	cmp	r0, r2
 8007d58:	d101      	bne.n	8007d5e <memcmp+0xe>
 8007d5a:	2000      	movs	r0, #0
 8007d5c:	e005      	b.n	8007d6a <memcmp+0x1a>
 8007d5e:	7803      	ldrb	r3, [r0, #0]
 8007d60:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007d64:	42a3      	cmp	r3, r4
 8007d66:	d001      	beq.n	8007d6c <memcmp+0x1c>
 8007d68:	1b18      	subs	r0, r3, r4
 8007d6a:	bd10      	pop	{r4, pc}
 8007d6c:	3001      	adds	r0, #1
 8007d6e:	e7f2      	b.n	8007d56 <memcmp+0x6>

08007d70 <memcpy>:
 8007d70:	440a      	add	r2, r1
 8007d72:	4291      	cmp	r1, r2
 8007d74:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d78:	d100      	bne.n	8007d7c <memcpy+0xc>
 8007d7a:	4770      	bx	lr
 8007d7c:	b510      	push	{r4, lr}
 8007d7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d86:	4291      	cmp	r1, r2
 8007d88:	d1f9      	bne.n	8007d7e <memcpy+0xe>
 8007d8a:	bd10      	pop	{r4, pc}

08007d8c <memset>:
 8007d8c:	4402      	add	r2, r0
 8007d8e:	4603      	mov	r3, r0
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d100      	bne.n	8007d96 <memset+0xa>
 8007d94:	4770      	bx	lr
 8007d96:	f803 1b01 	strb.w	r1, [r3], #1
 8007d9a:	e7f9      	b.n	8007d90 <memset+0x4>

08007d9c <iprintf>:
 8007d9c:	b40f      	push	{r0, r1, r2, r3}
 8007d9e:	4b0a      	ldr	r3, [pc, #40]	; (8007dc8 <iprintf+0x2c>)
 8007da0:	b513      	push	{r0, r1, r4, lr}
 8007da2:	681c      	ldr	r4, [r3, #0]
 8007da4:	b124      	cbz	r4, 8007db0 <iprintf+0x14>
 8007da6:	69a3      	ldr	r3, [r4, #24]
 8007da8:	b913      	cbnz	r3, 8007db0 <iprintf+0x14>
 8007daa:	4620      	mov	r0, r4
 8007dac:	f000 fa92 	bl	80082d4 <__sinit>
 8007db0:	ab05      	add	r3, sp, #20
 8007db2:	9a04      	ldr	r2, [sp, #16]
 8007db4:	68a1      	ldr	r1, [r4, #8]
 8007db6:	9301      	str	r3, [sp, #4]
 8007db8:	4620      	mov	r0, r4
 8007dba:	f000 fdf7 	bl	80089ac <_vfiprintf_r>
 8007dbe:	b002      	add	sp, #8
 8007dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dc4:	b004      	add	sp, #16
 8007dc6:	4770      	bx	lr
 8007dc8:	200000d4 	.word	0x200000d4

08007dcc <_puts_r>:
 8007dcc:	b570      	push	{r4, r5, r6, lr}
 8007dce:	460e      	mov	r6, r1
 8007dd0:	4605      	mov	r5, r0
 8007dd2:	b118      	cbz	r0, 8007ddc <_puts_r+0x10>
 8007dd4:	6983      	ldr	r3, [r0, #24]
 8007dd6:	b90b      	cbnz	r3, 8007ddc <_puts_r+0x10>
 8007dd8:	f000 fa7c 	bl	80082d4 <__sinit>
 8007ddc:	69ab      	ldr	r3, [r5, #24]
 8007dde:	68ac      	ldr	r4, [r5, #8]
 8007de0:	b913      	cbnz	r3, 8007de8 <_puts_r+0x1c>
 8007de2:	4628      	mov	r0, r5
 8007de4:	f000 fa76 	bl	80082d4 <__sinit>
 8007de8:	4b2c      	ldr	r3, [pc, #176]	; (8007e9c <_puts_r+0xd0>)
 8007dea:	429c      	cmp	r4, r3
 8007dec:	d120      	bne.n	8007e30 <_puts_r+0x64>
 8007dee:	686c      	ldr	r4, [r5, #4]
 8007df0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007df2:	07db      	lsls	r3, r3, #31
 8007df4:	d405      	bmi.n	8007e02 <_puts_r+0x36>
 8007df6:	89a3      	ldrh	r3, [r4, #12]
 8007df8:	0598      	lsls	r0, r3, #22
 8007dfa:	d402      	bmi.n	8007e02 <_puts_r+0x36>
 8007dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dfe:	f000 fb07 	bl	8008410 <__retarget_lock_acquire_recursive>
 8007e02:	89a3      	ldrh	r3, [r4, #12]
 8007e04:	0719      	lsls	r1, r3, #28
 8007e06:	d51d      	bpl.n	8007e44 <_puts_r+0x78>
 8007e08:	6923      	ldr	r3, [r4, #16]
 8007e0a:	b1db      	cbz	r3, 8007e44 <_puts_r+0x78>
 8007e0c:	3e01      	subs	r6, #1
 8007e0e:	68a3      	ldr	r3, [r4, #8]
 8007e10:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007e14:	3b01      	subs	r3, #1
 8007e16:	60a3      	str	r3, [r4, #8]
 8007e18:	bb39      	cbnz	r1, 8007e6a <_puts_r+0x9e>
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	da38      	bge.n	8007e90 <_puts_r+0xc4>
 8007e1e:	4622      	mov	r2, r4
 8007e20:	210a      	movs	r1, #10
 8007e22:	4628      	mov	r0, r5
 8007e24:	f000 f87c 	bl	8007f20 <__swbuf_r>
 8007e28:	3001      	adds	r0, #1
 8007e2a:	d011      	beq.n	8007e50 <_puts_r+0x84>
 8007e2c:	250a      	movs	r5, #10
 8007e2e:	e011      	b.n	8007e54 <_puts_r+0x88>
 8007e30:	4b1b      	ldr	r3, [pc, #108]	; (8007ea0 <_puts_r+0xd4>)
 8007e32:	429c      	cmp	r4, r3
 8007e34:	d101      	bne.n	8007e3a <_puts_r+0x6e>
 8007e36:	68ac      	ldr	r4, [r5, #8]
 8007e38:	e7da      	b.n	8007df0 <_puts_r+0x24>
 8007e3a:	4b1a      	ldr	r3, [pc, #104]	; (8007ea4 <_puts_r+0xd8>)
 8007e3c:	429c      	cmp	r4, r3
 8007e3e:	bf08      	it	eq
 8007e40:	68ec      	ldreq	r4, [r5, #12]
 8007e42:	e7d5      	b.n	8007df0 <_puts_r+0x24>
 8007e44:	4621      	mov	r1, r4
 8007e46:	4628      	mov	r0, r5
 8007e48:	f000 f8bc 	bl	8007fc4 <__swsetup_r>
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	d0dd      	beq.n	8007e0c <_puts_r+0x40>
 8007e50:	f04f 35ff 	mov.w	r5, #4294967295
 8007e54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e56:	07da      	lsls	r2, r3, #31
 8007e58:	d405      	bmi.n	8007e66 <_puts_r+0x9a>
 8007e5a:	89a3      	ldrh	r3, [r4, #12]
 8007e5c:	059b      	lsls	r3, r3, #22
 8007e5e:	d402      	bmi.n	8007e66 <_puts_r+0x9a>
 8007e60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e62:	f000 fad6 	bl	8008412 <__retarget_lock_release_recursive>
 8007e66:	4628      	mov	r0, r5
 8007e68:	bd70      	pop	{r4, r5, r6, pc}
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	da04      	bge.n	8007e78 <_puts_r+0xac>
 8007e6e:	69a2      	ldr	r2, [r4, #24]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	dc06      	bgt.n	8007e82 <_puts_r+0xb6>
 8007e74:	290a      	cmp	r1, #10
 8007e76:	d004      	beq.n	8007e82 <_puts_r+0xb6>
 8007e78:	6823      	ldr	r3, [r4, #0]
 8007e7a:	1c5a      	adds	r2, r3, #1
 8007e7c:	6022      	str	r2, [r4, #0]
 8007e7e:	7019      	strb	r1, [r3, #0]
 8007e80:	e7c5      	b.n	8007e0e <_puts_r+0x42>
 8007e82:	4622      	mov	r2, r4
 8007e84:	4628      	mov	r0, r5
 8007e86:	f000 f84b 	bl	8007f20 <__swbuf_r>
 8007e8a:	3001      	adds	r0, #1
 8007e8c:	d1bf      	bne.n	8007e0e <_puts_r+0x42>
 8007e8e:	e7df      	b.n	8007e50 <_puts_r+0x84>
 8007e90:	6823      	ldr	r3, [r4, #0]
 8007e92:	250a      	movs	r5, #10
 8007e94:	1c5a      	adds	r2, r3, #1
 8007e96:	6022      	str	r2, [r4, #0]
 8007e98:	701d      	strb	r5, [r3, #0]
 8007e9a:	e7db      	b.n	8007e54 <_puts_r+0x88>
 8007e9c:	0800938c 	.word	0x0800938c
 8007ea0:	080093ac 	.word	0x080093ac
 8007ea4:	0800936c 	.word	0x0800936c

08007ea8 <puts>:
 8007ea8:	4b02      	ldr	r3, [pc, #8]	; (8007eb4 <puts+0xc>)
 8007eaa:	4601      	mov	r1, r0
 8007eac:	6818      	ldr	r0, [r3, #0]
 8007eae:	f7ff bf8d 	b.w	8007dcc <_puts_r>
 8007eb2:	bf00      	nop
 8007eb4:	200000d4 	.word	0x200000d4

08007eb8 <sniprintf>:
 8007eb8:	b40c      	push	{r2, r3}
 8007eba:	b530      	push	{r4, r5, lr}
 8007ebc:	4b17      	ldr	r3, [pc, #92]	; (8007f1c <sniprintf+0x64>)
 8007ebe:	1e0c      	subs	r4, r1, #0
 8007ec0:	681d      	ldr	r5, [r3, #0]
 8007ec2:	b09d      	sub	sp, #116	; 0x74
 8007ec4:	da08      	bge.n	8007ed8 <sniprintf+0x20>
 8007ec6:	238b      	movs	r3, #139	; 0x8b
 8007ec8:	602b      	str	r3, [r5, #0]
 8007eca:	f04f 30ff 	mov.w	r0, #4294967295
 8007ece:	b01d      	add	sp, #116	; 0x74
 8007ed0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ed4:	b002      	add	sp, #8
 8007ed6:	4770      	bx	lr
 8007ed8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007edc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007ee0:	bf14      	ite	ne
 8007ee2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007ee6:	4623      	moveq	r3, r4
 8007ee8:	9304      	str	r3, [sp, #16]
 8007eea:	9307      	str	r3, [sp, #28]
 8007eec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007ef0:	9002      	str	r0, [sp, #8]
 8007ef2:	9006      	str	r0, [sp, #24]
 8007ef4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007ef8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007efa:	ab21      	add	r3, sp, #132	; 0x84
 8007efc:	a902      	add	r1, sp, #8
 8007efe:	4628      	mov	r0, r5
 8007f00:	9301      	str	r3, [sp, #4]
 8007f02:	f000 fc29 	bl	8008758 <_svfiprintf_r>
 8007f06:	1c43      	adds	r3, r0, #1
 8007f08:	bfbc      	itt	lt
 8007f0a:	238b      	movlt	r3, #139	; 0x8b
 8007f0c:	602b      	strlt	r3, [r5, #0]
 8007f0e:	2c00      	cmp	r4, #0
 8007f10:	d0dd      	beq.n	8007ece <sniprintf+0x16>
 8007f12:	9b02      	ldr	r3, [sp, #8]
 8007f14:	2200      	movs	r2, #0
 8007f16:	701a      	strb	r2, [r3, #0]
 8007f18:	e7d9      	b.n	8007ece <sniprintf+0x16>
 8007f1a:	bf00      	nop
 8007f1c:	200000d4 	.word	0x200000d4

08007f20 <__swbuf_r>:
 8007f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f22:	460e      	mov	r6, r1
 8007f24:	4614      	mov	r4, r2
 8007f26:	4605      	mov	r5, r0
 8007f28:	b118      	cbz	r0, 8007f32 <__swbuf_r+0x12>
 8007f2a:	6983      	ldr	r3, [r0, #24]
 8007f2c:	b90b      	cbnz	r3, 8007f32 <__swbuf_r+0x12>
 8007f2e:	f000 f9d1 	bl	80082d4 <__sinit>
 8007f32:	4b21      	ldr	r3, [pc, #132]	; (8007fb8 <__swbuf_r+0x98>)
 8007f34:	429c      	cmp	r4, r3
 8007f36:	d12b      	bne.n	8007f90 <__swbuf_r+0x70>
 8007f38:	686c      	ldr	r4, [r5, #4]
 8007f3a:	69a3      	ldr	r3, [r4, #24]
 8007f3c:	60a3      	str	r3, [r4, #8]
 8007f3e:	89a3      	ldrh	r3, [r4, #12]
 8007f40:	071a      	lsls	r2, r3, #28
 8007f42:	d52f      	bpl.n	8007fa4 <__swbuf_r+0x84>
 8007f44:	6923      	ldr	r3, [r4, #16]
 8007f46:	b36b      	cbz	r3, 8007fa4 <__swbuf_r+0x84>
 8007f48:	6923      	ldr	r3, [r4, #16]
 8007f4a:	6820      	ldr	r0, [r4, #0]
 8007f4c:	1ac0      	subs	r0, r0, r3
 8007f4e:	6963      	ldr	r3, [r4, #20]
 8007f50:	b2f6      	uxtb	r6, r6
 8007f52:	4283      	cmp	r3, r0
 8007f54:	4637      	mov	r7, r6
 8007f56:	dc04      	bgt.n	8007f62 <__swbuf_r+0x42>
 8007f58:	4621      	mov	r1, r4
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	f000 f926 	bl	80081ac <_fflush_r>
 8007f60:	bb30      	cbnz	r0, 8007fb0 <__swbuf_r+0x90>
 8007f62:	68a3      	ldr	r3, [r4, #8]
 8007f64:	3b01      	subs	r3, #1
 8007f66:	60a3      	str	r3, [r4, #8]
 8007f68:	6823      	ldr	r3, [r4, #0]
 8007f6a:	1c5a      	adds	r2, r3, #1
 8007f6c:	6022      	str	r2, [r4, #0]
 8007f6e:	701e      	strb	r6, [r3, #0]
 8007f70:	6963      	ldr	r3, [r4, #20]
 8007f72:	3001      	adds	r0, #1
 8007f74:	4283      	cmp	r3, r0
 8007f76:	d004      	beq.n	8007f82 <__swbuf_r+0x62>
 8007f78:	89a3      	ldrh	r3, [r4, #12]
 8007f7a:	07db      	lsls	r3, r3, #31
 8007f7c:	d506      	bpl.n	8007f8c <__swbuf_r+0x6c>
 8007f7e:	2e0a      	cmp	r6, #10
 8007f80:	d104      	bne.n	8007f8c <__swbuf_r+0x6c>
 8007f82:	4621      	mov	r1, r4
 8007f84:	4628      	mov	r0, r5
 8007f86:	f000 f911 	bl	80081ac <_fflush_r>
 8007f8a:	b988      	cbnz	r0, 8007fb0 <__swbuf_r+0x90>
 8007f8c:	4638      	mov	r0, r7
 8007f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f90:	4b0a      	ldr	r3, [pc, #40]	; (8007fbc <__swbuf_r+0x9c>)
 8007f92:	429c      	cmp	r4, r3
 8007f94:	d101      	bne.n	8007f9a <__swbuf_r+0x7a>
 8007f96:	68ac      	ldr	r4, [r5, #8]
 8007f98:	e7cf      	b.n	8007f3a <__swbuf_r+0x1a>
 8007f9a:	4b09      	ldr	r3, [pc, #36]	; (8007fc0 <__swbuf_r+0xa0>)
 8007f9c:	429c      	cmp	r4, r3
 8007f9e:	bf08      	it	eq
 8007fa0:	68ec      	ldreq	r4, [r5, #12]
 8007fa2:	e7ca      	b.n	8007f3a <__swbuf_r+0x1a>
 8007fa4:	4621      	mov	r1, r4
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	f000 f80c 	bl	8007fc4 <__swsetup_r>
 8007fac:	2800      	cmp	r0, #0
 8007fae:	d0cb      	beq.n	8007f48 <__swbuf_r+0x28>
 8007fb0:	f04f 37ff 	mov.w	r7, #4294967295
 8007fb4:	e7ea      	b.n	8007f8c <__swbuf_r+0x6c>
 8007fb6:	bf00      	nop
 8007fb8:	0800938c 	.word	0x0800938c
 8007fbc:	080093ac 	.word	0x080093ac
 8007fc0:	0800936c 	.word	0x0800936c

08007fc4 <__swsetup_r>:
 8007fc4:	4b32      	ldr	r3, [pc, #200]	; (8008090 <__swsetup_r+0xcc>)
 8007fc6:	b570      	push	{r4, r5, r6, lr}
 8007fc8:	681d      	ldr	r5, [r3, #0]
 8007fca:	4606      	mov	r6, r0
 8007fcc:	460c      	mov	r4, r1
 8007fce:	b125      	cbz	r5, 8007fda <__swsetup_r+0x16>
 8007fd0:	69ab      	ldr	r3, [r5, #24]
 8007fd2:	b913      	cbnz	r3, 8007fda <__swsetup_r+0x16>
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	f000 f97d 	bl	80082d4 <__sinit>
 8007fda:	4b2e      	ldr	r3, [pc, #184]	; (8008094 <__swsetup_r+0xd0>)
 8007fdc:	429c      	cmp	r4, r3
 8007fde:	d10f      	bne.n	8008000 <__swsetup_r+0x3c>
 8007fe0:	686c      	ldr	r4, [r5, #4]
 8007fe2:	89a3      	ldrh	r3, [r4, #12]
 8007fe4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fe8:	0719      	lsls	r1, r3, #28
 8007fea:	d42c      	bmi.n	8008046 <__swsetup_r+0x82>
 8007fec:	06dd      	lsls	r5, r3, #27
 8007fee:	d411      	bmi.n	8008014 <__swsetup_r+0x50>
 8007ff0:	2309      	movs	r3, #9
 8007ff2:	6033      	str	r3, [r6, #0]
 8007ff4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ff8:	81a3      	strh	r3, [r4, #12]
 8007ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8007ffe:	e03e      	b.n	800807e <__swsetup_r+0xba>
 8008000:	4b25      	ldr	r3, [pc, #148]	; (8008098 <__swsetup_r+0xd4>)
 8008002:	429c      	cmp	r4, r3
 8008004:	d101      	bne.n	800800a <__swsetup_r+0x46>
 8008006:	68ac      	ldr	r4, [r5, #8]
 8008008:	e7eb      	b.n	8007fe2 <__swsetup_r+0x1e>
 800800a:	4b24      	ldr	r3, [pc, #144]	; (800809c <__swsetup_r+0xd8>)
 800800c:	429c      	cmp	r4, r3
 800800e:	bf08      	it	eq
 8008010:	68ec      	ldreq	r4, [r5, #12]
 8008012:	e7e6      	b.n	8007fe2 <__swsetup_r+0x1e>
 8008014:	0758      	lsls	r0, r3, #29
 8008016:	d512      	bpl.n	800803e <__swsetup_r+0x7a>
 8008018:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800801a:	b141      	cbz	r1, 800802e <__swsetup_r+0x6a>
 800801c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008020:	4299      	cmp	r1, r3
 8008022:	d002      	beq.n	800802a <__swsetup_r+0x66>
 8008024:	4630      	mov	r0, r6
 8008026:	f000 fa5b 	bl	80084e0 <_free_r>
 800802a:	2300      	movs	r3, #0
 800802c:	6363      	str	r3, [r4, #52]	; 0x34
 800802e:	89a3      	ldrh	r3, [r4, #12]
 8008030:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008034:	81a3      	strh	r3, [r4, #12]
 8008036:	2300      	movs	r3, #0
 8008038:	6063      	str	r3, [r4, #4]
 800803a:	6923      	ldr	r3, [r4, #16]
 800803c:	6023      	str	r3, [r4, #0]
 800803e:	89a3      	ldrh	r3, [r4, #12]
 8008040:	f043 0308 	orr.w	r3, r3, #8
 8008044:	81a3      	strh	r3, [r4, #12]
 8008046:	6923      	ldr	r3, [r4, #16]
 8008048:	b94b      	cbnz	r3, 800805e <__swsetup_r+0x9a>
 800804a:	89a3      	ldrh	r3, [r4, #12]
 800804c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008054:	d003      	beq.n	800805e <__swsetup_r+0x9a>
 8008056:	4621      	mov	r1, r4
 8008058:	4630      	mov	r0, r6
 800805a:	f000 fa01 	bl	8008460 <__smakebuf_r>
 800805e:	89a0      	ldrh	r0, [r4, #12]
 8008060:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008064:	f010 0301 	ands.w	r3, r0, #1
 8008068:	d00a      	beq.n	8008080 <__swsetup_r+0xbc>
 800806a:	2300      	movs	r3, #0
 800806c:	60a3      	str	r3, [r4, #8]
 800806e:	6963      	ldr	r3, [r4, #20]
 8008070:	425b      	negs	r3, r3
 8008072:	61a3      	str	r3, [r4, #24]
 8008074:	6923      	ldr	r3, [r4, #16]
 8008076:	b943      	cbnz	r3, 800808a <__swsetup_r+0xc6>
 8008078:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800807c:	d1ba      	bne.n	8007ff4 <__swsetup_r+0x30>
 800807e:	bd70      	pop	{r4, r5, r6, pc}
 8008080:	0781      	lsls	r1, r0, #30
 8008082:	bf58      	it	pl
 8008084:	6963      	ldrpl	r3, [r4, #20]
 8008086:	60a3      	str	r3, [r4, #8]
 8008088:	e7f4      	b.n	8008074 <__swsetup_r+0xb0>
 800808a:	2000      	movs	r0, #0
 800808c:	e7f7      	b.n	800807e <__swsetup_r+0xba>
 800808e:	bf00      	nop
 8008090:	200000d4 	.word	0x200000d4
 8008094:	0800938c 	.word	0x0800938c
 8008098:	080093ac 	.word	0x080093ac
 800809c:	0800936c 	.word	0x0800936c

080080a0 <__sflush_r>:
 80080a0:	898a      	ldrh	r2, [r1, #12]
 80080a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080a6:	4605      	mov	r5, r0
 80080a8:	0710      	lsls	r0, r2, #28
 80080aa:	460c      	mov	r4, r1
 80080ac:	d458      	bmi.n	8008160 <__sflush_r+0xc0>
 80080ae:	684b      	ldr	r3, [r1, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	dc05      	bgt.n	80080c0 <__sflush_r+0x20>
 80080b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	dc02      	bgt.n	80080c0 <__sflush_r+0x20>
 80080ba:	2000      	movs	r0, #0
 80080bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080c2:	2e00      	cmp	r6, #0
 80080c4:	d0f9      	beq.n	80080ba <__sflush_r+0x1a>
 80080c6:	2300      	movs	r3, #0
 80080c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80080cc:	682f      	ldr	r7, [r5, #0]
 80080ce:	602b      	str	r3, [r5, #0]
 80080d0:	d032      	beq.n	8008138 <__sflush_r+0x98>
 80080d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80080d4:	89a3      	ldrh	r3, [r4, #12]
 80080d6:	075a      	lsls	r2, r3, #29
 80080d8:	d505      	bpl.n	80080e6 <__sflush_r+0x46>
 80080da:	6863      	ldr	r3, [r4, #4]
 80080dc:	1ac0      	subs	r0, r0, r3
 80080de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080e0:	b10b      	cbz	r3, 80080e6 <__sflush_r+0x46>
 80080e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080e4:	1ac0      	subs	r0, r0, r3
 80080e6:	2300      	movs	r3, #0
 80080e8:	4602      	mov	r2, r0
 80080ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080ec:	6a21      	ldr	r1, [r4, #32]
 80080ee:	4628      	mov	r0, r5
 80080f0:	47b0      	blx	r6
 80080f2:	1c43      	adds	r3, r0, #1
 80080f4:	89a3      	ldrh	r3, [r4, #12]
 80080f6:	d106      	bne.n	8008106 <__sflush_r+0x66>
 80080f8:	6829      	ldr	r1, [r5, #0]
 80080fa:	291d      	cmp	r1, #29
 80080fc:	d82c      	bhi.n	8008158 <__sflush_r+0xb8>
 80080fe:	4a2a      	ldr	r2, [pc, #168]	; (80081a8 <__sflush_r+0x108>)
 8008100:	40ca      	lsrs	r2, r1
 8008102:	07d6      	lsls	r6, r2, #31
 8008104:	d528      	bpl.n	8008158 <__sflush_r+0xb8>
 8008106:	2200      	movs	r2, #0
 8008108:	6062      	str	r2, [r4, #4]
 800810a:	04d9      	lsls	r1, r3, #19
 800810c:	6922      	ldr	r2, [r4, #16]
 800810e:	6022      	str	r2, [r4, #0]
 8008110:	d504      	bpl.n	800811c <__sflush_r+0x7c>
 8008112:	1c42      	adds	r2, r0, #1
 8008114:	d101      	bne.n	800811a <__sflush_r+0x7a>
 8008116:	682b      	ldr	r3, [r5, #0]
 8008118:	b903      	cbnz	r3, 800811c <__sflush_r+0x7c>
 800811a:	6560      	str	r0, [r4, #84]	; 0x54
 800811c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800811e:	602f      	str	r7, [r5, #0]
 8008120:	2900      	cmp	r1, #0
 8008122:	d0ca      	beq.n	80080ba <__sflush_r+0x1a>
 8008124:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008128:	4299      	cmp	r1, r3
 800812a:	d002      	beq.n	8008132 <__sflush_r+0x92>
 800812c:	4628      	mov	r0, r5
 800812e:	f000 f9d7 	bl	80084e0 <_free_r>
 8008132:	2000      	movs	r0, #0
 8008134:	6360      	str	r0, [r4, #52]	; 0x34
 8008136:	e7c1      	b.n	80080bc <__sflush_r+0x1c>
 8008138:	6a21      	ldr	r1, [r4, #32]
 800813a:	2301      	movs	r3, #1
 800813c:	4628      	mov	r0, r5
 800813e:	47b0      	blx	r6
 8008140:	1c41      	adds	r1, r0, #1
 8008142:	d1c7      	bne.n	80080d4 <__sflush_r+0x34>
 8008144:	682b      	ldr	r3, [r5, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d0c4      	beq.n	80080d4 <__sflush_r+0x34>
 800814a:	2b1d      	cmp	r3, #29
 800814c:	d001      	beq.n	8008152 <__sflush_r+0xb2>
 800814e:	2b16      	cmp	r3, #22
 8008150:	d101      	bne.n	8008156 <__sflush_r+0xb6>
 8008152:	602f      	str	r7, [r5, #0]
 8008154:	e7b1      	b.n	80080ba <__sflush_r+0x1a>
 8008156:	89a3      	ldrh	r3, [r4, #12]
 8008158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800815c:	81a3      	strh	r3, [r4, #12]
 800815e:	e7ad      	b.n	80080bc <__sflush_r+0x1c>
 8008160:	690f      	ldr	r7, [r1, #16]
 8008162:	2f00      	cmp	r7, #0
 8008164:	d0a9      	beq.n	80080ba <__sflush_r+0x1a>
 8008166:	0793      	lsls	r3, r2, #30
 8008168:	680e      	ldr	r6, [r1, #0]
 800816a:	bf08      	it	eq
 800816c:	694b      	ldreq	r3, [r1, #20]
 800816e:	600f      	str	r7, [r1, #0]
 8008170:	bf18      	it	ne
 8008172:	2300      	movne	r3, #0
 8008174:	eba6 0807 	sub.w	r8, r6, r7
 8008178:	608b      	str	r3, [r1, #8]
 800817a:	f1b8 0f00 	cmp.w	r8, #0
 800817e:	dd9c      	ble.n	80080ba <__sflush_r+0x1a>
 8008180:	6a21      	ldr	r1, [r4, #32]
 8008182:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008184:	4643      	mov	r3, r8
 8008186:	463a      	mov	r2, r7
 8008188:	4628      	mov	r0, r5
 800818a:	47b0      	blx	r6
 800818c:	2800      	cmp	r0, #0
 800818e:	dc06      	bgt.n	800819e <__sflush_r+0xfe>
 8008190:	89a3      	ldrh	r3, [r4, #12]
 8008192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008196:	81a3      	strh	r3, [r4, #12]
 8008198:	f04f 30ff 	mov.w	r0, #4294967295
 800819c:	e78e      	b.n	80080bc <__sflush_r+0x1c>
 800819e:	4407      	add	r7, r0
 80081a0:	eba8 0800 	sub.w	r8, r8, r0
 80081a4:	e7e9      	b.n	800817a <__sflush_r+0xda>
 80081a6:	bf00      	nop
 80081a8:	20400001 	.word	0x20400001

080081ac <_fflush_r>:
 80081ac:	b538      	push	{r3, r4, r5, lr}
 80081ae:	690b      	ldr	r3, [r1, #16]
 80081b0:	4605      	mov	r5, r0
 80081b2:	460c      	mov	r4, r1
 80081b4:	b913      	cbnz	r3, 80081bc <_fflush_r+0x10>
 80081b6:	2500      	movs	r5, #0
 80081b8:	4628      	mov	r0, r5
 80081ba:	bd38      	pop	{r3, r4, r5, pc}
 80081bc:	b118      	cbz	r0, 80081c6 <_fflush_r+0x1a>
 80081be:	6983      	ldr	r3, [r0, #24]
 80081c0:	b90b      	cbnz	r3, 80081c6 <_fflush_r+0x1a>
 80081c2:	f000 f887 	bl	80082d4 <__sinit>
 80081c6:	4b14      	ldr	r3, [pc, #80]	; (8008218 <_fflush_r+0x6c>)
 80081c8:	429c      	cmp	r4, r3
 80081ca:	d11b      	bne.n	8008204 <_fflush_r+0x58>
 80081cc:	686c      	ldr	r4, [r5, #4]
 80081ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d0ef      	beq.n	80081b6 <_fflush_r+0xa>
 80081d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80081d8:	07d0      	lsls	r0, r2, #31
 80081da:	d404      	bmi.n	80081e6 <_fflush_r+0x3a>
 80081dc:	0599      	lsls	r1, r3, #22
 80081de:	d402      	bmi.n	80081e6 <_fflush_r+0x3a>
 80081e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081e2:	f000 f915 	bl	8008410 <__retarget_lock_acquire_recursive>
 80081e6:	4628      	mov	r0, r5
 80081e8:	4621      	mov	r1, r4
 80081ea:	f7ff ff59 	bl	80080a0 <__sflush_r>
 80081ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081f0:	07da      	lsls	r2, r3, #31
 80081f2:	4605      	mov	r5, r0
 80081f4:	d4e0      	bmi.n	80081b8 <_fflush_r+0xc>
 80081f6:	89a3      	ldrh	r3, [r4, #12]
 80081f8:	059b      	lsls	r3, r3, #22
 80081fa:	d4dd      	bmi.n	80081b8 <_fflush_r+0xc>
 80081fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081fe:	f000 f908 	bl	8008412 <__retarget_lock_release_recursive>
 8008202:	e7d9      	b.n	80081b8 <_fflush_r+0xc>
 8008204:	4b05      	ldr	r3, [pc, #20]	; (800821c <_fflush_r+0x70>)
 8008206:	429c      	cmp	r4, r3
 8008208:	d101      	bne.n	800820e <_fflush_r+0x62>
 800820a:	68ac      	ldr	r4, [r5, #8]
 800820c:	e7df      	b.n	80081ce <_fflush_r+0x22>
 800820e:	4b04      	ldr	r3, [pc, #16]	; (8008220 <_fflush_r+0x74>)
 8008210:	429c      	cmp	r4, r3
 8008212:	bf08      	it	eq
 8008214:	68ec      	ldreq	r4, [r5, #12]
 8008216:	e7da      	b.n	80081ce <_fflush_r+0x22>
 8008218:	0800938c 	.word	0x0800938c
 800821c:	080093ac 	.word	0x080093ac
 8008220:	0800936c 	.word	0x0800936c

08008224 <std>:
 8008224:	2300      	movs	r3, #0
 8008226:	b510      	push	{r4, lr}
 8008228:	4604      	mov	r4, r0
 800822a:	e9c0 3300 	strd	r3, r3, [r0]
 800822e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008232:	6083      	str	r3, [r0, #8]
 8008234:	8181      	strh	r1, [r0, #12]
 8008236:	6643      	str	r3, [r0, #100]	; 0x64
 8008238:	81c2      	strh	r2, [r0, #14]
 800823a:	6183      	str	r3, [r0, #24]
 800823c:	4619      	mov	r1, r3
 800823e:	2208      	movs	r2, #8
 8008240:	305c      	adds	r0, #92	; 0x5c
 8008242:	f7ff fda3 	bl	8007d8c <memset>
 8008246:	4b05      	ldr	r3, [pc, #20]	; (800825c <std+0x38>)
 8008248:	6263      	str	r3, [r4, #36]	; 0x24
 800824a:	4b05      	ldr	r3, [pc, #20]	; (8008260 <std+0x3c>)
 800824c:	62a3      	str	r3, [r4, #40]	; 0x28
 800824e:	4b05      	ldr	r3, [pc, #20]	; (8008264 <std+0x40>)
 8008250:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008252:	4b05      	ldr	r3, [pc, #20]	; (8008268 <std+0x44>)
 8008254:	6224      	str	r4, [r4, #32]
 8008256:	6323      	str	r3, [r4, #48]	; 0x30
 8008258:	bd10      	pop	{r4, pc}
 800825a:	bf00      	nop
 800825c:	08008f55 	.word	0x08008f55
 8008260:	08008f77 	.word	0x08008f77
 8008264:	08008faf 	.word	0x08008faf
 8008268:	08008fd3 	.word	0x08008fd3

0800826c <_cleanup_r>:
 800826c:	4901      	ldr	r1, [pc, #4]	; (8008274 <_cleanup_r+0x8>)
 800826e:	f000 b8af 	b.w	80083d0 <_fwalk_reent>
 8008272:	bf00      	nop
 8008274:	080081ad 	.word	0x080081ad

08008278 <__sfmoreglue>:
 8008278:	b570      	push	{r4, r5, r6, lr}
 800827a:	2268      	movs	r2, #104	; 0x68
 800827c:	1e4d      	subs	r5, r1, #1
 800827e:	4355      	muls	r5, r2
 8008280:	460e      	mov	r6, r1
 8008282:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008286:	f000 f997 	bl	80085b8 <_malloc_r>
 800828a:	4604      	mov	r4, r0
 800828c:	b140      	cbz	r0, 80082a0 <__sfmoreglue+0x28>
 800828e:	2100      	movs	r1, #0
 8008290:	e9c0 1600 	strd	r1, r6, [r0]
 8008294:	300c      	adds	r0, #12
 8008296:	60a0      	str	r0, [r4, #8]
 8008298:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800829c:	f7ff fd76 	bl	8007d8c <memset>
 80082a0:	4620      	mov	r0, r4
 80082a2:	bd70      	pop	{r4, r5, r6, pc}

080082a4 <__sfp_lock_acquire>:
 80082a4:	4801      	ldr	r0, [pc, #4]	; (80082ac <__sfp_lock_acquire+0x8>)
 80082a6:	f000 b8b3 	b.w	8008410 <__retarget_lock_acquire_recursive>
 80082aa:	bf00      	nop
 80082ac:	20000399 	.word	0x20000399

080082b0 <__sfp_lock_release>:
 80082b0:	4801      	ldr	r0, [pc, #4]	; (80082b8 <__sfp_lock_release+0x8>)
 80082b2:	f000 b8ae 	b.w	8008412 <__retarget_lock_release_recursive>
 80082b6:	bf00      	nop
 80082b8:	20000399 	.word	0x20000399

080082bc <__sinit_lock_acquire>:
 80082bc:	4801      	ldr	r0, [pc, #4]	; (80082c4 <__sinit_lock_acquire+0x8>)
 80082be:	f000 b8a7 	b.w	8008410 <__retarget_lock_acquire_recursive>
 80082c2:	bf00      	nop
 80082c4:	2000039a 	.word	0x2000039a

080082c8 <__sinit_lock_release>:
 80082c8:	4801      	ldr	r0, [pc, #4]	; (80082d0 <__sinit_lock_release+0x8>)
 80082ca:	f000 b8a2 	b.w	8008412 <__retarget_lock_release_recursive>
 80082ce:	bf00      	nop
 80082d0:	2000039a 	.word	0x2000039a

080082d4 <__sinit>:
 80082d4:	b510      	push	{r4, lr}
 80082d6:	4604      	mov	r4, r0
 80082d8:	f7ff fff0 	bl	80082bc <__sinit_lock_acquire>
 80082dc:	69a3      	ldr	r3, [r4, #24]
 80082de:	b11b      	cbz	r3, 80082e8 <__sinit+0x14>
 80082e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082e4:	f7ff bff0 	b.w	80082c8 <__sinit_lock_release>
 80082e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80082ec:	6523      	str	r3, [r4, #80]	; 0x50
 80082ee:	4b13      	ldr	r3, [pc, #76]	; (800833c <__sinit+0x68>)
 80082f0:	4a13      	ldr	r2, [pc, #76]	; (8008340 <__sinit+0x6c>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80082f6:	42a3      	cmp	r3, r4
 80082f8:	bf04      	itt	eq
 80082fa:	2301      	moveq	r3, #1
 80082fc:	61a3      	streq	r3, [r4, #24]
 80082fe:	4620      	mov	r0, r4
 8008300:	f000 f820 	bl	8008344 <__sfp>
 8008304:	6060      	str	r0, [r4, #4]
 8008306:	4620      	mov	r0, r4
 8008308:	f000 f81c 	bl	8008344 <__sfp>
 800830c:	60a0      	str	r0, [r4, #8]
 800830e:	4620      	mov	r0, r4
 8008310:	f000 f818 	bl	8008344 <__sfp>
 8008314:	2200      	movs	r2, #0
 8008316:	60e0      	str	r0, [r4, #12]
 8008318:	2104      	movs	r1, #4
 800831a:	6860      	ldr	r0, [r4, #4]
 800831c:	f7ff ff82 	bl	8008224 <std>
 8008320:	68a0      	ldr	r0, [r4, #8]
 8008322:	2201      	movs	r2, #1
 8008324:	2109      	movs	r1, #9
 8008326:	f7ff ff7d 	bl	8008224 <std>
 800832a:	68e0      	ldr	r0, [r4, #12]
 800832c:	2202      	movs	r2, #2
 800832e:	2112      	movs	r1, #18
 8008330:	f7ff ff78 	bl	8008224 <std>
 8008334:	2301      	movs	r3, #1
 8008336:	61a3      	str	r3, [r4, #24]
 8008338:	e7d2      	b.n	80082e0 <__sinit+0xc>
 800833a:	bf00      	nop
 800833c:	08009368 	.word	0x08009368
 8008340:	0800826d 	.word	0x0800826d

08008344 <__sfp>:
 8008344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008346:	4607      	mov	r7, r0
 8008348:	f7ff ffac 	bl	80082a4 <__sfp_lock_acquire>
 800834c:	4b1e      	ldr	r3, [pc, #120]	; (80083c8 <__sfp+0x84>)
 800834e:	681e      	ldr	r6, [r3, #0]
 8008350:	69b3      	ldr	r3, [r6, #24]
 8008352:	b913      	cbnz	r3, 800835a <__sfp+0x16>
 8008354:	4630      	mov	r0, r6
 8008356:	f7ff ffbd 	bl	80082d4 <__sinit>
 800835a:	3648      	adds	r6, #72	; 0x48
 800835c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008360:	3b01      	subs	r3, #1
 8008362:	d503      	bpl.n	800836c <__sfp+0x28>
 8008364:	6833      	ldr	r3, [r6, #0]
 8008366:	b30b      	cbz	r3, 80083ac <__sfp+0x68>
 8008368:	6836      	ldr	r6, [r6, #0]
 800836a:	e7f7      	b.n	800835c <__sfp+0x18>
 800836c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008370:	b9d5      	cbnz	r5, 80083a8 <__sfp+0x64>
 8008372:	4b16      	ldr	r3, [pc, #88]	; (80083cc <__sfp+0x88>)
 8008374:	60e3      	str	r3, [r4, #12]
 8008376:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800837a:	6665      	str	r5, [r4, #100]	; 0x64
 800837c:	f000 f847 	bl	800840e <__retarget_lock_init_recursive>
 8008380:	f7ff ff96 	bl	80082b0 <__sfp_lock_release>
 8008384:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008388:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800838c:	6025      	str	r5, [r4, #0]
 800838e:	61a5      	str	r5, [r4, #24]
 8008390:	2208      	movs	r2, #8
 8008392:	4629      	mov	r1, r5
 8008394:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008398:	f7ff fcf8 	bl	8007d8c <memset>
 800839c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80083a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80083a4:	4620      	mov	r0, r4
 80083a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083a8:	3468      	adds	r4, #104	; 0x68
 80083aa:	e7d9      	b.n	8008360 <__sfp+0x1c>
 80083ac:	2104      	movs	r1, #4
 80083ae:	4638      	mov	r0, r7
 80083b0:	f7ff ff62 	bl	8008278 <__sfmoreglue>
 80083b4:	4604      	mov	r4, r0
 80083b6:	6030      	str	r0, [r6, #0]
 80083b8:	2800      	cmp	r0, #0
 80083ba:	d1d5      	bne.n	8008368 <__sfp+0x24>
 80083bc:	f7ff ff78 	bl	80082b0 <__sfp_lock_release>
 80083c0:	230c      	movs	r3, #12
 80083c2:	603b      	str	r3, [r7, #0]
 80083c4:	e7ee      	b.n	80083a4 <__sfp+0x60>
 80083c6:	bf00      	nop
 80083c8:	08009368 	.word	0x08009368
 80083cc:	ffff0001 	.word	0xffff0001

080083d0 <_fwalk_reent>:
 80083d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083d4:	4606      	mov	r6, r0
 80083d6:	4688      	mov	r8, r1
 80083d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80083dc:	2700      	movs	r7, #0
 80083de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80083e2:	f1b9 0901 	subs.w	r9, r9, #1
 80083e6:	d505      	bpl.n	80083f4 <_fwalk_reent+0x24>
 80083e8:	6824      	ldr	r4, [r4, #0]
 80083ea:	2c00      	cmp	r4, #0
 80083ec:	d1f7      	bne.n	80083de <_fwalk_reent+0xe>
 80083ee:	4638      	mov	r0, r7
 80083f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083f4:	89ab      	ldrh	r3, [r5, #12]
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d907      	bls.n	800840a <_fwalk_reent+0x3a>
 80083fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083fe:	3301      	adds	r3, #1
 8008400:	d003      	beq.n	800840a <_fwalk_reent+0x3a>
 8008402:	4629      	mov	r1, r5
 8008404:	4630      	mov	r0, r6
 8008406:	47c0      	blx	r8
 8008408:	4307      	orrs	r7, r0
 800840a:	3568      	adds	r5, #104	; 0x68
 800840c:	e7e9      	b.n	80083e2 <_fwalk_reent+0x12>

0800840e <__retarget_lock_init_recursive>:
 800840e:	4770      	bx	lr

08008410 <__retarget_lock_acquire_recursive>:
 8008410:	4770      	bx	lr

08008412 <__retarget_lock_release_recursive>:
 8008412:	4770      	bx	lr

08008414 <__swhatbuf_r>:
 8008414:	b570      	push	{r4, r5, r6, lr}
 8008416:	460e      	mov	r6, r1
 8008418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800841c:	2900      	cmp	r1, #0
 800841e:	b096      	sub	sp, #88	; 0x58
 8008420:	4614      	mov	r4, r2
 8008422:	461d      	mov	r5, r3
 8008424:	da08      	bge.n	8008438 <__swhatbuf_r+0x24>
 8008426:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800842a:	2200      	movs	r2, #0
 800842c:	602a      	str	r2, [r5, #0]
 800842e:	061a      	lsls	r2, r3, #24
 8008430:	d410      	bmi.n	8008454 <__swhatbuf_r+0x40>
 8008432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008436:	e00e      	b.n	8008456 <__swhatbuf_r+0x42>
 8008438:	466a      	mov	r2, sp
 800843a:	f000 fdf1 	bl	8009020 <_fstat_r>
 800843e:	2800      	cmp	r0, #0
 8008440:	dbf1      	blt.n	8008426 <__swhatbuf_r+0x12>
 8008442:	9a01      	ldr	r2, [sp, #4]
 8008444:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008448:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800844c:	425a      	negs	r2, r3
 800844e:	415a      	adcs	r2, r3
 8008450:	602a      	str	r2, [r5, #0]
 8008452:	e7ee      	b.n	8008432 <__swhatbuf_r+0x1e>
 8008454:	2340      	movs	r3, #64	; 0x40
 8008456:	2000      	movs	r0, #0
 8008458:	6023      	str	r3, [r4, #0]
 800845a:	b016      	add	sp, #88	; 0x58
 800845c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008460 <__smakebuf_r>:
 8008460:	898b      	ldrh	r3, [r1, #12]
 8008462:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008464:	079d      	lsls	r5, r3, #30
 8008466:	4606      	mov	r6, r0
 8008468:	460c      	mov	r4, r1
 800846a:	d507      	bpl.n	800847c <__smakebuf_r+0x1c>
 800846c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008470:	6023      	str	r3, [r4, #0]
 8008472:	6123      	str	r3, [r4, #16]
 8008474:	2301      	movs	r3, #1
 8008476:	6163      	str	r3, [r4, #20]
 8008478:	b002      	add	sp, #8
 800847a:	bd70      	pop	{r4, r5, r6, pc}
 800847c:	ab01      	add	r3, sp, #4
 800847e:	466a      	mov	r2, sp
 8008480:	f7ff ffc8 	bl	8008414 <__swhatbuf_r>
 8008484:	9900      	ldr	r1, [sp, #0]
 8008486:	4605      	mov	r5, r0
 8008488:	4630      	mov	r0, r6
 800848a:	f000 f895 	bl	80085b8 <_malloc_r>
 800848e:	b948      	cbnz	r0, 80084a4 <__smakebuf_r+0x44>
 8008490:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008494:	059a      	lsls	r2, r3, #22
 8008496:	d4ef      	bmi.n	8008478 <__smakebuf_r+0x18>
 8008498:	f023 0303 	bic.w	r3, r3, #3
 800849c:	f043 0302 	orr.w	r3, r3, #2
 80084a0:	81a3      	strh	r3, [r4, #12]
 80084a2:	e7e3      	b.n	800846c <__smakebuf_r+0xc>
 80084a4:	4b0d      	ldr	r3, [pc, #52]	; (80084dc <__smakebuf_r+0x7c>)
 80084a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80084a8:	89a3      	ldrh	r3, [r4, #12]
 80084aa:	6020      	str	r0, [r4, #0]
 80084ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084b0:	81a3      	strh	r3, [r4, #12]
 80084b2:	9b00      	ldr	r3, [sp, #0]
 80084b4:	6163      	str	r3, [r4, #20]
 80084b6:	9b01      	ldr	r3, [sp, #4]
 80084b8:	6120      	str	r0, [r4, #16]
 80084ba:	b15b      	cbz	r3, 80084d4 <__smakebuf_r+0x74>
 80084bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084c0:	4630      	mov	r0, r6
 80084c2:	f000 fdbf 	bl	8009044 <_isatty_r>
 80084c6:	b128      	cbz	r0, 80084d4 <__smakebuf_r+0x74>
 80084c8:	89a3      	ldrh	r3, [r4, #12]
 80084ca:	f023 0303 	bic.w	r3, r3, #3
 80084ce:	f043 0301 	orr.w	r3, r3, #1
 80084d2:	81a3      	strh	r3, [r4, #12]
 80084d4:	89a0      	ldrh	r0, [r4, #12]
 80084d6:	4305      	orrs	r5, r0
 80084d8:	81a5      	strh	r5, [r4, #12]
 80084da:	e7cd      	b.n	8008478 <__smakebuf_r+0x18>
 80084dc:	0800826d 	.word	0x0800826d

080084e0 <_free_r>:
 80084e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084e2:	2900      	cmp	r1, #0
 80084e4:	d044      	beq.n	8008570 <_free_r+0x90>
 80084e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084ea:	9001      	str	r0, [sp, #4]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f1a1 0404 	sub.w	r4, r1, #4
 80084f2:	bfb8      	it	lt
 80084f4:	18e4      	addlt	r4, r4, r3
 80084f6:	f000 fde1 	bl	80090bc <__malloc_lock>
 80084fa:	4a1e      	ldr	r2, [pc, #120]	; (8008574 <_free_r+0x94>)
 80084fc:	9801      	ldr	r0, [sp, #4]
 80084fe:	6813      	ldr	r3, [r2, #0]
 8008500:	b933      	cbnz	r3, 8008510 <_free_r+0x30>
 8008502:	6063      	str	r3, [r4, #4]
 8008504:	6014      	str	r4, [r2, #0]
 8008506:	b003      	add	sp, #12
 8008508:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800850c:	f000 bddc 	b.w	80090c8 <__malloc_unlock>
 8008510:	42a3      	cmp	r3, r4
 8008512:	d908      	bls.n	8008526 <_free_r+0x46>
 8008514:	6825      	ldr	r5, [r4, #0]
 8008516:	1961      	adds	r1, r4, r5
 8008518:	428b      	cmp	r3, r1
 800851a:	bf01      	itttt	eq
 800851c:	6819      	ldreq	r1, [r3, #0]
 800851e:	685b      	ldreq	r3, [r3, #4]
 8008520:	1949      	addeq	r1, r1, r5
 8008522:	6021      	streq	r1, [r4, #0]
 8008524:	e7ed      	b.n	8008502 <_free_r+0x22>
 8008526:	461a      	mov	r2, r3
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	b10b      	cbz	r3, 8008530 <_free_r+0x50>
 800852c:	42a3      	cmp	r3, r4
 800852e:	d9fa      	bls.n	8008526 <_free_r+0x46>
 8008530:	6811      	ldr	r1, [r2, #0]
 8008532:	1855      	adds	r5, r2, r1
 8008534:	42a5      	cmp	r5, r4
 8008536:	d10b      	bne.n	8008550 <_free_r+0x70>
 8008538:	6824      	ldr	r4, [r4, #0]
 800853a:	4421      	add	r1, r4
 800853c:	1854      	adds	r4, r2, r1
 800853e:	42a3      	cmp	r3, r4
 8008540:	6011      	str	r1, [r2, #0]
 8008542:	d1e0      	bne.n	8008506 <_free_r+0x26>
 8008544:	681c      	ldr	r4, [r3, #0]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	6053      	str	r3, [r2, #4]
 800854a:	4421      	add	r1, r4
 800854c:	6011      	str	r1, [r2, #0]
 800854e:	e7da      	b.n	8008506 <_free_r+0x26>
 8008550:	d902      	bls.n	8008558 <_free_r+0x78>
 8008552:	230c      	movs	r3, #12
 8008554:	6003      	str	r3, [r0, #0]
 8008556:	e7d6      	b.n	8008506 <_free_r+0x26>
 8008558:	6825      	ldr	r5, [r4, #0]
 800855a:	1961      	adds	r1, r4, r5
 800855c:	428b      	cmp	r3, r1
 800855e:	bf04      	itt	eq
 8008560:	6819      	ldreq	r1, [r3, #0]
 8008562:	685b      	ldreq	r3, [r3, #4]
 8008564:	6063      	str	r3, [r4, #4]
 8008566:	bf04      	itt	eq
 8008568:	1949      	addeq	r1, r1, r5
 800856a:	6021      	streq	r1, [r4, #0]
 800856c:	6054      	str	r4, [r2, #4]
 800856e:	e7ca      	b.n	8008506 <_free_r+0x26>
 8008570:	b003      	add	sp, #12
 8008572:	bd30      	pop	{r4, r5, pc}
 8008574:	2000039c 	.word	0x2000039c

08008578 <sbrk_aligned>:
 8008578:	b570      	push	{r4, r5, r6, lr}
 800857a:	4e0e      	ldr	r6, [pc, #56]	; (80085b4 <sbrk_aligned+0x3c>)
 800857c:	460c      	mov	r4, r1
 800857e:	6831      	ldr	r1, [r6, #0]
 8008580:	4605      	mov	r5, r0
 8008582:	b911      	cbnz	r1, 800858a <sbrk_aligned+0x12>
 8008584:	f000 fcd6 	bl	8008f34 <_sbrk_r>
 8008588:	6030      	str	r0, [r6, #0]
 800858a:	4621      	mov	r1, r4
 800858c:	4628      	mov	r0, r5
 800858e:	f000 fcd1 	bl	8008f34 <_sbrk_r>
 8008592:	1c43      	adds	r3, r0, #1
 8008594:	d00a      	beq.n	80085ac <sbrk_aligned+0x34>
 8008596:	1cc4      	adds	r4, r0, #3
 8008598:	f024 0403 	bic.w	r4, r4, #3
 800859c:	42a0      	cmp	r0, r4
 800859e:	d007      	beq.n	80085b0 <sbrk_aligned+0x38>
 80085a0:	1a21      	subs	r1, r4, r0
 80085a2:	4628      	mov	r0, r5
 80085a4:	f000 fcc6 	bl	8008f34 <_sbrk_r>
 80085a8:	3001      	adds	r0, #1
 80085aa:	d101      	bne.n	80085b0 <sbrk_aligned+0x38>
 80085ac:	f04f 34ff 	mov.w	r4, #4294967295
 80085b0:	4620      	mov	r0, r4
 80085b2:	bd70      	pop	{r4, r5, r6, pc}
 80085b4:	200003a0 	.word	0x200003a0

080085b8 <_malloc_r>:
 80085b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085bc:	1ccd      	adds	r5, r1, #3
 80085be:	f025 0503 	bic.w	r5, r5, #3
 80085c2:	3508      	adds	r5, #8
 80085c4:	2d0c      	cmp	r5, #12
 80085c6:	bf38      	it	cc
 80085c8:	250c      	movcc	r5, #12
 80085ca:	2d00      	cmp	r5, #0
 80085cc:	4607      	mov	r7, r0
 80085ce:	db01      	blt.n	80085d4 <_malloc_r+0x1c>
 80085d0:	42a9      	cmp	r1, r5
 80085d2:	d905      	bls.n	80085e0 <_malloc_r+0x28>
 80085d4:	230c      	movs	r3, #12
 80085d6:	603b      	str	r3, [r7, #0]
 80085d8:	2600      	movs	r6, #0
 80085da:	4630      	mov	r0, r6
 80085dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085e0:	4e2e      	ldr	r6, [pc, #184]	; (800869c <_malloc_r+0xe4>)
 80085e2:	f000 fd6b 	bl	80090bc <__malloc_lock>
 80085e6:	6833      	ldr	r3, [r6, #0]
 80085e8:	461c      	mov	r4, r3
 80085ea:	bb34      	cbnz	r4, 800863a <_malloc_r+0x82>
 80085ec:	4629      	mov	r1, r5
 80085ee:	4638      	mov	r0, r7
 80085f0:	f7ff ffc2 	bl	8008578 <sbrk_aligned>
 80085f4:	1c43      	adds	r3, r0, #1
 80085f6:	4604      	mov	r4, r0
 80085f8:	d14d      	bne.n	8008696 <_malloc_r+0xde>
 80085fa:	6834      	ldr	r4, [r6, #0]
 80085fc:	4626      	mov	r6, r4
 80085fe:	2e00      	cmp	r6, #0
 8008600:	d140      	bne.n	8008684 <_malloc_r+0xcc>
 8008602:	6823      	ldr	r3, [r4, #0]
 8008604:	4631      	mov	r1, r6
 8008606:	4638      	mov	r0, r7
 8008608:	eb04 0803 	add.w	r8, r4, r3
 800860c:	f000 fc92 	bl	8008f34 <_sbrk_r>
 8008610:	4580      	cmp	r8, r0
 8008612:	d13a      	bne.n	800868a <_malloc_r+0xd2>
 8008614:	6821      	ldr	r1, [r4, #0]
 8008616:	3503      	adds	r5, #3
 8008618:	1a6d      	subs	r5, r5, r1
 800861a:	f025 0503 	bic.w	r5, r5, #3
 800861e:	3508      	adds	r5, #8
 8008620:	2d0c      	cmp	r5, #12
 8008622:	bf38      	it	cc
 8008624:	250c      	movcc	r5, #12
 8008626:	4629      	mov	r1, r5
 8008628:	4638      	mov	r0, r7
 800862a:	f7ff ffa5 	bl	8008578 <sbrk_aligned>
 800862e:	3001      	adds	r0, #1
 8008630:	d02b      	beq.n	800868a <_malloc_r+0xd2>
 8008632:	6823      	ldr	r3, [r4, #0]
 8008634:	442b      	add	r3, r5
 8008636:	6023      	str	r3, [r4, #0]
 8008638:	e00e      	b.n	8008658 <_malloc_r+0xa0>
 800863a:	6822      	ldr	r2, [r4, #0]
 800863c:	1b52      	subs	r2, r2, r5
 800863e:	d41e      	bmi.n	800867e <_malloc_r+0xc6>
 8008640:	2a0b      	cmp	r2, #11
 8008642:	d916      	bls.n	8008672 <_malloc_r+0xba>
 8008644:	1961      	adds	r1, r4, r5
 8008646:	42a3      	cmp	r3, r4
 8008648:	6025      	str	r5, [r4, #0]
 800864a:	bf18      	it	ne
 800864c:	6059      	strne	r1, [r3, #4]
 800864e:	6863      	ldr	r3, [r4, #4]
 8008650:	bf08      	it	eq
 8008652:	6031      	streq	r1, [r6, #0]
 8008654:	5162      	str	r2, [r4, r5]
 8008656:	604b      	str	r3, [r1, #4]
 8008658:	4638      	mov	r0, r7
 800865a:	f104 060b 	add.w	r6, r4, #11
 800865e:	f000 fd33 	bl	80090c8 <__malloc_unlock>
 8008662:	f026 0607 	bic.w	r6, r6, #7
 8008666:	1d23      	adds	r3, r4, #4
 8008668:	1af2      	subs	r2, r6, r3
 800866a:	d0b6      	beq.n	80085da <_malloc_r+0x22>
 800866c:	1b9b      	subs	r3, r3, r6
 800866e:	50a3      	str	r3, [r4, r2]
 8008670:	e7b3      	b.n	80085da <_malloc_r+0x22>
 8008672:	6862      	ldr	r2, [r4, #4]
 8008674:	42a3      	cmp	r3, r4
 8008676:	bf0c      	ite	eq
 8008678:	6032      	streq	r2, [r6, #0]
 800867a:	605a      	strne	r2, [r3, #4]
 800867c:	e7ec      	b.n	8008658 <_malloc_r+0xa0>
 800867e:	4623      	mov	r3, r4
 8008680:	6864      	ldr	r4, [r4, #4]
 8008682:	e7b2      	b.n	80085ea <_malloc_r+0x32>
 8008684:	4634      	mov	r4, r6
 8008686:	6876      	ldr	r6, [r6, #4]
 8008688:	e7b9      	b.n	80085fe <_malloc_r+0x46>
 800868a:	230c      	movs	r3, #12
 800868c:	603b      	str	r3, [r7, #0]
 800868e:	4638      	mov	r0, r7
 8008690:	f000 fd1a 	bl	80090c8 <__malloc_unlock>
 8008694:	e7a1      	b.n	80085da <_malloc_r+0x22>
 8008696:	6025      	str	r5, [r4, #0]
 8008698:	e7de      	b.n	8008658 <_malloc_r+0xa0>
 800869a:	bf00      	nop
 800869c:	2000039c 	.word	0x2000039c

080086a0 <__ssputs_r>:
 80086a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086a4:	688e      	ldr	r6, [r1, #8]
 80086a6:	429e      	cmp	r6, r3
 80086a8:	4682      	mov	sl, r0
 80086aa:	460c      	mov	r4, r1
 80086ac:	4690      	mov	r8, r2
 80086ae:	461f      	mov	r7, r3
 80086b0:	d838      	bhi.n	8008724 <__ssputs_r+0x84>
 80086b2:	898a      	ldrh	r2, [r1, #12]
 80086b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80086b8:	d032      	beq.n	8008720 <__ssputs_r+0x80>
 80086ba:	6825      	ldr	r5, [r4, #0]
 80086bc:	6909      	ldr	r1, [r1, #16]
 80086be:	eba5 0901 	sub.w	r9, r5, r1
 80086c2:	6965      	ldr	r5, [r4, #20]
 80086c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086cc:	3301      	adds	r3, #1
 80086ce:	444b      	add	r3, r9
 80086d0:	106d      	asrs	r5, r5, #1
 80086d2:	429d      	cmp	r5, r3
 80086d4:	bf38      	it	cc
 80086d6:	461d      	movcc	r5, r3
 80086d8:	0553      	lsls	r3, r2, #21
 80086da:	d531      	bpl.n	8008740 <__ssputs_r+0xa0>
 80086dc:	4629      	mov	r1, r5
 80086de:	f7ff ff6b 	bl	80085b8 <_malloc_r>
 80086e2:	4606      	mov	r6, r0
 80086e4:	b950      	cbnz	r0, 80086fc <__ssputs_r+0x5c>
 80086e6:	230c      	movs	r3, #12
 80086e8:	f8ca 3000 	str.w	r3, [sl]
 80086ec:	89a3      	ldrh	r3, [r4, #12]
 80086ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086f2:	81a3      	strh	r3, [r4, #12]
 80086f4:	f04f 30ff 	mov.w	r0, #4294967295
 80086f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086fc:	6921      	ldr	r1, [r4, #16]
 80086fe:	464a      	mov	r2, r9
 8008700:	f7ff fb36 	bl	8007d70 <memcpy>
 8008704:	89a3      	ldrh	r3, [r4, #12]
 8008706:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800870a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800870e:	81a3      	strh	r3, [r4, #12]
 8008710:	6126      	str	r6, [r4, #16]
 8008712:	6165      	str	r5, [r4, #20]
 8008714:	444e      	add	r6, r9
 8008716:	eba5 0509 	sub.w	r5, r5, r9
 800871a:	6026      	str	r6, [r4, #0]
 800871c:	60a5      	str	r5, [r4, #8]
 800871e:	463e      	mov	r6, r7
 8008720:	42be      	cmp	r6, r7
 8008722:	d900      	bls.n	8008726 <__ssputs_r+0x86>
 8008724:	463e      	mov	r6, r7
 8008726:	6820      	ldr	r0, [r4, #0]
 8008728:	4632      	mov	r2, r6
 800872a:	4641      	mov	r1, r8
 800872c:	f000 fcac 	bl	8009088 <memmove>
 8008730:	68a3      	ldr	r3, [r4, #8]
 8008732:	1b9b      	subs	r3, r3, r6
 8008734:	60a3      	str	r3, [r4, #8]
 8008736:	6823      	ldr	r3, [r4, #0]
 8008738:	4433      	add	r3, r6
 800873a:	6023      	str	r3, [r4, #0]
 800873c:	2000      	movs	r0, #0
 800873e:	e7db      	b.n	80086f8 <__ssputs_r+0x58>
 8008740:	462a      	mov	r2, r5
 8008742:	f000 fcc7 	bl	80090d4 <_realloc_r>
 8008746:	4606      	mov	r6, r0
 8008748:	2800      	cmp	r0, #0
 800874a:	d1e1      	bne.n	8008710 <__ssputs_r+0x70>
 800874c:	6921      	ldr	r1, [r4, #16]
 800874e:	4650      	mov	r0, sl
 8008750:	f7ff fec6 	bl	80084e0 <_free_r>
 8008754:	e7c7      	b.n	80086e6 <__ssputs_r+0x46>
	...

08008758 <_svfiprintf_r>:
 8008758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800875c:	4698      	mov	r8, r3
 800875e:	898b      	ldrh	r3, [r1, #12]
 8008760:	061b      	lsls	r3, r3, #24
 8008762:	b09d      	sub	sp, #116	; 0x74
 8008764:	4607      	mov	r7, r0
 8008766:	460d      	mov	r5, r1
 8008768:	4614      	mov	r4, r2
 800876a:	d50e      	bpl.n	800878a <_svfiprintf_r+0x32>
 800876c:	690b      	ldr	r3, [r1, #16]
 800876e:	b963      	cbnz	r3, 800878a <_svfiprintf_r+0x32>
 8008770:	2140      	movs	r1, #64	; 0x40
 8008772:	f7ff ff21 	bl	80085b8 <_malloc_r>
 8008776:	6028      	str	r0, [r5, #0]
 8008778:	6128      	str	r0, [r5, #16]
 800877a:	b920      	cbnz	r0, 8008786 <_svfiprintf_r+0x2e>
 800877c:	230c      	movs	r3, #12
 800877e:	603b      	str	r3, [r7, #0]
 8008780:	f04f 30ff 	mov.w	r0, #4294967295
 8008784:	e0d1      	b.n	800892a <_svfiprintf_r+0x1d2>
 8008786:	2340      	movs	r3, #64	; 0x40
 8008788:	616b      	str	r3, [r5, #20]
 800878a:	2300      	movs	r3, #0
 800878c:	9309      	str	r3, [sp, #36]	; 0x24
 800878e:	2320      	movs	r3, #32
 8008790:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008794:	f8cd 800c 	str.w	r8, [sp, #12]
 8008798:	2330      	movs	r3, #48	; 0x30
 800879a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008944 <_svfiprintf_r+0x1ec>
 800879e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087a2:	f04f 0901 	mov.w	r9, #1
 80087a6:	4623      	mov	r3, r4
 80087a8:	469a      	mov	sl, r3
 80087aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087ae:	b10a      	cbz	r2, 80087b4 <_svfiprintf_r+0x5c>
 80087b0:	2a25      	cmp	r2, #37	; 0x25
 80087b2:	d1f9      	bne.n	80087a8 <_svfiprintf_r+0x50>
 80087b4:	ebba 0b04 	subs.w	fp, sl, r4
 80087b8:	d00b      	beq.n	80087d2 <_svfiprintf_r+0x7a>
 80087ba:	465b      	mov	r3, fp
 80087bc:	4622      	mov	r2, r4
 80087be:	4629      	mov	r1, r5
 80087c0:	4638      	mov	r0, r7
 80087c2:	f7ff ff6d 	bl	80086a0 <__ssputs_r>
 80087c6:	3001      	adds	r0, #1
 80087c8:	f000 80aa 	beq.w	8008920 <_svfiprintf_r+0x1c8>
 80087cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087ce:	445a      	add	r2, fp
 80087d0:	9209      	str	r2, [sp, #36]	; 0x24
 80087d2:	f89a 3000 	ldrb.w	r3, [sl]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	f000 80a2 	beq.w	8008920 <_svfiprintf_r+0x1c8>
 80087dc:	2300      	movs	r3, #0
 80087de:	f04f 32ff 	mov.w	r2, #4294967295
 80087e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087e6:	f10a 0a01 	add.w	sl, sl, #1
 80087ea:	9304      	str	r3, [sp, #16]
 80087ec:	9307      	str	r3, [sp, #28]
 80087ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087f2:	931a      	str	r3, [sp, #104]	; 0x68
 80087f4:	4654      	mov	r4, sl
 80087f6:	2205      	movs	r2, #5
 80087f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087fc:	4851      	ldr	r0, [pc, #324]	; (8008944 <_svfiprintf_r+0x1ec>)
 80087fe:	f7f7 fd0f 	bl	8000220 <memchr>
 8008802:	9a04      	ldr	r2, [sp, #16]
 8008804:	b9d8      	cbnz	r0, 800883e <_svfiprintf_r+0xe6>
 8008806:	06d0      	lsls	r0, r2, #27
 8008808:	bf44      	itt	mi
 800880a:	2320      	movmi	r3, #32
 800880c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008810:	0711      	lsls	r1, r2, #28
 8008812:	bf44      	itt	mi
 8008814:	232b      	movmi	r3, #43	; 0x2b
 8008816:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800881a:	f89a 3000 	ldrb.w	r3, [sl]
 800881e:	2b2a      	cmp	r3, #42	; 0x2a
 8008820:	d015      	beq.n	800884e <_svfiprintf_r+0xf6>
 8008822:	9a07      	ldr	r2, [sp, #28]
 8008824:	4654      	mov	r4, sl
 8008826:	2000      	movs	r0, #0
 8008828:	f04f 0c0a 	mov.w	ip, #10
 800882c:	4621      	mov	r1, r4
 800882e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008832:	3b30      	subs	r3, #48	; 0x30
 8008834:	2b09      	cmp	r3, #9
 8008836:	d94e      	bls.n	80088d6 <_svfiprintf_r+0x17e>
 8008838:	b1b0      	cbz	r0, 8008868 <_svfiprintf_r+0x110>
 800883a:	9207      	str	r2, [sp, #28]
 800883c:	e014      	b.n	8008868 <_svfiprintf_r+0x110>
 800883e:	eba0 0308 	sub.w	r3, r0, r8
 8008842:	fa09 f303 	lsl.w	r3, r9, r3
 8008846:	4313      	orrs	r3, r2
 8008848:	9304      	str	r3, [sp, #16]
 800884a:	46a2      	mov	sl, r4
 800884c:	e7d2      	b.n	80087f4 <_svfiprintf_r+0x9c>
 800884e:	9b03      	ldr	r3, [sp, #12]
 8008850:	1d19      	adds	r1, r3, #4
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	9103      	str	r1, [sp, #12]
 8008856:	2b00      	cmp	r3, #0
 8008858:	bfbb      	ittet	lt
 800885a:	425b      	neglt	r3, r3
 800885c:	f042 0202 	orrlt.w	r2, r2, #2
 8008860:	9307      	strge	r3, [sp, #28]
 8008862:	9307      	strlt	r3, [sp, #28]
 8008864:	bfb8      	it	lt
 8008866:	9204      	strlt	r2, [sp, #16]
 8008868:	7823      	ldrb	r3, [r4, #0]
 800886a:	2b2e      	cmp	r3, #46	; 0x2e
 800886c:	d10c      	bne.n	8008888 <_svfiprintf_r+0x130>
 800886e:	7863      	ldrb	r3, [r4, #1]
 8008870:	2b2a      	cmp	r3, #42	; 0x2a
 8008872:	d135      	bne.n	80088e0 <_svfiprintf_r+0x188>
 8008874:	9b03      	ldr	r3, [sp, #12]
 8008876:	1d1a      	adds	r2, r3, #4
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	9203      	str	r2, [sp, #12]
 800887c:	2b00      	cmp	r3, #0
 800887e:	bfb8      	it	lt
 8008880:	f04f 33ff 	movlt.w	r3, #4294967295
 8008884:	3402      	adds	r4, #2
 8008886:	9305      	str	r3, [sp, #20]
 8008888:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008954 <_svfiprintf_r+0x1fc>
 800888c:	7821      	ldrb	r1, [r4, #0]
 800888e:	2203      	movs	r2, #3
 8008890:	4650      	mov	r0, sl
 8008892:	f7f7 fcc5 	bl	8000220 <memchr>
 8008896:	b140      	cbz	r0, 80088aa <_svfiprintf_r+0x152>
 8008898:	2340      	movs	r3, #64	; 0x40
 800889a:	eba0 000a 	sub.w	r0, r0, sl
 800889e:	fa03 f000 	lsl.w	r0, r3, r0
 80088a2:	9b04      	ldr	r3, [sp, #16]
 80088a4:	4303      	orrs	r3, r0
 80088a6:	3401      	adds	r4, #1
 80088a8:	9304      	str	r3, [sp, #16]
 80088aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ae:	4826      	ldr	r0, [pc, #152]	; (8008948 <_svfiprintf_r+0x1f0>)
 80088b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088b4:	2206      	movs	r2, #6
 80088b6:	f7f7 fcb3 	bl	8000220 <memchr>
 80088ba:	2800      	cmp	r0, #0
 80088bc:	d038      	beq.n	8008930 <_svfiprintf_r+0x1d8>
 80088be:	4b23      	ldr	r3, [pc, #140]	; (800894c <_svfiprintf_r+0x1f4>)
 80088c0:	bb1b      	cbnz	r3, 800890a <_svfiprintf_r+0x1b2>
 80088c2:	9b03      	ldr	r3, [sp, #12]
 80088c4:	3307      	adds	r3, #7
 80088c6:	f023 0307 	bic.w	r3, r3, #7
 80088ca:	3308      	adds	r3, #8
 80088cc:	9303      	str	r3, [sp, #12]
 80088ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088d0:	4433      	add	r3, r6
 80088d2:	9309      	str	r3, [sp, #36]	; 0x24
 80088d4:	e767      	b.n	80087a6 <_svfiprintf_r+0x4e>
 80088d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80088da:	460c      	mov	r4, r1
 80088dc:	2001      	movs	r0, #1
 80088de:	e7a5      	b.n	800882c <_svfiprintf_r+0xd4>
 80088e0:	2300      	movs	r3, #0
 80088e2:	3401      	adds	r4, #1
 80088e4:	9305      	str	r3, [sp, #20]
 80088e6:	4619      	mov	r1, r3
 80088e8:	f04f 0c0a 	mov.w	ip, #10
 80088ec:	4620      	mov	r0, r4
 80088ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088f2:	3a30      	subs	r2, #48	; 0x30
 80088f4:	2a09      	cmp	r2, #9
 80088f6:	d903      	bls.n	8008900 <_svfiprintf_r+0x1a8>
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d0c5      	beq.n	8008888 <_svfiprintf_r+0x130>
 80088fc:	9105      	str	r1, [sp, #20]
 80088fe:	e7c3      	b.n	8008888 <_svfiprintf_r+0x130>
 8008900:	fb0c 2101 	mla	r1, ip, r1, r2
 8008904:	4604      	mov	r4, r0
 8008906:	2301      	movs	r3, #1
 8008908:	e7f0      	b.n	80088ec <_svfiprintf_r+0x194>
 800890a:	ab03      	add	r3, sp, #12
 800890c:	9300      	str	r3, [sp, #0]
 800890e:	462a      	mov	r2, r5
 8008910:	4b0f      	ldr	r3, [pc, #60]	; (8008950 <_svfiprintf_r+0x1f8>)
 8008912:	a904      	add	r1, sp, #16
 8008914:	4638      	mov	r0, r7
 8008916:	f3af 8000 	nop.w
 800891a:	1c42      	adds	r2, r0, #1
 800891c:	4606      	mov	r6, r0
 800891e:	d1d6      	bne.n	80088ce <_svfiprintf_r+0x176>
 8008920:	89ab      	ldrh	r3, [r5, #12]
 8008922:	065b      	lsls	r3, r3, #25
 8008924:	f53f af2c 	bmi.w	8008780 <_svfiprintf_r+0x28>
 8008928:	9809      	ldr	r0, [sp, #36]	; 0x24
 800892a:	b01d      	add	sp, #116	; 0x74
 800892c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008930:	ab03      	add	r3, sp, #12
 8008932:	9300      	str	r3, [sp, #0]
 8008934:	462a      	mov	r2, r5
 8008936:	4b06      	ldr	r3, [pc, #24]	; (8008950 <_svfiprintf_r+0x1f8>)
 8008938:	a904      	add	r1, sp, #16
 800893a:	4638      	mov	r0, r7
 800893c:	f000 f9d4 	bl	8008ce8 <_printf_i>
 8008940:	e7eb      	b.n	800891a <_svfiprintf_r+0x1c2>
 8008942:	bf00      	nop
 8008944:	080093cc 	.word	0x080093cc
 8008948:	080093d6 	.word	0x080093d6
 800894c:	00000000 	.word	0x00000000
 8008950:	080086a1 	.word	0x080086a1
 8008954:	080093d2 	.word	0x080093d2

08008958 <__sfputc_r>:
 8008958:	6893      	ldr	r3, [r2, #8]
 800895a:	3b01      	subs	r3, #1
 800895c:	2b00      	cmp	r3, #0
 800895e:	b410      	push	{r4}
 8008960:	6093      	str	r3, [r2, #8]
 8008962:	da08      	bge.n	8008976 <__sfputc_r+0x1e>
 8008964:	6994      	ldr	r4, [r2, #24]
 8008966:	42a3      	cmp	r3, r4
 8008968:	db01      	blt.n	800896e <__sfputc_r+0x16>
 800896a:	290a      	cmp	r1, #10
 800896c:	d103      	bne.n	8008976 <__sfputc_r+0x1e>
 800896e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008972:	f7ff bad5 	b.w	8007f20 <__swbuf_r>
 8008976:	6813      	ldr	r3, [r2, #0]
 8008978:	1c58      	adds	r0, r3, #1
 800897a:	6010      	str	r0, [r2, #0]
 800897c:	7019      	strb	r1, [r3, #0]
 800897e:	4608      	mov	r0, r1
 8008980:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008984:	4770      	bx	lr

08008986 <__sfputs_r>:
 8008986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008988:	4606      	mov	r6, r0
 800898a:	460f      	mov	r7, r1
 800898c:	4614      	mov	r4, r2
 800898e:	18d5      	adds	r5, r2, r3
 8008990:	42ac      	cmp	r4, r5
 8008992:	d101      	bne.n	8008998 <__sfputs_r+0x12>
 8008994:	2000      	movs	r0, #0
 8008996:	e007      	b.n	80089a8 <__sfputs_r+0x22>
 8008998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800899c:	463a      	mov	r2, r7
 800899e:	4630      	mov	r0, r6
 80089a0:	f7ff ffda 	bl	8008958 <__sfputc_r>
 80089a4:	1c43      	adds	r3, r0, #1
 80089a6:	d1f3      	bne.n	8008990 <__sfputs_r+0xa>
 80089a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080089ac <_vfiprintf_r>:
 80089ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b0:	460d      	mov	r5, r1
 80089b2:	b09d      	sub	sp, #116	; 0x74
 80089b4:	4614      	mov	r4, r2
 80089b6:	4698      	mov	r8, r3
 80089b8:	4606      	mov	r6, r0
 80089ba:	b118      	cbz	r0, 80089c4 <_vfiprintf_r+0x18>
 80089bc:	6983      	ldr	r3, [r0, #24]
 80089be:	b90b      	cbnz	r3, 80089c4 <_vfiprintf_r+0x18>
 80089c0:	f7ff fc88 	bl	80082d4 <__sinit>
 80089c4:	4b89      	ldr	r3, [pc, #548]	; (8008bec <_vfiprintf_r+0x240>)
 80089c6:	429d      	cmp	r5, r3
 80089c8:	d11b      	bne.n	8008a02 <_vfiprintf_r+0x56>
 80089ca:	6875      	ldr	r5, [r6, #4]
 80089cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089ce:	07d9      	lsls	r1, r3, #31
 80089d0:	d405      	bmi.n	80089de <_vfiprintf_r+0x32>
 80089d2:	89ab      	ldrh	r3, [r5, #12]
 80089d4:	059a      	lsls	r2, r3, #22
 80089d6:	d402      	bmi.n	80089de <_vfiprintf_r+0x32>
 80089d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089da:	f7ff fd19 	bl	8008410 <__retarget_lock_acquire_recursive>
 80089de:	89ab      	ldrh	r3, [r5, #12]
 80089e0:	071b      	lsls	r3, r3, #28
 80089e2:	d501      	bpl.n	80089e8 <_vfiprintf_r+0x3c>
 80089e4:	692b      	ldr	r3, [r5, #16]
 80089e6:	b9eb      	cbnz	r3, 8008a24 <_vfiprintf_r+0x78>
 80089e8:	4629      	mov	r1, r5
 80089ea:	4630      	mov	r0, r6
 80089ec:	f7ff faea 	bl	8007fc4 <__swsetup_r>
 80089f0:	b1c0      	cbz	r0, 8008a24 <_vfiprintf_r+0x78>
 80089f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089f4:	07dc      	lsls	r4, r3, #31
 80089f6:	d50e      	bpl.n	8008a16 <_vfiprintf_r+0x6a>
 80089f8:	f04f 30ff 	mov.w	r0, #4294967295
 80089fc:	b01d      	add	sp, #116	; 0x74
 80089fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a02:	4b7b      	ldr	r3, [pc, #492]	; (8008bf0 <_vfiprintf_r+0x244>)
 8008a04:	429d      	cmp	r5, r3
 8008a06:	d101      	bne.n	8008a0c <_vfiprintf_r+0x60>
 8008a08:	68b5      	ldr	r5, [r6, #8]
 8008a0a:	e7df      	b.n	80089cc <_vfiprintf_r+0x20>
 8008a0c:	4b79      	ldr	r3, [pc, #484]	; (8008bf4 <_vfiprintf_r+0x248>)
 8008a0e:	429d      	cmp	r5, r3
 8008a10:	bf08      	it	eq
 8008a12:	68f5      	ldreq	r5, [r6, #12]
 8008a14:	e7da      	b.n	80089cc <_vfiprintf_r+0x20>
 8008a16:	89ab      	ldrh	r3, [r5, #12]
 8008a18:	0598      	lsls	r0, r3, #22
 8008a1a:	d4ed      	bmi.n	80089f8 <_vfiprintf_r+0x4c>
 8008a1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a1e:	f7ff fcf8 	bl	8008412 <__retarget_lock_release_recursive>
 8008a22:	e7e9      	b.n	80089f8 <_vfiprintf_r+0x4c>
 8008a24:	2300      	movs	r3, #0
 8008a26:	9309      	str	r3, [sp, #36]	; 0x24
 8008a28:	2320      	movs	r3, #32
 8008a2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a32:	2330      	movs	r3, #48	; 0x30
 8008a34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008bf8 <_vfiprintf_r+0x24c>
 8008a38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a3c:	f04f 0901 	mov.w	r9, #1
 8008a40:	4623      	mov	r3, r4
 8008a42:	469a      	mov	sl, r3
 8008a44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a48:	b10a      	cbz	r2, 8008a4e <_vfiprintf_r+0xa2>
 8008a4a:	2a25      	cmp	r2, #37	; 0x25
 8008a4c:	d1f9      	bne.n	8008a42 <_vfiprintf_r+0x96>
 8008a4e:	ebba 0b04 	subs.w	fp, sl, r4
 8008a52:	d00b      	beq.n	8008a6c <_vfiprintf_r+0xc0>
 8008a54:	465b      	mov	r3, fp
 8008a56:	4622      	mov	r2, r4
 8008a58:	4629      	mov	r1, r5
 8008a5a:	4630      	mov	r0, r6
 8008a5c:	f7ff ff93 	bl	8008986 <__sfputs_r>
 8008a60:	3001      	adds	r0, #1
 8008a62:	f000 80aa 	beq.w	8008bba <_vfiprintf_r+0x20e>
 8008a66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a68:	445a      	add	r2, fp
 8008a6a:	9209      	str	r2, [sp, #36]	; 0x24
 8008a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f000 80a2 	beq.w	8008bba <_vfiprintf_r+0x20e>
 8008a76:	2300      	movs	r3, #0
 8008a78:	f04f 32ff 	mov.w	r2, #4294967295
 8008a7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a80:	f10a 0a01 	add.w	sl, sl, #1
 8008a84:	9304      	str	r3, [sp, #16]
 8008a86:	9307      	str	r3, [sp, #28]
 8008a88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a8c:	931a      	str	r3, [sp, #104]	; 0x68
 8008a8e:	4654      	mov	r4, sl
 8008a90:	2205      	movs	r2, #5
 8008a92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a96:	4858      	ldr	r0, [pc, #352]	; (8008bf8 <_vfiprintf_r+0x24c>)
 8008a98:	f7f7 fbc2 	bl	8000220 <memchr>
 8008a9c:	9a04      	ldr	r2, [sp, #16]
 8008a9e:	b9d8      	cbnz	r0, 8008ad8 <_vfiprintf_r+0x12c>
 8008aa0:	06d1      	lsls	r1, r2, #27
 8008aa2:	bf44      	itt	mi
 8008aa4:	2320      	movmi	r3, #32
 8008aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008aaa:	0713      	lsls	r3, r2, #28
 8008aac:	bf44      	itt	mi
 8008aae:	232b      	movmi	r3, #43	; 0x2b
 8008ab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ab4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ab8:	2b2a      	cmp	r3, #42	; 0x2a
 8008aba:	d015      	beq.n	8008ae8 <_vfiprintf_r+0x13c>
 8008abc:	9a07      	ldr	r2, [sp, #28]
 8008abe:	4654      	mov	r4, sl
 8008ac0:	2000      	movs	r0, #0
 8008ac2:	f04f 0c0a 	mov.w	ip, #10
 8008ac6:	4621      	mov	r1, r4
 8008ac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008acc:	3b30      	subs	r3, #48	; 0x30
 8008ace:	2b09      	cmp	r3, #9
 8008ad0:	d94e      	bls.n	8008b70 <_vfiprintf_r+0x1c4>
 8008ad2:	b1b0      	cbz	r0, 8008b02 <_vfiprintf_r+0x156>
 8008ad4:	9207      	str	r2, [sp, #28]
 8008ad6:	e014      	b.n	8008b02 <_vfiprintf_r+0x156>
 8008ad8:	eba0 0308 	sub.w	r3, r0, r8
 8008adc:	fa09 f303 	lsl.w	r3, r9, r3
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	9304      	str	r3, [sp, #16]
 8008ae4:	46a2      	mov	sl, r4
 8008ae6:	e7d2      	b.n	8008a8e <_vfiprintf_r+0xe2>
 8008ae8:	9b03      	ldr	r3, [sp, #12]
 8008aea:	1d19      	adds	r1, r3, #4
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	9103      	str	r1, [sp, #12]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	bfbb      	ittet	lt
 8008af4:	425b      	neglt	r3, r3
 8008af6:	f042 0202 	orrlt.w	r2, r2, #2
 8008afa:	9307      	strge	r3, [sp, #28]
 8008afc:	9307      	strlt	r3, [sp, #28]
 8008afe:	bfb8      	it	lt
 8008b00:	9204      	strlt	r2, [sp, #16]
 8008b02:	7823      	ldrb	r3, [r4, #0]
 8008b04:	2b2e      	cmp	r3, #46	; 0x2e
 8008b06:	d10c      	bne.n	8008b22 <_vfiprintf_r+0x176>
 8008b08:	7863      	ldrb	r3, [r4, #1]
 8008b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8008b0c:	d135      	bne.n	8008b7a <_vfiprintf_r+0x1ce>
 8008b0e:	9b03      	ldr	r3, [sp, #12]
 8008b10:	1d1a      	adds	r2, r3, #4
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	9203      	str	r2, [sp, #12]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	bfb8      	it	lt
 8008b1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b1e:	3402      	adds	r4, #2
 8008b20:	9305      	str	r3, [sp, #20]
 8008b22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008c08 <_vfiprintf_r+0x25c>
 8008b26:	7821      	ldrb	r1, [r4, #0]
 8008b28:	2203      	movs	r2, #3
 8008b2a:	4650      	mov	r0, sl
 8008b2c:	f7f7 fb78 	bl	8000220 <memchr>
 8008b30:	b140      	cbz	r0, 8008b44 <_vfiprintf_r+0x198>
 8008b32:	2340      	movs	r3, #64	; 0x40
 8008b34:	eba0 000a 	sub.w	r0, r0, sl
 8008b38:	fa03 f000 	lsl.w	r0, r3, r0
 8008b3c:	9b04      	ldr	r3, [sp, #16]
 8008b3e:	4303      	orrs	r3, r0
 8008b40:	3401      	adds	r4, #1
 8008b42:	9304      	str	r3, [sp, #16]
 8008b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b48:	482c      	ldr	r0, [pc, #176]	; (8008bfc <_vfiprintf_r+0x250>)
 8008b4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b4e:	2206      	movs	r2, #6
 8008b50:	f7f7 fb66 	bl	8000220 <memchr>
 8008b54:	2800      	cmp	r0, #0
 8008b56:	d03f      	beq.n	8008bd8 <_vfiprintf_r+0x22c>
 8008b58:	4b29      	ldr	r3, [pc, #164]	; (8008c00 <_vfiprintf_r+0x254>)
 8008b5a:	bb1b      	cbnz	r3, 8008ba4 <_vfiprintf_r+0x1f8>
 8008b5c:	9b03      	ldr	r3, [sp, #12]
 8008b5e:	3307      	adds	r3, #7
 8008b60:	f023 0307 	bic.w	r3, r3, #7
 8008b64:	3308      	adds	r3, #8
 8008b66:	9303      	str	r3, [sp, #12]
 8008b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b6a:	443b      	add	r3, r7
 8008b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b6e:	e767      	b.n	8008a40 <_vfiprintf_r+0x94>
 8008b70:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b74:	460c      	mov	r4, r1
 8008b76:	2001      	movs	r0, #1
 8008b78:	e7a5      	b.n	8008ac6 <_vfiprintf_r+0x11a>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	3401      	adds	r4, #1
 8008b7e:	9305      	str	r3, [sp, #20]
 8008b80:	4619      	mov	r1, r3
 8008b82:	f04f 0c0a 	mov.w	ip, #10
 8008b86:	4620      	mov	r0, r4
 8008b88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b8c:	3a30      	subs	r2, #48	; 0x30
 8008b8e:	2a09      	cmp	r2, #9
 8008b90:	d903      	bls.n	8008b9a <_vfiprintf_r+0x1ee>
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d0c5      	beq.n	8008b22 <_vfiprintf_r+0x176>
 8008b96:	9105      	str	r1, [sp, #20]
 8008b98:	e7c3      	b.n	8008b22 <_vfiprintf_r+0x176>
 8008b9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b9e:	4604      	mov	r4, r0
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e7f0      	b.n	8008b86 <_vfiprintf_r+0x1da>
 8008ba4:	ab03      	add	r3, sp, #12
 8008ba6:	9300      	str	r3, [sp, #0]
 8008ba8:	462a      	mov	r2, r5
 8008baa:	4b16      	ldr	r3, [pc, #88]	; (8008c04 <_vfiprintf_r+0x258>)
 8008bac:	a904      	add	r1, sp, #16
 8008bae:	4630      	mov	r0, r6
 8008bb0:	f3af 8000 	nop.w
 8008bb4:	4607      	mov	r7, r0
 8008bb6:	1c78      	adds	r0, r7, #1
 8008bb8:	d1d6      	bne.n	8008b68 <_vfiprintf_r+0x1bc>
 8008bba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bbc:	07d9      	lsls	r1, r3, #31
 8008bbe:	d405      	bmi.n	8008bcc <_vfiprintf_r+0x220>
 8008bc0:	89ab      	ldrh	r3, [r5, #12]
 8008bc2:	059a      	lsls	r2, r3, #22
 8008bc4:	d402      	bmi.n	8008bcc <_vfiprintf_r+0x220>
 8008bc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bc8:	f7ff fc23 	bl	8008412 <__retarget_lock_release_recursive>
 8008bcc:	89ab      	ldrh	r3, [r5, #12]
 8008bce:	065b      	lsls	r3, r3, #25
 8008bd0:	f53f af12 	bmi.w	80089f8 <_vfiprintf_r+0x4c>
 8008bd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008bd6:	e711      	b.n	80089fc <_vfiprintf_r+0x50>
 8008bd8:	ab03      	add	r3, sp, #12
 8008bda:	9300      	str	r3, [sp, #0]
 8008bdc:	462a      	mov	r2, r5
 8008bde:	4b09      	ldr	r3, [pc, #36]	; (8008c04 <_vfiprintf_r+0x258>)
 8008be0:	a904      	add	r1, sp, #16
 8008be2:	4630      	mov	r0, r6
 8008be4:	f000 f880 	bl	8008ce8 <_printf_i>
 8008be8:	e7e4      	b.n	8008bb4 <_vfiprintf_r+0x208>
 8008bea:	bf00      	nop
 8008bec:	0800938c 	.word	0x0800938c
 8008bf0:	080093ac 	.word	0x080093ac
 8008bf4:	0800936c 	.word	0x0800936c
 8008bf8:	080093cc 	.word	0x080093cc
 8008bfc:	080093d6 	.word	0x080093d6
 8008c00:	00000000 	.word	0x00000000
 8008c04:	08008987 	.word	0x08008987
 8008c08:	080093d2 	.word	0x080093d2

08008c0c <_printf_common>:
 8008c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c10:	4616      	mov	r6, r2
 8008c12:	4699      	mov	r9, r3
 8008c14:	688a      	ldr	r2, [r1, #8]
 8008c16:	690b      	ldr	r3, [r1, #16]
 8008c18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	bfb8      	it	lt
 8008c20:	4613      	movlt	r3, r2
 8008c22:	6033      	str	r3, [r6, #0]
 8008c24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c28:	4607      	mov	r7, r0
 8008c2a:	460c      	mov	r4, r1
 8008c2c:	b10a      	cbz	r2, 8008c32 <_printf_common+0x26>
 8008c2e:	3301      	adds	r3, #1
 8008c30:	6033      	str	r3, [r6, #0]
 8008c32:	6823      	ldr	r3, [r4, #0]
 8008c34:	0699      	lsls	r1, r3, #26
 8008c36:	bf42      	ittt	mi
 8008c38:	6833      	ldrmi	r3, [r6, #0]
 8008c3a:	3302      	addmi	r3, #2
 8008c3c:	6033      	strmi	r3, [r6, #0]
 8008c3e:	6825      	ldr	r5, [r4, #0]
 8008c40:	f015 0506 	ands.w	r5, r5, #6
 8008c44:	d106      	bne.n	8008c54 <_printf_common+0x48>
 8008c46:	f104 0a19 	add.w	sl, r4, #25
 8008c4a:	68e3      	ldr	r3, [r4, #12]
 8008c4c:	6832      	ldr	r2, [r6, #0]
 8008c4e:	1a9b      	subs	r3, r3, r2
 8008c50:	42ab      	cmp	r3, r5
 8008c52:	dc26      	bgt.n	8008ca2 <_printf_common+0x96>
 8008c54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c58:	1e13      	subs	r3, r2, #0
 8008c5a:	6822      	ldr	r2, [r4, #0]
 8008c5c:	bf18      	it	ne
 8008c5e:	2301      	movne	r3, #1
 8008c60:	0692      	lsls	r2, r2, #26
 8008c62:	d42b      	bmi.n	8008cbc <_printf_common+0xb0>
 8008c64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c68:	4649      	mov	r1, r9
 8008c6a:	4638      	mov	r0, r7
 8008c6c:	47c0      	blx	r8
 8008c6e:	3001      	adds	r0, #1
 8008c70:	d01e      	beq.n	8008cb0 <_printf_common+0xa4>
 8008c72:	6823      	ldr	r3, [r4, #0]
 8008c74:	68e5      	ldr	r5, [r4, #12]
 8008c76:	6832      	ldr	r2, [r6, #0]
 8008c78:	f003 0306 	and.w	r3, r3, #6
 8008c7c:	2b04      	cmp	r3, #4
 8008c7e:	bf08      	it	eq
 8008c80:	1aad      	subeq	r5, r5, r2
 8008c82:	68a3      	ldr	r3, [r4, #8]
 8008c84:	6922      	ldr	r2, [r4, #16]
 8008c86:	bf0c      	ite	eq
 8008c88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c8c:	2500      	movne	r5, #0
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	bfc4      	itt	gt
 8008c92:	1a9b      	subgt	r3, r3, r2
 8008c94:	18ed      	addgt	r5, r5, r3
 8008c96:	2600      	movs	r6, #0
 8008c98:	341a      	adds	r4, #26
 8008c9a:	42b5      	cmp	r5, r6
 8008c9c:	d11a      	bne.n	8008cd4 <_printf_common+0xc8>
 8008c9e:	2000      	movs	r0, #0
 8008ca0:	e008      	b.n	8008cb4 <_printf_common+0xa8>
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	4652      	mov	r2, sl
 8008ca6:	4649      	mov	r1, r9
 8008ca8:	4638      	mov	r0, r7
 8008caa:	47c0      	blx	r8
 8008cac:	3001      	adds	r0, #1
 8008cae:	d103      	bne.n	8008cb8 <_printf_common+0xac>
 8008cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cb8:	3501      	adds	r5, #1
 8008cba:	e7c6      	b.n	8008c4a <_printf_common+0x3e>
 8008cbc:	18e1      	adds	r1, r4, r3
 8008cbe:	1c5a      	adds	r2, r3, #1
 8008cc0:	2030      	movs	r0, #48	; 0x30
 8008cc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008cc6:	4422      	add	r2, r4
 8008cc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ccc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008cd0:	3302      	adds	r3, #2
 8008cd2:	e7c7      	b.n	8008c64 <_printf_common+0x58>
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	4622      	mov	r2, r4
 8008cd8:	4649      	mov	r1, r9
 8008cda:	4638      	mov	r0, r7
 8008cdc:	47c0      	blx	r8
 8008cde:	3001      	adds	r0, #1
 8008ce0:	d0e6      	beq.n	8008cb0 <_printf_common+0xa4>
 8008ce2:	3601      	adds	r6, #1
 8008ce4:	e7d9      	b.n	8008c9a <_printf_common+0x8e>
	...

08008ce8 <_printf_i>:
 8008ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cec:	7e0f      	ldrb	r7, [r1, #24]
 8008cee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008cf0:	2f78      	cmp	r7, #120	; 0x78
 8008cf2:	4691      	mov	r9, r2
 8008cf4:	4680      	mov	r8, r0
 8008cf6:	460c      	mov	r4, r1
 8008cf8:	469a      	mov	sl, r3
 8008cfa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008cfe:	d807      	bhi.n	8008d10 <_printf_i+0x28>
 8008d00:	2f62      	cmp	r7, #98	; 0x62
 8008d02:	d80a      	bhi.n	8008d1a <_printf_i+0x32>
 8008d04:	2f00      	cmp	r7, #0
 8008d06:	f000 80d8 	beq.w	8008eba <_printf_i+0x1d2>
 8008d0a:	2f58      	cmp	r7, #88	; 0x58
 8008d0c:	f000 80a3 	beq.w	8008e56 <_printf_i+0x16e>
 8008d10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d18:	e03a      	b.n	8008d90 <_printf_i+0xa8>
 8008d1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d1e:	2b15      	cmp	r3, #21
 8008d20:	d8f6      	bhi.n	8008d10 <_printf_i+0x28>
 8008d22:	a101      	add	r1, pc, #4	; (adr r1, 8008d28 <_printf_i+0x40>)
 8008d24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d28:	08008d81 	.word	0x08008d81
 8008d2c:	08008d95 	.word	0x08008d95
 8008d30:	08008d11 	.word	0x08008d11
 8008d34:	08008d11 	.word	0x08008d11
 8008d38:	08008d11 	.word	0x08008d11
 8008d3c:	08008d11 	.word	0x08008d11
 8008d40:	08008d95 	.word	0x08008d95
 8008d44:	08008d11 	.word	0x08008d11
 8008d48:	08008d11 	.word	0x08008d11
 8008d4c:	08008d11 	.word	0x08008d11
 8008d50:	08008d11 	.word	0x08008d11
 8008d54:	08008ea1 	.word	0x08008ea1
 8008d58:	08008dc5 	.word	0x08008dc5
 8008d5c:	08008e83 	.word	0x08008e83
 8008d60:	08008d11 	.word	0x08008d11
 8008d64:	08008d11 	.word	0x08008d11
 8008d68:	08008ec3 	.word	0x08008ec3
 8008d6c:	08008d11 	.word	0x08008d11
 8008d70:	08008dc5 	.word	0x08008dc5
 8008d74:	08008d11 	.word	0x08008d11
 8008d78:	08008d11 	.word	0x08008d11
 8008d7c:	08008e8b 	.word	0x08008e8b
 8008d80:	682b      	ldr	r3, [r5, #0]
 8008d82:	1d1a      	adds	r2, r3, #4
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	602a      	str	r2, [r5, #0]
 8008d88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d90:	2301      	movs	r3, #1
 8008d92:	e0a3      	b.n	8008edc <_printf_i+0x1f4>
 8008d94:	6820      	ldr	r0, [r4, #0]
 8008d96:	6829      	ldr	r1, [r5, #0]
 8008d98:	0606      	lsls	r6, r0, #24
 8008d9a:	f101 0304 	add.w	r3, r1, #4
 8008d9e:	d50a      	bpl.n	8008db6 <_printf_i+0xce>
 8008da0:	680e      	ldr	r6, [r1, #0]
 8008da2:	602b      	str	r3, [r5, #0]
 8008da4:	2e00      	cmp	r6, #0
 8008da6:	da03      	bge.n	8008db0 <_printf_i+0xc8>
 8008da8:	232d      	movs	r3, #45	; 0x2d
 8008daa:	4276      	negs	r6, r6
 8008dac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008db0:	485e      	ldr	r0, [pc, #376]	; (8008f2c <_printf_i+0x244>)
 8008db2:	230a      	movs	r3, #10
 8008db4:	e019      	b.n	8008dea <_printf_i+0x102>
 8008db6:	680e      	ldr	r6, [r1, #0]
 8008db8:	602b      	str	r3, [r5, #0]
 8008dba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008dbe:	bf18      	it	ne
 8008dc0:	b236      	sxthne	r6, r6
 8008dc2:	e7ef      	b.n	8008da4 <_printf_i+0xbc>
 8008dc4:	682b      	ldr	r3, [r5, #0]
 8008dc6:	6820      	ldr	r0, [r4, #0]
 8008dc8:	1d19      	adds	r1, r3, #4
 8008dca:	6029      	str	r1, [r5, #0]
 8008dcc:	0601      	lsls	r1, r0, #24
 8008dce:	d501      	bpl.n	8008dd4 <_printf_i+0xec>
 8008dd0:	681e      	ldr	r6, [r3, #0]
 8008dd2:	e002      	b.n	8008dda <_printf_i+0xf2>
 8008dd4:	0646      	lsls	r6, r0, #25
 8008dd6:	d5fb      	bpl.n	8008dd0 <_printf_i+0xe8>
 8008dd8:	881e      	ldrh	r6, [r3, #0]
 8008dda:	4854      	ldr	r0, [pc, #336]	; (8008f2c <_printf_i+0x244>)
 8008ddc:	2f6f      	cmp	r7, #111	; 0x6f
 8008dde:	bf0c      	ite	eq
 8008de0:	2308      	moveq	r3, #8
 8008de2:	230a      	movne	r3, #10
 8008de4:	2100      	movs	r1, #0
 8008de6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008dea:	6865      	ldr	r5, [r4, #4]
 8008dec:	60a5      	str	r5, [r4, #8]
 8008dee:	2d00      	cmp	r5, #0
 8008df0:	bfa2      	ittt	ge
 8008df2:	6821      	ldrge	r1, [r4, #0]
 8008df4:	f021 0104 	bicge.w	r1, r1, #4
 8008df8:	6021      	strge	r1, [r4, #0]
 8008dfa:	b90e      	cbnz	r6, 8008e00 <_printf_i+0x118>
 8008dfc:	2d00      	cmp	r5, #0
 8008dfe:	d04d      	beq.n	8008e9c <_printf_i+0x1b4>
 8008e00:	4615      	mov	r5, r2
 8008e02:	fbb6 f1f3 	udiv	r1, r6, r3
 8008e06:	fb03 6711 	mls	r7, r3, r1, r6
 8008e0a:	5dc7      	ldrb	r7, [r0, r7]
 8008e0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008e10:	4637      	mov	r7, r6
 8008e12:	42bb      	cmp	r3, r7
 8008e14:	460e      	mov	r6, r1
 8008e16:	d9f4      	bls.n	8008e02 <_printf_i+0x11a>
 8008e18:	2b08      	cmp	r3, #8
 8008e1a:	d10b      	bne.n	8008e34 <_printf_i+0x14c>
 8008e1c:	6823      	ldr	r3, [r4, #0]
 8008e1e:	07de      	lsls	r6, r3, #31
 8008e20:	d508      	bpl.n	8008e34 <_printf_i+0x14c>
 8008e22:	6923      	ldr	r3, [r4, #16]
 8008e24:	6861      	ldr	r1, [r4, #4]
 8008e26:	4299      	cmp	r1, r3
 8008e28:	bfde      	ittt	le
 8008e2a:	2330      	movle	r3, #48	; 0x30
 8008e2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e34:	1b52      	subs	r2, r2, r5
 8008e36:	6122      	str	r2, [r4, #16]
 8008e38:	f8cd a000 	str.w	sl, [sp]
 8008e3c:	464b      	mov	r3, r9
 8008e3e:	aa03      	add	r2, sp, #12
 8008e40:	4621      	mov	r1, r4
 8008e42:	4640      	mov	r0, r8
 8008e44:	f7ff fee2 	bl	8008c0c <_printf_common>
 8008e48:	3001      	adds	r0, #1
 8008e4a:	d14c      	bne.n	8008ee6 <_printf_i+0x1fe>
 8008e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e50:	b004      	add	sp, #16
 8008e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e56:	4835      	ldr	r0, [pc, #212]	; (8008f2c <_printf_i+0x244>)
 8008e58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008e5c:	6829      	ldr	r1, [r5, #0]
 8008e5e:	6823      	ldr	r3, [r4, #0]
 8008e60:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e64:	6029      	str	r1, [r5, #0]
 8008e66:	061d      	lsls	r5, r3, #24
 8008e68:	d514      	bpl.n	8008e94 <_printf_i+0x1ac>
 8008e6a:	07df      	lsls	r7, r3, #31
 8008e6c:	bf44      	itt	mi
 8008e6e:	f043 0320 	orrmi.w	r3, r3, #32
 8008e72:	6023      	strmi	r3, [r4, #0]
 8008e74:	b91e      	cbnz	r6, 8008e7e <_printf_i+0x196>
 8008e76:	6823      	ldr	r3, [r4, #0]
 8008e78:	f023 0320 	bic.w	r3, r3, #32
 8008e7c:	6023      	str	r3, [r4, #0]
 8008e7e:	2310      	movs	r3, #16
 8008e80:	e7b0      	b.n	8008de4 <_printf_i+0xfc>
 8008e82:	6823      	ldr	r3, [r4, #0]
 8008e84:	f043 0320 	orr.w	r3, r3, #32
 8008e88:	6023      	str	r3, [r4, #0]
 8008e8a:	2378      	movs	r3, #120	; 0x78
 8008e8c:	4828      	ldr	r0, [pc, #160]	; (8008f30 <_printf_i+0x248>)
 8008e8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e92:	e7e3      	b.n	8008e5c <_printf_i+0x174>
 8008e94:	0659      	lsls	r1, r3, #25
 8008e96:	bf48      	it	mi
 8008e98:	b2b6      	uxthmi	r6, r6
 8008e9a:	e7e6      	b.n	8008e6a <_printf_i+0x182>
 8008e9c:	4615      	mov	r5, r2
 8008e9e:	e7bb      	b.n	8008e18 <_printf_i+0x130>
 8008ea0:	682b      	ldr	r3, [r5, #0]
 8008ea2:	6826      	ldr	r6, [r4, #0]
 8008ea4:	6961      	ldr	r1, [r4, #20]
 8008ea6:	1d18      	adds	r0, r3, #4
 8008ea8:	6028      	str	r0, [r5, #0]
 8008eaa:	0635      	lsls	r5, r6, #24
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	d501      	bpl.n	8008eb4 <_printf_i+0x1cc>
 8008eb0:	6019      	str	r1, [r3, #0]
 8008eb2:	e002      	b.n	8008eba <_printf_i+0x1d2>
 8008eb4:	0670      	lsls	r0, r6, #25
 8008eb6:	d5fb      	bpl.n	8008eb0 <_printf_i+0x1c8>
 8008eb8:	8019      	strh	r1, [r3, #0]
 8008eba:	2300      	movs	r3, #0
 8008ebc:	6123      	str	r3, [r4, #16]
 8008ebe:	4615      	mov	r5, r2
 8008ec0:	e7ba      	b.n	8008e38 <_printf_i+0x150>
 8008ec2:	682b      	ldr	r3, [r5, #0]
 8008ec4:	1d1a      	adds	r2, r3, #4
 8008ec6:	602a      	str	r2, [r5, #0]
 8008ec8:	681d      	ldr	r5, [r3, #0]
 8008eca:	6862      	ldr	r2, [r4, #4]
 8008ecc:	2100      	movs	r1, #0
 8008ece:	4628      	mov	r0, r5
 8008ed0:	f7f7 f9a6 	bl	8000220 <memchr>
 8008ed4:	b108      	cbz	r0, 8008eda <_printf_i+0x1f2>
 8008ed6:	1b40      	subs	r0, r0, r5
 8008ed8:	6060      	str	r0, [r4, #4]
 8008eda:	6863      	ldr	r3, [r4, #4]
 8008edc:	6123      	str	r3, [r4, #16]
 8008ede:	2300      	movs	r3, #0
 8008ee0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ee4:	e7a8      	b.n	8008e38 <_printf_i+0x150>
 8008ee6:	6923      	ldr	r3, [r4, #16]
 8008ee8:	462a      	mov	r2, r5
 8008eea:	4649      	mov	r1, r9
 8008eec:	4640      	mov	r0, r8
 8008eee:	47d0      	blx	sl
 8008ef0:	3001      	adds	r0, #1
 8008ef2:	d0ab      	beq.n	8008e4c <_printf_i+0x164>
 8008ef4:	6823      	ldr	r3, [r4, #0]
 8008ef6:	079b      	lsls	r3, r3, #30
 8008ef8:	d413      	bmi.n	8008f22 <_printf_i+0x23a>
 8008efa:	68e0      	ldr	r0, [r4, #12]
 8008efc:	9b03      	ldr	r3, [sp, #12]
 8008efe:	4298      	cmp	r0, r3
 8008f00:	bfb8      	it	lt
 8008f02:	4618      	movlt	r0, r3
 8008f04:	e7a4      	b.n	8008e50 <_printf_i+0x168>
 8008f06:	2301      	movs	r3, #1
 8008f08:	4632      	mov	r2, r6
 8008f0a:	4649      	mov	r1, r9
 8008f0c:	4640      	mov	r0, r8
 8008f0e:	47d0      	blx	sl
 8008f10:	3001      	adds	r0, #1
 8008f12:	d09b      	beq.n	8008e4c <_printf_i+0x164>
 8008f14:	3501      	adds	r5, #1
 8008f16:	68e3      	ldr	r3, [r4, #12]
 8008f18:	9903      	ldr	r1, [sp, #12]
 8008f1a:	1a5b      	subs	r3, r3, r1
 8008f1c:	42ab      	cmp	r3, r5
 8008f1e:	dcf2      	bgt.n	8008f06 <_printf_i+0x21e>
 8008f20:	e7eb      	b.n	8008efa <_printf_i+0x212>
 8008f22:	2500      	movs	r5, #0
 8008f24:	f104 0619 	add.w	r6, r4, #25
 8008f28:	e7f5      	b.n	8008f16 <_printf_i+0x22e>
 8008f2a:	bf00      	nop
 8008f2c:	080093dd 	.word	0x080093dd
 8008f30:	080093ee 	.word	0x080093ee

08008f34 <_sbrk_r>:
 8008f34:	b538      	push	{r3, r4, r5, lr}
 8008f36:	4d06      	ldr	r5, [pc, #24]	; (8008f50 <_sbrk_r+0x1c>)
 8008f38:	2300      	movs	r3, #0
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	4608      	mov	r0, r1
 8008f3e:	602b      	str	r3, [r5, #0]
 8008f40:	f7f9 ff54 	bl	8002dec <_sbrk>
 8008f44:	1c43      	adds	r3, r0, #1
 8008f46:	d102      	bne.n	8008f4e <_sbrk_r+0x1a>
 8008f48:	682b      	ldr	r3, [r5, #0]
 8008f4a:	b103      	cbz	r3, 8008f4e <_sbrk_r+0x1a>
 8008f4c:	6023      	str	r3, [r4, #0]
 8008f4e:	bd38      	pop	{r3, r4, r5, pc}
 8008f50:	200003a4 	.word	0x200003a4

08008f54 <__sread>:
 8008f54:	b510      	push	{r4, lr}
 8008f56:	460c      	mov	r4, r1
 8008f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f5c:	f000 f8ea 	bl	8009134 <_read_r>
 8008f60:	2800      	cmp	r0, #0
 8008f62:	bfab      	itete	ge
 8008f64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f66:	89a3      	ldrhlt	r3, [r4, #12]
 8008f68:	181b      	addge	r3, r3, r0
 8008f6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f6e:	bfac      	ite	ge
 8008f70:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f72:	81a3      	strhlt	r3, [r4, #12]
 8008f74:	bd10      	pop	{r4, pc}

08008f76 <__swrite>:
 8008f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f7a:	461f      	mov	r7, r3
 8008f7c:	898b      	ldrh	r3, [r1, #12]
 8008f7e:	05db      	lsls	r3, r3, #23
 8008f80:	4605      	mov	r5, r0
 8008f82:	460c      	mov	r4, r1
 8008f84:	4616      	mov	r6, r2
 8008f86:	d505      	bpl.n	8008f94 <__swrite+0x1e>
 8008f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f8c:	2302      	movs	r3, #2
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f000 f868 	bl	8009064 <_lseek_r>
 8008f94:	89a3      	ldrh	r3, [r4, #12]
 8008f96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f9e:	81a3      	strh	r3, [r4, #12]
 8008fa0:	4632      	mov	r2, r6
 8008fa2:	463b      	mov	r3, r7
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008faa:	f000 b817 	b.w	8008fdc <_write_r>

08008fae <__sseek>:
 8008fae:	b510      	push	{r4, lr}
 8008fb0:	460c      	mov	r4, r1
 8008fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fb6:	f000 f855 	bl	8009064 <_lseek_r>
 8008fba:	1c43      	adds	r3, r0, #1
 8008fbc:	89a3      	ldrh	r3, [r4, #12]
 8008fbe:	bf15      	itete	ne
 8008fc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8008fc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008fc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008fca:	81a3      	strheq	r3, [r4, #12]
 8008fcc:	bf18      	it	ne
 8008fce:	81a3      	strhne	r3, [r4, #12]
 8008fd0:	bd10      	pop	{r4, pc}

08008fd2 <__sclose>:
 8008fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fd6:	f000 b813 	b.w	8009000 <_close_r>
	...

08008fdc <_write_r>:
 8008fdc:	b538      	push	{r3, r4, r5, lr}
 8008fde:	4d07      	ldr	r5, [pc, #28]	; (8008ffc <_write_r+0x20>)
 8008fe0:	4604      	mov	r4, r0
 8008fe2:	4608      	mov	r0, r1
 8008fe4:	4611      	mov	r1, r2
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	602a      	str	r2, [r5, #0]
 8008fea:	461a      	mov	r2, r3
 8008fec:	f7f9 fead 	bl	8002d4a <_write>
 8008ff0:	1c43      	adds	r3, r0, #1
 8008ff2:	d102      	bne.n	8008ffa <_write_r+0x1e>
 8008ff4:	682b      	ldr	r3, [r5, #0]
 8008ff6:	b103      	cbz	r3, 8008ffa <_write_r+0x1e>
 8008ff8:	6023      	str	r3, [r4, #0]
 8008ffa:	bd38      	pop	{r3, r4, r5, pc}
 8008ffc:	200003a4 	.word	0x200003a4

08009000 <_close_r>:
 8009000:	b538      	push	{r3, r4, r5, lr}
 8009002:	4d06      	ldr	r5, [pc, #24]	; (800901c <_close_r+0x1c>)
 8009004:	2300      	movs	r3, #0
 8009006:	4604      	mov	r4, r0
 8009008:	4608      	mov	r0, r1
 800900a:	602b      	str	r3, [r5, #0]
 800900c:	f7f9 feb9 	bl	8002d82 <_close>
 8009010:	1c43      	adds	r3, r0, #1
 8009012:	d102      	bne.n	800901a <_close_r+0x1a>
 8009014:	682b      	ldr	r3, [r5, #0]
 8009016:	b103      	cbz	r3, 800901a <_close_r+0x1a>
 8009018:	6023      	str	r3, [r4, #0]
 800901a:	bd38      	pop	{r3, r4, r5, pc}
 800901c:	200003a4 	.word	0x200003a4

08009020 <_fstat_r>:
 8009020:	b538      	push	{r3, r4, r5, lr}
 8009022:	4d07      	ldr	r5, [pc, #28]	; (8009040 <_fstat_r+0x20>)
 8009024:	2300      	movs	r3, #0
 8009026:	4604      	mov	r4, r0
 8009028:	4608      	mov	r0, r1
 800902a:	4611      	mov	r1, r2
 800902c:	602b      	str	r3, [r5, #0]
 800902e:	f7f9 feb4 	bl	8002d9a <_fstat>
 8009032:	1c43      	adds	r3, r0, #1
 8009034:	d102      	bne.n	800903c <_fstat_r+0x1c>
 8009036:	682b      	ldr	r3, [r5, #0]
 8009038:	b103      	cbz	r3, 800903c <_fstat_r+0x1c>
 800903a:	6023      	str	r3, [r4, #0]
 800903c:	bd38      	pop	{r3, r4, r5, pc}
 800903e:	bf00      	nop
 8009040:	200003a4 	.word	0x200003a4

08009044 <_isatty_r>:
 8009044:	b538      	push	{r3, r4, r5, lr}
 8009046:	4d06      	ldr	r5, [pc, #24]	; (8009060 <_isatty_r+0x1c>)
 8009048:	2300      	movs	r3, #0
 800904a:	4604      	mov	r4, r0
 800904c:	4608      	mov	r0, r1
 800904e:	602b      	str	r3, [r5, #0]
 8009050:	f7f9 feb3 	bl	8002dba <_isatty>
 8009054:	1c43      	adds	r3, r0, #1
 8009056:	d102      	bne.n	800905e <_isatty_r+0x1a>
 8009058:	682b      	ldr	r3, [r5, #0]
 800905a:	b103      	cbz	r3, 800905e <_isatty_r+0x1a>
 800905c:	6023      	str	r3, [r4, #0]
 800905e:	bd38      	pop	{r3, r4, r5, pc}
 8009060:	200003a4 	.word	0x200003a4

08009064 <_lseek_r>:
 8009064:	b538      	push	{r3, r4, r5, lr}
 8009066:	4d07      	ldr	r5, [pc, #28]	; (8009084 <_lseek_r+0x20>)
 8009068:	4604      	mov	r4, r0
 800906a:	4608      	mov	r0, r1
 800906c:	4611      	mov	r1, r2
 800906e:	2200      	movs	r2, #0
 8009070:	602a      	str	r2, [r5, #0]
 8009072:	461a      	mov	r2, r3
 8009074:	f7f9 feac 	bl	8002dd0 <_lseek>
 8009078:	1c43      	adds	r3, r0, #1
 800907a:	d102      	bne.n	8009082 <_lseek_r+0x1e>
 800907c:	682b      	ldr	r3, [r5, #0]
 800907e:	b103      	cbz	r3, 8009082 <_lseek_r+0x1e>
 8009080:	6023      	str	r3, [r4, #0]
 8009082:	bd38      	pop	{r3, r4, r5, pc}
 8009084:	200003a4 	.word	0x200003a4

08009088 <memmove>:
 8009088:	4288      	cmp	r0, r1
 800908a:	b510      	push	{r4, lr}
 800908c:	eb01 0402 	add.w	r4, r1, r2
 8009090:	d902      	bls.n	8009098 <memmove+0x10>
 8009092:	4284      	cmp	r4, r0
 8009094:	4623      	mov	r3, r4
 8009096:	d807      	bhi.n	80090a8 <memmove+0x20>
 8009098:	1e43      	subs	r3, r0, #1
 800909a:	42a1      	cmp	r1, r4
 800909c:	d008      	beq.n	80090b0 <memmove+0x28>
 800909e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090a6:	e7f8      	b.n	800909a <memmove+0x12>
 80090a8:	4402      	add	r2, r0
 80090aa:	4601      	mov	r1, r0
 80090ac:	428a      	cmp	r2, r1
 80090ae:	d100      	bne.n	80090b2 <memmove+0x2a>
 80090b0:	bd10      	pop	{r4, pc}
 80090b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090ba:	e7f7      	b.n	80090ac <memmove+0x24>

080090bc <__malloc_lock>:
 80090bc:	4801      	ldr	r0, [pc, #4]	; (80090c4 <__malloc_lock+0x8>)
 80090be:	f7ff b9a7 	b.w	8008410 <__retarget_lock_acquire_recursive>
 80090c2:	bf00      	nop
 80090c4:	20000398 	.word	0x20000398

080090c8 <__malloc_unlock>:
 80090c8:	4801      	ldr	r0, [pc, #4]	; (80090d0 <__malloc_unlock+0x8>)
 80090ca:	f7ff b9a2 	b.w	8008412 <__retarget_lock_release_recursive>
 80090ce:	bf00      	nop
 80090d0:	20000398 	.word	0x20000398

080090d4 <_realloc_r>:
 80090d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090d8:	4680      	mov	r8, r0
 80090da:	4614      	mov	r4, r2
 80090dc:	460e      	mov	r6, r1
 80090de:	b921      	cbnz	r1, 80090ea <_realloc_r+0x16>
 80090e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090e4:	4611      	mov	r1, r2
 80090e6:	f7ff ba67 	b.w	80085b8 <_malloc_r>
 80090ea:	b92a      	cbnz	r2, 80090f8 <_realloc_r+0x24>
 80090ec:	f7ff f9f8 	bl	80084e0 <_free_r>
 80090f0:	4625      	mov	r5, r4
 80090f2:	4628      	mov	r0, r5
 80090f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090f8:	f000 f82e 	bl	8009158 <_malloc_usable_size_r>
 80090fc:	4284      	cmp	r4, r0
 80090fe:	4607      	mov	r7, r0
 8009100:	d802      	bhi.n	8009108 <_realloc_r+0x34>
 8009102:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009106:	d812      	bhi.n	800912e <_realloc_r+0x5a>
 8009108:	4621      	mov	r1, r4
 800910a:	4640      	mov	r0, r8
 800910c:	f7ff fa54 	bl	80085b8 <_malloc_r>
 8009110:	4605      	mov	r5, r0
 8009112:	2800      	cmp	r0, #0
 8009114:	d0ed      	beq.n	80090f2 <_realloc_r+0x1e>
 8009116:	42bc      	cmp	r4, r7
 8009118:	4622      	mov	r2, r4
 800911a:	4631      	mov	r1, r6
 800911c:	bf28      	it	cs
 800911e:	463a      	movcs	r2, r7
 8009120:	f7fe fe26 	bl	8007d70 <memcpy>
 8009124:	4631      	mov	r1, r6
 8009126:	4640      	mov	r0, r8
 8009128:	f7ff f9da 	bl	80084e0 <_free_r>
 800912c:	e7e1      	b.n	80090f2 <_realloc_r+0x1e>
 800912e:	4635      	mov	r5, r6
 8009130:	e7df      	b.n	80090f2 <_realloc_r+0x1e>
	...

08009134 <_read_r>:
 8009134:	b538      	push	{r3, r4, r5, lr}
 8009136:	4d07      	ldr	r5, [pc, #28]	; (8009154 <_read_r+0x20>)
 8009138:	4604      	mov	r4, r0
 800913a:	4608      	mov	r0, r1
 800913c:	4611      	mov	r1, r2
 800913e:	2200      	movs	r2, #0
 8009140:	602a      	str	r2, [r5, #0]
 8009142:	461a      	mov	r2, r3
 8009144:	f7f9 fde4 	bl	8002d10 <_read>
 8009148:	1c43      	adds	r3, r0, #1
 800914a:	d102      	bne.n	8009152 <_read_r+0x1e>
 800914c:	682b      	ldr	r3, [r5, #0]
 800914e:	b103      	cbz	r3, 8009152 <_read_r+0x1e>
 8009150:	6023      	str	r3, [r4, #0]
 8009152:	bd38      	pop	{r3, r4, r5, pc}
 8009154:	200003a4 	.word	0x200003a4

08009158 <_malloc_usable_size_r>:
 8009158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800915c:	1f18      	subs	r0, r3, #4
 800915e:	2b00      	cmp	r3, #0
 8009160:	bfbc      	itt	lt
 8009162:	580b      	ldrlt	r3, [r1, r0]
 8009164:	18c0      	addlt	r0, r0, r3
 8009166:	4770      	bx	lr

08009168 <_init>:
 8009168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800916a:	bf00      	nop
 800916c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800916e:	bc08      	pop	{r3}
 8009170:	469e      	mov	lr, r3
 8009172:	4770      	bx	lr

08009174 <_fini>:
 8009174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009176:	bf00      	nop
 8009178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800917a:	bc08      	pop	{r3}
 800917c:	469e      	mov	lr, r3
 800917e:	4770      	bx	lr
